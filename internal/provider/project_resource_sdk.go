// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/zchee/terraform-provider-vercel/internal/provider/types"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/operations"
	"math/big"
)

func (r *ProjectResourceModel) ToOperationsCreateProjectRequestBody() *operations.CreateProjectRequestBody {
	buildCommand := new(string)
	if !r.BuildCommand.IsUnknown() && !r.BuildCommand.IsNull() {
		*buildCommand = r.BuildCommand.ValueString()
	} else {
		buildCommand = nil
	}
	commandForIgnoringBuildStep := new(string)
	if !r.CommandForIgnoringBuildStep.IsUnknown() && !r.CommandForIgnoringBuildStep.IsNull() {
		*commandForIgnoringBuildStep = r.CommandForIgnoringBuildStep.ValueString()
	} else {
		commandForIgnoringBuildStep = nil
	}
	devCommand := new(string)
	if !r.DevCommand.IsUnknown() && !r.DevCommand.IsNull() {
		*devCommand = r.DevCommand.ValueString()
	} else {
		devCommand = nil
	}
	var environmentVariables []operations.EnvironmentVariables = []operations.EnvironmentVariables{}
	for _, environmentVariablesItem := range r.EnvironmentVariables {
		gitBranch := new(string)
		if !environmentVariablesItem.GitBranch.IsUnknown() && !environmentVariablesItem.GitBranch.IsNull() {
			*gitBranch = environmentVariablesItem.GitBranch.ValueString()
		} else {
			gitBranch = nil
		}
		key := environmentVariablesItem.Key.ValueString()
		var target operations.CreateProjectTarget
		createProject1 := new(operations.CreateProject1)
		if !environmentVariablesItem.Target.One.IsUnknown() && !environmentVariablesItem.Target.One.IsNull() {
			*createProject1 = operations.CreateProject1(environmentVariablesItem.Target.One.ValueString())
		} else {
			createProject1 = nil
		}
		if createProject1 != nil {
			target = operations.CreateProjectTarget{
				CreateProject1: createProject1,
			}
		}
		var arrayOfTwo []operations.CreateProject2 = []operations.CreateProject2{}
		for _, arrayOfTwoItem := range environmentVariablesItem.Target.ArrayOfTwo {
			arrayOfTwo = append(arrayOfTwo, operations.CreateProject2(arrayOfTwoItem.ValueString()))
		}
		if arrayOfTwo != nil {
			target = operations.CreateProjectTarget{
				ArrayOfTwo: arrayOfTwo,
			}
		}
		typeVar := new(operations.CreateProjectType)
		if !environmentVariablesItem.Type.IsUnknown() && !environmentVariablesItem.Type.IsNull() {
			*typeVar = operations.CreateProjectType(environmentVariablesItem.Type.ValueString())
		} else {
			typeVar = nil
		}
		value := environmentVariablesItem.Value.ValueString()
		environmentVariables = append(environmentVariables, operations.EnvironmentVariables{
			GitBranch: gitBranch,
			Key:       key,
			Target:    target,
			Type:      typeVar,
			Value:     value,
		})
	}
	framework := new(operations.CreateProjectFramework)
	if !r.Framework.IsUnknown() && !r.Framework.IsNull() {
		*framework = operations.CreateProjectFramework(r.Framework.ValueString())
	} else {
		framework = nil
	}
	var gitRepository *operations.GitRepository
	if r.GitRepository != nil {
		repo := r.GitRepository.Repo.ValueString()
		typeVar1 := operations.CreateProjectProjectsType(r.GitRepository.Type.ValueString())
		gitRepository = &operations.GitRepository{
			Repo: repo,
			Type: typeVar1,
		}
	}
	installCommand := new(string)
	if !r.InstallCommand.IsUnknown() && !r.InstallCommand.IsNull() {
		*installCommand = r.InstallCommand.ValueString()
	} else {
		installCommand = nil
	}
	name := r.Name.ValueString()
	outputDirectory := new(string)
	if !r.OutputDirectory.IsUnknown() && !r.OutputDirectory.IsNull() {
		*outputDirectory = r.OutputDirectory.ValueString()
	} else {
		outputDirectory = nil
	}
	publicSource := new(bool)
	if !r.PublicSource.IsUnknown() && !r.PublicSource.IsNull() {
		*publicSource = r.PublicSource.ValueBool()
	} else {
		publicSource = nil
	}
	rootDirectory := new(string)
	if !r.RootDirectory.IsUnknown() && !r.RootDirectory.IsNull() {
		*rootDirectory = r.RootDirectory.ValueString()
	} else {
		rootDirectory = nil
	}
	serverlessFunctionRegion := new(string)
	if !r.ServerlessFunctionRegion.IsUnknown() && !r.ServerlessFunctionRegion.IsNull() {
		*serverlessFunctionRegion = r.ServerlessFunctionRegion.ValueString()
	} else {
		serverlessFunctionRegion = nil
	}
	serverlessFunctionZeroConfigFailover := new(bool)
	if !r.ServerlessFunctionZeroConfigFailover.IsUnknown() && !r.ServerlessFunctionZeroConfigFailover.IsNull() {
		*serverlessFunctionZeroConfigFailover = r.ServerlessFunctionZeroConfigFailover.ValueBool()
	} else {
		serverlessFunctionZeroConfigFailover = nil
	}
	skipGitConnectDuringLink := new(bool)
	if !r.SkipGitConnectDuringLink.IsUnknown() && !r.SkipGitConnectDuringLink.IsNull() {
		*skipGitConnectDuringLink = r.SkipGitConnectDuringLink.ValueBool()
	} else {
		skipGitConnectDuringLink = nil
	}
	out := operations.CreateProjectRequestBody{
		BuildCommand:                         buildCommand,
		CommandForIgnoringBuildStep:          commandForIgnoringBuildStep,
		DevCommand:                           devCommand,
		EnvironmentVariables:                 environmentVariables,
		Framework:                            framework,
		GitRepository:                        gitRepository,
		InstallCommand:                       installCommand,
		Name:                                 name,
		OutputDirectory:                      outputDirectory,
		PublicSource:                         publicSource,
		RootDirectory:                        rootDirectory,
		ServerlessFunctionRegion:             serverlessFunctionRegion,
		ServerlessFunctionZeroConfigFailover: serverlessFunctionZeroConfigFailover,
		SkipGitConnectDuringLink:             skipGitConnectDuringLink,
	}
	return &out
}

func (r *ProjectResourceModel) RefreshFromOperationsCreateProjectResponseBody(resp *operations.CreateProjectResponseBody) {
	if resp != nil {
		r.AccountID = types.StringValue(resp.AccountID)
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.Analytics{}
			if resp.Analytics.CanceledAt != nil {
				r.Analytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.CanceledAt)))
			} else {
				r.Analytics.CanceledAt = types.NumberNull()
			}
			r.Analytics.DisabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.DisabledAt)))
			r.Analytics.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.EnabledAt)))
			r.Analytics.ID = types.StringValue(resp.Analytics.ID)
			if resp.Analytics.PaidAt != nil {
				r.Analytics.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.PaidAt)))
			} else {
				r.Analytics.PaidAt = types.NumberNull()
			}
			if resp.Analytics.SampleRatePercent != nil {
				r.Analytics.SampleRatePercent = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SampleRatePercent)))
			} else {
				r.Analytics.SampleRatePercent = types.NumberNull()
			}
			if resp.Analytics.SpendLimitInDollars != nil {
				r.Analytics.SpendLimitInDollars = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SpendLimitInDollars)))
			} else {
				r.Analytics.SpendLimitInDollars = types.NumberNull()
			}
		}
		r.AutoAssignCustomDomains = types.BoolPointerValue(resp.AutoAssignCustomDomains)
		r.AutoAssignCustomDomainsUpdatedBy = types.StringPointerValue(resp.AutoAssignCustomDomainsUpdatedBy)
		r.AutoExposeSystemEnvs = types.BoolPointerValue(resp.AutoExposeSystemEnvs)
		r.BuildCommand = types.StringPointerValue(resp.BuildCommand)
		r.CommandForIgnoringBuildStep = types.StringPointerValue(resp.CommandForIgnoringBuildStep)
		r.ConcurrencyBucketName = types.StringPointerValue(resp.ConcurrencyBucketName)
		r.ConnectBuildsEnabled = types.BoolPointerValue(resp.ConnectBuildsEnabled)
		r.ConnectConfigurationID = types.StringPointerValue(resp.ConnectConfigurationID)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.CreatedAt)))
		} else {
			r.CreatedAt = types.NumberNull()
		}
		if resp.Crons == nil {
			r.Crons = nil
		} else {
			r.Crons = &tfTypes.CreateProjectCrons{}
			r.Crons.Definitions = []tfTypes.Definitions{}
			if len(r.Crons.Definitions) > len(resp.Crons.Definitions) {
				r.Crons.Definitions = r.Crons.Definitions[:len(resp.Crons.Definitions)]
			}
			for definitionsCount, definitionsItem := range resp.Crons.Definitions {
				var definitions1 tfTypes.Definitions
				definitions1.Host = types.StringValue(definitionsItem.Host)
				definitions1.Path = types.StringValue(definitionsItem.Path)
				definitions1.Schedule = types.StringValue(definitionsItem.Schedule)
				if definitionsCount+1 > len(r.Crons.Definitions) {
					r.Crons.Definitions = append(r.Crons.Definitions, definitions1)
				} else {
					r.Crons.Definitions[definitionsCount].Host = definitions1.Host
					r.Crons.Definitions[definitionsCount].Path = definitions1.Path
					r.Crons.Definitions[definitionsCount].Schedule = definitions1.Schedule
				}
			}
			r.Crons.DeploymentID = types.StringPointerValue(resp.Crons.DeploymentID)
			if resp.Crons.DisabledAt != nil {
				r.Crons.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.Crons.DisabledAt)))
			} else {
				r.Crons.DisabledAt = types.NumberNull()
			}
			r.Crons.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Crons.EnabledAt)))
			r.Crons.UpdatedAt = types.NumberValue(big.NewFloat(float64(resp.Crons.UpdatedAt)))
		}
		r.CustomerSupportCodeVisibility = types.BoolPointerValue(resp.CustomerSupportCodeVisibility)
		if resp.DataCache == nil {
			r.DataCache = nil
		} else {
			r.DataCache = &tfTypes.DataCache{}
			if resp.DataCache.StorageSizeBytes != nil {
				r.DataCache.StorageSizeBytes = types.NumberValue(big.NewFloat(float64(*resp.DataCache.StorageSizeBytes)))
			} else {
				r.DataCache.StorageSizeBytes = types.NumberNull()
			}
			r.DataCache.Unlimited = types.BoolPointerValue(resp.DataCache.Unlimited)
			r.DataCache.UserDisabled = types.BoolValue(resp.DataCache.UserDisabled)
		}
		r.DevCommand = types.StringPointerValue(resp.DevCommand)
		r.DirectoryListing = types.BoolValue(resp.DirectoryListing)
		r.EnablePreviewFeedback = types.BoolPointerValue(resp.EnablePreviewFeedback)
		r.Env = []tfTypes.Env{}
		if len(r.Env) > len(resp.Env) {
			r.Env = r.Env[:len(resp.Env)]
		}
		for envCount, envItem := range resp.Env {
			var env1 tfTypes.Env
			env1.Comment = types.StringPointerValue(envItem.Comment)
			env1.ConfigurationID = types.StringPointerValue(envItem.ConfigurationID)
			if envItem.ContentHint == nil {
				env1.ContentHint = nil
			} else {
				env1.ContentHint = &tfTypes.CreateProjectContentHint{}
				if envItem.ContentHint.CreateProjectProjectsResponse2001 != nil {
					env1.ContentHint.One = &tfTypes.CreateProjectProjectsResponse2001{}
					env1.ContentHint.One.StoreID = types.StringValue(envItem.ContentHint.CreateProjectProjectsResponse2001.StoreID)
					env1.ContentHint.One.Type = types.StringValue(string(envItem.ContentHint.CreateProjectProjectsResponse2001.Type))
				}
				if envItem.ContentHint.CreateProject10 != nil {
					env1.ContentHint.Ten = &tfTypes.CreateProject10{}
					env1.ContentHint.Ten.StoreID = types.StringValue(envItem.ContentHint.CreateProject10.StoreID)
					env1.ContentHint.Ten.Type = types.StringValue(string(envItem.ContentHint.CreateProject10.Type))
				}
				if envItem.ContentHint.CreateProject11 != nil {
					env1.ContentHint.Eleven = &tfTypes.CreateProject11{}
					env1.ContentHint.Eleven.StoreID = types.StringValue(envItem.ContentHint.CreateProject11.StoreID)
					env1.ContentHint.Eleven.Type = types.StringValue(string(envItem.ContentHint.CreateProject11.Type))
				}
				if envItem.ContentHint.CreateProject12 != nil {
					env1.ContentHint.Twelve = &tfTypes.CreateProject12{}
					env1.ContentHint.Twelve.StoreID = types.StringValue(envItem.ContentHint.CreateProject12.StoreID)
					env1.ContentHint.Twelve.Type = types.StringValue(string(envItem.ContentHint.CreateProject12.Type))
				}
				if envItem.ContentHint.CreateProject13 != nil {
					env1.ContentHint.Thirteen = &tfTypes.CreateProject13{}
					env1.ContentHint.Thirteen.StoreID = types.StringValue(envItem.ContentHint.CreateProject13.StoreID)
					env1.ContentHint.Thirteen.Type = types.StringValue(string(envItem.ContentHint.CreateProject13.Type))
				}
				if envItem.ContentHint.CreateProject14 != nil {
					env1.ContentHint.Fourteen = &tfTypes.CreateProject14{}
					env1.ContentHint.Fourteen.StoreID = types.StringValue(envItem.ContentHint.CreateProject14.StoreID)
					env1.ContentHint.Fourteen.Type = types.StringValue(string(envItem.ContentHint.CreateProject14.Type))
				}
				if envItem.ContentHint.CreateProjectProjectsResponse2002 != nil {
					env1.ContentHint.Two = &tfTypes.CreateProjectProjectsResponse2002{}
					env1.ContentHint.Two.StoreID = types.StringValue(envItem.ContentHint.CreateProjectProjectsResponse2002.StoreID)
					env1.ContentHint.Two.Type = types.StringValue(string(envItem.ContentHint.CreateProjectProjectsResponse2002.Type))
				}
				if envItem.ContentHint.CreateProjectProjects3 != nil {
					env1.ContentHint.Three = &tfTypes.CreateProjectProjects3{}
					env1.ContentHint.Three.StoreID = types.StringValue(envItem.ContentHint.CreateProjectProjects3.StoreID)
					env1.ContentHint.Three.Type = types.StringValue(string(envItem.ContentHint.CreateProjectProjects3.Type))
				}
				if envItem.ContentHint.CreateProject4 != nil {
					env1.ContentHint.Four = &tfTypes.CreateProject4{}
					env1.ContentHint.Four.StoreID = types.StringValue(envItem.ContentHint.CreateProject4.StoreID)
					env1.ContentHint.Four.Type = types.StringValue(string(envItem.ContentHint.CreateProject4.Type))
				}
				if envItem.ContentHint.CreateProject5 != nil {
					env1.ContentHint.Five = &tfTypes.CreateProject5{}
					env1.ContentHint.Five.StoreID = types.StringValue(envItem.ContentHint.CreateProject5.StoreID)
					env1.ContentHint.Five.Type = types.StringValue(string(envItem.ContentHint.CreateProject5.Type))
				}
				if envItem.ContentHint.CreateProject6 != nil {
					env1.ContentHint.Six = &tfTypes.CreateProject6{}
					env1.ContentHint.Six.StoreID = types.StringValue(envItem.ContentHint.CreateProject6.StoreID)
					env1.ContentHint.Six.Type = types.StringValue(string(envItem.ContentHint.CreateProject6.Type))
				}
				if envItem.ContentHint.CreateProject7 != nil {
					env1.ContentHint.Seven = &tfTypes.CreateProject7{}
					env1.ContentHint.Seven.StoreID = types.StringValue(envItem.ContentHint.CreateProject7.StoreID)
					env1.ContentHint.Seven.Type = types.StringValue(string(envItem.ContentHint.CreateProject7.Type))
				}
				if envItem.ContentHint.CreateProject8 != nil {
					env1.ContentHint.Eight = &tfTypes.CreateProject8{}
					env1.ContentHint.Eight.StoreID = types.StringValue(envItem.ContentHint.CreateProject8.StoreID)
					env1.ContentHint.Eight.Type = types.StringValue(string(envItem.ContentHint.CreateProject8.Type))
				}
				if envItem.ContentHint.CreateProject9 != nil {
					env1.ContentHint.Nine = &tfTypes.CreateProject9{}
					env1.ContentHint.Nine.StoreID = types.StringValue(envItem.ContentHint.CreateProject9.StoreID)
					env1.ContentHint.Nine.Type = types.StringValue(string(envItem.ContentHint.CreateProject9.Type))
				}
			}
			if envItem.CreatedAt != nil {
				env1.CreatedAt = types.NumberValue(big.NewFloat(float64(*envItem.CreatedAt)))
			} else {
				env1.CreatedAt = types.NumberNull()
			}
			env1.CreatedBy = types.StringPointerValue(envItem.CreatedBy)
			env1.CustomEnvironmentID = types.StringPointerValue(envItem.CustomEnvironmentID)
			env1.Decrypted = types.BoolPointerValue(envItem.Decrypted)
			env1.EdgeConfigID = types.StringPointerValue(envItem.EdgeConfigID)
			env1.EdgeConfigTokenID = types.StringPointerValue(envItem.EdgeConfigTokenID)
			env1.GitBranch = types.StringPointerValue(envItem.GitBranch)
			env1.ID = types.StringPointerValue(envItem.ID)
			if envItem.InternalContentHint == nil {
				env1.InternalContentHint = nil
			} else {
				env1.InternalContentHint = &tfTypes.CreateProjectInternalContentHint{}
				env1.InternalContentHint.EncryptedValue = types.StringValue(envItem.InternalContentHint.EncryptedValue)
				env1.InternalContentHint.Type = types.StringValue(string(envItem.InternalContentHint.Type))
			}
			env1.Key = types.StringValue(envItem.Key)
			if envItem.Target == nil {
				env1.Target = nil
			} else {
				env1.Target = &tfTypes.CreateProjectProjectsTarget{}
				if envItem.Target.ArrayOfOne != nil {
					env1.Target.ArrayOfOne = []types.String{}
					for _, v := range envItem.Target.ArrayOfOne {
						env1.Target.ArrayOfOne = append(env1.Target.ArrayOfOne, types.StringValue(string(v)))
					}
				}
				if envItem.Target.CreateProjectProjectsResponse200ApplicationJSON2 != nil {
					if envItem.Target.CreateProjectProjectsResponse200ApplicationJSON2 != nil {
						env1.Target.Two = types.StringValue(string(*envItem.Target.CreateProjectProjectsResponse200ApplicationJSON2))
					} else {
						env1.Target.Two = types.StringNull()
					}
				}
			}
			env1.Type = types.StringValue(string(envItem.Type))
			if envItem.UpdatedAt != nil {
				env1.UpdatedAt = types.NumberValue(big.NewFloat(float64(*envItem.UpdatedAt)))
			} else {
				env1.UpdatedAt = types.NumberNull()
			}
			env1.UpdatedBy = types.StringPointerValue(envItem.UpdatedBy)
			env1.Value = types.StringValue(envItem.Value)
			if envCount+1 > len(r.Env) {
				r.Env = append(r.Env, env1)
			} else {
				r.Env[envCount].Comment = env1.Comment
				r.Env[envCount].ConfigurationID = env1.ConfigurationID
				r.Env[envCount].ContentHint = env1.ContentHint
				r.Env[envCount].CreatedAt = env1.CreatedAt
				r.Env[envCount].CreatedBy = env1.CreatedBy
				r.Env[envCount].CustomEnvironmentID = env1.CustomEnvironmentID
				r.Env[envCount].Decrypted = env1.Decrypted
				r.Env[envCount].EdgeConfigID = env1.EdgeConfigID
				r.Env[envCount].EdgeConfigTokenID = env1.EdgeConfigTokenID
				r.Env[envCount].GitBranch = env1.GitBranch
				r.Env[envCount].ID = env1.ID
				r.Env[envCount].InternalContentHint = env1.InternalContentHint
				r.Env[envCount].Key = env1.Key
				r.Env[envCount].Target = env1.Target
				r.Env[envCount].Type = env1.Type
				r.Env[envCount].UpdatedAt = env1.UpdatedAt
				r.Env[envCount].UpdatedBy = env1.UpdatedBy
				r.Env[envCount].Value = env1.Value
			}
		}
		if resp.Framework != nil {
			r.Framework = types.StringValue(string(*resp.Framework))
		} else {
			r.Framework = types.StringNull()
		}
		if resp.GitComments == nil {
			r.GitComments = nil
		} else {
			r.GitComments = &tfTypes.GitComments{}
			r.GitComments.OnCommit = types.BoolValue(resp.GitComments.OnCommit)
			r.GitComments.OnPullRequest = types.BoolValue(resp.GitComments.OnPullRequest)
		}
		r.GitForkProtection = types.BoolPointerValue(resp.GitForkProtection)
		r.GitLFS = types.BoolPointerValue(resp.GitLFS)
		r.HasActiveBranches = types.BoolPointerValue(resp.HasActiveBranches)
		r.HasFloatingAliases = types.BoolPointerValue(resp.HasFloatingAliases)
		r.ID = types.StringValue(resp.ID)
		r.InstallCommand = types.StringPointerValue(resp.InstallCommand)
		if resp.LastAliasRequest == nil {
			r.LastAliasRequest = nil
		} else {
			r.LastAliasRequest = &tfTypes.LastAliasRequest{}
			r.LastAliasRequest.FromDeploymentID = types.StringValue(resp.LastAliasRequest.FromDeploymentID)
			r.LastAliasRequest.JobStatus = types.StringValue(string(resp.LastAliasRequest.JobStatus))
			r.LastAliasRequest.RequestedAt = types.NumberValue(big.NewFloat(float64(resp.LastAliasRequest.RequestedAt)))
			r.LastAliasRequest.ToDeploymentID = types.StringValue(resp.LastAliasRequest.ToDeploymentID)
			r.LastAliasRequest.Type = types.StringValue(string(resp.LastAliasRequest.Type))
		}
		if resp.LastRollbackTarget == nil {
			r.LastRollbackTarget = nil
		} else {
			r.LastRollbackTarget = &tfTypes.Schema{}
		}
		r.LatestDeployments = []tfTypes.LatestDeployments{}
		if len(r.LatestDeployments) > len(resp.LatestDeployments) {
			r.LatestDeployments = r.LatestDeployments[:len(resp.LatestDeployments)]
		}
		for latestDeploymentsCount, latestDeploymentsItem := range resp.LatestDeployments {
			var latestDeployments1 tfTypes.LatestDeployments
			latestDeployments1.Alias = []types.String{}
			for _, v := range latestDeploymentsItem.Alias {
				latestDeployments1.Alias = append(latestDeployments1.Alias, types.StringValue(v))
			}
			if latestDeploymentsItem.AliasAssigned == nil {
				latestDeployments1.AliasAssigned = nil
			} else {
				latestDeployments1.AliasAssigned = &tfTypes.CreateDeploymentAliasAssignedAt{}
				if latestDeploymentsItem.AliasAssigned.Number != nil {
					if latestDeploymentsItem.AliasAssigned.Number != nil {
						latestDeployments1.AliasAssigned.Number = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.AliasAssigned.Number)))
					} else {
						latestDeployments1.AliasAssigned.Number = types.NumberNull()
					}
				}
				if latestDeploymentsItem.AliasAssigned.Boolean != nil {
					latestDeployments1.AliasAssigned.Boolean = types.BoolPointerValue(latestDeploymentsItem.AliasAssigned.Boolean)
				}
			}
			if latestDeploymentsItem.AliasError == nil {
				latestDeployments1.AliasError = nil
			} else {
				latestDeployments1.AliasError = &tfTypes.CreateDeploymentAliasError{}
				latestDeployments1.AliasError.Code = types.StringValue(latestDeploymentsItem.AliasError.Code)
				latestDeployments1.AliasError.Message = types.StringValue(latestDeploymentsItem.AliasError.Message)
			}
			latestDeployments1.AliasFinal = types.StringPointerValue(latestDeploymentsItem.AliasFinal)
			latestDeployments1.AutomaticAliases = []types.String{}
			for _, v := range latestDeploymentsItem.AutomaticAliases {
				latestDeployments1.AutomaticAliases = append(latestDeployments1.AutomaticAliases, types.StringValue(v))
			}
			if latestDeploymentsItem.BuildingAt != nil {
				latestDeployments1.BuildingAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.BuildingAt)))
			} else {
				latestDeployments1.BuildingAt = types.NumberNull()
			}
			latestDeployments1.Builds = []tfTypes.CreateProjectBuilds{}
			for buildsCount, buildsItem := range latestDeploymentsItem.Builds {
				var builds1 tfTypes.CreateProjectBuilds
				builds1.Dest = types.StringPointerValue(buildsItem.Dest)
				builds1.Src = types.StringPointerValue(buildsItem.Src)
				builds1.Use = types.StringValue(buildsItem.Use)
				if buildsCount+1 > len(latestDeployments1.Builds) {
					latestDeployments1.Builds = append(latestDeployments1.Builds, builds1)
				} else {
					latestDeployments1.Builds[buildsCount].Dest = builds1.Dest
					latestDeployments1.Builds[buildsCount].Src = builds1.Src
					latestDeployments1.Builds[buildsCount].Use = builds1.Use
				}
			}
			if latestDeploymentsItem.ChecksConclusion != nil {
				latestDeployments1.ChecksConclusion = types.StringValue(string(*latestDeploymentsItem.ChecksConclusion))
			} else {
				latestDeployments1.ChecksConclusion = types.StringNull()
			}
			if latestDeploymentsItem.ChecksState != nil {
				latestDeployments1.ChecksState = types.StringValue(string(*latestDeploymentsItem.ChecksState))
			} else {
				latestDeployments1.ChecksState = types.StringNull()
			}
			latestDeployments1.ConnectBuildsEnabled = types.BoolPointerValue(latestDeploymentsItem.ConnectBuildsEnabled)
			latestDeployments1.ConnectConfigurationID = types.StringPointerValue(latestDeploymentsItem.ConnectConfigurationID)
			latestDeployments1.CreatedAt = types.NumberValue(big.NewFloat(float64(latestDeploymentsItem.CreatedAt)))
			latestDeployments1.CreatedIn = types.StringValue(latestDeploymentsItem.CreatedIn)
			if latestDeploymentsItem.Creator == nil {
				latestDeployments1.Creator = nil
			} else {
				latestDeployments1.Creator = &tfTypes.CreateProjectCreator{}
				latestDeployments1.Creator.Email = types.StringValue(latestDeploymentsItem.Creator.Email)
				latestDeployments1.Creator.GithubLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GithubLogin)
				latestDeployments1.Creator.GitlabLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GitlabLogin)
				latestDeployments1.Creator.UID = types.StringValue(latestDeploymentsItem.Creator.UID)
				latestDeployments1.Creator.Username = types.StringValue(latestDeploymentsItem.Creator.Username)
			}
			latestDeployments1.DeploymentHostname = types.StringValue(latestDeploymentsItem.DeploymentHostname)
			latestDeployments1.Forced = types.BoolPointerValue(latestDeploymentsItem.Forced)
			latestDeployments1.ID = types.StringValue(latestDeploymentsItem.ID)
			if len(latestDeploymentsItem.Meta) > 0 {
				latestDeployments1.Meta = make(map[string]types.String)
				for key1, value1 := range latestDeploymentsItem.Meta {
					latestDeployments1.Meta[key1] = types.StringValue(value1)
				}
			}
			latestDeployments1.MonorepoManager = types.StringPointerValue(latestDeploymentsItem.MonorepoManager)
			latestDeployments1.Name = types.StringValue(latestDeploymentsItem.Name)
			if len(latestDeploymentsItem.OidcTokenClaims) > 0 {
				latestDeployments1.OidcTokenClaims = make(map[string]tfTypes.OidcTokenClaims)
				for oidcTokenClaimsKey, oidcTokenClaimsValue := range latestDeploymentsItem.OidcTokenClaims {
					var oidcTokenClaimsResult tfTypes.OidcTokenClaims
					if oidcTokenClaimsValue.Str != nil {
						oidcTokenClaimsResult.Str = types.StringPointerValue(oidcTokenClaimsValue.Str)
					}
					if oidcTokenClaimsValue.ArrayOfStr != nil {
						oidcTokenClaimsResult.ArrayOfStr = []types.String{}
						for _, v := range oidcTokenClaimsValue.ArrayOfStr {
							oidcTokenClaimsResult.ArrayOfStr = append(oidcTokenClaimsResult.ArrayOfStr, types.StringValue(v))
						}
					}
					latestDeployments1.OidcTokenClaims[oidcTokenClaimsKey] = oidcTokenClaimsResult
				}
			}
			latestDeployments1.Plan = types.StringValue(string(latestDeploymentsItem.Plan))
			latestDeployments1.PreviewCommentsEnabled = types.BoolPointerValue(latestDeploymentsItem.PreviewCommentsEnabled)
			latestDeployments1.Private = types.BoolValue(latestDeploymentsItem.Private)
			if latestDeploymentsItem.ReadyAt != nil {
				latestDeployments1.ReadyAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.ReadyAt)))
			} else {
				latestDeployments1.ReadyAt = types.NumberNull()
			}
			latestDeployments1.ReadyState = types.StringValue(string(latestDeploymentsItem.ReadyState))
			if latestDeploymentsItem.ReadySubstate != nil {
				latestDeployments1.ReadySubstate = types.StringValue(string(*latestDeploymentsItem.ReadySubstate))
			} else {
				latestDeployments1.ReadySubstate = types.StringNull()
			}
			if latestDeploymentsItem.RequestedAt != nil {
				latestDeployments1.RequestedAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.RequestedAt)))
			} else {
				latestDeployments1.RequestedAt = types.NumberNull()
			}
			latestDeployments1.Target = types.StringPointerValue(latestDeploymentsItem.Target)
			latestDeployments1.TeamID = types.StringPointerValue(latestDeploymentsItem.TeamID)
			latestDeployments1.Type = types.StringValue(string(latestDeploymentsItem.Type))
			latestDeployments1.URL = types.StringValue(latestDeploymentsItem.URL)
			latestDeployments1.UserID = types.StringValue(latestDeploymentsItem.UserID)
			latestDeployments1.WithCache = types.BoolPointerValue(latestDeploymentsItem.WithCache)
			if latestDeploymentsCount+1 > len(r.LatestDeployments) {
				r.LatestDeployments = append(r.LatestDeployments, latestDeployments1)
			} else {
				r.LatestDeployments[latestDeploymentsCount].Alias = latestDeployments1.Alias
				r.LatestDeployments[latestDeploymentsCount].AliasAssigned = latestDeployments1.AliasAssigned
				r.LatestDeployments[latestDeploymentsCount].AliasError = latestDeployments1.AliasError
				r.LatestDeployments[latestDeploymentsCount].AliasFinal = latestDeployments1.AliasFinal
				r.LatestDeployments[latestDeploymentsCount].AutomaticAliases = latestDeployments1.AutomaticAliases
				r.LatestDeployments[latestDeploymentsCount].BuildingAt = latestDeployments1.BuildingAt
				r.LatestDeployments[latestDeploymentsCount].Builds = latestDeployments1.Builds
				r.LatestDeployments[latestDeploymentsCount].ChecksConclusion = latestDeployments1.ChecksConclusion
				r.LatestDeployments[latestDeploymentsCount].ChecksState = latestDeployments1.ChecksState
				r.LatestDeployments[latestDeploymentsCount].ConnectBuildsEnabled = latestDeployments1.ConnectBuildsEnabled
				r.LatestDeployments[latestDeploymentsCount].ConnectConfigurationID = latestDeployments1.ConnectConfigurationID
				r.LatestDeployments[latestDeploymentsCount].CreatedAt = latestDeployments1.CreatedAt
				r.LatestDeployments[latestDeploymentsCount].CreatedIn = latestDeployments1.CreatedIn
				r.LatestDeployments[latestDeploymentsCount].Creator = latestDeployments1.Creator
				r.LatestDeployments[latestDeploymentsCount].DeploymentHostname = latestDeployments1.DeploymentHostname
				r.LatestDeployments[latestDeploymentsCount].Forced = latestDeployments1.Forced
				r.LatestDeployments[latestDeploymentsCount].ID = latestDeployments1.ID
				r.LatestDeployments[latestDeploymentsCount].Meta = latestDeployments1.Meta
				r.LatestDeployments[latestDeploymentsCount].MonorepoManager = latestDeployments1.MonorepoManager
				r.LatestDeployments[latestDeploymentsCount].Name = latestDeployments1.Name
				r.LatestDeployments[latestDeploymentsCount].OidcTokenClaims = latestDeployments1.OidcTokenClaims
				r.LatestDeployments[latestDeploymentsCount].Plan = latestDeployments1.Plan
				r.LatestDeployments[latestDeploymentsCount].PreviewCommentsEnabled = latestDeployments1.PreviewCommentsEnabled
				r.LatestDeployments[latestDeploymentsCount].Private = latestDeployments1.Private
				r.LatestDeployments[latestDeploymentsCount].ReadyAt = latestDeployments1.ReadyAt
				r.LatestDeployments[latestDeploymentsCount].ReadyState = latestDeployments1.ReadyState
				r.LatestDeployments[latestDeploymentsCount].ReadySubstate = latestDeployments1.ReadySubstate
				r.LatestDeployments[latestDeploymentsCount].RequestedAt = latestDeployments1.RequestedAt
				r.LatestDeployments[latestDeploymentsCount].Target = latestDeployments1.Target
				r.LatestDeployments[latestDeploymentsCount].TeamID = latestDeployments1.TeamID
				r.LatestDeployments[latestDeploymentsCount].Type = latestDeployments1.Type
				r.LatestDeployments[latestDeploymentsCount].URL = latestDeployments1.URL
				r.LatestDeployments[latestDeploymentsCount].UserID = latestDeployments1.UserID
				r.LatestDeployments[latestDeploymentsCount].WithCache = latestDeployments1.WithCache
			}
		}
		if resp.Link == nil {
			r.Link = nil
		} else {
			r.Link = &tfTypes.Link{}
			if resp.Link.CreateProjectProjects1 != nil {
				r.Link.One = &tfTypes.CreateProjectProjects1{}
				if resp.Link.CreateProjectProjects1.CreatedAt != nil {
					r.Link.One.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectProjects1.CreatedAt)))
				} else {
					r.Link.One.CreatedAt = types.NumberNull()
				}
				r.Link.One.DeployHooks = []tfTypes.DeployHooks{}
				if len(r.Link.One.DeployHooks) > len(resp.Link.CreateProjectProjects1.DeployHooks) {
					r.Link.One.DeployHooks = r.Link.One.DeployHooks[:len(resp.Link.CreateProjectProjects1.DeployHooks)]
				}
				for deployHooksCount, deployHooksItem := range resp.Link.CreateProjectProjects1.DeployHooks {
					var deployHooks1 tfTypes.DeployHooks
					if deployHooksItem.CreatedAt != nil {
						deployHooks1.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem.CreatedAt)))
					} else {
						deployHooks1.CreatedAt = types.NumberNull()
					}
					deployHooks1.ID = types.StringValue(deployHooksItem.ID)
					deployHooks1.Name = types.StringValue(deployHooksItem.Name)
					deployHooks1.Ref = types.StringValue(deployHooksItem.Ref)
					deployHooks1.URL = types.StringValue(deployHooksItem.URL)
					if deployHooksCount+1 > len(r.Link.One.DeployHooks) {
						r.Link.One.DeployHooks = append(r.Link.One.DeployHooks, deployHooks1)
					} else {
						r.Link.One.DeployHooks[deployHooksCount].CreatedAt = deployHooks1.CreatedAt
						r.Link.One.DeployHooks[deployHooksCount].ID = deployHooks1.ID
						r.Link.One.DeployHooks[deployHooksCount].Name = deployHooks1.Name
						r.Link.One.DeployHooks[deployHooksCount].Ref = deployHooks1.Ref
						r.Link.One.DeployHooks[deployHooksCount].URL = deployHooks1.URL
					}
				}
				r.Link.One.GitCredentialID = types.StringPointerValue(resp.Link.CreateProjectProjects1.GitCredentialID)
				r.Link.One.Org = types.StringPointerValue(resp.Link.CreateProjectProjects1.Org)
				r.Link.One.ProductionBranch = types.StringPointerValue(resp.Link.CreateProjectProjects1.ProductionBranch)
				r.Link.One.Repo = types.StringPointerValue(resp.Link.CreateProjectProjects1.Repo)
				if resp.Link.CreateProjectProjects1.RepoID != nil {
					r.Link.One.RepoID = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectProjects1.RepoID)))
				} else {
					r.Link.One.RepoID = types.NumberNull()
				}
				r.Link.One.Sourceless = types.BoolPointerValue(resp.Link.CreateProjectProjects1.Sourceless)
				if resp.Link.CreateProjectProjects1.Type != nil {
					r.Link.One.Type = types.StringValue(string(*resp.Link.CreateProjectProjects1.Type))
				} else {
					r.Link.One.Type = types.StringNull()
				}
				if resp.Link.CreateProjectProjects1.UpdatedAt != nil {
					r.Link.One.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectProjects1.UpdatedAt)))
				} else {
					r.Link.One.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.CreateProjectProjects2 != nil {
				r.Link.Two = &tfTypes.CreateProjectProjects2{}
				if resp.Link.CreateProjectProjects2.CreatedAt != nil {
					r.Link.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectProjects2.CreatedAt)))
				} else {
					r.Link.Two.CreatedAt = types.NumberNull()
				}
				r.Link.Two.DeployHooks = []tfTypes.DeployHooks{}
				if len(r.Link.Two.DeployHooks) > len(resp.Link.CreateProjectProjects2.DeployHooks) {
					r.Link.Two.DeployHooks = r.Link.Two.DeployHooks[:len(resp.Link.CreateProjectProjects2.DeployHooks)]
				}
				for deployHooksCount1, deployHooksItem1 := range resp.Link.CreateProjectProjects2.DeployHooks {
					var deployHooks3 tfTypes.DeployHooks
					if deployHooksItem1.CreatedAt != nil {
						deployHooks3.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem1.CreatedAt)))
					} else {
						deployHooks3.CreatedAt = types.NumberNull()
					}
					deployHooks3.ID = types.StringValue(deployHooksItem1.ID)
					deployHooks3.Name = types.StringValue(deployHooksItem1.Name)
					deployHooks3.Ref = types.StringValue(deployHooksItem1.Ref)
					deployHooks3.URL = types.StringValue(deployHooksItem1.URL)
					if deployHooksCount1+1 > len(r.Link.Two.DeployHooks) {
						r.Link.Two.DeployHooks = append(r.Link.Two.DeployHooks, deployHooks3)
					} else {
						r.Link.Two.DeployHooks[deployHooksCount1].CreatedAt = deployHooks3.CreatedAt
						r.Link.Two.DeployHooks[deployHooksCount1].ID = deployHooks3.ID
						r.Link.Two.DeployHooks[deployHooksCount1].Name = deployHooks3.Name
						r.Link.Two.DeployHooks[deployHooksCount1].Ref = deployHooks3.Ref
						r.Link.Two.DeployHooks[deployHooksCount1].URL = deployHooks3.URL
					}
				}
				r.Link.Two.GitCredentialID = types.StringPointerValue(resp.Link.CreateProjectProjects2.GitCredentialID)
				r.Link.Two.ProductionBranch = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProductionBranch)
				r.Link.Two.ProjectID = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProjectID)
				r.Link.Two.ProjectName = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProjectName)
				r.Link.Two.ProjectNamespace = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProjectNamespace)
				r.Link.Two.ProjectNameWithNamespace = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProjectNameWithNamespace)
				r.Link.Two.ProjectURL = types.StringPointerValue(resp.Link.CreateProjectProjects2.ProjectURL)
				r.Link.Two.Sourceless = types.BoolPointerValue(resp.Link.CreateProjectProjects2.Sourceless)
				if resp.Link.CreateProjectProjects2.Type != nil {
					r.Link.Two.Type = types.StringValue(string(*resp.Link.CreateProjectProjects2.Type))
				} else {
					r.Link.Two.Type = types.StringNull()
				}
				if resp.Link.CreateProjectProjects2.UpdatedAt != nil {
					r.Link.Two.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectProjects2.UpdatedAt)))
				} else {
					r.Link.Two.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.CreateProject3 != nil {
				r.Link.Three = &tfTypes.CreateProject3{}
				if resp.Link.CreateProject3.CreatedAt != nil {
					r.Link.Three.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProject3.CreatedAt)))
				} else {
					r.Link.Three.CreatedAt = types.NumberNull()
				}
				r.Link.Three.DeployHooks = []tfTypes.DeployHooks{}
				if len(r.Link.Three.DeployHooks) > len(resp.Link.CreateProject3.DeployHooks) {
					r.Link.Three.DeployHooks = r.Link.Three.DeployHooks[:len(resp.Link.CreateProject3.DeployHooks)]
				}
				for deployHooksCount2, deployHooksItem2 := range resp.Link.CreateProject3.DeployHooks {
					var deployHooks5 tfTypes.DeployHooks
					if deployHooksItem2.CreatedAt != nil {
						deployHooks5.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem2.CreatedAt)))
					} else {
						deployHooks5.CreatedAt = types.NumberNull()
					}
					deployHooks5.ID = types.StringValue(deployHooksItem2.ID)
					deployHooks5.Name = types.StringValue(deployHooksItem2.Name)
					deployHooks5.Ref = types.StringValue(deployHooksItem2.Ref)
					deployHooks5.URL = types.StringValue(deployHooksItem2.URL)
					if deployHooksCount2+1 > len(r.Link.Three.DeployHooks) {
						r.Link.Three.DeployHooks = append(r.Link.Three.DeployHooks, deployHooks5)
					} else {
						r.Link.Three.DeployHooks[deployHooksCount2].CreatedAt = deployHooks5.CreatedAt
						r.Link.Three.DeployHooks[deployHooksCount2].ID = deployHooks5.ID
						r.Link.Three.DeployHooks[deployHooksCount2].Name = deployHooks5.Name
						r.Link.Three.DeployHooks[deployHooksCount2].Ref = deployHooks5.Ref
						r.Link.Three.DeployHooks[deployHooksCount2].URL = deployHooks5.URL
					}
				}
				r.Link.Three.GitCredentialID = types.StringPointerValue(resp.Link.CreateProject3.GitCredentialID)
				r.Link.Three.Name = types.StringPointerValue(resp.Link.CreateProject3.Name)
				r.Link.Three.Owner = types.StringPointerValue(resp.Link.CreateProject3.Owner)
				r.Link.Three.ProductionBranch = types.StringPointerValue(resp.Link.CreateProject3.ProductionBranch)
				r.Link.Three.Slug = types.StringPointerValue(resp.Link.CreateProject3.Slug)
				r.Link.Three.Sourceless = types.BoolPointerValue(resp.Link.CreateProject3.Sourceless)
				if resp.Link.CreateProject3.Type != nil {
					r.Link.Three.Type = types.StringValue(string(*resp.Link.CreateProject3.Type))
				} else {
					r.Link.Three.Type = types.StringNull()
				}
				if resp.Link.CreateProject3.UpdatedAt != nil {
					r.Link.Three.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProject3.UpdatedAt)))
				} else {
					r.Link.Three.UpdatedAt = types.NumberNull()
				}
				r.Link.Three.UUID = types.StringPointerValue(resp.Link.CreateProject3.UUID)
				r.Link.Three.WorkspaceUUID = types.StringPointerValue(resp.Link.CreateProject3.WorkspaceUUID)
			}
		}
		r.Live = types.BoolPointerValue(resp.Live)
		r.Name = types.StringValue(resp.Name)
		r.NodeVersion = types.StringValue(string(resp.NodeVersion))
		if resp.OidcTokenConfig == nil {
			r.OidcTokenConfig = nil
		} else {
			r.OidcTokenConfig = &tfTypes.OidcTokenConfig{}
			r.OidcTokenConfig.Enabled = types.BoolValue(resp.OidcTokenConfig.Enabled)
		}
		if resp.OptionsAllowlist == nil {
			r.OptionsAllowlist = nil
		} else {
			r.OptionsAllowlist = &tfTypes.CreateProjectOptionsAllowlist{}
			r.OptionsAllowlist.Paths = []tfTypes.CreateProjectPaths{}
			if len(r.OptionsAllowlist.Paths) > len(resp.OptionsAllowlist.Paths) {
				r.OptionsAllowlist.Paths = r.OptionsAllowlist.Paths[:len(resp.OptionsAllowlist.Paths)]
			}
			for pathsCount, pathsItem := range resp.OptionsAllowlist.Paths {
				var paths1 tfTypes.CreateProjectPaths
				paths1.Value = types.StringValue(pathsItem.Value)
				if pathsCount+1 > len(r.OptionsAllowlist.Paths) {
					r.OptionsAllowlist.Paths = append(r.OptionsAllowlist.Paths, paths1)
				} else {
					r.OptionsAllowlist.Paths[pathsCount].Value = paths1.Value
				}
			}
		}
		r.OutputDirectory = types.StringPointerValue(resp.OutputDirectory)
		r.PassiveConnectConfigurationID = types.StringPointerValue(resp.PassiveConnectConfigurationID)
		if resp.PasswordProtection == nil {
			r.PasswordProtection = nil
		} else {
			r.PasswordProtection = &tfTypes.Schema{}
		}
		r.Paused = types.BoolPointerValue(resp.Paused)
		if resp.Permissions == nil {
			r.Permissions = nil
		} else {
			r.Permissions = &tfTypes.Permissions{}
			r.Permissions.AccessGroup = []types.String{}
			for _, v := range resp.Permissions.AccessGroup {
				r.Permissions.AccessGroup = append(r.Permissions.AccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.AliasGlobal = []types.String{}
			for _, v := range resp.Permissions.AliasGlobal {
				r.Permissions.AliasGlobal = append(r.Permissions.AliasGlobal, types.StringValue(string(v)))
			}
			r.Permissions.AliasProject = []types.String{}
			for _, v := range resp.Permissions.AliasProject {
				r.Permissions.AliasProject = append(r.Permissions.AliasProject, types.StringValue(string(v)))
			}
			r.Permissions.AliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.AliasProtectionBypass {
				r.Permissions.AliasProtectionBypass = append(r.Permissions.AliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Analytics = []types.String{}
			for _, v := range resp.Permissions.Analytics {
				r.Permissions.Analytics = append(r.Permissions.Analytics, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.AnalyticsSampling {
				r.Permissions.AnalyticsSampling = append(r.Permissions.AnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.AnalyticsUsage {
				r.Permissions.AnalyticsUsage = append(r.Permissions.AnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.AuditLog = []types.String{}
			for _, v := range resp.Permissions.AuditLog {
				r.Permissions.AuditLog = append(r.Permissions.AuditLog, types.StringValue(string(v)))
			}
			r.Permissions.BillingAddress = []types.String{}
			for _, v := range resp.Permissions.BillingAddress {
				r.Permissions.BillingAddress = append(r.Permissions.BillingAddress, types.StringValue(string(v)))
			}
			r.Permissions.BillingInformation = []types.String{}
			for _, v := range resp.Permissions.BillingInformation {
				r.Permissions.BillingInformation = append(r.Permissions.BillingInformation, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoice = []types.String{}
			for _, v := range resp.Permissions.BillingInvoice {
				r.Permissions.BillingInvoice = append(r.Permissions.BillingInvoice, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceEmailRecipient = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceEmailRecipient {
				r.Permissions.BillingInvoiceEmailRecipient = append(r.Permissions.BillingInvoiceEmailRecipient, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceLanguage = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceLanguage {
				r.Permissions.BillingInvoiceLanguage = append(r.Permissions.BillingInvoiceLanguage, types.StringValue(string(v)))
			}
			r.Permissions.BillingPlan = []types.String{}
			for _, v := range resp.Permissions.BillingPlan {
				r.Permissions.BillingPlan = append(r.Permissions.BillingPlan, types.StringValue(string(v)))
			}
			r.Permissions.BillingPurchaseOrder = []types.String{}
			for _, v := range resp.Permissions.BillingPurchaseOrder {
				r.Permissions.BillingPurchaseOrder = append(r.Permissions.BillingPurchaseOrder, types.StringValue(string(v)))
			}
			r.Permissions.BillingTaxID = []types.String{}
			for _, v := range resp.Permissions.BillingTaxID {
				r.Permissions.BillingTaxID = append(r.Permissions.BillingTaxID, types.StringValue(string(v)))
			}
			r.Permissions.Blob = []types.String{}
			for _, v := range resp.Permissions.Blob {
				r.Permissions.Blob = append(r.Permissions.Blob, types.StringValue(string(v)))
			}
			r.Permissions.BlobStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.BlobStoreTokenSet {
				r.Permissions.BlobStoreTokenSet = append(r.Permissions.BlobStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.Budget = []types.String{}
			for _, v := range resp.Permissions.Budget {
				r.Permissions.Budget = append(r.Permissions.Budget, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifact = []types.String{}
			for _, v := range resp.Permissions.CacheArtifact {
				r.Permissions.CacheArtifact = append(r.Permissions.CacheArtifact, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifactUsageEvent = []types.String{}
			for _, v := range resp.Permissions.CacheArtifactUsageEvent {
				r.Permissions.CacheArtifactUsageEvent = append(r.Permissions.CacheArtifactUsageEvent, types.StringValue(string(v)))
			}
			r.Permissions.CodeChecks = []types.String{}
			for _, v := range resp.Permissions.CodeChecks {
				r.Permissions.CodeChecks = append(r.Permissions.CodeChecks, types.StringValue(string(v)))
			}
			r.Permissions.ConcurrentBuilds = []types.String{}
			for _, v := range resp.Permissions.ConcurrentBuilds {
				r.Permissions.ConcurrentBuilds = append(r.Permissions.ConcurrentBuilds, types.StringValue(string(v)))
			}
			r.Permissions.Connect = []types.String{}
			for _, v := range resp.Permissions.Connect {
				r.Permissions.Connect = append(r.Permissions.Connect, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfiguration = []types.String{}
			for _, v := range resp.Permissions.ConnectConfiguration {
				r.Permissions.ConnectConfiguration = append(r.Permissions.ConnectConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfigurationLink = []types.String{}
			for _, v := range resp.Permissions.ConnectConfigurationLink {
				r.Permissions.ConnectConfigurationLink = append(r.Permissions.ConnectConfigurationLink, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheBillingSettings = []types.String{}
			for _, v := range resp.Permissions.DataCacheBillingSettings {
				r.Permissions.DataCacheBillingSettings = append(r.Permissions.DataCacheBillingSettings, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheNamespace = []types.String{}
			for _, v := range resp.Permissions.DataCacheNamespace {
				r.Permissions.DataCacheNamespace = append(r.Permissions.DataCacheNamespace, types.StringValue(string(v)))
			}
			r.Permissions.Deployment = []types.String{}
			for _, v := range resp.Permissions.Deployment {
				r.Permissions.Deployment = append(r.Permissions.Deployment, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheck = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheck {
				r.Permissions.DeploymentCheck = append(r.Permissions.DeploymentCheck, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckPreview {
				r.Permissions.DeploymentCheckPreview = append(r.Permissions.DeploymentCheckPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckReRunFromProductionBranch = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckReRunFromProductionBranch {
				r.Permissions.DeploymentCheckReRunFromProductionBranch = append(r.Permissions.DeploymentCheckReRunFromProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentPreview {
				r.Permissions.DeploymentPreview = append(r.Permissions.DeploymentPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPrivate = []types.String{}
			for _, v := range resp.Permissions.DeploymentPrivate {
				r.Permissions.DeploymentPrivate = append(r.Permissions.DeploymentPrivate, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentProductionGit = []types.String{}
			for _, v := range resp.Permissions.DeploymentProductionGit {
				r.Permissions.DeploymentProductionGit = append(r.Permissions.DeploymentProductionGit, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPromote = []types.String{}
			for _, v := range resp.Permissions.DeploymentPromote {
				r.Permissions.DeploymentPromote = append(r.Permissions.DeploymentPromote, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentRollback = []types.String{}
			for _, v := range resp.Permissions.DeploymentRollback {
				r.Permissions.DeploymentRollback = append(r.Permissions.DeploymentRollback, types.StringValue(string(v)))
			}
			r.Permissions.Domain = []types.String{}
			for _, v := range resp.Permissions.Domain {
				r.Permissions.Domain = append(r.Permissions.Domain, types.StringValue(string(v)))
			}
			r.Permissions.DomainAcceptDelegation = []types.String{}
			for _, v := range resp.Permissions.DomainAcceptDelegation {
				r.Permissions.DomainAcceptDelegation = append(r.Permissions.DomainAcceptDelegation, types.StringValue(string(v)))
			}
			r.Permissions.DomainAuthCodes = []types.String{}
			for _, v := range resp.Permissions.DomainAuthCodes {
				r.Permissions.DomainAuthCodes = append(r.Permissions.DomainAuthCodes, types.StringValue(string(v)))
			}
			r.Permissions.DomainCertificate = []types.String{}
			for _, v := range resp.Permissions.DomainCertificate {
				r.Permissions.DomainCertificate = append(r.Permissions.DomainCertificate, types.StringValue(string(v)))
			}
			r.Permissions.DomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.DomainCheckConfig {
				r.Permissions.DomainCheckConfig = append(r.Permissions.DomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.DomainMove = []types.String{}
			for _, v := range resp.Permissions.DomainMove {
				r.Permissions.DomainMove = append(r.Permissions.DomainMove, types.StringValue(string(v)))
			}
			r.Permissions.DomainPurchase = []types.String{}
			for _, v := range resp.Permissions.DomainPurchase {
				r.Permissions.DomainPurchase = append(r.Permissions.DomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.DomainRecord = []types.String{}
			for _, v := range resp.Permissions.DomainRecord {
				r.Permissions.DomainRecord = append(r.Permissions.DomainRecord, types.StringValue(string(v)))
			}
			r.Permissions.DomainTransferIn = []types.String{}
			for _, v := range resp.Permissions.DomainTransferIn {
				r.Permissions.DomainTransferIn = append(r.Permissions.DomainTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfig = []types.String{}
			for _, v := range resp.Permissions.EdgeConfig {
				r.Permissions.EdgeConfig = append(r.Permissions.EdgeConfig, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigItem = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigItem {
				r.Permissions.EdgeConfigItem = append(r.Permissions.EdgeConfigItem, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigSchema = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigSchema {
				r.Permissions.EdgeConfigSchema = append(r.Permissions.EdgeConfigSchema, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigToken = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigToken {
				r.Permissions.EdgeConfigToken = append(r.Permissions.EdgeConfigToken, types.StringValue(string(v)))
			}
			r.Permissions.EndpointVerification = []types.String{}
			for _, v := range resp.Permissions.EndpointVerification {
				r.Permissions.EndpointVerification = append(r.Permissions.EndpointVerification, types.StringValue(string(v)))
			}
			r.Permissions.Environments = []types.String{}
			for _, v := range resp.Permissions.Environments {
				r.Permissions.Environments = append(r.Permissions.Environments, types.StringValue(string(v)))
			}
			r.Permissions.Event = []types.String{}
			for _, v := range resp.Permissions.Event {
				r.Permissions.Event = append(r.Permissions.Event, types.StringValue(string(v)))
			}
			r.Permissions.FileUpload = []types.String{}
			for _, v := range resp.Permissions.FileUpload {
				r.Permissions.FileUpload = append(r.Permissions.FileUpload, types.StringValue(string(v)))
			}
			r.Permissions.GitRepository = []types.String{}
			for _, v := range resp.Permissions.GitRepository {
				r.Permissions.GitRepository = append(r.Permissions.GitRepository, types.StringValue(string(v)))
			}
			r.Permissions.Integration = []types.String{}
			for _, v := range resp.Permissions.Integration {
				r.Permissions.Integration = append(r.Permissions.Integration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfiguration {
				r.Permissions.IntegrationConfiguration = append(r.Permissions.IntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationProjects = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationProjects {
				r.Permissions.IntegrationConfigurationProjects = append(r.Permissions.IntegrationConfigurationProjects, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationTransfer = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationTransfer {
				r.Permissions.IntegrationConfigurationTransfer = append(r.Permissions.IntegrationConfigurationTransfer, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationEvent = []types.String{}
			for _, v := range resp.Permissions.IntegrationEvent {
				r.Permissions.IntegrationEvent = append(r.Permissions.IntegrationEvent, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationResourceSecrets = []types.String{}
			for _, v := range resp.Permissions.IntegrationResourceSecrets {
				r.Permissions.IntegrationResourceSecrets = append(r.Permissions.IntegrationResourceSecrets, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStore = []types.String{}
			for _, v := range resp.Permissions.IntegrationStore {
				r.Permissions.IntegrationStore = append(r.Permissions.IntegrationStore, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.IntegrationStoreTokenSet {
				r.Permissions.IntegrationStoreTokenSet = append(r.Permissions.IntegrationStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationVercelConfigurationOverride = []types.String{}
			for _, v := range resp.Permissions.IntegrationVercelConfigurationOverride {
				r.Permissions.IntegrationVercelConfigurationOverride = append(r.Permissions.IntegrationVercelConfigurationOverride, types.StringValue(string(v)))
			}
			r.Permissions.IPBlocking = []types.String{}
			for _, v := range resp.Permissions.IPBlocking {
				r.Permissions.IPBlocking = append(r.Permissions.IPBlocking, types.StringValue(string(v)))
			}
			r.Permissions.Job = []types.String{}
			for _, v := range resp.Permissions.Job {
				r.Permissions.Job = append(r.Permissions.Job, types.StringValue(string(v)))
			}
			r.Permissions.JobGlobal = []types.String{}
			for _, v := range resp.Permissions.JobGlobal {
				r.Permissions.JobGlobal = append(r.Permissions.JobGlobal, types.StringValue(string(v)))
			}
			r.Permissions.LogDrain = []types.String{}
			for _, v := range resp.Permissions.LogDrain {
				r.Permissions.LogDrain = append(r.Permissions.LogDrain, types.StringValue(string(v)))
			}
			r.Permissions.Logs = []types.String{}
			for _, v := range resp.Permissions.Logs {
				r.Permissions.Logs = append(r.Permissions.Logs, types.StringValue(string(v)))
			}
			r.Permissions.LogsPreset = []types.String{}
			for _, v := range resp.Permissions.LogsPreset {
				r.Permissions.LogsPreset = append(r.Permissions.LogsPreset, types.StringValue(string(v)))
			}
			r.Permissions.MarketplaceBillingData = []types.String{}
			for _, v := range resp.Permissions.MarketplaceBillingData {
				r.Permissions.MarketplaceBillingData = append(r.Permissions.MarketplaceBillingData, types.StringValue(string(v)))
			}
			r.Permissions.Monitoring = []types.String{}
			for _, v := range resp.Permissions.Monitoring {
				r.Permissions.Monitoring = append(r.Permissions.Monitoring, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.MonitoringAlert {
				r.Permissions.MonitoringAlert = append(r.Permissions.MonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringChart = []types.String{}
			for _, v := range resp.Permissions.MonitoringChart {
				r.Permissions.MonitoringChart = append(r.Permissions.MonitoringChart, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringQuery = []types.String{}
			for _, v := range resp.Permissions.MonitoringQuery {
				r.Permissions.MonitoringQuery = append(r.Permissions.MonitoringQuery, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringSettings = []types.String{}
			for _, v := range resp.Permissions.MonitoringSettings {
				r.Permissions.MonitoringSettings = append(r.Permissions.MonitoringSettings, types.StringValue(string(v)))
			}
			r.Permissions.NotificationCustomerBudget = []types.String{}
			for _, v := range resp.Permissions.NotificationCustomerBudget {
				r.Permissions.NotificationCustomerBudget = append(r.Permissions.NotificationCustomerBudget, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDeploymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationDeploymentFailed {
				r.Permissions.NotificationDeploymentFailed = append(r.Permissions.NotificationDeploymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainConfiguration = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainConfiguration {
				r.Permissions.NotificationDomainConfiguration = append(r.Permissions.NotificationDomainConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainExpire = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainExpire {
				r.Permissions.NotificationDomainExpire = append(r.Permissions.NotificationDomainExpire, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainMoved = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainMoved {
				r.Permissions.NotificationDomainMoved = append(r.Permissions.NotificationDomainMoved, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainPurchase = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainPurchase {
				r.Permissions.NotificationDomainPurchase = append(r.Permissions.NotificationDomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainRenewal = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainRenewal {
				r.Permissions.NotificationDomainRenewal = append(r.Permissions.NotificationDomainRenewal, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainTransfer = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainTransfer {
				r.Permissions.NotificationDomainTransfer = append(r.Permissions.NotificationDomainTransfer, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainUnverified = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainUnverified {
				r.Permissions.NotificationDomainUnverified = append(r.Permissions.NotificationDomainUnverified, types.StringValue(string(v)))
			}
			r.Permissions.NotificationMonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationMonitoringAlert {
				r.Permissions.NotificationMonitoringAlert = append(r.Permissions.NotificationMonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.NotificationPaymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationPaymentFailed {
				r.Permissions.NotificationPaymentFailed = append(r.Permissions.NotificationPaymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationStatementOfReasons = []types.String{}
			for _, v := range resp.Permissions.NotificationStatementOfReasons {
				r.Permissions.NotificationStatementOfReasons = append(r.Permissions.NotificationStatementOfReasons, types.StringValue(string(v)))
			}
			r.Permissions.NotificationUsageAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationUsageAlert {
				r.Permissions.NotificationUsageAlert = append(r.Permissions.NotificationUsageAlert, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Application = []types.String{}
			for _, v := range resp.Permissions.Oauth2Application {
				r.Permissions.Oauth2Application = append(r.Permissions.Oauth2Application, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Connection = []types.String{}
			for _, v := range resp.Permissions.Oauth2Connection {
				r.Permissions.Oauth2Connection = append(r.Permissions.Oauth2Connection, types.StringValue(string(v)))
			}
			r.Permissions.OpenTelemetryEndpoint = []types.String{}
			for _, v := range resp.Permissions.OpenTelemetryEndpoint {
				r.Permissions.OpenTelemetryEndpoint = append(r.Permissions.OpenTelemetryEndpoint, types.StringValue(string(v)))
			}
			r.Permissions.OptionsAllowlist = []types.String{}
			for _, v := range resp.Permissions.OptionsAllowlist {
				r.Permissions.OptionsAllowlist = append(r.Permissions.OptionsAllowlist, types.StringValue(string(v)))
			}
			r.Permissions.OwnEvent = []types.String{}
			for _, v := range resp.Permissions.OwnEvent {
				r.Permissions.OwnEvent = append(r.Permissions.OwnEvent, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtection = []types.String{}
			for _, v := range resp.Permissions.PasswordProtection {
				r.Permissions.PasswordProtection = append(r.Permissions.PasswordProtection, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtectionInvoiceItem = []types.String{}
			for _, v := range resp.Permissions.PasswordProtectionInvoiceItem {
				r.Permissions.PasswordProtectionInvoiceItem = append(r.Permissions.PasswordProtectionInvoiceItem, types.StringValue(string(v)))
			}
			r.Permissions.PaymentMethod = []types.String{}
			for _, v := range resp.Permissions.PaymentMethod {
				r.Permissions.PaymentMethod = append(r.Permissions.PaymentMethod, types.StringValue(string(v)))
			}
			r.Permissions.Permissions = []types.String{}
			for _, v := range resp.Permissions.Permissions {
				r.Permissions.Permissions = append(r.Permissions.Permissions, types.StringValue(string(v)))
			}
			r.Permissions.Postgres = []types.String{}
			for _, v := range resp.Permissions.Postgres {
				r.Permissions.Postgres = append(r.Permissions.Postgres, types.StringValue(string(v)))
			}
			r.Permissions.PostgresStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.PostgresStoreTokenSet {
				r.Permissions.PostgresStoreTokenSet = append(r.Permissions.PostgresStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.PreviewDeploymentSuffix = []types.String{}
			for _, v := range resp.Permissions.PreviewDeploymentSuffix {
				r.Permissions.PreviewDeploymentSuffix = append(r.Permissions.PreviewDeploymentSuffix, types.StringValue(string(v)))
			}
			r.Permissions.ProductionAliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProductionAliasProtectionBypass {
				r.Permissions.ProductionAliasProtectionBypass = append(r.Permissions.ProductionAliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Project = []types.String{}
			for _, v := range resp.Permissions.Project {
				r.Permissions.Project = append(r.Permissions.Project, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAccessGroup = []types.String{}
			for _, v := range resp.Permissions.ProjectAccessGroup {
				r.Permissions.ProjectAccessGroup = append(r.Permissions.ProjectAccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsSampling {
				r.Permissions.ProjectAnalyticsSampling = append(r.Permissions.ProjectAnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsUsage {
				r.Permissions.ProjectAnalyticsUsage = append(r.Permissions.ProjectAnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentExpiration = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentExpiration {
				r.Permissions.ProjectDeploymentExpiration = append(r.Permissions.ProjectDeploymentExpiration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentHook = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentHook {
				r.Permissions.ProjectDeploymentHook = append(r.Permissions.ProjectDeploymentHook, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomain = []types.String{}
			for _, v := range resp.Permissions.ProjectDomain {
				r.Permissions.ProjectDomain = append(r.Permissions.ProjectDomain, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainCheckConfig {
				r.Permissions.ProjectDomainCheckConfig = append(r.Permissions.ProjectDomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainMove = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainMove {
				r.Permissions.ProjectDomainMove = append(r.Permissions.ProjectDomainMove, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVars = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVars {
				r.Permissions.ProjectEnvVars = append(r.Permissions.ProjectEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsProduction {
				r.Permissions.ProjectEnvVarsProduction = append(r.Permissions.ProjectEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsUnownedByIntegration = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsUnownedByIntegration {
				r.Permissions.ProjectEnvVarsUnownedByIntegration = append(r.Permissions.ProjectEnvVarsUnownedByIntegration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectID = []types.String{}
			for _, v := range resp.Permissions.ProjectID {
				r.Permissions.ProjectID = append(r.Permissions.ProjectID, types.StringValue(string(v)))
			}
			r.Permissions.ProjectIntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.ProjectIntegrationConfiguration {
				r.Permissions.ProjectIntegrationConfiguration = append(r.Permissions.ProjectIntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectLink = []types.String{}
			for _, v := range resp.Permissions.ProjectLink {
				r.Permissions.ProjectLink = append(r.Permissions.ProjectLink, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMember = []types.String{}
			for _, v := range resp.Permissions.ProjectMember {
				r.Permissions.ProjectMember = append(r.Permissions.ProjectMember, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMonitoring = []types.String{}
			for _, v := range resp.Permissions.ProjectMonitoring {
				r.Permissions.ProjectMonitoring = append(r.Permissions.ProjectMonitoring, types.StringValue(string(v)))
			}
			r.Permissions.ProjectPermissions = []types.String{}
			for _, v := range resp.Permissions.ProjectPermissions {
				r.Permissions.ProjectPermissions = append(r.Permissions.ProjectPermissions, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProductionBranch = []types.String{}
			for _, v := range resp.Permissions.ProjectProductionBranch {
				r.Permissions.ProjectProductionBranch = append(r.Permissions.ProjectProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProjectProtectionBypass {
				r.Permissions.ProjectProtectionBypass = append(r.Permissions.ProjectProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCase = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCase {
				r.Permissions.ProjectSupportCase = append(r.Permissions.ProjectSupportCase, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCaseComment {
				r.Permissions.ProjectSupportCaseComment = append(r.Permissions.ProjectSupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransfer = []types.String{}
			for _, v := range resp.Permissions.ProjectTransfer {
				r.Permissions.ProjectTransfer = append(r.Permissions.ProjectTransfer, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferIn = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferIn {
				r.Permissions.ProjectTransferIn = append(r.Permissions.ProjectTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferOut = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferOut {
				r.Permissions.ProjectTransferOut = append(r.Permissions.ProjectTransferOut, types.StringValue(string(v)))
			}
			r.Permissions.ProjectUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectUsage {
				r.Permissions.ProjectUsage = append(r.Permissions.ProjectUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProTrialOnboarding = []types.String{}
			for _, v := range resp.Permissions.ProTrialOnboarding {
				r.Permissions.ProTrialOnboarding = append(r.Permissions.ProTrialOnboarding, types.StringValue(string(v)))
			}
			r.Permissions.RateLimit = []types.String{}
			for _, v := range resp.Permissions.RateLimit {
				r.Permissions.RateLimit = append(r.Permissions.RateLimit, types.StringValue(string(v)))
			}
			r.Permissions.Redis = []types.String{}
			for _, v := range resp.Permissions.Redis {
				r.Permissions.Redis = append(r.Permissions.Redis, types.StringValue(string(v)))
			}
			r.Permissions.RedisStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.RedisStoreTokenSet {
				r.Permissions.RedisStoreTokenSet = append(r.Permissions.RedisStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.RemoteCaching = []types.String{}
			for _, v := range resp.Permissions.RemoteCaching {
				r.Permissions.RemoteCaching = append(r.Permissions.RemoteCaching, types.StringValue(string(v)))
			}
			r.Permissions.Repository = []types.String{}
			for _, v := range resp.Permissions.Repository {
				r.Permissions.Repository = append(r.Permissions.Repository, types.StringValue(string(v)))
			}
			r.Permissions.SamlConfig = []types.String{}
			for _, v := range resp.Permissions.SamlConfig {
				r.Permissions.SamlConfig = append(r.Permissions.SamlConfig, types.StringValue(string(v)))
			}
			r.Permissions.SeawallConfig = []types.String{}
			for _, v := range resp.Permissions.SeawallConfig {
				r.Permissions.SeawallConfig = append(r.Permissions.SeawallConfig, types.StringValue(string(v)))
			}
			r.Permissions.Secret = []types.String{}
			for _, v := range resp.Permissions.Secret {
				r.Permissions.Secret = append(r.Permissions.Secret, types.StringValue(string(v)))
			}
			r.Permissions.SensitiveEnvironmentVariablePolicy = []types.String{}
			for _, v := range resp.Permissions.SensitiveEnvironmentVariablePolicy {
				r.Permissions.SensitiveEnvironmentVariablePolicy = append(r.Permissions.SensitiveEnvironmentVariablePolicy, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarConnection = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarConnection {
				r.Permissions.SharedEnvVarConnection = append(r.Permissions.SharedEnvVarConnection, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVars = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVars {
				r.Permissions.SharedEnvVars = append(r.Permissions.SharedEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarsProduction {
				r.Permissions.SharedEnvVarsProduction = append(r.Permissions.SharedEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.SkewProtection = []types.String{}
			for _, v := range resp.Permissions.SkewProtection {
				r.Permissions.SkewProtection = append(r.Permissions.SkewProtection, types.StringValue(string(v)))
			}
			r.Permissions.Space = []types.String{}
			for _, v := range resp.Permissions.Space {
				r.Permissions.Space = append(r.Permissions.Space, types.StringValue(string(v)))
			}
			r.Permissions.SpaceRun = []types.String{}
			for _, v := range resp.Permissions.SpaceRun {
				r.Permissions.SpaceRun = append(r.Permissions.SpaceRun, types.StringValue(string(v)))
			}
			r.Permissions.SupportCase = []types.String{}
			for _, v := range resp.Permissions.SupportCase {
				r.Permissions.SupportCase = append(r.Permissions.SupportCase, types.StringValue(string(v)))
			}
			r.Permissions.SupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.SupportCaseComment {
				r.Permissions.SupportCaseComment = append(r.Permissions.SupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.Team = []types.String{}
			for _, v := range resp.Permissions.Team {
				r.Permissions.Team = append(r.Permissions.Team, types.StringValue(string(v)))
			}
			r.Permissions.TeamAccessRequest = []types.String{}
			for _, v := range resp.Permissions.TeamAccessRequest {
				r.Permissions.TeamAccessRequest = append(r.Permissions.TeamAccessRequest, types.StringValue(string(v)))
			}
			r.Permissions.TeamFellowMembership = []types.String{}
			for _, v := range resp.Permissions.TeamFellowMembership {
				r.Permissions.TeamFellowMembership = append(r.Permissions.TeamFellowMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamInvite = []types.String{}
			for _, v := range resp.Permissions.TeamInvite {
				r.Permissions.TeamInvite = append(r.Permissions.TeamInvite, types.StringValue(string(v)))
			}
			r.Permissions.TeamInviteCode = []types.String{}
			for _, v := range resp.Permissions.TeamInviteCode {
				r.Permissions.TeamInviteCode = append(r.Permissions.TeamInviteCode, types.StringValue(string(v)))
			}
			r.Permissions.TeamJoin = []types.String{}
			for _, v := range resp.Permissions.TeamJoin {
				r.Permissions.TeamJoin = append(r.Permissions.TeamJoin, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembership = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembership {
				r.Permissions.TeamOwnMembership = append(r.Permissions.TeamOwnMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembershipDisconnectSAML = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembershipDisconnectSAML {
				r.Permissions.TeamOwnMembershipDisconnectSAML = append(r.Permissions.TeamOwnMembershipDisconnectSAML, types.StringValue(string(v)))
			}
			r.Permissions.Token = []types.String{}
			for _, v := range resp.Permissions.Token {
				r.Permissions.Token = append(r.Permissions.Token, types.StringValue(string(v)))
			}
			r.Permissions.TrustedIps = []types.String{}
			for _, v := range resp.Permissions.TrustedIps {
				r.Permissions.TrustedIps = append(r.Permissions.TrustedIps, types.StringValue(string(v)))
			}
			r.Permissions.Usage = []types.String{}
			for _, v := range resp.Permissions.Usage {
				r.Permissions.Usage = append(r.Permissions.Usage, types.StringValue(string(v)))
			}
			r.Permissions.UsageCycle = []types.String{}
			for _, v := range resp.Permissions.UsageCycle {
				r.Permissions.UsageCycle = append(r.Permissions.UsageCycle, types.StringValue(string(v)))
			}
			r.Permissions.User = []types.String{}
			for _, v := range resp.Permissions.User {
				r.Permissions.User = append(r.Permissions.User, types.StringValue(string(v)))
			}
			r.Permissions.UserConnection = []types.String{}
			for _, v := range resp.Permissions.UserConnection {
				r.Permissions.UserConnection = append(r.Permissions.UserConnection, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalytics = []types.String{}
			for _, v := range resp.Permissions.WebAnalytics {
				r.Permissions.WebAnalytics = append(r.Permissions.WebAnalytics, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalyticsPlan = []types.String{}
			for _, v := range resp.Permissions.WebAnalyticsPlan {
				r.Permissions.WebAnalyticsPlan = append(r.Permissions.WebAnalyticsPlan, types.StringValue(string(v)))
			}
			r.Permissions.WebAuthn = []types.String{}
			for _, v := range resp.Permissions.WebAuthn {
				r.Permissions.WebAuthn = append(r.Permissions.WebAuthn, types.StringValue(string(v)))
			}
			r.Permissions.Webhook = []types.String{}
			for _, v := range resp.Permissions.Webhook {
				r.Permissions.Webhook = append(r.Permissions.Webhook, types.StringValue(string(v)))
			}
			r.Permissions.WebhookEvent = []types.String{}
			for _, v := range resp.Permissions.WebhookEvent {
				r.Permissions.WebhookEvent = append(r.Permissions.WebhookEvent, types.StringValue(string(v)))
			}
		}
		r.ProductionDeploymentsFastLane = types.BoolPointerValue(resp.ProductionDeploymentsFastLane)
		if len(resp.ProtectionBypass) > 0 {
			r.ProtectionBypass = make(map[string]tfTypes.CreateProjectProtectionBypass)
			for createProjectProtectionBypassKey, createProjectProtectionBypassValue := range resp.ProtectionBypass {
				var createProjectProtectionBypassResult tfTypes.CreateProjectProtectionBypass
				createProjectProtectionBypassResult.CreatedAt = types.NumberValue(big.NewFloat(float64(createProjectProtectionBypassValue.CreatedAt)))
				createProjectProtectionBypassResult.CreatedBy = types.StringValue(createProjectProtectionBypassValue.CreatedBy)
				createProjectProtectionBypassResult.Scope = types.StringValue(string(createProjectProtectionBypassValue.Scope))
				r.ProtectionBypass[createProjectProtectionBypassKey] = createProjectProtectionBypassResult
			}
		}
		r.PublicSource = types.BoolPointerValue(resp.PublicSource)
		r.RootDirectory = types.StringPointerValue(resp.RootDirectory)
		if resp.Security == nil {
			r.Security = nil
		} else {
			r.Security = &tfTypes.Security{}
			if resp.Security.AttackModeActiveUntil != nil {
				r.Security.AttackModeActiveUntil = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeActiveUntil)))
			} else {
				r.Security.AttackModeActiveUntil = types.NumberNull()
			}
			r.Security.AttackModeEnabled = types.BoolPointerValue(resp.Security.AttackModeEnabled)
			if resp.Security.AttackModeUpdatedAt != nil {
				r.Security.AttackModeUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeUpdatedAt)))
			} else {
				r.Security.AttackModeUpdatedAt = types.NumberNull()
			}
			if resp.Security.FirewallConfigVersion != nil {
				r.Security.FirewallConfigVersion = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallConfigVersion)))
			} else {
				r.Security.FirewallConfigVersion = types.NumberNull()
			}
			r.Security.FirewallEnabled = types.BoolPointerValue(resp.Security.FirewallEnabled)
			r.Security.FirewallRoutes = []tfTypes.FirewallRoutes{}
			if len(r.Security.FirewallRoutes) > len(resp.Security.FirewallRoutes) {
				r.Security.FirewallRoutes = r.Security.FirewallRoutes[:len(resp.Security.FirewallRoutes)]
			}
			for firewallRoutesCount, firewallRoutesItem := range resp.Security.FirewallRoutes {
				var firewallRoutes1 tfTypes.FirewallRoutes
				firewallRoutes1.Dest = types.StringPointerValue(firewallRoutesItem.Dest)
				if firewallRoutesItem.Handle != nil {
					firewallRoutes1.Handle = types.StringValue(string(*firewallRoutesItem.Handle))
				} else {
					firewallRoutes1.Handle = types.StringNull()
				}
				firewallRoutes1.Has = []tfTypes.CreateProjectHas{}
				for hasCount, hasItem := range firewallRoutesItem.Has {
					var has1 tfTypes.CreateProjectHas
					has1.Key = types.StringPointerValue(hasItem.Key)
					has1.Type = types.StringValue(string(hasItem.Type))
					if hasItem.Value == nil {
						has1.Value = nil
					} else {
						has1.Value = &tfTypes.CreateProjectProjectsValue{}
						if hasItem.Value.Str != nil {
							has1.Value.Str = types.StringPointerValue(hasItem.Value.Str)
						}
						if hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 != nil {
							has1.Value.Two = &tfTypes.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2{}
							has1.Value.Two.Eq = types.StringPointerValue(hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Eq)
							if hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Gt != nil {
								has1.Value.Two.Gt = types.NumberValue(big.NewFloat(float64(*hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Gt)))
							} else {
								has1.Value.Two.Gt = types.NumberNull()
							}
							if hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Gte != nil {
								has1.Value.Two.Gte = types.NumberValue(big.NewFloat(float64(*hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Gte)))
							} else {
								has1.Value.Two.Gte = types.NumberNull()
							}
							has1.Value.Two.Inc = []types.String{}
							for _, v := range hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Inc {
								has1.Value.Two.Inc = append(has1.Value.Two.Inc, types.StringValue(v))
							}
							if hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Lt != nil {
								has1.Value.Two.Lt = types.NumberValue(big.NewFloat(float64(*hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Lt)))
							} else {
								has1.Value.Two.Lt = types.NumberNull()
							}
							if hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Lte != nil {
								has1.Value.Two.Lte = types.NumberValue(big.NewFloat(float64(*hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Lte)))
							} else {
								has1.Value.Two.Lte = types.NumberNull()
							}
							has1.Value.Two.Neq = types.StringPointerValue(hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Neq)
							has1.Value.Two.Ninc = []types.String{}
							for _, v := range hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Ninc {
								has1.Value.Two.Ninc = append(has1.Value.Two.Ninc, types.StringValue(v))
							}
							has1.Value.Two.Pre = types.StringPointerValue(hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Pre)
							has1.Value.Two.Re = types.StringPointerValue(hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Re)
							has1.Value.Two.Suf = types.StringPointerValue(hasItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2.Suf)
						}
					}
					if hasCount+1 > len(firewallRoutes1.Has) {
						firewallRoutes1.Has = append(firewallRoutes1.Has, has1)
					} else {
						firewallRoutes1.Has[hasCount].Key = has1.Key
						firewallRoutes1.Has[hasCount].Type = has1.Type
						firewallRoutes1.Has[hasCount].Value = has1.Value
					}
				}
				firewallRoutes1.Missing = []tfTypes.CreateProjectHas{}
				for missingCount, missingItem := range firewallRoutesItem.Missing {
					var missing1 tfTypes.CreateProjectHas
					missing1.Key = types.StringPointerValue(missingItem.Key)
					missing1.Type = types.StringValue(string(missingItem.Type))
					if missingItem.Value == nil {
						missing1.Value = nil
					} else {
						missing1.Value = &tfTypes.CreateProjectProjectsValue{}
						if missingItem.Value.Str != nil {
							missing1.Value.Str = types.StringPointerValue(missingItem.Value.Str)
						}
						if missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 != nil {
							missing1.Value.Two = &tfTypes.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2{}
							missing1.Value.Two.Eq = types.StringPointerValue(missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Eq)
							if missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Gt != nil {
								missing1.Value.Two.Gt = types.NumberValue(big.NewFloat(float64(*missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Gt)))
							} else {
								missing1.Value.Two.Gt = types.NumberNull()
							}
							if missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Gte != nil {
								missing1.Value.Two.Gte = types.NumberValue(big.NewFloat(float64(*missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Gte)))
							} else {
								missing1.Value.Two.Gte = types.NumberNull()
							}
							missing1.Value.Two.Inc = []types.String{}
							for _, v := range missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Inc {
								missing1.Value.Two.Inc = append(missing1.Value.Two.Inc, types.StringValue(v))
							}
							if missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Lt != nil {
								missing1.Value.Two.Lt = types.NumberValue(big.NewFloat(float64(*missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Lt)))
							} else {
								missing1.Value.Two.Lt = types.NumberNull()
							}
							if missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Lte != nil {
								missing1.Value.Two.Lte = types.NumberValue(big.NewFloat(float64(*missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Lte)))
							} else {
								missing1.Value.Two.Lte = types.NumberNull()
							}
							missing1.Value.Two.Neq = types.StringPointerValue(missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Neq)
							missing1.Value.Two.Ninc = []types.String{}
							for _, v := range missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Ninc {
								missing1.Value.Two.Ninc = append(missing1.Value.Two.Ninc, types.StringValue(v))
							}
							missing1.Value.Two.Pre = types.StringPointerValue(missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Pre)
							missing1.Value.Two.Re = types.StringPointerValue(missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Re)
							missing1.Value.Two.Suf = types.StringPointerValue(missingItem.Value.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2.Suf)
						}
					}
					if missingCount+1 > len(firewallRoutes1.Missing) {
						firewallRoutes1.Missing = append(firewallRoutes1.Missing, missing1)
					} else {
						firewallRoutes1.Missing[missingCount].Key = missing1.Key
						firewallRoutes1.Missing[missingCount].Type = missing1.Type
						firewallRoutes1.Missing[missingCount].Value = missing1.Value
					}
				}
				if firewallRoutesItem.Mitigate == nil {
					firewallRoutes1.Mitigate = nil
				} else {
					firewallRoutes1.Mitigate = &tfTypes.Mitigate{}
					firewallRoutes1.Mitigate.Action = types.StringValue(string(firewallRoutesItem.Mitigate.Action))
					if firewallRoutesItem.Mitigate.Erl == nil {
						firewallRoutes1.Mitigate.Erl = nil
					} else {
						firewallRoutes1.Mitigate.Erl = &tfTypes.Erl{}
						firewallRoutes1.Mitigate.Erl.Algo = types.StringValue(string(firewallRoutesItem.Mitigate.Erl.Algo))
						firewallRoutes1.Mitigate.Erl.Keys = []types.String{}
						for _, v := range firewallRoutesItem.Mitigate.Erl.Keys {
							firewallRoutes1.Mitigate.Erl.Keys = append(firewallRoutes1.Mitigate.Erl.Keys, types.StringValue(v))
						}
						firewallRoutes1.Mitigate.Erl.Limit = types.NumberValue(big.NewFloat(float64(firewallRoutesItem.Mitigate.Erl.Limit)))
						firewallRoutes1.Mitigate.Erl.Window = types.NumberValue(big.NewFloat(float64(firewallRoutesItem.Mitigate.Erl.Window)))
					}
					firewallRoutes1.Mitigate.RuleID = types.StringValue(firewallRoutesItem.Mitigate.RuleID)
				}
				if firewallRoutesItem.Src == nil {
					firewallRoutes1.Src = nil
				} else {
					firewallRoutes1.Src = &tfTypes.CreateProjectProjectsValue{}
					if firewallRoutesItem.Src.Str != nil {
						firewallRoutes1.Src.Str = types.StringPointerValue(firewallRoutesItem.Src.Str)
					}
					if firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2 != nil {
						firewallRoutes1.Src.Two = &tfTypes.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2{}
						firewallRoutes1.Src.Two.Eq = types.StringPointerValue(firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Eq)
						if firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Gt != nil {
							firewallRoutes1.Src.Two.Gt = types.NumberValue(big.NewFloat(float64(*firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Gt)))
						} else {
							firewallRoutes1.Src.Two.Gt = types.NumberNull()
						}
						if firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Gte != nil {
							firewallRoutes1.Src.Two.Gte = types.NumberValue(big.NewFloat(float64(*firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Gte)))
						} else {
							firewallRoutes1.Src.Two.Gte = types.NumberNull()
						}
						firewallRoutes1.Src.Two.Inc = []types.String{}
						for _, v := range firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Inc {
							firewallRoutes1.Src.Two.Inc = append(firewallRoutes1.Src.Two.Inc, types.StringValue(v))
						}
						if firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Lt != nil {
							firewallRoutes1.Src.Two.Lt = types.NumberValue(big.NewFloat(float64(*firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Lt)))
						} else {
							firewallRoutes1.Src.Two.Lt = types.NumberNull()
						}
						if firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Lte != nil {
							firewallRoutes1.Src.Two.Lte = types.NumberValue(big.NewFloat(float64(*firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Lte)))
						} else {
							firewallRoutes1.Src.Two.Lte = types.NumberNull()
						}
						firewallRoutes1.Src.Two.Neq = types.StringPointerValue(firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Neq)
						firewallRoutes1.Src.Two.Ninc = []types.String{}
						for _, v := range firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Ninc {
							firewallRoutes1.Src.Two.Ninc = append(firewallRoutes1.Src.Two.Ninc, types.StringValue(v))
						}
						firewallRoutes1.Src.Two.Pre = types.StringPointerValue(firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Pre)
						firewallRoutes1.Src.Two.Re = types.StringPointerValue(firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Re)
						firewallRoutes1.Src.Two.Suf = types.StringPointerValue(firewallRoutesItem.Src.CreateProjectProjectsResponse200ApplicationJSONResponseBody2.Suf)
					}
				}
				if firewallRoutesItem.Status != nil {
					firewallRoutes1.Status = types.NumberValue(big.NewFloat(float64(*firewallRoutesItem.Status)))
				} else {
					firewallRoutes1.Status = types.NumberNull()
				}
				if firewallRoutesCount+1 > len(r.Security.FirewallRoutes) {
					r.Security.FirewallRoutes = append(r.Security.FirewallRoutes, firewallRoutes1)
				} else {
					r.Security.FirewallRoutes[firewallRoutesCount].Dest = firewallRoutes1.Dest
					r.Security.FirewallRoutes[firewallRoutesCount].Handle = firewallRoutes1.Handle
					r.Security.FirewallRoutes[firewallRoutesCount].Has = firewallRoutes1.Has
					r.Security.FirewallRoutes[firewallRoutesCount].Missing = firewallRoutes1.Missing
					r.Security.FirewallRoutes[firewallRoutesCount].Mitigate = firewallRoutes1.Mitigate
					r.Security.FirewallRoutes[firewallRoutesCount].Src = firewallRoutes1.Src
					r.Security.FirewallRoutes[firewallRoutesCount].Status = firewallRoutes1.Status
				}
			}
			r.Security.FirewallSeawallEnabled = types.BoolPointerValue(resp.Security.FirewallSeawallEnabled)
			if resp.Security.FirewallUpdatedAt != nil {
				r.Security.FirewallUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallUpdatedAt)))
			} else {
				r.Security.FirewallUpdatedAt = types.NumberNull()
			}
			r.Security.Ja3Enabled = types.BoolPointerValue(resp.Security.Ja3Enabled)
			r.Security.Ja4Enabled = types.BoolPointerValue(resp.Security.Ja4Enabled)
		}
		r.ServerlessFunctionRegion = types.StringPointerValue(resp.ServerlessFunctionRegion)
		r.ServerlessFunctionZeroConfigFailover = types.BoolPointerValue(resp.ServerlessFunctionZeroConfigFailover)
		if resp.SkewProtectionBoundaryAt != nil {
			r.SkewProtectionBoundaryAt = types.NumberValue(big.NewFloat(float64(*resp.SkewProtectionBoundaryAt)))
		} else {
			r.SkewProtectionBoundaryAt = types.NumberNull()
		}
		if resp.SkewProtectionMaxAge != nil {
			r.SkewProtectionMaxAge = types.NumberValue(big.NewFloat(float64(*resp.SkewProtectionMaxAge)))
		} else {
			r.SkewProtectionMaxAge = types.NumberNull()
		}
		r.SkipGitConnectDuringLink = types.BoolPointerValue(resp.SkipGitConnectDuringLink)
		r.SourceFilesOutsideRootDirectory = types.BoolPointerValue(resp.SourceFilesOutsideRootDirectory)
		if resp.SpeedInsights == nil {
			r.SpeedInsights = nil
		} else {
			r.SpeedInsights = &tfTypes.SpeedInsights{}
			if resp.SpeedInsights.CanceledAt != nil {
				r.SpeedInsights.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.CanceledAt)))
			} else {
				r.SpeedInsights.CanceledAt = types.NumberNull()
			}
			if resp.SpeedInsights.DisabledAt != nil {
				r.SpeedInsights.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.DisabledAt)))
			} else {
				r.SpeedInsights.DisabledAt = types.NumberNull()
			}
			if resp.SpeedInsights.EnabledAt != nil {
				r.SpeedInsights.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.EnabledAt)))
			} else {
				r.SpeedInsights.EnabledAt = types.NumberNull()
			}
			r.SpeedInsights.HasData = types.BoolPointerValue(resp.SpeedInsights.HasData)
			r.SpeedInsights.ID = types.StringValue(resp.SpeedInsights.ID)
			if resp.SpeedInsights.PaidAt != nil {
				r.SpeedInsights.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.PaidAt)))
			} else {
				r.SpeedInsights.PaidAt = types.NumberNull()
			}
		}
		if resp.SsoProtection == nil {
			r.SsoProtection = nil
		} else {
			r.SsoProtection = &tfTypes.CreateProjectSsoProtection{}
			r.SsoProtection.DeploymentType = types.StringValue(string(resp.SsoProtection.DeploymentType))
		}
		if len(resp.Targets) > 0 {
			r.Targets = make(map[string]tfTypes.OidcTokenClaims)
			for targetsKey, targetsValue := range resp.Targets {
				var targetsResult tfTypes.OidcTokenClaims
				if targetsValue.Str != nil {
					targetsResult.Str = types.StringPointerValue(targetsValue.Str)
				}
				if targetsValue.ArrayOfStr != nil {
					targetsResult.ArrayOfStr = []types.String{}
					for _, v := range targetsValue.ArrayOfStr {
						targetsResult.ArrayOfStr = append(targetsResult.ArrayOfStr, types.StringValue(v))
					}
				}
				r.Targets[targetsKey] = targetsResult
			}
		}
		if resp.TransferCompletedAt != nil {
			r.TransferCompletedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferCompletedAt)))
		} else {
			r.TransferCompletedAt = types.NumberNull()
		}
		r.TransferredFromAccountID = types.StringPointerValue(resp.TransferredFromAccountID)
		if resp.TransferStartedAt != nil {
			r.TransferStartedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferStartedAt)))
		} else {
			r.TransferStartedAt = types.NumberNull()
		}
		r.TransferToAccountID = types.StringPointerValue(resp.TransferToAccountID)
		if resp.TrustedIps == nil {
			r.TrustedIps = nil
		} else {
			r.TrustedIps = &tfTypes.CreateProjectTrustedIps{}
			if resp.TrustedIps.CreateProjectProjectsResponse1 != nil {
				r.TrustedIps.One = &tfTypes.CreateProjectProjectsResponse1{}
				r.TrustedIps.One.Addresses = []tfTypes.CreateProjectAddresses{}
				if len(r.TrustedIps.One.Addresses) > len(resp.TrustedIps.CreateProjectProjectsResponse1.Addresses) {
					r.TrustedIps.One.Addresses = r.TrustedIps.One.Addresses[:len(resp.TrustedIps.CreateProjectProjectsResponse1.Addresses)]
				}
				for addressesCount, addressesItem := range resp.TrustedIps.CreateProjectProjectsResponse1.Addresses {
					var addresses1 tfTypes.CreateProjectAddresses
					addresses1.Note = types.StringPointerValue(addressesItem.Note)
					addresses1.Value = types.StringValue(addressesItem.Value)
					if addressesCount+1 > len(r.TrustedIps.One.Addresses) {
						r.TrustedIps.One.Addresses = append(r.TrustedIps.One.Addresses, addresses1)
					} else {
						r.TrustedIps.One.Addresses[addressesCount].Note = addresses1.Note
						r.TrustedIps.One.Addresses[addressesCount].Value = addresses1.Value
					}
				}
				r.TrustedIps.One.DeploymentType = types.StringValue(string(resp.TrustedIps.CreateProjectProjectsResponse1.DeploymentType))
				r.TrustedIps.One.ProtectionMode = types.StringValue(string(resp.TrustedIps.CreateProjectProjectsResponse1.ProtectionMode))
			}
			if resp.TrustedIps.CreateProjectProjectsResponse2 != nil {
				r.TrustedIps.Two = &tfTypes.CreateProjectProjectsResponse2{}
				r.TrustedIps.Two.DeploymentType = types.StringValue(string(resp.TrustedIps.CreateProjectProjectsResponse2.DeploymentType))
			}
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.UpdatedAt)))
		} else {
			r.UpdatedAt = types.NumberNull()
		}
		if resp.WebAnalytics == nil {
			r.WebAnalytics = nil
		} else {
			r.WebAnalytics = &tfTypes.WebAnalytics{}
			if resp.WebAnalytics.CanceledAt != nil {
				r.WebAnalytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.CanceledAt)))
			} else {
				r.WebAnalytics.CanceledAt = types.NumberNull()
			}
			if resp.WebAnalytics.DisabledAt != nil {
				r.WebAnalytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.DisabledAt)))
			} else {
				r.WebAnalytics.DisabledAt = types.NumberNull()
			}
			if resp.WebAnalytics.EnabledAt != nil {
				r.WebAnalytics.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.EnabledAt)))
			} else {
				r.WebAnalytics.EnabledAt = types.NumberNull()
			}
			r.WebAnalytics.HasData = types.BoolPointerValue(resp.WebAnalytics.HasData)
			r.WebAnalytics.ID = types.StringValue(resp.WebAnalytics.ID)
		}
	}
}
