// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/vercel/terraform-provider-vercel/internal/provider/types"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/models/operations"
	"math/big"
)

func (r *ProjectResourceModel) ToOperationsCreateProjectRequestBody() *operations.CreateProjectRequestBody {
	buildCommand := new(string)
	if !r.BuildCommand.IsUnknown() && !r.BuildCommand.IsNull() {
		*buildCommand = r.BuildCommand.ValueString()
	} else {
		buildCommand = nil
	}
	commandForIgnoringBuildStep := new(string)
	if !r.CommandForIgnoringBuildStep.IsUnknown() && !r.CommandForIgnoringBuildStep.IsNull() {
		*commandForIgnoringBuildStep = r.CommandForIgnoringBuildStep.ValueString()
	} else {
		commandForIgnoringBuildStep = nil
	}
	devCommand := new(string)
	if !r.DevCommand.IsUnknown() && !r.DevCommand.IsNull() {
		*devCommand = r.DevCommand.ValueString()
	} else {
		devCommand = nil
	}
	var environmentVariables []operations.EnvironmentVariables = []operations.EnvironmentVariables{}
	for _, environmentVariablesItem := range r.EnvironmentVariables {
		key := environmentVariablesItem.Key.ValueString()
		var target []operations.CreateProjectTarget = []operations.CreateProjectTarget{}
		for _, targetItem := range environmentVariablesItem.Target {
			target = append(target, operations.CreateProjectTarget(targetItem.ValueString()))
		}
		gitBranch := new(string)
		if !environmentVariablesItem.GitBranch.IsUnknown() && !environmentVariablesItem.GitBranch.IsNull() {
			*gitBranch = environmentVariablesItem.GitBranch.ValueString()
		} else {
			gitBranch = nil
		}
		typeVar := new(operations.CreateProjectType)
		if !environmentVariablesItem.Type.IsUnknown() && !environmentVariablesItem.Type.IsNull() {
			*typeVar = operations.CreateProjectType(environmentVariablesItem.Type.ValueString())
		} else {
			typeVar = nil
		}
		value := environmentVariablesItem.Value.ValueString()
		environmentVariables = append(environmentVariables, operations.EnvironmentVariables{
			Key:       key,
			Target:    target,
			GitBranch: gitBranch,
			Type:      typeVar,
			Value:     value,
		})
	}
	framework := new(operations.CreateProjectFramework)
	if !r.Framework.IsUnknown() && !r.Framework.IsNull() {
		*framework = operations.CreateProjectFramework(r.Framework.ValueString())
	} else {
		framework = nil
	}
	var gitRepository *operations.GitRepository
	if r.GitRepository != nil {
		repo := r.GitRepository.Repo.ValueString()
		typeVar1 := operations.CreateProjectProjectsType(r.GitRepository.Type.ValueString())
		gitRepository = &operations.GitRepository{
			Repo: repo,
			Type: typeVar1,
		}
	}
	installCommand := new(string)
	if !r.InstallCommand.IsUnknown() && !r.InstallCommand.IsNull() {
		*installCommand = r.InstallCommand.ValueString()
	} else {
		installCommand = nil
	}
	name := r.Name.ValueString()
	skipGitConnectDuringLink := new(bool)
	if !r.SkipGitConnectDuringLink.IsUnknown() && !r.SkipGitConnectDuringLink.IsNull() {
		*skipGitConnectDuringLink = r.SkipGitConnectDuringLink.ValueBool()
	} else {
		skipGitConnectDuringLink = nil
	}
	outputDirectory := new(string)
	if !r.OutputDirectory.IsUnknown() && !r.OutputDirectory.IsNull() {
		*outputDirectory = r.OutputDirectory.ValueString()
	} else {
		outputDirectory = nil
	}
	publicSource := new(bool)
	if !r.PublicSource.IsUnknown() && !r.PublicSource.IsNull() {
		*publicSource = r.PublicSource.ValueBool()
	} else {
		publicSource = nil
	}
	rootDirectory := new(string)
	if !r.RootDirectory.IsUnknown() && !r.RootDirectory.IsNull() {
		*rootDirectory = r.RootDirectory.ValueString()
	} else {
		rootDirectory = nil
	}
	serverlessFunctionRegion := new(string)
	if !r.ServerlessFunctionRegion.IsUnknown() && !r.ServerlessFunctionRegion.IsNull() {
		*serverlessFunctionRegion = r.ServerlessFunctionRegion.ValueString()
	} else {
		serverlessFunctionRegion = nil
	}
	serverlessFunctionZeroConfigFailover := new(bool)
	if !r.ServerlessFunctionZeroConfigFailover.IsUnknown() && !r.ServerlessFunctionZeroConfigFailover.IsNull() {
		*serverlessFunctionZeroConfigFailover = r.ServerlessFunctionZeroConfigFailover.ValueBool()
	} else {
		serverlessFunctionZeroConfigFailover = nil
	}
	out := operations.CreateProjectRequestBody{
		BuildCommand:                         buildCommand,
		CommandForIgnoringBuildStep:          commandForIgnoringBuildStep,
		DevCommand:                           devCommand,
		EnvironmentVariables:                 environmentVariables,
		Framework:                            framework,
		GitRepository:                        gitRepository,
		InstallCommand:                       installCommand,
		Name:                                 name,
		SkipGitConnectDuringLink:             skipGitConnectDuringLink,
		OutputDirectory:                      outputDirectory,
		PublicSource:                         publicSource,
		RootDirectory:                        rootDirectory,
		ServerlessFunctionRegion:             serverlessFunctionRegion,
		ServerlessFunctionZeroConfigFailover: serverlessFunctionZeroConfigFailover,
	}
	return &out
}

func (r *ProjectResourceModel) RefreshFromOperationsCreateProjectResponseBody(resp *operations.CreateProjectResponseBody) {
	if resp != nil {
		r.AccountID = types.StringValue(resp.AccountID)
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.GetProjectAnalytics{}
			if resp.Analytics.CanceledAt != nil {
				r.Analytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.CanceledAt)))
			} else {
				r.Analytics.CanceledAt = types.NumberNull()
			}
			r.Analytics.DisabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.DisabledAt)))
			r.Analytics.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.EnabledAt)))
			r.Analytics.ID = types.StringValue(resp.Analytics.ID)
			if resp.Analytics.PaidAt != nil {
				r.Analytics.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.PaidAt)))
			} else {
				r.Analytics.PaidAt = types.NumberNull()
			}
			if resp.Analytics.SampleRatePercent != nil {
				r.Analytics.SampleRatePercent = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SampleRatePercent)))
			} else {
				r.Analytics.SampleRatePercent = types.NumberNull()
			}
			if resp.Analytics.SpendLimitInDollars != nil {
				r.Analytics.SpendLimitInDollars = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SpendLimitInDollars)))
			} else {
				r.Analytics.SpendLimitInDollars = types.NumberNull()
			}
		}
		r.AutoAssignCustomDomains = types.BoolPointerValue(resp.AutoAssignCustomDomains)
		r.AutoAssignCustomDomainsUpdatedBy = types.StringPointerValue(resp.AutoAssignCustomDomainsUpdatedBy)
		r.AutoExposeSystemEnvs = types.BoolPointerValue(resp.AutoExposeSystemEnvs)
		r.BuildCommand = types.StringPointerValue(resp.BuildCommand)
		r.CommandForIgnoringBuildStep = types.StringPointerValue(resp.CommandForIgnoringBuildStep)
		r.ConcurrencyBucketName = types.StringPointerValue(resp.ConcurrencyBucketName)
		r.ConnectBuildsEnabled = types.BoolPointerValue(resp.ConnectBuildsEnabled)
		r.ConnectConfigurationID = types.StringPointerValue(resp.ConnectConfigurationID)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.CreatedAt)))
		} else {
			r.CreatedAt = types.NumberNull()
		}
		if resp.Crons == nil {
			r.Crons = nil
		} else {
			r.Crons = &tfTypes.GetProjectCrons{}
			r.Crons.Definitions = []tfTypes.GetProjectDefinitions{}
			if len(r.Crons.Definitions) > len(resp.Crons.Definitions) {
				r.Crons.Definitions = r.Crons.Definitions[:len(resp.Crons.Definitions)]
			}
			for definitionsCount, definitionsItem := range resp.Crons.Definitions {
				var definitions1 tfTypes.GetProjectDefinitions
				definitions1.Host = types.StringValue(definitionsItem.Host)
				definitions1.Path = types.StringValue(definitionsItem.Path)
				definitions1.Schedule = types.StringValue(definitionsItem.Schedule)
				if definitionsCount+1 > len(r.Crons.Definitions) {
					r.Crons.Definitions = append(r.Crons.Definitions, definitions1)
				} else {
					r.Crons.Definitions[definitionsCount].Host = definitions1.Host
					r.Crons.Definitions[definitionsCount].Path = definitions1.Path
					r.Crons.Definitions[definitionsCount].Schedule = definitions1.Schedule
				}
			}
			r.Crons.DeploymentID = types.StringPointerValue(resp.Crons.DeploymentID)
			if resp.Crons.DisabledAt != nil {
				r.Crons.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.Crons.DisabledAt)))
			} else {
				r.Crons.DisabledAt = types.NumberNull()
			}
			r.Crons.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Crons.EnabledAt)))
			r.Crons.UpdatedAt = types.NumberValue(big.NewFloat(float64(resp.Crons.UpdatedAt)))
		}
		r.CustomerSupportCodeVisibility = types.BoolPointerValue(resp.CustomerSupportCodeVisibility)
		if resp.DataCache == nil {
			r.DataCache = nil
		} else {
			r.DataCache = &tfTypes.GetProjectDataCache{}
			if resp.DataCache.StorageSizeBytes != nil {
				r.DataCache.StorageSizeBytes = types.NumberValue(big.NewFloat(float64(*resp.DataCache.StorageSizeBytes)))
			} else {
				r.DataCache.StorageSizeBytes = types.NumberNull()
			}
			r.DataCache.Unlimited = types.BoolPointerValue(resp.DataCache.Unlimited)
			r.DataCache.UserDisabled = types.BoolValue(resp.DataCache.UserDisabled)
		}
		r.DevCommand = types.StringPointerValue(resp.DevCommand)
		r.DirectoryListing = types.BoolValue(resp.DirectoryListing)
		r.EnablePreviewFeedback = types.BoolPointerValue(resp.EnablePreviewFeedback)
		r.Env = []tfTypes.GetProjectEnv{}
		if len(r.Env) > len(resp.Env) {
			r.Env = r.Env[:len(resp.Env)]
		}
		for envCount, envItem := range resp.Env {
			var env1 tfTypes.GetProjectEnv
			env1.Comment = types.StringPointerValue(envItem.Comment)
			env1.ConfigurationID = types.StringPointerValue(envItem.ConfigurationID)
			if envItem.ContentHint == nil {
				env1.ContentHint = nil
			} else {
				env1.ContentHint = &tfTypes.GetProjectContentHint{}
				if envItem.ContentHint.CreateProjectContentHint1 != nil {
					env1.ContentHint.One = &tfTypes.GetProjectContentHint1{}
					env1.ContentHint.One.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint1.StoreID)
					env1.ContentHint.One.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint1.Type))
				}
				if envItem.ContentHint.ContentHint10 != nil {
					env1.ContentHint.Ten = &tfTypes.ContentHint10{}
					env1.ContentHint.Ten.StoreID = types.StringValue(envItem.ContentHint.ContentHint10.StoreID)
					env1.ContentHint.Ten.Type = types.StringValue(string(envItem.ContentHint.ContentHint10.Type))
				}
				if envItem.ContentHint.ContentHint11 != nil {
					env1.ContentHint.Eleven = &tfTypes.ContentHint11{}
					env1.ContentHint.Eleven.StoreID = types.StringValue(envItem.ContentHint.ContentHint11.StoreID)
					env1.ContentHint.Eleven.Type = types.StringValue(string(envItem.ContentHint.ContentHint11.Type))
				}
				if envItem.ContentHint.ContentHint12 != nil {
					env1.ContentHint.Twelve = &tfTypes.ContentHint12{}
					env1.ContentHint.Twelve.StoreID = types.StringValue(envItem.ContentHint.ContentHint12.StoreID)
					env1.ContentHint.Twelve.Type = types.StringValue(string(envItem.ContentHint.ContentHint12.Type))
				}
				if envItem.ContentHint.ContentHint13 != nil {
					env1.ContentHint.Thirteen = &tfTypes.ContentHint13{}
					env1.ContentHint.Thirteen.StoreID = types.StringValue(envItem.ContentHint.ContentHint13.StoreID)
					env1.ContentHint.Thirteen.Type = types.StringValue(string(envItem.ContentHint.ContentHint13.Type))
				}
				if envItem.ContentHint.ContentHint14 != nil {
					env1.ContentHint.Fourteen = &tfTypes.ContentHint14{}
					env1.ContentHint.Fourteen.StoreID = types.StringValue(envItem.ContentHint.ContentHint14.StoreID)
					env1.ContentHint.Fourteen.Type = types.StringValue(string(envItem.ContentHint.ContentHint14.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint2 != nil {
					env1.ContentHint.Two = &tfTypes.GetProjectContentHint2{}
					env1.ContentHint.Two.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint2.StoreID)
					env1.ContentHint.Two.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint2.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint3 != nil {
					env1.ContentHint.Three = &tfTypes.GetProjectContentHint3{}
					env1.ContentHint.Three.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint3.StoreID)
					env1.ContentHint.Three.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint3.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint4 != nil {
					env1.ContentHint.Four = &tfTypes.GetProjectContentHint4{}
					env1.ContentHint.Four.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint4.StoreID)
					env1.ContentHint.Four.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint4.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint5 != nil {
					env1.ContentHint.Five = &tfTypes.GetProjectContentHint5{}
					env1.ContentHint.Five.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint5.StoreID)
					env1.ContentHint.Five.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint5.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint6 != nil {
					env1.ContentHint.Six = &tfTypes.GetProjectContentHint6{}
					env1.ContentHint.Six.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint6.StoreID)
					env1.ContentHint.Six.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint6.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint7 != nil {
					env1.ContentHint.Seven = &tfTypes.GetProjectContentHint7{}
					env1.ContentHint.Seven.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint7.StoreID)
					env1.ContentHint.Seven.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint7.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint8 != nil {
					env1.ContentHint.Eight = &tfTypes.GetProjectContentHint8{}
					env1.ContentHint.Eight.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint8.StoreID)
					env1.ContentHint.Eight.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint8.Type))
				}
				if envItem.ContentHint.CreateProjectContentHint9 != nil {
					env1.ContentHint.Nine = &tfTypes.GetProjectContentHint9{}
					env1.ContentHint.Nine.StoreID = types.StringValue(envItem.ContentHint.CreateProjectContentHint9.StoreID)
					env1.ContentHint.Nine.Type = types.StringValue(string(envItem.ContentHint.CreateProjectContentHint9.Type))
				}
			}
			if envItem.CreatedAt != nil {
				env1.CreatedAt = types.NumberValue(big.NewFloat(float64(*envItem.CreatedAt)))
			} else {
				env1.CreatedAt = types.NumberNull()
			}
			env1.CreatedBy = types.StringPointerValue(envItem.CreatedBy)
			env1.CustomEnvironmentID = types.StringPointerValue(envItem.CustomEnvironmentID)
			env1.Decrypted = types.BoolPointerValue(envItem.Decrypted)
			env1.EdgeConfigID = types.StringPointerValue(envItem.EdgeConfigID)
			env1.EdgeConfigTokenID = types.StringPointerValue(envItem.EdgeConfigTokenID)
			env1.GitBranch = types.StringPointerValue(envItem.GitBranch)
			env1.ID = types.StringPointerValue(envItem.ID)
			if envItem.InternalContentHint == nil {
				env1.InternalContentHint = nil
			} else {
				env1.InternalContentHint = &tfTypes.GetProjectInternalContentHint{}
				env1.InternalContentHint.EncryptedValue = types.StringValue(envItem.InternalContentHint.EncryptedValue)
				env1.InternalContentHint.Type = types.StringValue(string(envItem.InternalContentHint.Type))
			}
			env1.Key = types.StringValue(envItem.Key)
			env1.Target = []types.String{}
			for _, v := range envItem.Target {
				env1.Target = append(env1.Target, types.StringValue(string(v)))
			}
			env1.Type = types.StringValue(string(envItem.Type))
			if envItem.UpdatedAt != nil {
				env1.UpdatedAt = types.NumberValue(big.NewFloat(float64(*envItem.UpdatedAt)))
			} else {
				env1.UpdatedAt = types.NumberNull()
			}
			env1.UpdatedBy = types.StringPointerValue(envItem.UpdatedBy)
			env1.Value = types.StringValue(envItem.Value)
			if envCount+1 > len(r.Env) {
				r.Env = append(r.Env, env1)
			} else {
				r.Env[envCount].Comment = env1.Comment
				r.Env[envCount].ConfigurationID = env1.ConfigurationID
				r.Env[envCount].ContentHint = env1.ContentHint
				r.Env[envCount].CreatedAt = env1.CreatedAt
				r.Env[envCount].CreatedBy = env1.CreatedBy
				r.Env[envCount].CustomEnvironmentID = env1.CustomEnvironmentID
				r.Env[envCount].Decrypted = env1.Decrypted
				r.Env[envCount].EdgeConfigID = env1.EdgeConfigID
				r.Env[envCount].EdgeConfigTokenID = env1.EdgeConfigTokenID
				r.Env[envCount].GitBranch = env1.GitBranch
				r.Env[envCount].ID = env1.ID
				r.Env[envCount].InternalContentHint = env1.InternalContentHint
				r.Env[envCount].Key = env1.Key
				r.Env[envCount].Target = env1.Target
				r.Env[envCount].Type = env1.Type
				r.Env[envCount].UpdatedAt = env1.UpdatedAt
				r.Env[envCount].UpdatedBy = env1.UpdatedBy
				r.Env[envCount].Value = env1.Value
			}
		}
		if resp.Framework != nil {
			r.Framework = types.StringValue(string(*resp.Framework))
		} else {
			r.Framework = types.StringNull()
		}
		if resp.GitComments == nil {
			r.GitComments = nil
		} else {
			r.GitComments = &tfTypes.GetProjectGitComments{}
			r.GitComments.OnCommit = types.BoolValue(resp.GitComments.OnCommit)
			r.GitComments.OnPullRequest = types.BoolValue(resp.GitComments.OnPullRequest)
		}
		r.GitForkProtection = types.BoolPointerValue(resp.GitForkProtection)
		r.GitLFS = types.BoolPointerValue(resp.GitLFS)
		r.HasActiveBranches = types.BoolPointerValue(resp.HasActiveBranches)
		r.HasFloatingAliases = types.BoolPointerValue(resp.HasFloatingAliases)
		r.ID = types.StringValue(resp.ID)
		r.InstallCommand = types.StringPointerValue(resp.InstallCommand)
		if resp.LastAliasRequest == nil {
			r.LastAliasRequest = nil
		} else {
			r.LastAliasRequest = &tfTypes.GetProjectLastAliasRequest{}
			r.LastAliasRequest.FromDeploymentID = types.StringValue(resp.LastAliasRequest.FromDeploymentID)
			r.LastAliasRequest.JobStatus = types.StringValue(string(resp.LastAliasRequest.JobStatus))
			r.LastAliasRequest.RequestedAt = types.NumberValue(big.NewFloat(float64(resp.LastAliasRequest.RequestedAt)))
			r.LastAliasRequest.ToDeploymentID = types.StringValue(resp.LastAliasRequest.ToDeploymentID)
			r.LastAliasRequest.Type = types.StringValue(string(resp.LastAliasRequest.Type))
		}
		if resp.LastRollbackTarget == nil {
			r.LastRollbackTarget = nil
		} else {
			r.LastRollbackTarget = &tfTypes.GetProjectLastRollbackTarget{}
		}
		r.LatestDeployments = []tfTypes.GetProjectLatestDeployments{}
		if len(r.LatestDeployments) > len(resp.LatestDeployments) {
			r.LatestDeployments = r.LatestDeployments[:len(resp.LatestDeployments)]
		}
		for latestDeploymentsCount, latestDeploymentsItem := range resp.LatestDeployments {
			var latestDeployments1 tfTypes.GetProjectLatestDeployments
			latestDeployments1.Alias = []types.String{}
			for _, v := range latestDeploymentsItem.Alias {
				latestDeployments1.Alias = append(latestDeployments1.Alias, types.StringValue(v))
			}
			if latestDeploymentsItem.AliasAssigned == nil {
				latestDeployments1.AliasAssigned = nil
			} else {
				latestDeployments1.AliasAssigned = &tfTypes.GetProjectAliasAssigned{}
				if latestDeploymentsItem.AliasAssigned.Number != nil {
					if latestDeploymentsItem.AliasAssigned.Number != nil {
						latestDeployments1.AliasAssigned.Number = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.AliasAssigned.Number)))
					} else {
						latestDeployments1.AliasAssigned.Number = types.NumberNull()
					}
				}
				if latestDeploymentsItem.AliasAssigned.Boolean != nil {
					latestDeployments1.AliasAssigned.Boolean = types.BoolPointerValue(latestDeploymentsItem.AliasAssigned.Boolean)
				}
			}
			if latestDeploymentsItem.AliasError == nil {
				latestDeployments1.AliasError = nil
			} else {
				latestDeployments1.AliasError = &tfTypes.GetProjectAliasError{}
				latestDeployments1.AliasError.Code = types.StringValue(latestDeploymentsItem.AliasError.Code)
				latestDeployments1.AliasError.Message = types.StringValue(latestDeploymentsItem.AliasError.Message)
			}
			latestDeployments1.AliasFinal = types.StringPointerValue(latestDeploymentsItem.AliasFinal)
			latestDeployments1.AutomaticAliases = []types.String{}
			for _, v := range latestDeploymentsItem.AutomaticAliases {
				latestDeployments1.AutomaticAliases = append(latestDeployments1.AutomaticAliases, types.StringValue(v))
			}
			if latestDeploymentsItem.BuildingAt != nil {
				latestDeployments1.BuildingAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.BuildingAt)))
			} else {
				latestDeployments1.BuildingAt = types.NumberNull()
			}
			latestDeployments1.Builds = []tfTypes.GetProjectBuilds{}
			for buildsCount, buildsItem := range latestDeploymentsItem.Builds {
				var builds1 tfTypes.GetProjectBuilds
				builds1.Dest = types.StringPointerValue(buildsItem.Dest)
				builds1.Src = types.StringPointerValue(buildsItem.Src)
				builds1.Use = types.StringValue(buildsItem.Use)
				if buildsCount+1 > len(latestDeployments1.Builds) {
					latestDeployments1.Builds = append(latestDeployments1.Builds, builds1)
				} else {
					latestDeployments1.Builds[buildsCount].Dest = builds1.Dest
					latestDeployments1.Builds[buildsCount].Src = builds1.Src
					latestDeployments1.Builds[buildsCount].Use = builds1.Use
				}
			}
			if latestDeploymentsItem.ChecksConclusion != nil {
				latestDeployments1.ChecksConclusion = types.StringValue(string(*latestDeploymentsItem.ChecksConclusion))
			} else {
				latestDeployments1.ChecksConclusion = types.StringNull()
			}
			if latestDeploymentsItem.ChecksState != nil {
				latestDeployments1.ChecksState = types.StringValue(string(*latestDeploymentsItem.ChecksState))
			} else {
				latestDeployments1.ChecksState = types.StringNull()
			}
			latestDeployments1.ConnectBuildsEnabled = types.BoolPointerValue(latestDeploymentsItem.ConnectBuildsEnabled)
			latestDeployments1.ConnectConfigurationID = types.StringPointerValue(latestDeploymentsItem.ConnectConfigurationID)
			latestDeployments1.CreatedAt = types.NumberValue(big.NewFloat(float64(latestDeploymentsItem.CreatedAt)))
			latestDeployments1.CreatedIn = types.StringValue(latestDeploymentsItem.CreatedIn)
			if latestDeploymentsItem.Creator == nil {
				latestDeployments1.Creator = nil
			} else {
				latestDeployments1.Creator = &tfTypes.GetProjectCreator{}
				latestDeployments1.Creator.Email = types.StringValue(latestDeploymentsItem.Creator.Email)
				latestDeployments1.Creator.GithubLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GithubLogin)
				latestDeployments1.Creator.GitlabLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GitlabLogin)
				latestDeployments1.Creator.UID = types.StringValue(latestDeploymentsItem.Creator.UID)
				latestDeployments1.Creator.Username = types.StringValue(latestDeploymentsItem.Creator.Username)
			}
			latestDeployments1.DeploymentHostname = types.StringValue(latestDeploymentsItem.DeploymentHostname)
			latestDeployments1.Forced = types.BoolPointerValue(latestDeploymentsItem.Forced)
			latestDeployments1.ID = types.StringValue(latestDeploymentsItem.ID)
			if len(latestDeploymentsItem.Meta) > 0 {
				latestDeployments1.Meta = make(map[string]types.String)
				for key1, value1 := range latestDeploymentsItem.Meta {
					latestDeployments1.Meta[key1] = types.StringValue(value1)
				}
			}
			latestDeployments1.MonorepoManager = types.StringPointerValue(latestDeploymentsItem.MonorepoManager)
			latestDeployments1.Name = types.StringValue(latestDeploymentsItem.Name)
			if len(latestDeploymentsItem.OidcTokenClaims) > 0 {
				latestDeployments1.OidcTokenClaims = make(map[string]tfTypes.GetProjectOidcTokenClaims)
				for getProjectOidcTokenClaimsKey, getProjectOidcTokenClaimsValue := range latestDeploymentsItem.OidcTokenClaims {
					var getProjectOidcTokenClaimsResult tfTypes.GetProjectOidcTokenClaims
					if getProjectOidcTokenClaimsValue.Str != nil {
						getProjectOidcTokenClaimsResult.Str = types.StringPointerValue(getProjectOidcTokenClaimsValue.Str)
					}
					if getProjectOidcTokenClaimsValue.ArrayOfStr != nil {
						getProjectOidcTokenClaimsResult.ArrayOfStr = []types.String{}
						for _, v := range getProjectOidcTokenClaimsValue.ArrayOfStr {
							getProjectOidcTokenClaimsResult.ArrayOfStr = append(getProjectOidcTokenClaimsResult.ArrayOfStr, types.StringValue(v))
						}
					}
					latestDeployments1.OidcTokenClaims[getProjectOidcTokenClaimsKey] = getProjectOidcTokenClaimsResult
				}
			}
			latestDeployments1.Plan = types.StringValue(string(latestDeploymentsItem.Plan))
			latestDeployments1.PreviewCommentsEnabled = types.BoolPointerValue(latestDeploymentsItem.PreviewCommentsEnabled)
			latestDeployments1.Private = types.BoolValue(latestDeploymentsItem.Private)
			if latestDeploymentsItem.ReadyAt != nil {
				latestDeployments1.ReadyAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.ReadyAt)))
			} else {
				latestDeployments1.ReadyAt = types.NumberNull()
			}
			latestDeployments1.ReadyState = types.StringValue(string(latestDeploymentsItem.ReadyState))
			if latestDeploymentsItem.ReadySubstate != nil {
				latestDeployments1.ReadySubstate = types.StringValue(string(*latestDeploymentsItem.ReadySubstate))
			} else {
				latestDeployments1.ReadySubstate = types.StringNull()
			}
			if latestDeploymentsItem.RequestedAt != nil {
				latestDeployments1.RequestedAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.RequestedAt)))
			} else {
				latestDeployments1.RequestedAt = types.NumberNull()
			}
			latestDeployments1.Target = types.StringPointerValue(latestDeploymentsItem.Target)
			latestDeployments1.TeamID = types.StringPointerValue(latestDeploymentsItem.TeamID)
			latestDeployments1.Type = types.StringValue(string(latestDeploymentsItem.Type))
			latestDeployments1.URL = types.StringValue(latestDeploymentsItem.URL)
			latestDeployments1.UserID = types.StringValue(latestDeploymentsItem.UserID)
			latestDeployments1.WithCache = types.BoolPointerValue(latestDeploymentsItem.WithCache)
			if latestDeploymentsCount+1 > len(r.LatestDeployments) {
				r.LatestDeployments = append(r.LatestDeployments, latestDeployments1)
			} else {
				r.LatestDeployments[latestDeploymentsCount].Alias = latestDeployments1.Alias
				r.LatestDeployments[latestDeploymentsCount].AliasAssigned = latestDeployments1.AliasAssigned
				r.LatestDeployments[latestDeploymentsCount].AliasError = latestDeployments1.AliasError
				r.LatestDeployments[latestDeploymentsCount].AliasFinal = latestDeployments1.AliasFinal
				r.LatestDeployments[latestDeploymentsCount].AutomaticAliases = latestDeployments1.AutomaticAliases
				r.LatestDeployments[latestDeploymentsCount].BuildingAt = latestDeployments1.BuildingAt
				r.LatestDeployments[latestDeploymentsCount].Builds = latestDeployments1.Builds
				r.LatestDeployments[latestDeploymentsCount].ChecksConclusion = latestDeployments1.ChecksConclusion
				r.LatestDeployments[latestDeploymentsCount].ChecksState = latestDeployments1.ChecksState
				r.LatestDeployments[latestDeploymentsCount].ConnectBuildsEnabled = latestDeployments1.ConnectBuildsEnabled
				r.LatestDeployments[latestDeploymentsCount].ConnectConfigurationID = latestDeployments1.ConnectConfigurationID
				r.LatestDeployments[latestDeploymentsCount].CreatedAt = latestDeployments1.CreatedAt
				r.LatestDeployments[latestDeploymentsCount].CreatedIn = latestDeployments1.CreatedIn
				r.LatestDeployments[latestDeploymentsCount].Creator = latestDeployments1.Creator
				r.LatestDeployments[latestDeploymentsCount].DeploymentHostname = latestDeployments1.DeploymentHostname
				r.LatestDeployments[latestDeploymentsCount].Forced = latestDeployments1.Forced
				r.LatestDeployments[latestDeploymentsCount].ID = latestDeployments1.ID
				r.LatestDeployments[latestDeploymentsCount].Meta = latestDeployments1.Meta
				r.LatestDeployments[latestDeploymentsCount].MonorepoManager = latestDeployments1.MonorepoManager
				r.LatestDeployments[latestDeploymentsCount].Name = latestDeployments1.Name
				r.LatestDeployments[latestDeploymentsCount].OidcTokenClaims = latestDeployments1.OidcTokenClaims
				r.LatestDeployments[latestDeploymentsCount].Plan = latestDeployments1.Plan
				r.LatestDeployments[latestDeploymentsCount].PreviewCommentsEnabled = latestDeployments1.PreviewCommentsEnabled
				r.LatestDeployments[latestDeploymentsCount].Private = latestDeployments1.Private
				r.LatestDeployments[latestDeploymentsCount].ReadyAt = latestDeployments1.ReadyAt
				r.LatestDeployments[latestDeploymentsCount].ReadyState = latestDeployments1.ReadyState
				r.LatestDeployments[latestDeploymentsCount].ReadySubstate = latestDeployments1.ReadySubstate
				r.LatestDeployments[latestDeploymentsCount].RequestedAt = latestDeployments1.RequestedAt
				r.LatestDeployments[latestDeploymentsCount].Target = latestDeployments1.Target
				r.LatestDeployments[latestDeploymentsCount].TeamID = latestDeployments1.TeamID
				r.LatestDeployments[latestDeploymentsCount].Type = latestDeployments1.Type
				r.LatestDeployments[latestDeploymentsCount].URL = latestDeployments1.URL
				r.LatestDeployments[latestDeploymentsCount].UserID = latestDeployments1.UserID
				r.LatestDeployments[latestDeploymentsCount].WithCache = latestDeployments1.WithCache
			}
		}
		if resp.Link == nil {
			r.Link = nil
		} else {
			r.Link = &tfTypes.GetProjectLink{}
			if resp.Link.CreateProjectLink1 != nil {
				r.Link.One = &tfTypes.GetProjectLink1{}
				if resp.Link.CreateProjectLink1.CreatedAt != nil {
					r.Link.One.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink1.CreatedAt)))
				} else {
					r.Link.One.CreatedAt = types.NumberNull()
				}
				r.Link.One.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.One.DeployHooks) > len(resp.Link.CreateProjectLink1.DeployHooks) {
					r.Link.One.DeployHooks = r.Link.One.DeployHooks[:len(resp.Link.CreateProjectLink1.DeployHooks)]
				}
				for deployHooksCount, deployHooksItem := range resp.Link.CreateProjectLink1.DeployHooks {
					var deployHooks1 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem.CreatedAt != nil {
						deployHooks1.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem.CreatedAt)))
					} else {
						deployHooks1.CreatedAt = types.NumberNull()
					}
					deployHooks1.ID = types.StringValue(deployHooksItem.ID)
					deployHooks1.Name = types.StringValue(deployHooksItem.Name)
					deployHooks1.Ref = types.StringValue(deployHooksItem.Ref)
					deployHooks1.URL = types.StringValue(deployHooksItem.URL)
					if deployHooksCount+1 > len(r.Link.One.DeployHooks) {
						r.Link.One.DeployHooks = append(r.Link.One.DeployHooks, deployHooks1)
					} else {
						r.Link.One.DeployHooks[deployHooksCount].CreatedAt = deployHooks1.CreatedAt
						r.Link.One.DeployHooks[deployHooksCount].ID = deployHooks1.ID
						r.Link.One.DeployHooks[deployHooksCount].Name = deployHooks1.Name
						r.Link.One.DeployHooks[deployHooksCount].Ref = deployHooks1.Ref
						r.Link.One.DeployHooks[deployHooksCount].URL = deployHooks1.URL
					}
				}
				r.Link.One.GitCredentialID = types.StringPointerValue(resp.Link.CreateProjectLink1.GitCredentialID)
				r.Link.One.Org = types.StringPointerValue(resp.Link.CreateProjectLink1.Org)
				r.Link.One.ProductionBranch = types.StringPointerValue(resp.Link.CreateProjectLink1.ProductionBranch)
				r.Link.One.Repo = types.StringPointerValue(resp.Link.CreateProjectLink1.Repo)
				if resp.Link.CreateProjectLink1.RepoID != nil {
					r.Link.One.RepoID = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink1.RepoID)))
				} else {
					r.Link.One.RepoID = types.NumberNull()
				}
				r.Link.One.Sourceless = types.BoolPointerValue(resp.Link.CreateProjectLink1.Sourceless)
				if resp.Link.CreateProjectLink1.Type != nil {
					r.Link.One.Type = types.StringValue(string(*resp.Link.CreateProjectLink1.Type))
				} else {
					r.Link.One.Type = types.StringNull()
				}
				if resp.Link.CreateProjectLink1.UpdatedAt != nil {
					r.Link.One.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink1.UpdatedAt)))
				} else {
					r.Link.One.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.CreateProjectLink2 != nil {
				r.Link.Two = &tfTypes.GetProjectLink2{}
				if resp.Link.CreateProjectLink2.CreatedAt != nil {
					r.Link.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink2.CreatedAt)))
				} else {
					r.Link.Two.CreatedAt = types.NumberNull()
				}
				r.Link.Two.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Two.DeployHooks) > len(resp.Link.CreateProjectLink2.DeployHooks) {
					r.Link.Two.DeployHooks = r.Link.Two.DeployHooks[:len(resp.Link.CreateProjectLink2.DeployHooks)]
				}
				for deployHooksCount1, deployHooksItem1 := range resp.Link.CreateProjectLink2.DeployHooks {
					var deployHooks3 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem1.CreatedAt != nil {
						deployHooks3.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem1.CreatedAt)))
					} else {
						deployHooks3.CreatedAt = types.NumberNull()
					}
					deployHooks3.ID = types.StringValue(deployHooksItem1.ID)
					deployHooks3.Name = types.StringValue(deployHooksItem1.Name)
					deployHooks3.Ref = types.StringValue(deployHooksItem1.Ref)
					deployHooks3.URL = types.StringValue(deployHooksItem1.URL)
					if deployHooksCount1+1 > len(r.Link.Two.DeployHooks) {
						r.Link.Two.DeployHooks = append(r.Link.Two.DeployHooks, deployHooks3)
					} else {
						r.Link.Two.DeployHooks[deployHooksCount1].CreatedAt = deployHooks3.CreatedAt
						r.Link.Two.DeployHooks[deployHooksCount1].ID = deployHooks3.ID
						r.Link.Two.DeployHooks[deployHooksCount1].Name = deployHooks3.Name
						r.Link.Two.DeployHooks[deployHooksCount1].Ref = deployHooks3.Ref
						r.Link.Two.DeployHooks[deployHooksCount1].URL = deployHooks3.URL
					}
				}
				r.Link.Two.GitCredentialID = types.StringPointerValue(resp.Link.CreateProjectLink2.GitCredentialID)
				r.Link.Two.ProductionBranch = types.StringPointerValue(resp.Link.CreateProjectLink2.ProductionBranch)
				r.Link.Two.ProjectID = types.StringPointerValue(resp.Link.CreateProjectLink2.ProjectID)
				r.Link.Two.ProjectName = types.StringPointerValue(resp.Link.CreateProjectLink2.ProjectName)
				r.Link.Two.ProjectNamespace = types.StringPointerValue(resp.Link.CreateProjectLink2.ProjectNamespace)
				r.Link.Two.ProjectNameWithNamespace = types.StringPointerValue(resp.Link.CreateProjectLink2.ProjectNameWithNamespace)
				r.Link.Two.ProjectURL = types.StringPointerValue(resp.Link.CreateProjectLink2.ProjectURL)
				r.Link.Two.Sourceless = types.BoolPointerValue(resp.Link.CreateProjectLink2.Sourceless)
				if resp.Link.CreateProjectLink2.Type != nil {
					r.Link.Two.Type = types.StringValue(string(*resp.Link.CreateProjectLink2.Type))
				} else {
					r.Link.Two.Type = types.StringNull()
				}
				if resp.Link.CreateProjectLink2.UpdatedAt != nil {
					r.Link.Two.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink2.UpdatedAt)))
				} else {
					r.Link.Two.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.CreateProjectLink3 != nil {
				r.Link.Three = &tfTypes.GetProjectLink3{}
				if resp.Link.CreateProjectLink3.CreatedAt != nil {
					r.Link.Three.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink3.CreatedAt)))
				} else {
					r.Link.Three.CreatedAt = types.NumberNull()
				}
				r.Link.Three.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Three.DeployHooks) > len(resp.Link.CreateProjectLink3.DeployHooks) {
					r.Link.Three.DeployHooks = r.Link.Three.DeployHooks[:len(resp.Link.CreateProjectLink3.DeployHooks)]
				}
				for deployHooksCount2, deployHooksItem2 := range resp.Link.CreateProjectLink3.DeployHooks {
					var deployHooks5 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem2.CreatedAt != nil {
						deployHooks5.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem2.CreatedAt)))
					} else {
						deployHooks5.CreatedAt = types.NumberNull()
					}
					deployHooks5.ID = types.StringValue(deployHooksItem2.ID)
					deployHooks5.Name = types.StringValue(deployHooksItem2.Name)
					deployHooks5.Ref = types.StringValue(deployHooksItem2.Ref)
					deployHooks5.URL = types.StringValue(deployHooksItem2.URL)
					if deployHooksCount2+1 > len(r.Link.Three.DeployHooks) {
						r.Link.Three.DeployHooks = append(r.Link.Three.DeployHooks, deployHooks5)
					} else {
						r.Link.Three.DeployHooks[deployHooksCount2].CreatedAt = deployHooks5.CreatedAt
						r.Link.Three.DeployHooks[deployHooksCount2].ID = deployHooks5.ID
						r.Link.Three.DeployHooks[deployHooksCount2].Name = deployHooks5.Name
						r.Link.Three.DeployHooks[deployHooksCount2].Ref = deployHooks5.Ref
						r.Link.Three.DeployHooks[deployHooksCount2].URL = deployHooks5.URL
					}
				}
				r.Link.Three.GitCredentialID = types.StringPointerValue(resp.Link.CreateProjectLink3.GitCredentialID)
				r.Link.Three.Name = types.StringPointerValue(resp.Link.CreateProjectLink3.Name)
				r.Link.Three.Owner = types.StringPointerValue(resp.Link.CreateProjectLink3.Owner)
				r.Link.Three.ProductionBranch = types.StringPointerValue(resp.Link.CreateProjectLink3.ProductionBranch)
				r.Link.Three.Slug = types.StringPointerValue(resp.Link.CreateProjectLink3.Slug)
				r.Link.Three.Sourceless = types.BoolPointerValue(resp.Link.CreateProjectLink3.Sourceless)
				if resp.Link.CreateProjectLink3.Type != nil {
					r.Link.Three.Type = types.StringValue(string(*resp.Link.CreateProjectLink3.Type))
				} else {
					r.Link.Three.Type = types.StringNull()
				}
				if resp.Link.CreateProjectLink3.UpdatedAt != nil {
					r.Link.Three.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.CreateProjectLink3.UpdatedAt)))
				} else {
					r.Link.Three.UpdatedAt = types.NumberNull()
				}
				r.Link.Three.UUID = types.StringPointerValue(resp.Link.CreateProjectLink3.UUID)
				r.Link.Three.WorkspaceUUID = types.StringPointerValue(resp.Link.CreateProjectLink3.WorkspaceUUID)
			}
		}
		r.Live = types.BoolPointerValue(resp.Live)
		r.Name = types.StringValue(resp.Name)
		r.NodeVersion = types.StringValue(string(resp.NodeVersion))
		if resp.OidcTokenConfig == nil {
			r.OidcTokenConfig = nil
		} else {
			r.OidcTokenConfig = &tfTypes.GetProjectOidcTokenConfig{}
			r.OidcTokenConfig.Enabled = types.BoolValue(resp.OidcTokenConfig.Enabled)
		}
		if resp.OptionsAllowlist == nil {
			r.OptionsAllowlist = nil
		} else {
			r.OptionsAllowlist = &tfTypes.OptionsAllowlist{}
			r.OptionsAllowlist.Paths = []tfTypes.Paths{}
			if len(r.OptionsAllowlist.Paths) > len(resp.OptionsAllowlist.Paths) {
				r.OptionsAllowlist.Paths = r.OptionsAllowlist.Paths[:len(resp.OptionsAllowlist.Paths)]
			}
			for pathsCount, pathsItem := range resp.OptionsAllowlist.Paths {
				var paths1 tfTypes.Paths
				paths1.Value = types.StringValue(pathsItem.Value)
				if pathsCount+1 > len(r.OptionsAllowlist.Paths) {
					r.OptionsAllowlist.Paths = append(r.OptionsAllowlist.Paths, paths1)
				} else {
					r.OptionsAllowlist.Paths[pathsCount].Value = paths1.Value
				}
			}
		}
		r.OutputDirectory = types.StringPointerValue(resp.OutputDirectory)
		r.PassiveConnectConfigurationID = types.StringPointerValue(resp.PassiveConnectConfigurationID)
		if resp.PasswordProtection == nil {
			r.PasswordProtection = nil
		} else {
			r.PasswordProtection = &tfTypes.PasswordProtection{}
		}
		r.Paused = types.BoolPointerValue(resp.Paused)
		if resp.Permissions == nil {
			r.Permissions = nil
		} else {
			r.Permissions = &tfTypes.GetProjectPermissions{}
			r.Permissions.AccessGroup = []types.String{}
			for _, v := range resp.Permissions.AccessGroup {
				r.Permissions.AccessGroup = append(r.Permissions.AccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.AliasGlobal = []types.String{}
			for _, v := range resp.Permissions.AliasGlobal {
				r.Permissions.AliasGlobal = append(r.Permissions.AliasGlobal, types.StringValue(string(v)))
			}
			r.Permissions.AliasProject = []types.String{}
			for _, v := range resp.Permissions.AliasProject {
				r.Permissions.AliasProject = append(r.Permissions.AliasProject, types.StringValue(string(v)))
			}
			r.Permissions.AliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.AliasProtectionBypass {
				r.Permissions.AliasProtectionBypass = append(r.Permissions.AliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Analytics = []types.String{}
			for _, v := range resp.Permissions.Analytics {
				r.Permissions.Analytics = append(r.Permissions.Analytics, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.AnalyticsSampling {
				r.Permissions.AnalyticsSampling = append(r.Permissions.AnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.AnalyticsUsage {
				r.Permissions.AnalyticsUsage = append(r.Permissions.AnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.AuditLog = []types.String{}
			for _, v := range resp.Permissions.AuditLog {
				r.Permissions.AuditLog = append(r.Permissions.AuditLog, types.StringValue(string(v)))
			}
			r.Permissions.BillingAddress = []types.String{}
			for _, v := range resp.Permissions.BillingAddress {
				r.Permissions.BillingAddress = append(r.Permissions.BillingAddress, types.StringValue(string(v)))
			}
			r.Permissions.BillingInformation = []types.String{}
			for _, v := range resp.Permissions.BillingInformation {
				r.Permissions.BillingInformation = append(r.Permissions.BillingInformation, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoice = []types.String{}
			for _, v := range resp.Permissions.BillingInvoice {
				r.Permissions.BillingInvoice = append(r.Permissions.BillingInvoice, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceEmailRecipient = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceEmailRecipient {
				r.Permissions.BillingInvoiceEmailRecipient = append(r.Permissions.BillingInvoiceEmailRecipient, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceLanguage = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceLanguage {
				r.Permissions.BillingInvoiceLanguage = append(r.Permissions.BillingInvoiceLanguage, types.StringValue(string(v)))
			}
			r.Permissions.BillingPlan = []types.String{}
			for _, v := range resp.Permissions.BillingPlan {
				r.Permissions.BillingPlan = append(r.Permissions.BillingPlan, types.StringValue(string(v)))
			}
			r.Permissions.BillingPurchaseOrder = []types.String{}
			for _, v := range resp.Permissions.BillingPurchaseOrder {
				r.Permissions.BillingPurchaseOrder = append(r.Permissions.BillingPurchaseOrder, types.StringValue(string(v)))
			}
			r.Permissions.BillingTaxID = []types.String{}
			for _, v := range resp.Permissions.BillingTaxID {
				r.Permissions.BillingTaxID = append(r.Permissions.BillingTaxID, types.StringValue(string(v)))
			}
			r.Permissions.Blob = []types.String{}
			for _, v := range resp.Permissions.Blob {
				r.Permissions.Blob = append(r.Permissions.Blob, types.StringValue(string(v)))
			}
			r.Permissions.BlobStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.BlobStoreTokenSet {
				r.Permissions.BlobStoreTokenSet = append(r.Permissions.BlobStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.Budget = []types.String{}
			for _, v := range resp.Permissions.Budget {
				r.Permissions.Budget = append(r.Permissions.Budget, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifact = []types.String{}
			for _, v := range resp.Permissions.CacheArtifact {
				r.Permissions.CacheArtifact = append(r.Permissions.CacheArtifact, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifactUsageEvent = []types.String{}
			for _, v := range resp.Permissions.CacheArtifactUsageEvent {
				r.Permissions.CacheArtifactUsageEvent = append(r.Permissions.CacheArtifactUsageEvent, types.StringValue(string(v)))
			}
			r.Permissions.CodeChecks = []types.String{}
			for _, v := range resp.Permissions.CodeChecks {
				r.Permissions.CodeChecks = append(r.Permissions.CodeChecks, types.StringValue(string(v)))
			}
			r.Permissions.ConcurrentBuilds = []types.String{}
			for _, v := range resp.Permissions.ConcurrentBuilds {
				r.Permissions.ConcurrentBuilds = append(r.Permissions.ConcurrentBuilds, types.StringValue(string(v)))
			}
			r.Permissions.Connect = []types.String{}
			for _, v := range resp.Permissions.Connect {
				r.Permissions.Connect = append(r.Permissions.Connect, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfiguration = []types.String{}
			for _, v := range resp.Permissions.ConnectConfiguration {
				r.Permissions.ConnectConfiguration = append(r.Permissions.ConnectConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfigurationLink = []types.String{}
			for _, v := range resp.Permissions.ConnectConfigurationLink {
				r.Permissions.ConnectConfigurationLink = append(r.Permissions.ConnectConfigurationLink, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheBillingSettings = []types.String{}
			for _, v := range resp.Permissions.DataCacheBillingSettings {
				r.Permissions.DataCacheBillingSettings = append(r.Permissions.DataCacheBillingSettings, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheNamespace = []types.String{}
			for _, v := range resp.Permissions.DataCacheNamespace {
				r.Permissions.DataCacheNamespace = append(r.Permissions.DataCacheNamespace, types.StringValue(string(v)))
			}
			r.Permissions.Deployment = []types.String{}
			for _, v := range resp.Permissions.Deployment {
				r.Permissions.Deployment = append(r.Permissions.Deployment, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheck = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheck {
				r.Permissions.DeploymentCheck = append(r.Permissions.DeploymentCheck, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckPreview {
				r.Permissions.DeploymentCheckPreview = append(r.Permissions.DeploymentCheckPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckReRunFromProductionBranch = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckReRunFromProductionBranch {
				r.Permissions.DeploymentCheckReRunFromProductionBranch = append(r.Permissions.DeploymentCheckReRunFromProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentPreview {
				r.Permissions.DeploymentPreview = append(r.Permissions.DeploymentPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPrivate = []types.String{}
			for _, v := range resp.Permissions.DeploymentPrivate {
				r.Permissions.DeploymentPrivate = append(r.Permissions.DeploymentPrivate, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentProductionGit = []types.String{}
			for _, v := range resp.Permissions.DeploymentProductionGit {
				r.Permissions.DeploymentProductionGit = append(r.Permissions.DeploymentProductionGit, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPromote = []types.String{}
			for _, v := range resp.Permissions.DeploymentPromote {
				r.Permissions.DeploymentPromote = append(r.Permissions.DeploymentPromote, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentRollback = []types.String{}
			for _, v := range resp.Permissions.DeploymentRollback {
				r.Permissions.DeploymentRollback = append(r.Permissions.DeploymentRollback, types.StringValue(string(v)))
			}
			r.Permissions.Domain = []types.String{}
			for _, v := range resp.Permissions.Domain {
				r.Permissions.Domain = append(r.Permissions.Domain, types.StringValue(string(v)))
			}
			r.Permissions.DomainAcceptDelegation = []types.String{}
			for _, v := range resp.Permissions.DomainAcceptDelegation {
				r.Permissions.DomainAcceptDelegation = append(r.Permissions.DomainAcceptDelegation, types.StringValue(string(v)))
			}
			r.Permissions.DomainAuthCodes = []types.String{}
			for _, v := range resp.Permissions.DomainAuthCodes {
				r.Permissions.DomainAuthCodes = append(r.Permissions.DomainAuthCodes, types.StringValue(string(v)))
			}
			r.Permissions.DomainCertificate = []types.String{}
			for _, v := range resp.Permissions.DomainCertificate {
				r.Permissions.DomainCertificate = append(r.Permissions.DomainCertificate, types.StringValue(string(v)))
			}
			r.Permissions.DomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.DomainCheckConfig {
				r.Permissions.DomainCheckConfig = append(r.Permissions.DomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.DomainMove = []types.String{}
			for _, v := range resp.Permissions.DomainMove {
				r.Permissions.DomainMove = append(r.Permissions.DomainMove, types.StringValue(string(v)))
			}
			r.Permissions.DomainPurchase = []types.String{}
			for _, v := range resp.Permissions.DomainPurchase {
				r.Permissions.DomainPurchase = append(r.Permissions.DomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.DomainRecord = []types.String{}
			for _, v := range resp.Permissions.DomainRecord {
				r.Permissions.DomainRecord = append(r.Permissions.DomainRecord, types.StringValue(string(v)))
			}
			r.Permissions.DomainTransferIn = []types.String{}
			for _, v := range resp.Permissions.DomainTransferIn {
				r.Permissions.DomainTransferIn = append(r.Permissions.DomainTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfig = []types.String{}
			for _, v := range resp.Permissions.EdgeConfig {
				r.Permissions.EdgeConfig = append(r.Permissions.EdgeConfig, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigItem = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigItem {
				r.Permissions.EdgeConfigItem = append(r.Permissions.EdgeConfigItem, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigSchema = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigSchema {
				r.Permissions.EdgeConfigSchema = append(r.Permissions.EdgeConfigSchema, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigToken = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigToken {
				r.Permissions.EdgeConfigToken = append(r.Permissions.EdgeConfigToken, types.StringValue(string(v)))
			}
			r.Permissions.EndpointVerification = []types.String{}
			for _, v := range resp.Permissions.EndpointVerification {
				r.Permissions.EndpointVerification = append(r.Permissions.EndpointVerification, types.StringValue(string(v)))
			}
			r.Permissions.Environments = []types.String{}
			for _, v := range resp.Permissions.Environments {
				r.Permissions.Environments = append(r.Permissions.Environments, types.StringValue(string(v)))
			}
			r.Permissions.Event = []types.String{}
			for _, v := range resp.Permissions.Event {
				r.Permissions.Event = append(r.Permissions.Event, types.StringValue(string(v)))
			}
			r.Permissions.FileUpload = []types.String{}
			for _, v := range resp.Permissions.FileUpload {
				r.Permissions.FileUpload = append(r.Permissions.FileUpload, types.StringValue(string(v)))
			}
			r.Permissions.GitRepository = []types.String{}
			for _, v := range resp.Permissions.GitRepository {
				r.Permissions.GitRepository = append(r.Permissions.GitRepository, types.StringValue(string(v)))
			}
			r.Permissions.Integration = []types.String{}
			for _, v := range resp.Permissions.Integration {
				r.Permissions.Integration = append(r.Permissions.Integration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfiguration {
				r.Permissions.IntegrationConfiguration = append(r.Permissions.IntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationProjects = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationProjects {
				r.Permissions.IntegrationConfigurationProjects = append(r.Permissions.IntegrationConfigurationProjects, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationTransfer = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationTransfer {
				r.Permissions.IntegrationConfigurationTransfer = append(r.Permissions.IntegrationConfigurationTransfer, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationEvent = []types.String{}
			for _, v := range resp.Permissions.IntegrationEvent {
				r.Permissions.IntegrationEvent = append(r.Permissions.IntegrationEvent, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationResourceSecrets = []types.String{}
			for _, v := range resp.Permissions.IntegrationResourceSecrets {
				r.Permissions.IntegrationResourceSecrets = append(r.Permissions.IntegrationResourceSecrets, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStore = []types.String{}
			for _, v := range resp.Permissions.IntegrationStore {
				r.Permissions.IntegrationStore = append(r.Permissions.IntegrationStore, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.IntegrationStoreTokenSet {
				r.Permissions.IntegrationStoreTokenSet = append(r.Permissions.IntegrationStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationVercelConfigurationOverride = []types.String{}
			for _, v := range resp.Permissions.IntegrationVercelConfigurationOverride {
				r.Permissions.IntegrationVercelConfigurationOverride = append(r.Permissions.IntegrationVercelConfigurationOverride, types.StringValue(string(v)))
			}
			r.Permissions.IPBlocking = []types.String{}
			for _, v := range resp.Permissions.IPBlocking {
				r.Permissions.IPBlocking = append(r.Permissions.IPBlocking, types.StringValue(string(v)))
			}
			r.Permissions.Job = []types.String{}
			for _, v := range resp.Permissions.Job {
				r.Permissions.Job = append(r.Permissions.Job, types.StringValue(string(v)))
			}
			r.Permissions.JobGlobal = []types.String{}
			for _, v := range resp.Permissions.JobGlobal {
				r.Permissions.JobGlobal = append(r.Permissions.JobGlobal, types.StringValue(string(v)))
			}
			r.Permissions.LogDrain = []types.String{}
			for _, v := range resp.Permissions.LogDrain {
				r.Permissions.LogDrain = append(r.Permissions.LogDrain, types.StringValue(string(v)))
			}
			r.Permissions.Logs = []types.String{}
			for _, v := range resp.Permissions.Logs {
				r.Permissions.Logs = append(r.Permissions.Logs, types.StringValue(string(v)))
			}
			r.Permissions.LogsPreset = []types.String{}
			for _, v := range resp.Permissions.LogsPreset {
				r.Permissions.LogsPreset = append(r.Permissions.LogsPreset, types.StringValue(string(v)))
			}
			r.Permissions.MarketplaceBillingData = []types.String{}
			for _, v := range resp.Permissions.MarketplaceBillingData {
				r.Permissions.MarketplaceBillingData = append(r.Permissions.MarketplaceBillingData, types.StringValue(string(v)))
			}
			r.Permissions.Monitoring = []types.String{}
			for _, v := range resp.Permissions.Monitoring {
				r.Permissions.Monitoring = append(r.Permissions.Monitoring, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.MonitoringAlert {
				r.Permissions.MonitoringAlert = append(r.Permissions.MonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringChart = []types.String{}
			for _, v := range resp.Permissions.MonitoringChart {
				r.Permissions.MonitoringChart = append(r.Permissions.MonitoringChart, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringQuery = []types.String{}
			for _, v := range resp.Permissions.MonitoringQuery {
				r.Permissions.MonitoringQuery = append(r.Permissions.MonitoringQuery, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringSettings = []types.String{}
			for _, v := range resp.Permissions.MonitoringSettings {
				r.Permissions.MonitoringSettings = append(r.Permissions.MonitoringSettings, types.StringValue(string(v)))
			}
			r.Permissions.NotificationCustomerBudget = []types.String{}
			for _, v := range resp.Permissions.NotificationCustomerBudget {
				r.Permissions.NotificationCustomerBudget = append(r.Permissions.NotificationCustomerBudget, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDeploymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationDeploymentFailed {
				r.Permissions.NotificationDeploymentFailed = append(r.Permissions.NotificationDeploymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainConfiguration = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainConfiguration {
				r.Permissions.NotificationDomainConfiguration = append(r.Permissions.NotificationDomainConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainExpire = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainExpire {
				r.Permissions.NotificationDomainExpire = append(r.Permissions.NotificationDomainExpire, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainMoved = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainMoved {
				r.Permissions.NotificationDomainMoved = append(r.Permissions.NotificationDomainMoved, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainPurchase = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainPurchase {
				r.Permissions.NotificationDomainPurchase = append(r.Permissions.NotificationDomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainRenewal = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainRenewal {
				r.Permissions.NotificationDomainRenewal = append(r.Permissions.NotificationDomainRenewal, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainTransfer = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainTransfer {
				r.Permissions.NotificationDomainTransfer = append(r.Permissions.NotificationDomainTransfer, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainUnverified = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainUnverified {
				r.Permissions.NotificationDomainUnverified = append(r.Permissions.NotificationDomainUnverified, types.StringValue(string(v)))
			}
			r.Permissions.NotificationMonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationMonitoringAlert {
				r.Permissions.NotificationMonitoringAlert = append(r.Permissions.NotificationMonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.NotificationPaymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationPaymentFailed {
				r.Permissions.NotificationPaymentFailed = append(r.Permissions.NotificationPaymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationStatementOfReasons = []types.String{}
			for _, v := range resp.Permissions.NotificationStatementOfReasons {
				r.Permissions.NotificationStatementOfReasons = append(r.Permissions.NotificationStatementOfReasons, types.StringValue(string(v)))
			}
			r.Permissions.NotificationUsageAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationUsageAlert {
				r.Permissions.NotificationUsageAlert = append(r.Permissions.NotificationUsageAlert, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Application = []types.String{}
			for _, v := range resp.Permissions.Oauth2Application {
				r.Permissions.Oauth2Application = append(r.Permissions.Oauth2Application, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Connection = []types.String{}
			for _, v := range resp.Permissions.Oauth2Connection {
				r.Permissions.Oauth2Connection = append(r.Permissions.Oauth2Connection, types.StringValue(string(v)))
			}
			r.Permissions.OpenTelemetryEndpoint = []types.String{}
			for _, v := range resp.Permissions.OpenTelemetryEndpoint {
				r.Permissions.OpenTelemetryEndpoint = append(r.Permissions.OpenTelemetryEndpoint, types.StringValue(string(v)))
			}
			r.Permissions.OptionsAllowlist = []types.String{}
			for _, v := range resp.Permissions.OptionsAllowlist {
				r.Permissions.OptionsAllowlist = append(r.Permissions.OptionsAllowlist, types.StringValue(string(v)))
			}
			r.Permissions.OwnEvent = []types.String{}
			for _, v := range resp.Permissions.OwnEvent {
				r.Permissions.OwnEvent = append(r.Permissions.OwnEvent, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtection = []types.String{}
			for _, v := range resp.Permissions.PasswordProtection {
				r.Permissions.PasswordProtection = append(r.Permissions.PasswordProtection, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtectionInvoiceItem = []types.String{}
			for _, v := range resp.Permissions.PasswordProtectionInvoiceItem {
				r.Permissions.PasswordProtectionInvoiceItem = append(r.Permissions.PasswordProtectionInvoiceItem, types.StringValue(string(v)))
			}
			r.Permissions.PaymentMethod = []types.String{}
			for _, v := range resp.Permissions.PaymentMethod {
				r.Permissions.PaymentMethod = append(r.Permissions.PaymentMethod, types.StringValue(string(v)))
			}
			r.Permissions.Permissions = []types.String{}
			for _, v := range resp.Permissions.Permissions {
				r.Permissions.Permissions = append(r.Permissions.Permissions, types.StringValue(string(v)))
			}
			r.Permissions.Postgres = []types.String{}
			for _, v := range resp.Permissions.Postgres {
				r.Permissions.Postgres = append(r.Permissions.Postgres, types.StringValue(string(v)))
			}
			r.Permissions.PostgresStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.PostgresStoreTokenSet {
				r.Permissions.PostgresStoreTokenSet = append(r.Permissions.PostgresStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.PreviewDeploymentSuffix = []types.String{}
			for _, v := range resp.Permissions.PreviewDeploymentSuffix {
				r.Permissions.PreviewDeploymentSuffix = append(r.Permissions.PreviewDeploymentSuffix, types.StringValue(string(v)))
			}
			r.Permissions.ProductionAliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProductionAliasProtectionBypass {
				r.Permissions.ProductionAliasProtectionBypass = append(r.Permissions.ProductionAliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Project = []types.String{}
			for _, v := range resp.Permissions.Project {
				r.Permissions.Project = append(r.Permissions.Project, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAccessGroup = []types.String{}
			for _, v := range resp.Permissions.ProjectAccessGroup {
				r.Permissions.ProjectAccessGroup = append(r.Permissions.ProjectAccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsSampling {
				r.Permissions.ProjectAnalyticsSampling = append(r.Permissions.ProjectAnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsUsage {
				r.Permissions.ProjectAnalyticsUsage = append(r.Permissions.ProjectAnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentExpiration = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentExpiration {
				r.Permissions.ProjectDeploymentExpiration = append(r.Permissions.ProjectDeploymentExpiration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentHook = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentHook {
				r.Permissions.ProjectDeploymentHook = append(r.Permissions.ProjectDeploymentHook, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomain = []types.String{}
			for _, v := range resp.Permissions.ProjectDomain {
				r.Permissions.ProjectDomain = append(r.Permissions.ProjectDomain, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainCheckConfig {
				r.Permissions.ProjectDomainCheckConfig = append(r.Permissions.ProjectDomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainMove = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainMove {
				r.Permissions.ProjectDomainMove = append(r.Permissions.ProjectDomainMove, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVars = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVars {
				r.Permissions.ProjectEnvVars = append(r.Permissions.ProjectEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsProduction {
				r.Permissions.ProjectEnvVarsProduction = append(r.Permissions.ProjectEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsUnownedByIntegration = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsUnownedByIntegration {
				r.Permissions.ProjectEnvVarsUnownedByIntegration = append(r.Permissions.ProjectEnvVarsUnownedByIntegration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectID = []types.String{}
			for _, v := range resp.Permissions.ProjectID {
				r.Permissions.ProjectID = append(r.Permissions.ProjectID, types.StringValue(string(v)))
			}
			r.Permissions.ProjectIntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.ProjectIntegrationConfiguration {
				r.Permissions.ProjectIntegrationConfiguration = append(r.Permissions.ProjectIntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectLink = []types.String{}
			for _, v := range resp.Permissions.ProjectLink {
				r.Permissions.ProjectLink = append(r.Permissions.ProjectLink, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMember = []types.String{}
			for _, v := range resp.Permissions.ProjectMember {
				r.Permissions.ProjectMember = append(r.Permissions.ProjectMember, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMonitoring = []types.String{}
			for _, v := range resp.Permissions.ProjectMonitoring {
				r.Permissions.ProjectMonitoring = append(r.Permissions.ProjectMonitoring, types.StringValue(string(v)))
			}
			r.Permissions.ProjectPermissions = []types.String{}
			for _, v := range resp.Permissions.ProjectPermissions {
				r.Permissions.ProjectPermissions = append(r.Permissions.ProjectPermissions, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProductionBranch = []types.String{}
			for _, v := range resp.Permissions.ProjectProductionBranch {
				r.Permissions.ProjectProductionBranch = append(r.Permissions.ProjectProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProjectProtectionBypass {
				r.Permissions.ProjectProtectionBypass = append(r.Permissions.ProjectProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCase = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCase {
				r.Permissions.ProjectSupportCase = append(r.Permissions.ProjectSupportCase, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCaseComment {
				r.Permissions.ProjectSupportCaseComment = append(r.Permissions.ProjectSupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransfer = []types.String{}
			for _, v := range resp.Permissions.ProjectTransfer {
				r.Permissions.ProjectTransfer = append(r.Permissions.ProjectTransfer, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferIn = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferIn {
				r.Permissions.ProjectTransferIn = append(r.Permissions.ProjectTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferOut = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferOut {
				r.Permissions.ProjectTransferOut = append(r.Permissions.ProjectTransferOut, types.StringValue(string(v)))
			}
			r.Permissions.ProjectUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectUsage {
				r.Permissions.ProjectUsage = append(r.Permissions.ProjectUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProTrialOnboarding = []types.String{}
			for _, v := range resp.Permissions.ProTrialOnboarding {
				r.Permissions.ProTrialOnboarding = append(r.Permissions.ProTrialOnboarding, types.StringValue(string(v)))
			}
			r.Permissions.RateLimit = []types.String{}
			for _, v := range resp.Permissions.RateLimit {
				r.Permissions.RateLimit = append(r.Permissions.RateLimit, types.StringValue(string(v)))
			}
			r.Permissions.Redis = []types.String{}
			for _, v := range resp.Permissions.Redis {
				r.Permissions.Redis = append(r.Permissions.Redis, types.StringValue(string(v)))
			}
			r.Permissions.RedisStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.RedisStoreTokenSet {
				r.Permissions.RedisStoreTokenSet = append(r.Permissions.RedisStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.RemoteCaching = []types.String{}
			for _, v := range resp.Permissions.RemoteCaching {
				r.Permissions.RemoteCaching = append(r.Permissions.RemoteCaching, types.StringValue(string(v)))
			}
			r.Permissions.Repository = []types.String{}
			for _, v := range resp.Permissions.Repository {
				r.Permissions.Repository = append(r.Permissions.Repository, types.StringValue(string(v)))
			}
			r.Permissions.SamlConfig = []types.String{}
			for _, v := range resp.Permissions.SamlConfig {
				r.Permissions.SamlConfig = append(r.Permissions.SamlConfig, types.StringValue(string(v)))
			}
			r.Permissions.SeawallConfig = []types.String{}
			for _, v := range resp.Permissions.SeawallConfig {
				r.Permissions.SeawallConfig = append(r.Permissions.SeawallConfig, types.StringValue(string(v)))
			}
			r.Permissions.Secret = []types.String{}
			for _, v := range resp.Permissions.Secret {
				r.Permissions.Secret = append(r.Permissions.Secret, types.StringValue(string(v)))
			}
			r.Permissions.SensitiveEnvironmentVariablePolicy = []types.String{}
			for _, v := range resp.Permissions.SensitiveEnvironmentVariablePolicy {
				r.Permissions.SensitiveEnvironmentVariablePolicy = append(r.Permissions.SensitiveEnvironmentVariablePolicy, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarConnection = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarConnection {
				r.Permissions.SharedEnvVarConnection = append(r.Permissions.SharedEnvVarConnection, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVars = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVars {
				r.Permissions.SharedEnvVars = append(r.Permissions.SharedEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarsProduction {
				r.Permissions.SharedEnvVarsProduction = append(r.Permissions.SharedEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.SkewProtection = []types.String{}
			for _, v := range resp.Permissions.SkewProtection {
				r.Permissions.SkewProtection = append(r.Permissions.SkewProtection, types.StringValue(string(v)))
			}
			r.Permissions.Space = []types.String{}
			for _, v := range resp.Permissions.Space {
				r.Permissions.Space = append(r.Permissions.Space, types.StringValue(string(v)))
			}
			r.Permissions.SpaceRun = []types.String{}
			for _, v := range resp.Permissions.SpaceRun {
				r.Permissions.SpaceRun = append(r.Permissions.SpaceRun, types.StringValue(string(v)))
			}
			r.Permissions.SupportCase = []types.String{}
			for _, v := range resp.Permissions.SupportCase {
				r.Permissions.SupportCase = append(r.Permissions.SupportCase, types.StringValue(string(v)))
			}
			r.Permissions.SupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.SupportCaseComment {
				r.Permissions.SupportCaseComment = append(r.Permissions.SupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.Team = []types.String{}
			for _, v := range resp.Permissions.Team {
				r.Permissions.Team = append(r.Permissions.Team, types.StringValue(string(v)))
			}
			r.Permissions.TeamAccessRequest = []types.String{}
			for _, v := range resp.Permissions.TeamAccessRequest {
				r.Permissions.TeamAccessRequest = append(r.Permissions.TeamAccessRequest, types.StringValue(string(v)))
			}
			r.Permissions.TeamFellowMembership = []types.String{}
			for _, v := range resp.Permissions.TeamFellowMembership {
				r.Permissions.TeamFellowMembership = append(r.Permissions.TeamFellowMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamInvite = []types.String{}
			for _, v := range resp.Permissions.TeamInvite {
				r.Permissions.TeamInvite = append(r.Permissions.TeamInvite, types.StringValue(string(v)))
			}
			r.Permissions.TeamInviteCode = []types.String{}
			for _, v := range resp.Permissions.TeamInviteCode {
				r.Permissions.TeamInviteCode = append(r.Permissions.TeamInviteCode, types.StringValue(string(v)))
			}
			r.Permissions.TeamJoin = []types.String{}
			for _, v := range resp.Permissions.TeamJoin {
				r.Permissions.TeamJoin = append(r.Permissions.TeamJoin, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembership = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembership {
				r.Permissions.TeamOwnMembership = append(r.Permissions.TeamOwnMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembershipDisconnectSAML = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembershipDisconnectSAML {
				r.Permissions.TeamOwnMembershipDisconnectSAML = append(r.Permissions.TeamOwnMembershipDisconnectSAML, types.StringValue(string(v)))
			}
			r.Permissions.Token = []types.String{}
			for _, v := range resp.Permissions.Token {
				r.Permissions.Token = append(r.Permissions.Token, types.StringValue(string(v)))
			}
			r.Permissions.TrustedIps = []types.String{}
			for _, v := range resp.Permissions.TrustedIps {
				r.Permissions.TrustedIps = append(r.Permissions.TrustedIps, types.StringValue(string(v)))
			}
			r.Permissions.Usage = []types.String{}
			for _, v := range resp.Permissions.Usage {
				r.Permissions.Usage = append(r.Permissions.Usage, types.StringValue(string(v)))
			}
			r.Permissions.UsageCycle = []types.String{}
			for _, v := range resp.Permissions.UsageCycle {
				r.Permissions.UsageCycle = append(r.Permissions.UsageCycle, types.StringValue(string(v)))
			}
			r.Permissions.User = []types.String{}
			for _, v := range resp.Permissions.User {
				r.Permissions.User = append(r.Permissions.User, types.StringValue(string(v)))
			}
			r.Permissions.UserConnection = []types.String{}
			for _, v := range resp.Permissions.UserConnection {
				r.Permissions.UserConnection = append(r.Permissions.UserConnection, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalytics = []types.String{}
			for _, v := range resp.Permissions.WebAnalytics {
				r.Permissions.WebAnalytics = append(r.Permissions.WebAnalytics, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalyticsPlan = []types.String{}
			for _, v := range resp.Permissions.WebAnalyticsPlan {
				r.Permissions.WebAnalyticsPlan = append(r.Permissions.WebAnalyticsPlan, types.StringValue(string(v)))
			}
			r.Permissions.WebAuthn = []types.String{}
			for _, v := range resp.Permissions.WebAuthn {
				r.Permissions.WebAuthn = append(r.Permissions.WebAuthn, types.StringValue(string(v)))
			}
			r.Permissions.Webhook = []types.String{}
			for _, v := range resp.Permissions.Webhook {
				r.Permissions.Webhook = append(r.Permissions.Webhook, types.StringValue(string(v)))
			}
			r.Permissions.WebhookEvent = []types.String{}
			for _, v := range resp.Permissions.WebhookEvent {
				r.Permissions.WebhookEvent = append(r.Permissions.WebhookEvent, types.StringValue(string(v)))
			}
		}
		r.ProductionDeploymentsFastLane = types.BoolPointerValue(resp.ProductionDeploymentsFastLane)
		if len(resp.ProtectionBypass) > 0 {
			r.ProtectionBypass = make(map[string]tfTypes.GetProjectProtectionBypass)
			for getProjectProtectionBypassKey, getProjectProtectionBypassValue := range resp.ProtectionBypass {
				var getProjectProtectionBypassResult tfTypes.GetProjectProtectionBypass
				getProjectProtectionBypassResult.CreatedAt = types.NumberValue(big.NewFloat(float64(getProjectProtectionBypassValue.CreatedAt)))
				getProjectProtectionBypassResult.CreatedBy = types.StringValue(getProjectProtectionBypassValue.CreatedBy)
				getProjectProtectionBypassResult.Scope = types.StringValue(string(getProjectProtectionBypassValue.Scope))
				r.ProtectionBypass[getProjectProtectionBypassKey] = getProjectProtectionBypassResult
			}
		}
		r.PublicSource = types.BoolPointerValue(resp.PublicSource)
		r.RootDirectory = types.StringPointerValue(resp.RootDirectory)
		if resp.Security == nil {
			r.Security = nil
		} else {
			r.Security = &tfTypes.GetProjectSecurity{}
			if resp.Security.AttackModeActiveUntil != nil {
				r.Security.AttackModeActiveUntil = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeActiveUntil)))
			} else {
				r.Security.AttackModeActiveUntil = types.NumberNull()
			}
			r.Security.AttackModeEnabled = types.BoolPointerValue(resp.Security.AttackModeEnabled)
			if resp.Security.AttackModeUpdatedAt != nil {
				r.Security.AttackModeUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeUpdatedAt)))
			} else {
				r.Security.AttackModeUpdatedAt = types.NumberNull()
			}
			if resp.Security.FirewallConfigVersion != nil {
				r.Security.FirewallConfigVersion = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallConfigVersion)))
			} else {
				r.Security.FirewallConfigVersion = types.NumberNull()
			}
			r.Security.FirewallEnabled = types.BoolPointerValue(resp.Security.FirewallEnabled)
			r.Security.FirewallSeawallEnabled = types.BoolPointerValue(resp.Security.FirewallSeawallEnabled)
			if resp.Security.FirewallUpdatedAt != nil {
				r.Security.FirewallUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallUpdatedAt)))
			} else {
				r.Security.FirewallUpdatedAt = types.NumberNull()
			}
			r.Security.Ja3Enabled = types.BoolPointerValue(resp.Security.Ja3Enabled)
			r.Security.Ja4Enabled = types.BoolPointerValue(resp.Security.Ja4Enabled)
		}
		r.ServerlessFunctionRegion = types.StringPointerValue(resp.ServerlessFunctionRegion)
		r.ServerlessFunctionZeroConfigFailover = types.BoolPointerValue(resp.ServerlessFunctionZeroConfigFailover)
		r.SkewProtectionBoundaryAt = types.Int64PointerValue(resp.SkewProtectionBoundaryAt)
		r.SkewProtectionMaxAge = types.Int64PointerValue(resp.SkewProtectionMaxAge)
		r.SkipGitConnectDuringLink = types.BoolPointerValue(resp.SkipGitConnectDuringLink)
		r.SourceFilesOutsideRootDirectory = types.BoolPointerValue(resp.SourceFilesOutsideRootDirectory)
		if resp.SpeedInsights == nil {
			r.SpeedInsights = nil
		} else {
			r.SpeedInsights = &tfTypes.GetProjectSpeedInsights{}
			if resp.SpeedInsights.CanceledAt != nil {
				r.SpeedInsights.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.CanceledAt)))
			} else {
				r.SpeedInsights.CanceledAt = types.NumberNull()
			}
			if resp.SpeedInsights.DisabledAt != nil {
				r.SpeedInsights.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.DisabledAt)))
			} else {
				r.SpeedInsights.DisabledAt = types.NumberNull()
			}
			if resp.SpeedInsights.EnabledAt != nil {
				r.SpeedInsights.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.EnabledAt)))
			} else {
				r.SpeedInsights.EnabledAt = types.NumberNull()
			}
			r.SpeedInsights.HasData = types.BoolPointerValue(resp.SpeedInsights.HasData)
			r.SpeedInsights.ID = types.StringValue(resp.SpeedInsights.ID)
			if resp.SpeedInsights.PaidAt != nil {
				r.SpeedInsights.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.PaidAt)))
			} else {
				r.SpeedInsights.PaidAt = types.NumberNull()
			}
		}
		if resp.SsoProtection == nil {
			r.SsoProtection = nil
		} else {
			r.SsoProtection = &tfTypes.SsoProtection{}
			r.SsoProtection.DeploymentType = types.StringValue(string(resp.SsoProtection.DeploymentType))
		}
		if len(resp.Targets) > 0 {
			r.Targets = make(map[string]tfTypes.GetProjectOidcTokenClaims)
			for getProjectTargetsKey, getProjectTargetsValue := range resp.Targets {
				var getProjectTargetsResult tfTypes.GetProjectOidcTokenClaims
				if getProjectTargetsValue.Str != nil {
					getProjectTargetsResult.Str = types.StringPointerValue(getProjectTargetsValue.Str)
				}
				if getProjectTargetsValue.ArrayOfStr != nil {
					getProjectTargetsResult.ArrayOfStr = []types.String{}
					for _, v := range getProjectTargetsValue.ArrayOfStr {
						getProjectTargetsResult.ArrayOfStr = append(getProjectTargetsResult.ArrayOfStr, types.StringValue(v))
					}
				}
				r.Targets[getProjectTargetsKey] = getProjectTargetsResult
			}
		}
		if resp.TransferCompletedAt != nil {
			r.TransferCompletedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferCompletedAt)))
		} else {
			r.TransferCompletedAt = types.NumberNull()
		}
		r.TransferredFromAccountID = types.StringPointerValue(resp.TransferredFromAccountID)
		if resp.TransferStartedAt != nil {
			r.TransferStartedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferStartedAt)))
		} else {
			r.TransferStartedAt = types.NumberNull()
		}
		r.TransferToAccountID = types.StringPointerValue(resp.TransferToAccountID)
		if resp.TrustedIps == nil {
			r.TrustedIps = nil
		} else {
			r.TrustedIps = &tfTypes.TrustedIps{}
			r.TrustedIps.Addresses = []tfTypes.Addresses{}
			if len(r.TrustedIps.Addresses) > len(resp.TrustedIps.Addresses) {
				r.TrustedIps.Addresses = r.TrustedIps.Addresses[:len(resp.TrustedIps.Addresses)]
			}
			for addressesCount, addressesItem := range resp.TrustedIps.Addresses {
				var addresses1 tfTypes.Addresses
				addresses1.Note = types.StringPointerValue(addressesItem.Note)
				addresses1.Value = types.StringValue(addressesItem.Value)
				if addressesCount+1 > len(r.TrustedIps.Addresses) {
					r.TrustedIps.Addresses = append(r.TrustedIps.Addresses, addresses1)
				} else {
					r.TrustedIps.Addresses[addressesCount].Note = addresses1.Note
					r.TrustedIps.Addresses[addressesCount].Value = addresses1.Value
				}
			}
			r.TrustedIps.DeploymentType = types.StringValue(string(resp.TrustedIps.DeploymentType))
			r.TrustedIps.ProtectionMode = types.StringValue(string(resp.TrustedIps.ProtectionMode))
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.UpdatedAt)))
		} else {
			r.UpdatedAt = types.NumberNull()
		}
		if resp.WebAnalytics == nil {
			r.WebAnalytics = nil
		} else {
			r.WebAnalytics = &tfTypes.GetProjectWebAnalytics{}
			if resp.WebAnalytics.CanceledAt != nil {
				r.WebAnalytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.CanceledAt)))
			} else {
				r.WebAnalytics.CanceledAt = types.NumberNull()
			}
			if resp.WebAnalytics.DisabledAt != nil {
				r.WebAnalytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.DisabledAt)))
			} else {
				r.WebAnalytics.DisabledAt = types.NumberNull()
			}
			if resp.WebAnalytics.EnabledAt != nil {
				r.WebAnalytics.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.EnabledAt)))
			} else {
				r.WebAnalytics.EnabledAt = types.NumberNull()
			}
			r.WebAnalytics.HasData = types.BoolPointerValue(resp.WebAnalytics.HasData)
			r.WebAnalytics.ID = types.StringValue(resp.WebAnalytics.ID)
		}
	}
}

func (r *ProjectResourceModel) ToOperationsUpdateProjectRequestBody() *operations.UpdateProjectRequestBody {
	autoExposeSystemEnvs := new(bool)
	if !r.AutoExposeSystemEnvs.IsUnknown() && !r.AutoExposeSystemEnvs.IsNull() {
		*autoExposeSystemEnvs = r.AutoExposeSystemEnvs.ValueBool()
	} else {
		autoExposeSystemEnvs = nil
	}
	autoAssignCustomDomains := new(bool)
	if !r.AutoAssignCustomDomains.IsUnknown() && !r.AutoAssignCustomDomains.IsNull() {
		*autoAssignCustomDomains = r.AutoAssignCustomDomains.ValueBool()
	} else {
		autoAssignCustomDomains = nil
	}
	autoAssignCustomDomainsUpdatedBy := new(string)
	if !r.AutoAssignCustomDomainsUpdatedBy.IsUnknown() && !r.AutoAssignCustomDomainsUpdatedBy.IsNull() {
		*autoAssignCustomDomainsUpdatedBy = r.AutoAssignCustomDomainsUpdatedBy.ValueString()
	} else {
		autoAssignCustomDomainsUpdatedBy = nil
	}
	buildCommand := new(string)
	if !r.BuildCommand.IsUnknown() && !r.BuildCommand.IsNull() {
		*buildCommand = r.BuildCommand.ValueString()
	} else {
		buildCommand = nil
	}
	commandForIgnoringBuildStep := new(string)
	if !r.CommandForIgnoringBuildStep.IsUnknown() && !r.CommandForIgnoringBuildStep.IsNull() {
		*commandForIgnoringBuildStep = r.CommandForIgnoringBuildStep.ValueString()
	} else {
		commandForIgnoringBuildStep = nil
	}
	customerSupportCodeVisibility := new(bool)
	if !r.CustomerSupportCodeVisibility.IsUnknown() && !r.CustomerSupportCodeVisibility.IsNull() {
		*customerSupportCodeVisibility = r.CustomerSupportCodeVisibility.ValueBool()
	} else {
		customerSupportCodeVisibility = nil
	}
	devCommand := new(string)
	if !r.DevCommand.IsUnknown() && !r.DevCommand.IsNull() {
		*devCommand = r.DevCommand.ValueString()
	} else {
		devCommand = nil
	}
	directoryListing := new(bool)
	if !r.DirectoryListing.IsUnknown() && !r.DirectoryListing.IsNull() {
		*directoryListing = r.DirectoryListing.ValueBool()
	} else {
		directoryListing = nil
	}
	framework := new(operations.UpdateProjectFramework)
	if !r.Framework.IsUnknown() && !r.Framework.IsNull() {
		*framework = operations.UpdateProjectFramework(r.Framework.ValueString())
	} else {
		framework = nil
	}
	gitForkProtection := new(bool)
	if !r.GitForkProtection.IsUnknown() && !r.GitForkProtection.IsNull() {
		*gitForkProtection = r.GitForkProtection.ValueBool()
	} else {
		gitForkProtection = nil
	}
	gitLFS := new(bool)
	if !r.GitLFS.IsUnknown() && !r.GitLFS.IsNull() {
		*gitLFS = r.GitLFS.ValueBool()
	} else {
		gitLFS = nil
	}
	installCommand := new(string)
	if !r.InstallCommand.IsUnknown() && !r.InstallCommand.IsNull() {
		*installCommand = r.InstallCommand.ValueString()
	} else {
		installCommand = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	nodeVersion := new(operations.UpdateProjectNodeVersion)
	if !r.NodeVersion.IsUnknown() && !r.NodeVersion.IsNull() {
		*nodeVersion = operations.UpdateProjectNodeVersion(r.NodeVersion.ValueString())
	} else {
		nodeVersion = nil
	}
	outputDirectory := new(string)
	if !r.OutputDirectory.IsUnknown() && !r.OutputDirectory.IsNull() {
		*outputDirectory = r.OutputDirectory.ValueString()
	} else {
		outputDirectory = nil
	}
	publicSource := new(bool)
	if !r.PublicSource.IsUnknown() && !r.PublicSource.IsNull() {
		*publicSource = r.PublicSource.ValueBool()
	} else {
		publicSource = nil
	}
	rootDirectory := new(string)
	if !r.RootDirectory.IsUnknown() && !r.RootDirectory.IsNull() {
		*rootDirectory = r.RootDirectory.ValueString()
	} else {
		rootDirectory = nil
	}
	serverlessFunctionRegion := new(string)
	if !r.ServerlessFunctionRegion.IsUnknown() && !r.ServerlessFunctionRegion.IsNull() {
		*serverlessFunctionRegion = r.ServerlessFunctionRegion.ValueString()
	} else {
		serverlessFunctionRegion = nil
	}
	serverlessFunctionZeroConfigFailover := new(bool)
	if !r.ServerlessFunctionZeroConfigFailover.IsUnknown() && !r.ServerlessFunctionZeroConfigFailover.IsNull() {
		*serverlessFunctionZeroConfigFailover = r.ServerlessFunctionZeroConfigFailover.ValueBool()
	} else {
		serverlessFunctionZeroConfigFailover = nil
	}
	skewProtectionBoundaryAt := new(int64)
	if !r.SkewProtectionBoundaryAt.IsUnknown() && !r.SkewProtectionBoundaryAt.IsNull() {
		*skewProtectionBoundaryAt = r.SkewProtectionBoundaryAt.ValueInt64()
	} else {
		skewProtectionBoundaryAt = nil
	}
	skewProtectionMaxAge := new(int64)
	if !r.SkewProtectionMaxAge.IsUnknown() && !r.SkewProtectionMaxAge.IsNull() {
		*skewProtectionMaxAge = r.SkewProtectionMaxAge.ValueInt64()
	} else {
		skewProtectionMaxAge = nil
	}
	skipGitConnectDuringLink := new(bool)
	if !r.SkipGitConnectDuringLink.IsUnknown() && !r.SkipGitConnectDuringLink.IsNull() {
		*skipGitConnectDuringLink = r.SkipGitConnectDuringLink.ValueBool()
	} else {
		skipGitConnectDuringLink = nil
	}
	sourceFilesOutsideRootDirectory := new(bool)
	if !r.SourceFilesOutsideRootDirectory.IsUnknown() && !r.SourceFilesOutsideRootDirectory.IsNull() {
		*sourceFilesOutsideRootDirectory = r.SourceFilesOutsideRootDirectory.ValueBool()
	} else {
		sourceFilesOutsideRootDirectory = nil
	}
	enablePreviewFeedback := new(bool)
	if !r.EnablePreviewFeedback.IsUnknown() && !r.EnablePreviewFeedback.IsNull() {
		*enablePreviewFeedback = r.EnablePreviewFeedback.ValueBool()
	} else {
		enablePreviewFeedback = nil
	}
	var passwordProtection *operations.PasswordProtection
	if r.PasswordProtection != nil {
		deploymentType := operations.DeploymentType(r.PasswordProtection.DeploymentType.ValueString())
		password := new(string)
		if !r.PasswordProtection.Password.IsUnknown() && !r.PasswordProtection.Password.IsNull() {
			*password = r.PasswordProtection.Password.ValueString()
		} else {
			password = nil
		}
		passwordProtection = &operations.PasswordProtection{
			DeploymentType: deploymentType,
			Password:       password,
		}
	}
	var ssoProtection *operations.SsoProtection
	if r.SsoProtection != nil {
		deploymentType1 := new(operations.UpdateProjectDeploymentType)
		if !r.SsoProtection.DeploymentType.IsUnknown() && !r.SsoProtection.DeploymentType.IsNull() {
			*deploymentType1 = operations.UpdateProjectDeploymentType(r.SsoProtection.DeploymentType.ValueString())
		} else {
			deploymentType1 = nil
		}
		ssoProtection = &operations.SsoProtection{
			DeploymentType: deploymentType1,
		}
	}
	var trustedIps *operations.TrustedIps
	if r.TrustedIps != nil {
		deploymentType2 := operations.UpdateProjectProjectsDeploymentType(r.TrustedIps.DeploymentType.ValueString())
		var addresses []operations.Addresses = []operations.Addresses{}
		for _, addressesItem := range r.TrustedIps.Addresses {
			value := addressesItem.Value.ValueString()
			note := new(string)
			if !addressesItem.Note.IsUnknown() && !addressesItem.Note.IsNull() {
				*note = addressesItem.Note.ValueString()
			} else {
				note = nil
			}
			addresses = append(addresses, operations.Addresses{
				Value: value,
				Note:  note,
			})
		}
		protectionMode := operations.ProtectionMode(r.TrustedIps.ProtectionMode.ValueString())
		trustedIps = &operations.TrustedIps{
			DeploymentType: deploymentType2,
			Addresses:      addresses,
			ProtectionMode: protectionMode,
		}
	}
	var optionsAllowlist *operations.OptionsAllowlist
	if r.OptionsAllowlist != nil {
		var paths []operations.Paths = []operations.Paths{}
		for _, pathsItem := range r.OptionsAllowlist.Paths {
			value1 := pathsItem.Value.ValueString()
			paths = append(paths, operations.Paths{
				Value: value1,
			})
		}
		optionsAllowlist = &operations.OptionsAllowlist{
			Paths: paths,
		}
	}
	out := operations.UpdateProjectRequestBody{
		AutoExposeSystemEnvs:                 autoExposeSystemEnvs,
		AutoAssignCustomDomains:              autoAssignCustomDomains,
		AutoAssignCustomDomainsUpdatedBy:     autoAssignCustomDomainsUpdatedBy,
		BuildCommand:                         buildCommand,
		CommandForIgnoringBuildStep:          commandForIgnoringBuildStep,
		CustomerSupportCodeVisibility:        customerSupportCodeVisibility,
		DevCommand:                           devCommand,
		DirectoryListing:                     directoryListing,
		Framework:                            framework,
		GitForkProtection:                    gitForkProtection,
		GitLFS:                               gitLFS,
		InstallCommand:                       installCommand,
		Name:                                 name,
		NodeVersion:                          nodeVersion,
		OutputDirectory:                      outputDirectory,
		PublicSource:                         publicSource,
		RootDirectory:                        rootDirectory,
		ServerlessFunctionRegion:             serverlessFunctionRegion,
		ServerlessFunctionZeroConfigFailover: serverlessFunctionZeroConfigFailover,
		SkewProtectionBoundaryAt:             skewProtectionBoundaryAt,
		SkewProtectionMaxAge:                 skewProtectionMaxAge,
		SkipGitConnectDuringLink:             skipGitConnectDuringLink,
		SourceFilesOutsideRootDirectory:      sourceFilesOutsideRootDirectory,
		EnablePreviewFeedback:                enablePreviewFeedback,
		PasswordProtection:                   passwordProtection,
		SsoProtection:                        ssoProtection,
		TrustedIps:                           trustedIps,
		OptionsAllowlist:                     optionsAllowlist,
	}
	return &out
}

func (r *ProjectResourceModel) RefreshFromOperationsUpdateProjectResponseBody(resp *operations.UpdateProjectResponseBody) {
	if resp != nil {
		r.AccountID = types.StringValue(resp.AccountID)
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.GetProjectAnalytics{}
			if resp.Analytics.CanceledAt != nil {
				r.Analytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.CanceledAt)))
			} else {
				r.Analytics.CanceledAt = types.NumberNull()
			}
			r.Analytics.DisabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.DisabledAt)))
			r.Analytics.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.EnabledAt)))
			r.Analytics.ID = types.StringValue(resp.Analytics.ID)
			if resp.Analytics.PaidAt != nil {
				r.Analytics.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.PaidAt)))
			} else {
				r.Analytics.PaidAt = types.NumberNull()
			}
			if resp.Analytics.SampleRatePercent != nil {
				r.Analytics.SampleRatePercent = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SampleRatePercent)))
			} else {
				r.Analytics.SampleRatePercent = types.NumberNull()
			}
			if resp.Analytics.SpendLimitInDollars != nil {
				r.Analytics.SpendLimitInDollars = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SpendLimitInDollars)))
			} else {
				r.Analytics.SpendLimitInDollars = types.NumberNull()
			}
		}
		r.AutoAssignCustomDomains = types.BoolPointerValue(resp.AutoAssignCustomDomains)
		r.AutoAssignCustomDomainsUpdatedBy = types.StringPointerValue(resp.AutoAssignCustomDomainsUpdatedBy)
		r.AutoExposeSystemEnvs = types.BoolPointerValue(resp.AutoExposeSystemEnvs)
		r.BuildCommand = types.StringPointerValue(resp.BuildCommand)
		r.CommandForIgnoringBuildStep = types.StringPointerValue(resp.CommandForIgnoringBuildStep)
		r.ConcurrencyBucketName = types.StringPointerValue(resp.ConcurrencyBucketName)
		r.ConnectBuildsEnabled = types.BoolPointerValue(resp.ConnectBuildsEnabled)
		r.ConnectConfigurationID = types.StringPointerValue(resp.ConnectConfigurationID)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.CreatedAt)))
		} else {
			r.CreatedAt = types.NumberNull()
		}
		if resp.Crons == nil {
			r.Crons = nil
		} else {
			r.Crons = &tfTypes.GetProjectCrons{}
			r.Crons.Definitions = []tfTypes.GetProjectDefinitions{}
			if len(r.Crons.Definitions) > len(resp.Crons.Definitions) {
				r.Crons.Definitions = r.Crons.Definitions[:len(resp.Crons.Definitions)]
			}
			for definitionsCount, definitionsItem := range resp.Crons.Definitions {
				var definitions1 tfTypes.GetProjectDefinitions
				definitions1.Host = types.StringValue(definitionsItem.Host)
				definitions1.Path = types.StringValue(definitionsItem.Path)
				definitions1.Schedule = types.StringValue(definitionsItem.Schedule)
				if definitionsCount+1 > len(r.Crons.Definitions) {
					r.Crons.Definitions = append(r.Crons.Definitions, definitions1)
				} else {
					r.Crons.Definitions[definitionsCount].Host = definitions1.Host
					r.Crons.Definitions[definitionsCount].Path = definitions1.Path
					r.Crons.Definitions[definitionsCount].Schedule = definitions1.Schedule
				}
			}
			r.Crons.DeploymentID = types.StringPointerValue(resp.Crons.DeploymentID)
			if resp.Crons.DisabledAt != nil {
				r.Crons.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.Crons.DisabledAt)))
			} else {
				r.Crons.DisabledAt = types.NumberNull()
			}
			r.Crons.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Crons.EnabledAt)))
			r.Crons.UpdatedAt = types.NumberValue(big.NewFloat(float64(resp.Crons.UpdatedAt)))
		}
		r.CustomerSupportCodeVisibility = types.BoolPointerValue(resp.CustomerSupportCodeVisibility)
		if resp.DataCache == nil {
			r.DataCache = nil
		} else {
			r.DataCache = &tfTypes.GetProjectDataCache{}
			if resp.DataCache.StorageSizeBytes != nil {
				r.DataCache.StorageSizeBytes = types.NumberValue(big.NewFloat(float64(*resp.DataCache.StorageSizeBytes)))
			} else {
				r.DataCache.StorageSizeBytes = types.NumberNull()
			}
			r.DataCache.Unlimited = types.BoolPointerValue(resp.DataCache.Unlimited)
			r.DataCache.UserDisabled = types.BoolValue(resp.DataCache.UserDisabled)
		}
		r.DevCommand = types.StringPointerValue(resp.DevCommand)
		r.DirectoryListing = types.BoolValue(resp.DirectoryListing)
		r.EnablePreviewFeedback = types.BoolPointerValue(resp.EnablePreviewFeedback)
		r.Env = []tfTypes.GetProjectEnv{}
		if len(r.Env) > len(resp.Env) {
			r.Env = r.Env[:len(resp.Env)]
		}
		for envCount, envItem := range resp.Env {
			var env1 tfTypes.GetProjectEnv
			env1.Comment = types.StringPointerValue(envItem.Comment)
			env1.ConfigurationID = types.StringPointerValue(envItem.ConfigurationID)
			if envItem.ContentHint == nil {
				env1.ContentHint = nil
			} else {
				env1.ContentHint = &tfTypes.GetProjectContentHint{}
				if envItem.ContentHint.UpdateProjectContentHint1 != nil {
					env1.ContentHint.One = &tfTypes.GetProjectContentHint1{}
					env1.ContentHint.One.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint1.StoreID)
					env1.ContentHint.One.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint1.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint10 != nil {
					env1.ContentHint.Ten = &tfTypes.ContentHint10{}
					env1.ContentHint.Ten.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint10.StoreID)
					env1.ContentHint.Ten.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint10.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint11 != nil {
					env1.ContentHint.Eleven = &tfTypes.ContentHint11{}
					env1.ContentHint.Eleven.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint11.StoreID)
					env1.ContentHint.Eleven.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint11.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint12 != nil {
					env1.ContentHint.Twelve = &tfTypes.ContentHint12{}
					env1.ContentHint.Twelve.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint12.StoreID)
					env1.ContentHint.Twelve.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint12.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint13 != nil {
					env1.ContentHint.Thirteen = &tfTypes.ContentHint13{}
					env1.ContentHint.Thirteen.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint13.StoreID)
					env1.ContentHint.Thirteen.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint13.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint14 != nil {
					env1.ContentHint.Fourteen = &tfTypes.ContentHint14{}
					env1.ContentHint.Fourteen.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint14.StoreID)
					env1.ContentHint.Fourteen.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint14.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint2 != nil {
					env1.ContentHint.Two = &tfTypes.GetProjectContentHint2{}
					env1.ContentHint.Two.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint2.StoreID)
					env1.ContentHint.Two.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint2.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint3 != nil {
					env1.ContentHint.Three = &tfTypes.GetProjectContentHint3{}
					env1.ContentHint.Three.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint3.StoreID)
					env1.ContentHint.Three.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint3.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint4 != nil {
					env1.ContentHint.Four = &tfTypes.GetProjectContentHint4{}
					env1.ContentHint.Four.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint4.StoreID)
					env1.ContentHint.Four.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint4.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint5 != nil {
					env1.ContentHint.Five = &tfTypes.GetProjectContentHint5{}
					env1.ContentHint.Five.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint5.StoreID)
					env1.ContentHint.Five.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint5.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint6 != nil {
					env1.ContentHint.Six = &tfTypes.GetProjectContentHint6{}
					env1.ContentHint.Six.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint6.StoreID)
					env1.ContentHint.Six.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint6.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint7 != nil {
					env1.ContentHint.Seven = &tfTypes.GetProjectContentHint7{}
					env1.ContentHint.Seven.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint7.StoreID)
					env1.ContentHint.Seven.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint7.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint8 != nil {
					env1.ContentHint.Eight = &tfTypes.GetProjectContentHint8{}
					env1.ContentHint.Eight.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint8.StoreID)
					env1.ContentHint.Eight.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint8.Type))
				}
				if envItem.ContentHint.UpdateProjectContentHint9 != nil {
					env1.ContentHint.Nine = &tfTypes.GetProjectContentHint9{}
					env1.ContentHint.Nine.StoreID = types.StringValue(envItem.ContentHint.UpdateProjectContentHint9.StoreID)
					env1.ContentHint.Nine.Type = types.StringValue(string(envItem.ContentHint.UpdateProjectContentHint9.Type))
				}
			}
			if envItem.CreatedAt != nil {
				env1.CreatedAt = types.NumberValue(big.NewFloat(float64(*envItem.CreatedAt)))
			} else {
				env1.CreatedAt = types.NumberNull()
			}
			env1.CreatedBy = types.StringPointerValue(envItem.CreatedBy)
			env1.CustomEnvironmentID = types.StringPointerValue(envItem.CustomEnvironmentID)
			env1.Decrypted = types.BoolPointerValue(envItem.Decrypted)
			env1.EdgeConfigID = types.StringPointerValue(envItem.EdgeConfigID)
			env1.EdgeConfigTokenID = types.StringPointerValue(envItem.EdgeConfigTokenID)
			env1.GitBranch = types.StringPointerValue(envItem.GitBranch)
			env1.ID = types.StringPointerValue(envItem.ID)
			if envItem.InternalContentHint == nil {
				env1.InternalContentHint = nil
			} else {
				env1.InternalContentHint = &tfTypes.GetProjectInternalContentHint{}
				env1.InternalContentHint.EncryptedValue = types.StringValue(envItem.InternalContentHint.EncryptedValue)
				env1.InternalContentHint.Type = types.StringValue(string(envItem.InternalContentHint.Type))
			}
			env1.Key = types.StringValue(envItem.Key)
			env1.Target = []types.String{}
			for _, v := range envItem.Target {
				env1.Target = append(env1.Target, types.StringValue(string(v)))
			}
			env1.Type = types.StringValue(string(envItem.Type))
			if envItem.UpdatedAt != nil {
				env1.UpdatedAt = types.NumberValue(big.NewFloat(float64(*envItem.UpdatedAt)))
			} else {
				env1.UpdatedAt = types.NumberNull()
			}
			env1.UpdatedBy = types.StringPointerValue(envItem.UpdatedBy)
			env1.Value = types.StringValue(envItem.Value)
			if envCount+1 > len(r.Env) {
				r.Env = append(r.Env, env1)
			} else {
				r.Env[envCount].Comment = env1.Comment
				r.Env[envCount].ConfigurationID = env1.ConfigurationID
				r.Env[envCount].ContentHint = env1.ContentHint
				r.Env[envCount].CreatedAt = env1.CreatedAt
				r.Env[envCount].CreatedBy = env1.CreatedBy
				r.Env[envCount].CustomEnvironmentID = env1.CustomEnvironmentID
				r.Env[envCount].Decrypted = env1.Decrypted
				r.Env[envCount].EdgeConfigID = env1.EdgeConfigID
				r.Env[envCount].EdgeConfigTokenID = env1.EdgeConfigTokenID
				r.Env[envCount].GitBranch = env1.GitBranch
				r.Env[envCount].ID = env1.ID
				r.Env[envCount].InternalContentHint = env1.InternalContentHint
				r.Env[envCount].Key = env1.Key
				r.Env[envCount].Target = env1.Target
				r.Env[envCount].Type = env1.Type
				r.Env[envCount].UpdatedAt = env1.UpdatedAt
				r.Env[envCount].UpdatedBy = env1.UpdatedBy
				r.Env[envCount].Value = env1.Value
			}
		}
		if resp.Framework != nil {
			r.Framework = types.StringValue(string(*resp.Framework))
		} else {
			r.Framework = types.StringNull()
		}
		if resp.GitComments == nil {
			r.GitComments = nil
		} else {
			r.GitComments = &tfTypes.GetProjectGitComments{}
			r.GitComments.OnCommit = types.BoolValue(resp.GitComments.OnCommit)
			r.GitComments.OnPullRequest = types.BoolValue(resp.GitComments.OnPullRequest)
		}
		r.GitForkProtection = types.BoolPointerValue(resp.GitForkProtection)
		r.GitLFS = types.BoolPointerValue(resp.GitLFS)
		r.HasActiveBranches = types.BoolPointerValue(resp.HasActiveBranches)
		r.HasFloatingAliases = types.BoolPointerValue(resp.HasFloatingAliases)
		r.ID = types.StringValue(resp.ID)
		r.InstallCommand = types.StringPointerValue(resp.InstallCommand)
		if resp.LastAliasRequest == nil {
			r.LastAliasRequest = nil
		} else {
			r.LastAliasRequest = &tfTypes.GetProjectLastAliasRequest{}
			r.LastAliasRequest.FromDeploymentID = types.StringValue(resp.LastAliasRequest.FromDeploymentID)
			r.LastAliasRequest.JobStatus = types.StringValue(string(resp.LastAliasRequest.JobStatus))
			r.LastAliasRequest.RequestedAt = types.NumberValue(big.NewFloat(float64(resp.LastAliasRequest.RequestedAt)))
			r.LastAliasRequest.ToDeploymentID = types.StringValue(resp.LastAliasRequest.ToDeploymentID)
			r.LastAliasRequest.Type = types.StringValue(string(resp.LastAliasRequest.Type))
		}
		if resp.LastRollbackTarget == nil {
			r.LastRollbackTarget = nil
		} else {
			r.LastRollbackTarget = &tfTypes.GetProjectLastRollbackTarget{}
		}
		r.LatestDeployments = []tfTypes.GetProjectLatestDeployments{}
		if len(r.LatestDeployments) > len(resp.LatestDeployments) {
			r.LatestDeployments = r.LatestDeployments[:len(resp.LatestDeployments)]
		}
		for latestDeploymentsCount, latestDeploymentsItem := range resp.LatestDeployments {
			var latestDeployments1 tfTypes.GetProjectLatestDeployments
			latestDeployments1.Alias = []types.String{}
			for _, v := range latestDeploymentsItem.Alias {
				latestDeployments1.Alias = append(latestDeployments1.Alias, types.StringValue(v))
			}
			if latestDeploymentsItem.AliasAssigned == nil {
				latestDeployments1.AliasAssigned = nil
			} else {
				latestDeployments1.AliasAssigned = &tfTypes.GetProjectAliasAssigned{}
				if latestDeploymentsItem.AliasAssigned.Number != nil {
					if latestDeploymentsItem.AliasAssigned.Number != nil {
						latestDeployments1.AliasAssigned.Number = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.AliasAssigned.Number)))
					} else {
						latestDeployments1.AliasAssigned.Number = types.NumberNull()
					}
				}
				if latestDeploymentsItem.AliasAssigned.Boolean != nil {
					latestDeployments1.AliasAssigned.Boolean = types.BoolPointerValue(latestDeploymentsItem.AliasAssigned.Boolean)
				}
			}
			if latestDeploymentsItem.AliasError == nil {
				latestDeployments1.AliasError = nil
			} else {
				latestDeployments1.AliasError = &tfTypes.GetProjectAliasError{}
				latestDeployments1.AliasError.Code = types.StringValue(latestDeploymentsItem.AliasError.Code)
				latestDeployments1.AliasError.Message = types.StringValue(latestDeploymentsItem.AliasError.Message)
			}
			latestDeployments1.AliasFinal = types.StringPointerValue(latestDeploymentsItem.AliasFinal)
			latestDeployments1.AutomaticAliases = []types.String{}
			for _, v := range latestDeploymentsItem.AutomaticAliases {
				latestDeployments1.AutomaticAliases = append(latestDeployments1.AutomaticAliases, types.StringValue(v))
			}
			if latestDeploymentsItem.BuildingAt != nil {
				latestDeployments1.BuildingAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.BuildingAt)))
			} else {
				latestDeployments1.BuildingAt = types.NumberNull()
			}
			latestDeployments1.Builds = []tfTypes.GetProjectBuilds{}
			for buildsCount, buildsItem := range latestDeploymentsItem.Builds {
				var builds1 tfTypes.GetProjectBuilds
				builds1.Dest = types.StringPointerValue(buildsItem.Dest)
				builds1.Src = types.StringPointerValue(buildsItem.Src)
				builds1.Use = types.StringValue(buildsItem.Use)
				if buildsCount+1 > len(latestDeployments1.Builds) {
					latestDeployments1.Builds = append(latestDeployments1.Builds, builds1)
				} else {
					latestDeployments1.Builds[buildsCount].Dest = builds1.Dest
					latestDeployments1.Builds[buildsCount].Src = builds1.Src
					latestDeployments1.Builds[buildsCount].Use = builds1.Use
				}
			}
			if latestDeploymentsItem.ChecksConclusion != nil {
				latestDeployments1.ChecksConclusion = types.StringValue(string(*latestDeploymentsItem.ChecksConclusion))
			} else {
				latestDeployments1.ChecksConclusion = types.StringNull()
			}
			if latestDeploymentsItem.ChecksState != nil {
				latestDeployments1.ChecksState = types.StringValue(string(*latestDeploymentsItem.ChecksState))
			} else {
				latestDeployments1.ChecksState = types.StringNull()
			}
			latestDeployments1.ConnectBuildsEnabled = types.BoolPointerValue(latestDeploymentsItem.ConnectBuildsEnabled)
			latestDeployments1.ConnectConfigurationID = types.StringPointerValue(latestDeploymentsItem.ConnectConfigurationID)
			latestDeployments1.CreatedAt = types.NumberValue(big.NewFloat(float64(latestDeploymentsItem.CreatedAt)))
			latestDeployments1.CreatedIn = types.StringValue(latestDeploymentsItem.CreatedIn)
			if latestDeploymentsItem.Creator == nil {
				latestDeployments1.Creator = nil
			} else {
				latestDeployments1.Creator = &tfTypes.GetProjectCreator{}
				latestDeployments1.Creator.Email = types.StringValue(latestDeploymentsItem.Creator.Email)
				latestDeployments1.Creator.GithubLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GithubLogin)
				latestDeployments1.Creator.GitlabLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GitlabLogin)
				latestDeployments1.Creator.UID = types.StringValue(latestDeploymentsItem.Creator.UID)
				latestDeployments1.Creator.Username = types.StringValue(latestDeploymentsItem.Creator.Username)
			}
			latestDeployments1.DeploymentHostname = types.StringValue(latestDeploymentsItem.DeploymentHostname)
			latestDeployments1.Forced = types.BoolPointerValue(latestDeploymentsItem.Forced)
			latestDeployments1.ID = types.StringValue(latestDeploymentsItem.ID)
			if len(latestDeploymentsItem.Meta) > 0 {
				latestDeployments1.Meta = make(map[string]types.String)
				for key1, value1 := range latestDeploymentsItem.Meta {
					latestDeployments1.Meta[key1] = types.StringValue(value1)
				}
			}
			latestDeployments1.MonorepoManager = types.StringPointerValue(latestDeploymentsItem.MonorepoManager)
			latestDeployments1.Name = types.StringValue(latestDeploymentsItem.Name)
			if len(latestDeploymentsItem.OidcTokenClaims) > 0 {
				latestDeployments1.OidcTokenClaims = make(map[string]tfTypes.GetProjectOidcTokenClaims)
				for getProjectOidcTokenClaimsKey, getProjectOidcTokenClaimsValue := range latestDeploymentsItem.OidcTokenClaims {
					var getProjectOidcTokenClaimsResult tfTypes.GetProjectOidcTokenClaims
					if getProjectOidcTokenClaimsValue.Str != nil {
						getProjectOidcTokenClaimsResult.Str = types.StringPointerValue(getProjectOidcTokenClaimsValue.Str)
					}
					if getProjectOidcTokenClaimsValue.ArrayOfStr != nil {
						getProjectOidcTokenClaimsResult.ArrayOfStr = []types.String{}
						for _, v := range getProjectOidcTokenClaimsValue.ArrayOfStr {
							getProjectOidcTokenClaimsResult.ArrayOfStr = append(getProjectOidcTokenClaimsResult.ArrayOfStr, types.StringValue(v))
						}
					}
					latestDeployments1.OidcTokenClaims[getProjectOidcTokenClaimsKey] = getProjectOidcTokenClaimsResult
				}
			}
			latestDeployments1.Plan = types.StringValue(string(latestDeploymentsItem.Plan))
			latestDeployments1.PreviewCommentsEnabled = types.BoolPointerValue(latestDeploymentsItem.PreviewCommentsEnabled)
			latestDeployments1.Private = types.BoolValue(latestDeploymentsItem.Private)
			if latestDeploymentsItem.ReadyAt != nil {
				latestDeployments1.ReadyAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.ReadyAt)))
			} else {
				latestDeployments1.ReadyAt = types.NumberNull()
			}
			latestDeployments1.ReadyState = types.StringValue(string(latestDeploymentsItem.ReadyState))
			if latestDeploymentsItem.ReadySubstate != nil {
				latestDeployments1.ReadySubstate = types.StringValue(string(*latestDeploymentsItem.ReadySubstate))
			} else {
				latestDeployments1.ReadySubstate = types.StringNull()
			}
			if latestDeploymentsItem.RequestedAt != nil {
				latestDeployments1.RequestedAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.RequestedAt)))
			} else {
				latestDeployments1.RequestedAt = types.NumberNull()
			}
			latestDeployments1.Target = types.StringPointerValue(latestDeploymentsItem.Target)
			latestDeployments1.TeamID = types.StringPointerValue(latestDeploymentsItem.TeamID)
			latestDeployments1.Type = types.StringValue(string(latestDeploymentsItem.Type))
			latestDeployments1.URL = types.StringValue(latestDeploymentsItem.URL)
			latestDeployments1.UserID = types.StringValue(latestDeploymentsItem.UserID)
			latestDeployments1.WithCache = types.BoolPointerValue(latestDeploymentsItem.WithCache)
			if latestDeploymentsCount+1 > len(r.LatestDeployments) {
				r.LatestDeployments = append(r.LatestDeployments, latestDeployments1)
			} else {
				r.LatestDeployments[latestDeploymentsCount].Alias = latestDeployments1.Alias
				r.LatestDeployments[latestDeploymentsCount].AliasAssigned = latestDeployments1.AliasAssigned
				r.LatestDeployments[latestDeploymentsCount].AliasError = latestDeployments1.AliasError
				r.LatestDeployments[latestDeploymentsCount].AliasFinal = latestDeployments1.AliasFinal
				r.LatestDeployments[latestDeploymentsCount].AutomaticAliases = latestDeployments1.AutomaticAliases
				r.LatestDeployments[latestDeploymentsCount].BuildingAt = latestDeployments1.BuildingAt
				r.LatestDeployments[latestDeploymentsCount].Builds = latestDeployments1.Builds
				r.LatestDeployments[latestDeploymentsCount].ChecksConclusion = latestDeployments1.ChecksConclusion
				r.LatestDeployments[latestDeploymentsCount].ChecksState = latestDeployments1.ChecksState
				r.LatestDeployments[latestDeploymentsCount].ConnectBuildsEnabled = latestDeployments1.ConnectBuildsEnabled
				r.LatestDeployments[latestDeploymentsCount].ConnectConfigurationID = latestDeployments1.ConnectConfigurationID
				r.LatestDeployments[latestDeploymentsCount].CreatedAt = latestDeployments1.CreatedAt
				r.LatestDeployments[latestDeploymentsCount].CreatedIn = latestDeployments1.CreatedIn
				r.LatestDeployments[latestDeploymentsCount].Creator = latestDeployments1.Creator
				r.LatestDeployments[latestDeploymentsCount].DeploymentHostname = latestDeployments1.DeploymentHostname
				r.LatestDeployments[latestDeploymentsCount].Forced = latestDeployments1.Forced
				r.LatestDeployments[latestDeploymentsCount].ID = latestDeployments1.ID
				r.LatestDeployments[latestDeploymentsCount].Meta = latestDeployments1.Meta
				r.LatestDeployments[latestDeploymentsCount].MonorepoManager = latestDeployments1.MonorepoManager
				r.LatestDeployments[latestDeploymentsCount].Name = latestDeployments1.Name
				r.LatestDeployments[latestDeploymentsCount].OidcTokenClaims = latestDeployments1.OidcTokenClaims
				r.LatestDeployments[latestDeploymentsCount].Plan = latestDeployments1.Plan
				r.LatestDeployments[latestDeploymentsCount].PreviewCommentsEnabled = latestDeployments1.PreviewCommentsEnabled
				r.LatestDeployments[latestDeploymentsCount].Private = latestDeployments1.Private
				r.LatestDeployments[latestDeploymentsCount].ReadyAt = latestDeployments1.ReadyAt
				r.LatestDeployments[latestDeploymentsCount].ReadyState = latestDeployments1.ReadyState
				r.LatestDeployments[latestDeploymentsCount].ReadySubstate = latestDeployments1.ReadySubstate
				r.LatestDeployments[latestDeploymentsCount].RequestedAt = latestDeployments1.RequestedAt
				r.LatestDeployments[latestDeploymentsCount].Target = latestDeployments1.Target
				r.LatestDeployments[latestDeploymentsCount].TeamID = latestDeployments1.TeamID
				r.LatestDeployments[latestDeploymentsCount].Type = latestDeployments1.Type
				r.LatestDeployments[latestDeploymentsCount].URL = latestDeployments1.URL
				r.LatestDeployments[latestDeploymentsCount].UserID = latestDeployments1.UserID
				r.LatestDeployments[latestDeploymentsCount].WithCache = latestDeployments1.WithCache
			}
		}
		if resp.Link == nil {
			r.Link = nil
		} else {
			r.Link = &tfTypes.GetProjectLink{}
			if resp.Link.UpdateProjectLink1 != nil {
				r.Link.One = &tfTypes.GetProjectLink1{}
				if resp.Link.UpdateProjectLink1.CreatedAt != nil {
					r.Link.One.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink1.CreatedAt)))
				} else {
					r.Link.One.CreatedAt = types.NumberNull()
				}
				r.Link.One.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.One.DeployHooks) > len(resp.Link.UpdateProjectLink1.DeployHooks) {
					r.Link.One.DeployHooks = r.Link.One.DeployHooks[:len(resp.Link.UpdateProjectLink1.DeployHooks)]
				}
				for deployHooksCount, deployHooksItem := range resp.Link.UpdateProjectLink1.DeployHooks {
					var deployHooks1 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem.CreatedAt != nil {
						deployHooks1.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem.CreatedAt)))
					} else {
						deployHooks1.CreatedAt = types.NumberNull()
					}
					deployHooks1.ID = types.StringValue(deployHooksItem.ID)
					deployHooks1.Name = types.StringValue(deployHooksItem.Name)
					deployHooks1.Ref = types.StringValue(deployHooksItem.Ref)
					deployHooks1.URL = types.StringValue(deployHooksItem.URL)
					if deployHooksCount+1 > len(r.Link.One.DeployHooks) {
						r.Link.One.DeployHooks = append(r.Link.One.DeployHooks, deployHooks1)
					} else {
						r.Link.One.DeployHooks[deployHooksCount].CreatedAt = deployHooks1.CreatedAt
						r.Link.One.DeployHooks[deployHooksCount].ID = deployHooks1.ID
						r.Link.One.DeployHooks[deployHooksCount].Name = deployHooks1.Name
						r.Link.One.DeployHooks[deployHooksCount].Ref = deployHooks1.Ref
						r.Link.One.DeployHooks[deployHooksCount].URL = deployHooks1.URL
					}
				}
				r.Link.One.GitCredentialID = types.StringPointerValue(resp.Link.UpdateProjectLink1.GitCredentialID)
				r.Link.One.Org = types.StringPointerValue(resp.Link.UpdateProjectLink1.Org)
				r.Link.One.ProductionBranch = types.StringPointerValue(resp.Link.UpdateProjectLink1.ProductionBranch)
				r.Link.One.Repo = types.StringPointerValue(resp.Link.UpdateProjectLink1.Repo)
				if resp.Link.UpdateProjectLink1.RepoID != nil {
					r.Link.One.RepoID = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink1.RepoID)))
				} else {
					r.Link.One.RepoID = types.NumberNull()
				}
				r.Link.One.Sourceless = types.BoolPointerValue(resp.Link.UpdateProjectLink1.Sourceless)
				if resp.Link.UpdateProjectLink1.Type != nil {
					r.Link.One.Type = types.StringValue(string(*resp.Link.UpdateProjectLink1.Type))
				} else {
					r.Link.One.Type = types.StringNull()
				}
				if resp.Link.UpdateProjectLink1.UpdatedAt != nil {
					r.Link.One.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink1.UpdatedAt)))
				} else {
					r.Link.One.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.UpdateProjectLink2 != nil {
				r.Link.Two = &tfTypes.GetProjectLink2{}
				if resp.Link.UpdateProjectLink2.CreatedAt != nil {
					r.Link.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink2.CreatedAt)))
				} else {
					r.Link.Two.CreatedAt = types.NumberNull()
				}
				r.Link.Two.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Two.DeployHooks) > len(resp.Link.UpdateProjectLink2.DeployHooks) {
					r.Link.Two.DeployHooks = r.Link.Two.DeployHooks[:len(resp.Link.UpdateProjectLink2.DeployHooks)]
				}
				for deployHooksCount1, deployHooksItem1 := range resp.Link.UpdateProjectLink2.DeployHooks {
					var deployHooks3 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem1.CreatedAt != nil {
						deployHooks3.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem1.CreatedAt)))
					} else {
						deployHooks3.CreatedAt = types.NumberNull()
					}
					deployHooks3.ID = types.StringValue(deployHooksItem1.ID)
					deployHooks3.Name = types.StringValue(deployHooksItem1.Name)
					deployHooks3.Ref = types.StringValue(deployHooksItem1.Ref)
					deployHooks3.URL = types.StringValue(deployHooksItem1.URL)
					if deployHooksCount1+1 > len(r.Link.Two.DeployHooks) {
						r.Link.Two.DeployHooks = append(r.Link.Two.DeployHooks, deployHooks3)
					} else {
						r.Link.Two.DeployHooks[deployHooksCount1].CreatedAt = deployHooks3.CreatedAt
						r.Link.Two.DeployHooks[deployHooksCount1].ID = deployHooks3.ID
						r.Link.Two.DeployHooks[deployHooksCount1].Name = deployHooks3.Name
						r.Link.Two.DeployHooks[deployHooksCount1].Ref = deployHooks3.Ref
						r.Link.Two.DeployHooks[deployHooksCount1].URL = deployHooks3.URL
					}
				}
				r.Link.Two.GitCredentialID = types.StringPointerValue(resp.Link.UpdateProjectLink2.GitCredentialID)
				r.Link.Two.ProductionBranch = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProductionBranch)
				r.Link.Two.ProjectID = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProjectID)
				r.Link.Two.ProjectName = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProjectName)
				r.Link.Two.ProjectNamespace = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProjectNamespace)
				r.Link.Two.ProjectNameWithNamespace = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProjectNameWithNamespace)
				r.Link.Two.ProjectURL = types.StringPointerValue(resp.Link.UpdateProjectLink2.ProjectURL)
				r.Link.Two.Sourceless = types.BoolPointerValue(resp.Link.UpdateProjectLink2.Sourceless)
				if resp.Link.UpdateProjectLink2.Type != nil {
					r.Link.Two.Type = types.StringValue(string(*resp.Link.UpdateProjectLink2.Type))
				} else {
					r.Link.Two.Type = types.StringNull()
				}
				if resp.Link.UpdateProjectLink2.UpdatedAt != nil {
					r.Link.Two.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink2.UpdatedAt)))
				} else {
					r.Link.Two.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.UpdateProjectLink3 != nil {
				r.Link.Three = &tfTypes.GetProjectLink3{}
				if resp.Link.UpdateProjectLink3.CreatedAt != nil {
					r.Link.Three.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink3.CreatedAt)))
				} else {
					r.Link.Three.CreatedAt = types.NumberNull()
				}
				r.Link.Three.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Three.DeployHooks) > len(resp.Link.UpdateProjectLink3.DeployHooks) {
					r.Link.Three.DeployHooks = r.Link.Three.DeployHooks[:len(resp.Link.UpdateProjectLink3.DeployHooks)]
				}
				for deployHooksCount2, deployHooksItem2 := range resp.Link.UpdateProjectLink3.DeployHooks {
					var deployHooks5 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem2.CreatedAt != nil {
						deployHooks5.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem2.CreatedAt)))
					} else {
						deployHooks5.CreatedAt = types.NumberNull()
					}
					deployHooks5.ID = types.StringValue(deployHooksItem2.ID)
					deployHooks5.Name = types.StringValue(deployHooksItem2.Name)
					deployHooks5.Ref = types.StringValue(deployHooksItem2.Ref)
					deployHooks5.URL = types.StringValue(deployHooksItem2.URL)
					if deployHooksCount2+1 > len(r.Link.Three.DeployHooks) {
						r.Link.Three.DeployHooks = append(r.Link.Three.DeployHooks, deployHooks5)
					} else {
						r.Link.Three.DeployHooks[deployHooksCount2].CreatedAt = deployHooks5.CreatedAt
						r.Link.Three.DeployHooks[deployHooksCount2].ID = deployHooks5.ID
						r.Link.Three.DeployHooks[deployHooksCount2].Name = deployHooks5.Name
						r.Link.Three.DeployHooks[deployHooksCount2].Ref = deployHooks5.Ref
						r.Link.Three.DeployHooks[deployHooksCount2].URL = deployHooks5.URL
					}
				}
				r.Link.Three.GitCredentialID = types.StringPointerValue(resp.Link.UpdateProjectLink3.GitCredentialID)
				r.Link.Three.Name = types.StringPointerValue(resp.Link.UpdateProjectLink3.Name)
				r.Link.Three.Owner = types.StringPointerValue(resp.Link.UpdateProjectLink3.Owner)
				r.Link.Three.ProductionBranch = types.StringPointerValue(resp.Link.UpdateProjectLink3.ProductionBranch)
				r.Link.Three.Slug = types.StringPointerValue(resp.Link.UpdateProjectLink3.Slug)
				r.Link.Three.Sourceless = types.BoolPointerValue(resp.Link.UpdateProjectLink3.Sourceless)
				if resp.Link.UpdateProjectLink3.Type != nil {
					r.Link.Three.Type = types.StringValue(string(*resp.Link.UpdateProjectLink3.Type))
				} else {
					r.Link.Three.Type = types.StringNull()
				}
				if resp.Link.UpdateProjectLink3.UpdatedAt != nil {
					r.Link.Three.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.UpdateProjectLink3.UpdatedAt)))
				} else {
					r.Link.Three.UpdatedAt = types.NumberNull()
				}
				r.Link.Three.UUID = types.StringPointerValue(resp.Link.UpdateProjectLink3.UUID)
				r.Link.Three.WorkspaceUUID = types.StringPointerValue(resp.Link.UpdateProjectLink3.WorkspaceUUID)
			}
		}
		r.Live = types.BoolPointerValue(resp.Live)
		r.Name = types.StringValue(resp.Name)
		r.NodeVersion = types.StringValue(string(resp.NodeVersion))
		if resp.OidcTokenConfig == nil {
			r.OidcTokenConfig = nil
		} else {
			r.OidcTokenConfig = &tfTypes.GetProjectOidcTokenConfig{}
			r.OidcTokenConfig.Enabled = types.BoolValue(resp.OidcTokenConfig.Enabled)
		}
		if resp.OptionsAllowlist == nil {
			r.OptionsAllowlist = nil
		} else {
			r.OptionsAllowlist = &tfTypes.OptionsAllowlist{}
			r.OptionsAllowlist.Paths = []tfTypes.Paths{}
			if len(r.OptionsAllowlist.Paths) > len(resp.OptionsAllowlist.Paths) {
				r.OptionsAllowlist.Paths = r.OptionsAllowlist.Paths[:len(resp.OptionsAllowlist.Paths)]
			}
			for pathsCount, pathsItem := range resp.OptionsAllowlist.Paths {
				var paths1 tfTypes.Paths
				paths1.Value = types.StringValue(pathsItem.Value)
				if pathsCount+1 > len(r.OptionsAllowlist.Paths) {
					r.OptionsAllowlist.Paths = append(r.OptionsAllowlist.Paths, paths1)
				} else {
					r.OptionsAllowlist.Paths[pathsCount].Value = paths1.Value
				}
			}
		}
		r.OutputDirectory = types.StringPointerValue(resp.OutputDirectory)
		r.PassiveConnectConfigurationID = types.StringPointerValue(resp.PassiveConnectConfigurationID)
		if resp.PasswordProtection == nil {
			r.PasswordProtection = nil
		} else {
			r.PasswordProtection = &tfTypes.PasswordProtection{}
		}
		r.Paused = types.BoolPointerValue(resp.Paused)
		if resp.Permissions == nil {
			r.Permissions = nil
		} else {
			r.Permissions = &tfTypes.GetProjectPermissions{}
			r.Permissions.AccessGroup = []types.String{}
			for _, v := range resp.Permissions.AccessGroup {
				r.Permissions.AccessGroup = append(r.Permissions.AccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.AliasGlobal = []types.String{}
			for _, v := range resp.Permissions.AliasGlobal {
				r.Permissions.AliasGlobal = append(r.Permissions.AliasGlobal, types.StringValue(string(v)))
			}
			r.Permissions.AliasProject = []types.String{}
			for _, v := range resp.Permissions.AliasProject {
				r.Permissions.AliasProject = append(r.Permissions.AliasProject, types.StringValue(string(v)))
			}
			r.Permissions.AliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.AliasProtectionBypass {
				r.Permissions.AliasProtectionBypass = append(r.Permissions.AliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Analytics = []types.String{}
			for _, v := range resp.Permissions.Analytics {
				r.Permissions.Analytics = append(r.Permissions.Analytics, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.AnalyticsSampling {
				r.Permissions.AnalyticsSampling = append(r.Permissions.AnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.AnalyticsUsage {
				r.Permissions.AnalyticsUsage = append(r.Permissions.AnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.AuditLog = []types.String{}
			for _, v := range resp.Permissions.AuditLog {
				r.Permissions.AuditLog = append(r.Permissions.AuditLog, types.StringValue(string(v)))
			}
			r.Permissions.BillingAddress = []types.String{}
			for _, v := range resp.Permissions.BillingAddress {
				r.Permissions.BillingAddress = append(r.Permissions.BillingAddress, types.StringValue(string(v)))
			}
			r.Permissions.BillingInformation = []types.String{}
			for _, v := range resp.Permissions.BillingInformation {
				r.Permissions.BillingInformation = append(r.Permissions.BillingInformation, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoice = []types.String{}
			for _, v := range resp.Permissions.BillingInvoice {
				r.Permissions.BillingInvoice = append(r.Permissions.BillingInvoice, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceEmailRecipient = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceEmailRecipient {
				r.Permissions.BillingInvoiceEmailRecipient = append(r.Permissions.BillingInvoiceEmailRecipient, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceLanguage = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceLanguage {
				r.Permissions.BillingInvoiceLanguage = append(r.Permissions.BillingInvoiceLanguage, types.StringValue(string(v)))
			}
			r.Permissions.BillingPlan = []types.String{}
			for _, v := range resp.Permissions.BillingPlan {
				r.Permissions.BillingPlan = append(r.Permissions.BillingPlan, types.StringValue(string(v)))
			}
			r.Permissions.BillingPurchaseOrder = []types.String{}
			for _, v := range resp.Permissions.BillingPurchaseOrder {
				r.Permissions.BillingPurchaseOrder = append(r.Permissions.BillingPurchaseOrder, types.StringValue(string(v)))
			}
			r.Permissions.BillingTaxID = []types.String{}
			for _, v := range resp.Permissions.BillingTaxID {
				r.Permissions.BillingTaxID = append(r.Permissions.BillingTaxID, types.StringValue(string(v)))
			}
			r.Permissions.Blob = []types.String{}
			for _, v := range resp.Permissions.Blob {
				r.Permissions.Blob = append(r.Permissions.Blob, types.StringValue(string(v)))
			}
			r.Permissions.BlobStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.BlobStoreTokenSet {
				r.Permissions.BlobStoreTokenSet = append(r.Permissions.BlobStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.Budget = []types.String{}
			for _, v := range resp.Permissions.Budget {
				r.Permissions.Budget = append(r.Permissions.Budget, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifact = []types.String{}
			for _, v := range resp.Permissions.CacheArtifact {
				r.Permissions.CacheArtifact = append(r.Permissions.CacheArtifact, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifactUsageEvent = []types.String{}
			for _, v := range resp.Permissions.CacheArtifactUsageEvent {
				r.Permissions.CacheArtifactUsageEvent = append(r.Permissions.CacheArtifactUsageEvent, types.StringValue(string(v)))
			}
			r.Permissions.CodeChecks = []types.String{}
			for _, v := range resp.Permissions.CodeChecks {
				r.Permissions.CodeChecks = append(r.Permissions.CodeChecks, types.StringValue(string(v)))
			}
			r.Permissions.ConcurrentBuilds = []types.String{}
			for _, v := range resp.Permissions.ConcurrentBuilds {
				r.Permissions.ConcurrentBuilds = append(r.Permissions.ConcurrentBuilds, types.StringValue(string(v)))
			}
			r.Permissions.Connect = []types.String{}
			for _, v := range resp.Permissions.Connect {
				r.Permissions.Connect = append(r.Permissions.Connect, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfiguration = []types.String{}
			for _, v := range resp.Permissions.ConnectConfiguration {
				r.Permissions.ConnectConfiguration = append(r.Permissions.ConnectConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfigurationLink = []types.String{}
			for _, v := range resp.Permissions.ConnectConfigurationLink {
				r.Permissions.ConnectConfigurationLink = append(r.Permissions.ConnectConfigurationLink, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheBillingSettings = []types.String{}
			for _, v := range resp.Permissions.DataCacheBillingSettings {
				r.Permissions.DataCacheBillingSettings = append(r.Permissions.DataCacheBillingSettings, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheNamespace = []types.String{}
			for _, v := range resp.Permissions.DataCacheNamespace {
				r.Permissions.DataCacheNamespace = append(r.Permissions.DataCacheNamespace, types.StringValue(string(v)))
			}
			r.Permissions.Deployment = []types.String{}
			for _, v := range resp.Permissions.Deployment {
				r.Permissions.Deployment = append(r.Permissions.Deployment, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheck = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheck {
				r.Permissions.DeploymentCheck = append(r.Permissions.DeploymentCheck, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckPreview {
				r.Permissions.DeploymentCheckPreview = append(r.Permissions.DeploymentCheckPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckReRunFromProductionBranch = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckReRunFromProductionBranch {
				r.Permissions.DeploymentCheckReRunFromProductionBranch = append(r.Permissions.DeploymentCheckReRunFromProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentPreview {
				r.Permissions.DeploymentPreview = append(r.Permissions.DeploymentPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPrivate = []types.String{}
			for _, v := range resp.Permissions.DeploymentPrivate {
				r.Permissions.DeploymentPrivate = append(r.Permissions.DeploymentPrivate, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentProductionGit = []types.String{}
			for _, v := range resp.Permissions.DeploymentProductionGit {
				r.Permissions.DeploymentProductionGit = append(r.Permissions.DeploymentProductionGit, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPromote = []types.String{}
			for _, v := range resp.Permissions.DeploymentPromote {
				r.Permissions.DeploymentPromote = append(r.Permissions.DeploymentPromote, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentRollback = []types.String{}
			for _, v := range resp.Permissions.DeploymentRollback {
				r.Permissions.DeploymentRollback = append(r.Permissions.DeploymentRollback, types.StringValue(string(v)))
			}
			r.Permissions.Domain = []types.String{}
			for _, v := range resp.Permissions.Domain {
				r.Permissions.Domain = append(r.Permissions.Domain, types.StringValue(string(v)))
			}
			r.Permissions.DomainAcceptDelegation = []types.String{}
			for _, v := range resp.Permissions.DomainAcceptDelegation {
				r.Permissions.DomainAcceptDelegation = append(r.Permissions.DomainAcceptDelegation, types.StringValue(string(v)))
			}
			r.Permissions.DomainAuthCodes = []types.String{}
			for _, v := range resp.Permissions.DomainAuthCodes {
				r.Permissions.DomainAuthCodes = append(r.Permissions.DomainAuthCodes, types.StringValue(string(v)))
			}
			r.Permissions.DomainCertificate = []types.String{}
			for _, v := range resp.Permissions.DomainCertificate {
				r.Permissions.DomainCertificate = append(r.Permissions.DomainCertificate, types.StringValue(string(v)))
			}
			r.Permissions.DomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.DomainCheckConfig {
				r.Permissions.DomainCheckConfig = append(r.Permissions.DomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.DomainMove = []types.String{}
			for _, v := range resp.Permissions.DomainMove {
				r.Permissions.DomainMove = append(r.Permissions.DomainMove, types.StringValue(string(v)))
			}
			r.Permissions.DomainPurchase = []types.String{}
			for _, v := range resp.Permissions.DomainPurchase {
				r.Permissions.DomainPurchase = append(r.Permissions.DomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.DomainRecord = []types.String{}
			for _, v := range resp.Permissions.DomainRecord {
				r.Permissions.DomainRecord = append(r.Permissions.DomainRecord, types.StringValue(string(v)))
			}
			r.Permissions.DomainTransferIn = []types.String{}
			for _, v := range resp.Permissions.DomainTransferIn {
				r.Permissions.DomainTransferIn = append(r.Permissions.DomainTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfig = []types.String{}
			for _, v := range resp.Permissions.EdgeConfig {
				r.Permissions.EdgeConfig = append(r.Permissions.EdgeConfig, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigItem = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigItem {
				r.Permissions.EdgeConfigItem = append(r.Permissions.EdgeConfigItem, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigSchema = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigSchema {
				r.Permissions.EdgeConfigSchema = append(r.Permissions.EdgeConfigSchema, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigToken = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigToken {
				r.Permissions.EdgeConfigToken = append(r.Permissions.EdgeConfigToken, types.StringValue(string(v)))
			}
			r.Permissions.EndpointVerification = []types.String{}
			for _, v := range resp.Permissions.EndpointVerification {
				r.Permissions.EndpointVerification = append(r.Permissions.EndpointVerification, types.StringValue(string(v)))
			}
			r.Permissions.Environments = []types.String{}
			for _, v := range resp.Permissions.Environments {
				r.Permissions.Environments = append(r.Permissions.Environments, types.StringValue(string(v)))
			}
			r.Permissions.Event = []types.String{}
			for _, v := range resp.Permissions.Event {
				r.Permissions.Event = append(r.Permissions.Event, types.StringValue(string(v)))
			}
			r.Permissions.FileUpload = []types.String{}
			for _, v := range resp.Permissions.FileUpload {
				r.Permissions.FileUpload = append(r.Permissions.FileUpload, types.StringValue(string(v)))
			}
			r.Permissions.GitRepository = []types.String{}
			for _, v := range resp.Permissions.GitRepository {
				r.Permissions.GitRepository = append(r.Permissions.GitRepository, types.StringValue(string(v)))
			}
			r.Permissions.Integration = []types.String{}
			for _, v := range resp.Permissions.Integration {
				r.Permissions.Integration = append(r.Permissions.Integration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfiguration {
				r.Permissions.IntegrationConfiguration = append(r.Permissions.IntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationProjects = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationProjects {
				r.Permissions.IntegrationConfigurationProjects = append(r.Permissions.IntegrationConfigurationProjects, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationTransfer = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationTransfer {
				r.Permissions.IntegrationConfigurationTransfer = append(r.Permissions.IntegrationConfigurationTransfer, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationEvent = []types.String{}
			for _, v := range resp.Permissions.IntegrationEvent {
				r.Permissions.IntegrationEvent = append(r.Permissions.IntegrationEvent, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationResourceSecrets = []types.String{}
			for _, v := range resp.Permissions.IntegrationResourceSecrets {
				r.Permissions.IntegrationResourceSecrets = append(r.Permissions.IntegrationResourceSecrets, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStore = []types.String{}
			for _, v := range resp.Permissions.IntegrationStore {
				r.Permissions.IntegrationStore = append(r.Permissions.IntegrationStore, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.IntegrationStoreTokenSet {
				r.Permissions.IntegrationStoreTokenSet = append(r.Permissions.IntegrationStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationVercelConfigurationOverride = []types.String{}
			for _, v := range resp.Permissions.IntegrationVercelConfigurationOverride {
				r.Permissions.IntegrationVercelConfigurationOverride = append(r.Permissions.IntegrationVercelConfigurationOverride, types.StringValue(string(v)))
			}
			r.Permissions.IPBlocking = []types.String{}
			for _, v := range resp.Permissions.IPBlocking {
				r.Permissions.IPBlocking = append(r.Permissions.IPBlocking, types.StringValue(string(v)))
			}
			r.Permissions.Job = []types.String{}
			for _, v := range resp.Permissions.Job {
				r.Permissions.Job = append(r.Permissions.Job, types.StringValue(string(v)))
			}
			r.Permissions.JobGlobal = []types.String{}
			for _, v := range resp.Permissions.JobGlobal {
				r.Permissions.JobGlobal = append(r.Permissions.JobGlobal, types.StringValue(string(v)))
			}
			r.Permissions.LogDrain = []types.String{}
			for _, v := range resp.Permissions.LogDrain {
				r.Permissions.LogDrain = append(r.Permissions.LogDrain, types.StringValue(string(v)))
			}
			r.Permissions.Logs = []types.String{}
			for _, v := range resp.Permissions.Logs {
				r.Permissions.Logs = append(r.Permissions.Logs, types.StringValue(string(v)))
			}
			r.Permissions.LogsPreset = []types.String{}
			for _, v := range resp.Permissions.LogsPreset {
				r.Permissions.LogsPreset = append(r.Permissions.LogsPreset, types.StringValue(string(v)))
			}
			r.Permissions.MarketplaceBillingData = []types.String{}
			for _, v := range resp.Permissions.MarketplaceBillingData {
				r.Permissions.MarketplaceBillingData = append(r.Permissions.MarketplaceBillingData, types.StringValue(string(v)))
			}
			r.Permissions.Monitoring = []types.String{}
			for _, v := range resp.Permissions.Monitoring {
				r.Permissions.Monitoring = append(r.Permissions.Monitoring, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.MonitoringAlert {
				r.Permissions.MonitoringAlert = append(r.Permissions.MonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringChart = []types.String{}
			for _, v := range resp.Permissions.MonitoringChart {
				r.Permissions.MonitoringChart = append(r.Permissions.MonitoringChart, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringQuery = []types.String{}
			for _, v := range resp.Permissions.MonitoringQuery {
				r.Permissions.MonitoringQuery = append(r.Permissions.MonitoringQuery, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringSettings = []types.String{}
			for _, v := range resp.Permissions.MonitoringSettings {
				r.Permissions.MonitoringSettings = append(r.Permissions.MonitoringSettings, types.StringValue(string(v)))
			}
			r.Permissions.NotificationCustomerBudget = []types.String{}
			for _, v := range resp.Permissions.NotificationCustomerBudget {
				r.Permissions.NotificationCustomerBudget = append(r.Permissions.NotificationCustomerBudget, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDeploymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationDeploymentFailed {
				r.Permissions.NotificationDeploymentFailed = append(r.Permissions.NotificationDeploymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainConfiguration = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainConfiguration {
				r.Permissions.NotificationDomainConfiguration = append(r.Permissions.NotificationDomainConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainExpire = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainExpire {
				r.Permissions.NotificationDomainExpire = append(r.Permissions.NotificationDomainExpire, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainMoved = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainMoved {
				r.Permissions.NotificationDomainMoved = append(r.Permissions.NotificationDomainMoved, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainPurchase = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainPurchase {
				r.Permissions.NotificationDomainPurchase = append(r.Permissions.NotificationDomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainRenewal = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainRenewal {
				r.Permissions.NotificationDomainRenewal = append(r.Permissions.NotificationDomainRenewal, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainTransfer = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainTransfer {
				r.Permissions.NotificationDomainTransfer = append(r.Permissions.NotificationDomainTransfer, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainUnverified = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainUnverified {
				r.Permissions.NotificationDomainUnverified = append(r.Permissions.NotificationDomainUnverified, types.StringValue(string(v)))
			}
			r.Permissions.NotificationMonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationMonitoringAlert {
				r.Permissions.NotificationMonitoringAlert = append(r.Permissions.NotificationMonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.NotificationPaymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationPaymentFailed {
				r.Permissions.NotificationPaymentFailed = append(r.Permissions.NotificationPaymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationStatementOfReasons = []types.String{}
			for _, v := range resp.Permissions.NotificationStatementOfReasons {
				r.Permissions.NotificationStatementOfReasons = append(r.Permissions.NotificationStatementOfReasons, types.StringValue(string(v)))
			}
			r.Permissions.NotificationUsageAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationUsageAlert {
				r.Permissions.NotificationUsageAlert = append(r.Permissions.NotificationUsageAlert, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Application = []types.String{}
			for _, v := range resp.Permissions.Oauth2Application {
				r.Permissions.Oauth2Application = append(r.Permissions.Oauth2Application, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Connection = []types.String{}
			for _, v := range resp.Permissions.Oauth2Connection {
				r.Permissions.Oauth2Connection = append(r.Permissions.Oauth2Connection, types.StringValue(string(v)))
			}
			r.Permissions.OpenTelemetryEndpoint = []types.String{}
			for _, v := range resp.Permissions.OpenTelemetryEndpoint {
				r.Permissions.OpenTelemetryEndpoint = append(r.Permissions.OpenTelemetryEndpoint, types.StringValue(string(v)))
			}
			r.Permissions.OptionsAllowlist = []types.String{}
			for _, v := range resp.Permissions.OptionsAllowlist {
				r.Permissions.OptionsAllowlist = append(r.Permissions.OptionsAllowlist, types.StringValue(string(v)))
			}
			r.Permissions.OwnEvent = []types.String{}
			for _, v := range resp.Permissions.OwnEvent {
				r.Permissions.OwnEvent = append(r.Permissions.OwnEvent, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtection = []types.String{}
			for _, v := range resp.Permissions.PasswordProtection {
				r.Permissions.PasswordProtection = append(r.Permissions.PasswordProtection, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtectionInvoiceItem = []types.String{}
			for _, v := range resp.Permissions.PasswordProtectionInvoiceItem {
				r.Permissions.PasswordProtectionInvoiceItem = append(r.Permissions.PasswordProtectionInvoiceItem, types.StringValue(string(v)))
			}
			r.Permissions.PaymentMethod = []types.String{}
			for _, v := range resp.Permissions.PaymentMethod {
				r.Permissions.PaymentMethod = append(r.Permissions.PaymentMethod, types.StringValue(string(v)))
			}
			r.Permissions.Permissions = []types.String{}
			for _, v := range resp.Permissions.Permissions {
				r.Permissions.Permissions = append(r.Permissions.Permissions, types.StringValue(string(v)))
			}
			r.Permissions.Postgres = []types.String{}
			for _, v := range resp.Permissions.Postgres {
				r.Permissions.Postgres = append(r.Permissions.Postgres, types.StringValue(string(v)))
			}
			r.Permissions.PostgresStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.PostgresStoreTokenSet {
				r.Permissions.PostgresStoreTokenSet = append(r.Permissions.PostgresStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.PreviewDeploymentSuffix = []types.String{}
			for _, v := range resp.Permissions.PreviewDeploymentSuffix {
				r.Permissions.PreviewDeploymentSuffix = append(r.Permissions.PreviewDeploymentSuffix, types.StringValue(string(v)))
			}
			r.Permissions.ProductionAliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProductionAliasProtectionBypass {
				r.Permissions.ProductionAliasProtectionBypass = append(r.Permissions.ProductionAliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Project = []types.String{}
			for _, v := range resp.Permissions.Project {
				r.Permissions.Project = append(r.Permissions.Project, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAccessGroup = []types.String{}
			for _, v := range resp.Permissions.ProjectAccessGroup {
				r.Permissions.ProjectAccessGroup = append(r.Permissions.ProjectAccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsSampling {
				r.Permissions.ProjectAnalyticsSampling = append(r.Permissions.ProjectAnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsUsage {
				r.Permissions.ProjectAnalyticsUsage = append(r.Permissions.ProjectAnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentExpiration = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentExpiration {
				r.Permissions.ProjectDeploymentExpiration = append(r.Permissions.ProjectDeploymentExpiration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentHook = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentHook {
				r.Permissions.ProjectDeploymentHook = append(r.Permissions.ProjectDeploymentHook, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomain = []types.String{}
			for _, v := range resp.Permissions.ProjectDomain {
				r.Permissions.ProjectDomain = append(r.Permissions.ProjectDomain, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainCheckConfig {
				r.Permissions.ProjectDomainCheckConfig = append(r.Permissions.ProjectDomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainMove = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainMove {
				r.Permissions.ProjectDomainMove = append(r.Permissions.ProjectDomainMove, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVars = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVars {
				r.Permissions.ProjectEnvVars = append(r.Permissions.ProjectEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsProduction {
				r.Permissions.ProjectEnvVarsProduction = append(r.Permissions.ProjectEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsUnownedByIntegration = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsUnownedByIntegration {
				r.Permissions.ProjectEnvVarsUnownedByIntegration = append(r.Permissions.ProjectEnvVarsUnownedByIntegration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectID = []types.String{}
			for _, v := range resp.Permissions.ProjectID {
				r.Permissions.ProjectID = append(r.Permissions.ProjectID, types.StringValue(string(v)))
			}
			r.Permissions.ProjectIntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.ProjectIntegrationConfiguration {
				r.Permissions.ProjectIntegrationConfiguration = append(r.Permissions.ProjectIntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectLink = []types.String{}
			for _, v := range resp.Permissions.ProjectLink {
				r.Permissions.ProjectLink = append(r.Permissions.ProjectLink, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMember = []types.String{}
			for _, v := range resp.Permissions.ProjectMember {
				r.Permissions.ProjectMember = append(r.Permissions.ProjectMember, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMonitoring = []types.String{}
			for _, v := range resp.Permissions.ProjectMonitoring {
				r.Permissions.ProjectMonitoring = append(r.Permissions.ProjectMonitoring, types.StringValue(string(v)))
			}
			r.Permissions.ProjectPermissions = []types.String{}
			for _, v := range resp.Permissions.ProjectPermissions {
				r.Permissions.ProjectPermissions = append(r.Permissions.ProjectPermissions, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProductionBranch = []types.String{}
			for _, v := range resp.Permissions.ProjectProductionBranch {
				r.Permissions.ProjectProductionBranch = append(r.Permissions.ProjectProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProjectProtectionBypass {
				r.Permissions.ProjectProtectionBypass = append(r.Permissions.ProjectProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCase = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCase {
				r.Permissions.ProjectSupportCase = append(r.Permissions.ProjectSupportCase, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCaseComment {
				r.Permissions.ProjectSupportCaseComment = append(r.Permissions.ProjectSupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransfer = []types.String{}
			for _, v := range resp.Permissions.ProjectTransfer {
				r.Permissions.ProjectTransfer = append(r.Permissions.ProjectTransfer, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferIn = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferIn {
				r.Permissions.ProjectTransferIn = append(r.Permissions.ProjectTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferOut = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferOut {
				r.Permissions.ProjectTransferOut = append(r.Permissions.ProjectTransferOut, types.StringValue(string(v)))
			}
			r.Permissions.ProjectUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectUsage {
				r.Permissions.ProjectUsage = append(r.Permissions.ProjectUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProTrialOnboarding = []types.String{}
			for _, v := range resp.Permissions.ProTrialOnboarding {
				r.Permissions.ProTrialOnboarding = append(r.Permissions.ProTrialOnboarding, types.StringValue(string(v)))
			}
			r.Permissions.RateLimit = []types.String{}
			for _, v := range resp.Permissions.RateLimit {
				r.Permissions.RateLimit = append(r.Permissions.RateLimit, types.StringValue(string(v)))
			}
			r.Permissions.Redis = []types.String{}
			for _, v := range resp.Permissions.Redis {
				r.Permissions.Redis = append(r.Permissions.Redis, types.StringValue(string(v)))
			}
			r.Permissions.RedisStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.RedisStoreTokenSet {
				r.Permissions.RedisStoreTokenSet = append(r.Permissions.RedisStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.RemoteCaching = []types.String{}
			for _, v := range resp.Permissions.RemoteCaching {
				r.Permissions.RemoteCaching = append(r.Permissions.RemoteCaching, types.StringValue(string(v)))
			}
			r.Permissions.Repository = []types.String{}
			for _, v := range resp.Permissions.Repository {
				r.Permissions.Repository = append(r.Permissions.Repository, types.StringValue(string(v)))
			}
			r.Permissions.SamlConfig = []types.String{}
			for _, v := range resp.Permissions.SamlConfig {
				r.Permissions.SamlConfig = append(r.Permissions.SamlConfig, types.StringValue(string(v)))
			}
			r.Permissions.SeawallConfig = []types.String{}
			for _, v := range resp.Permissions.SeawallConfig {
				r.Permissions.SeawallConfig = append(r.Permissions.SeawallConfig, types.StringValue(string(v)))
			}
			r.Permissions.Secret = []types.String{}
			for _, v := range resp.Permissions.Secret {
				r.Permissions.Secret = append(r.Permissions.Secret, types.StringValue(string(v)))
			}
			r.Permissions.SensitiveEnvironmentVariablePolicy = []types.String{}
			for _, v := range resp.Permissions.SensitiveEnvironmentVariablePolicy {
				r.Permissions.SensitiveEnvironmentVariablePolicy = append(r.Permissions.SensitiveEnvironmentVariablePolicy, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarConnection = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarConnection {
				r.Permissions.SharedEnvVarConnection = append(r.Permissions.SharedEnvVarConnection, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVars = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVars {
				r.Permissions.SharedEnvVars = append(r.Permissions.SharedEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarsProduction {
				r.Permissions.SharedEnvVarsProduction = append(r.Permissions.SharedEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.SkewProtection = []types.String{}
			for _, v := range resp.Permissions.SkewProtection {
				r.Permissions.SkewProtection = append(r.Permissions.SkewProtection, types.StringValue(string(v)))
			}
			r.Permissions.Space = []types.String{}
			for _, v := range resp.Permissions.Space {
				r.Permissions.Space = append(r.Permissions.Space, types.StringValue(string(v)))
			}
			r.Permissions.SpaceRun = []types.String{}
			for _, v := range resp.Permissions.SpaceRun {
				r.Permissions.SpaceRun = append(r.Permissions.SpaceRun, types.StringValue(string(v)))
			}
			r.Permissions.SupportCase = []types.String{}
			for _, v := range resp.Permissions.SupportCase {
				r.Permissions.SupportCase = append(r.Permissions.SupportCase, types.StringValue(string(v)))
			}
			r.Permissions.SupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.SupportCaseComment {
				r.Permissions.SupportCaseComment = append(r.Permissions.SupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.Team = []types.String{}
			for _, v := range resp.Permissions.Team {
				r.Permissions.Team = append(r.Permissions.Team, types.StringValue(string(v)))
			}
			r.Permissions.TeamAccessRequest = []types.String{}
			for _, v := range resp.Permissions.TeamAccessRequest {
				r.Permissions.TeamAccessRequest = append(r.Permissions.TeamAccessRequest, types.StringValue(string(v)))
			}
			r.Permissions.TeamFellowMembership = []types.String{}
			for _, v := range resp.Permissions.TeamFellowMembership {
				r.Permissions.TeamFellowMembership = append(r.Permissions.TeamFellowMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamInvite = []types.String{}
			for _, v := range resp.Permissions.TeamInvite {
				r.Permissions.TeamInvite = append(r.Permissions.TeamInvite, types.StringValue(string(v)))
			}
			r.Permissions.TeamInviteCode = []types.String{}
			for _, v := range resp.Permissions.TeamInviteCode {
				r.Permissions.TeamInviteCode = append(r.Permissions.TeamInviteCode, types.StringValue(string(v)))
			}
			r.Permissions.TeamJoin = []types.String{}
			for _, v := range resp.Permissions.TeamJoin {
				r.Permissions.TeamJoin = append(r.Permissions.TeamJoin, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembership = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembership {
				r.Permissions.TeamOwnMembership = append(r.Permissions.TeamOwnMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembershipDisconnectSAML = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembershipDisconnectSAML {
				r.Permissions.TeamOwnMembershipDisconnectSAML = append(r.Permissions.TeamOwnMembershipDisconnectSAML, types.StringValue(string(v)))
			}
			r.Permissions.Token = []types.String{}
			for _, v := range resp.Permissions.Token {
				r.Permissions.Token = append(r.Permissions.Token, types.StringValue(string(v)))
			}
			r.Permissions.TrustedIps = []types.String{}
			for _, v := range resp.Permissions.TrustedIps {
				r.Permissions.TrustedIps = append(r.Permissions.TrustedIps, types.StringValue(string(v)))
			}
			r.Permissions.Usage = []types.String{}
			for _, v := range resp.Permissions.Usage {
				r.Permissions.Usage = append(r.Permissions.Usage, types.StringValue(string(v)))
			}
			r.Permissions.UsageCycle = []types.String{}
			for _, v := range resp.Permissions.UsageCycle {
				r.Permissions.UsageCycle = append(r.Permissions.UsageCycle, types.StringValue(string(v)))
			}
			r.Permissions.User = []types.String{}
			for _, v := range resp.Permissions.User {
				r.Permissions.User = append(r.Permissions.User, types.StringValue(string(v)))
			}
			r.Permissions.UserConnection = []types.String{}
			for _, v := range resp.Permissions.UserConnection {
				r.Permissions.UserConnection = append(r.Permissions.UserConnection, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalytics = []types.String{}
			for _, v := range resp.Permissions.WebAnalytics {
				r.Permissions.WebAnalytics = append(r.Permissions.WebAnalytics, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalyticsPlan = []types.String{}
			for _, v := range resp.Permissions.WebAnalyticsPlan {
				r.Permissions.WebAnalyticsPlan = append(r.Permissions.WebAnalyticsPlan, types.StringValue(string(v)))
			}
			r.Permissions.WebAuthn = []types.String{}
			for _, v := range resp.Permissions.WebAuthn {
				r.Permissions.WebAuthn = append(r.Permissions.WebAuthn, types.StringValue(string(v)))
			}
			r.Permissions.Webhook = []types.String{}
			for _, v := range resp.Permissions.Webhook {
				r.Permissions.Webhook = append(r.Permissions.Webhook, types.StringValue(string(v)))
			}
			r.Permissions.WebhookEvent = []types.String{}
			for _, v := range resp.Permissions.WebhookEvent {
				r.Permissions.WebhookEvent = append(r.Permissions.WebhookEvent, types.StringValue(string(v)))
			}
		}
		r.ProductionDeploymentsFastLane = types.BoolPointerValue(resp.ProductionDeploymentsFastLane)
		if len(resp.ProtectionBypass) > 0 {
			r.ProtectionBypass = make(map[string]tfTypes.GetProjectProtectionBypass)
			for getProjectProtectionBypassKey, getProjectProtectionBypassValue := range resp.ProtectionBypass {
				var getProjectProtectionBypassResult tfTypes.GetProjectProtectionBypass
				getProjectProtectionBypassResult.CreatedAt = types.NumberValue(big.NewFloat(float64(getProjectProtectionBypassValue.CreatedAt)))
				getProjectProtectionBypassResult.CreatedBy = types.StringValue(getProjectProtectionBypassValue.CreatedBy)
				getProjectProtectionBypassResult.Scope = types.StringValue(string(getProjectProtectionBypassValue.Scope))
				r.ProtectionBypass[getProjectProtectionBypassKey] = getProjectProtectionBypassResult
			}
		}
		r.PublicSource = types.BoolPointerValue(resp.PublicSource)
		r.RootDirectory = types.StringPointerValue(resp.RootDirectory)
		if resp.Security == nil {
			r.Security = nil
		} else {
			r.Security = &tfTypes.GetProjectSecurity{}
			if resp.Security.AttackModeActiveUntil != nil {
				r.Security.AttackModeActiveUntil = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeActiveUntil)))
			} else {
				r.Security.AttackModeActiveUntil = types.NumberNull()
			}
			r.Security.AttackModeEnabled = types.BoolPointerValue(resp.Security.AttackModeEnabled)
			if resp.Security.AttackModeUpdatedAt != nil {
				r.Security.AttackModeUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeUpdatedAt)))
			} else {
				r.Security.AttackModeUpdatedAt = types.NumberNull()
			}
			if resp.Security.FirewallConfigVersion != nil {
				r.Security.FirewallConfigVersion = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallConfigVersion)))
			} else {
				r.Security.FirewallConfigVersion = types.NumberNull()
			}
			r.Security.FirewallEnabled = types.BoolPointerValue(resp.Security.FirewallEnabled)
			r.Security.FirewallSeawallEnabled = types.BoolPointerValue(resp.Security.FirewallSeawallEnabled)
			if resp.Security.FirewallUpdatedAt != nil {
				r.Security.FirewallUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallUpdatedAt)))
			} else {
				r.Security.FirewallUpdatedAt = types.NumberNull()
			}
			r.Security.Ja3Enabled = types.BoolPointerValue(resp.Security.Ja3Enabled)
			r.Security.Ja4Enabled = types.BoolPointerValue(resp.Security.Ja4Enabled)
		}
		r.ServerlessFunctionRegion = types.StringPointerValue(resp.ServerlessFunctionRegion)
		r.ServerlessFunctionZeroConfigFailover = types.BoolPointerValue(resp.ServerlessFunctionZeroConfigFailover)
		r.SkewProtectionBoundaryAt = types.Int64PointerValue(resp.SkewProtectionBoundaryAt)
		r.SkewProtectionMaxAge = types.Int64PointerValue(resp.SkewProtectionMaxAge)
		r.SkipGitConnectDuringLink = types.BoolPointerValue(resp.SkipGitConnectDuringLink)
		r.SourceFilesOutsideRootDirectory = types.BoolPointerValue(resp.SourceFilesOutsideRootDirectory)
		if resp.SpeedInsights == nil {
			r.SpeedInsights = nil
		} else {
			r.SpeedInsights = &tfTypes.GetProjectSpeedInsights{}
			if resp.SpeedInsights.CanceledAt != nil {
				r.SpeedInsights.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.CanceledAt)))
			} else {
				r.SpeedInsights.CanceledAt = types.NumberNull()
			}
			if resp.SpeedInsights.DisabledAt != nil {
				r.SpeedInsights.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.DisabledAt)))
			} else {
				r.SpeedInsights.DisabledAt = types.NumberNull()
			}
			if resp.SpeedInsights.EnabledAt != nil {
				r.SpeedInsights.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.EnabledAt)))
			} else {
				r.SpeedInsights.EnabledAt = types.NumberNull()
			}
			r.SpeedInsights.HasData = types.BoolPointerValue(resp.SpeedInsights.HasData)
			r.SpeedInsights.ID = types.StringValue(resp.SpeedInsights.ID)
			if resp.SpeedInsights.PaidAt != nil {
				r.SpeedInsights.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.PaidAt)))
			} else {
				r.SpeedInsights.PaidAt = types.NumberNull()
			}
		}
		if resp.SsoProtection == nil {
			r.SsoProtection = nil
		} else {
			r.SsoProtection = &tfTypes.SsoProtection{}
			r.SsoProtection.DeploymentType = types.StringValue(string(resp.SsoProtection.DeploymentType))
		}
		if len(resp.Targets) > 0 {
			r.Targets = make(map[string]tfTypes.GetProjectOidcTokenClaims)
			for getProjectTargetsKey, getProjectTargetsValue := range resp.Targets {
				var getProjectTargetsResult tfTypes.GetProjectOidcTokenClaims
				if getProjectTargetsValue.Str != nil {
					getProjectTargetsResult.Str = types.StringPointerValue(getProjectTargetsValue.Str)
				}
				if getProjectTargetsValue.ArrayOfStr != nil {
					getProjectTargetsResult.ArrayOfStr = []types.String{}
					for _, v := range getProjectTargetsValue.ArrayOfStr {
						getProjectTargetsResult.ArrayOfStr = append(getProjectTargetsResult.ArrayOfStr, types.StringValue(v))
					}
				}
				r.Targets[getProjectTargetsKey] = getProjectTargetsResult
			}
		}
		if resp.TransferCompletedAt != nil {
			r.TransferCompletedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferCompletedAt)))
		} else {
			r.TransferCompletedAt = types.NumberNull()
		}
		r.TransferredFromAccountID = types.StringPointerValue(resp.TransferredFromAccountID)
		if resp.TransferStartedAt != nil {
			r.TransferStartedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferStartedAt)))
		} else {
			r.TransferStartedAt = types.NumberNull()
		}
		r.TransferToAccountID = types.StringPointerValue(resp.TransferToAccountID)
		if resp.TrustedIps == nil {
			r.TrustedIps = nil
		} else {
			r.TrustedIps = &tfTypes.TrustedIps{}
			r.TrustedIps.Addresses = []tfTypes.Addresses{}
			if len(r.TrustedIps.Addresses) > len(resp.TrustedIps.Addresses) {
				r.TrustedIps.Addresses = r.TrustedIps.Addresses[:len(resp.TrustedIps.Addresses)]
			}
			for addressesCount, addressesItem := range resp.TrustedIps.Addresses {
				var addresses1 tfTypes.Addresses
				addresses1.Note = types.StringPointerValue(addressesItem.Note)
				addresses1.Value = types.StringValue(addressesItem.Value)
				if addressesCount+1 > len(r.TrustedIps.Addresses) {
					r.TrustedIps.Addresses = append(r.TrustedIps.Addresses, addresses1)
				} else {
					r.TrustedIps.Addresses[addressesCount].Note = addresses1.Note
					r.TrustedIps.Addresses[addressesCount].Value = addresses1.Value
				}
			}
			r.TrustedIps.DeploymentType = types.StringValue(string(resp.TrustedIps.DeploymentType))
			r.TrustedIps.ProtectionMode = types.StringValue(string(resp.TrustedIps.ProtectionMode))
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.UpdatedAt)))
		} else {
			r.UpdatedAt = types.NumberNull()
		}
		if resp.WebAnalytics == nil {
			r.WebAnalytics = nil
		} else {
			r.WebAnalytics = &tfTypes.GetProjectWebAnalytics{}
			if resp.WebAnalytics.CanceledAt != nil {
				r.WebAnalytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.CanceledAt)))
			} else {
				r.WebAnalytics.CanceledAt = types.NumberNull()
			}
			if resp.WebAnalytics.DisabledAt != nil {
				r.WebAnalytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.DisabledAt)))
			} else {
				r.WebAnalytics.DisabledAt = types.NumberNull()
			}
			if resp.WebAnalytics.EnabledAt != nil {
				r.WebAnalytics.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.EnabledAt)))
			} else {
				r.WebAnalytics.EnabledAt = types.NumberNull()
			}
			r.WebAnalytics.HasData = types.BoolPointerValue(resp.WebAnalytics.HasData)
			r.WebAnalytics.ID = types.StringValue(resp.WebAnalytics.ID)
		}
	}
}

func (r *ProjectResourceModel) RefreshFromOperationsGetProjectResponseBody(resp *operations.GetProjectResponseBody) {
	if resp != nil {
		r.AccountID = types.StringValue(resp.AccountID)
		if resp.Analytics == nil {
			r.Analytics = nil
		} else {
			r.Analytics = &tfTypes.GetProjectAnalytics{}
			if resp.Analytics.CanceledAt != nil {
				r.Analytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.CanceledAt)))
			} else {
				r.Analytics.CanceledAt = types.NumberNull()
			}
			r.Analytics.DisabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.DisabledAt)))
			r.Analytics.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Analytics.EnabledAt)))
			r.Analytics.ID = types.StringValue(resp.Analytics.ID)
			if resp.Analytics.PaidAt != nil {
				r.Analytics.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.Analytics.PaidAt)))
			} else {
				r.Analytics.PaidAt = types.NumberNull()
			}
			if resp.Analytics.SampleRatePercent != nil {
				r.Analytics.SampleRatePercent = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SampleRatePercent)))
			} else {
				r.Analytics.SampleRatePercent = types.NumberNull()
			}
			if resp.Analytics.SpendLimitInDollars != nil {
				r.Analytics.SpendLimitInDollars = types.NumberValue(big.NewFloat(float64(*resp.Analytics.SpendLimitInDollars)))
			} else {
				r.Analytics.SpendLimitInDollars = types.NumberNull()
			}
		}
		r.AutoAssignCustomDomains = types.BoolPointerValue(resp.AutoAssignCustomDomains)
		r.AutoAssignCustomDomainsUpdatedBy = types.StringPointerValue(resp.AutoAssignCustomDomainsUpdatedBy)
		r.AutoExposeSystemEnvs = types.BoolPointerValue(resp.AutoExposeSystemEnvs)
		r.BuildCommand = types.StringPointerValue(resp.BuildCommand)
		r.CommandForIgnoringBuildStep = types.StringPointerValue(resp.CommandForIgnoringBuildStep)
		r.ConcurrencyBucketName = types.StringPointerValue(resp.ConcurrencyBucketName)
		r.ConnectBuildsEnabled = types.BoolPointerValue(resp.ConnectBuildsEnabled)
		r.ConnectConfigurationID = types.StringPointerValue(resp.ConnectConfigurationID)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.CreatedAt)))
		} else {
			r.CreatedAt = types.NumberNull()
		}
		if resp.Crons == nil {
			r.Crons = nil
		} else {
			r.Crons = &tfTypes.GetProjectCrons{}
			r.Crons.Definitions = []tfTypes.GetProjectDefinitions{}
			if len(r.Crons.Definitions) > len(resp.Crons.Definitions) {
				r.Crons.Definitions = r.Crons.Definitions[:len(resp.Crons.Definitions)]
			}
			for definitionsCount, definitionsItem := range resp.Crons.Definitions {
				var definitions1 tfTypes.GetProjectDefinitions
				definitions1.Host = types.StringValue(definitionsItem.Host)
				definitions1.Path = types.StringValue(definitionsItem.Path)
				definitions1.Schedule = types.StringValue(definitionsItem.Schedule)
				if definitionsCount+1 > len(r.Crons.Definitions) {
					r.Crons.Definitions = append(r.Crons.Definitions, definitions1)
				} else {
					r.Crons.Definitions[definitionsCount].Host = definitions1.Host
					r.Crons.Definitions[definitionsCount].Path = definitions1.Path
					r.Crons.Definitions[definitionsCount].Schedule = definitions1.Schedule
				}
			}
			r.Crons.DeploymentID = types.StringPointerValue(resp.Crons.DeploymentID)
			if resp.Crons.DisabledAt != nil {
				r.Crons.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.Crons.DisabledAt)))
			} else {
				r.Crons.DisabledAt = types.NumberNull()
			}
			r.Crons.EnabledAt = types.NumberValue(big.NewFloat(float64(resp.Crons.EnabledAt)))
			r.Crons.UpdatedAt = types.NumberValue(big.NewFloat(float64(resp.Crons.UpdatedAt)))
		}
		r.CustomerSupportCodeVisibility = types.BoolPointerValue(resp.CustomerSupportCodeVisibility)
		if resp.DataCache == nil {
			r.DataCache = nil
		} else {
			r.DataCache = &tfTypes.GetProjectDataCache{}
			if resp.DataCache.StorageSizeBytes != nil {
				r.DataCache.StorageSizeBytes = types.NumberValue(big.NewFloat(float64(*resp.DataCache.StorageSizeBytes)))
			} else {
				r.DataCache.StorageSizeBytes = types.NumberNull()
			}
			r.DataCache.Unlimited = types.BoolPointerValue(resp.DataCache.Unlimited)
			r.DataCache.UserDisabled = types.BoolValue(resp.DataCache.UserDisabled)
		}
		r.DevCommand = types.StringPointerValue(resp.DevCommand)
		r.DirectoryListing = types.BoolValue(resp.DirectoryListing)
		r.EnablePreviewFeedback = types.BoolPointerValue(resp.EnablePreviewFeedback)
		r.Env = []tfTypes.GetProjectEnv{}
		if len(r.Env) > len(resp.Env) {
			r.Env = r.Env[:len(resp.Env)]
		}
		for envCount, envItem := range resp.Env {
			var env1 tfTypes.GetProjectEnv
			env1.Comment = types.StringPointerValue(envItem.Comment)
			env1.ConfigurationID = types.StringPointerValue(envItem.ConfigurationID)
			if envItem.ContentHint == nil {
				env1.ContentHint = nil
			} else {
				env1.ContentHint = &tfTypes.GetProjectContentHint{}
				if envItem.ContentHint.GetProjectContentHint1 != nil {
					env1.ContentHint.One = &tfTypes.GetProjectContentHint1{}
					env1.ContentHint.One.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint1.StoreID)
					env1.ContentHint.One.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint1.Type))
				}
				if envItem.ContentHint.GetProjectContentHint10 != nil {
					env1.ContentHint.Ten = &tfTypes.ContentHint10{}
					env1.ContentHint.Ten.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint10.StoreID)
					env1.ContentHint.Ten.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint10.Type))
				}
				if envItem.ContentHint.GetProjectContentHint11 != nil {
					env1.ContentHint.Eleven = &tfTypes.ContentHint11{}
					env1.ContentHint.Eleven.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint11.StoreID)
					env1.ContentHint.Eleven.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint11.Type))
				}
				if envItem.ContentHint.GetProjectContentHint12 != nil {
					env1.ContentHint.Twelve = &tfTypes.ContentHint12{}
					env1.ContentHint.Twelve.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint12.StoreID)
					env1.ContentHint.Twelve.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint12.Type))
				}
				if envItem.ContentHint.GetProjectContentHint13 != nil {
					env1.ContentHint.Thirteen = &tfTypes.ContentHint13{}
					env1.ContentHint.Thirteen.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint13.StoreID)
					env1.ContentHint.Thirteen.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint13.Type))
				}
				if envItem.ContentHint.GetProjectContentHint14 != nil {
					env1.ContentHint.Fourteen = &tfTypes.ContentHint14{}
					env1.ContentHint.Fourteen.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint14.StoreID)
					env1.ContentHint.Fourteen.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint14.Type))
				}
				if envItem.ContentHint.GetProjectContentHint2 != nil {
					env1.ContentHint.Two = &tfTypes.GetProjectContentHint2{}
					env1.ContentHint.Two.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint2.StoreID)
					env1.ContentHint.Two.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint2.Type))
				}
				if envItem.ContentHint.GetProjectContentHint3 != nil {
					env1.ContentHint.Three = &tfTypes.GetProjectContentHint3{}
					env1.ContentHint.Three.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint3.StoreID)
					env1.ContentHint.Three.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint3.Type))
				}
				if envItem.ContentHint.GetProjectContentHint4 != nil {
					env1.ContentHint.Four = &tfTypes.GetProjectContentHint4{}
					env1.ContentHint.Four.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint4.StoreID)
					env1.ContentHint.Four.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint4.Type))
				}
				if envItem.ContentHint.GetProjectContentHint5 != nil {
					env1.ContentHint.Five = &tfTypes.GetProjectContentHint5{}
					env1.ContentHint.Five.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint5.StoreID)
					env1.ContentHint.Five.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint5.Type))
				}
				if envItem.ContentHint.GetProjectContentHint6 != nil {
					env1.ContentHint.Six = &tfTypes.GetProjectContentHint6{}
					env1.ContentHint.Six.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint6.StoreID)
					env1.ContentHint.Six.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint6.Type))
				}
				if envItem.ContentHint.GetProjectContentHint7 != nil {
					env1.ContentHint.Seven = &tfTypes.GetProjectContentHint7{}
					env1.ContentHint.Seven.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint7.StoreID)
					env1.ContentHint.Seven.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint7.Type))
				}
				if envItem.ContentHint.GetProjectContentHint8 != nil {
					env1.ContentHint.Eight = &tfTypes.GetProjectContentHint8{}
					env1.ContentHint.Eight.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint8.StoreID)
					env1.ContentHint.Eight.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint8.Type))
				}
				if envItem.ContentHint.GetProjectContentHint9 != nil {
					env1.ContentHint.Nine = &tfTypes.GetProjectContentHint9{}
					env1.ContentHint.Nine.StoreID = types.StringValue(envItem.ContentHint.GetProjectContentHint9.StoreID)
					env1.ContentHint.Nine.Type = types.StringValue(string(envItem.ContentHint.GetProjectContentHint9.Type))
				}
			}
			if envItem.CreatedAt != nil {
				env1.CreatedAt = types.NumberValue(big.NewFloat(float64(*envItem.CreatedAt)))
			} else {
				env1.CreatedAt = types.NumberNull()
			}
			env1.CreatedBy = types.StringPointerValue(envItem.CreatedBy)
			env1.CustomEnvironmentID = types.StringPointerValue(envItem.CustomEnvironmentID)
			env1.Decrypted = types.BoolPointerValue(envItem.Decrypted)
			env1.EdgeConfigID = types.StringPointerValue(envItem.EdgeConfigID)
			env1.EdgeConfigTokenID = types.StringPointerValue(envItem.EdgeConfigTokenID)
			env1.GitBranch = types.StringPointerValue(envItem.GitBranch)
			env1.ID = types.StringPointerValue(envItem.ID)
			if envItem.InternalContentHint == nil {
				env1.InternalContentHint = nil
			} else {
				env1.InternalContentHint = &tfTypes.GetProjectInternalContentHint{}
				env1.InternalContentHint.EncryptedValue = types.StringValue(envItem.InternalContentHint.EncryptedValue)
				env1.InternalContentHint.Type = types.StringValue(string(envItem.InternalContentHint.Type))
			}
			env1.Key = types.StringValue(envItem.Key)
			env1.Target = []types.String{}
			for _, v := range envItem.Target {
				env1.Target = append(env1.Target, types.StringValue(string(v)))
			}
			env1.Type = types.StringValue(string(envItem.Type))
			if envItem.UpdatedAt != nil {
				env1.UpdatedAt = types.NumberValue(big.NewFloat(float64(*envItem.UpdatedAt)))
			} else {
				env1.UpdatedAt = types.NumberNull()
			}
			env1.UpdatedBy = types.StringPointerValue(envItem.UpdatedBy)
			env1.Value = types.StringValue(envItem.Value)
			if envCount+1 > len(r.Env) {
				r.Env = append(r.Env, env1)
			} else {
				r.Env[envCount].Comment = env1.Comment
				r.Env[envCount].ConfigurationID = env1.ConfigurationID
				r.Env[envCount].ContentHint = env1.ContentHint
				r.Env[envCount].CreatedAt = env1.CreatedAt
				r.Env[envCount].CreatedBy = env1.CreatedBy
				r.Env[envCount].CustomEnvironmentID = env1.CustomEnvironmentID
				r.Env[envCount].Decrypted = env1.Decrypted
				r.Env[envCount].EdgeConfigID = env1.EdgeConfigID
				r.Env[envCount].EdgeConfigTokenID = env1.EdgeConfigTokenID
				r.Env[envCount].GitBranch = env1.GitBranch
				r.Env[envCount].ID = env1.ID
				r.Env[envCount].InternalContentHint = env1.InternalContentHint
				r.Env[envCount].Key = env1.Key
				r.Env[envCount].Target = env1.Target
				r.Env[envCount].Type = env1.Type
				r.Env[envCount].UpdatedAt = env1.UpdatedAt
				r.Env[envCount].UpdatedBy = env1.UpdatedBy
				r.Env[envCount].Value = env1.Value
			}
		}
		if resp.Framework != nil {
			r.Framework = types.StringValue(string(*resp.Framework))
		} else {
			r.Framework = types.StringNull()
		}
		if resp.GitComments == nil {
			r.GitComments = nil
		} else {
			r.GitComments = &tfTypes.GetProjectGitComments{}
			r.GitComments.OnCommit = types.BoolValue(resp.GitComments.OnCommit)
			r.GitComments.OnPullRequest = types.BoolValue(resp.GitComments.OnPullRequest)
		}
		r.GitForkProtection = types.BoolPointerValue(resp.GitForkProtection)
		r.GitLFS = types.BoolPointerValue(resp.GitLFS)
		r.HasActiveBranches = types.BoolPointerValue(resp.HasActiveBranches)
		r.HasFloatingAliases = types.BoolPointerValue(resp.HasFloatingAliases)
		r.ID = types.StringValue(resp.ID)
		r.InstallCommand = types.StringPointerValue(resp.InstallCommand)
		if resp.LastAliasRequest == nil {
			r.LastAliasRequest = nil
		} else {
			r.LastAliasRequest = &tfTypes.GetProjectLastAliasRequest{}
			r.LastAliasRequest.FromDeploymentID = types.StringValue(resp.LastAliasRequest.FromDeploymentID)
			r.LastAliasRequest.JobStatus = types.StringValue(string(resp.LastAliasRequest.JobStatus))
			r.LastAliasRequest.RequestedAt = types.NumberValue(big.NewFloat(float64(resp.LastAliasRequest.RequestedAt)))
			r.LastAliasRequest.ToDeploymentID = types.StringValue(resp.LastAliasRequest.ToDeploymentID)
			r.LastAliasRequest.Type = types.StringValue(string(resp.LastAliasRequest.Type))
		}
		if resp.LastRollbackTarget == nil {
			r.LastRollbackTarget = nil
		} else {
			r.LastRollbackTarget = &tfTypes.GetProjectLastRollbackTarget{}
		}
		r.LatestDeployments = []tfTypes.GetProjectLatestDeployments{}
		if len(r.LatestDeployments) > len(resp.LatestDeployments) {
			r.LatestDeployments = r.LatestDeployments[:len(resp.LatestDeployments)]
		}
		for latestDeploymentsCount, latestDeploymentsItem := range resp.LatestDeployments {
			var latestDeployments1 tfTypes.GetProjectLatestDeployments
			latestDeployments1.Alias = []types.String{}
			for _, v := range latestDeploymentsItem.Alias {
				latestDeployments1.Alias = append(latestDeployments1.Alias, types.StringValue(v))
			}
			if latestDeploymentsItem.AliasAssigned == nil {
				latestDeployments1.AliasAssigned = nil
			} else {
				latestDeployments1.AliasAssigned = &tfTypes.GetProjectAliasAssigned{}
				if latestDeploymentsItem.AliasAssigned.Number != nil {
					if latestDeploymentsItem.AliasAssigned.Number != nil {
						latestDeployments1.AliasAssigned.Number = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.AliasAssigned.Number)))
					} else {
						latestDeployments1.AliasAssigned.Number = types.NumberNull()
					}
				}
				if latestDeploymentsItem.AliasAssigned.Boolean != nil {
					latestDeployments1.AliasAssigned.Boolean = types.BoolPointerValue(latestDeploymentsItem.AliasAssigned.Boolean)
				}
			}
			if latestDeploymentsItem.AliasError == nil {
				latestDeployments1.AliasError = nil
			} else {
				latestDeployments1.AliasError = &tfTypes.GetProjectAliasError{}
				latestDeployments1.AliasError.Code = types.StringValue(latestDeploymentsItem.AliasError.Code)
				latestDeployments1.AliasError.Message = types.StringValue(latestDeploymentsItem.AliasError.Message)
			}
			latestDeployments1.AliasFinal = types.StringPointerValue(latestDeploymentsItem.AliasFinal)
			latestDeployments1.AutomaticAliases = []types.String{}
			for _, v := range latestDeploymentsItem.AutomaticAliases {
				latestDeployments1.AutomaticAliases = append(latestDeployments1.AutomaticAliases, types.StringValue(v))
			}
			if latestDeploymentsItem.BuildingAt != nil {
				latestDeployments1.BuildingAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.BuildingAt)))
			} else {
				latestDeployments1.BuildingAt = types.NumberNull()
			}
			latestDeployments1.Builds = []tfTypes.GetProjectBuilds{}
			for buildsCount, buildsItem := range latestDeploymentsItem.Builds {
				var builds1 tfTypes.GetProjectBuilds
				builds1.Dest = types.StringPointerValue(buildsItem.Dest)
				builds1.Src = types.StringPointerValue(buildsItem.Src)
				builds1.Use = types.StringValue(buildsItem.Use)
				if buildsCount+1 > len(latestDeployments1.Builds) {
					latestDeployments1.Builds = append(latestDeployments1.Builds, builds1)
				} else {
					latestDeployments1.Builds[buildsCount].Dest = builds1.Dest
					latestDeployments1.Builds[buildsCount].Src = builds1.Src
					latestDeployments1.Builds[buildsCount].Use = builds1.Use
				}
			}
			if latestDeploymentsItem.ChecksConclusion != nil {
				latestDeployments1.ChecksConclusion = types.StringValue(string(*latestDeploymentsItem.ChecksConclusion))
			} else {
				latestDeployments1.ChecksConclusion = types.StringNull()
			}
			if latestDeploymentsItem.ChecksState != nil {
				latestDeployments1.ChecksState = types.StringValue(string(*latestDeploymentsItem.ChecksState))
			} else {
				latestDeployments1.ChecksState = types.StringNull()
			}
			latestDeployments1.ConnectBuildsEnabled = types.BoolPointerValue(latestDeploymentsItem.ConnectBuildsEnabled)
			latestDeployments1.ConnectConfigurationID = types.StringPointerValue(latestDeploymentsItem.ConnectConfigurationID)
			latestDeployments1.CreatedAt = types.NumberValue(big.NewFloat(float64(latestDeploymentsItem.CreatedAt)))
			latestDeployments1.CreatedIn = types.StringValue(latestDeploymentsItem.CreatedIn)
			if latestDeploymentsItem.Creator == nil {
				latestDeployments1.Creator = nil
			} else {
				latestDeployments1.Creator = &tfTypes.GetProjectCreator{}
				latestDeployments1.Creator.Email = types.StringValue(latestDeploymentsItem.Creator.Email)
				latestDeployments1.Creator.GithubLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GithubLogin)
				latestDeployments1.Creator.GitlabLogin = types.StringPointerValue(latestDeploymentsItem.Creator.GitlabLogin)
				latestDeployments1.Creator.UID = types.StringValue(latestDeploymentsItem.Creator.UID)
				latestDeployments1.Creator.Username = types.StringValue(latestDeploymentsItem.Creator.Username)
			}
			latestDeployments1.DeploymentHostname = types.StringValue(latestDeploymentsItem.DeploymentHostname)
			latestDeployments1.Forced = types.BoolPointerValue(latestDeploymentsItem.Forced)
			latestDeployments1.ID = types.StringValue(latestDeploymentsItem.ID)
			if len(latestDeploymentsItem.Meta) > 0 {
				latestDeployments1.Meta = make(map[string]types.String)
				for key1, value1 := range latestDeploymentsItem.Meta {
					latestDeployments1.Meta[key1] = types.StringValue(value1)
				}
			}
			latestDeployments1.MonorepoManager = types.StringPointerValue(latestDeploymentsItem.MonorepoManager)
			latestDeployments1.Name = types.StringValue(latestDeploymentsItem.Name)
			if len(latestDeploymentsItem.OidcTokenClaims) > 0 {
				latestDeployments1.OidcTokenClaims = make(map[string]tfTypes.GetProjectOidcTokenClaims)
				for getProjectOidcTokenClaimsKey, getProjectOidcTokenClaimsValue := range latestDeploymentsItem.OidcTokenClaims {
					var getProjectOidcTokenClaimsResult tfTypes.GetProjectOidcTokenClaims
					if getProjectOidcTokenClaimsValue.Str != nil {
						getProjectOidcTokenClaimsResult.Str = types.StringPointerValue(getProjectOidcTokenClaimsValue.Str)
					}
					if getProjectOidcTokenClaimsValue.ArrayOfStr != nil {
						getProjectOidcTokenClaimsResult.ArrayOfStr = []types.String{}
						for _, v := range getProjectOidcTokenClaimsValue.ArrayOfStr {
							getProjectOidcTokenClaimsResult.ArrayOfStr = append(getProjectOidcTokenClaimsResult.ArrayOfStr, types.StringValue(v))
						}
					}
					latestDeployments1.OidcTokenClaims[getProjectOidcTokenClaimsKey] = getProjectOidcTokenClaimsResult
				}
			}
			latestDeployments1.Plan = types.StringValue(string(latestDeploymentsItem.Plan))
			latestDeployments1.PreviewCommentsEnabled = types.BoolPointerValue(latestDeploymentsItem.PreviewCommentsEnabled)
			latestDeployments1.Private = types.BoolValue(latestDeploymentsItem.Private)
			if latestDeploymentsItem.ReadyAt != nil {
				latestDeployments1.ReadyAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.ReadyAt)))
			} else {
				latestDeployments1.ReadyAt = types.NumberNull()
			}
			latestDeployments1.ReadyState = types.StringValue(string(latestDeploymentsItem.ReadyState))
			if latestDeploymentsItem.ReadySubstate != nil {
				latestDeployments1.ReadySubstate = types.StringValue(string(*latestDeploymentsItem.ReadySubstate))
			} else {
				latestDeployments1.ReadySubstate = types.StringNull()
			}
			if latestDeploymentsItem.RequestedAt != nil {
				latestDeployments1.RequestedAt = types.NumberValue(big.NewFloat(float64(*latestDeploymentsItem.RequestedAt)))
			} else {
				latestDeployments1.RequestedAt = types.NumberNull()
			}
			latestDeployments1.Target = types.StringPointerValue(latestDeploymentsItem.Target)
			latestDeployments1.TeamID = types.StringPointerValue(latestDeploymentsItem.TeamID)
			latestDeployments1.Type = types.StringValue(string(latestDeploymentsItem.Type))
			latestDeployments1.URL = types.StringValue(latestDeploymentsItem.URL)
			latestDeployments1.UserID = types.StringValue(latestDeploymentsItem.UserID)
			latestDeployments1.WithCache = types.BoolPointerValue(latestDeploymentsItem.WithCache)
			if latestDeploymentsCount+1 > len(r.LatestDeployments) {
				r.LatestDeployments = append(r.LatestDeployments, latestDeployments1)
			} else {
				r.LatestDeployments[latestDeploymentsCount].Alias = latestDeployments1.Alias
				r.LatestDeployments[latestDeploymentsCount].AliasAssigned = latestDeployments1.AliasAssigned
				r.LatestDeployments[latestDeploymentsCount].AliasError = latestDeployments1.AliasError
				r.LatestDeployments[latestDeploymentsCount].AliasFinal = latestDeployments1.AliasFinal
				r.LatestDeployments[latestDeploymentsCount].AutomaticAliases = latestDeployments1.AutomaticAliases
				r.LatestDeployments[latestDeploymentsCount].BuildingAt = latestDeployments1.BuildingAt
				r.LatestDeployments[latestDeploymentsCount].Builds = latestDeployments1.Builds
				r.LatestDeployments[latestDeploymentsCount].ChecksConclusion = latestDeployments1.ChecksConclusion
				r.LatestDeployments[latestDeploymentsCount].ChecksState = latestDeployments1.ChecksState
				r.LatestDeployments[latestDeploymentsCount].ConnectBuildsEnabled = latestDeployments1.ConnectBuildsEnabled
				r.LatestDeployments[latestDeploymentsCount].ConnectConfigurationID = latestDeployments1.ConnectConfigurationID
				r.LatestDeployments[latestDeploymentsCount].CreatedAt = latestDeployments1.CreatedAt
				r.LatestDeployments[latestDeploymentsCount].CreatedIn = latestDeployments1.CreatedIn
				r.LatestDeployments[latestDeploymentsCount].Creator = latestDeployments1.Creator
				r.LatestDeployments[latestDeploymentsCount].DeploymentHostname = latestDeployments1.DeploymentHostname
				r.LatestDeployments[latestDeploymentsCount].Forced = latestDeployments1.Forced
				r.LatestDeployments[latestDeploymentsCount].ID = latestDeployments1.ID
				r.LatestDeployments[latestDeploymentsCount].Meta = latestDeployments1.Meta
				r.LatestDeployments[latestDeploymentsCount].MonorepoManager = latestDeployments1.MonorepoManager
				r.LatestDeployments[latestDeploymentsCount].Name = latestDeployments1.Name
				r.LatestDeployments[latestDeploymentsCount].OidcTokenClaims = latestDeployments1.OidcTokenClaims
				r.LatestDeployments[latestDeploymentsCount].Plan = latestDeployments1.Plan
				r.LatestDeployments[latestDeploymentsCount].PreviewCommentsEnabled = latestDeployments1.PreviewCommentsEnabled
				r.LatestDeployments[latestDeploymentsCount].Private = latestDeployments1.Private
				r.LatestDeployments[latestDeploymentsCount].ReadyAt = latestDeployments1.ReadyAt
				r.LatestDeployments[latestDeploymentsCount].ReadyState = latestDeployments1.ReadyState
				r.LatestDeployments[latestDeploymentsCount].ReadySubstate = latestDeployments1.ReadySubstate
				r.LatestDeployments[latestDeploymentsCount].RequestedAt = latestDeployments1.RequestedAt
				r.LatestDeployments[latestDeploymentsCount].Target = latestDeployments1.Target
				r.LatestDeployments[latestDeploymentsCount].TeamID = latestDeployments1.TeamID
				r.LatestDeployments[latestDeploymentsCount].Type = latestDeployments1.Type
				r.LatestDeployments[latestDeploymentsCount].URL = latestDeployments1.URL
				r.LatestDeployments[latestDeploymentsCount].UserID = latestDeployments1.UserID
				r.LatestDeployments[latestDeploymentsCount].WithCache = latestDeployments1.WithCache
			}
		}
		if resp.Link == nil {
			r.Link = nil
		} else {
			r.Link = &tfTypes.GetProjectLink{}
			if resp.Link.GetProjectLink1 != nil {
				r.Link.One = &tfTypes.GetProjectLink1{}
				if resp.Link.GetProjectLink1.CreatedAt != nil {
					r.Link.One.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink1.CreatedAt)))
				} else {
					r.Link.One.CreatedAt = types.NumberNull()
				}
				r.Link.One.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.One.DeployHooks) > len(resp.Link.GetProjectLink1.DeployHooks) {
					r.Link.One.DeployHooks = r.Link.One.DeployHooks[:len(resp.Link.GetProjectLink1.DeployHooks)]
				}
				for deployHooksCount, deployHooksItem := range resp.Link.GetProjectLink1.DeployHooks {
					var deployHooks1 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem.CreatedAt != nil {
						deployHooks1.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem.CreatedAt)))
					} else {
						deployHooks1.CreatedAt = types.NumberNull()
					}
					deployHooks1.ID = types.StringValue(deployHooksItem.ID)
					deployHooks1.Name = types.StringValue(deployHooksItem.Name)
					deployHooks1.Ref = types.StringValue(deployHooksItem.Ref)
					deployHooks1.URL = types.StringValue(deployHooksItem.URL)
					if deployHooksCount+1 > len(r.Link.One.DeployHooks) {
						r.Link.One.DeployHooks = append(r.Link.One.DeployHooks, deployHooks1)
					} else {
						r.Link.One.DeployHooks[deployHooksCount].CreatedAt = deployHooks1.CreatedAt
						r.Link.One.DeployHooks[deployHooksCount].ID = deployHooks1.ID
						r.Link.One.DeployHooks[deployHooksCount].Name = deployHooks1.Name
						r.Link.One.DeployHooks[deployHooksCount].Ref = deployHooks1.Ref
						r.Link.One.DeployHooks[deployHooksCount].URL = deployHooks1.URL
					}
				}
				r.Link.One.GitCredentialID = types.StringPointerValue(resp.Link.GetProjectLink1.GitCredentialID)
				r.Link.One.Org = types.StringPointerValue(resp.Link.GetProjectLink1.Org)
				r.Link.One.ProductionBranch = types.StringPointerValue(resp.Link.GetProjectLink1.ProductionBranch)
				r.Link.One.Repo = types.StringPointerValue(resp.Link.GetProjectLink1.Repo)
				if resp.Link.GetProjectLink1.RepoID != nil {
					r.Link.One.RepoID = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink1.RepoID)))
				} else {
					r.Link.One.RepoID = types.NumberNull()
				}
				r.Link.One.Sourceless = types.BoolPointerValue(resp.Link.GetProjectLink1.Sourceless)
				if resp.Link.GetProjectLink1.Type != nil {
					r.Link.One.Type = types.StringValue(string(*resp.Link.GetProjectLink1.Type))
				} else {
					r.Link.One.Type = types.StringNull()
				}
				if resp.Link.GetProjectLink1.UpdatedAt != nil {
					r.Link.One.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink1.UpdatedAt)))
				} else {
					r.Link.One.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.GetProjectLink2 != nil {
				r.Link.Two = &tfTypes.GetProjectLink2{}
				if resp.Link.GetProjectLink2.CreatedAt != nil {
					r.Link.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink2.CreatedAt)))
				} else {
					r.Link.Two.CreatedAt = types.NumberNull()
				}
				r.Link.Two.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Two.DeployHooks) > len(resp.Link.GetProjectLink2.DeployHooks) {
					r.Link.Two.DeployHooks = r.Link.Two.DeployHooks[:len(resp.Link.GetProjectLink2.DeployHooks)]
				}
				for deployHooksCount1, deployHooksItem1 := range resp.Link.GetProjectLink2.DeployHooks {
					var deployHooks3 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem1.CreatedAt != nil {
						deployHooks3.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem1.CreatedAt)))
					} else {
						deployHooks3.CreatedAt = types.NumberNull()
					}
					deployHooks3.ID = types.StringValue(deployHooksItem1.ID)
					deployHooks3.Name = types.StringValue(deployHooksItem1.Name)
					deployHooks3.Ref = types.StringValue(deployHooksItem1.Ref)
					deployHooks3.URL = types.StringValue(deployHooksItem1.URL)
					if deployHooksCount1+1 > len(r.Link.Two.DeployHooks) {
						r.Link.Two.DeployHooks = append(r.Link.Two.DeployHooks, deployHooks3)
					} else {
						r.Link.Two.DeployHooks[deployHooksCount1].CreatedAt = deployHooks3.CreatedAt
						r.Link.Two.DeployHooks[deployHooksCount1].ID = deployHooks3.ID
						r.Link.Two.DeployHooks[deployHooksCount1].Name = deployHooks3.Name
						r.Link.Two.DeployHooks[deployHooksCount1].Ref = deployHooks3.Ref
						r.Link.Two.DeployHooks[deployHooksCount1].URL = deployHooks3.URL
					}
				}
				r.Link.Two.GitCredentialID = types.StringPointerValue(resp.Link.GetProjectLink2.GitCredentialID)
				r.Link.Two.ProductionBranch = types.StringPointerValue(resp.Link.GetProjectLink2.ProductionBranch)
				r.Link.Two.ProjectID = types.StringPointerValue(resp.Link.GetProjectLink2.ProjectID)
				r.Link.Two.ProjectName = types.StringPointerValue(resp.Link.GetProjectLink2.ProjectName)
				r.Link.Two.ProjectNamespace = types.StringPointerValue(resp.Link.GetProjectLink2.ProjectNamespace)
				r.Link.Two.ProjectNameWithNamespace = types.StringPointerValue(resp.Link.GetProjectLink2.ProjectNameWithNamespace)
				r.Link.Two.ProjectURL = types.StringPointerValue(resp.Link.GetProjectLink2.ProjectURL)
				r.Link.Two.Sourceless = types.BoolPointerValue(resp.Link.GetProjectLink2.Sourceless)
				if resp.Link.GetProjectLink2.Type != nil {
					r.Link.Two.Type = types.StringValue(string(*resp.Link.GetProjectLink2.Type))
				} else {
					r.Link.Two.Type = types.StringNull()
				}
				if resp.Link.GetProjectLink2.UpdatedAt != nil {
					r.Link.Two.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink2.UpdatedAt)))
				} else {
					r.Link.Two.UpdatedAt = types.NumberNull()
				}
			}
			if resp.Link.GetProjectLink3 != nil {
				r.Link.Three = &tfTypes.GetProjectLink3{}
				if resp.Link.GetProjectLink3.CreatedAt != nil {
					r.Link.Three.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink3.CreatedAt)))
				} else {
					r.Link.Three.CreatedAt = types.NumberNull()
				}
				r.Link.Three.DeployHooks = []tfTypes.GetProjectLinkDeployHooks{}
				if len(r.Link.Three.DeployHooks) > len(resp.Link.GetProjectLink3.DeployHooks) {
					r.Link.Three.DeployHooks = r.Link.Three.DeployHooks[:len(resp.Link.GetProjectLink3.DeployHooks)]
				}
				for deployHooksCount2, deployHooksItem2 := range resp.Link.GetProjectLink3.DeployHooks {
					var deployHooks5 tfTypes.GetProjectLinkDeployHooks
					if deployHooksItem2.CreatedAt != nil {
						deployHooks5.CreatedAt = types.NumberValue(big.NewFloat(float64(*deployHooksItem2.CreatedAt)))
					} else {
						deployHooks5.CreatedAt = types.NumberNull()
					}
					deployHooks5.ID = types.StringValue(deployHooksItem2.ID)
					deployHooks5.Name = types.StringValue(deployHooksItem2.Name)
					deployHooks5.Ref = types.StringValue(deployHooksItem2.Ref)
					deployHooks5.URL = types.StringValue(deployHooksItem2.URL)
					if deployHooksCount2+1 > len(r.Link.Three.DeployHooks) {
						r.Link.Three.DeployHooks = append(r.Link.Three.DeployHooks, deployHooks5)
					} else {
						r.Link.Three.DeployHooks[deployHooksCount2].CreatedAt = deployHooks5.CreatedAt
						r.Link.Three.DeployHooks[deployHooksCount2].ID = deployHooks5.ID
						r.Link.Three.DeployHooks[deployHooksCount2].Name = deployHooks5.Name
						r.Link.Three.DeployHooks[deployHooksCount2].Ref = deployHooks5.Ref
						r.Link.Three.DeployHooks[deployHooksCount2].URL = deployHooks5.URL
					}
				}
				r.Link.Three.GitCredentialID = types.StringPointerValue(resp.Link.GetProjectLink3.GitCredentialID)
				r.Link.Three.Name = types.StringPointerValue(resp.Link.GetProjectLink3.Name)
				r.Link.Three.Owner = types.StringPointerValue(resp.Link.GetProjectLink3.Owner)
				r.Link.Three.ProductionBranch = types.StringPointerValue(resp.Link.GetProjectLink3.ProductionBranch)
				r.Link.Three.Slug = types.StringPointerValue(resp.Link.GetProjectLink3.Slug)
				r.Link.Three.Sourceless = types.BoolPointerValue(resp.Link.GetProjectLink3.Sourceless)
				if resp.Link.GetProjectLink3.Type != nil {
					r.Link.Three.Type = types.StringValue(string(*resp.Link.GetProjectLink3.Type))
				} else {
					r.Link.Three.Type = types.StringNull()
				}
				if resp.Link.GetProjectLink3.UpdatedAt != nil {
					r.Link.Three.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Link.GetProjectLink3.UpdatedAt)))
				} else {
					r.Link.Three.UpdatedAt = types.NumberNull()
				}
				r.Link.Three.UUID = types.StringPointerValue(resp.Link.GetProjectLink3.UUID)
				r.Link.Three.WorkspaceUUID = types.StringPointerValue(resp.Link.GetProjectLink3.WorkspaceUUID)
			}
		}
		r.Live = types.BoolPointerValue(resp.Live)
		r.Name = types.StringValue(resp.Name)
		r.NodeVersion = types.StringValue(string(resp.NodeVersion))
		if resp.OidcTokenConfig == nil {
			r.OidcTokenConfig = nil
		} else {
			r.OidcTokenConfig = &tfTypes.GetProjectOidcTokenConfig{}
			r.OidcTokenConfig.Enabled = types.BoolValue(resp.OidcTokenConfig.Enabled)
		}
		if resp.OptionsAllowlist == nil {
			r.OptionsAllowlist = nil
		} else {
			r.OptionsAllowlist = &tfTypes.OptionsAllowlist{}
			r.OptionsAllowlist.Paths = []tfTypes.Paths{}
			if len(r.OptionsAllowlist.Paths) > len(resp.OptionsAllowlist.Paths) {
				r.OptionsAllowlist.Paths = r.OptionsAllowlist.Paths[:len(resp.OptionsAllowlist.Paths)]
			}
			for pathsCount, pathsItem := range resp.OptionsAllowlist.Paths {
				var paths1 tfTypes.Paths
				paths1.Value = types.StringValue(pathsItem.Value)
				if pathsCount+1 > len(r.OptionsAllowlist.Paths) {
					r.OptionsAllowlist.Paths = append(r.OptionsAllowlist.Paths, paths1)
				} else {
					r.OptionsAllowlist.Paths[pathsCount].Value = paths1.Value
				}
			}
		}
		r.OutputDirectory = types.StringPointerValue(resp.OutputDirectory)
		r.PassiveConnectConfigurationID = types.StringPointerValue(resp.PassiveConnectConfigurationID)
		if resp.PasswordProtection == nil {
			r.PasswordProtection = nil
		} else {
			r.PasswordProtection = &tfTypes.PasswordProtection{}
		}
		r.Paused = types.BoolPointerValue(resp.Paused)
		if resp.Permissions == nil {
			r.Permissions = nil
		} else {
			r.Permissions = &tfTypes.GetProjectPermissions{}
			r.Permissions.AccessGroup = []types.String{}
			for _, v := range resp.Permissions.AccessGroup {
				r.Permissions.AccessGroup = append(r.Permissions.AccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.AliasGlobal = []types.String{}
			for _, v := range resp.Permissions.AliasGlobal {
				r.Permissions.AliasGlobal = append(r.Permissions.AliasGlobal, types.StringValue(string(v)))
			}
			r.Permissions.AliasProject = []types.String{}
			for _, v := range resp.Permissions.AliasProject {
				r.Permissions.AliasProject = append(r.Permissions.AliasProject, types.StringValue(string(v)))
			}
			r.Permissions.AliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.AliasProtectionBypass {
				r.Permissions.AliasProtectionBypass = append(r.Permissions.AliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Analytics = []types.String{}
			for _, v := range resp.Permissions.Analytics {
				r.Permissions.Analytics = append(r.Permissions.Analytics, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.AnalyticsSampling {
				r.Permissions.AnalyticsSampling = append(r.Permissions.AnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.AnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.AnalyticsUsage {
				r.Permissions.AnalyticsUsage = append(r.Permissions.AnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.AuditLog = []types.String{}
			for _, v := range resp.Permissions.AuditLog {
				r.Permissions.AuditLog = append(r.Permissions.AuditLog, types.StringValue(string(v)))
			}
			r.Permissions.BillingAddress = []types.String{}
			for _, v := range resp.Permissions.BillingAddress {
				r.Permissions.BillingAddress = append(r.Permissions.BillingAddress, types.StringValue(string(v)))
			}
			r.Permissions.BillingInformation = []types.String{}
			for _, v := range resp.Permissions.BillingInformation {
				r.Permissions.BillingInformation = append(r.Permissions.BillingInformation, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoice = []types.String{}
			for _, v := range resp.Permissions.BillingInvoice {
				r.Permissions.BillingInvoice = append(r.Permissions.BillingInvoice, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceEmailRecipient = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceEmailRecipient {
				r.Permissions.BillingInvoiceEmailRecipient = append(r.Permissions.BillingInvoiceEmailRecipient, types.StringValue(string(v)))
			}
			r.Permissions.BillingInvoiceLanguage = []types.String{}
			for _, v := range resp.Permissions.BillingInvoiceLanguage {
				r.Permissions.BillingInvoiceLanguage = append(r.Permissions.BillingInvoiceLanguage, types.StringValue(string(v)))
			}
			r.Permissions.BillingPlan = []types.String{}
			for _, v := range resp.Permissions.BillingPlan {
				r.Permissions.BillingPlan = append(r.Permissions.BillingPlan, types.StringValue(string(v)))
			}
			r.Permissions.BillingPurchaseOrder = []types.String{}
			for _, v := range resp.Permissions.BillingPurchaseOrder {
				r.Permissions.BillingPurchaseOrder = append(r.Permissions.BillingPurchaseOrder, types.StringValue(string(v)))
			}
			r.Permissions.BillingTaxID = []types.String{}
			for _, v := range resp.Permissions.BillingTaxID {
				r.Permissions.BillingTaxID = append(r.Permissions.BillingTaxID, types.StringValue(string(v)))
			}
			r.Permissions.Blob = []types.String{}
			for _, v := range resp.Permissions.Blob {
				r.Permissions.Blob = append(r.Permissions.Blob, types.StringValue(string(v)))
			}
			r.Permissions.BlobStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.BlobStoreTokenSet {
				r.Permissions.BlobStoreTokenSet = append(r.Permissions.BlobStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.Budget = []types.String{}
			for _, v := range resp.Permissions.Budget {
				r.Permissions.Budget = append(r.Permissions.Budget, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifact = []types.String{}
			for _, v := range resp.Permissions.CacheArtifact {
				r.Permissions.CacheArtifact = append(r.Permissions.CacheArtifact, types.StringValue(string(v)))
			}
			r.Permissions.CacheArtifactUsageEvent = []types.String{}
			for _, v := range resp.Permissions.CacheArtifactUsageEvent {
				r.Permissions.CacheArtifactUsageEvent = append(r.Permissions.CacheArtifactUsageEvent, types.StringValue(string(v)))
			}
			r.Permissions.CodeChecks = []types.String{}
			for _, v := range resp.Permissions.CodeChecks {
				r.Permissions.CodeChecks = append(r.Permissions.CodeChecks, types.StringValue(string(v)))
			}
			r.Permissions.ConcurrentBuilds = []types.String{}
			for _, v := range resp.Permissions.ConcurrentBuilds {
				r.Permissions.ConcurrentBuilds = append(r.Permissions.ConcurrentBuilds, types.StringValue(string(v)))
			}
			r.Permissions.Connect = []types.String{}
			for _, v := range resp.Permissions.Connect {
				r.Permissions.Connect = append(r.Permissions.Connect, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfiguration = []types.String{}
			for _, v := range resp.Permissions.ConnectConfiguration {
				r.Permissions.ConnectConfiguration = append(r.Permissions.ConnectConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ConnectConfigurationLink = []types.String{}
			for _, v := range resp.Permissions.ConnectConfigurationLink {
				r.Permissions.ConnectConfigurationLink = append(r.Permissions.ConnectConfigurationLink, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheBillingSettings = []types.String{}
			for _, v := range resp.Permissions.DataCacheBillingSettings {
				r.Permissions.DataCacheBillingSettings = append(r.Permissions.DataCacheBillingSettings, types.StringValue(string(v)))
			}
			r.Permissions.DataCacheNamespace = []types.String{}
			for _, v := range resp.Permissions.DataCacheNamespace {
				r.Permissions.DataCacheNamespace = append(r.Permissions.DataCacheNamespace, types.StringValue(string(v)))
			}
			r.Permissions.Deployment = []types.String{}
			for _, v := range resp.Permissions.Deployment {
				r.Permissions.Deployment = append(r.Permissions.Deployment, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheck = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheck {
				r.Permissions.DeploymentCheck = append(r.Permissions.DeploymentCheck, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckPreview {
				r.Permissions.DeploymentCheckPreview = append(r.Permissions.DeploymentCheckPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentCheckReRunFromProductionBranch = []types.String{}
			for _, v := range resp.Permissions.DeploymentCheckReRunFromProductionBranch {
				r.Permissions.DeploymentCheckReRunFromProductionBranch = append(r.Permissions.DeploymentCheckReRunFromProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPreview = []types.String{}
			for _, v := range resp.Permissions.DeploymentPreview {
				r.Permissions.DeploymentPreview = append(r.Permissions.DeploymentPreview, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPrivate = []types.String{}
			for _, v := range resp.Permissions.DeploymentPrivate {
				r.Permissions.DeploymentPrivate = append(r.Permissions.DeploymentPrivate, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentProductionGit = []types.String{}
			for _, v := range resp.Permissions.DeploymentProductionGit {
				r.Permissions.DeploymentProductionGit = append(r.Permissions.DeploymentProductionGit, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentPromote = []types.String{}
			for _, v := range resp.Permissions.DeploymentPromote {
				r.Permissions.DeploymentPromote = append(r.Permissions.DeploymentPromote, types.StringValue(string(v)))
			}
			r.Permissions.DeploymentRollback = []types.String{}
			for _, v := range resp.Permissions.DeploymentRollback {
				r.Permissions.DeploymentRollback = append(r.Permissions.DeploymentRollback, types.StringValue(string(v)))
			}
			r.Permissions.Domain = []types.String{}
			for _, v := range resp.Permissions.Domain {
				r.Permissions.Domain = append(r.Permissions.Domain, types.StringValue(string(v)))
			}
			r.Permissions.DomainAcceptDelegation = []types.String{}
			for _, v := range resp.Permissions.DomainAcceptDelegation {
				r.Permissions.DomainAcceptDelegation = append(r.Permissions.DomainAcceptDelegation, types.StringValue(string(v)))
			}
			r.Permissions.DomainAuthCodes = []types.String{}
			for _, v := range resp.Permissions.DomainAuthCodes {
				r.Permissions.DomainAuthCodes = append(r.Permissions.DomainAuthCodes, types.StringValue(string(v)))
			}
			r.Permissions.DomainCertificate = []types.String{}
			for _, v := range resp.Permissions.DomainCertificate {
				r.Permissions.DomainCertificate = append(r.Permissions.DomainCertificate, types.StringValue(string(v)))
			}
			r.Permissions.DomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.DomainCheckConfig {
				r.Permissions.DomainCheckConfig = append(r.Permissions.DomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.DomainMove = []types.String{}
			for _, v := range resp.Permissions.DomainMove {
				r.Permissions.DomainMove = append(r.Permissions.DomainMove, types.StringValue(string(v)))
			}
			r.Permissions.DomainPurchase = []types.String{}
			for _, v := range resp.Permissions.DomainPurchase {
				r.Permissions.DomainPurchase = append(r.Permissions.DomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.DomainRecord = []types.String{}
			for _, v := range resp.Permissions.DomainRecord {
				r.Permissions.DomainRecord = append(r.Permissions.DomainRecord, types.StringValue(string(v)))
			}
			r.Permissions.DomainTransferIn = []types.String{}
			for _, v := range resp.Permissions.DomainTransferIn {
				r.Permissions.DomainTransferIn = append(r.Permissions.DomainTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfig = []types.String{}
			for _, v := range resp.Permissions.EdgeConfig {
				r.Permissions.EdgeConfig = append(r.Permissions.EdgeConfig, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigItem = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigItem {
				r.Permissions.EdgeConfigItem = append(r.Permissions.EdgeConfigItem, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigSchema = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigSchema {
				r.Permissions.EdgeConfigSchema = append(r.Permissions.EdgeConfigSchema, types.StringValue(string(v)))
			}
			r.Permissions.EdgeConfigToken = []types.String{}
			for _, v := range resp.Permissions.EdgeConfigToken {
				r.Permissions.EdgeConfigToken = append(r.Permissions.EdgeConfigToken, types.StringValue(string(v)))
			}
			r.Permissions.EndpointVerification = []types.String{}
			for _, v := range resp.Permissions.EndpointVerification {
				r.Permissions.EndpointVerification = append(r.Permissions.EndpointVerification, types.StringValue(string(v)))
			}
			r.Permissions.Environments = []types.String{}
			for _, v := range resp.Permissions.Environments {
				r.Permissions.Environments = append(r.Permissions.Environments, types.StringValue(string(v)))
			}
			r.Permissions.Event = []types.String{}
			for _, v := range resp.Permissions.Event {
				r.Permissions.Event = append(r.Permissions.Event, types.StringValue(string(v)))
			}
			r.Permissions.FileUpload = []types.String{}
			for _, v := range resp.Permissions.FileUpload {
				r.Permissions.FileUpload = append(r.Permissions.FileUpload, types.StringValue(string(v)))
			}
			r.Permissions.GitRepository = []types.String{}
			for _, v := range resp.Permissions.GitRepository {
				r.Permissions.GitRepository = append(r.Permissions.GitRepository, types.StringValue(string(v)))
			}
			r.Permissions.Integration = []types.String{}
			for _, v := range resp.Permissions.Integration {
				r.Permissions.Integration = append(r.Permissions.Integration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfiguration {
				r.Permissions.IntegrationConfiguration = append(r.Permissions.IntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationProjects = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationProjects {
				r.Permissions.IntegrationConfigurationProjects = append(r.Permissions.IntegrationConfigurationProjects, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationConfigurationTransfer = []types.String{}
			for _, v := range resp.Permissions.IntegrationConfigurationTransfer {
				r.Permissions.IntegrationConfigurationTransfer = append(r.Permissions.IntegrationConfigurationTransfer, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationEvent = []types.String{}
			for _, v := range resp.Permissions.IntegrationEvent {
				r.Permissions.IntegrationEvent = append(r.Permissions.IntegrationEvent, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationResourceSecrets = []types.String{}
			for _, v := range resp.Permissions.IntegrationResourceSecrets {
				r.Permissions.IntegrationResourceSecrets = append(r.Permissions.IntegrationResourceSecrets, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStore = []types.String{}
			for _, v := range resp.Permissions.IntegrationStore {
				r.Permissions.IntegrationStore = append(r.Permissions.IntegrationStore, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.IntegrationStoreTokenSet {
				r.Permissions.IntegrationStoreTokenSet = append(r.Permissions.IntegrationStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.IntegrationVercelConfigurationOverride = []types.String{}
			for _, v := range resp.Permissions.IntegrationVercelConfigurationOverride {
				r.Permissions.IntegrationVercelConfigurationOverride = append(r.Permissions.IntegrationVercelConfigurationOverride, types.StringValue(string(v)))
			}
			r.Permissions.IPBlocking = []types.String{}
			for _, v := range resp.Permissions.IPBlocking {
				r.Permissions.IPBlocking = append(r.Permissions.IPBlocking, types.StringValue(string(v)))
			}
			r.Permissions.Job = []types.String{}
			for _, v := range resp.Permissions.Job {
				r.Permissions.Job = append(r.Permissions.Job, types.StringValue(string(v)))
			}
			r.Permissions.JobGlobal = []types.String{}
			for _, v := range resp.Permissions.JobGlobal {
				r.Permissions.JobGlobal = append(r.Permissions.JobGlobal, types.StringValue(string(v)))
			}
			r.Permissions.LogDrain = []types.String{}
			for _, v := range resp.Permissions.LogDrain {
				r.Permissions.LogDrain = append(r.Permissions.LogDrain, types.StringValue(string(v)))
			}
			r.Permissions.Logs = []types.String{}
			for _, v := range resp.Permissions.Logs {
				r.Permissions.Logs = append(r.Permissions.Logs, types.StringValue(string(v)))
			}
			r.Permissions.LogsPreset = []types.String{}
			for _, v := range resp.Permissions.LogsPreset {
				r.Permissions.LogsPreset = append(r.Permissions.LogsPreset, types.StringValue(string(v)))
			}
			r.Permissions.MarketplaceBillingData = []types.String{}
			for _, v := range resp.Permissions.MarketplaceBillingData {
				r.Permissions.MarketplaceBillingData = append(r.Permissions.MarketplaceBillingData, types.StringValue(string(v)))
			}
			r.Permissions.Monitoring = []types.String{}
			for _, v := range resp.Permissions.Monitoring {
				r.Permissions.Monitoring = append(r.Permissions.Monitoring, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.MonitoringAlert {
				r.Permissions.MonitoringAlert = append(r.Permissions.MonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringChart = []types.String{}
			for _, v := range resp.Permissions.MonitoringChart {
				r.Permissions.MonitoringChart = append(r.Permissions.MonitoringChart, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringQuery = []types.String{}
			for _, v := range resp.Permissions.MonitoringQuery {
				r.Permissions.MonitoringQuery = append(r.Permissions.MonitoringQuery, types.StringValue(string(v)))
			}
			r.Permissions.MonitoringSettings = []types.String{}
			for _, v := range resp.Permissions.MonitoringSettings {
				r.Permissions.MonitoringSettings = append(r.Permissions.MonitoringSettings, types.StringValue(string(v)))
			}
			r.Permissions.NotificationCustomerBudget = []types.String{}
			for _, v := range resp.Permissions.NotificationCustomerBudget {
				r.Permissions.NotificationCustomerBudget = append(r.Permissions.NotificationCustomerBudget, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDeploymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationDeploymentFailed {
				r.Permissions.NotificationDeploymentFailed = append(r.Permissions.NotificationDeploymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainConfiguration = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainConfiguration {
				r.Permissions.NotificationDomainConfiguration = append(r.Permissions.NotificationDomainConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainExpire = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainExpire {
				r.Permissions.NotificationDomainExpire = append(r.Permissions.NotificationDomainExpire, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainMoved = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainMoved {
				r.Permissions.NotificationDomainMoved = append(r.Permissions.NotificationDomainMoved, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainPurchase = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainPurchase {
				r.Permissions.NotificationDomainPurchase = append(r.Permissions.NotificationDomainPurchase, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainRenewal = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainRenewal {
				r.Permissions.NotificationDomainRenewal = append(r.Permissions.NotificationDomainRenewal, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainTransfer = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainTransfer {
				r.Permissions.NotificationDomainTransfer = append(r.Permissions.NotificationDomainTransfer, types.StringValue(string(v)))
			}
			r.Permissions.NotificationDomainUnverified = []types.String{}
			for _, v := range resp.Permissions.NotificationDomainUnverified {
				r.Permissions.NotificationDomainUnverified = append(r.Permissions.NotificationDomainUnverified, types.StringValue(string(v)))
			}
			r.Permissions.NotificationMonitoringAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationMonitoringAlert {
				r.Permissions.NotificationMonitoringAlert = append(r.Permissions.NotificationMonitoringAlert, types.StringValue(string(v)))
			}
			r.Permissions.NotificationPaymentFailed = []types.String{}
			for _, v := range resp.Permissions.NotificationPaymentFailed {
				r.Permissions.NotificationPaymentFailed = append(r.Permissions.NotificationPaymentFailed, types.StringValue(string(v)))
			}
			r.Permissions.NotificationStatementOfReasons = []types.String{}
			for _, v := range resp.Permissions.NotificationStatementOfReasons {
				r.Permissions.NotificationStatementOfReasons = append(r.Permissions.NotificationStatementOfReasons, types.StringValue(string(v)))
			}
			r.Permissions.NotificationUsageAlert = []types.String{}
			for _, v := range resp.Permissions.NotificationUsageAlert {
				r.Permissions.NotificationUsageAlert = append(r.Permissions.NotificationUsageAlert, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Application = []types.String{}
			for _, v := range resp.Permissions.Oauth2Application {
				r.Permissions.Oauth2Application = append(r.Permissions.Oauth2Application, types.StringValue(string(v)))
			}
			r.Permissions.Oauth2Connection = []types.String{}
			for _, v := range resp.Permissions.Oauth2Connection {
				r.Permissions.Oauth2Connection = append(r.Permissions.Oauth2Connection, types.StringValue(string(v)))
			}
			r.Permissions.OpenTelemetryEndpoint = []types.String{}
			for _, v := range resp.Permissions.OpenTelemetryEndpoint {
				r.Permissions.OpenTelemetryEndpoint = append(r.Permissions.OpenTelemetryEndpoint, types.StringValue(string(v)))
			}
			r.Permissions.OptionsAllowlist = []types.String{}
			for _, v := range resp.Permissions.OptionsAllowlist {
				r.Permissions.OptionsAllowlist = append(r.Permissions.OptionsAllowlist, types.StringValue(string(v)))
			}
			r.Permissions.OwnEvent = []types.String{}
			for _, v := range resp.Permissions.OwnEvent {
				r.Permissions.OwnEvent = append(r.Permissions.OwnEvent, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtection = []types.String{}
			for _, v := range resp.Permissions.PasswordProtection {
				r.Permissions.PasswordProtection = append(r.Permissions.PasswordProtection, types.StringValue(string(v)))
			}
			r.Permissions.PasswordProtectionInvoiceItem = []types.String{}
			for _, v := range resp.Permissions.PasswordProtectionInvoiceItem {
				r.Permissions.PasswordProtectionInvoiceItem = append(r.Permissions.PasswordProtectionInvoiceItem, types.StringValue(string(v)))
			}
			r.Permissions.PaymentMethod = []types.String{}
			for _, v := range resp.Permissions.PaymentMethod {
				r.Permissions.PaymentMethod = append(r.Permissions.PaymentMethod, types.StringValue(string(v)))
			}
			r.Permissions.Permissions = []types.String{}
			for _, v := range resp.Permissions.Permissions {
				r.Permissions.Permissions = append(r.Permissions.Permissions, types.StringValue(string(v)))
			}
			r.Permissions.Postgres = []types.String{}
			for _, v := range resp.Permissions.Postgres {
				r.Permissions.Postgres = append(r.Permissions.Postgres, types.StringValue(string(v)))
			}
			r.Permissions.PostgresStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.PostgresStoreTokenSet {
				r.Permissions.PostgresStoreTokenSet = append(r.Permissions.PostgresStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.PreviewDeploymentSuffix = []types.String{}
			for _, v := range resp.Permissions.PreviewDeploymentSuffix {
				r.Permissions.PreviewDeploymentSuffix = append(r.Permissions.PreviewDeploymentSuffix, types.StringValue(string(v)))
			}
			r.Permissions.ProductionAliasProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProductionAliasProtectionBypass {
				r.Permissions.ProductionAliasProtectionBypass = append(r.Permissions.ProductionAliasProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.Project = []types.String{}
			for _, v := range resp.Permissions.Project {
				r.Permissions.Project = append(r.Permissions.Project, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAccessGroup = []types.String{}
			for _, v := range resp.Permissions.ProjectAccessGroup {
				r.Permissions.ProjectAccessGroup = append(r.Permissions.ProjectAccessGroup, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsSampling = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsSampling {
				r.Permissions.ProjectAnalyticsSampling = append(r.Permissions.ProjectAnalyticsSampling, types.StringValue(string(v)))
			}
			r.Permissions.ProjectAnalyticsUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectAnalyticsUsage {
				r.Permissions.ProjectAnalyticsUsage = append(r.Permissions.ProjectAnalyticsUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentExpiration = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentExpiration {
				r.Permissions.ProjectDeploymentExpiration = append(r.Permissions.ProjectDeploymentExpiration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDeploymentHook = []types.String{}
			for _, v := range resp.Permissions.ProjectDeploymentHook {
				r.Permissions.ProjectDeploymentHook = append(r.Permissions.ProjectDeploymentHook, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomain = []types.String{}
			for _, v := range resp.Permissions.ProjectDomain {
				r.Permissions.ProjectDomain = append(r.Permissions.ProjectDomain, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainCheckConfig = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainCheckConfig {
				r.Permissions.ProjectDomainCheckConfig = append(r.Permissions.ProjectDomainCheckConfig, types.StringValue(string(v)))
			}
			r.Permissions.ProjectDomainMove = []types.String{}
			for _, v := range resp.Permissions.ProjectDomainMove {
				r.Permissions.ProjectDomainMove = append(r.Permissions.ProjectDomainMove, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVars = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVars {
				r.Permissions.ProjectEnvVars = append(r.Permissions.ProjectEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsProduction {
				r.Permissions.ProjectEnvVarsProduction = append(r.Permissions.ProjectEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.ProjectEnvVarsUnownedByIntegration = []types.String{}
			for _, v := range resp.Permissions.ProjectEnvVarsUnownedByIntegration {
				r.Permissions.ProjectEnvVarsUnownedByIntegration = append(r.Permissions.ProjectEnvVarsUnownedByIntegration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectID = []types.String{}
			for _, v := range resp.Permissions.ProjectID {
				r.Permissions.ProjectID = append(r.Permissions.ProjectID, types.StringValue(string(v)))
			}
			r.Permissions.ProjectIntegrationConfiguration = []types.String{}
			for _, v := range resp.Permissions.ProjectIntegrationConfiguration {
				r.Permissions.ProjectIntegrationConfiguration = append(r.Permissions.ProjectIntegrationConfiguration, types.StringValue(string(v)))
			}
			r.Permissions.ProjectLink = []types.String{}
			for _, v := range resp.Permissions.ProjectLink {
				r.Permissions.ProjectLink = append(r.Permissions.ProjectLink, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMember = []types.String{}
			for _, v := range resp.Permissions.ProjectMember {
				r.Permissions.ProjectMember = append(r.Permissions.ProjectMember, types.StringValue(string(v)))
			}
			r.Permissions.ProjectMonitoring = []types.String{}
			for _, v := range resp.Permissions.ProjectMonitoring {
				r.Permissions.ProjectMonitoring = append(r.Permissions.ProjectMonitoring, types.StringValue(string(v)))
			}
			r.Permissions.ProjectPermissions = []types.String{}
			for _, v := range resp.Permissions.ProjectPermissions {
				r.Permissions.ProjectPermissions = append(r.Permissions.ProjectPermissions, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProductionBranch = []types.String{}
			for _, v := range resp.Permissions.ProjectProductionBranch {
				r.Permissions.ProjectProductionBranch = append(r.Permissions.ProjectProductionBranch, types.StringValue(string(v)))
			}
			r.Permissions.ProjectProtectionBypass = []types.String{}
			for _, v := range resp.Permissions.ProjectProtectionBypass {
				r.Permissions.ProjectProtectionBypass = append(r.Permissions.ProjectProtectionBypass, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCase = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCase {
				r.Permissions.ProjectSupportCase = append(r.Permissions.ProjectSupportCase, types.StringValue(string(v)))
			}
			r.Permissions.ProjectSupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.ProjectSupportCaseComment {
				r.Permissions.ProjectSupportCaseComment = append(r.Permissions.ProjectSupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransfer = []types.String{}
			for _, v := range resp.Permissions.ProjectTransfer {
				r.Permissions.ProjectTransfer = append(r.Permissions.ProjectTransfer, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferIn = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferIn {
				r.Permissions.ProjectTransferIn = append(r.Permissions.ProjectTransferIn, types.StringValue(string(v)))
			}
			r.Permissions.ProjectTransferOut = []types.String{}
			for _, v := range resp.Permissions.ProjectTransferOut {
				r.Permissions.ProjectTransferOut = append(r.Permissions.ProjectTransferOut, types.StringValue(string(v)))
			}
			r.Permissions.ProjectUsage = []types.String{}
			for _, v := range resp.Permissions.ProjectUsage {
				r.Permissions.ProjectUsage = append(r.Permissions.ProjectUsage, types.StringValue(string(v)))
			}
			r.Permissions.ProTrialOnboarding = []types.String{}
			for _, v := range resp.Permissions.ProTrialOnboarding {
				r.Permissions.ProTrialOnboarding = append(r.Permissions.ProTrialOnboarding, types.StringValue(string(v)))
			}
			r.Permissions.RateLimit = []types.String{}
			for _, v := range resp.Permissions.RateLimit {
				r.Permissions.RateLimit = append(r.Permissions.RateLimit, types.StringValue(string(v)))
			}
			r.Permissions.Redis = []types.String{}
			for _, v := range resp.Permissions.Redis {
				r.Permissions.Redis = append(r.Permissions.Redis, types.StringValue(string(v)))
			}
			r.Permissions.RedisStoreTokenSet = []types.String{}
			for _, v := range resp.Permissions.RedisStoreTokenSet {
				r.Permissions.RedisStoreTokenSet = append(r.Permissions.RedisStoreTokenSet, types.StringValue(string(v)))
			}
			r.Permissions.RemoteCaching = []types.String{}
			for _, v := range resp.Permissions.RemoteCaching {
				r.Permissions.RemoteCaching = append(r.Permissions.RemoteCaching, types.StringValue(string(v)))
			}
			r.Permissions.Repository = []types.String{}
			for _, v := range resp.Permissions.Repository {
				r.Permissions.Repository = append(r.Permissions.Repository, types.StringValue(string(v)))
			}
			r.Permissions.SamlConfig = []types.String{}
			for _, v := range resp.Permissions.SamlConfig {
				r.Permissions.SamlConfig = append(r.Permissions.SamlConfig, types.StringValue(string(v)))
			}
			r.Permissions.SeawallConfig = []types.String{}
			for _, v := range resp.Permissions.SeawallConfig {
				r.Permissions.SeawallConfig = append(r.Permissions.SeawallConfig, types.StringValue(string(v)))
			}
			r.Permissions.Secret = []types.String{}
			for _, v := range resp.Permissions.Secret {
				r.Permissions.Secret = append(r.Permissions.Secret, types.StringValue(string(v)))
			}
			r.Permissions.SensitiveEnvironmentVariablePolicy = []types.String{}
			for _, v := range resp.Permissions.SensitiveEnvironmentVariablePolicy {
				r.Permissions.SensitiveEnvironmentVariablePolicy = append(r.Permissions.SensitiveEnvironmentVariablePolicy, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarConnection = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarConnection {
				r.Permissions.SharedEnvVarConnection = append(r.Permissions.SharedEnvVarConnection, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVars = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVars {
				r.Permissions.SharedEnvVars = append(r.Permissions.SharedEnvVars, types.StringValue(string(v)))
			}
			r.Permissions.SharedEnvVarsProduction = []types.String{}
			for _, v := range resp.Permissions.SharedEnvVarsProduction {
				r.Permissions.SharedEnvVarsProduction = append(r.Permissions.SharedEnvVarsProduction, types.StringValue(string(v)))
			}
			r.Permissions.SkewProtection = []types.String{}
			for _, v := range resp.Permissions.SkewProtection {
				r.Permissions.SkewProtection = append(r.Permissions.SkewProtection, types.StringValue(string(v)))
			}
			r.Permissions.Space = []types.String{}
			for _, v := range resp.Permissions.Space {
				r.Permissions.Space = append(r.Permissions.Space, types.StringValue(string(v)))
			}
			r.Permissions.SpaceRun = []types.String{}
			for _, v := range resp.Permissions.SpaceRun {
				r.Permissions.SpaceRun = append(r.Permissions.SpaceRun, types.StringValue(string(v)))
			}
			r.Permissions.SupportCase = []types.String{}
			for _, v := range resp.Permissions.SupportCase {
				r.Permissions.SupportCase = append(r.Permissions.SupportCase, types.StringValue(string(v)))
			}
			r.Permissions.SupportCaseComment = []types.String{}
			for _, v := range resp.Permissions.SupportCaseComment {
				r.Permissions.SupportCaseComment = append(r.Permissions.SupportCaseComment, types.StringValue(string(v)))
			}
			r.Permissions.Team = []types.String{}
			for _, v := range resp.Permissions.Team {
				r.Permissions.Team = append(r.Permissions.Team, types.StringValue(string(v)))
			}
			r.Permissions.TeamAccessRequest = []types.String{}
			for _, v := range resp.Permissions.TeamAccessRequest {
				r.Permissions.TeamAccessRequest = append(r.Permissions.TeamAccessRequest, types.StringValue(string(v)))
			}
			r.Permissions.TeamFellowMembership = []types.String{}
			for _, v := range resp.Permissions.TeamFellowMembership {
				r.Permissions.TeamFellowMembership = append(r.Permissions.TeamFellowMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamInvite = []types.String{}
			for _, v := range resp.Permissions.TeamInvite {
				r.Permissions.TeamInvite = append(r.Permissions.TeamInvite, types.StringValue(string(v)))
			}
			r.Permissions.TeamInviteCode = []types.String{}
			for _, v := range resp.Permissions.TeamInviteCode {
				r.Permissions.TeamInviteCode = append(r.Permissions.TeamInviteCode, types.StringValue(string(v)))
			}
			r.Permissions.TeamJoin = []types.String{}
			for _, v := range resp.Permissions.TeamJoin {
				r.Permissions.TeamJoin = append(r.Permissions.TeamJoin, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembership = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembership {
				r.Permissions.TeamOwnMembership = append(r.Permissions.TeamOwnMembership, types.StringValue(string(v)))
			}
			r.Permissions.TeamOwnMembershipDisconnectSAML = []types.String{}
			for _, v := range resp.Permissions.TeamOwnMembershipDisconnectSAML {
				r.Permissions.TeamOwnMembershipDisconnectSAML = append(r.Permissions.TeamOwnMembershipDisconnectSAML, types.StringValue(string(v)))
			}
			r.Permissions.Token = []types.String{}
			for _, v := range resp.Permissions.Token {
				r.Permissions.Token = append(r.Permissions.Token, types.StringValue(string(v)))
			}
			r.Permissions.TrustedIps = []types.String{}
			for _, v := range resp.Permissions.TrustedIps {
				r.Permissions.TrustedIps = append(r.Permissions.TrustedIps, types.StringValue(string(v)))
			}
			r.Permissions.Usage = []types.String{}
			for _, v := range resp.Permissions.Usage {
				r.Permissions.Usage = append(r.Permissions.Usage, types.StringValue(string(v)))
			}
			r.Permissions.UsageCycle = []types.String{}
			for _, v := range resp.Permissions.UsageCycle {
				r.Permissions.UsageCycle = append(r.Permissions.UsageCycle, types.StringValue(string(v)))
			}
			r.Permissions.User = []types.String{}
			for _, v := range resp.Permissions.User {
				r.Permissions.User = append(r.Permissions.User, types.StringValue(string(v)))
			}
			r.Permissions.UserConnection = []types.String{}
			for _, v := range resp.Permissions.UserConnection {
				r.Permissions.UserConnection = append(r.Permissions.UserConnection, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalytics = []types.String{}
			for _, v := range resp.Permissions.WebAnalytics {
				r.Permissions.WebAnalytics = append(r.Permissions.WebAnalytics, types.StringValue(string(v)))
			}
			r.Permissions.WebAnalyticsPlan = []types.String{}
			for _, v := range resp.Permissions.WebAnalyticsPlan {
				r.Permissions.WebAnalyticsPlan = append(r.Permissions.WebAnalyticsPlan, types.StringValue(string(v)))
			}
			r.Permissions.WebAuthn = []types.String{}
			for _, v := range resp.Permissions.WebAuthn {
				r.Permissions.WebAuthn = append(r.Permissions.WebAuthn, types.StringValue(string(v)))
			}
			r.Permissions.Webhook = []types.String{}
			for _, v := range resp.Permissions.Webhook {
				r.Permissions.Webhook = append(r.Permissions.Webhook, types.StringValue(string(v)))
			}
			r.Permissions.WebhookEvent = []types.String{}
			for _, v := range resp.Permissions.WebhookEvent {
				r.Permissions.WebhookEvent = append(r.Permissions.WebhookEvent, types.StringValue(string(v)))
			}
		}
		r.ProductionDeploymentsFastLane = types.BoolPointerValue(resp.ProductionDeploymentsFastLane)
		if len(resp.ProtectionBypass) > 0 {
			r.ProtectionBypass = make(map[string]tfTypes.GetProjectProtectionBypass)
			for getProjectProtectionBypassKey, getProjectProtectionBypassValue := range resp.ProtectionBypass {
				var getProjectProtectionBypassResult tfTypes.GetProjectProtectionBypass
				getProjectProtectionBypassResult.CreatedAt = types.NumberValue(big.NewFloat(float64(getProjectProtectionBypassValue.CreatedAt)))
				getProjectProtectionBypassResult.CreatedBy = types.StringValue(getProjectProtectionBypassValue.CreatedBy)
				getProjectProtectionBypassResult.Scope = types.StringValue(string(getProjectProtectionBypassValue.Scope))
				r.ProtectionBypass[getProjectProtectionBypassKey] = getProjectProtectionBypassResult
			}
		}
		r.PublicSource = types.BoolPointerValue(resp.PublicSource)
		r.RootDirectory = types.StringPointerValue(resp.RootDirectory)
		if resp.Security == nil {
			r.Security = nil
		} else {
			r.Security = &tfTypes.GetProjectSecurity{}
			if resp.Security.AttackModeActiveUntil != nil {
				r.Security.AttackModeActiveUntil = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeActiveUntil)))
			} else {
				r.Security.AttackModeActiveUntil = types.NumberNull()
			}
			r.Security.AttackModeEnabled = types.BoolPointerValue(resp.Security.AttackModeEnabled)
			if resp.Security.AttackModeUpdatedAt != nil {
				r.Security.AttackModeUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.AttackModeUpdatedAt)))
			} else {
				r.Security.AttackModeUpdatedAt = types.NumberNull()
			}
			if resp.Security.FirewallConfigVersion != nil {
				r.Security.FirewallConfigVersion = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallConfigVersion)))
			} else {
				r.Security.FirewallConfigVersion = types.NumberNull()
			}
			r.Security.FirewallEnabled = types.BoolPointerValue(resp.Security.FirewallEnabled)
			r.Security.FirewallSeawallEnabled = types.BoolPointerValue(resp.Security.FirewallSeawallEnabled)
			if resp.Security.FirewallUpdatedAt != nil {
				r.Security.FirewallUpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.Security.FirewallUpdatedAt)))
			} else {
				r.Security.FirewallUpdatedAt = types.NumberNull()
			}
			r.Security.Ja3Enabled = types.BoolPointerValue(resp.Security.Ja3Enabled)
			r.Security.Ja4Enabled = types.BoolPointerValue(resp.Security.Ja4Enabled)
		}
		r.ServerlessFunctionRegion = types.StringPointerValue(resp.ServerlessFunctionRegion)
		r.ServerlessFunctionZeroConfigFailover = types.BoolPointerValue(resp.ServerlessFunctionZeroConfigFailover)
		r.SkewProtectionBoundaryAt = types.Int64PointerValue(resp.SkewProtectionBoundaryAt)
		r.SkewProtectionMaxAge = types.Int64PointerValue(resp.SkewProtectionMaxAge)
		r.SkipGitConnectDuringLink = types.BoolPointerValue(resp.SkipGitConnectDuringLink)
		r.SourceFilesOutsideRootDirectory = types.BoolPointerValue(resp.SourceFilesOutsideRootDirectory)
		if resp.SpeedInsights == nil {
			r.SpeedInsights = nil
		} else {
			r.SpeedInsights = &tfTypes.GetProjectSpeedInsights{}
			if resp.SpeedInsights.CanceledAt != nil {
				r.SpeedInsights.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.CanceledAt)))
			} else {
				r.SpeedInsights.CanceledAt = types.NumberNull()
			}
			if resp.SpeedInsights.DisabledAt != nil {
				r.SpeedInsights.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.DisabledAt)))
			} else {
				r.SpeedInsights.DisabledAt = types.NumberNull()
			}
			if resp.SpeedInsights.EnabledAt != nil {
				r.SpeedInsights.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.EnabledAt)))
			} else {
				r.SpeedInsights.EnabledAt = types.NumberNull()
			}
			r.SpeedInsights.HasData = types.BoolPointerValue(resp.SpeedInsights.HasData)
			r.SpeedInsights.ID = types.StringValue(resp.SpeedInsights.ID)
			if resp.SpeedInsights.PaidAt != nil {
				r.SpeedInsights.PaidAt = types.NumberValue(big.NewFloat(float64(*resp.SpeedInsights.PaidAt)))
			} else {
				r.SpeedInsights.PaidAt = types.NumberNull()
			}
		}
		if resp.SsoProtection == nil {
			r.SsoProtection = nil
		} else {
			r.SsoProtection = &tfTypes.SsoProtection{}
			r.SsoProtection.DeploymentType = types.StringValue(string(resp.SsoProtection.DeploymentType))
		}
		if len(resp.Targets) > 0 {
			r.Targets = make(map[string]tfTypes.GetProjectOidcTokenClaims)
			for getProjectTargetsKey, getProjectTargetsValue := range resp.Targets {
				var getProjectTargetsResult tfTypes.GetProjectOidcTokenClaims
				if getProjectTargetsValue.Str != nil {
					getProjectTargetsResult.Str = types.StringPointerValue(getProjectTargetsValue.Str)
				}
				if getProjectTargetsValue.ArrayOfStr != nil {
					getProjectTargetsResult.ArrayOfStr = []types.String{}
					for _, v := range getProjectTargetsValue.ArrayOfStr {
						getProjectTargetsResult.ArrayOfStr = append(getProjectTargetsResult.ArrayOfStr, types.StringValue(v))
					}
				}
				r.Targets[getProjectTargetsKey] = getProjectTargetsResult
			}
		}
		if resp.TransferCompletedAt != nil {
			r.TransferCompletedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferCompletedAt)))
		} else {
			r.TransferCompletedAt = types.NumberNull()
		}
		r.TransferredFromAccountID = types.StringPointerValue(resp.TransferredFromAccountID)
		if resp.TransferStartedAt != nil {
			r.TransferStartedAt = types.NumberValue(big.NewFloat(float64(*resp.TransferStartedAt)))
		} else {
			r.TransferStartedAt = types.NumberNull()
		}
		r.TransferToAccountID = types.StringPointerValue(resp.TransferToAccountID)
		if resp.TrustedIps == nil {
			r.TrustedIps = nil
		} else {
			r.TrustedIps = &tfTypes.TrustedIps{}
			r.TrustedIps.Addresses = []tfTypes.Addresses{}
			if len(r.TrustedIps.Addresses) > len(resp.TrustedIps.Addresses) {
				r.TrustedIps.Addresses = r.TrustedIps.Addresses[:len(resp.TrustedIps.Addresses)]
			}
			for addressesCount, addressesItem := range resp.TrustedIps.Addresses {
				var addresses1 tfTypes.Addresses
				addresses1.Note = types.StringPointerValue(addressesItem.Note)
				addresses1.Value = types.StringValue(addressesItem.Value)
				if addressesCount+1 > len(r.TrustedIps.Addresses) {
					r.TrustedIps.Addresses = append(r.TrustedIps.Addresses, addresses1)
				} else {
					r.TrustedIps.Addresses[addressesCount].Note = addresses1.Note
					r.TrustedIps.Addresses[addressesCount].Value = addresses1.Value
				}
			}
			r.TrustedIps.DeploymentType = types.StringValue(string(resp.TrustedIps.DeploymentType))
			r.TrustedIps.ProtectionMode = types.StringValue(string(resp.TrustedIps.ProtectionMode))
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.NumberValue(big.NewFloat(float64(*resp.UpdatedAt)))
		} else {
			r.UpdatedAt = types.NumberNull()
		}
		if resp.WebAnalytics == nil {
			r.WebAnalytics = nil
		} else {
			r.WebAnalytics = &tfTypes.GetProjectWebAnalytics{}
			if resp.WebAnalytics.CanceledAt != nil {
				r.WebAnalytics.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.CanceledAt)))
			} else {
				r.WebAnalytics.CanceledAt = types.NumberNull()
			}
			if resp.WebAnalytics.DisabledAt != nil {
				r.WebAnalytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.DisabledAt)))
			} else {
				r.WebAnalytics.DisabledAt = types.NumberNull()
			}
			if resp.WebAnalytics.EnabledAt != nil {
				r.WebAnalytics.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.WebAnalytics.EnabledAt)))
			} else {
				r.WebAnalytics.EnabledAt = types.NumberNull()
			}
			r.WebAnalytics.HasData = types.BoolPointerValue(resp.WebAnalytics.HasData)
			r.WebAnalytics.ID = types.StringValue(resp.WebAnalytics.ID)
		}
	}
}
