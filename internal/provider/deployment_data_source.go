// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/zchee/terraform-provider-vercel/internal/provider/types"
	"github.com/zchee/terraform-provider-vercel/internal/sdk"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DeploymentDataSource{}
var _ datasource.DataSourceWithConfigure = &DeploymentDataSource{}

func NewDeploymentDataSource() datasource.DataSource {
	return &DeploymentDataSource{}
}

// DeploymentDataSource is the data source implementation.
type DeploymentDataSource struct {
	client *sdk.Vercel
}

// DeploymentDataSourceModel describes the data model.
type DeploymentDataSourceModel struct {
	AliasAssigned           types.Bool              `tfsdk:"alias_assigned"`
	AliasFinal              types.String            `tfsdk:"alias_final"`
	AutoAssignCustomDomains types.Bool              `tfsdk:"auto_assign_custom_domains"`
	ErrorCode               types.String            `tfsdk:"error_code"`
	ErrorLink               types.String            `tfsdk:"error_link"`
	ErrorMessage            types.String            `tfsdk:"error_message"`
	ErrorStep               types.String            `tfsdk:"error_step"`
	ID                      types.String            `tfsdk:"id"`
	Name                    types.String            `tfsdk:"name"`
	One                     *tfTypes.GetDeployment1 `tfsdk:"one" tfPlanOnly:"true"`
	PreviewCommentsEnabled  types.Bool              `tfsdk:"preview_comments_enabled"`
	ProjectID               types.String            `tfsdk:"project_id"`
	Public                  types.Bool              `tfsdk:"public"`
	Slug                    types.String            `tfsdk:"slug"`
	TeamID                  types.String            `tfsdk:"team_id"`
	Two                     *tfTypes.GetDeployment2 `tfsdk:"two" tfPlanOnly:"true"`
	URL                     types.String            `tfsdk:"url"`
	WithGitRepoInfo         types.String            `tfsdk:"with_git_repo_info"`
}

// Metadata returns the data source type name.
func (r *DeploymentDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_deployment"
}

// Schema defines the schema for the data source.
func (r *DeploymentDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Deployment DataSource",

		Attributes: map[string]schema.Attribute{
			"alias_assigned": schema.BoolAttribute{
				Computed:    true,
				Description: `A boolean that will be true when the aliases from the alias property were assigned successfully`,
			},
			"alias_final": schema.StringAttribute{
				Computed: true,
			},
			"auto_assign_custom_domains": schema.BoolAttribute{
				Computed: true,
			},
			"error_code": schema.StringAttribute{
				Computed: true,
			},
			"error_link": schema.StringAttribute{
				Computed: true,
			},
			"error_message": schema.StringAttribute{
				Computed: true,
			},
			"error_step": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `A string holding the unique ID of the deployment`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the project associated with the deployment at the time that the deployment was created`,
			},
			"one": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"alias": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation`,
					},
					"alias_assigned": schema.BoolAttribute{
						Computed:    true,
						Description: `A boolean that will be true when the aliases from the alias property were assigned successfully`,
					},
					"alias_assigned_at": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"number": schema.NumberAttribute{
								Computed: true,
							},
							"boolean": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"alias_error": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"code": schema.StringAttribute{
								Computed: true,
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `An object that will contain a ` + "`" + `code` + "`" + ` and a ` + "`" + `message` + "`" + ` when the aliasing fails, otherwise the value will be ` + "`" + `null` + "`" + ``,
					},
					"alias_final": schema.StringAttribute{
						Computed: true,
					},
					"alias_warning": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"action": schema.StringAttribute{
								Computed: true,
							},
							"code": schema.StringAttribute{
								Computed: true,
							},
							"link": schema.StringAttribute{
								Computed: true,
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"auto_assign_custom_domains": schema.BoolAttribute{
						Computed: true,
					},
					"automatic_aliases": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"booted_at": schema.NumberAttribute{
						Computed: true,
					},
					"build": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"env": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The keys of the environment variables that were assigned during the build phase.`,
							},
						},
					},
					"build_error_at": schema.NumberAttribute{
						Computed: true,
					},
					"building_at": schema.NumberAttribute{
						Computed: true,
					},
					"canceled_at": schema.NumberAttribute{
						Computed: true,
					},
					"checks_conclusion": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["succeeded", "failed", "skipped", "canceled"]`,
					},
					"checks_state": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["registered", "running", "completed"]`,
					},
					"connect_builds_enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `The flag saying if Vercel Connect configuration is used for builds`,
					},
					"connect_configuration_id": schema.StringAttribute{
						Computed:    true,
						Description: `The ID of Vercel Connect configuration used for this deployment`,
					},
					"created_at": schema.NumberAttribute{
						Computed:    true,
						Description: `A number containing the date when the deployment was created in milliseconds`,
					},
					"created_in": schema.StringAttribute{
						Computed:    true,
						Description: `The region where the deployment was first created`,
					},
					"creator": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `The avatar of the user that created the deployment`,
							},
							"uid": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the user that created the deployment`,
							},
							"username": schema.StringAttribute{
								Computed:    true,
								Description: `The username of the user that created the deployment`,
							},
						},
						Description: `Information about the deployment creator`,
					},
					"crons": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"path": schema.StringAttribute{
									Computed: true,
								},
								"schedule": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.`,
					},
					"env": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The keys of the environment variables that were assigned during runtime`,
					},
					"error_code": schema.StringAttribute{
						Computed: true,
					},
					"error_link": schema.StringAttribute{
						Computed: true,
					},
					"error_message": schema.StringAttribute{
						Computed: true,
					},
					"error_step": schema.StringAttribute{
						Computed: true,
					},
					"functions": schema.MapNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"exclude_files": schema.StringAttribute{
									Computed: true,
								},
								"include_files": schema.StringAttribute{
									Computed: true,
								},
								"max_duration": schema.NumberAttribute{
									Computed: true,
								},
								"memory": schema.NumberAttribute{
									Computed: true,
								},
								"runtime": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `An object used to configure your Serverless Functions`,
					},
					"git_repo": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"one": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"default_branch": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"owner_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["team", "user"]`,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"private": schema.BoolAttribute{
										Computed: true,
									},
									"project_id": schema.NumberAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["gitlab"]`,
									},
									"url": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"two": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"default_branch": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"org": schema.StringAttribute{
										Computed: true,
									},
									"owner_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["team", "user"]`,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"private": schema.BoolAttribute{
										Computed: true,
									},
									"repo": schema.StringAttribute{
										Computed: true,
									},
									"repo_id": schema.NumberAttribute{
										Computed: true,
									},
									"repo_owner_id": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"three": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"default_branch": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"owner": schema.StringAttribute{
										Computed: true,
									},
									"owner_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["team", "user"]`,
									},
									"path": schema.StringAttribute{
										Computed: true,
									},
									"private": schema.BoolAttribute{
										Computed: true,
									},
									"repo_uuid": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
									"workspace_uuid": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"git_source": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"one": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_id": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"number": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"two": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"org": schema.StringAttribute{
										Computed: true,
									},
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"three": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"project_id": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"number": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["gitlab"]`,
									},
								},
							},
							"four": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_uuid": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
									"workspace_uuid": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"five": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"owner": schema.StringAttribute{
										Computed: true,
									},
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
								},
							},
							"six": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"git_url": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["custom"]`,
									},
								},
							},
							"seven": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"org": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo": schema.StringAttribute{
										Computed: true,
									},
									"repo_id": schema.NumberAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"eight": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"project_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["gitlab"]`,
									},
								},
							},
							"nine": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"owner": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_uuid": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
									"workspace_uuid": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `A string holding the unique ID of the deployment`,
					},
					"inspector_url": schema.StringAttribute{
						Computed:    true,
						Description: `Vercel URL to inspect the deployment.`,
					},
					"is_in_concurrent_builds_queue": schema.BoolAttribute{
						Computed:    true,
						Description: `Is the deployment currently queued waiting for a Concurrent Build Slot to be available`,
					},
					"lambdas": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.NumberAttribute{
									Computed: true,
								},
								"entrypoint": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"output": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"function_name": schema.StringAttribute{
												Computed: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"ready_state": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["BUILDING", "ERROR", "INITIALIZING", "READY"]`,
								},
								"ready_state_at": schema.NumberAttribute{
									Computed: true,
								},
							},
						},
					},
					"meta": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object containing the deployment's metadata`,
					},
					"monorepo_manager": schema.StringAttribute{
						Computed:    true,
						Description: `An monorepo manager that was used for the deployment`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the project associated with the deployment at the time that the deployment was created`,
					},
					"owner_id": schema.StringAttribute{
						Computed:    true,
						Description: `The unique ID of the user or team the deployment belongs to`,
					},
					"passive_connect_configuration_id": schema.StringAttribute{
						Computed:    true,
						Description: `The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.`,
					},
					"passive_regions": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"plan": schema.StringAttribute{
						Computed:    true,
						Description: `The pricing plan the deployment was made under. must be one of ["pro", "enterprise", "hobby"]`,
					},
					"preview_comments_enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not preview comments are enabled for the deployment`,
					},
					"project": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"framework": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `The public project information associated with the deployment.`,
					},
					"project_id": schema.StringAttribute{
						Computed:    true,
						Description: `The ID of the project the deployment is associated with`,
					},
					"public": schema.BoolAttribute{
						Computed:    true,
						Description: `A boolean representing if the deployment is public or not. By default this is ` + "`" + `false` + "`" + ``,
					},
					"ready_state": schema.StringAttribute{
						Computed:    true,
						Description: `The state of the deployment depending on the process of deploying, or if it is ready or in an error state. must be one of ["QUEUED", "BUILDING", "ERROR", "INITIALIZING", "READY", "CANCELED"]`,
					},
					"ready_substate": schema.StringAttribute{
						Computed:    true,
						Description: `The substate of the deployment when the state is "READY". must be one of ["STAGED", "PROMOTED"]`,
					},
					"regions": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The regions the deployment exists in`,
					},
					"routes": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"one": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"case_sensitive": schema.BoolAttribute{
											Computed: true,
										},
										"check": schema.BoolAttribute{
											Computed: true,
										},
										"continue": schema.BoolAttribute{
											Computed: true,
										},
										"dest": schema.StringAttribute{
											Computed: true,
										},
										"has": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"one": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["host"]`,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"two": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"key": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["header", "cookie", "query"]`,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"headers": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"important": schema.BoolAttribute{
											Computed: true,
										},
										"locale": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"cookie": schema.StringAttribute{
													Computed: true,
												},
												"redirect": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
											},
										},
										"methods": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"middleware": schema.NumberAttribute{
											Computed:    true,
											Description: `A middleware index in the ` + "`" + `middleware` + "`" + ` key under the build result`,
										},
										"middleware_path": schema.StringAttribute{
											Computed:    true,
											Description: `A middleware key within the ` + "`" + `output` + "`" + ` key under the build result. Overrides a ` + "`" + `middleware` + "`" + ` definition.`,
										},
										"middleware_raw_src": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `The original middleware matchers.`,
										},
										"missing": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"one": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["host"]`,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"two": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"key": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["header", "cookie", "query"]`,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"override": schema.BoolAttribute{
											Computed: true,
										},
										"src": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.NumberAttribute{
											Computed: true,
										},
									},
									Description: `A list of routes objects used to rewrite paths to point towards other internal or external paths`,
								},
								"two": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"dest": schema.StringAttribute{
											Computed: true,
										},
										"handle": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["error", "filesystem", "hit", "miss", "rewrite", "resource"]`,
										},
										"src": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.NumberAttribute{
											Computed: true,
										},
									},
									Description: `A list of routes objects used to rewrite paths to point towards other internal or external paths`,
								},
								"three": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"continue": schema.BoolAttribute{
											Computed: true,
										},
										"middleware": schema.NumberAttribute{
											Computed: true,
										},
										"src": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `A list of routes objects used to rewrite paths to point towards other internal or external paths`,
								},
							},
						},
						Description: `A list of routes objects used to rewrite paths to point towards other internal or external paths`,
					},
					"source": schema.StringAttribute{
						Computed:    true,
						Description: `Where was the deployment created from. must be one of ["api-trigger-git-deploy", "cli", "clone/repo", "git", "import", "import/repo"]`,
					},
					"target": schema.StringAttribute{
						Computed:    true,
						Description: `If defined, either ` + "`" + `staging` + "`" + ` if a staging alias in the format ` + "`" + `<project>.<team>.now.sh` + "`" + ` was assigned upon creation, or ` + "`" + `production` + "`" + ` if the aliases from ` + "`" + `alias` + "`" + ` were assigned. must be one of ["staging", "production"]`,
					},
					"team": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `The avatar of the team owner`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the team owner`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `The name of the team owner`,
							},
							"slug": schema.StringAttribute{
								Computed:    true,
								Description: `The slug of the team owner`,
							},
						},
						Description: `The team that owns the deployment if any`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["LAMBDAS"]`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `A string with the unique URL of the deployment`,
					},
					"user_aliases": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An array of domains that were provided by the user when creating the Deployment.`,
					},
					"version": schema.NumberAttribute{
						Computed:    true,
						Description: `The platform version that was used to create the deployment.`,
					},
				},
				Description: `The deployment including both public and private information`,
			},
			"preview_comments_enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether or not preview comments are enabled for the deployment`,
			},
			"project_id": schema.StringAttribute{
				Required:    true,
				Description: `The unique identifier or hostname of the deployment.`,
			},
			"public": schema.BoolAttribute{
				Computed:    true,
				Description: `A boolean representing if the deployment is public or not. By default this is ` + "`" + `false` + "`" + ``,
			},
			"slug": schema.StringAttribute{
				Optional:    true,
				Description: `The Team slug to perform the request on behalf of.`,
			},
			"team_id": schema.StringAttribute{
				Optional:    true,
				Description: `The Team identifier to perform the request on behalf of.`,
			},
			"two": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"alias": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation`,
					},
					"alias_assigned": schema.BoolAttribute{
						Computed:    true,
						Description: `A boolean that will be true when the aliases from the alias property were assigned successfully`,
					},
					"alias_error": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"code": schema.StringAttribute{
								Computed: true,
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `An object that will contain a ` + "`" + `code` + "`" + ` and a ` + "`" + `message` + "`" + ` when the aliasing fails, otherwise the value will be ` + "`" + `null` + "`" + ``,
					},
					"alias_final": schema.StringAttribute{
						Computed: true,
					},
					"alias_warning": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"action": schema.StringAttribute{
								Computed: true,
							},
							"code": schema.StringAttribute{
								Computed: true,
							},
							"link": schema.StringAttribute{
								Computed: true,
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"auto_assign_custom_domains": schema.BoolAttribute{
						Computed: true,
					},
					"automatic_aliases": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"booted_at": schema.NumberAttribute{
						Computed: true,
					},
					"build_error_at": schema.NumberAttribute{
						Computed: true,
					},
					"building_at": schema.NumberAttribute{
						Computed: true,
					},
					"canceled_at": schema.NumberAttribute{
						Computed: true,
					},
					"checks_conclusion": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["succeeded", "failed", "skipped", "canceled"]`,
					},
					"checks_state": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["registered", "running", "completed"]`,
					},
					"created_at": schema.NumberAttribute{
						Computed:    true,
						Description: `A number containing the date when the deployment was created in milliseconds`,
					},
					"creator": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `The avatar of the user that created the deployment`,
							},
							"uid": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the user that created the deployment`,
							},
							"username": schema.StringAttribute{
								Computed:    true,
								Description: `The username of the user that created the deployment`,
							},
						},
						Description: `Information about the deployment creator`,
					},
					"error_code": schema.StringAttribute{
						Computed: true,
					},
					"error_link": schema.StringAttribute{
						Computed: true,
					},
					"error_message": schema.StringAttribute{
						Computed: true,
					},
					"error_step": schema.StringAttribute{
						Computed: true,
					},
					"git_source": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"one": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_id": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"number": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"two": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"org": schema.StringAttribute{
										Computed: true,
									},
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"three": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"project_id": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"number": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["gitlab"]`,
									},
								},
							},
							"four": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_uuid": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
									"workspace_uuid": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"five": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"owner": schema.StringAttribute{
										Computed: true,
									},
									"pr_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
								},
							},
							"six": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"git_url": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["custom"]`,
									},
								},
							},
							"seven": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"org": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo": schema.StringAttribute{
										Computed: true,
									},
									"repo_id": schema.NumberAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["github"]`,
									},
								},
							},
							"eight": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"project_id": schema.NumberAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["gitlab"]`,
									},
								},
							},
							"nine": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"owner": schema.StringAttribute{
										Computed: true,
									},
									"ref": schema.StringAttribute{
										Computed: true,
									},
									"repo_uuid": schema.StringAttribute{
										Computed: true,
									},
									"sha": schema.StringAttribute{
										Computed: true,
									},
									"slug": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["bitbucket"]`,
									},
									"workspace_uuid": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `A string holding the unique ID of the deployment`,
					},
					"lambdas": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.NumberAttribute{
									Computed: true,
								},
								"entrypoint": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"output": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"function_name": schema.StringAttribute{
												Computed: true,
											},
											"path": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"ready_state": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["BUILDING", "ERROR", "INITIALIZING", "READY"]`,
								},
								"ready_state_at": schema.NumberAttribute{
									Computed: true,
								},
							},
						},
					},
					"meta": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object containing the deployment's metadata`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the project associated with the deployment at the time that the deployment was created`,
					},
					"passive_regions": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"preview_comments_enabled": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not preview comments are enabled for the deployment`,
					},
					"project": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"framework": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `The public project information associated with the deployment.`,
					},
					"public": schema.BoolAttribute{
						Computed:    true,
						Description: `A boolean representing if the deployment is public or not. By default this is ` + "`" + `false` + "`" + ``,
					},
					"ready_state": schema.StringAttribute{
						Computed:    true,
						Description: `The state of the deployment depending on the process of deploying, or if it is ready or in an error state. must be one of ["QUEUED", "BUILDING", "ERROR", "INITIALIZING", "READY", "CANCELED"]`,
					},
					"ready_substate": schema.StringAttribute{
						Computed:    true,
						Description: `The substate of the deployment when the state is "READY". must be one of ["STAGED", "PROMOTED"]`,
					},
					"regions": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The regions the deployment exists in`,
					},
					"source": schema.StringAttribute{
						Computed:    true,
						Description: `Where was the deployment created from. must be one of ["api-trigger-git-deploy", "cli", "clone/repo", "git", "import", "import/repo"]`,
					},
					"target": schema.StringAttribute{
						Computed:    true,
						Description: `If defined, either ` + "`" + `staging` + "`" + ` if a staging alias in the format ` + "`" + `<project>.<team>.now.sh` + "`" + ` was assigned upon creation, or ` + "`" + `production` + "`" + ` if the aliases from ` + "`" + `alias` + "`" + ` were assigned. must be one of ["staging", "production"]`,
					},
					"team": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `The avatar of the team owner`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the team owner`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `The name of the team owner`,
							},
							"slug": schema.StringAttribute{
								Computed:    true,
								Description: `The slug of the team owner`,
							},
						},
						Description: `The team that owns the deployment if any`,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["LAMBDAS"]`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `A string with the unique URL of the deployment`,
					},
					"user_aliases": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An array of domains that were provided by the user when creating the Deployment.`,
					},
					"version": schema.NumberAttribute{
						Computed:    true,
						Description: `The platform version that was used to create the deployment.`,
					},
				},
				Description: `The deployment including only public information`,
			},
			"url": schema.StringAttribute{
				Computed:    true,
				Description: `A string with the unique URL of the deployment`,
			},
			"with_git_repo_info": schema.StringAttribute{
				Optional:    true,
				Description: `Whether to add in gitRepo information.`,
			},
		},
	}
}

func (r *DeploymentDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Vercel)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Vercel, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DeploymentDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DeploymentDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	idOrURL := data.ProjectID.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	teamID := new(string)
	if !data.TeamID.IsUnknown() && !data.TeamID.IsNull() {
		*teamID = data.TeamID.ValueString()
	} else {
		teamID = nil
	}
	withGitRepoInfo := new(string)
	if !data.WithGitRepoInfo.IsUnknown() && !data.WithGitRepoInfo.IsNull() {
		*withGitRepoInfo = data.WithGitRepoInfo.ValueString()
	} else {
		withGitRepoInfo = nil
	}
	request := operations.GetDeploymentRequest{
		IDOrURL:         idOrURL,
		Slug:            slug,
		TeamID:          teamID,
		WithGitRepoInfo: withGitRepoInfo,
	}
	res, err := r.client.Deployments.GetDeployment(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.OneOf == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetDeploymentResponseBody(res.OneOf)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
