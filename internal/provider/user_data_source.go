// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/vercel/terraform-provider-vercel/internal/provider/types"
	"github.com/vercel/terraform-provider-vercel/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &UserDataSource{}
var _ datasource.DataSourceWithConfigure = &UserDataSource{}

func NewUserDataSource() datasource.DataSource {
	return &UserDataSource{}
}

// UserDataSource is the data source implementation.
type UserDataSource struct {
	client *sdk.SDK
}

// UserDataSourceModel describes the data model.
type UserDataSourceModel struct {
	User tfTypes.User `tfsdk:"user"`
}

// Metadata returns the data source type name.
func (r *UserDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user"
}

// Schema defines the schema for the data source.
func (r *UserDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "User DataSource",

		Attributes: map[string]schema.Attribute{
			"user": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auth_user": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"active_dashboard_views": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"favorites_view_preference": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["open", "closed"]`,
										},
										"recents_view_preference": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["open", "closed"]`,
										},
										"scope_id": schema.StringAttribute{
											Computed: true,
										},
										"view_preference": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["list", "cards"]`,
										},
									},
								},
								Description: `set of dashboard view preferences (cards or list) per scopeId`,
							},
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.`,
							},
							"billing": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"address": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"city": schema.StringAttribute{
												Computed: true,
											},
											"country": schema.StringAttribute{
												Computed: true,
											},
											"line1": schema.StringAttribute{
												Computed: true,
											},
											"line2": schema.StringAttribute{
												Computed: true,
											},
											"postal_code": schema.StringAttribute{
												Computed: true,
											},
											"state": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"cancelation": schema.NumberAttribute{
										Computed: true,
									},
									"contract": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"end": schema.NumberAttribute{
												Computed: true,
											},
											"start": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"controls": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"analytics_sample_rate_in_percent": schema.NumberAttribute{
												Computed: true,
											},
											"analytics_spend_limit_in_dollars": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"currency": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["usd", "eur"]`,
									},
									"email": schema.StringAttribute{
										Computed: true,
									},
									"invoice_items": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"analytics": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"analytics_usage": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"artifacts": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"bandwidth": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"blob_stores": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"blob_total_advanced_requests": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"blob_total_avg_size_in_bytes": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"blob_total_get_response_object_size_in_bytes": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"blob_total_simple_requests": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"build_minute": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"concurrent_builds": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"data_cache_read": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"data_cache_revalidation": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"data_cache_write": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_config_read": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_config_write": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_function_execution_units": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_middleware_invocations": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_request": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"edge_request_additional_cpu_duration": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"enterprise": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"fast_data_transfer": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"fast_origin_transfer": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"function_duration": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"function_invocation": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"log_drains_volume": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"monitoring": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"monitoring_metric": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"password_protection": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"postgres_compute_time": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"postgres_database": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"postgres_data_storage": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"postgres_data_transfer": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"postgres_written_data": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"preview_deployment_suffix": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"pro": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"saml": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"serverless_function_execution": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"source_images": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"storage_redis_total_bandwidth_in_bytes": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"storage_redis_total_commands": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"storage_redis_total_daily_avg_storage_in_bytes": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"storage_redis_total_databases": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"team_seats": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"waf_owasp_excess_bytes": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"waf_owasp_requests": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
											"web_analytics": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"frequency": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"interval": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["month"]`,
															},
															"interval_count": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"highest_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"max_quantity": schema.NumberAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"quantity": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
												Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
											},
											"web_analytics_event": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"batch": schema.NumberAttribute{
														Computed: true,
													},
													"disabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"enabled_at": schema.NumberAttribute{
														Computed: true,
													},
													"hidden": schema.BoolAttribute{
														Computed: true,
													},
													"matrix": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"default_unit_price": schema.StringAttribute{
																Computed: true,
															},
															"dimension_prices": schema.MapAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"price": schema.NumberAttribute{
														Computed: true,
													},
													"threshold": schema.NumberAttribute{
														Computed: true,
													},
													"tier": schema.NumberAttribute{
														Computed: true,
													},
												},
											},
										},
									},
									"invoice_settings": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"footer": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"language": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"orb_customer_id": schema.StringAttribute{
										Computed: true,
									},
									"orb_migration_scheduled_at": schema.NumberAttribute{
										Computed: true,
									},
									"period": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"end": schema.NumberAttribute{
												Computed: true,
											},
											"start": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"plan": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["pro", "enterprise", "hobby"]`,
									},
									"plan_iteration": schema.StringAttribute{
										Computed: true,
									},
									"platform": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["stripe", "stripeTestMode"]`,
									},
									"pricing_experiment": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["august-2022"]`,
									},
									"program_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["startup", "agency"]`,
									},
									"purchase_order": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["active", "trialing", "overdue", "expired", "canceled"]`,
									},
									"subscriptions": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"discount": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"coupon": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"amount_off": schema.NumberAttribute{
																	Computed: true,
																},
																"duration": schema.StringAttribute{
																	Computed:    true,
																	Description: `must be one of ["forever", "repeating", "once"]`,
																},
																"duration_in_months": schema.NumberAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"percentage_off": schema.NumberAttribute{
																	Computed: true,
																},
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"frequency": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"interval": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["month", "day", "week", "year"]`,
														},
														"interval_count": schema.NumberAttribute{
															Computed: true,
														},
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"items": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"amount": schema.NumberAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"price_id": schema.StringAttribute{
																Computed: true,
															},
															"product_id": schema.StringAttribute{
																Computed: true,
															},
															"quantity": schema.NumberAttribute{
																Computed: true,
															},
														},
													},
												},
												"period": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"end": schema.NumberAttribute{
															Computed: true,
														},
														"start": schema.NumberAttribute{
															Computed: true,
														},
													},
												},
												"trial": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"end": schema.NumberAttribute{
															Computed: true,
														},
														"start": schema.NumberAttribute{
															Computed: true,
														},
													},
												},
											},
										},
									},
									"synced_at": schema.NumberAttribute{
										Computed: true,
									},
									"tax": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"trial": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"end": schema.NumberAttribute{
												Computed: true,
											},
											"start": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
								},
								Description: `An object containing billing infomation associated with the User account.`,
							},
							"created_at": schema.NumberAttribute{
								Computed:    true,
								Description: `UNIX timestamp (in milliseconds) when the User account was created.`,
							},
							"data_cache": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"excess_billing_enabled": schema.BoolAttribute{
										Computed: true,
									},
								},
								Description: `data cache settings`,
							},
							"default_team_id": schema.StringAttribute{
								Computed:    true,
								Description: `The user's default team. Only applies if the user's ` + "`" + `version` + "`" + ` is ` + "`" + `'northstar'` + "`" + `.`,
							},
							"dismissed_toasts": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"dismissals": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"created_at": schema.NumberAttribute{
														Computed: true,
													},
													"scope_id": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								Description: `A record of when, under a certain scopeId, a toast was dismissed`,
							},
							"email": schema.StringAttribute{
								Computed:    true,
								Description: `Email address associated with the User account.`,
							},
							"favorite_projects_and_spaces": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"one": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"project_id": schema.StringAttribute{
													Computed: true,
												},
												"scope_id": schema.StringAttribute{
													Computed: true,
												},
												"scope_slug": schema.StringAttribute{
													Computed: true,
												},
											},
											Description: `A list of projects and spaces across teams that a user has marked as a favorite.`,
										},
										"two": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"scope_id": schema.StringAttribute{
													Computed: true,
												},
												"scope_slug": schema.StringAttribute{
													Computed: true,
												},
												"space_id": schema.StringAttribute{
													Computed: true,
												},
											},
											Description: `A list of projects and spaces across teams that a user has marked as a favorite.`,
										},
									},
								},
								Description: `A list of projects and spaces across teams that a user has marked as a favorite.`,
							},
							"feature_blocks": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"web_analytics": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"blocked_from": schema.NumberAttribute{
												Computed: true,
											},
											"blocked_until": schema.NumberAttribute{
												Computed: true,
											},
											"is_currently_blocked": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
								Description: `Feature blocks for the user`,
							},
							"has_trial_available": schema.BoolAttribute{
								Computed:    true,
								Description: `Whether the user has a trial available for a paid plan subscription.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The User's unique identifier.`,
							},
							"import_flow_git_namespace": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
									},
									"number": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"import_flow_git_namespace_id": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
									},
									"number": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"import_flow_git_provider": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["github", "gitlab", "bitbucket"]`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `Name associated with the User account, or ` + "`" + `null` + "`" + ` if none has been provided.`,
							},
							"northstar": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"migration": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"status": schema.StringAttribute{
												Computed:    true,
												Description: `- ` + "`" + `will-migrate` + "`" + `: Show dashboard toast saying "your account will be migrated soon" - ` + "`" + `migrating` + "`" + `: Show dashboard toast saying "your account is currently migrating to ` + "`" + `teamId` + "`" + `" - ` + "`" + `completed` + "`" + `: Show dashboard toast saying "your account has been migrated to ` + "`" + `teamId` + "`" + `" - ` + "`" + `failed` + "`" + `: Show dashboard toast saying "your account migration has failed ` + "`" + `teamId` + "`" + `". must be one of ["migrating", "completed", "failed", "will-migrate"]`,
											},
											"team_id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								Description: `Northstar migration specific data`,
							},
							"northstar_migration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"end_time": schema.NumberAttribute{
										Computed:    true,
										Description: `The migration end time timestamp for this user.`,
									},
									"integration_clients": schema.NumberAttribute{
										Computed:    true,
										Description: `The number of integration clients migrated for this user.`,
									},
									"integration_configurations": schema.NumberAttribute{
										Computed:    true,
										Description: `The number of integration configurations migrated for this user.`,
									},
									"projects": schema.NumberAttribute{
										Computed:    true,
										Description: `The number of projects migrated for this user.`,
									},
									"start_time": schema.NumberAttribute{
										Computed:    true,
										Description: `The migration start time timestamp for this user.`,
									},
									"stores": schema.NumberAttribute{
										Computed:    true,
										Description: `The number of stores migrated for this user.`,
									},
									"team_id": schema.StringAttribute{
										Computed:    true,
										Description: `The ID of the team we created for this user.`,
									},
								},
							},
							"preferred_scopes_and_git_namespaces": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"git_namespace_id": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"number": schema.NumberAttribute{
													Computed: true,
												},
											},
										},
										"scope_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
							"remote_caching": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"enabled": schema.BoolAttribute{
										Computed: true,
									},
								},
								Description: `remote caching settings`,
							},
							"resource_config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"aws_account_ids": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"aws_account_type": schema.StringAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"blob_stores": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"cf_zone_name": schema.StringAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"concurrent_builds": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"cron_jobs": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"cron_jobs_per_project": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"edge_configs": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"edge_config_size": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"edge_function_execution_timeout_ms": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"edge_function_max_size_bytes": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"integration_stores": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"kv_databases": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"node_type": schema.StringAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"postgres_databases": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
									"serverless_function_default_max_execution_time": schema.NumberAttribute{
										Computed:    true,
										Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
									},
								},
								Description: `An object containing infomation related to the amount of platform resources may be allocated to the User account.`,
							},
							"soft_block": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"blocked_at": schema.NumberAttribute{
										Computed: true,
									},
									"blocked_due_to_overage_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["analyticsUsage", "artifacts", "bandwidth", "blobStores", "blobTotalAdvancedRequests", "blobTotalAvgSizeInBytes", "blobTotalGetResponseObjectSizeInBytes", "blobTotalSimpleRequests", "buildMinute", "dataCacheRead", "dataCacheRevalidation", "dataCacheWrite", "edgeConfigRead", "edgeConfigWrite", "edgeFunctionExecutionUnits", "edgeMiddlewareInvocations", "edgeRequest", "edgeRequestAdditionalCpuDuration", "fastDataTransfer", "fastOriginTransfer", "functionDuration", "functionInvocation", "logDrainsVolume", "monitoringMetric", "postgresComputeTime", "postgresDataStorage", "postgresDataTransfer", "postgresDatabase", "postgresWrittenData", "serverlessFunctionExecution", "sourceImages", "storageRedisTotalBandwidthInBytes", "storageRedisTotalCommands", "storageRedisTotalDailyAvgStorageInBytes", "storageRedisTotalDatabases", "wafOwaspExcessBytes", "wafOwaspRequests", "webAnalyticsEvent"]`,
									},
									"reason": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["SUBSCRIPTION_CANCELED", "SUBSCRIPTION_EXPIRED", "UNPAID_INVOICE", "ENTERPRISE_TRIAL_ENDED", "FAIR_USE_LIMITS_EXCEEDED", "BLOCKED_FOR_PLATFORM_ABUSE"]`,
									},
								},
								Description: `When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.`,
							},
							"staging_prefix": schema.StringAttribute{
								Computed:    true,
								Description: `Prefix that will be used in the URL of "Preview" deployments created by the User account.`,
							},
							"username": schema.StringAttribute{
								Computed:    true,
								Description: `Unique username associated with the User account.`,
							},
							"version": schema.StringAttribute{
								Computed:    true,
								Description: `The user's version. Will either be unset or ` + "`" + `northstar` + "`" + `. must be one of ["northstar"]`,
							},
						},
						Description: `Data for the currently authenticated User.`,
					},
					"auth_user_limited": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed:    true,
								Description: `SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.`,
							},
							"default_team_id": schema.StringAttribute{
								Computed:    true,
								Description: `The user's default team. Only applies if the user's ` + "`" + `version` + "`" + ` is ` + "`" + `'northstar'` + "`" + `.`,
							},
							"email": schema.StringAttribute{
								Computed:    true,
								Description: `Email address associated with the User account.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The User's unique identifier.`,
							},
							"limited": schema.BoolAttribute{
								Computed:    true,
								Description: `Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges.`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `Name associated with the User account, or ` + "`" + `null` + "`" + ` if none has been provided.`,
							},
							"username": schema.StringAttribute{
								Computed:    true,
								Description: `Unique username associated with the User account.`,
							},
							"version": schema.StringAttribute{
								Computed:    true,
								Description: `The user's version. Will either be unset or ` + "`" + `northstar` + "`" + `. must be one of ["northstar"]`,
							},
						},
						Description: `A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data.`,
					},
				},
			},
		},
	}
}

func (r *UserDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UserDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *UserDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.User.GetAuthUser(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsGetAuthUserResponseBody(res.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
