// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/vercel/terraform-provider-terraform/internal/provider/types"
	"github.com/vercel/terraform-provider-terraform/internal/sdk/models/operations"
	"math/big"
)

func (r *UserDataSourceModel) RefreshFromOperationsGetAuthUserResponseBody(resp *operations.GetAuthUserResponseBody) {
	if resp != nil {
		if resp.User.AuthUser != nil {
			r.User.AuthUser = &tfTypes.AuthUser{}
			r.User.AuthUser.ActiveDashboardViews = []tfTypes.ActiveDashboardViews{}
			if len(r.User.AuthUser.ActiveDashboardViews) > len(resp.User.AuthUser.ActiveDashboardViews) {
				r.User.AuthUser.ActiveDashboardViews = r.User.AuthUser.ActiveDashboardViews[:len(resp.User.AuthUser.ActiveDashboardViews)]
			}
			for activeDashboardViewsCount, activeDashboardViewsItem := range resp.User.AuthUser.ActiveDashboardViews {
				var activeDashboardViews1 tfTypes.ActiveDashboardViews
				if activeDashboardViewsItem.FavoritesViewPreference != nil {
					activeDashboardViews1.FavoritesViewPreference = types.StringValue(string(*activeDashboardViewsItem.FavoritesViewPreference))
				} else {
					activeDashboardViews1.FavoritesViewPreference = types.StringNull()
				}
				if activeDashboardViewsItem.RecentsViewPreference != nil {
					activeDashboardViews1.RecentsViewPreference = types.StringValue(string(*activeDashboardViewsItem.RecentsViewPreference))
				} else {
					activeDashboardViews1.RecentsViewPreference = types.StringNull()
				}
				activeDashboardViews1.ScopeID = types.StringValue(activeDashboardViewsItem.ScopeID)
				if activeDashboardViewsItem.ViewPreference != nil {
					activeDashboardViews1.ViewPreference = types.StringValue(string(*activeDashboardViewsItem.ViewPreference))
				} else {
					activeDashboardViews1.ViewPreference = types.StringNull()
				}
				if activeDashboardViewsCount+1 > len(r.User.AuthUser.ActiveDashboardViews) {
					r.User.AuthUser.ActiveDashboardViews = append(r.User.AuthUser.ActiveDashboardViews, activeDashboardViews1)
				} else {
					r.User.AuthUser.ActiveDashboardViews[activeDashboardViewsCount].FavoritesViewPreference = activeDashboardViews1.FavoritesViewPreference
					r.User.AuthUser.ActiveDashboardViews[activeDashboardViewsCount].RecentsViewPreference = activeDashboardViews1.RecentsViewPreference
					r.User.AuthUser.ActiveDashboardViews[activeDashboardViewsCount].ScopeID = activeDashboardViews1.ScopeID
					r.User.AuthUser.ActiveDashboardViews[activeDashboardViewsCount].ViewPreference = activeDashboardViews1.ViewPreference
				}
			}
			r.User.AuthUser.Avatar = types.StringPointerValue(resp.User.AuthUser.Avatar)
			if resp.User.AuthUser.Billing == nil {
				r.User.AuthUser.Billing = nil
			} else {
				r.User.AuthUser.Billing = &tfTypes.Billing{}
				if resp.User.AuthUser.Billing.Address == nil {
					r.User.AuthUser.Billing.Address = nil
				} else {
					r.User.AuthUser.Billing.Address = &tfTypes.Address{}
					r.User.AuthUser.Billing.Address.City = types.StringPointerValue(resp.User.AuthUser.Billing.Address.City)
					r.User.AuthUser.Billing.Address.Country = types.StringPointerValue(resp.User.AuthUser.Billing.Address.Country)
					r.User.AuthUser.Billing.Address.Line1 = types.StringPointerValue(resp.User.AuthUser.Billing.Address.Line1)
					r.User.AuthUser.Billing.Address.Line2 = types.StringPointerValue(resp.User.AuthUser.Billing.Address.Line2)
					r.User.AuthUser.Billing.Address.PostalCode = types.StringPointerValue(resp.User.AuthUser.Billing.Address.PostalCode)
					r.User.AuthUser.Billing.Address.State = types.StringPointerValue(resp.User.AuthUser.Billing.Address.State)
				}
				if resp.User.AuthUser.Billing.Cancelation != nil {
					r.User.AuthUser.Billing.Cancelation = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.Cancelation)))
				} else {
					r.User.AuthUser.Billing.Cancelation = types.NumberNull()
				}
				if resp.User.AuthUser.Billing.Contract == nil {
					r.User.AuthUser.Billing.Contract = nil
				} else {
					r.User.AuthUser.Billing.Contract = &tfTypes.Contract{}
					r.User.AuthUser.Billing.Contract.End = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Contract.End)))
					r.User.AuthUser.Billing.Contract.Start = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Contract.Start)))
				}
				if resp.User.AuthUser.Billing.Controls == nil {
					r.User.AuthUser.Billing.Controls = nil
				} else {
					r.User.AuthUser.Billing.Controls = &tfTypes.Controls{}
					if resp.User.AuthUser.Billing.Controls.AnalyticsSampleRateInPercent != nil {
						r.User.AuthUser.Billing.Controls.AnalyticsSampleRateInPercent = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.Controls.AnalyticsSampleRateInPercent)))
					} else {
						r.User.AuthUser.Billing.Controls.AnalyticsSampleRateInPercent = types.NumberNull()
					}
					if resp.User.AuthUser.Billing.Controls.AnalyticsSpendLimitInDollars != nil {
						r.User.AuthUser.Billing.Controls.AnalyticsSpendLimitInDollars = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.Controls.AnalyticsSpendLimitInDollars)))
					} else {
						r.User.AuthUser.Billing.Controls.AnalyticsSpendLimitInDollars = types.NumberNull()
					}
				}
				if resp.User.AuthUser.Billing.Currency != nil {
					r.User.AuthUser.Billing.Currency = types.StringValue(string(*resp.User.AuthUser.Billing.Currency))
				} else {
					r.User.AuthUser.Billing.Currency = types.StringNull()
				}
				r.User.AuthUser.Billing.Email = types.StringPointerValue(resp.User.AuthUser.Billing.Email)
				if resp.User.AuthUser.Billing.InvoiceItems == nil {
					r.User.AuthUser.Billing.InvoiceItems = nil
				} else {
					r.User.AuthUser.Billing.InvoiceItems = &tfTypes.InvoiceItems{}
					if resp.User.AuthUser.Billing.InvoiceItems.Analytics == nil {
						r.User.AuthUser.Billing.InvoiceItems.Analytics = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Analytics = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Analytics.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Analytics.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.Analytics.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Analytics.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Analytics.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Analytics.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Name)
						r.User.AuthUser.Billing.InvoiceItems.Analytics.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Analytics.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Analytics.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.Analytics.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Analytics.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Analytics.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage == nil {
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DimensionPrices = make(map[string]types.String)
								for key, value := range resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Matrix.DimensionPrices[key] = types.StringValue(value)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Name)
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Price)))
						r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.AnalyticsUsage.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Artifacts == nil {
						r.User.AuthUser.Billing.InvoiceItems.Artifacts = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Artifacts = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.Artifacts.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.Artifacts.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Artifacts.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Artifacts.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Artifacts.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Artifacts.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DimensionPrices = make(map[string]types.String)
								for key1, value1 := range resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.Artifacts.Matrix.DimensionPrices[key1] = types.StringValue(value1)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.Artifacts.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Name)
						r.User.AuthUser.Billing.InvoiceItems.Artifacts.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Artifacts.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Artifacts.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Artifacts.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Bandwidth == nil {
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DimensionPrices = make(map[string]types.String)
								for key2, value2 := range resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Matrix.DimensionPrices[key2] = types.StringValue(value2)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Name)
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Bandwidth.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Bandwidth.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BlobStores == nil {
						r.User.AuthUser.Billing.InvoiceItems.BlobStores = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BlobStores = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BlobStores.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobStores.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobStores.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BlobStores.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobStores.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobStores.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DimensionPrices = make(map[string]types.String)
								for key3, value3 := range resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BlobStores.Matrix.DimensionPrices[key3] = types.StringValue(value3)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobStores.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Name)
						r.User.AuthUser.Billing.InvoiceItems.BlobStores.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BlobStores.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobStores.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobStores.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests == nil {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DimensionPrices = make(map[string]types.String)
								for key4, value4 := range resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Matrix.DimensionPrices[key4] = types.StringValue(value4)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Name)
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAdvancedRequests.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes == nil {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DimensionPrices = make(map[string]types.String)
								for key5, value5 := range resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Matrix.DimensionPrices[key5] = types.StringValue(value5)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Name)
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalAvgSizeInBytes.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes == nil {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DimensionPrices = make(map[string]types.String)
								for key6, value6 := range resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Matrix.DimensionPrices[key6] = types.StringValue(value6)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Name)
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalGetResponseObjectSizeInBytes.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests == nil {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DimensionPrices = make(map[string]types.String)
								for key7, value7 := range resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Matrix.DimensionPrices[key7] = types.StringValue(value7)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Name)
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BlobTotalSimpleRequests.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.BuildMinute == nil {
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DimensionPrices = make(map[string]types.String)
								for key8, value8 := range resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Matrix.DimensionPrices[key8] = types.StringValue(value8)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Name)
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Price)))
						r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.BuildMinute.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.BuildMinute.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds == nil {
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Name)
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Price)))
						r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ConcurrentBuilds.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead == nil {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DimensionPrices = make(map[string]types.String)
								for key9, value9 := range resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Matrix.DimensionPrices[key9] = types.StringValue(value9)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Name)
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Price)))
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRead.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation == nil {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DimensionPrices = make(map[string]types.String)
								for key10, value10 := range resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Matrix.DimensionPrices[key10] = types.StringValue(value10)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Name)
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Price)))
						r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheRevalidation.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite == nil {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DimensionPrices = make(map[string]types.String)
								for key11, value11 := range resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Matrix.DimensionPrices[key11] = types.StringValue(value11)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Name)
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Price)))
						r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.DataCacheWrite.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DimensionPrices = make(map[string]types.String)
								for key12, value12 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Matrix.DimensionPrices[key12] = types.StringValue(value12)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigRead.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DimensionPrices = make(map[string]types.String)
								for key13, value13 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Matrix.DimensionPrices[key13] = types.StringValue(value13)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeConfigWrite.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DimensionPrices = make(map[string]types.String)
								for key14, value14 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Matrix.DimensionPrices[key14] = types.StringValue(value14)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeFunctionExecutionUnits.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DimensionPrices = make(map[string]types.String)
								for key15, value15 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Matrix.DimensionPrices[key15] = types.StringValue(value15)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeMiddlewareInvocations.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DimensionPrices = make(map[string]types.String)
								for key16, value16 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Matrix.DimensionPrices[key16] = types.StringValue(value16)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequest.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration == nil {
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DimensionPrices = make(map[string]types.String)
								for key17, value17 := range resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Matrix.DimensionPrices[key17] = types.StringValue(value17)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Name)
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Price)))
						r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.EdgeRequestAdditionalCPUDuration.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Enterprise == nil {
						r.User.AuthUser.Billing.InvoiceItems.Enterprise = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Enterprise = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Enterprise.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Enterprise.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.Enterprise.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Enterprise.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Enterprise.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Enterprise.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Name)
						r.User.AuthUser.Billing.InvoiceItems.Enterprise.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Enterprise.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Enterprise.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Enterprise.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer == nil {
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DimensionPrices = make(map[string]types.String)
								for key18, value18 := range resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Matrix.DimensionPrices[key18] = types.StringValue(value18)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Name)
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Price)))
						r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastDataTransfer.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer == nil {
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DimensionPrices = make(map[string]types.String)
								for key19, value19 := range resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Matrix.DimensionPrices[key19] = types.StringValue(value19)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Name)
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Price)))
						r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FastOriginTransfer.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration == nil {
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DimensionPrices = make(map[string]types.String)
								for key20, value20 := range resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Matrix.DimensionPrices[key20] = types.StringValue(value20)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Name)
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Price)))
						r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionDuration.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation == nil {
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DimensionPrices = make(map[string]types.String)
								for key21, value21 := range resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Matrix.DimensionPrices[key21] = types.StringValue(value21)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Name)
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Price)))
						r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.FunctionInvocation.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume == nil {
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DimensionPrices = make(map[string]types.String)
								for key22, value22 := range resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Matrix.DimensionPrices[key22] = types.StringValue(value22)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Name)
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Price)))
						r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.LogDrainsVolume.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Monitoring == nil {
						r.User.AuthUser.Billing.InvoiceItems.Monitoring = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Monitoring = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Monitoring.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Monitoring.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.Monitoring.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Monitoring.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Monitoring.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Monitoring.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Name)
						r.User.AuthUser.Billing.InvoiceItems.Monitoring.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Monitoring.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Monitoring.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Monitoring.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric == nil {
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DimensionPrices = make(map[string]types.String)
								for key23, value23 := range resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Matrix.DimensionPrices[key23] = types.StringValue(value23)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Name)
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Price)))
						r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.MonitoringMetric.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection == nil {
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Name)
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PasswordProtection.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime == nil {
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DimensionPrices = make(map[string]types.String)
								for key24, value24 := range resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Matrix.DimensionPrices[key24] = types.StringValue(value24)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Name)
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresComputeTime.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase == nil {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DimensionPrices = make(map[string]types.String)
								for key25, value25 := range resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Matrix.DimensionPrices[key25] = types.StringValue(value25)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Name)
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDatabase.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage == nil {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DimensionPrices = make(map[string]types.String)
								for key26, value26 := range resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Matrix.DimensionPrices[key26] = types.StringValue(value26)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Name)
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataStorage.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer == nil {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DimensionPrices = make(map[string]types.String)
								for key27, value27 := range resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Matrix.DimensionPrices[key27] = types.StringValue(value27)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Name)
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresDataTransfer.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData == nil {
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DimensionPrices = make(map[string]types.String)
								for key28, value28 := range resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Matrix.DimensionPrices[key28] = types.StringValue(value28)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Name)
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PostgresWrittenData.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix == nil {
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Name)
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Price)))
						r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.PreviewDeploymentSuffix.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Pro == nil {
						r.User.AuthUser.Billing.InvoiceItems.Pro = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Pro = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Pro.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Pro.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.Pro.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.Pro.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.Pro.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Pro.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.Pro.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Pro.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Pro.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Pro.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Pro.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Pro.Name)
						r.User.AuthUser.Billing.InvoiceItems.Pro.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Pro.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Pro.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Pro.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.Pro.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Pro.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Pro.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Pro.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.Saml == nil {
						r.User.AuthUser.Billing.InvoiceItems.Saml = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.Saml = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Saml.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Saml.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.Saml.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.Saml.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.Saml.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Saml.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.Saml.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.Saml.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Saml.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Saml.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.Saml.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.Saml.Name)
						r.User.AuthUser.Billing.InvoiceItems.Saml.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Saml.Price)))
						r.User.AuthUser.Billing.InvoiceItems.Saml.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.Saml.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.Saml.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.Saml.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.Saml.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.Saml.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution == nil {
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DimensionPrices = make(map[string]types.String)
								for key29, value29 := range resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Matrix.DimensionPrices[key29] = types.StringValue(value29)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Name)
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Price)))
						r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.ServerlessFunctionExecution.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.SourceImages == nil {
						r.User.AuthUser.Billing.InvoiceItems.SourceImages = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.SourceImages = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.SourceImages.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.SourceImages.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.SourceImages.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.SourceImages.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.SourceImages.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.SourceImages.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DimensionPrices = make(map[string]types.String)
								for key30, value30 := range resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.SourceImages.Matrix.DimensionPrices[key30] = types.StringValue(value30)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.SourceImages.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Name)
						r.User.AuthUser.Billing.InvoiceItems.SourceImages.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Price)))
						r.User.AuthUser.Billing.InvoiceItems.SourceImages.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.SourceImages.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.SourceImages.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes == nil {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DimensionPrices = make(map[string]types.String)
								for key31, value31 := range resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Matrix.DimensionPrices[key31] = types.StringValue(value31)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Name)
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Price)))
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalBandwidthInBytes.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands == nil {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DimensionPrices = make(map[string]types.String)
								for key32, value32 := range resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Matrix.DimensionPrices[key32] = types.StringValue(value32)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Name)
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Price)))
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalCommands.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes == nil {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DimensionPrices = make(map[string]types.String)
								for key33, value33 := range resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Matrix.DimensionPrices[key33] = types.StringValue(value33)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Name)
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Price)))
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDailyAvgStorageInBytes.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases == nil {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DimensionPrices = make(map[string]types.String)
								for key34, value34 := range resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Matrix.DimensionPrices[key34] = types.StringValue(value34)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Name)
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Price)))
						r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.StorageRedisTotalDatabases.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats == nil {
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Name)
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Price)))
						r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.TeamSeats.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.TeamSeats.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes == nil {
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DimensionPrices = make(map[string]types.String)
								for key35, value35 := range resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Matrix.DimensionPrices[key35] = types.StringValue(value35)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Name)
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Price)))
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspExcessBytes.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests == nil {
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DimensionPrices = make(map[string]types.String)
								for key36, value36 := range resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Matrix.DimensionPrices[key36] = types.StringValue(value36)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Name)
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Price)))
						r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WafOwaspRequests.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics == nil {
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics = &tfTypes.CreateTeamAnalytics{}
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.CreatedAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.CreatedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.CreatedAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.CreatedAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency == nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency = &tfTypes.CreateTeamTeamsFrequency{}
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency.Interval = types.StringValue(string(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency.Interval))
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Frequency.IntervalCount)))
						}
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.HighestQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.HighestQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.HighestQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.HighestQuantity = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.MaxQuantity != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.MaxQuantity = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.MaxQuantity)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.MaxQuantity = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Name)
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Price)))
						r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Quantity = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Quantity)))
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalytics.Tier = types.NumberNull()
						}
					}
					if resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent == nil {
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent = nil
					} else {
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent = &tfTypes.AnalyticsUsage{}
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Batch = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Batch)))
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.DisabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.DisabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.DisabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.DisabledAt = types.NumberNull()
						}
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.EnabledAt != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.EnabledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.EnabledAt)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.EnabledAt = types.NumberNull()
						}
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Hidden = types.BoolValue(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Hidden)
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix == nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix = nil
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix = &tfTypes.Matrix{}
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DefaultUnitPrice = types.StringValue(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DefaultUnitPrice)
							if len(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DimensionPrices) > 0 {
								r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DimensionPrices = make(map[string]types.String)
								for key37, value37 := range resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DimensionPrices {
									r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Matrix.DimensionPrices[key37] = types.StringValue(value37)
								}
							}
						}
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Name = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Name)
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Price = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Price)))
						r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Threshold = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Threshold)))
						if resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Tier != nil {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Tier = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Tier)))
						} else {
							r.User.AuthUser.Billing.InvoiceItems.WebAnalyticsEvent.Tier = types.NumberNull()
						}
					}
				}
				if resp.User.AuthUser.Billing.InvoiceSettings == nil {
					r.User.AuthUser.Billing.InvoiceSettings = nil
				} else {
					r.User.AuthUser.Billing.InvoiceSettings = &tfTypes.InvoiceSettings{}
					r.User.AuthUser.Billing.InvoiceSettings.Footer = types.StringPointerValue(resp.User.AuthUser.Billing.InvoiceSettings.Footer)
				}
				r.User.AuthUser.Billing.Language = types.StringPointerValue(resp.User.AuthUser.Billing.Language)
				r.User.AuthUser.Billing.Name = types.StringPointerValue(resp.User.AuthUser.Billing.Name)
				r.User.AuthUser.Billing.OrbCustomerID = types.StringPointerValue(resp.User.AuthUser.Billing.OrbCustomerID)
				if resp.User.AuthUser.Billing.OrbMigrationScheduledAt != nil {
					r.User.AuthUser.Billing.OrbMigrationScheduledAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.OrbMigrationScheduledAt)))
				} else {
					r.User.AuthUser.Billing.OrbMigrationScheduledAt = types.NumberNull()
				}
				if resp.User.AuthUser.Billing.Period == nil {
					r.User.AuthUser.Billing.Period = nil
				} else {
					r.User.AuthUser.Billing.Period = &tfTypes.Contract{}
					r.User.AuthUser.Billing.Period.End = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Period.End)))
					r.User.AuthUser.Billing.Period.Start = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Period.Start)))
				}
				r.User.AuthUser.Billing.Plan = types.StringValue(string(resp.User.AuthUser.Billing.Plan))
				r.User.AuthUser.Billing.PlanIteration = types.StringPointerValue(resp.User.AuthUser.Billing.PlanIteration)
				if resp.User.AuthUser.Billing.Platform != nil {
					r.User.AuthUser.Billing.Platform = types.StringValue(string(*resp.User.AuthUser.Billing.Platform))
				} else {
					r.User.AuthUser.Billing.Platform = types.StringNull()
				}
				if resp.User.AuthUser.Billing.PricingExperiment != nil {
					r.User.AuthUser.Billing.PricingExperiment = types.StringValue(string(*resp.User.AuthUser.Billing.PricingExperiment))
				} else {
					r.User.AuthUser.Billing.PricingExperiment = types.StringNull()
				}
				if resp.User.AuthUser.Billing.ProgramType != nil {
					r.User.AuthUser.Billing.ProgramType = types.StringValue(string(*resp.User.AuthUser.Billing.ProgramType))
				} else {
					r.User.AuthUser.Billing.ProgramType = types.StringNull()
				}
				r.User.AuthUser.Billing.PurchaseOrder = types.StringPointerValue(resp.User.AuthUser.Billing.PurchaseOrder)
				if resp.User.AuthUser.Billing.Status != nil {
					r.User.AuthUser.Billing.Status = types.StringValue(string(*resp.User.AuthUser.Billing.Status))
				} else {
					r.User.AuthUser.Billing.Status = types.StringNull()
				}
				r.User.AuthUser.Billing.Subscriptions = []tfTypes.Subscriptions{}
				if len(r.User.AuthUser.Billing.Subscriptions) > len(resp.User.AuthUser.Billing.Subscriptions) {
					r.User.AuthUser.Billing.Subscriptions = r.User.AuthUser.Billing.Subscriptions[:len(resp.User.AuthUser.Billing.Subscriptions)]
				}
				for subscriptionsCount, subscriptionsItem := range resp.User.AuthUser.Billing.Subscriptions {
					var subscriptions1 tfTypes.Subscriptions
					if subscriptionsItem.Discount == nil {
						subscriptions1.Discount = nil
					} else {
						subscriptions1.Discount = &tfTypes.Discount{}
						if subscriptionsItem.Discount.Coupon.AmountOff != nil {
							subscriptions1.Discount.Coupon.AmountOff = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.Discount.Coupon.AmountOff)))
						} else {
							subscriptions1.Discount.Coupon.AmountOff = types.NumberNull()
						}
						subscriptions1.Discount.Coupon.Duration = types.StringValue(string(subscriptionsItem.Discount.Coupon.Duration))
						if subscriptionsItem.Discount.Coupon.DurationInMonths != nil {
							subscriptions1.Discount.Coupon.DurationInMonths = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.Discount.Coupon.DurationInMonths)))
						} else {
							subscriptions1.Discount.Coupon.DurationInMonths = types.NumberNull()
						}
						subscriptions1.Discount.Coupon.ID = types.StringValue(subscriptionsItem.Discount.Coupon.ID)
						subscriptions1.Discount.Coupon.Name = types.StringPointerValue(subscriptionsItem.Discount.Coupon.Name)
						if subscriptionsItem.Discount.Coupon.PercentageOff != nil {
							subscriptions1.Discount.Coupon.PercentageOff = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.Discount.Coupon.PercentageOff)))
						} else {
							subscriptions1.Discount.Coupon.PercentageOff = types.NumberNull()
						}
						subscriptions1.Discount.ID = types.StringValue(subscriptionsItem.Discount.ID)
					}
					subscriptions1.Frequency.Interval = types.StringValue(string(subscriptionsItem.Frequency.Interval))
					subscriptions1.Frequency.IntervalCount = types.NumberValue(big.NewFloat(float64(subscriptionsItem.Frequency.IntervalCount)))
					subscriptions1.ID = types.StringValue(subscriptionsItem.ID)
					subscriptions1.Items = []tfTypes.Items{}
					for itemsCount, itemsItem := range subscriptionsItem.Items {
						var items1 tfTypes.Items
						items1.Amount = types.NumberValue(big.NewFloat(float64(itemsItem.Amount)))
						items1.ID = types.StringValue(itemsItem.ID)
						items1.PriceID = types.StringValue(itemsItem.PriceID)
						items1.ProductID = types.StringValue(itemsItem.ProductID)
						items1.Quantity = types.NumberValue(big.NewFloat(float64(itemsItem.Quantity)))
						if itemsCount+1 > len(subscriptions1.Items) {
							subscriptions1.Items = append(subscriptions1.Items, items1)
						} else {
							subscriptions1.Items[itemsCount].Amount = items1.Amount
							subscriptions1.Items[itemsCount].ID = items1.ID
							subscriptions1.Items[itemsCount].PriceID = items1.PriceID
							subscriptions1.Items[itemsCount].ProductID = items1.ProductID
							subscriptions1.Items[itemsCount].Quantity = items1.Quantity
						}
					}
					subscriptions1.Period.End = types.NumberValue(big.NewFloat(float64(subscriptionsItem.Period.End)))
					subscriptions1.Period.Start = types.NumberValue(big.NewFloat(float64(subscriptionsItem.Period.Start)))
					if subscriptionsItem.Trial == nil {
						subscriptions1.Trial = nil
					} else {
						subscriptions1.Trial = &tfTypes.Contract{}
						subscriptions1.Trial.End = types.NumberValue(big.NewFloat(float64(subscriptionsItem.Trial.End)))
						subscriptions1.Trial.Start = types.NumberValue(big.NewFloat(float64(subscriptionsItem.Trial.Start)))
					}
					if subscriptionsCount+1 > len(r.User.AuthUser.Billing.Subscriptions) {
						r.User.AuthUser.Billing.Subscriptions = append(r.User.AuthUser.Billing.Subscriptions, subscriptions1)
					} else {
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].Discount = subscriptions1.Discount
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].Frequency = subscriptions1.Frequency
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].ID = subscriptions1.ID
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].Items = subscriptions1.Items
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].Period = subscriptions1.Period
						r.User.AuthUser.Billing.Subscriptions[subscriptionsCount].Trial = subscriptions1.Trial
					}
				}
				if resp.User.AuthUser.Billing.SyncedAt != nil {
					r.User.AuthUser.Billing.SyncedAt = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.Billing.SyncedAt)))
				} else {
					r.User.AuthUser.Billing.SyncedAt = types.NumberNull()
				}
				if resp.User.AuthUser.Billing.Tax == nil {
					r.User.AuthUser.Billing.Tax = nil
				} else {
					r.User.AuthUser.Billing.Tax = &tfTypes.Tax{}
					r.User.AuthUser.Billing.Tax.ID = types.StringValue(resp.User.AuthUser.Billing.Tax.ID)
					r.User.AuthUser.Billing.Tax.Type = types.StringValue(resp.User.AuthUser.Billing.Tax.Type)
				}
				if resp.User.AuthUser.Billing.Trial == nil {
					r.User.AuthUser.Billing.Trial = nil
				} else {
					r.User.AuthUser.Billing.Trial = &tfTypes.Contract{}
					r.User.AuthUser.Billing.Trial.End = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Trial.End)))
					r.User.AuthUser.Billing.Trial.Start = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.Billing.Trial.Start)))
				}
			}
			r.User.AuthUser.CreatedAt = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.CreatedAt)))
			if resp.User.AuthUser.DataCache == nil {
				r.User.AuthUser.DataCache = nil
			} else {
				r.User.AuthUser.DataCache = &tfTypes.DataCache{}
				r.User.AuthUser.DataCache.ExcessBillingEnabled = types.BoolPointerValue(resp.User.AuthUser.DataCache.ExcessBillingEnabled)
			}
			r.User.AuthUser.DefaultTeamID = types.StringPointerValue(resp.User.AuthUser.DefaultTeamID)
			r.User.AuthUser.DismissedToasts = []tfTypes.DismissedToasts{}
			if len(r.User.AuthUser.DismissedToasts) > len(resp.User.AuthUser.DismissedToasts) {
				r.User.AuthUser.DismissedToasts = r.User.AuthUser.DismissedToasts[:len(resp.User.AuthUser.DismissedToasts)]
			}
			for dismissedToastsCount, dismissedToastsItem := range resp.User.AuthUser.DismissedToasts {
				var dismissedToasts1 tfTypes.DismissedToasts
				dismissedToasts1.Dismissals = []tfTypes.Dismissals{}
				for dismissalsCount, dismissalsItem := range dismissedToastsItem.Dismissals {
					var dismissals1 tfTypes.Dismissals
					dismissals1.CreatedAt = types.NumberValue(big.NewFloat(float64(dismissalsItem.CreatedAt)))
					dismissals1.ScopeID = types.StringValue(dismissalsItem.ScopeID)
					if dismissalsCount+1 > len(dismissedToasts1.Dismissals) {
						dismissedToasts1.Dismissals = append(dismissedToasts1.Dismissals, dismissals1)
					} else {
						dismissedToasts1.Dismissals[dismissalsCount].CreatedAt = dismissals1.CreatedAt
						dismissedToasts1.Dismissals[dismissalsCount].ScopeID = dismissals1.ScopeID
					}
				}
				dismissedToasts1.Name = types.StringValue(dismissedToastsItem.Name)
				if dismissedToastsCount+1 > len(r.User.AuthUser.DismissedToasts) {
					r.User.AuthUser.DismissedToasts = append(r.User.AuthUser.DismissedToasts, dismissedToasts1)
				} else {
					r.User.AuthUser.DismissedToasts[dismissedToastsCount].Dismissals = dismissedToasts1.Dismissals
					r.User.AuthUser.DismissedToasts[dismissedToastsCount].Name = dismissedToasts1.Name
				}
			}
			r.User.AuthUser.Email = types.StringValue(resp.User.AuthUser.Email)
			r.User.AuthUser.FavoriteProjectsAndSpaces = []tfTypes.FavoriteProjectsAndSpaces{}
			if len(r.User.AuthUser.FavoriteProjectsAndSpaces) > len(resp.User.AuthUser.FavoriteProjectsAndSpaces) {
				r.User.AuthUser.FavoriteProjectsAndSpaces = r.User.AuthUser.FavoriteProjectsAndSpaces[:len(resp.User.AuthUser.FavoriteProjectsAndSpaces)]
			}
			for favoriteProjectsAndSpacesCount, favoriteProjectsAndSpacesItem := range resp.User.AuthUser.FavoriteProjectsAndSpaces {
				var favoriteProjectsAndSpaces1 tfTypes.FavoriteProjectsAndSpaces
				if favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces1 != nil {
					favoriteProjectsAndSpaces1.One = &tfTypes.FavoriteProjectsAndSpaces1{}
					favoriteProjectsAndSpaces1.One.ProjectID = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces1.ProjectID)
					favoriteProjectsAndSpaces1.One.ScopeID = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces1.ScopeID)
					favoriteProjectsAndSpaces1.One.ScopeSlug = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces1.ScopeSlug)
				}
				if favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces2 != nil {
					favoriteProjectsAndSpaces1.Two = &tfTypes.FavoriteProjectsAndSpaces2{}
					favoriteProjectsAndSpaces1.Two.ScopeID = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces2.ScopeID)
					favoriteProjectsAndSpaces1.Two.ScopeSlug = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces2.ScopeSlug)
					favoriteProjectsAndSpaces1.Two.SpaceID = types.StringValue(favoriteProjectsAndSpacesItem.FavoriteProjectsAndSpaces2.SpaceID)
				}
				if favoriteProjectsAndSpacesCount+1 > len(r.User.AuthUser.FavoriteProjectsAndSpaces) {
					r.User.AuthUser.FavoriteProjectsAndSpaces = append(r.User.AuthUser.FavoriteProjectsAndSpaces, favoriteProjectsAndSpaces1)
				} else {
					r.User.AuthUser.FavoriteProjectsAndSpaces[favoriteProjectsAndSpacesCount].One = favoriteProjectsAndSpaces1.One
					r.User.AuthUser.FavoriteProjectsAndSpaces[favoriteProjectsAndSpacesCount].Two = favoriteProjectsAndSpaces1.Two
				}
			}
			if resp.User.AuthUser.FeatureBlocks == nil {
				r.User.AuthUser.FeatureBlocks = nil
			} else {
				r.User.AuthUser.FeatureBlocks = &tfTypes.FeatureBlocks{}
				if resp.User.AuthUser.FeatureBlocks.WebAnalytics == nil {
					r.User.AuthUser.FeatureBlocks.WebAnalytics = nil
				} else {
					r.User.AuthUser.FeatureBlocks.WebAnalytics = &tfTypes.WebAnalytics{}
					if resp.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedFrom != nil {
						r.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedFrom = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedFrom)))
					} else {
						r.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedFrom = types.NumberNull()
					}
					if resp.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedUntil != nil {
						r.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedUntil = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedUntil)))
					} else {
						r.User.AuthUser.FeatureBlocks.WebAnalytics.BlockedUntil = types.NumberNull()
					}
					r.User.AuthUser.FeatureBlocks.WebAnalytics.IsCurrentlyBlocked = types.BoolValue(resp.User.AuthUser.FeatureBlocks.WebAnalytics.IsCurrentlyBlocked)
				}
			}
			r.User.AuthUser.HasTrialAvailable = types.BoolValue(resp.User.AuthUser.HasTrialAvailable)
			r.User.AuthUser.ID = types.StringValue(resp.User.AuthUser.ID)
			if resp.User.AuthUser.ImportFlowGitNamespace == nil {
				r.User.AuthUser.ImportFlowGitNamespace = nil
			} else {
				r.User.AuthUser.ImportFlowGitNamespace = &tfTypes.RepoID{}
				if resp.User.AuthUser.ImportFlowGitNamespace.Str != nil {
					r.User.AuthUser.ImportFlowGitNamespace.Str = types.StringPointerValue(resp.User.AuthUser.ImportFlowGitNamespace.Str)
				}
				if resp.User.AuthUser.ImportFlowGitNamespace.Number != nil {
					if resp.User.AuthUser.ImportFlowGitNamespace.Number != nil {
						r.User.AuthUser.ImportFlowGitNamespace.Number = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ImportFlowGitNamespace.Number)))
					} else {
						r.User.AuthUser.ImportFlowGitNamespace.Number = types.NumberNull()
					}
				}
			}
			if resp.User.AuthUser.ImportFlowGitNamespaceID == nil {
				r.User.AuthUser.ImportFlowGitNamespaceID = nil
			} else {
				r.User.AuthUser.ImportFlowGitNamespaceID = &tfTypes.RepoID{}
				if resp.User.AuthUser.ImportFlowGitNamespaceID.Str != nil {
					r.User.AuthUser.ImportFlowGitNamespaceID.Str = types.StringPointerValue(resp.User.AuthUser.ImportFlowGitNamespaceID.Str)
				}
				if resp.User.AuthUser.ImportFlowGitNamespaceID.Number != nil {
					if resp.User.AuthUser.ImportFlowGitNamespaceID.Number != nil {
						r.User.AuthUser.ImportFlowGitNamespaceID.Number = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ImportFlowGitNamespaceID.Number)))
					} else {
						r.User.AuthUser.ImportFlowGitNamespaceID.Number = types.NumberNull()
					}
				}
			}
			if resp.User.AuthUser.ImportFlowGitProvider != nil {
				r.User.AuthUser.ImportFlowGitProvider = types.StringValue(string(*resp.User.AuthUser.ImportFlowGitProvider))
			} else {
				r.User.AuthUser.ImportFlowGitProvider = types.StringNull()
			}
			r.User.AuthUser.Name = types.StringPointerValue(resp.User.AuthUser.Name)
			if resp.User.AuthUser.Northstar == nil {
				r.User.AuthUser.Northstar = nil
			} else {
				r.User.AuthUser.Northstar = &tfTypes.Northstar{}
				if resp.User.AuthUser.Northstar.Migration == nil {
					r.User.AuthUser.Northstar.Migration = nil
				} else {
					r.User.AuthUser.Northstar.Migration = &tfTypes.Migration{}
					r.User.AuthUser.Northstar.Migration.Status = types.StringValue(string(resp.User.AuthUser.Northstar.Migration.Status))
					r.User.AuthUser.Northstar.Migration.TeamID = types.StringPointerValue(resp.User.AuthUser.Northstar.Migration.TeamID)
				}
			}
			if resp.User.AuthUser.NorthstarMigration == nil {
				r.User.AuthUser.NorthstarMigration = nil
			} else {
				r.User.AuthUser.NorthstarMigration = &tfTypes.NorthstarMigration{}
				r.User.AuthUser.NorthstarMigration.EndTime = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.EndTime)))
				r.User.AuthUser.NorthstarMigration.IntegrationClients = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.IntegrationClients)))
				r.User.AuthUser.NorthstarMigration.IntegrationConfigurations = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.IntegrationConfigurations)))
				r.User.AuthUser.NorthstarMigration.Projects = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.Projects)))
				r.User.AuthUser.NorthstarMigration.StartTime = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.StartTime)))
				r.User.AuthUser.NorthstarMigration.Stores = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.NorthstarMigration.Stores)))
				r.User.AuthUser.NorthstarMigration.TeamID = types.StringValue(resp.User.AuthUser.NorthstarMigration.TeamID)
			}
			r.User.AuthUser.PreferredScopesAndGitNamespaces = []tfTypes.PreferredScopesAndGitNamespaces{}
			if len(r.User.AuthUser.PreferredScopesAndGitNamespaces) > len(resp.User.AuthUser.PreferredScopesAndGitNamespaces) {
				r.User.AuthUser.PreferredScopesAndGitNamespaces = r.User.AuthUser.PreferredScopesAndGitNamespaces[:len(resp.User.AuthUser.PreferredScopesAndGitNamespaces)]
			}
			for preferredScopesAndGitNamespacesCount, preferredScopesAndGitNamespacesItem := range resp.User.AuthUser.PreferredScopesAndGitNamespaces {
				var preferredScopesAndGitNamespaces1 tfTypes.PreferredScopesAndGitNamespaces
				if preferredScopesAndGitNamespacesItem.GitNamespaceID == nil {
					preferredScopesAndGitNamespaces1.GitNamespaceID = nil
				} else {
					preferredScopesAndGitNamespaces1.GitNamespaceID = &tfTypes.RepoID{}
					if preferredScopesAndGitNamespacesItem.GitNamespaceID.Str != nil {
						preferredScopesAndGitNamespaces1.GitNamespaceID.Str = types.StringPointerValue(preferredScopesAndGitNamespacesItem.GitNamespaceID.Str)
					}
					if preferredScopesAndGitNamespacesItem.GitNamespaceID.Number != nil {
						if preferredScopesAndGitNamespacesItem.GitNamespaceID.Number != nil {
							preferredScopesAndGitNamespaces1.GitNamespaceID.Number = types.NumberValue(big.NewFloat(float64(*preferredScopesAndGitNamespacesItem.GitNamespaceID.Number)))
						} else {
							preferredScopesAndGitNamespaces1.GitNamespaceID.Number = types.NumberNull()
						}
					}
				}
				preferredScopesAndGitNamespaces1.ScopeID = types.StringValue(preferredScopesAndGitNamespacesItem.ScopeID)
				if preferredScopesAndGitNamespacesCount+1 > len(r.User.AuthUser.PreferredScopesAndGitNamespaces) {
					r.User.AuthUser.PreferredScopesAndGitNamespaces = append(r.User.AuthUser.PreferredScopesAndGitNamespaces, preferredScopesAndGitNamespaces1)
				} else {
					r.User.AuthUser.PreferredScopesAndGitNamespaces[preferredScopesAndGitNamespacesCount].GitNamespaceID = preferredScopesAndGitNamespaces1.GitNamespaceID
					r.User.AuthUser.PreferredScopesAndGitNamespaces[preferredScopesAndGitNamespacesCount].ScopeID = preferredScopesAndGitNamespaces1.ScopeID
				}
			}
			if resp.User.AuthUser.RemoteCaching == nil {
				r.User.AuthUser.RemoteCaching = nil
			} else {
				r.User.AuthUser.RemoteCaching = &tfTypes.RemoteCaching{}
				r.User.AuthUser.RemoteCaching.Enabled = types.BoolPointerValue(resp.User.AuthUser.RemoteCaching.Enabled)
			}
			r.User.AuthUser.ResourceConfig.AwsAccountIds = []types.String{}
			for _, v := range resp.User.AuthUser.ResourceConfig.AwsAccountIds {
				r.User.AuthUser.ResourceConfig.AwsAccountIds = append(r.User.AuthUser.ResourceConfig.AwsAccountIds, types.StringValue(v))
			}
			r.User.AuthUser.ResourceConfig.AwsAccountType = types.StringPointerValue(resp.User.AuthUser.ResourceConfig.AwsAccountType)
			if resp.User.AuthUser.ResourceConfig.BlobStores != nil {
				r.User.AuthUser.ResourceConfig.BlobStores = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.BlobStores)))
			} else {
				r.User.AuthUser.ResourceConfig.BlobStores = types.NumberNull()
			}
			r.User.AuthUser.ResourceConfig.CfZoneName = types.StringPointerValue(resp.User.AuthUser.ResourceConfig.CfZoneName)
			if resp.User.AuthUser.ResourceConfig.ConcurrentBuilds != nil {
				r.User.AuthUser.ResourceConfig.ConcurrentBuilds = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.ConcurrentBuilds)))
			} else {
				r.User.AuthUser.ResourceConfig.ConcurrentBuilds = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.CronJobs != nil {
				r.User.AuthUser.ResourceConfig.CronJobs = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.CronJobs)))
			} else {
				r.User.AuthUser.ResourceConfig.CronJobs = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.CronJobsPerProject != nil {
				r.User.AuthUser.ResourceConfig.CronJobsPerProject = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.CronJobsPerProject)))
			} else {
				r.User.AuthUser.ResourceConfig.CronJobsPerProject = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.EdgeConfigs != nil {
				r.User.AuthUser.ResourceConfig.EdgeConfigs = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.EdgeConfigs)))
			} else {
				r.User.AuthUser.ResourceConfig.EdgeConfigs = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.EdgeConfigSize != nil {
				r.User.AuthUser.ResourceConfig.EdgeConfigSize = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.EdgeConfigSize)))
			} else {
				r.User.AuthUser.ResourceConfig.EdgeConfigSize = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.EdgeFunctionExecutionTimeoutMs != nil {
				r.User.AuthUser.ResourceConfig.EdgeFunctionExecutionTimeoutMs = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.EdgeFunctionExecutionTimeoutMs)))
			} else {
				r.User.AuthUser.ResourceConfig.EdgeFunctionExecutionTimeoutMs = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.EdgeFunctionMaxSizeBytes != nil {
				r.User.AuthUser.ResourceConfig.EdgeFunctionMaxSizeBytes = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.EdgeFunctionMaxSizeBytes)))
			} else {
				r.User.AuthUser.ResourceConfig.EdgeFunctionMaxSizeBytes = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.IntegrationStores != nil {
				r.User.AuthUser.ResourceConfig.IntegrationStores = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.IntegrationStores)))
			} else {
				r.User.AuthUser.ResourceConfig.IntegrationStores = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.KvDatabases != nil {
				r.User.AuthUser.ResourceConfig.KvDatabases = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.KvDatabases)))
			} else {
				r.User.AuthUser.ResourceConfig.KvDatabases = types.NumberNull()
			}
			r.User.AuthUser.ResourceConfig.NodeType = types.StringPointerValue(resp.User.AuthUser.ResourceConfig.NodeType)
			if resp.User.AuthUser.ResourceConfig.PostgresDatabases != nil {
				r.User.AuthUser.ResourceConfig.PostgresDatabases = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.PostgresDatabases)))
			} else {
				r.User.AuthUser.ResourceConfig.PostgresDatabases = types.NumberNull()
			}
			if resp.User.AuthUser.ResourceConfig.ServerlessFunctionDefaultMaxExecutionTime != nil {
				r.User.AuthUser.ResourceConfig.ServerlessFunctionDefaultMaxExecutionTime = types.NumberValue(big.NewFloat(float64(*resp.User.AuthUser.ResourceConfig.ServerlessFunctionDefaultMaxExecutionTime)))
			} else {
				r.User.AuthUser.ResourceConfig.ServerlessFunctionDefaultMaxExecutionTime = types.NumberNull()
			}
			if resp.User.AuthUser.SoftBlock == nil {
				r.User.AuthUser.SoftBlock = nil
			} else {
				r.User.AuthUser.SoftBlock = &tfTypes.SoftBlock{}
				r.User.AuthUser.SoftBlock.BlockedAt = types.NumberValue(big.NewFloat(float64(resp.User.AuthUser.SoftBlock.BlockedAt)))
				if resp.User.AuthUser.SoftBlock.BlockedDueToOverageType != nil {
					r.User.AuthUser.SoftBlock.BlockedDueToOverageType = types.StringValue(string(*resp.User.AuthUser.SoftBlock.BlockedDueToOverageType))
				} else {
					r.User.AuthUser.SoftBlock.BlockedDueToOverageType = types.StringNull()
				}
				r.User.AuthUser.SoftBlock.Reason = types.StringValue(string(resp.User.AuthUser.SoftBlock.Reason))
			}
			r.User.AuthUser.StagingPrefix = types.StringValue(resp.User.AuthUser.StagingPrefix)
			r.User.AuthUser.Username = types.StringValue(resp.User.AuthUser.Username)
			if resp.User.AuthUser.Version != nil {
				r.User.AuthUser.Version = types.StringValue(string(*resp.User.AuthUser.Version))
			} else {
				r.User.AuthUser.Version = types.StringNull()
			}
		}
		if resp.User.AuthUserLimited != nil {
			r.User.AuthUserLimited = &tfTypes.AuthUserLimited{}
			r.User.AuthUserLimited.Avatar = types.StringPointerValue(resp.User.AuthUserLimited.Avatar)
			r.User.AuthUserLimited.DefaultTeamID = types.StringPointerValue(resp.User.AuthUserLimited.DefaultTeamID)
			r.User.AuthUserLimited.Email = types.StringValue(resp.User.AuthUserLimited.Email)
			r.User.AuthUserLimited.ID = types.StringValue(resp.User.AuthUserLimited.ID)
			r.User.AuthUserLimited.Limited = types.BoolValue(resp.User.AuthUserLimited.Limited)
			r.User.AuthUserLimited.Name = types.StringPointerValue(resp.User.AuthUserLimited.Name)
			r.User.AuthUserLimited.Username = types.StringValue(resp.User.AuthUserLimited.Username)
			if resp.User.AuthUserLimited.Version != nil {
				r.User.AuthUserLimited.Version = types.StringValue(string(*resp.User.AuthUserLimited.Version))
			} else {
				r.User.AuthUserLimited.Version = types.StringNull()
			}
		}
	}
}
