// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
	"math/big"
)

func (r *DNSResourceModel) ToOperationsCreateRecordRequestBody() *operations.CreateRecordRequestBody {
	var out operations.CreateRecordRequestBody
	var requestBody1 *operations.RequestBody1
	if r.One != nil {
		name := r.One.Name.ValueString()
		typeVar := operations.RequestBodyType(r.One.Type.ValueString())
		ttl := new(float64)
		if !r.One.TTL.IsUnknown() && !r.One.TTL.IsNull() {
			*ttl, _ = r.One.TTL.ValueBigFloat().Float64()
		} else {
			ttl = nil
		}
		value := r.One.Value.ValueString()
		comment := new(string)
		if !r.One.Comment.IsUnknown() && !r.One.Comment.IsNull() {
			*comment = r.One.Comment.ValueString()
		} else {
			comment = nil
		}
		requestBody1 = &operations.RequestBody1{
			Name:    name,
			Type:    typeVar,
			TTL:     ttl,
			Value:   value,
			Comment: comment,
		}
	}
	if requestBody1 != nil {
		out = operations.CreateRecordRequestBody{
			RequestBody1: requestBody1,
		}
	}
	var requestBody2 *operations.RequestBody2
	if r.Two != nil {
		name1 := r.Two.Name.ValueString()
		typeVar1 := operations.CreateRecordRequestBodyType(r.Two.Type.ValueString())
		ttl1 := new(float64)
		if !r.Two.TTL.IsUnknown() && !r.Two.TTL.IsNull() {
			*ttl1, _ = r.Two.TTL.ValueBigFloat().Float64()
		} else {
			ttl1 = nil
		}
		value1 := r.Two.Value.ValueString()
		comment1 := new(string)
		if !r.Two.Comment.IsUnknown() && !r.Two.Comment.IsNull() {
			*comment1 = r.Two.Comment.ValueString()
		} else {
			comment1 = nil
		}
		requestBody2 = &operations.RequestBody2{
			Name:    name1,
			Type:    typeVar1,
			TTL:     ttl1,
			Value:   value1,
			Comment: comment1,
		}
	}
	if requestBody2 != nil {
		out = operations.CreateRecordRequestBody{
			RequestBody2: requestBody2,
		}
	}
	var requestBody3 *operations.RequestBody3
	if r.Three != nil {
		name2 := r.Three.Name.ValueString()
		typeVar2 := operations.CreateRecordRequestBodyDNSType(r.Three.Type.ValueString())
		ttl2 := new(float64)
		if !r.Three.TTL.IsUnknown() && !r.Three.TTL.IsNull() {
			*ttl2, _ = r.Three.TTL.ValueBigFloat().Float64()
		} else {
			ttl2 = nil
		}
		value2 := r.Three.Value.ValueString()
		comment2 := new(string)
		if !r.Three.Comment.IsUnknown() && !r.Three.Comment.IsNull() {
			*comment2 = r.Three.Comment.ValueString()
		} else {
			comment2 = nil
		}
		requestBody3 = &operations.RequestBody3{
			Name:    name2,
			Type:    typeVar2,
			TTL:     ttl2,
			Value:   value2,
			Comment: comment2,
		}
	}
	if requestBody3 != nil {
		out = operations.CreateRecordRequestBody{
			RequestBody3: requestBody3,
		}
	}
	var requestBody4 *operations.RequestBody4
	if r.Four != nil {
		name3 := r.Four.Name.ValueString()
		typeVar3 := operations.CreateRecordRequestBodyDNSRequestType(r.Four.Type.ValueString())
		ttl3 := new(float64)
		if !r.Four.TTL.IsUnknown() && !r.Four.TTL.IsNull() {
			*ttl3, _ = r.Four.TTL.ValueBigFloat().Float64()
		} else {
			ttl3 = nil
		}
		value3 := r.Four.Value.ValueString()
		comment3 := new(string)
		if !r.Four.Comment.IsUnknown() && !r.Four.Comment.IsNull() {
			*comment3 = r.Four.Comment.ValueString()
		} else {
			comment3 = nil
		}
		requestBody4 = &operations.RequestBody4{
			Name:    name3,
			Type:    typeVar3,
			TTL:     ttl3,
			Value:   value3,
			Comment: comment3,
		}
	}
	if requestBody4 != nil {
		out = operations.CreateRecordRequestBody{
			RequestBody4: requestBody4,
		}
	}
	var requestBody5 *operations.RequestBody5
	if r.Five != nil {
		name4 := r.Five.Name.ValueString()
		typeVar4 := operations.CreateRecordRequestBodyDNSRequest5Type(r.Five.Type.ValueString())
		ttl4 := new(float64)
		if !r.Five.TTL.IsUnknown() && !r.Five.TTL.IsNull() {
			*ttl4, _ = r.Five.TTL.ValueBigFloat().Float64()
		} else {
			ttl4 = nil
		}
		value4 := new(string)
		if !r.Five.Value.IsUnknown() && !r.Five.Value.IsNull() {
			*value4 = r.Five.Value.ValueString()
		} else {
			value4 = nil
		}
		comment4 := new(string)
		if !r.Five.Comment.IsUnknown() && !r.Five.Comment.IsNull() {
			*comment4 = r.Five.Comment.ValueString()
		} else {
			comment4 = nil
		}
		requestBody5 = &operations.RequestBody5{
			Name:    name4,
			Type:    typeVar4,
			TTL:     ttl4,
			Value:   value4,
			Comment: comment4,
		}
	}
	if requestBody5 != nil {
		out = operations.CreateRecordRequestBody{
			RequestBody5: requestBody5,
		}
	}
	var six *operations.Six
	if r.Six != nil {
		name5 := r.Six.Name.ValueString()
		typeVar5 := operations.CreateRecordRequestBodyDNSRequest6Type(r.Six.Type.ValueString())
		ttl5 := new(float64)
		if !r.Six.TTL.IsUnknown() && !r.Six.TTL.IsNull() {
			*ttl5, _ = r.Six.TTL.ValueBigFloat().Float64()
		} else {
			ttl5 = nil
		}
		value5 := r.Six.Value.ValueString()
		mxPriority, _ := r.Six.MxPriority.ValueBigFloat().Float64()
		comment5 := new(string)
		if !r.Six.Comment.IsUnknown() && !r.Six.Comment.IsNull() {
			*comment5 = r.Six.Comment.ValueString()
		} else {
			comment5 = nil
		}
		six = &operations.Six{
			Name:       name5,
			Type:       typeVar5,
			TTL:        ttl5,
			Value:      value5,
			MxPriority: mxPriority,
			Comment:    comment5,
		}
	}
	if six != nil {
		out = operations.CreateRecordRequestBody{
			Six: six,
		}
	}
	var seven *operations.Seven
	if r.Seven != nil {
		name6 := r.Seven.Name.ValueString()
		typeVar6 := operations.CreateRecordRequestBodyDNSRequest7Type(r.Seven.Type.ValueString())
		ttl6 := new(float64)
		if !r.Seven.TTL.IsUnknown() && !r.Seven.TTL.IsNull() {
			*ttl6, _ = r.Seven.TTL.ValueBigFloat().Float64()
		} else {
			ttl6 = nil
		}
		priority := new(float64)
		if !r.Seven.Srv.Priority.IsUnknown() && !r.Seven.Srv.Priority.IsNull() {
			*priority, _ = r.Seven.Srv.Priority.ValueBigFloat().Float64()
		} else {
			priority = nil
		}
		weight := new(float64)
		if !r.Seven.Srv.Weight.IsUnknown() && !r.Seven.Srv.Weight.IsNull() {
			*weight, _ = r.Seven.Srv.Weight.ValueBigFloat().Float64()
		} else {
			weight = nil
		}
		port := new(float64)
		if !r.Seven.Srv.Port.IsUnknown() && !r.Seven.Srv.Port.IsNull() {
			*port, _ = r.Seven.Srv.Port.ValueBigFloat().Float64()
		} else {
			port = nil
		}
		target := r.Seven.Srv.Target.ValueString()
		srv := operations.RequestBodySrv{
			Priority: priority,
			Weight:   weight,
			Port:     port,
			Target:   target,
		}
		comment6 := new(string)
		if !r.Seven.Comment.IsUnknown() && !r.Seven.Comment.IsNull() {
			*comment6 = r.Seven.Comment.ValueString()
		} else {
			comment6 = nil
		}
		seven = &operations.Seven{
			Name:    name6,
			Type:    typeVar6,
			TTL:     ttl6,
			Srv:     srv,
			Comment: comment6,
		}
	}
	if seven != nil {
		out = operations.CreateRecordRequestBody{
			Seven: seven,
		}
	}
	var eight *operations.Eight
	if r.Eight != nil {
		name7 := r.Eight.Name.ValueString()
		typeVar7 := operations.CreateRecordRequestBodyDNSRequest8Type(r.Eight.Type.ValueString())
		ttl7 := new(float64)
		if !r.Eight.TTL.IsUnknown() && !r.Eight.TTL.IsNull() {
			*ttl7, _ = r.Eight.TTL.ValueBigFloat().Float64()
		} else {
			ttl7 = nil
		}
		value6 := r.Eight.Value.ValueString()
		comment7 := new(string)
		if !r.Eight.Comment.IsUnknown() && !r.Eight.Comment.IsNull() {
			*comment7 = r.Eight.Comment.ValueString()
		} else {
			comment7 = nil
		}
		eight = &operations.Eight{
			Name:    name7,
			Type:    typeVar7,
			TTL:     ttl7,
			Value:   value6,
			Comment: comment7,
		}
	}
	if eight != nil {
		out = operations.CreateRecordRequestBody{
			Eight: eight,
		}
	}
	var nine *operations.Nine
	if r.Nine != nil {
		name8 := r.Nine.Name.ValueString()
		typeVar8 := operations.CreateRecordRequestBodyDNSRequest9Type(r.Nine.Type.ValueString())
		ttl8 := new(float64)
		if !r.Nine.TTL.IsUnknown() && !r.Nine.TTL.IsNull() {
			*ttl8, _ = r.Nine.TTL.ValueBigFloat().Float64()
		} else {
			ttl8 = nil
		}
		value7 := new(string)
		if !r.Nine.Value.IsUnknown() && !r.Nine.Value.IsNull() {
			*value7 = r.Nine.Value.ValueString()
		} else {
			value7 = nil
		}
		comment8 := new(string)
		if !r.Nine.Comment.IsUnknown() && !r.Nine.Comment.IsNull() {
			*comment8 = r.Nine.Comment.ValueString()
		} else {
			comment8 = nil
		}
		nine = &operations.Nine{
			Name:    name8,
			Type:    typeVar8,
			TTL:     ttl8,
			Value:   value7,
			Comment: comment8,
		}
	}
	if nine != nil {
		out = operations.CreateRecordRequestBody{
			Nine: nine,
		}
	}
	var ten *operations.Ten
	if r.Ten != nil {
		name9 := r.Ten.Name.ValueString()
		typeVar9 := operations.CreateRecordRequestBodyDNSRequest10Type(r.Ten.Type.ValueString())
		ttl9 := new(float64)
		if !r.Ten.TTL.IsUnknown() && !r.Ten.TTL.IsNull() {
			*ttl9, _ = r.Ten.TTL.ValueBigFloat().Float64()
		} else {
			ttl9 = nil
		}
		priority1 := new(float64)
		if !r.Ten.HTTPS.Priority.IsUnknown() && !r.Ten.HTTPS.Priority.IsNull() {
			*priority1, _ = r.Ten.HTTPS.Priority.ValueBigFloat().Float64()
		} else {
			priority1 = nil
		}
		target1 := r.Ten.HTTPS.Target.ValueString()
		params := new(string)
		if !r.Ten.HTTPS.Params.IsUnknown() && !r.Ten.HTTPS.Params.IsNull() {
			*params = r.Ten.HTTPS.Params.ValueString()
		} else {
			params = nil
		}
		https := operations.RequestBodyHTTPS{
			Priority: priority1,
			Target:   target1,
			Params:   params,
		}
		comment9 := new(string)
		if !r.Ten.Comment.IsUnknown() && !r.Ten.Comment.IsNull() {
			*comment9 = r.Ten.Comment.ValueString()
		} else {
			comment9 = nil
		}
		ten = &operations.Ten{
			Name:    name9,
			Type:    typeVar9,
			TTL:     ttl9,
			HTTPS:   https,
			Comment: comment9,
		}
	}
	if ten != nil {
		out = operations.CreateRecordRequestBody{
			Ten: ten,
		}
	}
	return &out
}

func (r *DNSResourceModel) RefreshFromOperationsCreateRecordResponseBody(resp *operations.CreateRecordResponseBody) {
	if resp != nil {
		if resp.CreateRecordResponseBody1 != nil {
			r.One = &tfTypes.RequestBody1{}
			r.One.UID = types.StringValue(resp.CreateRecordResponseBody1.UID)
			r.UID = r.One.UID
			r.One.Updated = types.NumberValue(big.NewFloat(float64(resp.CreateRecordResponseBody1.Updated)))
		}
		if resp.CreateRecordResponseBody != nil {
			r.Ten = &tfTypes.Ten{}
		}
		if resp.CreateRecordResponseBody2 != nil {
			r.Two = &tfTypes.RequestBody2{}
			r.Two.UID = types.StringValue(resp.CreateRecordResponseBody2.UID)
			r.UID = r.Two.UID
		}
		if resp.CreateRecordResponseBody != nil {
			r.Three = &tfTypes.Eight{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Four = &tfTypes.Eight{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Five = &tfTypes.RequestBody5{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Six = &tfTypes.Six{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Seven = &tfTypes.Seven{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Eight = &tfTypes.Eight{}
		}
		if resp.CreateRecordResponseBody != nil {
			r.Nine = &tfTypes.RequestBody5{}
		}
	}
}
