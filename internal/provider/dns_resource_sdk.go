// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/models/operations"
)

func (r *DNSResourceModel) ToOperationsCreateRecordRequestBody() *operations.CreateRecordRequestBody {
	var out operations.CreateRecordRequestBody
	var a *operations.A
	if r.A != nil {
		name := r.A.Name.ValueString()
		ttl := new(float64)
		if !r.A.TTL.IsUnknown() && !r.A.TTL.IsNull() {
			*ttl, _ = r.A.TTL.ValueBigFloat().Float64()
		} else {
			ttl = nil
		}
		value := r.A.Value.ValueString()
		comment := new(string)
		if !r.A.Comment.IsUnknown() && !r.A.Comment.IsNull() {
			*comment = r.A.Comment.ValueString()
		} else {
			comment = nil
		}
		a = &operations.A{
			Name:    name,
			TTL:     ttl,
			Value:   value,
			Comment: comment,
		}
	}
	if a != nil {
		out = operations.CreateRecordRequestBody{
			A: a,
		}
	}
	var aaaa *operations.Aaaa
	if r.Aaaa != nil {
		name1 := r.Aaaa.Name.ValueString()
		ttl1 := new(float64)
		if !r.Aaaa.TTL.IsUnknown() && !r.Aaaa.TTL.IsNull() {
			*ttl1, _ = r.Aaaa.TTL.ValueBigFloat().Float64()
		} else {
			ttl1 = nil
		}
		value1 := r.Aaaa.Value.ValueString()
		comment1 := new(string)
		if !r.Aaaa.Comment.IsUnknown() && !r.Aaaa.Comment.IsNull() {
			*comment1 = r.Aaaa.Comment.ValueString()
		} else {
			comment1 = nil
		}
		aaaa = &operations.Aaaa{
			Name:    name1,
			TTL:     ttl1,
			Value:   value1,
			Comment: comment1,
		}
	}
	if aaaa != nil {
		out = operations.CreateRecordRequestBody{
			Aaaa: aaaa,
		}
	}
	var alias *operations.Alias
	if r.Alias != nil {
		name2 := r.Alias.Name.ValueString()
		ttl2 := new(float64)
		if !r.Alias.TTL.IsUnknown() && !r.Alias.TTL.IsNull() {
			*ttl2, _ = r.Alias.TTL.ValueBigFloat().Float64()
		} else {
			ttl2 = nil
		}
		value2 := r.Alias.Value.ValueString()
		comment2 := new(string)
		if !r.Alias.Comment.IsUnknown() && !r.Alias.Comment.IsNull() {
			*comment2 = r.Alias.Comment.ValueString()
		} else {
			comment2 = nil
		}
		alias = &operations.Alias{
			Name:    name2,
			TTL:     ttl2,
			Value:   value2,
			Comment: comment2,
		}
	}
	if alias != nil {
		out = operations.CreateRecordRequestBody{
			Alias: alias,
		}
	}
	var caa *operations.Caa
	if r.Caa != nil {
		name3 := r.Caa.Name.ValueString()
		ttl3 := new(float64)
		if !r.Caa.TTL.IsUnknown() && !r.Caa.TTL.IsNull() {
			*ttl3, _ = r.Caa.TTL.ValueBigFloat().Float64()
		} else {
			ttl3 = nil
		}
		value3 := r.Caa.Value.ValueString()
		comment3 := new(string)
		if !r.Caa.Comment.IsUnknown() && !r.Caa.Comment.IsNull() {
			*comment3 = r.Caa.Comment.ValueString()
		} else {
			comment3 = nil
		}
		caa = &operations.Caa{
			Name:    name3,
			TTL:     ttl3,
			Value:   value3,
			Comment: comment3,
		}
	}
	if caa != nil {
		out = operations.CreateRecordRequestBody{
			Caa: caa,
		}
	}
	var cname *operations.Cname
	if r.Cname != nil {
		name4 := r.Cname.Name.ValueString()
		ttl4 := new(float64)
		if !r.Cname.TTL.IsUnknown() && !r.Cname.TTL.IsNull() {
			*ttl4, _ = r.Cname.TTL.ValueBigFloat().Float64()
		} else {
			ttl4 = nil
		}
		value4 := new(string)
		if !r.Cname.Value.IsUnknown() && !r.Cname.Value.IsNull() {
			*value4 = r.Cname.Value.ValueString()
		} else {
			value4 = nil
		}
		comment4 := new(string)
		if !r.Cname.Comment.IsUnknown() && !r.Cname.Comment.IsNull() {
			*comment4 = r.Cname.Comment.ValueString()
		} else {
			comment4 = nil
		}
		cname = &operations.Cname{
			Name:    name4,
			TTL:     ttl4,
			Value:   value4,
			Comment: comment4,
		}
	}
	if cname != nil {
		out = operations.CreateRecordRequestBody{
			Cname: cname,
		}
	}
	var mx *operations.Mx
	if r.Mx != nil {
		name5 := r.Mx.Name.ValueString()
		ttl5 := new(float64)
		if !r.Mx.TTL.IsUnknown() && !r.Mx.TTL.IsNull() {
			*ttl5, _ = r.Mx.TTL.ValueBigFloat().Float64()
		} else {
			ttl5 = nil
		}
		value5 := r.Mx.Value.ValueString()
		mxPriority, _ := r.Mx.MxPriority.ValueBigFloat().Float64()
		comment5 := new(string)
		if !r.Mx.Comment.IsUnknown() && !r.Mx.Comment.IsNull() {
			*comment5 = r.Mx.Comment.ValueString()
		} else {
			comment5 = nil
		}
		mx = &operations.Mx{
			Name:       name5,
			TTL:        ttl5,
			Value:      value5,
			MxPriority: mxPriority,
			Comment:    comment5,
		}
	}
	if mx != nil {
		out = operations.CreateRecordRequestBody{
			Mx: mx,
		}
	}
	var requestBodySRV *operations.RequestBodySRV
	if r.Srv != nil {
		name6 := r.Srv.Name.ValueString()
		ttl6 := new(float64)
		if !r.Srv.TTL.IsUnknown() && !r.Srv.TTL.IsNull() {
			*ttl6, _ = r.Srv.TTL.ValueBigFloat().Float64()
		} else {
			ttl6 = nil
		}
		priority := new(float64)
		if !r.Srv.Srv.Priority.IsUnknown() && !r.Srv.Srv.Priority.IsNull() {
			*priority, _ = r.Srv.Srv.Priority.ValueBigFloat().Float64()
		} else {
			priority = nil
		}
		weight := new(float64)
		if !r.Srv.Srv.Weight.IsUnknown() && !r.Srv.Srv.Weight.IsNull() {
			*weight, _ = r.Srv.Srv.Weight.ValueBigFloat().Float64()
		} else {
			weight = nil
		}
		port := new(float64)
		if !r.Srv.Srv.Port.IsUnknown() && !r.Srv.Srv.Port.IsNull() {
			*port, _ = r.Srv.Srv.Port.ValueBigFloat().Float64()
		} else {
			port = nil
		}
		target := r.Srv.Srv.Target.ValueString()
		srv := operations.CreateRecordRequestBodySrv{
			Priority: priority,
			Weight:   weight,
			Port:     port,
			Target:   target,
		}
		comment6 := new(string)
		if !r.Srv.Comment.IsUnknown() && !r.Srv.Comment.IsNull() {
			*comment6 = r.Srv.Comment.ValueString()
		} else {
			comment6 = nil
		}
		requestBodySRV = &operations.RequestBodySRV{
			Name:    name6,
			TTL:     ttl6,
			Srv:     srv,
			Comment: comment6,
		}
	}
	if requestBodySRV != nil {
		out = operations.CreateRecordRequestBody{
			RequestBodySRV: requestBodySRV,
		}
	}
	var txt *operations.Txt
	if r.Txt != nil {
		name7 := r.Txt.Name.ValueString()
		ttl7 := new(float64)
		if !r.Txt.TTL.IsUnknown() && !r.Txt.TTL.IsNull() {
			*ttl7, _ = r.Txt.TTL.ValueBigFloat().Float64()
		} else {
			ttl7 = nil
		}
		value6 := r.Txt.Value.ValueString()
		comment7 := new(string)
		if !r.Txt.Comment.IsUnknown() && !r.Txt.Comment.IsNull() {
			*comment7 = r.Txt.Comment.ValueString()
		} else {
			comment7 = nil
		}
		txt = &operations.Txt{
			Name:    name7,
			TTL:     ttl7,
			Value:   value6,
			Comment: comment7,
		}
	}
	if txt != nil {
		out = operations.CreateRecordRequestBody{
			Txt: txt,
		}
	}
	var ns *operations.Ns
	if r.Ns != nil {
		name8 := r.Ns.Name.ValueString()
		ttl8 := new(float64)
		if !r.Ns.TTL.IsUnknown() && !r.Ns.TTL.IsNull() {
			*ttl8, _ = r.Ns.TTL.ValueBigFloat().Float64()
		} else {
			ttl8 = nil
		}
		value7 := new(string)
		if !r.Ns.Value.IsUnknown() && !r.Ns.Value.IsNull() {
			*value7 = r.Ns.Value.ValueString()
		} else {
			value7 = nil
		}
		comment8 := new(string)
		if !r.Ns.Comment.IsUnknown() && !r.Ns.Comment.IsNull() {
			*comment8 = r.Ns.Comment.ValueString()
		} else {
			comment8 = nil
		}
		ns = &operations.Ns{
			Name:    name8,
			TTL:     ttl8,
			Value:   value7,
			Comment: comment8,
		}
	}
	if ns != nil {
		out = operations.CreateRecordRequestBody{
			Ns: ns,
		}
	}
	var requestBodyHTTPS *operations.RequestBodyHTTPS
	if r.HTTPS != nil {
		name9 := r.HTTPS.Name.ValueString()
		ttl9 := new(float64)
		if !r.HTTPS.TTL.IsUnknown() && !r.HTTPS.TTL.IsNull() {
			*ttl9, _ = r.HTTPS.TTL.ValueBigFloat().Float64()
		} else {
			ttl9 = nil
		}
		priority1 := new(float64)
		if !r.HTTPS.HTTPS.Priority.IsUnknown() && !r.HTTPS.HTTPS.Priority.IsNull() {
			*priority1, _ = r.HTTPS.HTTPS.Priority.ValueBigFloat().Float64()
		} else {
			priority1 = nil
		}
		target1 := r.HTTPS.HTTPS.Target.ValueString()
		params := new(string)
		if !r.HTTPS.HTTPS.Params.IsUnknown() && !r.HTTPS.HTTPS.Params.IsNull() {
			*params = r.HTTPS.HTTPS.Params.ValueString()
		} else {
			params = nil
		}
		https := operations.CreateRecordRequestBodyHTTPS{
			Priority: priority1,
			Target:   target1,
			Params:   params,
		}
		comment9 := new(string)
		if !r.HTTPS.Comment.IsUnknown() && !r.HTTPS.Comment.IsNull() {
			*comment9 = r.HTTPS.Comment.ValueString()
		} else {
			comment9 = nil
		}
		requestBodyHTTPS = &operations.RequestBodyHTTPS{
			Name:    name9,
			TTL:     ttl9,
			HTTPS:   https,
			Comment: comment9,
		}
	}
	if requestBodyHTTPS != nil {
		out = operations.CreateRecordRequestBody{
			RequestBodyHTTPS: requestBodyHTTPS,
		}
	}
	return &out
}

func (r *DNSResourceModel) RefreshFromOperationsCreateRecordResponseBody(resp *operations.CreateRecordResponseBody) {
	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
	}
}
