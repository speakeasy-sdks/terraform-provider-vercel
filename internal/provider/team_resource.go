// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/vercel/terraform-provider-vercel/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/vercel/terraform-provider-vercel/internal/provider/types"
	"github.com/vercel/terraform-provider-vercel/internal/sdk"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &TeamResource{}
var _ resource.ResourceWithImportState = &TeamResource{}

func NewTeamResource() resource.Resource {
	return &TeamResource{}
}

// TeamResource defines the resource implementation.
type TeamResource struct {
	client *sdk.SDK
}

// TeamResourceModel describes the resource data model.
type TeamResourceModel struct {
	Attribution      *tfTypes.Attribution `tfsdk:"attribution"`
	Billing          tfTypes.Billing      `tfsdk:"billing"`
	ID               types.String         `tfsdk:"id"`
	Name             types.String         `tfsdk:"name"`
	NewDefaultTeamID types.String         `tfsdk:"new_default_team_id"`
	Reasons          []tfTypes.Reasons    `tfsdk:"reasons"`
	Slug             types.String         `tfsdk:"slug"`
}

func (r *TeamResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_team"
}

func (r *TeamResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Team Resource",
		Attributes: map[string]schema.Attribute{
			"attribution": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"landing_page": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `Session landing page. Requires replacement if changed. `,
					},
					"page_before_conversion_page": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `Referrer to the signup page. Requires replacement if changed. `,
					},
					"session_referrer": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `Session referrer. Requires replacement if changed. `,
					},
					"utm": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"utm_campaign": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Description: `UTM campaign. Requires replacement if changed. `,
							},
							"utm_medium": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Description: `UTM medium. Requires replacement if changed. `,
							},
							"utm_source": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Description: `UTM source. Requires replacement if changed. `,
							},
							"utm_term": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Description: `UTM term. Requires replacement if changed. `,
							},
						},
						Description: `Requires replacement if changed. `,
					},
				},
				Description: `Attribution information for the session or current page. Requires replacement if changed. `,
			},
			"billing": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"address": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"city": schema.StringAttribute{
								Computed: true,
							},
							"country": schema.StringAttribute{
								Computed: true,
							},
							"line1": schema.StringAttribute{
								Computed: true,
							},
							"line2": schema.StringAttribute{
								Computed: true,
							},
							"postal_code": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"cancelation": schema.NumberAttribute{
						Computed: true,
					},
					"contract": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"end": schema.NumberAttribute{
								Computed: true,
							},
							"start": schema.NumberAttribute{
								Computed: true,
							},
						},
					},
					"controls": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"analytics_sample_rate_in_percent": schema.NumberAttribute{
								Computed: true,
							},
							"analytics_spend_limit_in_dollars": schema.NumberAttribute{
								Computed: true,
							},
						},
					},
					"currency": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["usd", "eur"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"usd",
								"eur",
							),
						},
					},
					"email": schema.StringAttribute{
						Computed: true,
					},
					"invoice_items": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"analytics": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"analytics_usage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"artifacts": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"bandwidth": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"blob_stores": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"blob_total_advanced_requests": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"blob_total_avg_size_in_bytes": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"blob_total_get_response_object_size_in_bytes": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"blob_total_simple_requests": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"build_minute": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"concurrent_builds": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"data_cache_read": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"data_cache_revalidation": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"data_cache_write": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_config_read": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_config_write": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_function_execution_units": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_middleware_invocations": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_request": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"edge_request_additional_cpu_duration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"enterprise": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"fast_data_transfer": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"fast_origin_transfer": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"function_duration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"function_invocation": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"log_drains_volume": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"monitoring": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"monitoring_metric": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"password_protection": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"postgres_compute_time": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"postgres_database": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"postgres_data_storage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"postgres_data_transfer": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"postgres_written_data": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"preview_deployment_suffix": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"pro": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"saml": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"serverless_function_execution": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"source_images": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"storage_redis_total_bandwidth_in_bytes": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"storage_redis_total_commands": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"storage_redis_total_daily_avg_storage_in_bytes": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"storage_redis_total_databases": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"team_seats": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"waf_owasp_excess_bytes": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"waf_owasp_requests": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
							"web_analytics": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"created_at": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"frequency": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"interval": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["month"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"month",
													),
												},
											},
											"interval_count": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"highest_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"max_quantity": schema.NumberAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"quantity": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
								Description: `Will be used to create an invoice item. The price must be in cents: 2000 for $20.`,
							},
							"web_analytics_event": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"batch": schema.NumberAttribute{
										Computed: true,
									},
									"disabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"enabled_at": schema.NumberAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"matrix": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"default_unit_price": schema.StringAttribute{
												Computed: true,
											},
											"dimension_prices": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"price": schema.NumberAttribute{
										Computed: true,
									},
									"threshold": schema.NumberAttribute{
										Computed: true,
									},
									"tier": schema.NumberAttribute{
										Computed: true,
									},
								},
							},
						},
					},
					"invoice_settings": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"footer": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"language": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"orb_customer_id": schema.StringAttribute{
						Computed: true,
					},
					"orb_migration_scheduled_at": schema.NumberAttribute{
						Computed: true,
					},
					"period": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"end": schema.NumberAttribute{
								Computed: true,
							},
							"start": schema.NumberAttribute{
								Computed: true,
							},
						},
					},
					"plan": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["pro", "enterprise", "hobby"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"pro",
								"enterprise",
								"hobby",
							),
						},
					},
					"plan_iteration": schema.StringAttribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["stripe", "stripeTestMode"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"stripe",
								"stripeTestMode",
							),
						},
					},
					"pricing_experiment": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["august-2022"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"august-2022",
							),
						},
					},
					"program_type": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["startup", "agency"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"startup",
								"agency",
							),
						},
					},
					"purchase_order": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["active", "trialing", "overdue", "expired", "canceled"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"active",
								"trialing",
								"overdue",
								"expired",
								"canceled",
							),
						},
					},
					"subscriptions": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"discount": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"coupon": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"amount_off": schema.NumberAttribute{
													Computed: true,
												},
												"duration": schema.StringAttribute{
													Computed:    true,
													Description: `must be one of ["forever", "repeating", "once"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"forever",
															"repeating",
															"once",
														),
													},
												},
												"duration_in_months": schema.NumberAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"percentage_off": schema.NumberAttribute{
													Computed: true,
												},
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"frequency": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"interval": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["month", "day", "week", "year"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"month",
													"day",
													"week",
													"year",
												),
											},
										},
										"interval_count": schema.NumberAttribute{
											Computed: true,
										},
									},
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"items": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"amount": schema.NumberAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"price_id": schema.StringAttribute{
												Computed: true,
											},
											"product_id": schema.StringAttribute{
												Computed: true,
											},
											"quantity": schema.NumberAttribute{
												Computed: true,
											},
										},
									},
								},
								"period": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"end": schema.NumberAttribute{
											Computed: true,
										},
										"start": schema.NumberAttribute{
											Computed: true,
										},
									},
								},
								"trial": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"end": schema.NumberAttribute{
											Computed: true,
										},
										"start": schema.NumberAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"synced_at": schema.NumberAttribute{
						Computed: true,
					},
					"tax": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"trial": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"end": schema.NumberAttribute{
								Computed: true,
							},
							"start": schema.NumberAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The Team identifier to perform the request on behalf of.`,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `The desired name for the Team. It will be generated from the provided slug if nothing is provided. Requires replacement if changed. `,
			},
			"new_default_team_id": schema.StringAttribute{
				Optional:    true,
				Description: `Id of the team to be set as the new default team`,
			},
			"reasons": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"slug": schema.StringAttribute{
							Required:    true,
							Description: `Idenitifier slug of the reason why the team is being deleted.`,
						},
						"description": schema.StringAttribute{
							Required:    true,
							Description: `Description of the reason why the team is being deleted.`,
						},
					},
				},
				Description: `Optional array of objects that describe the reason why the team is being deleted.`,
			},
			"slug": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `The Team slug to perform the request on behalf of. Requires replacement if changed. `,
			},
		},
	}
}

func (r *TeamResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TeamResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *TeamResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToOperationsCreateTeamRequestBody()
	res, err := r.client.Teams.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsCreateTeamResponseBody(res.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	teamID := data.ID.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	request1 := operations.GetTeamRequest{
		TeamID: teamID,
		Slug:   slug,
	}
	res1, err := r.client.Teams.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedTeam(res1.Team)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *TeamResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	teamID := data.ID.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	request := operations.GetTeamRequest{
		TeamID: teamID,
		Slug:   slug,
	}
	res, err := r.client.Teams.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Team != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTeam(res.Team)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *TeamResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TeamResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *TeamResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	newDefaultTeamID := new(string)
	if !data.NewDefaultTeamID.IsUnknown() && !data.NewDefaultTeamID.IsNull() {
		*newDefaultTeamID = data.NewDefaultTeamID.ValueString()
	} else {
		newDefaultTeamID = nil
	}
	teamID := data.ID.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	request := operations.DeleteTeamRequest{
		NewDefaultTeamID: newDefaultTeamID,
		TeamID:           teamID,
		Slug:             slug,
	}
	res, err := r.client.Teams.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *TeamResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("team_id"), req.ID)...)
}
