// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/numberplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/vercel/terraform-provider-vercel/internal/provider/types"
	"github.com/vercel/terraform-provider-vercel/internal/sdk"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DNSResource{}
var _ resource.ResourceWithImportState = &DNSResource{}

func NewDNSResource() resource.Resource {
	return &DNSResource{}
}

// DNSResource defines the resource implementation.
type DNSResource struct {
	client *sdk.SDK
}

// DNSResourceModel describes the resource data model.
type DNSResourceModel struct {
	A      *tfTypes.A                `tfsdk:"a" tfPlanOnly:"true"`
	Aaaa   *tfTypes.A                `tfsdk:"aaaa" tfPlanOnly:"true"`
	Alias  *tfTypes.A                `tfsdk:"alias" tfPlanOnly:"true"`
	Caa    *tfTypes.A                `tfsdk:"caa" tfPlanOnly:"true"`
	Cname  *tfTypes.Cname            `tfsdk:"cname" tfPlanOnly:"true"`
	Domain types.String              `tfsdk:"domain"`
	HTTPS  *tfTypes.RequestBodyHTTPS `tfsdk:"https" tfPlanOnly:"true"`
	ID     types.String              `tfsdk:"id"`
	Mx     *tfTypes.Mx               `tfsdk:"mx" tfPlanOnly:"true"`
	Ns     *tfTypes.Cname            `tfsdk:"ns" tfPlanOnly:"true"`
	Slug   types.String              `tfsdk:"slug"`
	Srv    *tfTypes.RequestBodySRV   `tfsdk:"srv" tfPlanOnly:"true"`
	TeamID types.String              `tfsdk:"team_id"`
	Txt    *tfTypes.A                `tfsdk:"txt" tfPlanOnly:"true"`
}

func (r *DNSResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns"
}

func (r *DNSResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DNS Resource",
		Attributes: map[string]schema.Attribute{
			"a": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `The record value must be a valid IPv4 address. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"aaaa": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `An AAAA record pointing to an IPv6 address. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"alias": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `An ALIAS virtual record pointing to a hostname resolved to an A record on server side. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"caa": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"cname": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A CNAME record mapping to another domain name. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"domain": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The domain used to create the DNS record. Requires replacement if changed. `,
			},
			"https": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"https": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required: true,
						Attributes: map[string]schema.Attribute{
							"params": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Optional:    true,
								Description: `Requires replacement if changed. `,
							},
							"priority": schema.NumberAttribute{
								PlanModifiers: []planmodifier.Number{
									numberplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
							"target": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
						},
						Description: `Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the newly created DNS record`,
			},
			"mx": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"mx_priority": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `An MX record specifying the mail server responsible for accepting messages on behalf of the domain name. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"ns": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `An NS domain value. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("srv"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"slug": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `The Team slug to perform the request on behalf of. Requires replacement if changed. `,
			},
			"srv": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"srv": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required: true,
						Attributes: map[string]schema.Attribute{
							"port": schema.NumberAttribute{
								PlanModifiers: []planmodifier.Number{
									numberplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
							"priority": schema.NumberAttribute{
								PlanModifiers: []planmodifier.Number{
									numberplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
							"target": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
							"weight": schema.NumberAttribute{
								PlanModifiers: []planmodifier.Number{
									numberplanmodifier.RequiresReplaceIfConfigured(),
								},
								Required:    true,
								Description: `Requires replacement if changed. `,
							},
						},
						Description: `Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("txt"),
					}...),
				},
			},
			"team_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `The Team identifier to perform the request on behalf of. Requires replacement if changed. `,
			},
			"txt": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `A comment to add context on what this DNS record is for. Requires replacement if changed. `,
					},
					"name": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A subdomain name or an empty string for the root domain. Requires replacement if changed. `,
					},
					"ttl": schema.NumberAttribute{
						PlanModifiers: []planmodifier.Number{
							numberplanmodifier.RequiresReplaceIfConfigured(),
						},
						Optional:    true,
						Description: `The TTL value. Must be a number between 60 and 2147483647. Default value is 60. Requires replacement if changed. `,
					},
					"value": schema.StringAttribute{
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
						Required:    true,
						Description: `A TXT record containing arbitrary text. Requires replacement if changed. `,
					},
				},
				Description: `Requires replacement if changed. `,
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("a"),
						path.MatchRelative().AtParent().AtName("aaaa"),
						path.MatchRelative().AtParent().AtName("alias"),
						path.MatchRelative().AtParent().AtName("caa"),
						path.MatchRelative().AtParent().AtName("cname"),
						path.MatchRelative().AtParent().AtName("https"),
						path.MatchRelative().AtParent().AtName("mx"),
						path.MatchRelative().AtParent().AtName("ns"),
						path.MatchRelative().AtParent().AtName("srv"),
					}...),
				},
			},
		},
	}
}

func (r *DNSResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DNSResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DNSResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	domain := data.Domain.ValueString()
	teamID := new(string)
	if !data.TeamID.IsUnknown() && !data.TeamID.IsNull() {
		*teamID = data.TeamID.ValueString()
	} else {
		teamID = nil
	}
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	requestBody := data.ToOperationsCreateRecordRequestBody()
	request := operations.CreateRecordRequest{
		Domain:      domain,
		TeamID:      teamID,
		Slug:        slug,
		RequestBody: requestBody,
	}
	res, err := r.client.DNS.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsCreateRecordResponseBody(res.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DNSResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DNSResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DNSResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DNSResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DNSResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DNSResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	domain := data.Domain.ValueString()
	recordID := data.ID.ValueString()
	teamID := new(string)
	if !data.TeamID.IsUnknown() && !data.TeamID.IsNull() {
		*teamID = data.TeamID.ValueString()
	} else {
		teamID = nil
	}
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	request := operations.RemoveRecordRequest{
		Domain:   domain,
		RecordID: recordID,
		TeamID:   teamID,
		Slug:     slug,
	}
	res, err := r.client.DNS.Remove(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DNSResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource dns.")
}
