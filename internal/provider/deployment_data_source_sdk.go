// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/zchee/terraform-provider-vercel/internal/provider/types"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/operations"
	"math/big"
)

func (r *DeploymentDataSourceModel) RefreshFromOperationsGetDeploymentResponseBody(resp *operations.GetDeploymentResponseBody) {
	if resp != nil {
		if resp.GetDeployment1 != nil {
			r.One = &tfTypes.GetDeployment1{}
			r.One.Alias = []types.String{}
			for _, v := range resp.GetDeployment1.Alias {
				r.One.Alias = append(r.One.Alias, types.StringValue(v))
			}
			r.One.AliasAssigned = types.BoolValue(resp.GetDeployment1.AliasAssigned)
			r.AliasAssigned = r.One.AliasAssigned
			if resp.GetDeployment1.AliasAssignedAt == nil {
				r.One.AliasAssignedAt = nil
			} else {
				r.One.AliasAssignedAt = &tfTypes.CreateDeploymentAliasAssignedAt{}
				if resp.GetDeployment1.AliasAssignedAt.Number != nil {
					if resp.GetDeployment1.AliasAssignedAt.Number != nil {
						r.One.AliasAssignedAt.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.AliasAssignedAt.Number)))
					} else {
						r.One.AliasAssignedAt.Number = types.NumberNull()
					}
				}
				if resp.GetDeployment1.AliasAssignedAt.Boolean != nil {
					r.One.AliasAssignedAt.Boolean = types.BoolPointerValue(resp.GetDeployment1.AliasAssignedAt.Boolean)
				}
			}
			if resp.GetDeployment1.AliasError == nil {
				r.One.AliasError = nil
			} else {
				r.One.AliasError = &tfTypes.CreateDeploymentAliasError{}
				r.One.AliasError.Code = types.StringValue(resp.GetDeployment1.AliasError.Code)
				r.One.AliasError.Message = types.StringValue(resp.GetDeployment1.AliasError.Message)
			}
			r.One.AliasFinal = types.StringPointerValue(resp.GetDeployment1.AliasFinal)
			r.AliasFinal = r.One.AliasFinal
			if resp.GetDeployment1.AliasWarning == nil {
				r.One.AliasWarning = nil
			} else {
				r.One.AliasWarning = &tfTypes.CreateDeploymentAliasWarning{}
				r.One.AliasWarning.Action = types.StringPointerValue(resp.GetDeployment1.AliasWarning.Action)
				r.One.AliasWarning.Code = types.StringValue(resp.GetDeployment1.AliasWarning.Code)
				r.One.AliasWarning.Link = types.StringPointerValue(resp.GetDeployment1.AliasWarning.Link)
				r.One.AliasWarning.Message = types.StringValue(resp.GetDeployment1.AliasWarning.Message)
			}
			r.One.AutoAssignCustomDomains = types.BoolPointerValue(resp.GetDeployment1.AutoAssignCustomDomains)
			r.AutoAssignCustomDomains = r.One.AutoAssignCustomDomains
			r.One.AutomaticAliases = []types.String{}
			for _, v := range resp.GetDeployment1.AutomaticAliases {
				r.One.AutomaticAliases = append(r.One.AutomaticAliases, types.StringValue(v))
			}
			r.One.BootedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.BootedAt)))
			r.One.Build.Env = []types.String{}
			for _, v := range resp.GetDeployment1.Build.Env {
				r.One.Build.Env = append(r.One.Build.Env, types.StringValue(v))
			}
			if resp.GetDeployment1.BuildErrorAt != nil {
				r.One.BuildErrorAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.BuildErrorAt)))
			} else {
				r.One.BuildErrorAt = types.NumberNull()
			}
			r.One.BuildingAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.BuildingAt)))
			if resp.GetDeployment1.CanceledAt != nil {
				r.One.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.CanceledAt)))
			} else {
				r.One.CanceledAt = types.NumberNull()
			}
			if resp.GetDeployment1.ChecksConclusion != nil {
				r.One.ChecksConclusion = types.StringValue(string(*resp.GetDeployment1.ChecksConclusion))
			} else {
				r.One.ChecksConclusion = types.StringNull()
			}
			if resp.GetDeployment1.ChecksState != nil {
				r.One.ChecksState = types.StringValue(string(*resp.GetDeployment1.ChecksState))
			} else {
				r.One.ChecksState = types.StringNull()
			}
			r.One.ConnectBuildsEnabled = types.BoolPointerValue(resp.GetDeployment1.ConnectBuildsEnabled)
			r.One.ConnectConfigurationID = types.StringPointerValue(resp.GetDeployment1.ConnectConfigurationID)
			r.One.CreatedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.CreatedAt)))
			r.One.CreatedIn = types.StringValue(resp.GetDeployment1.CreatedIn)
			r.One.Creator.Avatar = types.StringPointerValue(resp.GetDeployment1.Creator.Avatar)
			r.One.Creator.UID = types.StringValue(resp.GetDeployment1.Creator.UID)
			r.One.Creator.Username = types.StringPointerValue(resp.GetDeployment1.Creator.Username)
			r.One.Crons = []tfTypes.CreateDeploymentCrons{}
			if len(r.One.Crons) > len(resp.GetDeployment1.Crons) {
				r.One.Crons = r.One.Crons[:len(resp.GetDeployment1.Crons)]
			}
			for cronsCount, cronsItem := range resp.GetDeployment1.Crons {
				var crons1 tfTypes.CreateDeploymentCrons
				crons1.Path = types.StringValue(cronsItem.Path)
				crons1.Schedule = types.StringValue(cronsItem.Schedule)
				if cronsCount+1 > len(r.One.Crons) {
					r.One.Crons = append(r.One.Crons, crons1)
				} else {
					r.One.Crons[cronsCount].Path = crons1.Path
					r.One.Crons[cronsCount].Schedule = crons1.Schedule
				}
			}
			r.One.Env = []types.String{}
			for _, v := range resp.GetDeployment1.Env {
				r.One.Env = append(r.One.Env, types.StringValue(v))
			}
			r.One.ErrorCode = types.StringPointerValue(resp.GetDeployment1.ErrorCode)
			r.ErrorCode = r.One.ErrorCode
			r.One.ErrorLink = types.StringPointerValue(resp.GetDeployment1.ErrorLink)
			r.ErrorLink = r.One.ErrorLink
			r.One.ErrorMessage = types.StringPointerValue(resp.GetDeployment1.ErrorMessage)
			r.ErrorMessage = r.One.ErrorMessage
			r.One.ErrorStep = types.StringPointerValue(resp.GetDeployment1.ErrorStep)
			r.ErrorStep = r.One.ErrorStep
			if len(resp.GetDeployment1.Functions) > 0 {
				r.One.Functions = make(map[string]tfTypes.CreateDeploymentFunctions)
				for getDeploymentFunctionsKey, getDeploymentFunctionsValue := range resp.GetDeployment1.Functions {
					var getDeploymentFunctionsResult tfTypes.CreateDeploymentFunctions
					getDeploymentFunctionsResult.ExcludeFiles = types.StringPointerValue(getDeploymentFunctionsValue.ExcludeFiles)
					getDeploymentFunctionsResult.IncludeFiles = types.StringPointerValue(getDeploymentFunctionsValue.IncludeFiles)
					if getDeploymentFunctionsValue.MaxDuration != nil {
						getDeploymentFunctionsResult.MaxDuration = types.NumberValue(big.NewFloat(float64(*getDeploymentFunctionsValue.MaxDuration)))
					} else {
						getDeploymentFunctionsResult.MaxDuration = types.NumberNull()
					}
					if getDeploymentFunctionsValue.Memory != nil {
						getDeploymentFunctionsResult.Memory = types.NumberValue(big.NewFloat(float64(*getDeploymentFunctionsValue.Memory)))
					} else {
						getDeploymentFunctionsResult.Memory = types.NumberNull()
					}
					getDeploymentFunctionsResult.Runtime = types.StringPointerValue(getDeploymentFunctionsValue.Runtime)
					r.One.Functions[getDeploymentFunctionsKey] = getDeploymentFunctionsResult
				}
			}
			if resp.GetDeployment1.GitRepo == nil {
				r.One.GitRepo = nil
			} else {
				r.One.GitRepo = &tfTypes.CreateDeploymentGitRepo{}
				if resp.GetDeployment1.GitRepo.GetDeploymentDeployments1 != nil {
					r.One.GitRepo.One = &tfTypes.CreateDeployment1{}
					r.One.GitRepo.One.DefaultBranch = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.DefaultBranch)
					r.One.GitRepo.One.Name = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.Name)
					r.One.GitRepo.One.Namespace = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.Namespace)
					r.One.GitRepo.One.OwnerType = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.OwnerType))
					r.One.GitRepo.One.Path = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.Path)
					r.One.GitRepo.One.Private = types.BoolValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.Private)
					r.One.GitRepo.One.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.ProjectID)))
					r.One.GitRepo.One.Type = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.Type))
					r.One.GitRepo.One.URL = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments1.URL)
				}
				if resp.GetDeployment1.GitRepo.GetDeploymentDeployments2 != nil {
					r.One.GitRepo.Two = &tfTypes.CreateDeployment2{}
					r.One.GitRepo.Two.DefaultBranch = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.DefaultBranch)
					r.One.GitRepo.Two.Name = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Name)
					r.One.GitRepo.Two.Org = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Org)
					r.One.GitRepo.Two.OwnerType = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.OwnerType))
					r.One.GitRepo.Two.Path = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Path)
					r.One.GitRepo.Two.Private = types.BoolValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Private)
					r.One.GitRepo.Two.Repo = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Repo)
					r.One.GitRepo.Two.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.RepoID)))
					r.One.GitRepo.Two.RepoOwnerID = types.StringValue(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.RepoOwnerID)
					r.One.GitRepo.Two.Type = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeploymentDeployments2.Type))
				}
				if resp.GetDeployment1.GitRepo.GetDeployment3 != nil {
					r.One.GitRepo.Three = &tfTypes.CreateDeployment3{}
					r.One.GitRepo.Three.DefaultBranch = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.DefaultBranch)
					r.One.GitRepo.Three.Name = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.Name)
					r.One.GitRepo.Three.Owner = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.Owner)
					r.One.GitRepo.Three.OwnerType = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeployment3.OwnerType))
					r.One.GitRepo.Three.Path = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.Path)
					r.One.GitRepo.Three.Private = types.BoolValue(resp.GetDeployment1.GitRepo.GetDeployment3.Private)
					r.One.GitRepo.Three.RepoUUID = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.RepoUUID)
					r.One.GitRepo.Three.Slug = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.Slug)
					r.One.GitRepo.Three.Type = types.StringValue(string(resp.GetDeployment1.GitRepo.GetDeployment3.Type))
					r.One.GitRepo.Three.WorkspaceUUID = types.StringValue(resp.GetDeployment1.GitRepo.GetDeployment3.WorkspaceUUID)
				}
			}
			if resp.GetDeployment1.GitSource == nil {
				r.One.GitSource = nil
			} else {
				r.One.GitSource = &tfTypes.GetDeploymentGitSource{}
				if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1 != nil {
					r.One.GitSource.One = &tfTypes.GetDeploymentDeploymentsResponse1{}
					if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.PrID != nil {
						r.One.GitSource.One.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.PrID)))
					} else {
						r.One.GitSource.One.PrID = types.NumberNull()
					}
					r.One.GitSource.One.Ref = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.Ref)
					if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.RepoID.Str != nil {
						r.One.GitSource.One.RepoID.Str = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.RepoID.Str)
					}
					if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.RepoID.Number != nil {
						if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.RepoID.Number != nil {
							r.One.GitSource.One.RepoID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.RepoID.Number)))
						} else {
							r.One.GitSource.One.RepoID.Number = types.NumberNull()
						}
					}
					r.One.GitSource.One.Sha = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.Sha)
					r.One.GitSource.One.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse1.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2 != nil {
					r.One.GitSource.Two = &tfTypes.GetDeploymentDeploymentsResponse2{}
					r.One.GitSource.Two.Org = types.StringValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.Org)
					if resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.PrID != nil {
						r.One.GitSource.Two.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.PrID)))
					} else {
						r.One.GitSource.Two.PrID = types.NumberNull()
					}
					r.One.GitSource.Two.Ref = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.Ref)
					r.One.GitSource.Two.Repo = types.StringValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.Repo)
					r.One.GitSource.Two.Sha = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.Sha)
					r.One.GitSource.Two.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeploymentDeploymentsResponse2.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeploymentDeployments3 != nil {
					r.One.GitSource.Three = &tfTypes.GetDeploymentDeployments3{}
					if resp.GetDeployment1.GitSource.GetDeploymentDeployments3.PrID != nil {
						r.One.GitSource.Three.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeploymentDeployments3.PrID)))
					} else {
						r.One.GitSource.Three.PrID = types.NumberNull()
					}
					if resp.GetDeployment1.GitSource.GetDeploymentDeployments3.ProjectID.Str != nil {
						r.One.GitSource.Three.ProjectID.Str = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeployments3.ProjectID.Str)
					}
					if resp.GetDeployment1.GitSource.GetDeploymentDeployments3.ProjectID.Number != nil {
						if resp.GetDeployment1.GitSource.GetDeploymentDeployments3.ProjectID.Number != nil {
							r.One.GitSource.Three.ProjectID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeploymentDeployments3.ProjectID.Number)))
						} else {
							r.One.GitSource.Three.ProjectID.Number = types.NumberNull()
						}
					}
					r.One.GitSource.Three.Ref = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeployments3.Ref)
					r.One.GitSource.Three.Sha = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeploymentDeployments3.Sha)
					r.One.GitSource.Three.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeploymentDeployments3.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeployment4 != nil {
					r.One.GitSource.Four = &tfTypes.GetDeployment4{}
					if resp.GetDeployment1.GitSource.GetDeployment4.PrID != nil {
						r.One.GitSource.Four.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeployment4.PrID)))
					} else {
						r.One.GitSource.Four.PrID = types.NumberNull()
					}
					r.One.GitSource.Four.Ref = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment4.Ref)
					r.One.GitSource.Four.RepoUUID = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment4.RepoUUID)
					r.One.GitSource.Four.Sha = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment4.Sha)
					r.One.GitSource.Four.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment4.Type))
					r.One.GitSource.Four.WorkspaceUUID = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment4.WorkspaceUUID)
				}
				if resp.GetDeployment1.GitSource.GetDeployment5 != nil {
					r.One.GitSource.Five = &tfTypes.GetDeployment5{}
					r.One.GitSource.Five.Owner = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment5.Owner)
					if resp.GetDeployment1.GitSource.GetDeployment5.PrID != nil {
						r.One.GitSource.Five.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment1.GitSource.GetDeployment5.PrID)))
					} else {
						r.One.GitSource.Five.PrID = types.NumberNull()
					}
					r.One.GitSource.Five.Ref = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment5.Ref)
					r.One.GitSource.Five.Sha = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment5.Sha)
					r.One.GitSource.Five.Slug = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment5.Slug)
					r.One.GitSource.Five.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment5.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeployment6 != nil {
					r.One.GitSource.Six = &tfTypes.CreateDeployment6{}
					r.One.GitSource.Six.GitURL = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment6.GitURL)
					r.One.GitSource.Six.Ref = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment6.Ref)
					r.One.GitSource.Six.Sha = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment6.Sha)
					r.One.GitSource.Six.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment6.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeployment7 != nil {
					r.One.GitSource.Seven = &tfTypes.CreateDeployment7{}
					r.One.GitSource.Seven.Org = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment7.Org)
					r.One.GitSource.Seven.Ref = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment7.Ref)
					r.One.GitSource.Seven.Repo = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment7.Repo)
					r.One.GitSource.Seven.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.GitSource.GetDeployment7.RepoID)))
					r.One.GitSource.Seven.Sha = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment7.Sha)
					r.One.GitSource.Seven.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment7.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeployment8 != nil {
					r.One.GitSource.Eight = &tfTypes.CreateDeployment8{}
					r.One.GitSource.Eight.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.GitSource.GetDeployment8.ProjectID)))
					r.One.GitSource.Eight.Ref = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment8.Ref)
					r.One.GitSource.Eight.Sha = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment8.Sha)
					r.One.GitSource.Eight.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment8.Type))
				}
				if resp.GetDeployment1.GitSource.GetDeployment9 != nil {
					r.One.GitSource.Nine = &tfTypes.CreateDeployment9{}
					r.One.GitSource.Nine.Owner = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment9.Owner)
					r.One.GitSource.Nine.Ref = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment9.Ref)
					r.One.GitSource.Nine.RepoUUID = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment9.RepoUUID)
					r.One.GitSource.Nine.Sha = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment9.Sha)
					r.One.GitSource.Nine.Slug = types.StringPointerValue(resp.GetDeployment1.GitSource.GetDeployment9.Slug)
					r.One.GitSource.Nine.Type = types.StringValue(string(resp.GetDeployment1.GitSource.GetDeployment9.Type))
					r.One.GitSource.Nine.WorkspaceUUID = types.StringValue(resp.GetDeployment1.GitSource.GetDeployment9.WorkspaceUUID)
				}
			}
			r.One.ID = types.StringValue(resp.GetDeployment1.ID)
			r.ID = r.One.ID
			r.One.InspectorURL = types.StringPointerValue(resp.GetDeployment1.InspectorURL)
			r.One.IsInConcurrentBuildsQueue = types.BoolValue(resp.GetDeployment1.IsInConcurrentBuildsQueue)
			r.One.Lambdas = []tfTypes.CreateDeploymentLambdas{}
			if len(r.One.Lambdas) > len(resp.GetDeployment1.Lambdas) {
				r.One.Lambdas = r.One.Lambdas[:len(resp.GetDeployment1.Lambdas)]
			}
			for lambdasCount, lambdasItem := range resp.GetDeployment1.Lambdas {
				var lambdas1 tfTypes.CreateDeploymentLambdas
				if lambdasItem.CreatedAt != nil {
					lambdas1.CreatedAt = types.NumberValue(big.NewFloat(float64(*lambdasItem.CreatedAt)))
				} else {
					lambdas1.CreatedAt = types.NumberNull()
				}
				lambdas1.Entrypoint = types.StringPointerValue(lambdasItem.Entrypoint)
				lambdas1.ID = types.StringValue(lambdasItem.ID)
				lambdas1.Output = []tfTypes.CreateDeploymentOutput{}
				for outputCount, outputItem := range lambdasItem.Output {
					var output1 tfTypes.CreateDeploymentOutput
					output1.FunctionName = types.StringValue(outputItem.FunctionName)
					output1.Path = types.StringValue(outputItem.Path)
					if outputCount+1 > len(lambdas1.Output) {
						lambdas1.Output = append(lambdas1.Output, output1)
					} else {
						lambdas1.Output[outputCount].FunctionName = output1.FunctionName
						lambdas1.Output[outputCount].Path = output1.Path
					}
				}
				if lambdasItem.ReadyState != nil {
					lambdas1.ReadyState = types.StringValue(string(*lambdasItem.ReadyState))
				} else {
					lambdas1.ReadyState = types.StringNull()
				}
				if lambdasItem.ReadyStateAt != nil {
					lambdas1.ReadyStateAt = types.NumberValue(big.NewFloat(float64(*lambdasItem.ReadyStateAt)))
				} else {
					lambdas1.ReadyStateAt = types.NumberNull()
				}
				if lambdasCount+1 > len(r.One.Lambdas) {
					r.One.Lambdas = append(r.One.Lambdas, lambdas1)
				} else {
					r.One.Lambdas[lambdasCount].CreatedAt = lambdas1.CreatedAt
					r.One.Lambdas[lambdasCount].Entrypoint = lambdas1.Entrypoint
					r.One.Lambdas[lambdasCount].ID = lambdas1.ID
					r.One.Lambdas[lambdasCount].Output = lambdas1.Output
					r.One.Lambdas[lambdasCount].ReadyState = lambdas1.ReadyState
					r.One.Lambdas[lambdasCount].ReadyStateAt = lambdas1.ReadyStateAt
				}
			}
			if len(resp.GetDeployment1.Meta) > 0 {
				r.One.Meta = make(map[string]types.String)
				for key, value := range resp.GetDeployment1.Meta {
					r.One.Meta[key] = types.StringValue(value)
				}
			}
			r.One.MonorepoManager = types.StringPointerValue(resp.GetDeployment1.MonorepoManager)
			r.One.Name = types.StringValue(resp.GetDeployment1.Name)
			r.Name = r.One.Name
			r.One.OwnerID = types.StringValue(resp.GetDeployment1.OwnerID)
			r.One.PassiveConnectConfigurationID = types.StringPointerValue(resp.GetDeployment1.PassiveConnectConfigurationID)
			r.One.PassiveRegions = []types.String{}
			for _, v := range resp.GetDeployment1.PassiveRegions {
				r.One.PassiveRegions = append(r.One.PassiveRegions, types.StringValue(v))
			}
			r.One.Plan = types.StringValue(string(resp.GetDeployment1.Plan))
			r.One.PreviewCommentsEnabled = types.BoolPointerValue(resp.GetDeployment1.PreviewCommentsEnabled)
			r.PreviewCommentsEnabled = r.One.PreviewCommentsEnabled
			if resp.GetDeployment1.Project == nil {
				r.One.Project = nil
			} else {
				r.One.Project = &tfTypes.GetDeploymentProject{}
				r.One.Project.Framework = types.StringPointerValue(resp.GetDeployment1.Project.Framework)
				r.One.Project.ID = types.StringValue(resp.GetDeployment1.Project.ID)
				r.One.Project.Name = types.StringValue(resp.GetDeployment1.Project.Name)
			}
			r.One.ProjectID = types.StringValue(resp.GetDeployment1.ProjectID)
			r.One.Public = types.BoolValue(resp.GetDeployment1.Public)
			r.Public = r.One.Public
			r.One.ReadyState = types.StringValue(string(resp.GetDeployment1.ReadyState))
			if resp.GetDeployment1.ReadySubstate != nil {
				r.One.ReadySubstate = types.StringValue(string(*resp.GetDeployment1.ReadySubstate))
			} else {
				r.One.ReadySubstate = types.StringNull()
			}
			r.One.Regions = []types.String{}
			for _, v := range resp.GetDeployment1.Regions {
				r.One.Regions = append(r.One.Regions, types.StringValue(v))
			}
			r.One.Routes = []tfTypes.GetDeploymentRoutes{}
			if len(r.One.Routes) > len(resp.GetDeployment1.Routes) {
				r.One.Routes = r.One.Routes[:len(resp.GetDeployment1.Routes)]
			}
			for routesCount, routesItem := range resp.GetDeployment1.Routes {
				var routes1 tfTypes.GetDeploymentRoutes
				if routesItem.GetDeploymentDeploymentsResponse2001 != nil {
					routes1.One = &tfTypes.GetDeploymentDeploymentsResponse2001{}
					routes1.One.CaseSensitive = types.BoolPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.CaseSensitive)
					routes1.One.Check = types.BoolPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Check)
					routes1.One.Continue = types.BoolPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Continue)
					routes1.One.Dest = types.StringPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Dest)
					routes1.One.Has = []tfTypes.GetDeploymentHas{}
					for hasCount, hasItem := range routesItem.GetDeploymentDeploymentsResponse2001.Has {
						var has1 tfTypes.GetDeploymentHas
						if hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 != nil {
							has1.One = &tfTypes.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11{}
							has1.One.Type = types.StringValue(string(hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11.Type))
							has1.One.Value = types.StringValue(hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11.Value)
						}
						if hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 != nil {
							has1.Two = &tfTypes.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12{}
							has1.Two.Key = types.StringValue(hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12.Key)
							has1.Two.Type = types.StringValue(string(hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12.Type))
							has1.Two.Value = types.StringPointerValue(hasItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12.Value)
						}
						if hasCount+1 > len(routes1.One.Has) {
							routes1.One.Has = append(routes1.One.Has, has1)
						} else {
							routes1.One.Has[hasCount].One = has1.One
							routes1.One.Has[hasCount].Two = has1.Two
						}
					}
					if len(routesItem.GetDeploymentDeploymentsResponse2001.Headers) > 0 {
						routes1.One.Headers = make(map[string]types.String)
						for key2, value3 := range routesItem.GetDeploymentDeploymentsResponse2001.Headers {
							routes1.One.Headers[key2] = types.StringValue(value3)
						}
					}
					routes1.One.Important = types.BoolPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Important)
					if routesItem.GetDeploymentDeploymentsResponse2001.Locale == nil {
						routes1.One.Locale = nil
					} else {
						routes1.One.Locale = &tfTypes.GetDeploymentLocale{}
						routes1.One.Locale.Cookie = types.StringPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Locale.Cookie)
						if len(routesItem.GetDeploymentDeploymentsResponse2001.Locale.Redirect) > 0 {
							routes1.One.Locale.Redirect = make(map[string]types.String)
							for key3, value4 := range routesItem.GetDeploymentDeploymentsResponse2001.Locale.Redirect {
								routes1.One.Locale.Redirect[key3] = types.StringValue(value4)
							}
						}
					}
					routes1.One.Methods = []types.String{}
					for _, v := range routesItem.GetDeploymentDeploymentsResponse2001.Methods {
						routes1.One.Methods = append(routes1.One.Methods, types.StringValue(v))
					}
					if routesItem.GetDeploymentDeploymentsResponse2001.Middleware != nil {
						routes1.One.Middleware = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentDeploymentsResponse2001.Middleware)))
					} else {
						routes1.One.Middleware = types.NumberNull()
					}
					routes1.One.MiddlewarePath = types.StringPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.MiddlewarePath)
					routes1.One.MiddlewareRawSrc = []types.String{}
					for _, v := range routesItem.GetDeploymentDeploymentsResponse2001.MiddlewareRawSrc {
						routes1.One.MiddlewareRawSrc = append(routes1.One.MiddlewareRawSrc, types.StringValue(v))
					}
					routes1.One.Missing = []tfTypes.GetDeploymentHas{}
					for missingCount, missingItem := range routesItem.GetDeploymentDeploymentsResponse2001.Missing {
						var missing1 tfTypes.GetDeploymentHas
						if missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 != nil {
							missing1.One = &tfTypes.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11{}
							missing1.One.Type = types.StringValue(string(missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1.Type))
							missing1.One.Value = types.StringValue(missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1.Value)
						}
						if missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 != nil {
							missing1.Two = &tfTypes.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12{}
							missing1.Two.Key = types.StringValue(missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2.Key)
							missing1.Two.Type = types.StringValue(string(missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2.Type))
							missing1.Two.Value = types.StringPointerValue(missingItem.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2.Value)
						}
						if missingCount+1 > len(routes1.One.Missing) {
							routes1.One.Missing = append(routes1.One.Missing, missing1)
						} else {
							routes1.One.Missing[missingCount].One = missing1.One
							routes1.One.Missing[missingCount].Two = missing1.Two
						}
					}
					routes1.One.Override = types.BoolPointerValue(routesItem.GetDeploymentDeploymentsResponse2001.Override)
					routes1.One.Src = types.StringValue(routesItem.GetDeploymentDeploymentsResponse2001.Src)
					if routesItem.GetDeploymentDeploymentsResponse2001.Status != nil {
						routes1.One.Status = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentDeploymentsResponse2001.Status)))
					} else {
						routes1.One.Status = types.NumberNull()
					}
				}
				if routesItem.GetDeploymentDeploymentsResponse2002 != nil {
					routes1.Two = &tfTypes.GetDeploymentDeploymentsResponse2002{}
					routes1.Two.Dest = types.StringPointerValue(routesItem.GetDeploymentDeploymentsResponse2002.Dest)
					routes1.Two.Handle = types.StringValue(string(routesItem.GetDeploymentDeploymentsResponse2002.Handle))
					routes1.Two.Src = types.StringPointerValue(routesItem.GetDeploymentDeploymentsResponse2002.Src)
					if routesItem.GetDeploymentDeploymentsResponse2002.Status != nil {
						routes1.Two.Status = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentDeploymentsResponse2002.Status)))
					} else {
						routes1.Two.Status = types.NumberNull()
					}
				}
				if routesItem.GetDeploymentDeploymentsResponse3 != nil {
					routes1.Three = &tfTypes.GetDeploymentDeploymentsResponse3{}
					routes1.Three.Continue = types.BoolValue(routesItem.GetDeploymentDeploymentsResponse3.Continue)
					routes1.Three.Middleware = types.NumberValue(big.NewFloat(float64(routesItem.GetDeploymentDeploymentsResponse3.Middleware)))
					routes1.Three.Src = types.StringValue(routesItem.GetDeploymentDeploymentsResponse3.Src)
				}
				if routesCount+1 > len(r.One.Routes) {
					r.One.Routes = append(r.One.Routes, routes1)
				} else {
					r.One.Routes[routesCount].One = routes1.One
					r.One.Routes[routesCount].Two = routes1.Two
					r.One.Routes[routesCount].Three = routes1.Three
				}
			}
			if resp.GetDeployment1.Source != nil {
				r.One.Source = types.StringValue(string(*resp.GetDeployment1.Source))
			} else {
				r.One.Source = types.StringNull()
			}
			if resp.GetDeployment1.Target != nil {
				r.One.Target = types.StringValue(string(*resp.GetDeployment1.Target))
			} else {
				r.One.Target = types.StringNull()
			}
			if resp.GetDeployment1.Team == nil {
				r.One.Team = nil
			} else {
				r.One.Team = &tfTypes.GetDeploymentTeam{}
				r.One.Team.Avatar = types.StringPointerValue(resp.GetDeployment1.Team.Avatar)
				r.One.Team.ID = types.StringValue(resp.GetDeployment1.Team.ID)
				r.One.Team.Name = types.StringValue(resp.GetDeployment1.Team.Name)
				r.One.Team.Slug = types.StringValue(resp.GetDeployment1.Team.Slug)
			}
			r.One.Type = types.StringValue(string(resp.GetDeployment1.Type))
			r.One.URL = types.StringValue(resp.GetDeployment1.URL)
			r.URL = r.One.URL
			r.One.UserAliases = []types.String{}
			for _, v := range resp.GetDeployment1.UserAliases {
				r.One.UserAliases = append(r.One.UserAliases, types.StringValue(v))
			}
			r.One.Version = types.NumberValue(big.NewFloat(float64(resp.GetDeployment1.Version)))
		}
		if resp.GetDeployment2 != nil {
			r.Two = &tfTypes.GetDeployment2{}
			r.Two.Alias = []types.String{}
			for _, v := range resp.GetDeployment2.Alias {
				r.Two.Alias = append(r.Two.Alias, types.StringValue(v))
			}
			r.Two.AliasAssigned = types.BoolValue(resp.GetDeployment2.AliasAssigned)
			r.AliasAssigned = r.Two.AliasAssigned
			if resp.GetDeployment2.AliasError == nil {
				r.Two.AliasError = nil
			} else {
				r.Two.AliasError = &tfTypes.CreateDeploymentAliasError{}
				r.Two.AliasError.Code = types.StringValue(resp.GetDeployment2.AliasError.Code)
				r.Two.AliasError.Message = types.StringValue(resp.GetDeployment2.AliasError.Message)
			}
			r.Two.AliasFinal = types.StringPointerValue(resp.GetDeployment2.AliasFinal)
			r.AliasFinal = r.Two.AliasFinal
			if resp.GetDeployment2.AliasWarning == nil {
				r.Two.AliasWarning = nil
			} else {
				r.Two.AliasWarning = &tfTypes.CreateDeploymentAliasWarning{}
				r.Two.AliasWarning.Action = types.StringPointerValue(resp.GetDeployment2.AliasWarning.Action)
				r.Two.AliasWarning.Code = types.StringValue(resp.GetDeployment2.AliasWarning.Code)
				r.Two.AliasWarning.Link = types.StringPointerValue(resp.GetDeployment2.AliasWarning.Link)
				r.Two.AliasWarning.Message = types.StringValue(resp.GetDeployment2.AliasWarning.Message)
			}
			r.Two.AutoAssignCustomDomains = types.BoolPointerValue(resp.GetDeployment2.AutoAssignCustomDomains)
			r.AutoAssignCustomDomains = r.Two.AutoAssignCustomDomains
			r.Two.AutomaticAliases = []types.String{}
			for _, v := range resp.GetDeployment2.AutomaticAliases {
				r.Two.AutomaticAliases = append(r.Two.AutomaticAliases, types.StringValue(v))
			}
			r.Two.BootedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.BootedAt)))
			if resp.GetDeployment2.BuildErrorAt != nil {
				r.Two.BuildErrorAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.BuildErrorAt)))
			} else {
				r.Two.BuildErrorAt = types.NumberNull()
			}
			r.Two.BuildingAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.BuildingAt)))
			if resp.GetDeployment2.CanceledAt != nil {
				r.Two.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.CanceledAt)))
			} else {
				r.Two.CanceledAt = types.NumberNull()
			}
			if resp.GetDeployment2.ChecksConclusion != nil {
				r.Two.ChecksConclusion = types.StringValue(string(*resp.GetDeployment2.ChecksConclusion))
			} else {
				r.Two.ChecksConclusion = types.StringNull()
			}
			if resp.GetDeployment2.ChecksState != nil {
				r.Two.ChecksState = types.StringValue(string(*resp.GetDeployment2.ChecksState))
			} else {
				r.Two.ChecksState = types.StringNull()
			}
			r.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.CreatedAt)))
			r.Two.Creator.Avatar = types.StringPointerValue(resp.GetDeployment2.Creator.Avatar)
			r.Two.Creator.UID = types.StringValue(resp.GetDeployment2.Creator.UID)
			r.Two.Creator.Username = types.StringPointerValue(resp.GetDeployment2.Creator.Username)
			r.Two.ErrorCode = types.StringPointerValue(resp.GetDeployment2.ErrorCode)
			r.ErrorCode = r.Two.ErrorCode
			r.Two.ErrorLink = types.StringPointerValue(resp.GetDeployment2.ErrorLink)
			r.ErrorLink = r.Two.ErrorLink
			r.Two.ErrorMessage = types.StringPointerValue(resp.GetDeployment2.ErrorMessage)
			r.ErrorMessage = r.Two.ErrorMessage
			r.Two.ErrorStep = types.StringPointerValue(resp.GetDeployment2.ErrorStep)
			r.ErrorStep = r.Two.ErrorStep
			if resp.GetDeployment2.GitSource == nil {
				r.Two.GitSource = nil
			} else {
				r.Two.GitSource = &tfTypes.GetDeploymentGitSource{}
				if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1 != nil {
					r.Two.GitSource.One = &tfTypes.GetDeploymentDeploymentsResponse1{}
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.PrID != nil {
						r.Two.GitSource.One.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.PrID)))
					} else {
						r.Two.GitSource.One.PrID = types.NumberNull()
					}
					r.Two.GitSource.One.Ref = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.Ref)
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.RepoID.Str != nil {
						r.Two.GitSource.One.RepoID.Str = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.RepoID.Str)
					}
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.RepoID.Number != nil {
						if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.RepoID.Number != nil {
							r.Two.GitSource.One.RepoID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.RepoID.Number)))
						} else {
							r.Two.GitSource.One.RepoID.Number = types.NumberNull()
						}
					}
					r.Two.GitSource.One.Sha = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.Sha)
					r.Two.GitSource.One.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON1.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2 != nil {
					r.Two.GitSource.Two = &tfTypes.GetDeploymentDeploymentsResponse2{}
					r.Two.GitSource.Two.Org = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.Org)
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.PrID != nil {
						r.Two.GitSource.Two.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.PrID)))
					} else {
						r.Two.GitSource.Two.PrID = types.NumberNull()
					}
					r.Two.GitSource.Two.Ref = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.Ref)
					r.Two.GitSource.Two.Repo = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.Repo)
					r.Two.GitSource.Two.Sha = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.Sha)
					r.Two.GitSource.Two.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse200ApplicationJSON2.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003 != nil {
					r.Two.GitSource.Three = &tfTypes.GetDeploymentDeployments3{}
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.PrID != nil {
						r.Two.GitSource.Three.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.PrID)))
					} else {
						r.Two.GitSource.Three.PrID = types.NumberNull()
					}
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.ProjectID.Str != nil {
						r.Two.GitSource.Three.ProjectID.Str = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.ProjectID.Str)
					}
					if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.ProjectID.Number != nil {
						if resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.ProjectID.Number != nil {
							r.Two.GitSource.Three.ProjectID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.ProjectID.Number)))
						} else {
							r.Two.GitSource.Three.ProjectID.Number = types.NumberNull()
						}
					}
					r.Two.GitSource.Three.Ref = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.Ref)
					r.Two.GitSource.Three.Sha = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.Sha)
					r.Two.GitSource.Three.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeploymentsResponse2003.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments4 != nil {
					r.Two.GitSource.Four = &tfTypes.GetDeployment4{}
					if resp.GetDeployment2.GitSource.GetDeploymentDeployments4.PrID != nil {
						r.Two.GitSource.Four.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeployments4.PrID)))
					} else {
						r.Two.GitSource.Four.PrID = types.NumberNull()
					}
					r.Two.GitSource.Four.Ref = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments4.Ref)
					r.Two.GitSource.Four.RepoUUID = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments4.RepoUUID)
					r.Two.GitSource.Four.Sha = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments4.Sha)
					r.Two.GitSource.Four.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments4.Type))
					r.Two.GitSource.Four.WorkspaceUUID = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments4.WorkspaceUUID)
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments5 != nil {
					r.Two.GitSource.Five = &tfTypes.GetDeployment5{}
					r.Two.GitSource.Five.Owner = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments5.Owner)
					if resp.GetDeployment2.GitSource.GetDeploymentDeployments5.PrID != nil {
						r.Two.GitSource.Five.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeployment2.GitSource.GetDeploymentDeployments5.PrID)))
					} else {
						r.Two.GitSource.Five.PrID = types.NumberNull()
					}
					r.Two.GitSource.Five.Ref = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments5.Ref)
					r.Two.GitSource.Five.Sha = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments5.Sha)
					r.Two.GitSource.Five.Slug = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments5.Slug)
					r.Two.GitSource.Five.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments5.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments6 != nil {
					r.Two.GitSource.Six = &tfTypes.CreateDeployment6{}
					r.Two.GitSource.Six.GitURL = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments6.GitURL)
					r.Two.GitSource.Six.Ref = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments6.Ref)
					r.Two.GitSource.Six.Sha = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments6.Sha)
					r.Two.GitSource.Six.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments6.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments7 != nil {
					r.Two.GitSource.Seven = &tfTypes.CreateDeployment7{}
					r.Two.GitSource.Seven.Org = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.Org)
					r.Two.GitSource.Seven.Ref = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.Ref)
					r.Two.GitSource.Seven.Repo = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.Repo)
					r.Two.GitSource.Seven.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.RepoID)))
					r.Two.GitSource.Seven.Sha = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.Sha)
					r.Two.GitSource.Seven.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments7.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments8 != nil {
					r.Two.GitSource.Eight = &tfTypes.CreateDeployment8{}
					r.Two.GitSource.Eight.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.GitSource.GetDeploymentDeployments8.ProjectID)))
					r.Two.GitSource.Eight.Ref = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments8.Ref)
					r.Two.GitSource.Eight.Sha = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments8.Sha)
					r.Two.GitSource.Eight.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments8.Type))
				}
				if resp.GetDeployment2.GitSource.GetDeploymentDeployments9 != nil {
					r.Two.GitSource.Nine = &tfTypes.CreateDeployment9{}
					r.Two.GitSource.Nine.Owner = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.Owner)
					r.Two.GitSource.Nine.Ref = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.Ref)
					r.Two.GitSource.Nine.RepoUUID = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.RepoUUID)
					r.Two.GitSource.Nine.Sha = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.Sha)
					r.Two.GitSource.Nine.Slug = types.StringPointerValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.Slug)
					r.Two.GitSource.Nine.Type = types.StringValue(string(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.Type))
					r.Two.GitSource.Nine.WorkspaceUUID = types.StringValue(resp.GetDeployment2.GitSource.GetDeploymentDeployments9.WorkspaceUUID)
				}
			}
			r.Two.ID = types.StringValue(resp.GetDeployment2.ID)
			r.ID = r.Two.ID
			r.Two.Lambdas = []tfTypes.CreateDeploymentLambdas{}
			if len(r.Two.Lambdas) > len(resp.GetDeployment2.Lambdas) {
				r.Two.Lambdas = r.Two.Lambdas[:len(resp.GetDeployment2.Lambdas)]
			}
			for lambdasCount1, lambdasItem1 := range resp.GetDeployment2.Lambdas {
				var lambdas3 tfTypes.CreateDeploymentLambdas
				if lambdasItem1.CreatedAt != nil {
					lambdas3.CreatedAt = types.NumberValue(big.NewFloat(float64(*lambdasItem1.CreatedAt)))
				} else {
					lambdas3.CreatedAt = types.NumberNull()
				}
				lambdas3.Entrypoint = types.StringPointerValue(lambdasItem1.Entrypoint)
				lambdas3.ID = types.StringValue(lambdasItem1.ID)
				lambdas3.Output = []tfTypes.CreateDeploymentOutput{}
				for outputCount1, outputItem1 := range lambdasItem1.Output {
					var output3 tfTypes.CreateDeploymentOutput
					output3.FunctionName = types.StringValue(outputItem1.FunctionName)
					output3.Path = types.StringValue(outputItem1.Path)
					if outputCount1+1 > len(lambdas3.Output) {
						lambdas3.Output = append(lambdas3.Output, output3)
					} else {
						lambdas3.Output[outputCount1].FunctionName = output3.FunctionName
						lambdas3.Output[outputCount1].Path = output3.Path
					}
				}
				if lambdasItem1.ReadyState != nil {
					lambdas3.ReadyState = types.StringValue(string(*lambdasItem1.ReadyState))
				} else {
					lambdas3.ReadyState = types.StringNull()
				}
				if lambdasItem1.ReadyStateAt != nil {
					lambdas3.ReadyStateAt = types.NumberValue(big.NewFloat(float64(*lambdasItem1.ReadyStateAt)))
				} else {
					lambdas3.ReadyStateAt = types.NumberNull()
				}
				if lambdasCount1+1 > len(r.Two.Lambdas) {
					r.Two.Lambdas = append(r.Two.Lambdas, lambdas3)
				} else {
					r.Two.Lambdas[lambdasCount1].CreatedAt = lambdas3.CreatedAt
					r.Two.Lambdas[lambdasCount1].Entrypoint = lambdas3.Entrypoint
					r.Two.Lambdas[lambdasCount1].ID = lambdas3.ID
					r.Two.Lambdas[lambdasCount1].Output = lambdas3.Output
					r.Two.Lambdas[lambdasCount1].ReadyState = lambdas3.ReadyState
					r.Two.Lambdas[lambdasCount1].ReadyStateAt = lambdas3.ReadyStateAt
				}
			}
			if len(resp.GetDeployment2.Meta) > 0 {
				r.Two.Meta = make(map[string]types.String)
				for key5, value7 := range resp.GetDeployment2.Meta {
					r.Two.Meta[key5] = types.StringValue(value7)
				}
			}
			r.Two.Name = types.StringValue(resp.GetDeployment2.Name)
			r.Name = r.Two.Name
			r.Two.PassiveRegions = []types.String{}
			for _, v := range resp.GetDeployment2.PassiveRegions {
				r.Two.PassiveRegions = append(r.Two.PassiveRegions, types.StringValue(v))
			}
			r.Two.PreviewCommentsEnabled = types.BoolPointerValue(resp.GetDeployment2.PreviewCommentsEnabled)
			r.PreviewCommentsEnabled = r.Two.PreviewCommentsEnabled
			if resp.GetDeployment2.Project == nil {
				r.Two.Project = nil
			} else {
				r.Two.Project = &tfTypes.GetDeploymentProject{}
				r.Two.Project.Framework = types.StringPointerValue(resp.GetDeployment2.Project.Framework)
				r.Two.Project.ID = types.StringValue(resp.GetDeployment2.Project.ID)
				r.Two.Project.Name = types.StringValue(resp.GetDeployment2.Project.Name)
			}
			r.Two.Public = types.BoolValue(resp.GetDeployment2.Public)
			r.Public = r.Two.Public
			r.Two.ReadyState = types.StringValue(string(resp.GetDeployment2.ReadyState))
			if resp.GetDeployment2.ReadySubstate != nil {
				r.Two.ReadySubstate = types.StringValue(string(*resp.GetDeployment2.ReadySubstate))
			} else {
				r.Two.ReadySubstate = types.StringNull()
			}
			r.Two.Regions = []types.String{}
			for _, v := range resp.GetDeployment2.Regions {
				r.Two.Regions = append(r.Two.Regions, types.StringValue(v))
			}
			if resp.GetDeployment2.Source != nil {
				r.Two.Source = types.StringValue(string(*resp.GetDeployment2.Source))
			} else {
				r.Two.Source = types.StringNull()
			}
			if resp.GetDeployment2.Target != nil {
				r.Two.Target = types.StringValue(string(*resp.GetDeployment2.Target))
			} else {
				r.Two.Target = types.StringNull()
			}
			if resp.GetDeployment2.Team == nil {
				r.Two.Team = nil
			} else {
				r.Two.Team = &tfTypes.GetDeploymentTeam{}
				r.Two.Team.Avatar = types.StringPointerValue(resp.GetDeployment2.Team.Avatar)
				r.Two.Team.ID = types.StringValue(resp.GetDeployment2.Team.ID)
				r.Two.Team.Name = types.StringValue(resp.GetDeployment2.Team.Name)
				r.Two.Team.Slug = types.StringValue(resp.GetDeployment2.Team.Slug)
			}
			r.Two.Type = types.StringValue(string(resp.GetDeployment2.Type))
			r.Two.URL = types.StringValue(resp.GetDeployment2.URL)
			r.URL = r.Two.URL
			r.Two.UserAliases = []types.String{}
			for _, v := range resp.GetDeployment2.UserAliases {
				r.Two.UserAliases = append(r.Two.UserAliases, types.StringValue(v))
			}
			r.Two.Version = types.NumberValue(big.NewFloat(float64(resp.GetDeployment2.Version)))
		}
	}
}
