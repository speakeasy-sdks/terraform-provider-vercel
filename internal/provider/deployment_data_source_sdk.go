// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
	"math/big"
)

func (r *DeploymentDataSourceModel) RefreshFromOperationsGetDeploymentResponseBody(resp *operations.GetDeploymentResponseBody) {
	if resp != nil {
		if resp.GetDeploymentResponseBody1 != nil {
			r.One = &tfTypes.GetDeploymentResponseBody1{}
			r.One.Alias = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.Alias {
				r.One.Alias = append(r.One.Alias, types.StringValue(v))
			}
			r.One.AliasAssigned = types.BoolValue(resp.GetDeploymentResponseBody1.AliasAssigned)
			r.AliasAssigned = r.One.AliasAssigned
			if resp.GetDeploymentResponseBody1.AliasAssignedAt == nil {
				r.One.AliasAssignedAt = nil
			} else {
				r.One.AliasAssignedAt = &tfTypes.AliasAssignedAt{}
				if resp.GetDeploymentResponseBody1.AliasAssignedAt.Number != nil {
					if resp.GetDeploymentResponseBody1.AliasAssignedAt.Number != nil {
						r.One.AliasAssignedAt.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.AliasAssignedAt.Number)))
					} else {
						r.One.AliasAssignedAt.Number = types.NumberNull()
					}
				}
				if resp.GetDeploymentResponseBody1.AliasAssignedAt.Boolean != nil {
					r.One.AliasAssignedAt.Boolean = types.BoolPointerValue(resp.GetDeploymentResponseBody1.AliasAssignedAt.Boolean)
				}
			}
			if resp.GetDeploymentResponseBody1.AliasError == nil {
				r.One.AliasError = nil
			} else {
				r.One.AliasError = &tfTypes.AliasError{}
				r.One.AliasError.Code = types.StringValue(resp.GetDeploymentResponseBody1.AliasError.Code)
				r.One.AliasError.Message = types.StringValue(resp.GetDeploymentResponseBody1.AliasError.Message)
			}
			r.One.AliasFinal = types.StringPointerValue(resp.GetDeploymentResponseBody1.AliasFinal)
			r.AliasFinal = r.One.AliasFinal
			if resp.GetDeploymentResponseBody1.AliasWarning == nil {
				r.One.AliasWarning = nil
			} else {
				r.One.AliasWarning = &tfTypes.AliasWarning{}
				r.One.AliasWarning.Action = types.StringPointerValue(resp.GetDeploymentResponseBody1.AliasWarning.Action)
				r.One.AliasWarning.Code = types.StringValue(resp.GetDeploymentResponseBody1.AliasWarning.Code)
				r.One.AliasWarning.Link = types.StringPointerValue(resp.GetDeploymentResponseBody1.AliasWarning.Link)
				r.One.AliasWarning.Message = types.StringValue(resp.GetDeploymentResponseBody1.AliasWarning.Message)
			}
			r.One.AutoAssignCustomDomains = types.BoolPointerValue(resp.GetDeploymentResponseBody1.AutoAssignCustomDomains)
			r.AutoAssignCustomDomains = r.One.AutoAssignCustomDomains
			r.One.AutomaticAliases = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.AutomaticAliases {
				r.One.AutomaticAliases = append(r.One.AutomaticAliases, types.StringValue(v))
			}
			r.One.BootedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.BootedAt)))
			r.One.Build.Env = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.Build.Env {
				r.One.Build.Env = append(r.One.Build.Env, types.StringValue(v))
			}
			if resp.GetDeploymentResponseBody1.BuildErrorAt != nil {
				r.One.BuildErrorAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.BuildErrorAt)))
			} else {
				r.One.BuildErrorAt = types.NumberNull()
			}
			r.One.BuildingAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.BuildingAt)))
			if resp.GetDeploymentResponseBody1.CanceledAt != nil {
				r.One.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.CanceledAt)))
			} else {
				r.One.CanceledAt = types.NumberNull()
			}
			if resp.GetDeploymentResponseBody1.ChecksConclusion != nil {
				r.One.ChecksConclusion = types.StringValue(string(*resp.GetDeploymentResponseBody1.ChecksConclusion))
			} else {
				r.One.ChecksConclusion = types.StringNull()
			}
			if resp.GetDeploymentResponseBody1.ChecksState != nil {
				r.One.ChecksState = types.StringValue(string(*resp.GetDeploymentResponseBody1.ChecksState))
			} else {
				r.One.ChecksState = types.StringNull()
			}
			r.One.ConnectBuildsEnabled = types.BoolPointerValue(resp.GetDeploymentResponseBody1.ConnectBuildsEnabled)
			r.One.ConnectConfigurationID = types.StringPointerValue(resp.GetDeploymentResponseBody1.ConnectConfigurationID)
			r.One.CreatedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.CreatedAt)))
			r.One.CreatedIn = types.StringValue(resp.GetDeploymentResponseBody1.CreatedIn)
			r.One.Creator.Avatar = types.StringPointerValue(resp.GetDeploymentResponseBody1.Creator.Avatar)
			r.One.Creator.UID = types.StringValue(resp.GetDeploymentResponseBody1.Creator.UID)
			r.One.Creator.Username = types.StringPointerValue(resp.GetDeploymentResponseBody1.Creator.Username)
			r.One.Crons = []tfTypes.CreateDeploymentCrons{}
			if len(r.One.Crons) > len(resp.GetDeploymentResponseBody1.Crons) {
				r.One.Crons = r.One.Crons[:len(resp.GetDeploymentResponseBody1.Crons)]
			}
			for cronsCount, cronsItem := range resp.GetDeploymentResponseBody1.Crons {
				var crons1 tfTypes.CreateDeploymentCrons
				crons1.Path = types.StringValue(cronsItem.Path)
				crons1.Schedule = types.StringValue(cronsItem.Schedule)
				if cronsCount+1 > len(r.One.Crons) {
					r.One.Crons = append(r.One.Crons, crons1)
				} else {
					r.One.Crons[cronsCount].Path = crons1.Path
					r.One.Crons[cronsCount].Schedule = crons1.Schedule
				}
			}
			r.One.Env = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.Env {
				r.One.Env = append(r.One.Env, types.StringValue(v))
			}
			r.One.ErrorCode = types.StringPointerValue(resp.GetDeploymentResponseBody1.ErrorCode)
			r.ErrorCode = r.One.ErrorCode
			r.One.ErrorLink = types.StringPointerValue(resp.GetDeploymentResponseBody1.ErrorLink)
			r.ErrorLink = r.One.ErrorLink
			r.One.ErrorMessage = types.StringPointerValue(resp.GetDeploymentResponseBody1.ErrorMessage)
			r.ErrorMessage = r.One.ErrorMessage
			r.One.ErrorStep = types.StringPointerValue(resp.GetDeploymentResponseBody1.ErrorStep)
			r.ErrorStep = r.One.ErrorStep
			if len(resp.GetDeploymentResponseBody1.Functions) > 0 {
				r.One.Functions = make(map[string]tfTypes.Functions)
				for responseBodyFunctionsKey, responseBodyFunctionsValue := range resp.GetDeploymentResponseBody1.Functions {
					var responseBodyFunctionsResult tfTypes.Functions
					responseBodyFunctionsResult.ExcludeFiles = types.StringPointerValue(responseBodyFunctionsValue.ExcludeFiles)
					responseBodyFunctionsResult.IncludeFiles = types.StringPointerValue(responseBodyFunctionsValue.IncludeFiles)
					if responseBodyFunctionsValue.MaxDuration != nil {
						responseBodyFunctionsResult.MaxDuration = types.NumberValue(big.NewFloat(float64(*responseBodyFunctionsValue.MaxDuration)))
					} else {
						responseBodyFunctionsResult.MaxDuration = types.NumberNull()
					}
					if responseBodyFunctionsValue.Memory != nil {
						responseBodyFunctionsResult.Memory = types.NumberValue(big.NewFloat(float64(*responseBodyFunctionsValue.Memory)))
					} else {
						responseBodyFunctionsResult.Memory = types.NumberNull()
					}
					responseBodyFunctionsResult.Runtime = types.StringPointerValue(responseBodyFunctionsValue.Runtime)
					r.One.Functions[responseBodyFunctionsKey] = responseBodyFunctionsResult
				}
			}
			if resp.GetDeploymentResponseBody1.GitRepo == nil {
				r.One.GitRepo = nil
			} else {
				r.One.GitRepo = &tfTypes.GitRepo{}
				if resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1 != nil {
					r.One.GitRepo.One = &tfTypes.GitRepo1{}
					r.One.GitRepo.One.DefaultBranch = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.DefaultBranch)
					r.One.GitRepo.One.Name = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.Name)
					r.One.GitRepo.One.Namespace = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.Namespace)
					r.One.GitRepo.One.OwnerType = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.OwnerType))
					r.One.GitRepo.One.Path = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.Path)
					r.One.GitRepo.One.Private = types.BoolValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.Private)
					r.One.GitRepo.One.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.ProjectID)))
					r.One.GitRepo.One.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.Type))
					r.One.GitRepo.One.URL = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo1.URL)
				}
				if resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2 != nil {
					r.One.GitRepo.Two = &tfTypes.GitRepo2{}
					r.One.GitRepo.Two.DefaultBranch = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.DefaultBranch)
					r.One.GitRepo.Two.Name = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Name)
					r.One.GitRepo.Two.Org = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Org)
					r.One.GitRepo.Two.OwnerType = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.OwnerType))
					r.One.GitRepo.Two.Path = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Path)
					r.One.GitRepo.Two.Private = types.BoolValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Private)
					r.One.GitRepo.Two.Repo = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Repo)
					r.One.GitRepo.Two.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.RepoID)))
					r.One.GitRepo.Two.RepoOwnerID = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.RepoOwnerID)
					r.One.GitRepo.Two.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo2.Type))
				}
				if resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3 != nil {
					r.One.GitRepo.Three = &tfTypes.GitRepo3{}
					r.One.GitRepo.Three.DefaultBranch = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.DefaultBranch)
					r.One.GitRepo.Three.Name = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Name)
					r.One.GitRepo.Three.Owner = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Owner)
					r.One.GitRepo.Three.OwnerType = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.OwnerType))
					r.One.GitRepo.Three.Path = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Path)
					r.One.GitRepo.Three.Private = types.BoolValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Private)
					r.One.GitRepo.Three.RepoUUID = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.RepoUUID)
					r.One.GitRepo.Three.Slug = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Slug)
					r.One.GitRepo.Three.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.Type))
					r.One.GitRepo.Three.WorkspaceUUID = types.StringValue(resp.GetDeploymentResponseBody1.GitRepo.GetDeploymentGitRepo3.WorkspaceUUID)
				}
			}
			if resp.GetDeploymentResponseBody1.GitSource == nil {
				r.One.GitSource = nil
			} else {
				r.One.GitSource = &tfTypes.GetDeploymentResponseBodyGitSource{}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1 != nil {
					r.One.GitSource.One = &tfTypes.GetDeploymentGitSourceDeployments1{}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.PrID != nil {
						r.One.GitSource.One.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.PrID)))
					} else {
						r.One.GitSource.One.PrID = types.NumberNull()
					}
					r.One.GitSource.One.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.Ref)
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.RepoID.Str != nil {
						r.One.GitSource.One.RepoID.Str = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.RepoID.Str)
					}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.RepoID.Number != nil {
						if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.RepoID.Number != nil {
							r.One.GitSource.One.RepoID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.RepoID.Number)))
						} else {
							r.One.GitSource.One.RepoID.Number = types.NumberNull()
						}
					}
					r.One.GitSource.One.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.Sha)
					r.One.GitSource.One.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments1.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2 != nil {
					r.One.GitSource.Two = &tfTypes.GetDeploymentGitSourceDeployments2{}
					r.One.GitSource.Two.Org = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.Org)
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.PrID != nil {
						r.One.GitSource.Two.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.PrID)))
					} else {
						r.One.GitSource.Two.PrID = types.NumberNull()
					}
					r.One.GitSource.Two.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.Ref)
					r.One.GitSource.Two.Repo = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.Repo)
					r.One.GitSource.Two.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.Sha)
					r.One.GitSource.Two.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments2.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3 != nil {
					r.One.GitSource.Three = &tfTypes.GetDeploymentGitSourceDeployments3{}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.PrID != nil {
						r.One.GitSource.Three.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.PrID)))
					} else {
						r.One.GitSource.Three.PrID = types.NumberNull()
					}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.ProjectID.Str != nil {
						r.One.GitSource.Three.ProjectID.Str = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.ProjectID.Str)
					}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.ProjectID.Number != nil {
						if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.ProjectID.Number != nil {
							r.One.GitSource.Three.ProjectID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.ProjectID.Number)))
						} else {
							r.One.GitSource.Three.ProjectID.Number = types.NumberNull()
						}
					}
					r.One.GitSource.Three.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.Ref)
					r.One.GitSource.Three.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.Sha)
					r.One.GitSource.Three.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments3.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4 != nil {
					r.One.GitSource.Four = &tfTypes.GetDeploymentGitSourceDeployments4{}
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.PrID != nil {
						r.One.GitSource.Four.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.PrID)))
					} else {
						r.One.GitSource.Four.PrID = types.NumberNull()
					}
					r.One.GitSource.Four.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.Ref)
					r.One.GitSource.Four.RepoUUID = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.RepoUUID)
					r.One.GitSource.Four.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.Sha)
					r.One.GitSource.Four.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.Type))
					r.One.GitSource.Four.WorkspaceUUID = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments4.WorkspaceUUID)
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5 != nil {
					r.One.GitSource.Five = &tfTypes.GetDeploymentGitSourceDeployments5{}
					r.One.GitSource.Five.Owner = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.Owner)
					if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.PrID != nil {
						r.One.GitSource.Five.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.PrID)))
					} else {
						r.One.GitSource.Five.PrID = types.NumberNull()
					}
					r.One.GitSource.Five.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.Ref)
					r.One.GitSource.Five.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.Sha)
					r.One.GitSource.Five.Slug = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.Slug)
					r.One.GitSource.Five.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments5.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments6 != nil {
					r.One.GitSource.Six = &tfTypes.CreateDeploymentGitSource6{}
					r.One.GitSource.Six.GitURL = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments6.GitURL)
					r.One.GitSource.Six.Ref = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments6.Ref)
					r.One.GitSource.Six.Sha = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments6.Sha)
					r.One.GitSource.Six.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments6.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7 != nil {
					r.One.GitSource.Seven = &tfTypes.CreateDeploymentGitSource7{}
					r.One.GitSource.Seven.Org = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.Org)
					r.One.GitSource.Seven.Ref = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.Ref)
					r.One.GitSource.Seven.Repo = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.Repo)
					r.One.GitSource.Seven.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.RepoID)))
					r.One.GitSource.Seven.Sha = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.Sha)
					r.One.GitSource.Seven.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments7.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments8 != nil {
					r.One.GitSource.Eight = &tfTypes.CreateDeploymentGitSource8{}
					r.One.GitSource.Eight.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments8.ProjectID)))
					r.One.GitSource.Eight.Ref = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments8.Ref)
					r.One.GitSource.Eight.Sha = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments8.Sha)
					r.One.GitSource.Eight.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments8.Type))
				}
				if resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9 != nil {
					r.One.GitSource.Nine = &tfTypes.CreateDeploymentGitSource9{}
					r.One.GitSource.Nine.Owner = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.Owner)
					r.One.GitSource.Nine.Ref = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.Ref)
					r.One.GitSource.Nine.RepoUUID = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.RepoUUID)
					r.One.GitSource.Nine.Sha = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.Sha)
					r.One.GitSource.Nine.Slug = types.StringPointerValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.Slug)
					r.One.GitSource.Nine.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.Type))
					r.One.GitSource.Nine.WorkspaceUUID = types.StringValue(resp.GetDeploymentResponseBody1.GitSource.GetDeploymentGitSourceDeployments9.WorkspaceUUID)
				}
			}
			r.One.ID = types.StringValue(resp.GetDeploymentResponseBody1.ID)
			r.ID = r.One.ID
			r.One.InspectorURL = types.StringPointerValue(resp.GetDeploymentResponseBody1.InspectorURL)
			r.One.IsInConcurrentBuildsQueue = types.BoolValue(resp.GetDeploymentResponseBody1.IsInConcurrentBuildsQueue)
			r.One.Lambdas = []tfTypes.Lambdas{}
			if len(r.One.Lambdas) > len(resp.GetDeploymentResponseBody1.Lambdas) {
				r.One.Lambdas = r.One.Lambdas[:len(resp.GetDeploymentResponseBody1.Lambdas)]
			}
			for lambdasCount, lambdasItem := range resp.GetDeploymentResponseBody1.Lambdas {
				var lambdas1 tfTypes.Lambdas
				if lambdasItem.CreatedAt != nil {
					lambdas1.CreatedAt = types.NumberValue(big.NewFloat(float64(*lambdasItem.CreatedAt)))
				} else {
					lambdas1.CreatedAt = types.NumberNull()
				}
				lambdas1.Entrypoint = types.StringPointerValue(lambdasItem.Entrypoint)
				lambdas1.ID = types.StringValue(lambdasItem.ID)
				lambdas1.Output = []tfTypes.CreateDeploymentOutput{}
				for outputCount, outputItem := range lambdasItem.Output {
					var output1 tfTypes.CreateDeploymentOutput
					output1.FunctionName = types.StringValue(outputItem.FunctionName)
					output1.Path = types.StringValue(outputItem.Path)
					if outputCount+1 > len(lambdas1.Output) {
						lambdas1.Output = append(lambdas1.Output, output1)
					} else {
						lambdas1.Output[outputCount].FunctionName = output1.FunctionName
						lambdas1.Output[outputCount].Path = output1.Path
					}
				}
				if lambdasItem.ReadyState != nil {
					lambdas1.ReadyState = types.StringValue(string(*lambdasItem.ReadyState))
				} else {
					lambdas1.ReadyState = types.StringNull()
				}
				if lambdasItem.ReadyStateAt != nil {
					lambdas1.ReadyStateAt = types.NumberValue(big.NewFloat(float64(*lambdasItem.ReadyStateAt)))
				} else {
					lambdas1.ReadyStateAt = types.NumberNull()
				}
				if lambdasCount+1 > len(r.One.Lambdas) {
					r.One.Lambdas = append(r.One.Lambdas, lambdas1)
				} else {
					r.One.Lambdas[lambdasCount].CreatedAt = lambdas1.CreatedAt
					r.One.Lambdas[lambdasCount].Entrypoint = lambdas1.Entrypoint
					r.One.Lambdas[lambdasCount].ID = lambdas1.ID
					r.One.Lambdas[lambdasCount].Output = lambdas1.Output
					r.One.Lambdas[lambdasCount].ReadyState = lambdas1.ReadyState
					r.One.Lambdas[lambdasCount].ReadyStateAt = lambdas1.ReadyStateAt
				}
			}
			if len(resp.GetDeploymentResponseBody1.Meta) > 0 {
				r.One.Meta = make(map[string]types.String)
				for key, value := range resp.GetDeploymentResponseBody1.Meta {
					r.One.Meta[key] = types.StringValue(value)
				}
			}
			r.One.MonorepoManager = types.StringPointerValue(resp.GetDeploymentResponseBody1.MonorepoManager)
			r.One.Name = types.StringValue(resp.GetDeploymentResponseBody1.Name)
			r.Name = r.One.Name
			r.One.OwnerID = types.StringValue(resp.GetDeploymentResponseBody1.OwnerID)
			r.One.PassiveConnectConfigurationID = types.StringPointerValue(resp.GetDeploymentResponseBody1.PassiveConnectConfigurationID)
			r.One.PassiveRegions = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.PassiveRegions {
				r.One.PassiveRegions = append(r.One.PassiveRegions, types.StringValue(v))
			}
			r.One.Plan = types.StringValue(string(resp.GetDeploymentResponseBody1.Plan))
			r.One.PreviewCommentsEnabled = types.BoolPointerValue(resp.GetDeploymentResponseBody1.PreviewCommentsEnabled)
			r.PreviewCommentsEnabled = r.One.PreviewCommentsEnabled
			if resp.GetDeploymentResponseBody1.Project == nil {
				r.One.Project = nil
			} else {
				r.One.Project = &tfTypes.GetDeploymentResponseBodyProject{}
				r.One.Project.Framework = types.StringPointerValue(resp.GetDeploymentResponseBody1.Project.Framework)
				r.One.Project.ID = types.StringValue(resp.GetDeploymentResponseBody1.Project.ID)
				r.One.Project.Name = types.StringValue(resp.GetDeploymentResponseBody1.Project.Name)
			}
			r.One.ProjectID = types.StringValue(resp.GetDeploymentResponseBody1.ProjectID)
			r.One.Public = types.BoolValue(resp.GetDeploymentResponseBody1.Public)
			r.Public = r.One.Public
			r.One.ReadyState = types.StringValue(string(resp.GetDeploymentResponseBody1.ReadyState))
			if resp.GetDeploymentResponseBody1.ReadySubstate != nil {
				r.One.ReadySubstate = types.StringValue(string(*resp.GetDeploymentResponseBody1.ReadySubstate))
			} else {
				r.One.ReadySubstate = types.StringNull()
			}
			r.One.Regions = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.Regions {
				r.One.Regions = append(r.One.Regions, types.StringValue(v))
			}
			r.One.Routes = []tfTypes.ResponseBodyRoutes{}
			if len(r.One.Routes) > len(resp.GetDeploymentResponseBody1.Routes) {
				r.One.Routes = r.One.Routes[:len(resp.GetDeploymentResponseBody1.Routes)]
			}
			for routesCount, routesItem := range resp.GetDeploymentResponseBody1.Routes {
				var routes1 tfTypes.ResponseBodyRoutes
				if routesItem.GetDeploymentRoutes1 != nil {
					routes1.One = &tfTypes.GetDeploymentRoutes1{}
					routes1.One.CaseSensitive = types.BoolPointerValue(routesItem.GetDeploymentRoutes1.CaseSensitive)
					routes1.One.Check = types.BoolPointerValue(routesItem.GetDeploymentRoutes1.Check)
					routes1.One.Continue = types.BoolPointerValue(routesItem.GetDeploymentRoutes1.Continue)
					routes1.One.Dest = types.StringPointerValue(routesItem.GetDeploymentRoutes1.Dest)
					routes1.One.Has = []tfTypes.GetDeploymentRoutesHas{}
					for hasCount, hasItem := range routesItem.GetDeploymentRoutes1.Has {
						var has1 tfTypes.GetDeploymentRoutesHas
						if hasItem.GetDeploymentHas1 != nil {
							has1.One = &tfTypes.GetDeploymentHas1{}
							has1.One.Type = types.StringValue(string(hasItem.GetDeploymentHas1.Type))
							has1.One.Value = types.StringValue(hasItem.GetDeploymentHas1.Value)
						}
						if hasItem.GetDeploymentHas2 != nil {
							has1.Two = &tfTypes.GetDeploymentHas2{}
							has1.Two.Key = types.StringValue(hasItem.GetDeploymentHas2.Key)
							has1.Two.Type = types.StringValue(string(hasItem.GetDeploymentHas2.Type))
							has1.Two.Value = types.StringPointerValue(hasItem.GetDeploymentHas2.Value)
						}
						if hasCount+1 > len(routes1.One.Has) {
							routes1.One.Has = append(routes1.One.Has, has1)
						} else {
							routes1.One.Has[hasCount].One = has1.One
							routes1.One.Has[hasCount].Two = has1.Two
						}
					}
					if len(routesItem.GetDeploymentRoutes1.Headers) > 0 {
						routes1.One.Headers = make(map[string]types.String)
						for key2, value3 := range routesItem.GetDeploymentRoutes1.Headers {
							routes1.One.Headers[key2] = types.StringValue(value3)
						}
					}
					routes1.One.Important = types.BoolPointerValue(routesItem.GetDeploymentRoutes1.Important)
					if routesItem.GetDeploymentRoutes1.Locale == nil {
						routes1.One.Locale = nil
					} else {
						routes1.One.Locale = &tfTypes.GetDeploymentRoutesLocale{}
						routes1.One.Locale.Cookie = types.StringPointerValue(routesItem.GetDeploymentRoutes1.Locale.Cookie)
						if len(routesItem.GetDeploymentRoutes1.Locale.Redirect) > 0 {
							routes1.One.Locale.Redirect = make(map[string]types.String)
							for key3, value4 := range routesItem.GetDeploymentRoutes1.Locale.Redirect {
								routes1.One.Locale.Redirect[key3] = types.StringValue(value4)
							}
						}
					}
					routes1.One.Methods = []types.String{}
					for _, v := range routesItem.GetDeploymentRoutes1.Methods {
						routes1.One.Methods = append(routes1.One.Methods, types.StringValue(v))
					}
					if routesItem.GetDeploymentRoutes1.Middleware != nil {
						routes1.One.Middleware = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentRoutes1.Middleware)))
					} else {
						routes1.One.Middleware = types.NumberNull()
					}
					routes1.One.MiddlewarePath = types.StringPointerValue(routesItem.GetDeploymentRoutes1.MiddlewarePath)
					routes1.One.MiddlewareRawSrc = []types.String{}
					for _, v := range routesItem.GetDeploymentRoutes1.MiddlewareRawSrc {
						routes1.One.MiddlewareRawSrc = append(routes1.One.MiddlewareRawSrc, types.StringValue(v))
					}
					routes1.One.Missing = []tfTypes.GetDeploymentRoutesHas{}
					for missingCount, missingItem := range routesItem.GetDeploymentRoutes1.Missing {
						var missing1 tfTypes.GetDeploymentRoutesHas
						if missingItem.GetDeploymentMissing1 != nil {
							missing1.One = &tfTypes.GetDeploymentHas1{}
							missing1.One.Type = types.StringValue(string(missingItem.GetDeploymentMissing1.Type))
							missing1.One.Value = types.StringValue(missingItem.GetDeploymentMissing1.Value)
						}
						if missingItem.GetDeploymentMissing2 != nil {
							missing1.Two = &tfTypes.GetDeploymentHas2{}
							missing1.Two.Key = types.StringValue(missingItem.GetDeploymentMissing2.Key)
							missing1.Two.Type = types.StringValue(string(missingItem.GetDeploymentMissing2.Type))
							missing1.Two.Value = types.StringPointerValue(missingItem.GetDeploymentMissing2.Value)
						}
						if missingCount+1 > len(routes1.One.Missing) {
							routes1.One.Missing = append(routes1.One.Missing, missing1)
						} else {
							routes1.One.Missing[missingCount].One = missing1.One
							routes1.One.Missing[missingCount].Two = missing1.Two
						}
					}
					routes1.One.Override = types.BoolPointerValue(routesItem.GetDeploymentRoutes1.Override)
					routes1.One.Src = types.StringValue(routesItem.GetDeploymentRoutes1.Src)
					if routesItem.GetDeploymentRoutes1.Status != nil {
						routes1.One.Status = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentRoutes1.Status)))
					} else {
						routes1.One.Status = types.NumberNull()
					}
				}
				if routesItem.GetDeploymentRoutes2 != nil {
					routes1.Two = &tfTypes.GetDeploymentRoutes2{}
					routes1.Two.Dest = types.StringPointerValue(routesItem.GetDeploymentRoutes2.Dest)
					routes1.Two.Handle = types.StringValue(string(routesItem.GetDeploymentRoutes2.Handle))
					routes1.Two.Src = types.StringPointerValue(routesItem.GetDeploymentRoutes2.Src)
					if routesItem.GetDeploymentRoutes2.Status != nil {
						routes1.Two.Status = types.NumberValue(big.NewFloat(float64(*routesItem.GetDeploymentRoutes2.Status)))
					} else {
						routes1.Two.Status = types.NumberNull()
					}
				}
				if routesItem.GetDeploymentRoutes3 != nil {
					routes1.Three = &tfTypes.GetDeploymentRoutes3{}
					routes1.Three.Continue = types.BoolValue(routesItem.GetDeploymentRoutes3.Continue)
					routes1.Three.Middleware = types.NumberValue(big.NewFloat(float64(routesItem.GetDeploymentRoutes3.Middleware)))
					routes1.Three.Src = types.StringValue(routesItem.GetDeploymentRoutes3.Src)
				}
				if routesCount+1 > len(r.One.Routes) {
					r.One.Routes = append(r.One.Routes, routes1)
				} else {
					r.One.Routes[routesCount].One = routes1.One
					r.One.Routes[routesCount].Two = routes1.Two
					r.One.Routes[routesCount].Three = routes1.Three
				}
			}
			if resp.GetDeploymentResponseBody1.Source != nil {
				r.One.Source = types.StringValue(string(*resp.GetDeploymentResponseBody1.Source))
			} else {
				r.One.Source = types.StringNull()
			}
			if resp.GetDeploymentResponseBody1.Target != nil {
				r.One.Target = types.StringValue(string(*resp.GetDeploymentResponseBody1.Target))
			} else {
				r.One.Target = types.StringNull()
			}
			if resp.GetDeploymentResponseBody1.Team == nil {
				r.One.Team = nil
			} else {
				r.One.Team = &tfTypes.GetDeploymentResponseBodyTeam{}
				r.One.Team.Avatar = types.StringPointerValue(resp.GetDeploymentResponseBody1.Team.Avatar)
				r.One.Team.ID = types.StringValue(resp.GetDeploymentResponseBody1.Team.ID)
				r.One.Team.Name = types.StringValue(resp.GetDeploymentResponseBody1.Team.Name)
				r.One.Team.Slug = types.StringValue(resp.GetDeploymentResponseBody1.Team.Slug)
			}
			r.One.Type = types.StringValue(string(resp.GetDeploymentResponseBody1.Type))
			r.One.URL = types.StringValue(resp.GetDeploymentResponseBody1.URL)
			r.URL = r.One.URL
			r.One.UserAliases = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody1.UserAliases {
				r.One.UserAliases = append(r.One.UserAliases, types.StringValue(v))
			}
			r.One.Version = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody1.Version)))
		}
		if resp.GetDeploymentResponseBody2 != nil {
			r.Two = &tfTypes.GetDeploymentResponseBody2{}
			r.Two.Alias = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody2.Alias {
				r.Two.Alias = append(r.Two.Alias, types.StringValue(v))
			}
			r.Two.AliasAssigned = types.BoolValue(resp.GetDeploymentResponseBody2.AliasAssigned)
			r.AliasAssigned = r.Two.AliasAssigned
			if resp.GetDeploymentResponseBody2.AliasError == nil {
				r.Two.AliasError = nil
			} else {
				r.Two.AliasError = &tfTypes.AliasError{}
				r.Two.AliasError.Code = types.StringValue(resp.GetDeploymentResponseBody2.AliasError.Code)
				r.Two.AliasError.Message = types.StringValue(resp.GetDeploymentResponseBody2.AliasError.Message)
			}
			r.Two.AliasFinal = types.StringPointerValue(resp.GetDeploymentResponseBody2.AliasFinal)
			r.AliasFinal = r.Two.AliasFinal
			if resp.GetDeploymentResponseBody2.AliasWarning == nil {
				r.Two.AliasWarning = nil
			} else {
				r.Two.AliasWarning = &tfTypes.AliasWarning{}
				r.Two.AliasWarning.Action = types.StringPointerValue(resp.GetDeploymentResponseBody2.AliasWarning.Action)
				r.Two.AliasWarning.Code = types.StringValue(resp.GetDeploymentResponseBody2.AliasWarning.Code)
				r.Two.AliasWarning.Link = types.StringPointerValue(resp.GetDeploymentResponseBody2.AliasWarning.Link)
				r.Two.AliasWarning.Message = types.StringValue(resp.GetDeploymentResponseBody2.AliasWarning.Message)
			}
			r.Two.AutoAssignCustomDomains = types.BoolPointerValue(resp.GetDeploymentResponseBody2.AutoAssignCustomDomains)
			r.AutoAssignCustomDomains = r.Two.AutoAssignCustomDomains
			r.Two.AutomaticAliases = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody2.AutomaticAliases {
				r.Two.AutomaticAliases = append(r.Two.AutomaticAliases, types.StringValue(v))
			}
			r.Two.BootedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.BootedAt)))
			if resp.GetDeploymentResponseBody2.BuildErrorAt != nil {
				r.Two.BuildErrorAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.BuildErrorAt)))
			} else {
				r.Two.BuildErrorAt = types.NumberNull()
			}
			r.Two.BuildingAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.BuildingAt)))
			if resp.GetDeploymentResponseBody2.CanceledAt != nil {
				r.Two.CanceledAt = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.CanceledAt)))
			} else {
				r.Two.CanceledAt = types.NumberNull()
			}
			if resp.GetDeploymentResponseBody2.ChecksConclusion != nil {
				r.Two.ChecksConclusion = types.StringValue(string(*resp.GetDeploymentResponseBody2.ChecksConclusion))
			} else {
				r.Two.ChecksConclusion = types.StringNull()
			}
			if resp.GetDeploymentResponseBody2.ChecksState != nil {
				r.Two.ChecksState = types.StringValue(string(*resp.GetDeploymentResponseBody2.ChecksState))
			} else {
				r.Two.ChecksState = types.StringNull()
			}
			r.Two.CreatedAt = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.CreatedAt)))
			r.Two.Creator.Avatar = types.StringPointerValue(resp.GetDeploymentResponseBody2.Creator.Avatar)
			r.Two.Creator.UID = types.StringValue(resp.GetDeploymentResponseBody2.Creator.UID)
			r.Two.Creator.Username = types.StringPointerValue(resp.GetDeploymentResponseBody2.Creator.Username)
			r.Two.ErrorCode = types.StringPointerValue(resp.GetDeploymentResponseBody2.ErrorCode)
			r.ErrorCode = r.Two.ErrorCode
			r.Two.ErrorLink = types.StringPointerValue(resp.GetDeploymentResponseBody2.ErrorLink)
			r.ErrorLink = r.Two.ErrorLink
			r.Two.ErrorMessage = types.StringPointerValue(resp.GetDeploymentResponseBody2.ErrorMessage)
			r.ErrorMessage = r.Two.ErrorMessage
			r.Two.ErrorStep = types.StringPointerValue(resp.GetDeploymentResponseBody2.ErrorStep)
			r.ErrorStep = r.Two.ErrorStep
			if resp.GetDeploymentResponseBody2.GitSource == nil {
				r.Two.GitSource = nil
			} else {
				r.Two.GitSource = &tfTypes.GetDeploymentResponseBodyGitSource{}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1 != nil {
					r.Two.GitSource.One = &tfTypes.GetDeploymentGitSourceDeployments1{}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.PrID != nil {
						r.Two.GitSource.One.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.PrID)))
					} else {
						r.Two.GitSource.One.PrID = types.NumberNull()
					}
					r.Two.GitSource.One.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.Ref)
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.RepoID.Str != nil {
						r.Two.GitSource.One.RepoID.Str = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.RepoID.Str)
					}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.RepoID.Number != nil {
						if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.RepoID.Number != nil {
							r.Two.GitSource.One.RepoID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.RepoID.Number)))
						} else {
							r.Two.GitSource.One.RepoID.Number = types.NumberNull()
						}
					}
					r.Two.GitSource.One.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.Sha)
					r.Two.GitSource.One.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource1.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2 != nil {
					r.Two.GitSource.Two = &tfTypes.GetDeploymentGitSourceDeployments2{}
					r.Two.GitSource.Two.Org = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.Org)
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.PrID != nil {
						r.Two.GitSource.Two.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.PrID)))
					} else {
						r.Two.GitSource.Two.PrID = types.NumberNull()
					}
					r.Two.GitSource.Two.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.Ref)
					r.Two.GitSource.Two.Repo = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.Repo)
					r.Two.GitSource.Two.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.Sha)
					r.Two.GitSource.Two.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource2.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3 != nil {
					r.Two.GitSource.Three = &tfTypes.GetDeploymentGitSourceDeployments3{}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.PrID != nil {
						r.Two.GitSource.Three.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.PrID)))
					} else {
						r.Two.GitSource.Three.PrID = types.NumberNull()
					}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.ProjectID.Str != nil {
						r.Two.GitSource.Three.ProjectID.Str = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.ProjectID.Str)
					}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.ProjectID.Number != nil {
						if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.ProjectID.Number != nil {
							r.Two.GitSource.Three.ProjectID.Number = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.ProjectID.Number)))
						} else {
							r.Two.GitSource.Three.ProjectID.Number = types.NumberNull()
						}
					}
					r.Two.GitSource.Three.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.Ref)
					r.Two.GitSource.Three.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.Sha)
					r.Two.GitSource.Three.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource3.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4 != nil {
					r.Two.GitSource.Four = &tfTypes.GetDeploymentGitSourceDeployments4{}
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.PrID != nil {
						r.Two.GitSource.Four.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.PrID)))
					} else {
						r.Two.GitSource.Four.PrID = types.NumberNull()
					}
					r.Two.GitSource.Four.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.Ref)
					r.Two.GitSource.Four.RepoUUID = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.RepoUUID)
					r.Two.GitSource.Four.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.Sha)
					r.Two.GitSource.Four.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.Type))
					r.Two.GitSource.Four.WorkspaceUUID = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource4.WorkspaceUUID)
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5 != nil {
					r.Two.GitSource.Five = &tfTypes.GetDeploymentGitSourceDeployments5{}
					r.Two.GitSource.Five.Owner = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.Owner)
					if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.PrID != nil {
						r.Two.GitSource.Five.PrID = types.NumberValue(big.NewFloat(float64(*resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.PrID)))
					} else {
						r.Two.GitSource.Five.PrID = types.NumberNull()
					}
					r.Two.GitSource.Five.Ref = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.Ref)
					r.Two.GitSource.Five.Sha = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.Sha)
					r.Two.GitSource.Five.Slug = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.Slug)
					r.Two.GitSource.Five.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource5.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource6 != nil {
					r.Two.GitSource.Six = &tfTypes.CreateDeploymentGitSource6{}
					r.Two.GitSource.Six.GitURL = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource6.GitURL)
					r.Two.GitSource.Six.Ref = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource6.Ref)
					r.Two.GitSource.Six.Sha = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource6.Sha)
					r.Two.GitSource.Six.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource6.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7 != nil {
					r.Two.GitSource.Seven = &tfTypes.CreateDeploymentGitSource7{}
					r.Two.GitSource.Seven.Org = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.Org)
					r.Two.GitSource.Seven.Ref = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.Ref)
					r.Two.GitSource.Seven.Repo = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.Repo)
					r.Two.GitSource.Seven.RepoID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.RepoID)))
					r.Two.GitSource.Seven.Sha = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.Sha)
					r.Two.GitSource.Seven.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource7.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource8 != nil {
					r.Two.GitSource.Eight = &tfTypes.CreateDeploymentGitSource8{}
					r.Two.GitSource.Eight.ProjectID = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource8.ProjectID)))
					r.Two.GitSource.Eight.Ref = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource8.Ref)
					r.Two.GitSource.Eight.Sha = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource8.Sha)
					r.Two.GitSource.Eight.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource8.Type))
				}
				if resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9 != nil {
					r.Two.GitSource.Nine = &tfTypes.CreateDeploymentGitSource9{}
					r.Two.GitSource.Nine.Owner = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.Owner)
					r.Two.GitSource.Nine.Ref = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.Ref)
					r.Two.GitSource.Nine.RepoUUID = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.RepoUUID)
					r.Two.GitSource.Nine.Sha = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.Sha)
					r.Two.GitSource.Nine.Slug = types.StringPointerValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.Slug)
					r.Two.GitSource.Nine.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.Type))
					r.Two.GitSource.Nine.WorkspaceUUID = types.StringValue(resp.GetDeploymentResponseBody2.GitSource.GetDeploymentGitSource9.WorkspaceUUID)
				}
			}
			r.Two.ID = types.StringValue(resp.GetDeploymentResponseBody2.ID)
			r.ID = r.Two.ID
			r.Two.Lambdas = []tfTypes.Lambdas{}
			if len(r.Two.Lambdas) > len(resp.GetDeploymentResponseBody2.Lambdas) {
				r.Two.Lambdas = r.Two.Lambdas[:len(resp.GetDeploymentResponseBody2.Lambdas)]
			}
			for lambdasCount1, lambdasItem1 := range resp.GetDeploymentResponseBody2.Lambdas {
				var lambdas3 tfTypes.Lambdas
				if lambdasItem1.CreatedAt != nil {
					lambdas3.CreatedAt = types.NumberValue(big.NewFloat(float64(*lambdasItem1.CreatedAt)))
				} else {
					lambdas3.CreatedAt = types.NumberNull()
				}
				lambdas3.Entrypoint = types.StringPointerValue(lambdasItem1.Entrypoint)
				lambdas3.ID = types.StringValue(lambdasItem1.ID)
				lambdas3.Output = []tfTypes.CreateDeploymentOutput{}
				for outputCount1, outputItem1 := range lambdasItem1.Output {
					var output3 tfTypes.CreateDeploymentOutput
					output3.FunctionName = types.StringValue(outputItem1.FunctionName)
					output3.Path = types.StringValue(outputItem1.Path)
					if outputCount1+1 > len(lambdas3.Output) {
						lambdas3.Output = append(lambdas3.Output, output3)
					} else {
						lambdas3.Output[outputCount1].FunctionName = output3.FunctionName
						lambdas3.Output[outputCount1].Path = output3.Path
					}
				}
				if lambdasItem1.ReadyState != nil {
					lambdas3.ReadyState = types.StringValue(string(*lambdasItem1.ReadyState))
				} else {
					lambdas3.ReadyState = types.StringNull()
				}
				if lambdasItem1.ReadyStateAt != nil {
					lambdas3.ReadyStateAt = types.NumberValue(big.NewFloat(float64(*lambdasItem1.ReadyStateAt)))
				} else {
					lambdas3.ReadyStateAt = types.NumberNull()
				}
				if lambdasCount1+1 > len(r.Two.Lambdas) {
					r.Two.Lambdas = append(r.Two.Lambdas, lambdas3)
				} else {
					r.Two.Lambdas[lambdasCount1].CreatedAt = lambdas3.CreatedAt
					r.Two.Lambdas[lambdasCount1].Entrypoint = lambdas3.Entrypoint
					r.Two.Lambdas[lambdasCount1].ID = lambdas3.ID
					r.Two.Lambdas[lambdasCount1].Output = lambdas3.Output
					r.Two.Lambdas[lambdasCount1].ReadyState = lambdas3.ReadyState
					r.Two.Lambdas[lambdasCount1].ReadyStateAt = lambdas3.ReadyStateAt
				}
			}
			if len(resp.GetDeploymentResponseBody2.Meta) > 0 {
				r.Two.Meta = make(map[string]types.String)
				for key5, value7 := range resp.GetDeploymentResponseBody2.Meta {
					r.Two.Meta[key5] = types.StringValue(value7)
				}
			}
			r.Two.Name = types.StringValue(resp.GetDeploymentResponseBody2.Name)
			r.Name = r.Two.Name
			r.Two.PassiveRegions = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody2.PassiveRegions {
				r.Two.PassiveRegions = append(r.Two.PassiveRegions, types.StringValue(v))
			}
			r.Two.PreviewCommentsEnabled = types.BoolPointerValue(resp.GetDeploymentResponseBody2.PreviewCommentsEnabled)
			r.PreviewCommentsEnabled = r.Two.PreviewCommentsEnabled
			if resp.GetDeploymentResponseBody2.Project == nil {
				r.Two.Project = nil
			} else {
				r.Two.Project = &tfTypes.GetDeploymentResponseBodyProject{}
				r.Two.Project.Framework = types.StringPointerValue(resp.GetDeploymentResponseBody2.Project.Framework)
				r.Two.Project.ID = types.StringValue(resp.GetDeploymentResponseBody2.Project.ID)
				r.Two.Project.Name = types.StringValue(resp.GetDeploymentResponseBody2.Project.Name)
			}
			r.Two.Public = types.BoolValue(resp.GetDeploymentResponseBody2.Public)
			r.Public = r.Two.Public
			r.Two.ReadyState = types.StringValue(string(resp.GetDeploymentResponseBody2.ReadyState))
			if resp.GetDeploymentResponseBody2.ReadySubstate != nil {
				r.Two.ReadySubstate = types.StringValue(string(*resp.GetDeploymentResponseBody2.ReadySubstate))
			} else {
				r.Two.ReadySubstate = types.StringNull()
			}
			r.Two.Regions = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody2.Regions {
				r.Two.Regions = append(r.Two.Regions, types.StringValue(v))
			}
			if resp.GetDeploymentResponseBody2.Source != nil {
				r.Two.Source = types.StringValue(string(*resp.GetDeploymentResponseBody2.Source))
			} else {
				r.Two.Source = types.StringNull()
			}
			if resp.GetDeploymentResponseBody2.Target != nil {
				r.Two.Target = types.StringValue(string(*resp.GetDeploymentResponseBody2.Target))
			} else {
				r.Two.Target = types.StringNull()
			}
			if resp.GetDeploymentResponseBody2.Team == nil {
				r.Two.Team = nil
			} else {
				r.Two.Team = &tfTypes.GetDeploymentResponseBodyTeam{}
				r.Two.Team.Avatar = types.StringPointerValue(resp.GetDeploymentResponseBody2.Team.Avatar)
				r.Two.Team.ID = types.StringValue(resp.GetDeploymentResponseBody2.Team.ID)
				r.Two.Team.Name = types.StringValue(resp.GetDeploymentResponseBody2.Team.Name)
				r.Two.Team.Slug = types.StringValue(resp.GetDeploymentResponseBody2.Team.Slug)
			}
			r.Two.Type = types.StringValue(string(resp.GetDeploymentResponseBody2.Type))
			r.Two.URL = types.StringValue(resp.GetDeploymentResponseBody2.URL)
			r.URL = r.Two.URL
			r.Two.UserAliases = []types.String{}
			for _, v := range resp.GetDeploymentResponseBody2.UserAliases {
				r.Two.UserAliases = append(r.Two.UserAliases, types.StringValue(v))
			}
			r.Two.Version = types.NumberValue(big.NewFloat(float64(resp.GetDeploymentResponseBody2.Version)))
		}
	}
}
