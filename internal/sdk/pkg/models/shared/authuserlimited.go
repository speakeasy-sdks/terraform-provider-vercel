// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthUserLimitedVersion - The user's version. Will either be unset or `northstar`.
type AuthUserLimitedVersion string

const (
	AuthUserLimitedVersionNorthstar AuthUserLimitedVersion = "northstar"
)

func (e AuthUserLimitedVersion) ToPointer() *AuthUserLimitedVersion {
	return &e
}

func (e *AuthUserLimitedVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "northstar":
		*e = AuthUserLimitedVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserLimitedVersion: %v", v)
	}
}

// AuthUser - Data for the currently authenticated User.
type AuthUser struct {
	// set of dashboard view preferences (cards or list) per scopeId
	ActiveDashboardViews []AuthUserActiveDashboardViews `json:"activeDashboardViews,omitempty"`
	// SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
	Avatar *string `json:"avatar"`
	// An object containing billing infomation associated with the User account.
	Billing *AuthUserBilling `json:"billing"`
	// UNIX timestamp (in milliseconds) when the User account was created.
	CreatedAt int64 `json:"createdAt"`
	// data cache settings
	DataCache *AuthUserDataCache `json:"dataCache,omitempty"`
	// The user's default team. Only applies if the user's `version` is `'northstar'`.
	DefaultTeamID *string `json:"defaultTeamId"`
	// A record of when, under a certain scopeId, a toast was dismissed
	DismissedToasts []AuthUserDismissedToasts `json:"dismissedToasts,omitempty"`
	// Email address associated with the User account.
	Email string `json:"email"`
	// A list of projects and spaces across teams that a user has marked as a favorite.
	FavoriteProjectsAndSpaces []AuthUserFavoriteProjectsAndSpaces `json:"favoriteProjectsAndSpaces,omitempty"`
	// Feature blocks for the user
	FeatureBlocks *AuthUserFeatureBlocks `json:"featureBlocks,omitempty"`
	// Whether the user has a trial available for a paid plan subscription.
	HasTrialAvailable bool `json:"hasTrialAvailable"`
	// The User's unique identifier.
	ID                       string                            `json:"id"`
	ImportFlowGitNamespace   *AuthUserImportFlowGitNamespace   `json:"importFlowGitNamespace,omitempty"`
	ImportFlowGitNamespaceID *AuthUserImportFlowGitNamespaceID `json:"importFlowGitNamespaceId,omitempty"`
	ImportFlowGitProvider    *AuthUserImportFlowGitProvider    `json:"importFlowGitProvider,omitempty"`
	// Name associated with the User account, or `null` if none has been provided.
	Name                            *string                                   `json:"name"`
	PreferredScopesAndGitNamespaces []AuthUserPreferredScopesAndGitNamespaces `json:"preferredScopesAndGitNamespaces,omitempty"`
	// remote caching settings
	RemoteCaching *AuthUserRemoteCaching `json:"remoteCaching,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ResourceConfig AuthUserResourceConfig `json:"resourceConfig"`
	// When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
	SoftBlock *AuthUserSoftBlock `json:"softBlock"`
	// Prefix that will be used in the URL of "Preview" deployments created by the User account.
	StagingPrefix string `json:"stagingPrefix"`
	// Unique username associated with the User account.
	Username string `json:"username"`
	// The user's version. Will either be unset or `northstar`.
	Version *AuthUserVersion `json:"version"`
}
