// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AuthUserActiveDashboardViewsViewPreference string

const (
	AuthUserActiveDashboardViewsViewPreferenceCards AuthUserActiveDashboardViewsViewPreference = "cards"
	AuthUserActiveDashboardViewsViewPreferenceList  AuthUserActiveDashboardViewsViewPreference = "list"
)

func (e AuthUserActiveDashboardViewsViewPreference) ToPointer() *AuthUserActiveDashboardViewsViewPreference {
	return &e
}

func (e *AuthUserActiveDashboardViewsViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cards":
		fallthrough
	case "list":
		*e = AuthUserActiveDashboardViewsViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserActiveDashboardViewsViewPreference: %v", v)
	}
}

// AuthUserActiveDashboardViews - set of dashboard view preferences (cards or list) per scopeId
type AuthUserActiveDashboardViews struct {
	ScopeID        string                                     `json:"scopeId"`
	ViewPreference AuthUserActiveDashboardViewsViewPreference `json:"viewPreference"`
}

type AuthUserBillingAddress struct {
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	State      *string `json:"state,omitempty"`
}

type AuthUserBillingContract struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type AuthUserBillingControls struct {
	AnalyticsSampleRateInPercent *int64 `json:"analyticsSampleRateInPercent,omitempty"`
	AnalyticsSpendLimitInDollars *int64 `json:"analyticsSpendLimitInDollars,omitempty"`
}

type AuthUserBillingCurrency string

const (
	AuthUserBillingCurrencyUsd AuthUserBillingCurrency = "usd"
	AuthUserBillingCurrencyEur AuthUserBillingCurrency = "eur"
)

func (e AuthUserBillingCurrency) ToPointer() *AuthUserBillingCurrency {
	return &e
}

func (e *AuthUserBillingCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usd":
		fallthrough
	case "eur":
		*e = AuthUserBillingCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingCurrency: %v", v)
	}
}

type AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalMonth AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsAnalyticsFrequency struct {
	Interval      AuthUserBillingInvoiceItemsAnalyticsFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsAnalyticsFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsAnalytics struct {
	CreatedAt   *int64                                         `json:"createdAt,omitempty"`
	DisabledAt  *int64                                         `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                           `json:"hidden"`
	MaxQuantity *int64                                         `json:"maxQuantity,omitempty"`
	Name        *string                                        `json:"name,omitempty"`
	Price       int64                                          `json:"price"`
	Quantity    int64                                          `json:"quantity"`
	Tier        *int64                                         `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsAnalyticsUsage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsArtifacts struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsBandwidth struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalMonth AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsConcurrentBuildsFrequency struct {
	Interval      AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsConcurrentBuilds - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsConcurrentBuilds struct {
	CreatedAt   *int64                                                `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsConcurrentBuildsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                  `json:"hidden"`
	MaxQuantity *int64                                                `json:"maxQuantity,omitempty"`
	Name        *string                                               `json:"name,omitempty"`
	Price       int64                                                 `json:"price"`
	Quantity    int64                                                 `json:"quantity"`
	Tier        *int64                                                `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsCronJobInvocation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsDataCacheRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsDataCacheRevalidation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsDataCacheWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsEdgeConfigRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsEdgeConfigWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsEdgeFunctionExecutionUnits struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsEdgeMiddlewareInvocations struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalMonth AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsEnterpriseFrequency struct {
	Interval      AuthUserBillingInvoiceItemsEnterpriseFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsEnterpriseFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsEnterprise - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsEnterprise struct {
	CreatedAt   *int64                                          `json:"createdAt,omitempty"`
	DisabledAt  *int64                                          `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsEnterpriseFrequency `json:"frequency,omitempty"`
	Hidden      bool                                            `json:"hidden"`
	MaxQuantity *int64                                          `json:"maxQuantity,omitempty"`
	Name        *string                                         `json:"name,omitempty"`
	Price       int64                                           `json:"price"`
	Quantity    int64                                           `json:"quantity"`
	Tier        *int64                                          `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsMonitoringFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalMonth AuthUserBillingInvoiceItemsMonitoringFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsMonitoringFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsMonitoringFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsMonitoringFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsMonitoringFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsMonitoringFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsMonitoringFrequency struct {
	Interval      AuthUserBillingInvoiceItemsMonitoringFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsMonitoringFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsMonitoring - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsMonitoring struct {
	CreatedAt   *int64                                          `json:"createdAt,omitempty"`
	DisabledAt  *int64                                          `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsMonitoringFrequency `json:"frequency,omitempty"`
	Hidden      bool                                            `json:"hidden"`
	MaxQuantity *int64                                          `json:"maxQuantity,omitempty"`
	Name        *string                                         `json:"name,omitempty"`
	Price       int64                                           `json:"price"`
	Quantity    int64                                           `json:"quantity"`
	Tier        *int64                                          `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsMonitoringMetric struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalMonth AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsPasswordProtectionFrequency struct {
	Interval      AuthUserBillingInvoiceItemsPasswordProtectionFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsPasswordProtection - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsPasswordProtection struct {
	CreatedAt   *int64                                                  `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                  `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsPasswordProtectionFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                    `json:"hidden"`
	MaxQuantity *int64                                                  `json:"maxQuantity,omitempty"`
	Name        *string                                                 `json:"name,omitempty"`
	Price       int64                                                   `json:"price"`
	Quantity    int64                                                   `json:"quantity"`
	Tier        *int64                                                  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPostgresComputeTime struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPostgresDataStorage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPostgresDataTransfer struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPostgresDatabase struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPostgresWrittenData struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalMonth AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequency struct {
	Interval      AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsPreviewDeploymentSuffix - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsPreviewDeploymentSuffix struct {
	CreatedAt   *int64                                                       `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                       `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsPreviewDeploymentSuffixFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                         `json:"hidden"`
	MaxQuantity *int64                                                       `json:"maxQuantity,omitempty"`
	Name        *string                                                      `json:"name,omitempty"`
	Price       int64                                                        `json:"price"`
	Quantity    int64                                                        `json:"quantity"`
	Tier        *int64                                                       `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsProFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsProFrequencyIntervalMonth AuthUserBillingInvoiceItemsProFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsProFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsProFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsProFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsProFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsProFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsProFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsProFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsProFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsProFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsProFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsProFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsProFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsProFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsProFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsProFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsProFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsProFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsProFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsProFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsProFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsProFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsProFrequency struct {
	Interval      AuthUserBillingInvoiceItemsProFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsProFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsPro - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsPro struct {
	CreatedAt   *int64                                   `json:"createdAt,omitempty"`
	DisabledAt  *int64                                   `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsProFrequency `json:"frequency,omitempty"`
	Hidden      bool                                     `json:"hidden"`
	MaxQuantity *int64                                   `json:"maxQuantity,omitempty"`
	Name        *string                                  `json:"name,omitempty"`
	Price       int64                                    `json:"price"`
	Quantity    int64                                    `json:"quantity"`
	Tier        *int64                                   `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsSamlFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalMonth AuthUserBillingInvoiceItemsSamlFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsSamlFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsSamlFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsSamlFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsSamlFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsSamlFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsSamlFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsSamlFrequency struct {
	Interval      AuthUserBillingInvoiceItemsSamlFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsSamlFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsSaml - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsSaml struct {
	CreatedAt   *int64                                    `json:"createdAt,omitempty"`
	DisabledAt  *int64                                    `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsSamlFrequency `json:"frequency,omitempty"`
	Hidden      bool                                      `json:"hidden"`
	MaxQuantity *int64                                    `json:"maxQuantity,omitempty"`
	Name        *string                                   `json:"name,omitempty"`
	Price       int64                                     `json:"price"`
	Quantity    int64                                     `json:"quantity"`
	Tier        *int64                                    `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsServerlessFunctionExecution struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsSourceImages struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsStorageRedisTotalBandwidthInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsStorageRedisTotalCommands struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsStorageRedisTotalDailyAvgStorageInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsStorageRedisTotalDatabases struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalMonth AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsTeamSeatsFrequency struct {
	Interval      AuthUserBillingInvoiceItemsTeamSeatsFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsTeamSeatsFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsTeamSeats - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsTeamSeats struct {
	CreatedAt   *int64                                         `json:"createdAt,omitempty"`
	DisabledAt  *int64                                         `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsTeamSeatsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                           `json:"hidden"`
	MaxQuantity *int64                                         `json:"maxQuantity,omitempty"`
	Name        *string                                        `json:"name,omitempty"`
	Price       int64                                          `json:"price"`
	Quantity    int64                                          `json:"quantity"`
	Tier        *int64                                         `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval string

const (
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalMonth AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval = "month"
)

func (e AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval) ToPointer() *AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval {
	return &e
}

func (e *AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval: %v", v)
	}
}

type AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount int64

const (
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountOne    AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 1
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountTwo    AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 2
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountThree  AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 3
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountSix    AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 6
	AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountTwelve AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 12
)

func (e AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount) ToPointer() *AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount {
	return &e
}

func (e *AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 12:
		*e = AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount: %v", v)
	}
}

type AuthUserBillingInvoiceItemsWebAnalyticsFrequency struct {
	Interval      AuthUserBillingInvoiceItemsWebAnalyticsFrequencyInterval      `json:"interval"`
	IntervalCount AuthUserBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount `json:"intervalCount"`
}

// AuthUserBillingInvoiceItemsWebAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type AuthUserBillingInvoiceItemsWebAnalytics struct {
	CreatedAt   *int64                                            `json:"createdAt,omitempty"`
	DisabledAt  *int64                                            `json:"disabledAt,omitempty"`
	Frequency   *AuthUserBillingInvoiceItemsWebAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                              `json:"hidden"`
	MaxQuantity *int64                                            `json:"maxQuantity,omitempty"`
	Name        *string                                           `json:"name,omitempty"`
	Price       int64                                             `json:"price"`
	Quantity    int64                                             `json:"quantity"`
	Tier        *int64                                            `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItemsWebAnalyticsEvent struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type AuthUserBillingInvoiceItems struct {
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Analytics      *AuthUserBillingInvoiceItemsAnalytics      `json:"analytics,omitempty"`
	AnalyticsUsage *AuthUserBillingInvoiceItemsAnalyticsUsage `json:"analyticsUsage,omitempty"`
	Artifacts      *AuthUserBillingInvoiceItemsArtifacts      `json:"artifacts,omitempty"`
	Bandwidth      *AuthUserBillingInvoiceItemsBandwidth      `json:"bandwidth,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	ConcurrentBuilds           *AuthUserBillingInvoiceItemsConcurrentBuilds           `json:"concurrentBuilds,omitempty"`
	CronJobInvocation          *AuthUserBillingInvoiceItemsCronJobInvocation          `json:"cronJobInvocation,omitempty"`
	DataCacheRead              *AuthUserBillingInvoiceItemsDataCacheRead              `json:"dataCacheRead,omitempty"`
	DataCacheRevalidation      *AuthUserBillingInvoiceItemsDataCacheRevalidation      `json:"dataCacheRevalidation,omitempty"`
	DataCacheWrite             *AuthUserBillingInvoiceItemsDataCacheWrite             `json:"dataCacheWrite,omitempty"`
	EdgeConfigRead             *AuthUserBillingInvoiceItemsEdgeConfigRead             `json:"edgeConfigRead,omitempty"`
	EdgeConfigWrite            *AuthUserBillingInvoiceItemsEdgeConfigWrite            `json:"edgeConfigWrite,omitempty"`
	EdgeFunctionExecutionUnits *AuthUserBillingInvoiceItemsEdgeFunctionExecutionUnits `json:"edgeFunctionExecutionUnits,omitempty"`
	EdgeMiddlewareInvocations  *AuthUserBillingInvoiceItemsEdgeMiddlewareInvocations  `json:"edgeMiddlewareInvocations,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Enterprise *AuthUserBillingInvoiceItemsEnterprise `json:"enterprise,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Monitoring       *AuthUserBillingInvoiceItemsMonitoring       `json:"monitoring,omitempty"`
	MonitoringMetric *AuthUserBillingInvoiceItemsMonitoringMetric `json:"monitoringMetric,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PasswordProtection   *AuthUserBillingInvoiceItemsPasswordProtection   `json:"passwordProtection,omitempty"`
	PostgresComputeTime  *AuthUserBillingInvoiceItemsPostgresComputeTime  `json:"postgresComputeTime,omitempty"`
	PostgresDataStorage  *AuthUserBillingInvoiceItemsPostgresDataStorage  `json:"postgresDataStorage,omitempty"`
	PostgresDataTransfer *AuthUserBillingInvoiceItemsPostgresDataTransfer `json:"postgresDataTransfer,omitempty"`
	PostgresDatabase     *AuthUserBillingInvoiceItemsPostgresDatabase     `json:"postgresDatabase,omitempty"`
	PostgresWrittenData  *AuthUserBillingInvoiceItemsPostgresWrittenData  `json:"postgresWrittenData,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PreviewDeploymentSuffix *AuthUserBillingInvoiceItemsPreviewDeploymentSuffix `json:"previewDeploymentSuffix,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Pro *AuthUserBillingInvoiceItemsPro `json:"pro,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Saml                                    *AuthUserBillingInvoiceItemsSaml                                    `json:"saml,omitempty"`
	ServerlessFunctionExecution             *AuthUserBillingInvoiceItemsServerlessFunctionExecution             `json:"serverlessFunctionExecution,omitempty"`
	SourceImages                            *AuthUserBillingInvoiceItemsSourceImages                            `json:"sourceImages,omitempty"`
	StorageRedisTotalBandwidthInBytes       *AuthUserBillingInvoiceItemsStorageRedisTotalBandwidthInBytes       `json:"storageRedisTotalBandwidthInBytes,omitempty"`
	StorageRedisTotalCommands               *AuthUserBillingInvoiceItemsStorageRedisTotalCommands               `json:"storageRedisTotalCommands,omitempty"`
	StorageRedisTotalDailyAvgStorageInBytes *AuthUserBillingInvoiceItemsStorageRedisTotalDailyAvgStorageInBytes `json:"storageRedisTotalDailyAvgStorageInBytes,omitempty"`
	StorageRedisTotalDatabases              *AuthUserBillingInvoiceItemsStorageRedisTotalDatabases              `json:"storageRedisTotalDatabases,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	TeamSeats *AuthUserBillingInvoiceItemsTeamSeats `json:"teamSeats,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	WebAnalytics      *AuthUserBillingInvoiceItemsWebAnalytics      `json:"webAnalytics,omitempty"`
	WebAnalyticsEvent *AuthUserBillingInvoiceItemsWebAnalyticsEvent `json:"webAnalyticsEvent,omitempty"`
}

type AuthUserBillingInvoiceSettings struct {
	Footer *string `json:"footer,omitempty"`
}

type AuthUserBillingPeriod struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type AuthUserBillingPlan string

const (
	AuthUserBillingPlanPro        AuthUserBillingPlan = "pro"
	AuthUserBillingPlanEnterprise AuthUserBillingPlan = "enterprise"
	AuthUserBillingPlanHobby      AuthUserBillingPlan = "hobby"
)

func (e AuthUserBillingPlan) ToPointer() *AuthUserBillingPlan {
	return &e
}

func (e *AuthUserBillingPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = AuthUserBillingPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingPlan: %v", v)
	}
}

type AuthUserBillingPlatform string

const (
	AuthUserBillingPlatformStripe         AuthUserBillingPlatform = "stripe"
	AuthUserBillingPlatformStripeTestMode AuthUserBillingPlatform = "stripeTestMode"
)

func (e AuthUserBillingPlatform) ToPointer() *AuthUserBillingPlatform {
	return &e
}

func (e *AuthUserBillingPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "stripeTestMode":
		*e = AuthUserBillingPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingPlatform: %v", v)
	}
}

type AuthUserBillingPricingExperiment string

const (
	AuthUserBillingPricingExperimentAugust2022 AuthUserBillingPricingExperiment = "august-2022"
)

func (e AuthUserBillingPricingExperiment) ToPointer() *AuthUserBillingPricingExperiment {
	return &e
}

func (e *AuthUserBillingPricingExperiment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "august-2022":
		*e = AuthUserBillingPricingExperiment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingPricingExperiment: %v", v)
	}
}

type AuthUserBillingProgramType string

const (
	AuthUserBillingProgramTypeStartup AuthUserBillingProgramType = "startup"
	AuthUserBillingProgramTypeAgency  AuthUserBillingProgramType = "agency"
)

func (e AuthUserBillingProgramType) ToPointer() *AuthUserBillingProgramType {
	return &e
}

func (e *AuthUserBillingProgramType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "startup":
		fallthrough
	case "agency":
		*e = AuthUserBillingProgramType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingProgramType: %v", v)
	}
}

type AuthUserBillingStatus string

const (
	AuthUserBillingStatusActive   AuthUserBillingStatus = "active"
	AuthUserBillingStatusTrialing AuthUserBillingStatus = "trialing"
	AuthUserBillingStatusOverdue  AuthUserBillingStatus = "overdue"
	AuthUserBillingStatusExpired  AuthUserBillingStatus = "expired"
	AuthUserBillingStatusCanceled AuthUserBillingStatus = "canceled"
)

func (e AuthUserBillingStatus) ToPointer() *AuthUserBillingStatus {
	return &e
}

func (e *AuthUserBillingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "trialing":
		fallthrough
	case "overdue":
		fallthrough
	case "expired":
		fallthrough
	case "canceled":
		*e = AuthUserBillingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingStatus: %v", v)
	}
}

type AuthUserBillingSubscriptionsDiscountCouponDuration string

const (
	AuthUserBillingSubscriptionsDiscountCouponDurationForever   AuthUserBillingSubscriptionsDiscountCouponDuration = "forever"
	AuthUserBillingSubscriptionsDiscountCouponDurationRepeating AuthUserBillingSubscriptionsDiscountCouponDuration = "repeating"
	AuthUserBillingSubscriptionsDiscountCouponDurationOnce      AuthUserBillingSubscriptionsDiscountCouponDuration = "once"
)

func (e AuthUserBillingSubscriptionsDiscountCouponDuration) ToPointer() *AuthUserBillingSubscriptionsDiscountCouponDuration {
	return &e
}

func (e *AuthUserBillingSubscriptionsDiscountCouponDuration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "forever":
		fallthrough
	case "repeating":
		fallthrough
	case "once":
		*e = AuthUserBillingSubscriptionsDiscountCouponDuration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingSubscriptionsDiscountCouponDuration: %v", v)
	}
}

type AuthUserBillingSubscriptionsDiscountCoupon struct {
	AmountOff        *int64                                             `json:"amountOff"`
	Duration         AuthUserBillingSubscriptionsDiscountCouponDuration `json:"duration"`
	DurationInMonths *int64                                             `json:"durationInMonths"`
	ID               string                                             `json:"id"`
	Name             *string                                            `json:"name"`
	PercentageOff    *int64                                             `json:"percentageOff"`
}

type AuthUserBillingSubscriptionsDiscount struct {
	Coupon AuthUserBillingSubscriptionsDiscountCoupon `json:"coupon"`
	ID     string                                     `json:"id"`
}

type AuthUserBillingSubscriptionsFrequencyInterval string

const (
	AuthUserBillingSubscriptionsFrequencyIntervalMonth AuthUserBillingSubscriptionsFrequencyInterval = "month"
	AuthUserBillingSubscriptionsFrequencyIntervalDay   AuthUserBillingSubscriptionsFrequencyInterval = "day"
	AuthUserBillingSubscriptionsFrequencyIntervalWeek  AuthUserBillingSubscriptionsFrequencyInterval = "week"
	AuthUserBillingSubscriptionsFrequencyIntervalYear  AuthUserBillingSubscriptionsFrequencyInterval = "year"
)

func (e AuthUserBillingSubscriptionsFrequencyInterval) ToPointer() *AuthUserBillingSubscriptionsFrequencyInterval {
	return &e
}

func (e *AuthUserBillingSubscriptionsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		fallthrough
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "year":
		*e = AuthUserBillingSubscriptionsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBillingSubscriptionsFrequencyInterval: %v", v)
	}
}

type AuthUserBillingSubscriptionsFrequency struct {
	Interval      AuthUserBillingSubscriptionsFrequencyInterval `json:"interval"`
	IntervalCount int64                                         `json:"intervalCount"`
}

type AuthUserBillingSubscriptionsItems struct {
	Amount    int64  `json:"amount"`
	ID        string `json:"id"`
	PriceID   string `json:"priceId"`
	ProductID string `json:"productId"`
	Quantity  int64  `json:"quantity"`
}

type AuthUserBillingSubscriptionsPeriod struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type AuthUserBillingSubscriptionsTrial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type AuthUserBillingSubscriptions struct {
	Discount  *AuthUserBillingSubscriptionsDiscount `json:"discount"`
	Frequency AuthUserBillingSubscriptionsFrequency `json:"frequency"`
	ID        string                                `json:"id"`
	Items     []AuthUserBillingSubscriptionsItems   `json:"items"`
	Period    AuthUserBillingSubscriptionsPeriod    `json:"period"`
	Trial     *AuthUserBillingSubscriptionsTrial    `json:"trial"`
}

type AuthUserBillingTax struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type AuthUserBillingTrial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

// AuthUserBilling - An object containing billing infomation associated with the User account.
type AuthUserBilling struct {
	Address                 *AuthUserBillingAddress           `json:"address,omitempty"`
	Cancelation             *int64                            `json:"cancelation,omitempty"`
	Contract                *AuthUserBillingContract          `json:"contract,omitempty"`
	Controls                *AuthUserBillingControls          `json:"controls,omitempty"`
	Currency                *AuthUserBillingCurrency          `json:"currency,omitempty"`
	Email                   *string                           `json:"email,omitempty"`
	InvoiceItems            *AuthUserBillingInvoiceItems      `json:"invoiceItems,omitempty"`
	InvoiceSettings         *AuthUserBillingInvoiceSettings   `json:"invoiceSettings,omitempty"`
	Language                *string                           `json:"language,omitempty"`
	Name                    *string                           `json:"name,omitempty"`
	OrbCustomerID           *string                           `json:"orbCustomerId,omitempty"`
	OrbMigrationScheduledAt *int64                            `json:"orbMigrationScheduledAt,omitempty"`
	Period                  *AuthUserBillingPeriod            `json:"period"`
	Plan                    AuthUserBillingPlan               `json:"plan"`
	Platform                *AuthUserBillingPlatform          `json:"platform,omitempty"`
	PricingExperiment       *AuthUserBillingPricingExperiment `json:"pricingExperiment,omitempty"`
	ProgramType             *AuthUserBillingProgramType       `json:"programType,omitempty"`
	PurchaseOrder           *string                           `json:"purchaseOrder,omitempty"`
	Status                  *AuthUserBillingStatus            `json:"status,omitempty"`
	Subscriptions           []AuthUserBillingSubscriptions    `json:"subscriptions,omitempty"`
	SyncedAt                *int64                            `json:"syncedAt,omitempty"`
	Tax                     *AuthUserBillingTax               `json:"tax,omitempty"`
	Trial                   *AuthUserBillingTrial             `json:"trial,omitempty"`
}

// AuthUserDataCache - data cache settings
type AuthUserDataCache struct {
	ExcessBillingEnabled *bool `json:"excessBillingEnabled,omitempty"`
}

type AuthUserDismissedToastsDismissals struct {
	CreatedAt int64  `json:"createdAt"`
	ScopeID   string `json:"scopeId"`
}

// AuthUserDismissedToasts - A record of when, under a certain scopeId, a toast was dismissed
type AuthUserDismissedToasts struct {
	Dismissals []AuthUserDismissedToastsDismissals `json:"dismissals"`
	Name       string                              `json:"name"`
}

// AuthUserFavoriteProjectsAndSpaces2 - A list of projects and spaces across teams that a user has marked as a favorite.
type AuthUserFavoriteProjectsAndSpaces2 struct {
	ScopeID   string `json:"scopeId"`
	ScopeSlug string `json:"scopeSlug"`
	SpaceID   string `json:"spaceId"`
}

// AuthUserFavoriteProjectsAndSpaces1 - A list of projects and spaces across teams that a user has marked as a favorite.
type AuthUserFavoriteProjectsAndSpaces1 struct {
	ProjectID string `json:"projectId"`
	ScopeID   string `json:"scopeId"`
	ScopeSlug string `json:"scopeSlug"`
}

type AuthUserFavoriteProjectsAndSpacesType string

const (
	AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces1 AuthUserFavoriteProjectsAndSpacesType = "AuthUser_favoriteProjectsAndSpaces_1"
	AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces2 AuthUserFavoriteProjectsAndSpacesType = "AuthUser_favoriteProjectsAndSpaces_2"
)

type AuthUserFavoriteProjectsAndSpaces struct {
	AuthUserFavoriteProjectsAndSpaces1 *AuthUserFavoriteProjectsAndSpaces1
	AuthUserFavoriteProjectsAndSpaces2 *AuthUserFavoriteProjectsAndSpaces2

	Type AuthUserFavoriteProjectsAndSpacesType
}

func CreateAuthUserFavoriteProjectsAndSpacesAuthUserFavoriteProjectsAndSpaces1(authUserFavoriteProjectsAndSpaces1 AuthUserFavoriteProjectsAndSpaces1) AuthUserFavoriteProjectsAndSpaces {
	typ := AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces1

	return AuthUserFavoriteProjectsAndSpaces{
		AuthUserFavoriteProjectsAndSpaces1: &authUserFavoriteProjectsAndSpaces1,
		Type:                               typ,
	}
}

func CreateAuthUserFavoriteProjectsAndSpacesAuthUserFavoriteProjectsAndSpaces2(authUserFavoriteProjectsAndSpaces2 AuthUserFavoriteProjectsAndSpaces2) AuthUserFavoriteProjectsAndSpaces {
	typ := AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces2

	return AuthUserFavoriteProjectsAndSpaces{
		AuthUserFavoriteProjectsAndSpaces2: &authUserFavoriteProjectsAndSpaces2,
		Type:                               typ,
	}
}

func (u *AuthUserFavoriteProjectsAndSpaces) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	authUserFavoriteProjectsAndSpaces1 := new(AuthUserFavoriteProjectsAndSpaces1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authUserFavoriteProjectsAndSpaces1); err == nil {
		u.AuthUserFavoriteProjectsAndSpaces1 = authUserFavoriteProjectsAndSpaces1
		u.Type = AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces1
		return nil
	}

	authUserFavoriteProjectsAndSpaces2 := new(AuthUserFavoriteProjectsAndSpaces2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authUserFavoriteProjectsAndSpaces2); err == nil {
		u.AuthUserFavoriteProjectsAndSpaces2 = authUserFavoriteProjectsAndSpaces2
		u.Type = AuthUserFavoriteProjectsAndSpacesTypeAuthUserFavoriteProjectsAndSpaces2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthUserFavoriteProjectsAndSpaces) MarshalJSON() ([]byte, error) {
	if u.AuthUserFavoriteProjectsAndSpaces1 != nil {
		return json.Marshal(u.AuthUserFavoriteProjectsAndSpaces1)
	}

	if u.AuthUserFavoriteProjectsAndSpaces2 != nil {
		return json.Marshal(u.AuthUserFavoriteProjectsAndSpaces2)
	}

	return nil, nil
}

type AuthUserFeatureBlocksWebAnalytics struct {
	BlockedFrom        *int64 `json:"blockedFrom,omitempty"`
	BlockedUntil       *int64 `json:"blockedUntil,omitempty"`
	IsCurrentlyBlocked bool   `json:"isCurrentlyBlocked"`
}

// AuthUserFeatureBlocks - Feature blocks for the user
type AuthUserFeatureBlocks struct {
	WebAnalytics *AuthUserFeatureBlocksWebAnalytics `json:"webAnalytics,omitempty"`
}

type AuthUserImportFlowGitNamespaceType string

const (
	AuthUserImportFlowGitNamespaceTypeStr     AuthUserImportFlowGitNamespaceType = "str"
	AuthUserImportFlowGitNamespaceTypeInteger AuthUserImportFlowGitNamespaceType = "integer"
)

type AuthUserImportFlowGitNamespace struct {
	Str     *string
	Integer *int64

	Type AuthUserImportFlowGitNamespaceType
}

func CreateAuthUserImportFlowGitNamespaceStr(str string) AuthUserImportFlowGitNamespace {
	typ := AuthUserImportFlowGitNamespaceTypeStr

	return AuthUserImportFlowGitNamespace{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserImportFlowGitNamespaceInteger(integer int64) AuthUserImportFlowGitNamespace {
	typ := AuthUserImportFlowGitNamespaceTypeInteger

	return AuthUserImportFlowGitNamespace{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *AuthUserImportFlowGitNamespace) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = AuthUserImportFlowGitNamespaceTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = AuthUserImportFlowGitNamespaceTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthUserImportFlowGitNamespace) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type AuthUserImportFlowGitNamespaceIDType string

const (
	AuthUserImportFlowGitNamespaceIDTypeStr     AuthUserImportFlowGitNamespaceIDType = "str"
	AuthUserImportFlowGitNamespaceIDTypeInteger AuthUserImportFlowGitNamespaceIDType = "integer"
)

type AuthUserImportFlowGitNamespaceID struct {
	Str     *string
	Integer *int64

	Type AuthUserImportFlowGitNamespaceIDType
}

func CreateAuthUserImportFlowGitNamespaceIDStr(str string) AuthUserImportFlowGitNamespaceID {
	typ := AuthUserImportFlowGitNamespaceIDTypeStr

	return AuthUserImportFlowGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserImportFlowGitNamespaceIDInteger(integer int64) AuthUserImportFlowGitNamespaceID {
	typ := AuthUserImportFlowGitNamespaceIDTypeInteger

	return AuthUserImportFlowGitNamespaceID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *AuthUserImportFlowGitNamespaceID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = AuthUserImportFlowGitNamespaceIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = AuthUserImportFlowGitNamespaceIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthUserImportFlowGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type AuthUserImportFlowGitProvider string

const (
	AuthUserImportFlowGitProviderGithub    AuthUserImportFlowGitProvider = "github"
	AuthUserImportFlowGitProviderGitlab    AuthUserImportFlowGitProvider = "gitlab"
	AuthUserImportFlowGitProviderBitbucket AuthUserImportFlowGitProvider = "bitbucket"
)

func (e AuthUserImportFlowGitProvider) ToPointer() *AuthUserImportFlowGitProvider {
	return &e
}

func (e *AuthUserImportFlowGitProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = AuthUserImportFlowGitProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserImportFlowGitProvider: %v", v)
	}
}

type AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDType string

const (
	AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeStr     AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDType = "str"
	AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeInteger AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDType = "integer"
)

type AuthUserPreferredScopesAndGitNamespacesGitNamespaceID struct {
	Str     *string
	Integer *int64

	Type AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDType
}

func CreateAuthUserPreferredScopesAndGitNamespacesGitNamespaceIDStr(str string) AuthUserPreferredScopesAndGitNamespacesGitNamespaceID {
	typ := AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeStr

	return AuthUserPreferredScopesAndGitNamespacesGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserPreferredScopesAndGitNamespacesGitNamespaceIDInteger(integer int64) AuthUserPreferredScopesAndGitNamespacesGitNamespaceID {
	typ := AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeInteger

	return AuthUserPreferredScopesAndGitNamespacesGitNamespaceID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *AuthUserPreferredScopesAndGitNamespacesGitNamespaceID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = AuthUserPreferredScopesAndGitNamespacesGitNamespaceIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthUserPreferredScopesAndGitNamespacesGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type AuthUserPreferredScopesAndGitNamespaces struct {
	GitNamespaceID *AuthUserPreferredScopesAndGitNamespacesGitNamespaceID `json:"gitNamespaceId"`
	ScopeID        string                                                 `json:"scopeId"`
}

// AuthUserRemoteCaching - remote caching settings
type AuthUserRemoteCaching struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// AuthUserResourceConfig - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type AuthUserResourceConfig struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountIds []string `json:"awsAccountIds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountType *string `json:"awsAccountType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BlobStores *int64 `json:"blobStores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CfZoneName *string `json:"cfZoneName,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ConcurrentBuilds *int64 `json:"concurrentBuilds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigSize *int64 `json:"edgeConfigSize,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigs *int64 `json:"edgeConfigs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionExecutionTimeoutMs *int64 `json:"edgeFunctionExecutionTimeoutMs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionMaxSizeBytes *int64 `json:"edgeFunctionMaxSizeBytes,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	KvDatabases *int64 `json:"kvDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	NodeType *string `json:"nodeType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	PostgresDatabases *int64 `json:"postgresDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ServerlessFunctionDefaultMaxExecutionTime *int64 `json:"serverlessFunctionDefaultMaxExecutionTime,omitempty"`
}

type AuthUserSoftBlockBlockedDueToOverageType string

const (
	AuthUserSoftBlockBlockedDueToOverageTypeAnalyticsUsage                          AuthUserSoftBlockBlockedDueToOverageType = "analyticsUsage"
	AuthUserSoftBlockBlockedDueToOverageTypeArtifacts                               AuthUserSoftBlockBlockedDueToOverageType = "artifacts"
	AuthUserSoftBlockBlockedDueToOverageTypeBandwidth                               AuthUserSoftBlockBlockedDueToOverageType = "bandwidth"
	AuthUserSoftBlockBlockedDueToOverageTypeCronJobInvocation                       AuthUserSoftBlockBlockedDueToOverageType = "cronJobInvocation"
	AuthUserSoftBlockBlockedDueToOverageTypeDataCacheRead                           AuthUserSoftBlockBlockedDueToOverageType = "dataCacheRead"
	AuthUserSoftBlockBlockedDueToOverageTypeDataCacheRevalidation                   AuthUserSoftBlockBlockedDueToOverageType = "dataCacheRevalidation"
	AuthUserSoftBlockBlockedDueToOverageTypeDataCacheWrite                          AuthUserSoftBlockBlockedDueToOverageType = "dataCacheWrite"
	AuthUserSoftBlockBlockedDueToOverageTypeEdgeConfigRead                          AuthUserSoftBlockBlockedDueToOverageType = "edgeConfigRead"
	AuthUserSoftBlockBlockedDueToOverageTypeEdgeConfigWrite                         AuthUserSoftBlockBlockedDueToOverageType = "edgeConfigWrite"
	AuthUserSoftBlockBlockedDueToOverageTypeEdgeFunctionExecutionUnits              AuthUserSoftBlockBlockedDueToOverageType = "edgeFunctionExecutionUnits"
	AuthUserSoftBlockBlockedDueToOverageTypeEdgeMiddlewareInvocations               AuthUserSoftBlockBlockedDueToOverageType = "edgeMiddlewareInvocations"
	AuthUserSoftBlockBlockedDueToOverageTypeMonitoringMetric                        AuthUserSoftBlockBlockedDueToOverageType = "monitoringMetric"
	AuthUserSoftBlockBlockedDueToOverageTypePostgresComputeTime                     AuthUserSoftBlockBlockedDueToOverageType = "postgresComputeTime"
	AuthUserSoftBlockBlockedDueToOverageTypePostgresDatabase                        AuthUserSoftBlockBlockedDueToOverageType = "postgresDatabase"
	AuthUserSoftBlockBlockedDueToOverageTypePostgresDataStorage                     AuthUserSoftBlockBlockedDueToOverageType = "postgresDataStorage"
	AuthUserSoftBlockBlockedDueToOverageTypePostgresDataTransfer                    AuthUserSoftBlockBlockedDueToOverageType = "postgresDataTransfer"
	AuthUserSoftBlockBlockedDueToOverageTypePostgresWrittenData                     AuthUserSoftBlockBlockedDueToOverageType = "postgresWrittenData"
	AuthUserSoftBlockBlockedDueToOverageTypeServerlessFunctionExecution             AuthUserSoftBlockBlockedDueToOverageType = "serverlessFunctionExecution"
	AuthUserSoftBlockBlockedDueToOverageTypeSourceImages                            AuthUserSoftBlockBlockedDueToOverageType = "sourceImages"
	AuthUserSoftBlockBlockedDueToOverageTypeStorageRedisTotalBandwidthInBytes       AuthUserSoftBlockBlockedDueToOverageType = "storageRedisTotalBandwidthInBytes"
	AuthUserSoftBlockBlockedDueToOverageTypeStorageRedisTotalCommands               AuthUserSoftBlockBlockedDueToOverageType = "storageRedisTotalCommands"
	AuthUserSoftBlockBlockedDueToOverageTypeStorageRedisTotalDailyAvgStorageInBytes AuthUserSoftBlockBlockedDueToOverageType = "storageRedisTotalDailyAvgStorageInBytes"
	AuthUserSoftBlockBlockedDueToOverageTypeStorageRedisTotalDatabases              AuthUserSoftBlockBlockedDueToOverageType = "storageRedisTotalDatabases"
	AuthUserSoftBlockBlockedDueToOverageTypeWebAnalyticsEvent                       AuthUserSoftBlockBlockedDueToOverageType = "webAnalyticsEvent"
)

func (e AuthUserSoftBlockBlockedDueToOverageType) ToPointer() *AuthUserSoftBlockBlockedDueToOverageType {
	return &e
}

func (e *AuthUserSoftBlockBlockedDueToOverageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "cronJobInvocation":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheRevalidation":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "webAnalyticsEvent":
		*e = AuthUserSoftBlockBlockedDueToOverageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserSoftBlockBlockedDueToOverageType: %v", v)
	}
}

type AuthUserSoftBlockReason string

const (
	AuthUserSoftBlockReasonSubscriptionCanceled    AuthUserSoftBlockReason = "SUBSCRIPTION_CANCELED"
	AuthUserSoftBlockReasonSubscriptionExpired     AuthUserSoftBlockReason = "SUBSCRIPTION_EXPIRED"
	AuthUserSoftBlockReasonUnpaidInvoice           AuthUserSoftBlockReason = "UNPAID_INVOICE"
	AuthUserSoftBlockReasonEnterpriseTrialEnded    AuthUserSoftBlockReason = "ENTERPRISE_TRIAL_ENDED"
	AuthUserSoftBlockReasonFairUseLimitsExceeded   AuthUserSoftBlockReason = "FAIR_USE_LIMITS_EXCEEDED"
	AuthUserSoftBlockReasonBlockedForPlatformAbuse AuthUserSoftBlockReason = "BLOCKED_FOR_PLATFORM_ABUSE"
)

func (e AuthUserSoftBlockReason) ToPointer() *AuthUserSoftBlockReason {
	return &e
}

func (e *AuthUserSoftBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBSCRIPTION_CANCELED":
		fallthrough
	case "SUBSCRIPTION_EXPIRED":
		fallthrough
	case "UNPAID_INVOICE":
		fallthrough
	case "ENTERPRISE_TRIAL_ENDED":
		fallthrough
	case "FAIR_USE_LIMITS_EXCEEDED":
		fallthrough
	case "BLOCKED_FOR_PLATFORM_ABUSE":
		*e = AuthUserSoftBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserSoftBlockReason: %v", v)
	}
}

// AuthUserSoftBlock - When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
type AuthUserSoftBlock struct {
	BlockedAt               int64                                     `json:"blockedAt"`
	BlockedDueToOverageType *AuthUserSoftBlockBlockedDueToOverageType `json:"blockedDueToOverageType,omitempty"`
	Reason                  AuthUserSoftBlockReason                   `json:"reason"`
}

// AuthUserVersion - The user's version. Will either be unset or `northstar`.
type AuthUserVersion string

const (
	AuthUserVersionNorthstar AuthUserVersion = "northstar"
)

func (e AuthUserVersion) ToPointer() *AuthUserVersion {
	return &e
}

func (e *AuthUserVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "northstar":
		*e = AuthUserVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserVersion: %v", v)
	}
}

// AuthUserLimited - A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data.
type AuthUserLimited struct {
	// SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
	Avatar *string `json:"avatar"`
	// Email address associated with the User account.
	Email string `json:"email"`
	// The User's unique identifier.
	ID string `json:"id"`
	// Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges.
	Limited bool `json:"limited"`
	// Name associated with the User account, or `null` if none has been provided.
	Name *string `json:"name"`
	// Unique username associated with the User account.
	Username string `json:"username"`
	// The user's version. Will either be unset or `northstar`.
	Version *AuthUserLimitedVersion `json:"version"`
}
