// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UserEventEntitiesType - The type of entity.
type UserEventEntitiesType string

const (
	UserEventEntitiesTypeBold           UserEventEntitiesType = "bold"
	UserEventEntitiesTypeLink           UserEventEntitiesType = "link"
	UserEventEntitiesTypeAuthor         UserEventEntitiesType = "author"
	UserEventEntitiesTypeBitbucketLogin UserEventEntitiesType = "bitbucket_login"
	UserEventEntitiesTypeDeploymentHost UserEventEntitiesType = "deployment_host"
	UserEventEntitiesTypeDNSRecord      UserEventEntitiesType = "dns_record"
	UserEventEntitiesTypeGitLink        UserEventEntitiesType = "git_link"
	UserEventEntitiesTypeGithubLogin    UserEventEntitiesType = "github_login"
	UserEventEntitiesTypeGitlabLogin    UserEventEntitiesType = "gitlab_login"
	UserEventEntitiesTypeHookName       UserEventEntitiesType = "hook_name"
	UserEventEntitiesTypeIntegration    UserEventEntitiesType = "integration"
	UserEventEntitiesTypeEdgeConfig     UserEventEntitiesType = "edge-config"
	UserEventEntitiesTypeProjectName    UserEventEntitiesType = "project_name"
	UserEventEntitiesTypeScalingRules   UserEventEntitiesType = "scaling_rules"
	UserEventEntitiesTypeEnvVarName     UserEventEntitiesType = "env_var_name"
	UserEventEntitiesTypeTarget         UserEventEntitiesType = "target"
	UserEventEntitiesTypeStore          UserEventEntitiesType = "store"
	UserEventEntitiesTypeSystem         UserEventEntitiesType = "system"
)

func (e UserEventEntitiesType) ToPointer() *UserEventEntitiesType {
	return &e
}

func (e *UserEventEntitiesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bold":
		fallthrough
	case "link":
		fallthrough
	case "author":
		fallthrough
	case "bitbucket_login":
		fallthrough
	case "deployment_host":
		fallthrough
	case "dns_record":
		fallthrough
	case "git_link":
		fallthrough
	case "github_login":
		fallthrough
	case "gitlab_login":
		fallthrough
	case "hook_name":
		fallthrough
	case "integration":
		fallthrough
	case "edge-config":
		fallthrough
	case "project_name":
		fallthrough
	case "scaling_rules":
		fallthrough
	case "env_var_name":
		fallthrough
	case "target":
		fallthrough
	case "store":
		fallthrough
	case "system":
		*e = UserEventEntitiesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventEntitiesType: %v", v)
	}
}

// UserEventEntities - A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
type UserEventEntities struct {
	// The index of where the entity ends within the `text` (non-inclusive).
	End int64 `json:"end"`
	// The index of where the entity begins within the `text` (inclusive).
	Start int64 `json:"start"`
	// The type of entity.
	Type UserEventEntitiesType `json:"type"`
}

func (o *UserEventEntities) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *UserEventEntities) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

func (o *UserEventEntities) GetType() UserEventEntitiesType {
	if o == nil {
		return UserEventEntitiesType("")
	}
	return o.Type
}

// UserEventUser - Metadata for the User who generated the event.
type UserEventUser struct {
	Avatar   string  `json:"avatar"`
	Email    string  `json:"email"`
	Slug     *string `json:"slug,omitempty"`
	UID      string  `json:"uid"`
	Username string  `json:"username"`
}

func (o *UserEventUser) GetAvatar() string {
	if o == nil {
		return ""
	}
	return o.Avatar
}

func (o *UserEventUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UserEventUser) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UserEventUser) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UserEventUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// UserEvent - Array of events generated by the User.
type UserEvent struct {
	// Timestamp (in milliseconds) of when the event was generated.
	CreatedAt int64 `json:"createdAt"`
	// A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
	Entities []UserEventEntities `json:"entities"`
	// The unique identifier of the Event.
	ID string `json:"id"`
	// The human-readable text of the Event.
	Text string `json:"text"`
	// Metadata for the User who generated the event.
	User *UserEventUser `json:"user,omitempty"`
	// The unique identifier of the User who generated the event.
	UserID string `json:"userId"`
}

func (o *UserEvent) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UserEvent) GetEntities() []UserEventEntities {
	if o == nil {
		return []UserEventEntities{}
	}
	return o.Entities
}

func (o *UserEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEvent) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

func (o *UserEvent) GetUser() *UserEventUser {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UserEvent) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}
