// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AddProjectDomainSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// AddProjectDomainRequestBodyRedirectStatusCode - Status code for domain redirect
type AddProjectDomainRequestBodyRedirectStatusCode int64

const (
	AddProjectDomainRequestBodyRedirectStatusCodeThreeHundredAndOne   AddProjectDomainRequestBodyRedirectStatusCode = 301
	AddProjectDomainRequestBodyRedirectStatusCodeThreeHundredAndTwo   AddProjectDomainRequestBodyRedirectStatusCode = 302
	AddProjectDomainRequestBodyRedirectStatusCodeThreeHundredAndSeven AddProjectDomainRequestBodyRedirectStatusCode = 307
	AddProjectDomainRequestBodyRedirectStatusCodeThreeHundredAndEight AddProjectDomainRequestBodyRedirectStatusCode = 308
)

func (e AddProjectDomainRequestBodyRedirectStatusCode) ToPointer() *AddProjectDomainRequestBodyRedirectStatusCode {
	return &e
}

func (e *AddProjectDomainRequestBodyRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 307:
		fallthrough
	case 308:
		*e = AddProjectDomainRequestBodyRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddProjectDomainRequestBodyRedirectStatusCode: %v", v)
	}
}

type AddProjectDomainRequestBody struct {
	// Git branch to link the project domain
	GitBranch *string `json:"gitBranch,omitempty"`
	// The project domain name
	Name string `json:"name"`
	// Target destination domain for redirect
	Redirect *string `json:"redirect,omitempty"`
	// Status code for domain redirect
	RedirectStatusCode *AddProjectDomainRequestBodyRedirectStatusCode `json:"redirectStatusCode,omitempty"`
}

type AddProjectDomainRequest struct {
	RequestBody *AddProjectDomainRequestBody `request:"mediaType=application/json"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type AddProjectDomain200ApplicationJSONRedirectStatusCode int64

const (
	AddProjectDomain200ApplicationJSONRedirectStatusCodeThreeHundredAndSeven AddProjectDomain200ApplicationJSONRedirectStatusCode = 307
	AddProjectDomain200ApplicationJSONRedirectStatusCodeThreeHundredAndOne   AddProjectDomain200ApplicationJSONRedirectStatusCode = 301
	AddProjectDomain200ApplicationJSONRedirectStatusCodeThreeHundredAndTwo   AddProjectDomain200ApplicationJSONRedirectStatusCode = 302
	AddProjectDomain200ApplicationJSONRedirectStatusCodeThreeHundredAndEight AddProjectDomain200ApplicationJSONRedirectStatusCode = 308
)

func (e AddProjectDomain200ApplicationJSONRedirectStatusCode) ToPointer() *AddProjectDomain200ApplicationJSONRedirectStatusCode {
	return &e
}

func (e *AddProjectDomain200ApplicationJSONRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 307:
		fallthrough
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 308:
		*e = AddProjectDomain200ApplicationJSONRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddProjectDomain200ApplicationJSONRedirectStatusCode: %v", v)
	}
}

// AddProjectDomain200ApplicationJSONVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type AddProjectDomain200ApplicationJSONVerification struct {
	Domain string `json:"domain"`
	Reason string `json:"reason"`
	Type   string `json:"type"`
	Value  string `json:"value"`
}

// AddProjectDomain200ApplicationJSON - The domain was successfully added to the project
type AddProjectDomain200ApplicationJSON struct {
	ApexName           string                                                `json:"apexName"`
	CreatedAt          *int64                                                `json:"createdAt,omitempty"`
	GitBranch          *string                                               `json:"gitBranch,omitempty"`
	Name               string                                                `json:"name"`
	ProjectID          string                                                `json:"projectId"`
	Redirect           *string                                               `json:"redirect,omitempty"`
	RedirectStatusCode *AddProjectDomain200ApplicationJSONRedirectStatusCode `json:"redirectStatusCode,omitempty"`
	UpdatedAt          *int64                                                `json:"updatedAt,omitempty"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []AddProjectDomain200ApplicationJSONVerification `json:"verification,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
}

type AddProjectDomainResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The domain was successfully added to the project
	AddProjectDomain200ApplicationJSONObject *AddProjectDomain200ApplicationJSON
}
