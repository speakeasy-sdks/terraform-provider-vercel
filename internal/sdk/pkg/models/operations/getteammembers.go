// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// GetTeamMembersRole - Only return members with the specified team role.
type GetTeamMembersRole string

const (
	GetTeamMembersRoleOwner       GetTeamMembersRole = "OWNER"
	GetTeamMembersRoleMember      GetTeamMembersRole = "MEMBER"
	GetTeamMembersRoleDeveloper   GetTeamMembersRole = "DEVELOPER"
	GetTeamMembersRoleViewer      GetTeamMembersRole = "VIEWER"
	GetTeamMembersRoleBilling     GetTeamMembersRole = "BILLING"
	GetTeamMembersRoleContributor GetTeamMembersRole = "CONTRIBUTOR"
)

func (e GetTeamMembersRole) ToPointer() *GetTeamMembersRole {
	return &e
}

func (e *GetTeamMembersRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = GetTeamMembersRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembersRole: %v", v)
	}
}

type GetTeamMembersRequest struct {
	// Include team members who are eligible to be members of the specified project.
	EligibleMembersForProjectID *string `queryParam:"style=form,explode=true,name=eligibleMembersForProjectId"`
	// Exclude members who belong to the specified project.
	ExcludeProject *string `queryParam:"style=form,explode=true,name=excludeProject"`
	// Limit how many teams should be returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Only return members with the specified team role.
	Role *GetTeamMembersRole `queryParam:"style=form,explode=true,name=role"`
	// Search team members by their name, username, and email.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Timestamp in milliseconds to only include members added since then.
	Since  *int64 `queryParam:"style=form,explode=true,name=since"`
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	// Timestamp in milliseconds to only include members added until then.
	Until *int64 `queryParam:"style=form,explode=true,name=until"`
}

type GetTeamMembers200ApplicationJSONEmailInviteCodesProjects string

const (
	GetTeamMembers200ApplicationJSONEmailInviteCodesProjectsAdmin            GetTeamMembers200ApplicationJSONEmailInviteCodesProjects = "ADMIN"
	GetTeamMembers200ApplicationJSONEmailInviteCodesProjectsProjectDeveloper GetTeamMembers200ApplicationJSONEmailInviteCodesProjects = "PROJECT_DEVELOPER"
	GetTeamMembers200ApplicationJSONEmailInviteCodesProjectsProjectViewer    GetTeamMembers200ApplicationJSONEmailInviteCodesProjects = "PROJECT_VIEWER"
)

func (e GetTeamMembers200ApplicationJSONEmailInviteCodesProjects) ToPointer() *GetTeamMembers200ApplicationJSONEmailInviteCodesProjects {
	return &e
}

func (e *GetTeamMembers200ApplicationJSONEmailInviteCodesProjects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = GetTeamMembers200ApplicationJSONEmailInviteCodesProjects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembers200ApplicationJSONEmailInviteCodesProjects: %v", v)
	}
}

type GetTeamMembers200ApplicationJSONEmailInviteCodesRole string

const (
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleOwner       GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "OWNER"
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleMember      GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "MEMBER"
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleDeveloper   GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "DEVELOPER"
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleViewer      GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "VIEWER"
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleBilling     GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "BILLING"
	GetTeamMembers200ApplicationJSONEmailInviteCodesRoleContributor GetTeamMembers200ApplicationJSONEmailInviteCodesRole = "CONTRIBUTOR"
)

func (e GetTeamMembers200ApplicationJSONEmailInviteCodesRole) ToPointer() *GetTeamMembers200ApplicationJSONEmailInviteCodesRole {
	return &e
}

func (e *GetTeamMembers200ApplicationJSONEmailInviteCodesRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = GetTeamMembers200ApplicationJSONEmailInviteCodesRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembers200ApplicationJSONEmailInviteCodesRole: %v", v)
	}
}

type GetTeamMembers200ApplicationJSONEmailInviteCodes struct {
	CreatedAt   *int64                                                              `json:"createdAt,omitempty"`
	Email       *string                                                             `json:"email,omitempty"`
	Expired     *bool                                                               `json:"expired,omitempty"`
	ID          string                                                              `json:"id"`
	IsDSyncUser bool                                                                `json:"isDSyncUser"`
	Projects    map[string]GetTeamMembers200ApplicationJSONEmailInviteCodesProjects `json:"projects,omitempty"`
	Role        *GetTeamMembers200ApplicationJSONEmailInviteCodesRole               `json:"role,omitempty"`
}

// GetTeamMembers200ApplicationJSONMembersBitbucket - Information about the Bitbucket account of this user.
type GetTeamMembers200ApplicationJSONMembersBitbucket struct {
	Login *string `json:"login,omitempty"`
}

// GetTeamMembers200ApplicationJSONMembersGithub - Information about the GitHub account for this user.
type GetTeamMembers200ApplicationJSONMembersGithub struct {
	Login *string `json:"login,omitempty"`
}

// GetTeamMembers200ApplicationJSONMembersGitlab - Information about the GitLab account of this user.
type GetTeamMembers200ApplicationJSONMembersGitlab struct {
	Login *string `json:"login,omitempty"`
}

type GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDType string

const (
	GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeStr     GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDType = "str"
	GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeInteger GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDType = "integer"
)

type GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID struct {
	Str     *string
	Integer *int64

	Type GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDType
}

func CreateGetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDStr(str string) GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID {
	typ := GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeStr

	return GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDInteger(integer int64) GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID {
	typ := GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeInteger

	return GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin string

const (
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginLink              GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "link"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginMail              GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "mail"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginImport            GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "import"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginTeams             GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "teams"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginGithub            GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "github"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginGitlab            GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "gitlab"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginBitbucket         GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "bitbucket"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginSaml              GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "saml"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginDsync             GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "dsync"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginFeedback          GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "feedback"
	GetTeamMembers200ApplicationJSONMembersJoinedFromOriginOrganizationTeams GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin = "organization-teams"
)

func (e GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin) ToPointer() *GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin {
	return &e
}

func (e *GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		fallthrough
	case "mail":
		fallthrough
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "saml":
		fallthrough
	case "dsync":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin: %v", v)
	}
}

// GetTeamMembers200ApplicationJSONMembersJoinedFrom - Map with information about the members origin if they joined by requesting access.
type GetTeamMembers200ApplicationJSONMembersJoinedFrom struct {
	CommitID         *string                                                     `json:"commitId,omitempty"`
	DsyncConnectedAt *int64                                                      `json:"dsyncConnectedAt,omitempty"`
	DsyncUserID      *string                                                     `json:"dsyncUserId,omitempty"`
	GitUserID        *GetTeamMembers200ApplicationJSONMembersJoinedFromGitUserID `json:"gitUserId,omitempty"`
	GitUserLogin     *string                                                     `json:"gitUserLogin,omitempty"`
	IdpUserID        *string                                                     `json:"idpUserId,omitempty"`
	Origin           GetTeamMembers200ApplicationJSONMembersJoinedFromOrigin     `json:"origin"`
	RepoID           *string                                                     `json:"repoId,omitempty"`
	RepoPath         *string                                                     `json:"repoPath,omitempty"`
	SsoConnectedAt   *int64                                                      `json:"ssoConnectedAt,omitempty"`
	SsoUserID        *string                                                     `json:"ssoUserId,omitempty"`
}

type GetTeamMembers200ApplicationJSONMembersProjectsRole string

const (
	GetTeamMembers200ApplicationJSONMembersProjectsRoleAdmin            GetTeamMembers200ApplicationJSONMembersProjectsRole = "ADMIN"
	GetTeamMembers200ApplicationJSONMembersProjectsRoleProjectDeveloper GetTeamMembers200ApplicationJSONMembersProjectsRole = "PROJECT_DEVELOPER"
	GetTeamMembers200ApplicationJSONMembersProjectsRoleProjectViewer    GetTeamMembers200ApplicationJSONMembersProjectsRole = "PROJECT_VIEWER"
)

func (e GetTeamMembers200ApplicationJSONMembersProjectsRole) ToPointer() *GetTeamMembers200ApplicationJSONMembersProjectsRole {
	return &e
}

func (e *GetTeamMembers200ApplicationJSONMembersProjectsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = GetTeamMembers200ApplicationJSONMembersProjectsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembers200ApplicationJSONMembersProjectsRole: %v", v)
	}
}

// GetTeamMembers200ApplicationJSONMembersProjects - Array of project memberships
type GetTeamMembers200ApplicationJSONMembersProjects struct {
	ID   *string                                              `json:"id,omitempty"`
	Name *string                                              `json:"name,omitempty"`
	Role *GetTeamMembers200ApplicationJSONMembersProjectsRole `json:"role,omitempty"`
}

// GetTeamMembers200ApplicationJSONMembersRole - Role of this user in the team.
type GetTeamMembers200ApplicationJSONMembersRole string

const (
	GetTeamMembers200ApplicationJSONMembersRoleOwner       GetTeamMembers200ApplicationJSONMembersRole = "OWNER"
	GetTeamMembers200ApplicationJSONMembersRoleMember      GetTeamMembers200ApplicationJSONMembersRole = "MEMBER"
	GetTeamMembers200ApplicationJSONMembersRoleDeveloper   GetTeamMembers200ApplicationJSONMembersRole = "DEVELOPER"
	GetTeamMembers200ApplicationJSONMembersRoleViewer      GetTeamMembers200ApplicationJSONMembersRole = "VIEWER"
	GetTeamMembers200ApplicationJSONMembersRoleBilling     GetTeamMembers200ApplicationJSONMembersRole = "BILLING"
	GetTeamMembers200ApplicationJSONMembersRoleContributor GetTeamMembers200ApplicationJSONMembersRole = "CONTRIBUTOR"
)

func (e GetTeamMembers200ApplicationJSONMembersRole) ToPointer() *GetTeamMembers200ApplicationJSONMembersRole {
	return &e
}

func (e *GetTeamMembers200ApplicationJSONMembersRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = GetTeamMembers200ApplicationJSONMembersRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembers200ApplicationJSONMembersRole: %v", v)
	}
}

type GetTeamMembers200ApplicationJSONMembers struct {
	// Timestamp in milliseconds for when this team member was accepted by an owner.
	AccessRequestedAt *int64 `json:"accessRequestedAt,omitempty"`
	// ID of the file for the Avatar of this member.
	Avatar *string `json:"avatar,omitempty"`
	// Information about the Bitbucket account of this user.
	Bitbucket *GetTeamMembers200ApplicationJSONMembersBitbucket `json:"bitbucket,omitempty"`
	// Boolean that indicates if this member was confirmed by an owner.
	Confirmed bool `json:"confirmed"`
	// Timestamp in milliseconds when this member was added.
	CreatedAt int64 `json:"createdAt"`
	// The email of this member.
	Email string `json:"email"`
	// Information about the GitHub account for this user.
	Github *GetTeamMembers200ApplicationJSONMembersGithub `json:"github,omitempty"`
	// Information about the GitLab account of this user.
	Gitlab *GetTeamMembers200ApplicationJSONMembersGitlab `json:"gitlab,omitempty"`
	// Map with information about the members origin if they joined by requesting access.
	JoinedFrom *GetTeamMembers200ApplicationJSONMembersJoinedFrom `json:"joinedFrom,omitempty"`
	// The name of this user.
	Name *string `json:"name,omitempty"`
	// Array of project memberships
	Projects []GetTeamMembers200ApplicationJSONMembersProjects `json:"projects,omitempty"`
	// Role of this user in the team.
	Role GetTeamMembers200ApplicationJSONMembersRole `json:"role"`
	// The ID of this user.
	UID string `json:"uid"`
	// The unique username of this user.
	Username string `json:"username"`
}

type GetTeamMembers200ApplicationJSONPagination struct {
	// Amount of items in the current page.
	Count   int64 `json:"count"`
	HasNext bool  `json:"hasNext"`
	// Timestamp that must be used to request the next page.
	Next *int64 `json:"next"`
	// Timestamp that must be used to request the previous page.
	Prev *int64 `json:"prev"`
}

type GetTeamMembers200ApplicationJSON struct {
	EmailInviteCodes []GetTeamMembers200ApplicationJSONEmailInviteCodes `json:"emailInviteCodes,omitempty"`
	Members          []GetTeamMembers200ApplicationJSONMembers          `json:"members"`
	Pagination       GetTeamMembers200ApplicationJSONPagination         `json:"pagination"`
}

type GetTeamMembersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                            *http.Response
	GetTeamMembers200ApplicationJSONObject *GetTeamMembers200ApplicationJSON
}
