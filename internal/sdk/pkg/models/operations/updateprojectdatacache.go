// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

type UpdateProjectDataCacheRequestBody struct {
	// Enable or disable data cache for the project - default: false
	Disabled *bool `json:"disabled,omitempty"`
}

type UpdateProjectDataCacheRequest struct {
	RequestBody *UpdateProjectDataCacheRequestBody `request:"mediaType=application/json"`
	// The unique project identifier
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type UpdateProjectDataCache200ApplicationJSONAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONCronsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

type UpdateProjectDataCache200ApplicationJSONCrons struct {
	Definitions []UpdateProjectDataCache200ApplicationJSONCronsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

type UpdateProjectDataCache200ApplicationJSONDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint12TypePostgresDatabase UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type = "postgres-database"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint12 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint11TypePostgresPassword UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type = "postgres-password"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint11 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint10TypePostgresHost UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type = "postgres-host"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint10 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint9TypePostgresUser UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type = "postgres-user"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint9 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint8TypePostgresPrismaURL UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type = "postgres-prisma-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint8 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint7TypePostgresURLNonPooling UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint7 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint6TypePostgresURL UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type = "postgres-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint6 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint5TypeBlobReadWriteToken UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type = "blob-read-write-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint5 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint4TypeRedisRestAPIReadOnlyToken UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint4 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint3TypeRedisRestAPIToken UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type = "redis-rest-api-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint3 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint2TypeRedisRestAPIURL UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type = "redis-rest-api-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint2 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint1TypeRedisURL UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type = "redis-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint1 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHintType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_1"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_2"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_3"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_4"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_5"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_6"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_7"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_8"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_9"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_10"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_11"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_12"
)

type UpdateProjectDataCache200ApplicationJSONEnvContentHint struct {
	UpdateProjectDataCache200ApplicationJSONEnvContentHint1  *UpdateProjectDataCache200ApplicationJSONEnvContentHint1
	UpdateProjectDataCache200ApplicationJSONEnvContentHint2  *UpdateProjectDataCache200ApplicationJSONEnvContentHint2
	UpdateProjectDataCache200ApplicationJSONEnvContentHint3  *UpdateProjectDataCache200ApplicationJSONEnvContentHint3
	UpdateProjectDataCache200ApplicationJSONEnvContentHint4  *UpdateProjectDataCache200ApplicationJSONEnvContentHint4
	UpdateProjectDataCache200ApplicationJSONEnvContentHint5  *UpdateProjectDataCache200ApplicationJSONEnvContentHint5
	UpdateProjectDataCache200ApplicationJSONEnvContentHint6  *UpdateProjectDataCache200ApplicationJSONEnvContentHint6
	UpdateProjectDataCache200ApplicationJSONEnvContentHint7  *UpdateProjectDataCache200ApplicationJSONEnvContentHint7
	UpdateProjectDataCache200ApplicationJSONEnvContentHint8  *UpdateProjectDataCache200ApplicationJSONEnvContentHint8
	UpdateProjectDataCache200ApplicationJSONEnvContentHint9  *UpdateProjectDataCache200ApplicationJSONEnvContentHint9
	UpdateProjectDataCache200ApplicationJSONEnvContentHint10 *UpdateProjectDataCache200ApplicationJSONEnvContentHint10
	UpdateProjectDataCache200ApplicationJSONEnvContentHint11 *UpdateProjectDataCache200ApplicationJSONEnvContentHint11
	UpdateProjectDataCache200ApplicationJSONEnvContentHint12 *UpdateProjectDataCache200ApplicationJSONEnvContentHint12

	Type UpdateProjectDataCache200ApplicationJSONEnvContentHintType
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint1(updateProjectDataCache200ApplicationJSONEnvContentHint1 UpdateProjectDataCache200ApplicationJSONEnvContentHint1) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint1: &updateProjectDataCache200ApplicationJSONEnvContentHint1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint2(updateProjectDataCache200ApplicationJSONEnvContentHint2 UpdateProjectDataCache200ApplicationJSONEnvContentHint2) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint2: &updateProjectDataCache200ApplicationJSONEnvContentHint2,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint3(updateProjectDataCache200ApplicationJSONEnvContentHint3 UpdateProjectDataCache200ApplicationJSONEnvContentHint3) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint3: &updateProjectDataCache200ApplicationJSONEnvContentHint3,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint4(updateProjectDataCache200ApplicationJSONEnvContentHint4 UpdateProjectDataCache200ApplicationJSONEnvContentHint4) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint4: &updateProjectDataCache200ApplicationJSONEnvContentHint4,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint5(updateProjectDataCache200ApplicationJSONEnvContentHint5 UpdateProjectDataCache200ApplicationJSONEnvContentHint5) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint5: &updateProjectDataCache200ApplicationJSONEnvContentHint5,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint6(updateProjectDataCache200ApplicationJSONEnvContentHint6 UpdateProjectDataCache200ApplicationJSONEnvContentHint6) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint6: &updateProjectDataCache200ApplicationJSONEnvContentHint6,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint7(updateProjectDataCache200ApplicationJSONEnvContentHint7 UpdateProjectDataCache200ApplicationJSONEnvContentHint7) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint7: &updateProjectDataCache200ApplicationJSONEnvContentHint7,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint8(updateProjectDataCache200ApplicationJSONEnvContentHint8 UpdateProjectDataCache200ApplicationJSONEnvContentHint8) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint8: &updateProjectDataCache200ApplicationJSONEnvContentHint8,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint9(updateProjectDataCache200ApplicationJSONEnvContentHint9 UpdateProjectDataCache200ApplicationJSONEnvContentHint9) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint9: &updateProjectDataCache200ApplicationJSONEnvContentHint9,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint10(updateProjectDataCache200ApplicationJSONEnvContentHint10 UpdateProjectDataCache200ApplicationJSONEnvContentHint10) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint10: &updateProjectDataCache200ApplicationJSONEnvContentHint10,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint11(updateProjectDataCache200ApplicationJSONEnvContentHint11 UpdateProjectDataCache200ApplicationJSONEnvContentHint11) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint11: &updateProjectDataCache200ApplicationJSONEnvContentHint11,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint12(updateProjectDataCache200ApplicationJSONEnvContentHint12 UpdateProjectDataCache200ApplicationJSONEnvContentHint12) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint12: &updateProjectDataCache200ApplicationJSONEnvContentHint12,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONEnvContentHint) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProjectDataCache200ApplicationJSONEnvContentHint1 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint1); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1 = updateProjectDataCache200ApplicationJSONEnvContentHint1
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint2 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint2); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2 = updateProjectDataCache200ApplicationJSONEnvContentHint2
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint3 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint3); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3 = updateProjectDataCache200ApplicationJSONEnvContentHint3
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint4 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint4); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4 = updateProjectDataCache200ApplicationJSONEnvContentHint4
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint5 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint5); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5 = updateProjectDataCache200ApplicationJSONEnvContentHint5
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint6 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint6); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6 = updateProjectDataCache200ApplicationJSONEnvContentHint6
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint7 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint7); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7 = updateProjectDataCache200ApplicationJSONEnvContentHint7
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint8 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint8); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8 = updateProjectDataCache200ApplicationJSONEnvContentHint8
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint9 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint9); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9 = updateProjectDataCache200ApplicationJSONEnvContentHint9
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint10 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint10)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint10); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10 = updateProjectDataCache200ApplicationJSONEnvContentHint10
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint11 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint11)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint11); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11 = updateProjectDataCache200ApplicationJSONEnvContentHint11
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint12 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint12)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvContentHint12); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12 = updateProjectDataCache200ApplicationJSONEnvContentHint12
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONEnvTarget2 string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Production  UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "production"
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Preview     UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "preview"
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Development UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "development"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvTarget2) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvTarget2 {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCache200ApplicationJSONEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvTarget2: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvTarget1 string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Production  UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "production"
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Preview     UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "preview"
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Development UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "development"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvTarget1) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvTarget1 {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCache200ApplicationJSONEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvTarget1: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvTargetType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 UpdateProjectDataCache200ApplicationJSONEnvTargetType = "arrayOfupdateProjectDataCache_200ApplicationJSON_env_target_1"
	UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2        UpdateProjectDataCache200ApplicationJSONEnvTargetType = "updateProjectDataCache_200ApplicationJSON_env_target_2"
)

type UpdateProjectDataCache200ApplicationJSONEnvTarget struct {
	ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 []UpdateProjectDataCache200ApplicationJSONEnvTarget1
	UpdateProjectDataCache200ApplicationJSONEnvTarget2        *UpdateProjectDataCache200ApplicationJSONEnvTarget2

	Type UpdateProjectDataCache200ApplicationJSONEnvTargetType
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvTargetArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1(arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 []UpdateProjectDataCache200ApplicationJSONEnvTarget1) UpdateProjectDataCache200ApplicationJSONEnvTarget {
	typ := UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1

	return UpdateProjectDataCache200ApplicationJSONEnvTarget{
		ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1: arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvTargetUpdateProjectDataCache200ApplicationJSONEnvTarget2(updateProjectDataCache200ApplicationJSONEnvTarget2 UpdateProjectDataCache200ApplicationJSONEnvTarget2) UpdateProjectDataCache200ApplicationJSONEnvTarget {
	typ := UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2

	return UpdateProjectDataCache200ApplicationJSONEnvTarget{
		UpdateProjectDataCache200ApplicationJSONEnvTarget2: &updateProjectDataCache200ApplicationJSONEnvTarget2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONEnvTarget) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 := []UpdateProjectDataCache200ApplicationJSONEnvTarget1{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1); err == nil {
		u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 = arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvTarget2 := new(UpdateProjectDataCache200ApplicationJSONEnvTarget2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONEnvTarget2); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvTarget2 = updateProjectDataCache200ApplicationJSONEnvTarget2
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 != nil {
		return json.Marshal(u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvTarget2 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONEnvTarget2)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONEnvType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTypeSecret    UpdateProjectDataCache200ApplicationJSONEnvType = "secret"
	UpdateProjectDataCache200ApplicationJSONEnvTypeSystem    UpdateProjectDataCache200ApplicationJSONEnvType = "system"
	UpdateProjectDataCache200ApplicationJSONEnvTypeEncrypted UpdateProjectDataCache200ApplicationJSONEnvType = "encrypted"
	UpdateProjectDataCache200ApplicationJSONEnvTypePlain     UpdateProjectDataCache200ApplicationJSONEnvType = "plain"
	UpdateProjectDataCache200ApplicationJSONEnvTypeSensitive UpdateProjectDataCache200ApplicationJSONEnvType = "sensitive"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvType) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectDataCache200ApplicationJSONEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnv struct {
	ConfigurationID *string                                                 `json:"configurationId,omitempty"`
	ContentHint     *UpdateProjectDataCache200ApplicationJSONEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                                  `json:"createdAt,omitempty"`
	CreatedBy       *string                                                 `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                              `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                            `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                            `json:"gitBranch,omitempty"`
	ID                *string                                            `json:"id,omitempty"`
	Key               string                                             `json:"key"`
	Target            *UpdateProjectDataCache200ApplicationJSONEnvTarget `json:"target,omitempty"`
	Type              UpdateProjectDataCache200ApplicationJSONEnvType    `json:"type"`
	UpdatedAt         *int64                                             `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                            `json:"updatedBy,omitempty"`
	Value             string                                             `json:"value"`
}

type UpdateProjectDataCache200ApplicationJSONFramework string

const (
	UpdateProjectDataCache200ApplicationJSONFrameworkBlitzjs        UpdateProjectDataCache200ApplicationJSONFramework = "blitzjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkNextjs         UpdateProjectDataCache200ApplicationJSONFramework = "nextjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkGatsby         UpdateProjectDataCache200ApplicationJSONFramework = "gatsby"
	UpdateProjectDataCache200ApplicationJSONFrameworkRemix          UpdateProjectDataCache200ApplicationJSONFramework = "remix"
	UpdateProjectDataCache200ApplicationJSONFrameworkAstro          UpdateProjectDataCache200ApplicationJSONFramework = "astro"
	UpdateProjectDataCache200ApplicationJSONFrameworkHexo           UpdateProjectDataCache200ApplicationJSONFramework = "hexo"
	UpdateProjectDataCache200ApplicationJSONFrameworkEleventy       UpdateProjectDataCache200ApplicationJSONFramework = "eleventy"
	UpdateProjectDataCache200ApplicationJSONFrameworkDocusaurus2    UpdateProjectDataCache200ApplicationJSONFramework = "docusaurus-2"
	UpdateProjectDataCache200ApplicationJSONFrameworkDocusaurus     UpdateProjectDataCache200ApplicationJSONFramework = "docusaurus"
	UpdateProjectDataCache200ApplicationJSONFrameworkPreact         UpdateProjectDataCache200ApplicationJSONFramework = "preact"
	UpdateProjectDataCache200ApplicationJSONFrameworkSolidstart     UpdateProjectDataCache200ApplicationJSONFramework = "solidstart"
	UpdateProjectDataCache200ApplicationJSONFrameworkDojo           UpdateProjectDataCache200ApplicationJSONFramework = "dojo"
	UpdateProjectDataCache200ApplicationJSONFrameworkEmber          UpdateProjectDataCache200ApplicationJSONFramework = "ember"
	UpdateProjectDataCache200ApplicationJSONFrameworkVue            UpdateProjectDataCache200ApplicationJSONFramework = "vue"
	UpdateProjectDataCache200ApplicationJSONFrameworkScully         UpdateProjectDataCache200ApplicationJSONFramework = "scully"
	UpdateProjectDataCache200ApplicationJSONFrameworkIonicAngular   UpdateProjectDataCache200ApplicationJSONFramework = "ionic-angular"
	UpdateProjectDataCache200ApplicationJSONFrameworkAngular        UpdateProjectDataCache200ApplicationJSONFramework = "angular"
	UpdateProjectDataCache200ApplicationJSONFrameworkPolymer        UpdateProjectDataCache200ApplicationJSONFramework = "polymer"
	UpdateProjectDataCache200ApplicationJSONFrameworkSvelte         UpdateProjectDataCache200ApplicationJSONFramework = "svelte"
	UpdateProjectDataCache200ApplicationJSONFrameworkSveltekit      UpdateProjectDataCache200ApplicationJSONFramework = "sveltekit"
	UpdateProjectDataCache200ApplicationJSONFrameworkSveltekit1     UpdateProjectDataCache200ApplicationJSONFramework = "sveltekit-1"
	UpdateProjectDataCache200ApplicationJSONFrameworkIonicReact     UpdateProjectDataCache200ApplicationJSONFramework = "ionic-react"
	UpdateProjectDataCache200ApplicationJSONFrameworkCreateReactApp UpdateProjectDataCache200ApplicationJSONFramework = "create-react-app"
	UpdateProjectDataCache200ApplicationJSONFrameworkGridsome       UpdateProjectDataCache200ApplicationJSONFramework = "gridsome"
	UpdateProjectDataCache200ApplicationJSONFrameworkUmijs          UpdateProjectDataCache200ApplicationJSONFramework = "umijs"
	UpdateProjectDataCache200ApplicationJSONFrameworkSapper         UpdateProjectDataCache200ApplicationJSONFramework = "sapper"
	UpdateProjectDataCache200ApplicationJSONFrameworkSaber          UpdateProjectDataCache200ApplicationJSONFramework = "saber"
	UpdateProjectDataCache200ApplicationJSONFrameworkStencil        UpdateProjectDataCache200ApplicationJSONFramework = "stencil"
	UpdateProjectDataCache200ApplicationJSONFrameworkNuxtjs         UpdateProjectDataCache200ApplicationJSONFramework = "nuxtjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkRedwoodjs      UpdateProjectDataCache200ApplicationJSONFramework = "redwoodjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkHugo           UpdateProjectDataCache200ApplicationJSONFramework = "hugo"
	UpdateProjectDataCache200ApplicationJSONFrameworkJekyll         UpdateProjectDataCache200ApplicationJSONFramework = "jekyll"
	UpdateProjectDataCache200ApplicationJSONFrameworkBrunch         UpdateProjectDataCache200ApplicationJSONFramework = "brunch"
	UpdateProjectDataCache200ApplicationJSONFrameworkMiddleman      UpdateProjectDataCache200ApplicationJSONFramework = "middleman"
	UpdateProjectDataCache200ApplicationJSONFrameworkZola           UpdateProjectDataCache200ApplicationJSONFramework = "zola"
	UpdateProjectDataCache200ApplicationJSONFrameworkHydrogen       UpdateProjectDataCache200ApplicationJSONFramework = "hydrogen"
	UpdateProjectDataCache200ApplicationJSONFrameworkVite           UpdateProjectDataCache200ApplicationJSONFramework = "vite"
	UpdateProjectDataCache200ApplicationJSONFrameworkVitepress      UpdateProjectDataCache200ApplicationJSONFramework = "vitepress"
	UpdateProjectDataCache200ApplicationJSONFrameworkVuepress       UpdateProjectDataCache200ApplicationJSONFramework = "vuepress"
	UpdateProjectDataCache200ApplicationJSONFrameworkParcel         UpdateProjectDataCache200ApplicationJSONFramework = "parcel"
	UpdateProjectDataCache200ApplicationJSONFrameworkSanity         UpdateProjectDataCache200ApplicationJSONFramework = "sanity"
	UpdateProjectDataCache200ApplicationJSONFrameworkStorybook      UpdateProjectDataCache200ApplicationJSONFramework = "storybook"
)

func (e UpdateProjectDataCache200ApplicationJSONFramework) ToPointer() *UpdateProjectDataCache200ApplicationJSONFramework {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectDataCache200ApplicationJSONFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONFramework: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus string

const (
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusSucceeded  UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "succeeded"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusFailed     UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "failed"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusSkipped    UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "skipped"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusPending    UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "pending"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusInProgress UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "in-progress"
)

func (e UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus) ToPointer() *UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequestType string

const (
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestTypePromote  UpdateProjectDataCache200ApplicationJSONLastAliasRequestType = "promote"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestTypeRollback UpdateProjectDataCache200ApplicationJSONLastAliasRequestType = "rollback"
)

func (e UpdateProjectDataCache200ApplicationJSONLastAliasRequestType) ToPointer() *UpdateProjectDataCache200ApplicationJSONLastAliasRequestType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectDataCache200ApplicationJSONLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLastAliasRequestType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequest struct {
	FromDeploymentID string                                                            `json:"fromDeploymentId"`
	JobStatus        UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus `json:"jobStatus"`
	RequestedAt      int64                                                             `json:"requestedAt"`
	ToDeploymentID   string                                                            `json:"toDeploymentId"`
	Type             UpdateProjectDataCache200ApplicationJSONLastAliasRequestType      `json:"type"`
}

type UpdateProjectDataCache200ApplicationJSONLastRollbackTarget struct {
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType = "integer"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType = "boolean"
)

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType
}

func CreateUpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedInteger(integer int64) UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger

	return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedBoolean(boolean bool) UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean

	return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionSucceeded UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "succeeded"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionFailed    UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "failed"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionSkipped   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "skipped"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionCanceled  UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "canceled"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateRegistered UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "registered"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateRunning    UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "running"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateCompleted  UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "completed"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanPro        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "pro"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanEnterprise UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "enterprise"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanHobby      UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "hobby"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanOss        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "oss"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateBuilding     UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "BUILDING"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateError        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "ERROR"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateInitializing UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "INITIALIZING"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateQueued       UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "QUEUED"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateReady        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "READY"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateCanceled     UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "CANCELED"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstateStaged   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate = "STAGED"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstatePromoted UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsTypeLambdas UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType = "LAMBDAS"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeployments struct {
	Alias                  []string                                                                   `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                                    `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                                   `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                                     `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                                      `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                                    `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                                      `json:"createdAt"`
	CreatedIn              string                                                                     `json:"createdIn"`
	Creator                *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator          `json:"creator"`
	DeploymentHostname     string                                                                     `json:"deploymentHostname"`
	Forced                 *bool                                                                      `json:"forced,omitempty"`
	ID                     string                                                                     `json:"id"`
	Meta                   map[string]string                                                          `json:"meta,omitempty"`
	MonorepoManager        *string                                                                    `json:"monorepoManager,omitempty"`
	Name                   string                                                                     `json:"name"`
	Plan                   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                                   `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                                    `json:"private"`
	ReadyAt                *int64                                                                  `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                                  `json:"requestedAt,omitempty"`
	Target                 *string                                                                 `json:"target,omitempty"`
	TeamID                 *string                                                                 `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType           `json:"type"`
	URL                    string                                                                  `json:"url"`
	UserID                 string                                                                  `json:"userId"`
	WithCache              *bool                                                                   `json:"withCache,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONLink3DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProjectDataCache200ApplicationJSONLink3Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink3TypeBitbucket UpdateProjectDataCache200ApplicationJSONLink3Type = "bitbucket"
)

func (e UpdateProjectDataCache200ApplicationJSONLink3Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink3Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectDataCache200ApplicationJSONLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink3Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink3 struct {
	CreatedAt        *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCache200ApplicationJSONLink3DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                    `json:"gitCredentialId,omitempty"`
	Name             *string                                                    `json:"name,omitempty"`
	Owner            *string                                                    `json:"owner,omitempty"`
	ProductionBranch *string                                                    `json:"productionBranch,omitempty"`
	Slug             *string                                                    `json:"slug,omitempty"`
	Sourceless       *bool                                                      `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCache200ApplicationJSONLink3Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                     `json:"updatedAt,omitempty"`
	UUID             *string                                                    `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                    `json:"workspaceUuid,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONLink2DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProjectDataCache200ApplicationJSONLink2Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink2TypeGitlab UpdateProjectDataCache200ApplicationJSONLink2Type = "gitlab"
)

func (e UpdateProjectDataCache200ApplicationJSONLink2Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink2Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectDataCache200ApplicationJSONLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink2Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink2 struct {
	CreatedAt                *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks              []UpdateProjectDataCache200ApplicationJSONLink2DeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                                    `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                    `json:"productionBranch,omitempty"`
	ProjectID                *string                                                    `json:"projectId,omitempty"`
	ProjectName              *string                                                    `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                    `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                    `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                    `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                      `json:"sourceless,omitempty"`
	Type                     *UpdateProjectDataCache200ApplicationJSONLink2Type         `json:"type,omitempty"`
	UpdatedAt                *int64                                                     `json:"updatedAt,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONLink1DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProjectDataCache200ApplicationJSONLink1Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink1TypeGithub UpdateProjectDataCache200ApplicationJSONLink1Type = "github"
)

func (e UpdateProjectDataCache200ApplicationJSONLink1Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink1Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectDataCache200ApplicationJSONLink1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink1Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink1 struct {
	CreatedAt        *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCache200ApplicationJSONLink1DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                    `json:"gitCredentialId,omitempty"`
	Org              *string                                                    `json:"org,omitempty"`
	ProductionBranch *string                                                    `json:"productionBranch,omitempty"`
	Repo             *string                                                    `json:"repo,omitempty"`
	RepoID           *int64                                                     `json:"repoId,omitempty"`
	Sourceless       *bool                                                      `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCache200ApplicationJSONLink1Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                     `json:"updatedAt,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONLinkType string

const (
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_1"
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_2"
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_3"
)

type UpdateProjectDataCache200ApplicationJSONLink struct {
	UpdateProjectDataCache200ApplicationJSONLink1 *UpdateProjectDataCache200ApplicationJSONLink1
	UpdateProjectDataCache200ApplicationJSONLink2 *UpdateProjectDataCache200ApplicationJSONLink2
	UpdateProjectDataCache200ApplicationJSONLink3 *UpdateProjectDataCache200ApplicationJSONLink3

	Type UpdateProjectDataCache200ApplicationJSONLinkType
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink1(updateProjectDataCache200ApplicationJSONLink1 UpdateProjectDataCache200ApplicationJSONLink1) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink1: &updateProjectDataCache200ApplicationJSONLink1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink2(updateProjectDataCache200ApplicationJSONLink2 UpdateProjectDataCache200ApplicationJSONLink2) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink2: &updateProjectDataCache200ApplicationJSONLink2,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink3(updateProjectDataCache200ApplicationJSONLink3 UpdateProjectDataCache200ApplicationJSONLink3) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink3: &updateProjectDataCache200ApplicationJSONLink3,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONLink) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProjectDataCache200ApplicationJSONLink1 := new(UpdateProjectDataCache200ApplicationJSONLink1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONLink1); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink1 = updateProjectDataCache200ApplicationJSONLink1
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1
		return nil
	}

	updateProjectDataCache200ApplicationJSONLink2 := new(UpdateProjectDataCache200ApplicationJSONLink2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONLink2); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink2 = updateProjectDataCache200ApplicationJSONLink2
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2
		return nil
	}

	updateProjectDataCache200ApplicationJSONLink3 := new(UpdateProjectDataCache200ApplicationJSONLink3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONLink3); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink3 = updateProjectDataCache200ApplicationJSONLink3
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONLink1 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONLink1)
	}

	if u.UpdateProjectDataCache200ApplicationJSONLink2 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONLink2)
	}

	if u.UpdateProjectDataCache200ApplicationJSONLink3 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONLink3)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONNodeVersion string

const (
	UpdateProjectDataCache200ApplicationJSONNodeVersionEighteenX UpdateProjectDataCache200ApplicationJSONNodeVersion = "18.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionSixteenX  UpdateProjectDataCache200ApplicationJSONNodeVersion = "16.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionFourteenX UpdateProjectDataCache200ApplicationJSONNodeVersion = "14.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionTwelveX   UpdateProjectDataCache200ApplicationJSONNodeVersion = "12.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionTenX      UpdateProjectDataCache200ApplicationJSONNodeVersion = "10.x"
)

func (e UpdateProjectDataCache200ApplicationJSONNodeVersion) ToPointer() *UpdateProjectDataCache200ApplicationJSONNodeVersion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectDataCache200ApplicationJSONNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONNodeVersion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentTypePreview UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentTypeAll     UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType = "all"
)

func (e UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		*e = UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONPasswordProtection struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType `json:"deploymentType"`
}

type UpdateProjectDataCache200ApplicationJSONPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2AccessRequested UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access = "requested"
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2AccessGranted   UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access = "granted"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2ScopeUser UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope = "user"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2 struct {
	Access        UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                           `json:"createdAt"`
	LastUpdatedAt int64                                                           `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                          `json:"lastUpdatedBy"`
	Scope         UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope  `json:"scope"`
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1ScopeShareableLink    UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope = "shareable-link"
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1ScopeAutomationBypass UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope = "automation-bypass"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass1 struct {
	CreatedAt int64                                                          `json:"createdAt"`
	CreatedBy string                                                         `json:"createdBy"`
	Scope     UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope `json:"scope"`
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypassType string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1 UpdateProjectDataCache200ApplicationJSONProtectionBypassType = "updateProjectDataCache_200ApplicationJSON_protectionBypass_1"
	UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2 UpdateProjectDataCache200ApplicationJSONProtectionBypassType = "updateProjectDataCache_200ApplicationJSON_protectionBypass_2"
)

type UpdateProjectDataCache200ApplicationJSONProtectionBypass struct {
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1 *UpdateProjectDataCache200ApplicationJSONProtectionBypass1
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2 *UpdateProjectDataCache200ApplicationJSONProtectionBypass2

	Type UpdateProjectDataCache200ApplicationJSONProtectionBypassType
}

func CreateUpdateProjectDataCache200ApplicationJSONProtectionBypassUpdateProjectDataCache200ApplicationJSONProtectionBypass1(updateProjectDataCache200ApplicationJSONProtectionBypass1 UpdateProjectDataCache200ApplicationJSONProtectionBypass1) UpdateProjectDataCache200ApplicationJSONProtectionBypass {
	typ := UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1

	return UpdateProjectDataCache200ApplicationJSONProtectionBypass{
		UpdateProjectDataCache200ApplicationJSONProtectionBypass1: &updateProjectDataCache200ApplicationJSONProtectionBypass1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONProtectionBypassUpdateProjectDataCache200ApplicationJSONProtectionBypass2(updateProjectDataCache200ApplicationJSONProtectionBypass2 UpdateProjectDataCache200ApplicationJSONProtectionBypass2) UpdateProjectDataCache200ApplicationJSONProtectionBypass {
	typ := UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2

	return UpdateProjectDataCache200ApplicationJSONProtectionBypass{
		UpdateProjectDataCache200ApplicationJSONProtectionBypass2: &updateProjectDataCache200ApplicationJSONProtectionBypass2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONProtectionBypass) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProjectDataCache200ApplicationJSONProtectionBypass1 := new(UpdateProjectDataCache200ApplicationJSONProtectionBypass1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONProtectionBypass1); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1 = updateProjectDataCache200ApplicationJSONProtectionBypass1
		u.Type = UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1
		return nil
	}

	updateProjectDataCache200ApplicationJSONProtectionBypass2 := new(UpdateProjectDataCache200ApplicationJSONProtectionBypass2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONProtectionBypass2); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2 = updateProjectDataCache200ApplicationJSONProtectionBypass2
		u.Type = UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1)
	}

	if u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentTypePreview UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentTypeAll     UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType = "all"
)

func (e UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		*e = UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONSsoProtection struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType `json:"deploymentType"`
}

type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType = "integer"
	UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType = "boolean"
)

type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType
}

func CreateUpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedInteger(integer int64) UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger

	return UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedBoolean(boolean bool) UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean

	return UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSONTargetsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type UpdateProjectDataCache200ApplicationJSONTargetsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

type UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionSucceeded UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "succeeded"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionFailed    UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "failed"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionSkipped   UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "skipped"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionCanceled  UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "canceled"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsChecksState string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateRegistered UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "registered"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateRunning    UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "running"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateCompleted  UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "completed"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsChecksState) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsChecksState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsChecksState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

type UpdateProjectDataCache200ApplicationJSONTargetsPlan string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsPlanPro        UpdateProjectDataCache200ApplicationJSONTargetsPlan = "pro"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanEnterprise UpdateProjectDataCache200ApplicationJSONTargetsPlan = "enterprise"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanHobby      UpdateProjectDataCache200ApplicationJSONTargetsPlan = "hobby"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanOss        UpdateProjectDataCache200ApplicationJSONTargetsPlan = "oss"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsPlan) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsPlan {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsPlan: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsReadyState string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateBuilding     UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "BUILDING"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateError        UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "ERROR"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateInitializing UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "INITIALIZING"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateQueued       UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "QUEUED"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateReady        UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "READY"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateCanceled     UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "CANCELED"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsReadyState) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsReadyState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsReadyState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsReadySubstateStaged   UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate = "STAGED"
	UpdateProjectDataCache200ApplicationJSONTargetsReadySubstatePromoted UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsType string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsTypeLambdas UpdateProjectDataCache200ApplicationJSONTargetsType = "LAMBDAS"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargets struct {
	Alias                  []string                                                         `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCache200ApplicationJSONTargetsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                          `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                         `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                           `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCache200ApplicationJSONTargetsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCache200ApplicationJSONTargetsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                          `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                            `json:"createdAt"`
	CreatedIn              string                                                           `json:"createdIn"`
	Creator                *UpdateProjectDataCache200ApplicationJSONTargetsCreator          `json:"creator"`
	DeploymentHostname     string                                                           `json:"deploymentHostname"`
	Forced                 *bool                                                            `json:"forced,omitempty"`
	ID                     string                                                           `json:"id"`
	Meta                   map[string]string                                                `json:"meta,omitempty"`
	MonorepoManager        *string                                                          `json:"monorepoManager,omitempty"`
	Name                   string                                                           `json:"name"`
	Plan                   UpdateProjectDataCache200ApplicationJSONTargetsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                         `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                          `json:"private"`
	ReadyAt                *int64                                                        `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCache200ApplicationJSONTargetsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                        `json:"requestedAt,omitempty"`
	Target                 *string                                                       `json:"target,omitempty"`
	TeamID                 *string                                                       `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCache200ApplicationJSONTargetsType           `json:"type"`
	URL                    string                                                        `json:"url"`
	UserID                 string                                                        `json:"userId"`
	WithCache              *bool                                                         `json:"withCache,omitempty"`
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypePreview    UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypeAll        UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "all"
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypeProduction UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "production"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "production":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps2 struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType `json:"deploymentType"`
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypePreview    UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypeAll        UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "all"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypeProduction UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "production"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "production":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionModeAdditional UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode = "additional"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionModeExclusive  UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode = "exclusive"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1 struct {
	Addresses      []UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses    `json:"addresses"`
	DeploymentType UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType `json:"deploymentType"`
	ProtectionMode UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode `json:"protectionMode"`
}

type UpdateProjectDataCache200ApplicationJSONTrustedIpsType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1 UpdateProjectDataCache200ApplicationJSONTrustedIpsType = "updateProjectDataCache_200ApplicationJSON_trustedIps_1"
	UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2 UpdateProjectDataCache200ApplicationJSONTrustedIpsType = "updateProjectDataCache_200ApplicationJSON_trustedIps_2"
)

type UpdateProjectDataCache200ApplicationJSONTrustedIps struct {
	UpdateProjectDataCache200ApplicationJSONTrustedIps1 *UpdateProjectDataCache200ApplicationJSONTrustedIps1
	UpdateProjectDataCache200ApplicationJSONTrustedIps2 *UpdateProjectDataCache200ApplicationJSONTrustedIps2

	Type UpdateProjectDataCache200ApplicationJSONTrustedIpsType
}

func CreateUpdateProjectDataCache200ApplicationJSONTrustedIpsUpdateProjectDataCache200ApplicationJSONTrustedIps1(updateProjectDataCache200ApplicationJSONTrustedIps1 UpdateProjectDataCache200ApplicationJSONTrustedIps1) UpdateProjectDataCache200ApplicationJSONTrustedIps {
	typ := UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1

	return UpdateProjectDataCache200ApplicationJSONTrustedIps{
		UpdateProjectDataCache200ApplicationJSONTrustedIps1: &updateProjectDataCache200ApplicationJSONTrustedIps1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONTrustedIpsUpdateProjectDataCache200ApplicationJSONTrustedIps2(updateProjectDataCache200ApplicationJSONTrustedIps2 UpdateProjectDataCache200ApplicationJSONTrustedIps2) UpdateProjectDataCache200ApplicationJSONTrustedIps {
	typ := UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2

	return UpdateProjectDataCache200ApplicationJSONTrustedIps{
		UpdateProjectDataCache200ApplicationJSONTrustedIps2: &updateProjectDataCache200ApplicationJSONTrustedIps2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONTrustedIps) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProjectDataCache200ApplicationJSONTrustedIps2 := new(UpdateProjectDataCache200ApplicationJSONTrustedIps2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONTrustedIps2); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONTrustedIps2 = updateProjectDataCache200ApplicationJSONTrustedIps2
		u.Type = UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2
		return nil
	}

	updateProjectDataCache200ApplicationJSONTrustedIps1 := new(UpdateProjectDataCache200ApplicationJSONTrustedIps1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDataCache200ApplicationJSONTrustedIps1); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONTrustedIps1 = updateProjectDataCache200ApplicationJSONTrustedIps1
		u.Type = UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONTrustedIps2 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONTrustedIps2)
	}

	if u.UpdateProjectDataCache200ApplicationJSONTrustedIps1 != nil {
		return json.Marshal(u.UpdateProjectDataCache200ApplicationJSONTrustedIps1)
	}

	return nil, nil
}

type UpdateProjectDataCache200ApplicationJSON struct {
	AccountID                        string                                                              `json:"accountId"`
	Analytics                        *UpdateProjectDataCache200ApplicationJSONAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                                               `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                                             `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                                               `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                                             `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                                             `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                                               `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                                             `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                                              `json:"createdAt,omitempty"`
	Crons                            *UpdateProjectDataCache200ApplicationJSONCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                                               `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *UpdateProjectDataCache200ApplicationJSONDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                                             `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                                                `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                                               `json:"enablePreviewFeedback,omitempty"`
	Env                              []UpdateProjectDataCache200ApplicationJSONEnv                       `json:"env,omitempty"`
	Framework                        *UpdateProjectDataCache200ApplicationJSONFramework                  `json:"framework,omitempty"`
	GitComments                      *UpdateProjectDataCache200ApplicationJSONGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                                               `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                                               `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                                               `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                                               `json:"hasFloatingAliases,omitempty"`
	ID                               string                                                              `json:"id"`
	InstallCommand                   *string                                                             `json:"installCommand,omitempty"`
	LastAliasRequest                 *UpdateProjectDataCache200ApplicationJSONLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *UpdateProjectDataCache200ApplicationJSONLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []UpdateProjectDataCache200ApplicationJSONLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *UpdateProjectDataCache200ApplicationJSONLink                       `json:"link,omitempty"`
	Live                             *bool                                                               `json:"live,omitempty"`
	Name                             string                                                              `json:"name"`
	NodeVersion                      UpdateProjectDataCache200ApplicationJSONNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                                             `json:"outputDirectory,omitempty"`
	PasswordProtection               *UpdateProjectDataCache200ApplicationJSONPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *UpdateProjectDataCache200ApplicationJSONPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                                               `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]UpdateProjectDataCache200ApplicationJSONProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                                               `json:"publicSource,omitempty"`
	RootDirectory                    *string                                                             `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                                             `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                                               `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                                               `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *UpdateProjectDataCache200ApplicationJSONSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]UpdateProjectDataCache200ApplicationJSONTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                                              `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                                              `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                                             `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                                             `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *UpdateProjectDataCache200ApplicationJSONTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                                              `json:"updatedAt,omitempty"`
}

type UpdateProjectDataCacheResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                                    *http.Response
	UpdateProjectDataCache200ApplicationJSONObject *UpdateProjectDataCache200ApplicationJSON
}
