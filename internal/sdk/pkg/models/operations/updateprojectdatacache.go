// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

type UpdateProjectDataCacheRequestBody struct {
	// Enable or disable data cache for the project - default: false
	Disabled *bool `json:"disabled,omitempty"`
}

func (o *UpdateProjectDataCacheRequestBody) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type UpdateProjectDataCacheRequest struct {
	RequestBody *UpdateProjectDataCacheRequestBody `request:"mediaType=application/json"`
	// The unique project identifier
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *UpdateProjectDataCacheRequest) GetRequestBody() *UpdateProjectDataCacheRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateProjectDataCacheRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type UpdateProjectDataCache200ApplicationJSONAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetDisabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetPaidAt() *int64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetSampleRatePercent() *int64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectDataCache200ApplicationJSONAnalytics) GetSpendLimitInDollars() *int64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectDataCache200ApplicationJSONCronsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDataCache200ApplicationJSONCronsDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDataCache200ApplicationJSONCronsDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDataCache200ApplicationJSONCronsDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectDataCache200ApplicationJSONCrons struct {
	Definitions []UpdateProjectDataCache200ApplicationJSONCronsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

func (o *UpdateProjectDataCache200ApplicationJSONCrons) GetDefinitions() []UpdateProjectDataCache200ApplicationJSONCronsDefinitions {
	if o == nil {
		return []UpdateProjectDataCache200ApplicationJSONCronsDefinitions{}
	}
	return o.Definitions
}

func (o *UpdateProjectDataCache200ApplicationJSONCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectDataCache200ApplicationJSONCrons) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCache200ApplicationJSONCrons) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCache200ApplicationJSONCrons) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type UpdateProjectDataCache200ApplicationJSONDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

func (o *UpdateProjectDataCache200ApplicationJSONDataCache) GetStorageSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCache200ApplicationJSONDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *UpdateProjectDataCache200ApplicationJSONDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint12TypePostgresDatabase UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type = "postgres-database"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint12 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint12) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint12Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint11TypePostgresPassword UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type = "postgres-password"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint11 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint11) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint11Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint10TypePostgresHost UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type = "postgres-host"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint10 struct {
	StoreID string                                                       `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint10) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint10Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint9TypePostgresUser UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type = "postgres-user"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint9 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint9) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint9Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint8TypePostgresPrismaURL UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type = "postgres-prisma-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint8 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint8) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint8Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint7TypePostgresURLNonPooling UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint7 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint7) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint7Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint6TypePostgresURL UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type = "postgres-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint6 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint6) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint6Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint5TypeBlobReadWriteToken UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type = "blob-read-write-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint5 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint5) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint5Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint4TypeRedisRestAPIReadOnlyToken UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint4 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint4) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint4Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint3TypeRedisRestAPIToken UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type = "redis-rest-api-token"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint3 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint3) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint3Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint2TypeRedisRestAPIURL UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type = "redis-rest-api-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint2 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint2) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint2Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHint1TypeRedisURL UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type = "redis-url"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHint1 struct {
	StoreID string                                                      `json:"storeId"`
	Type    UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnvContentHint1) GetType() UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvContentHint1Type("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONEnvContentHintType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_1"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_2"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_3"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_4"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_5"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_6"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_7"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_8"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9  UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_9"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_10"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_11"
	UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12 UpdateProjectDataCache200ApplicationJSONEnvContentHintType = "updateProjectDataCache_200ApplicationJSON_env_contentHint_12"
)

type UpdateProjectDataCache200ApplicationJSONEnvContentHint struct {
	UpdateProjectDataCache200ApplicationJSONEnvContentHint1  *UpdateProjectDataCache200ApplicationJSONEnvContentHint1
	UpdateProjectDataCache200ApplicationJSONEnvContentHint2  *UpdateProjectDataCache200ApplicationJSONEnvContentHint2
	UpdateProjectDataCache200ApplicationJSONEnvContentHint3  *UpdateProjectDataCache200ApplicationJSONEnvContentHint3
	UpdateProjectDataCache200ApplicationJSONEnvContentHint4  *UpdateProjectDataCache200ApplicationJSONEnvContentHint4
	UpdateProjectDataCache200ApplicationJSONEnvContentHint5  *UpdateProjectDataCache200ApplicationJSONEnvContentHint5
	UpdateProjectDataCache200ApplicationJSONEnvContentHint6  *UpdateProjectDataCache200ApplicationJSONEnvContentHint6
	UpdateProjectDataCache200ApplicationJSONEnvContentHint7  *UpdateProjectDataCache200ApplicationJSONEnvContentHint7
	UpdateProjectDataCache200ApplicationJSONEnvContentHint8  *UpdateProjectDataCache200ApplicationJSONEnvContentHint8
	UpdateProjectDataCache200ApplicationJSONEnvContentHint9  *UpdateProjectDataCache200ApplicationJSONEnvContentHint9
	UpdateProjectDataCache200ApplicationJSONEnvContentHint10 *UpdateProjectDataCache200ApplicationJSONEnvContentHint10
	UpdateProjectDataCache200ApplicationJSONEnvContentHint11 *UpdateProjectDataCache200ApplicationJSONEnvContentHint11
	UpdateProjectDataCache200ApplicationJSONEnvContentHint12 *UpdateProjectDataCache200ApplicationJSONEnvContentHint12

	Type UpdateProjectDataCache200ApplicationJSONEnvContentHintType
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint1(updateProjectDataCache200ApplicationJSONEnvContentHint1 UpdateProjectDataCache200ApplicationJSONEnvContentHint1) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint1: &updateProjectDataCache200ApplicationJSONEnvContentHint1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint2(updateProjectDataCache200ApplicationJSONEnvContentHint2 UpdateProjectDataCache200ApplicationJSONEnvContentHint2) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint2: &updateProjectDataCache200ApplicationJSONEnvContentHint2,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint3(updateProjectDataCache200ApplicationJSONEnvContentHint3 UpdateProjectDataCache200ApplicationJSONEnvContentHint3) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint3: &updateProjectDataCache200ApplicationJSONEnvContentHint3,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint4(updateProjectDataCache200ApplicationJSONEnvContentHint4 UpdateProjectDataCache200ApplicationJSONEnvContentHint4) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint4: &updateProjectDataCache200ApplicationJSONEnvContentHint4,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint5(updateProjectDataCache200ApplicationJSONEnvContentHint5 UpdateProjectDataCache200ApplicationJSONEnvContentHint5) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint5: &updateProjectDataCache200ApplicationJSONEnvContentHint5,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint6(updateProjectDataCache200ApplicationJSONEnvContentHint6 UpdateProjectDataCache200ApplicationJSONEnvContentHint6) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint6: &updateProjectDataCache200ApplicationJSONEnvContentHint6,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint7(updateProjectDataCache200ApplicationJSONEnvContentHint7 UpdateProjectDataCache200ApplicationJSONEnvContentHint7) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint7: &updateProjectDataCache200ApplicationJSONEnvContentHint7,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint8(updateProjectDataCache200ApplicationJSONEnvContentHint8 UpdateProjectDataCache200ApplicationJSONEnvContentHint8) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint8: &updateProjectDataCache200ApplicationJSONEnvContentHint8,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint9(updateProjectDataCache200ApplicationJSONEnvContentHint9 UpdateProjectDataCache200ApplicationJSONEnvContentHint9) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint9: &updateProjectDataCache200ApplicationJSONEnvContentHint9,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint10(updateProjectDataCache200ApplicationJSONEnvContentHint10 UpdateProjectDataCache200ApplicationJSONEnvContentHint10) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint10: &updateProjectDataCache200ApplicationJSONEnvContentHint10,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint11(updateProjectDataCache200ApplicationJSONEnvContentHint11 UpdateProjectDataCache200ApplicationJSONEnvContentHint11) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint11: &updateProjectDataCache200ApplicationJSONEnvContentHint11,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvContentHintUpdateProjectDataCache200ApplicationJSONEnvContentHint12(updateProjectDataCache200ApplicationJSONEnvContentHint12 UpdateProjectDataCache200ApplicationJSONEnvContentHint12) UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	typ := UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12

	return UpdateProjectDataCache200ApplicationJSONEnvContentHint{
		UpdateProjectDataCache200ApplicationJSONEnvContentHint12: &updateProjectDataCache200ApplicationJSONEnvContentHint12,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONEnvContentHint) UnmarshalJSON(data []byte) error {

	updateProjectDataCache200ApplicationJSONEnvContentHint1 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint1)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint1, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1 = updateProjectDataCache200ApplicationJSONEnvContentHint1
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint1
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint2 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint2)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint2, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2 = updateProjectDataCache200ApplicationJSONEnvContentHint2
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint2
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint3 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint3)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint3, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3 = updateProjectDataCache200ApplicationJSONEnvContentHint3
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint3
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint4 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint4)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint4, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4 = updateProjectDataCache200ApplicationJSONEnvContentHint4
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint4
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint5 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint5)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint5, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5 = updateProjectDataCache200ApplicationJSONEnvContentHint5
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint5
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint6 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint6)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint6, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6 = updateProjectDataCache200ApplicationJSONEnvContentHint6
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint6
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint7 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint7)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint7, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7 = updateProjectDataCache200ApplicationJSONEnvContentHint7
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint7
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint8 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint8)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint8, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8 = updateProjectDataCache200ApplicationJSONEnvContentHint8
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint8
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint9 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint9)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint9, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9 = updateProjectDataCache200ApplicationJSONEnvContentHint9
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint9
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint10 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint10)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint10, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10 = updateProjectDataCache200ApplicationJSONEnvContentHint10
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint10
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint11 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint11)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint11, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11 = updateProjectDataCache200ApplicationJSONEnvContentHint11
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint11
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvContentHint12 := new(UpdateProjectDataCache200ApplicationJSONEnvContentHint12)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvContentHint12, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12 = updateProjectDataCache200ApplicationJSONEnvContentHint12
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvContentHintTypeUpdateProjectDataCache200ApplicationJSONEnvContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint1, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint2, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint3, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint4, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint5, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint6, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint7, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint8, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint9, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint10, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint11, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONEnvTarget2 string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Production  UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "production"
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Preview     UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "preview"
	UpdateProjectDataCache200ApplicationJSONEnvTarget2Development UpdateProjectDataCache200ApplicationJSONEnvTarget2 = "development"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvTarget2) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvTarget2 {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCache200ApplicationJSONEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvTarget2: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvTarget1 string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Production  UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "production"
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Preview     UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "preview"
	UpdateProjectDataCache200ApplicationJSONEnvTarget1Development UpdateProjectDataCache200ApplicationJSONEnvTarget1 = "development"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvTarget1) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvTarget1 {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCache200ApplicationJSONEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvTarget1: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnvTargetType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 UpdateProjectDataCache200ApplicationJSONEnvTargetType = "arrayOfupdateProjectDataCache_200ApplicationJSON_env_target_1"
	UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2        UpdateProjectDataCache200ApplicationJSONEnvTargetType = "updateProjectDataCache_200ApplicationJSON_env_target_2"
)

type UpdateProjectDataCache200ApplicationJSONEnvTarget struct {
	ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 []UpdateProjectDataCache200ApplicationJSONEnvTarget1
	UpdateProjectDataCache200ApplicationJSONEnvTarget2        *UpdateProjectDataCache200ApplicationJSONEnvTarget2

	Type UpdateProjectDataCache200ApplicationJSONEnvTargetType
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvTargetArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1(arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 []UpdateProjectDataCache200ApplicationJSONEnvTarget1) UpdateProjectDataCache200ApplicationJSONEnvTarget {
	typ := UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1

	return UpdateProjectDataCache200ApplicationJSONEnvTarget{
		ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1: arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONEnvTargetUpdateProjectDataCache200ApplicationJSONEnvTarget2(updateProjectDataCache200ApplicationJSONEnvTarget2 UpdateProjectDataCache200ApplicationJSONEnvTarget2) UpdateProjectDataCache200ApplicationJSONEnvTarget {
	typ := UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2

	return UpdateProjectDataCache200ApplicationJSONEnvTarget{
		UpdateProjectDataCache200ApplicationJSONEnvTarget2: &updateProjectDataCache200ApplicationJSONEnvTarget2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONEnvTarget) UnmarshalJSON(data []byte) error {

	arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 := []UpdateProjectDataCache200ApplicationJSONEnvTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1, "", true, true); err == nil {
		u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 = arrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvTargetTypeArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1
		return nil
	}

	updateProjectDataCache200ApplicationJSONEnvTarget2 := new(UpdateProjectDataCache200ApplicationJSONEnvTarget2)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONEnvTarget2, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONEnvTarget2 = updateProjectDataCache200ApplicationJSONEnvTarget2
		u.Type = UpdateProjectDataCache200ApplicationJSONEnvTargetTypeUpdateProjectDataCache200ApplicationJSONEnvTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfupdateProjectDataCache200ApplicationJSONEnvTarget1, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONEnvTarget2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONEnvType string

const (
	UpdateProjectDataCache200ApplicationJSONEnvTypeSecret    UpdateProjectDataCache200ApplicationJSONEnvType = "secret"
	UpdateProjectDataCache200ApplicationJSONEnvTypeSystem    UpdateProjectDataCache200ApplicationJSONEnvType = "system"
	UpdateProjectDataCache200ApplicationJSONEnvTypeEncrypted UpdateProjectDataCache200ApplicationJSONEnvType = "encrypted"
	UpdateProjectDataCache200ApplicationJSONEnvTypePlain     UpdateProjectDataCache200ApplicationJSONEnvType = "plain"
	UpdateProjectDataCache200ApplicationJSONEnvTypeSensitive UpdateProjectDataCache200ApplicationJSONEnvType = "sensitive"
)

func (e UpdateProjectDataCache200ApplicationJSONEnvType) ToPointer() *UpdateProjectDataCache200ApplicationJSONEnvType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectDataCache200ApplicationJSONEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONEnvType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONEnv struct {
	ConfigurationID *string                                                 `json:"configurationId,omitempty"`
	ContentHint     *UpdateProjectDataCache200ApplicationJSONEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                                  `json:"createdAt,omitempty"`
	CreatedBy       *string                                                 `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                              `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                            `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                            `json:"gitBranch,omitempty"`
	ID                *string                                            `json:"id,omitempty"`
	Key               string                                             `json:"key"`
	Target            *UpdateProjectDataCache200ApplicationJSONEnvTarget `json:"target,omitempty"`
	Type              UpdateProjectDataCache200ApplicationJSONEnvType    `json:"type"`
	UpdatedAt         *int64                                             `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                            `json:"updatedBy,omitempty"`
	Value             string                                             `json:"value"`
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetContentHint() *UpdateProjectDataCache200ApplicationJSONEnvContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetTarget() *UpdateProjectDataCache200ApplicationJSONEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetType() UpdateProjectDataCache200ApplicationJSONEnvType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONEnvType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectDataCache200ApplicationJSONEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCache200ApplicationJSONFramework string

const (
	UpdateProjectDataCache200ApplicationJSONFrameworkBlitzjs        UpdateProjectDataCache200ApplicationJSONFramework = "blitzjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkNextjs         UpdateProjectDataCache200ApplicationJSONFramework = "nextjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkGatsby         UpdateProjectDataCache200ApplicationJSONFramework = "gatsby"
	UpdateProjectDataCache200ApplicationJSONFrameworkRemix          UpdateProjectDataCache200ApplicationJSONFramework = "remix"
	UpdateProjectDataCache200ApplicationJSONFrameworkAstro          UpdateProjectDataCache200ApplicationJSONFramework = "astro"
	UpdateProjectDataCache200ApplicationJSONFrameworkHexo           UpdateProjectDataCache200ApplicationJSONFramework = "hexo"
	UpdateProjectDataCache200ApplicationJSONFrameworkEleventy       UpdateProjectDataCache200ApplicationJSONFramework = "eleventy"
	UpdateProjectDataCache200ApplicationJSONFrameworkDocusaurus2    UpdateProjectDataCache200ApplicationJSONFramework = "docusaurus-2"
	UpdateProjectDataCache200ApplicationJSONFrameworkDocusaurus     UpdateProjectDataCache200ApplicationJSONFramework = "docusaurus"
	UpdateProjectDataCache200ApplicationJSONFrameworkPreact         UpdateProjectDataCache200ApplicationJSONFramework = "preact"
	UpdateProjectDataCache200ApplicationJSONFrameworkSolidstart     UpdateProjectDataCache200ApplicationJSONFramework = "solidstart"
	UpdateProjectDataCache200ApplicationJSONFrameworkDojo           UpdateProjectDataCache200ApplicationJSONFramework = "dojo"
	UpdateProjectDataCache200ApplicationJSONFrameworkEmber          UpdateProjectDataCache200ApplicationJSONFramework = "ember"
	UpdateProjectDataCache200ApplicationJSONFrameworkVue            UpdateProjectDataCache200ApplicationJSONFramework = "vue"
	UpdateProjectDataCache200ApplicationJSONFrameworkScully         UpdateProjectDataCache200ApplicationJSONFramework = "scully"
	UpdateProjectDataCache200ApplicationJSONFrameworkIonicAngular   UpdateProjectDataCache200ApplicationJSONFramework = "ionic-angular"
	UpdateProjectDataCache200ApplicationJSONFrameworkAngular        UpdateProjectDataCache200ApplicationJSONFramework = "angular"
	UpdateProjectDataCache200ApplicationJSONFrameworkPolymer        UpdateProjectDataCache200ApplicationJSONFramework = "polymer"
	UpdateProjectDataCache200ApplicationJSONFrameworkSvelte         UpdateProjectDataCache200ApplicationJSONFramework = "svelte"
	UpdateProjectDataCache200ApplicationJSONFrameworkSveltekit      UpdateProjectDataCache200ApplicationJSONFramework = "sveltekit"
	UpdateProjectDataCache200ApplicationJSONFrameworkSveltekit1     UpdateProjectDataCache200ApplicationJSONFramework = "sveltekit-1"
	UpdateProjectDataCache200ApplicationJSONFrameworkIonicReact     UpdateProjectDataCache200ApplicationJSONFramework = "ionic-react"
	UpdateProjectDataCache200ApplicationJSONFrameworkCreateReactApp UpdateProjectDataCache200ApplicationJSONFramework = "create-react-app"
	UpdateProjectDataCache200ApplicationJSONFrameworkGridsome       UpdateProjectDataCache200ApplicationJSONFramework = "gridsome"
	UpdateProjectDataCache200ApplicationJSONFrameworkUmijs          UpdateProjectDataCache200ApplicationJSONFramework = "umijs"
	UpdateProjectDataCache200ApplicationJSONFrameworkSapper         UpdateProjectDataCache200ApplicationJSONFramework = "sapper"
	UpdateProjectDataCache200ApplicationJSONFrameworkSaber          UpdateProjectDataCache200ApplicationJSONFramework = "saber"
	UpdateProjectDataCache200ApplicationJSONFrameworkStencil        UpdateProjectDataCache200ApplicationJSONFramework = "stencil"
	UpdateProjectDataCache200ApplicationJSONFrameworkNuxtjs         UpdateProjectDataCache200ApplicationJSONFramework = "nuxtjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkRedwoodjs      UpdateProjectDataCache200ApplicationJSONFramework = "redwoodjs"
	UpdateProjectDataCache200ApplicationJSONFrameworkHugo           UpdateProjectDataCache200ApplicationJSONFramework = "hugo"
	UpdateProjectDataCache200ApplicationJSONFrameworkJekyll         UpdateProjectDataCache200ApplicationJSONFramework = "jekyll"
	UpdateProjectDataCache200ApplicationJSONFrameworkBrunch         UpdateProjectDataCache200ApplicationJSONFramework = "brunch"
	UpdateProjectDataCache200ApplicationJSONFrameworkMiddleman      UpdateProjectDataCache200ApplicationJSONFramework = "middleman"
	UpdateProjectDataCache200ApplicationJSONFrameworkZola           UpdateProjectDataCache200ApplicationJSONFramework = "zola"
	UpdateProjectDataCache200ApplicationJSONFrameworkHydrogen       UpdateProjectDataCache200ApplicationJSONFramework = "hydrogen"
	UpdateProjectDataCache200ApplicationJSONFrameworkVite           UpdateProjectDataCache200ApplicationJSONFramework = "vite"
	UpdateProjectDataCache200ApplicationJSONFrameworkVitepress      UpdateProjectDataCache200ApplicationJSONFramework = "vitepress"
	UpdateProjectDataCache200ApplicationJSONFrameworkVuepress       UpdateProjectDataCache200ApplicationJSONFramework = "vuepress"
	UpdateProjectDataCache200ApplicationJSONFrameworkParcel         UpdateProjectDataCache200ApplicationJSONFramework = "parcel"
	UpdateProjectDataCache200ApplicationJSONFrameworkSanity         UpdateProjectDataCache200ApplicationJSONFramework = "sanity"
	UpdateProjectDataCache200ApplicationJSONFrameworkStorybook      UpdateProjectDataCache200ApplicationJSONFramework = "storybook"
)

func (e UpdateProjectDataCache200ApplicationJSONFramework) ToPointer() *UpdateProjectDataCache200ApplicationJSONFramework {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectDataCache200ApplicationJSONFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONFramework: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *UpdateProjectDataCache200ApplicationJSONGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *UpdateProjectDataCache200ApplicationJSONGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus string

const (
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusSucceeded  UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "succeeded"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusFailed     UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "failed"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusSkipped    UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "skipped"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusPending    UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "pending"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatusInProgress UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus = "in-progress"
)

func (e UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus) ToPointer() *UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequestType string

const (
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestTypePromote  UpdateProjectDataCache200ApplicationJSONLastAliasRequestType = "promote"
	UpdateProjectDataCache200ApplicationJSONLastAliasRequestTypeRollback UpdateProjectDataCache200ApplicationJSONLastAliasRequestType = "rollback"
)

func (e UpdateProjectDataCache200ApplicationJSONLastAliasRequestType) ToPointer() *UpdateProjectDataCache200ApplicationJSONLastAliasRequestType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectDataCache200ApplicationJSONLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLastAliasRequestType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLastAliasRequest struct {
	FromDeploymentID string                                                            `json:"fromDeploymentId"`
	JobStatus        UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus `json:"jobStatus"`
	RequestedAt      int64                                                             `json:"requestedAt"`
	ToDeploymentID   string                                                            `json:"toDeploymentId"`
	Type             UpdateProjectDataCache200ApplicationJSONLastAliasRequestType      `json:"type"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectDataCache200ApplicationJSONLastAliasRequest) GetJobStatus() UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONLastAliasRequestJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectDataCache200ApplicationJSONLastAliasRequest) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectDataCache200ApplicationJSONLastAliasRequest) GetType() UpdateProjectDataCache200ApplicationJSONLastAliasRequestType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONLastAliasRequestType("")
	}
	return o.Type
}

type UpdateProjectDataCache200ApplicationJSONLastRollbackTarget struct {
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType = "integer"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType = "boolean"
)

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedType
}

func CreateUpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedInteger(integer int64) UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger

	return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedBoolean(boolean bool) UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean

	return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionSucceeded UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "succeeded"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionFailed    UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "failed"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionSkipped   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "skipped"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusionCanceled  UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion = "canceled"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateRegistered UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "registered"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateRunning    UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "running"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksStateCompleted  UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState = "completed"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanPro        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "pro"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanEnterprise UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "enterprise"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanHobby      UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "hobby"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlanOss        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan = "oss"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateBuilding     UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "BUILDING"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateError        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "ERROR"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateInitializing UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "INITIALIZING"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateQueued       UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "QUEUED"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateReady        UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "READY"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyStateCanceled     UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState = "CANCELED"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstateStaged   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate = "STAGED"
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstatePromoted UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType string

const (
	UpdateProjectDataCache200ApplicationJSONLatestDeploymentsTypeLambdas UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType = "LAMBDAS"
)

func (e UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType) ToPointer() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLatestDeployments struct {
	Alias                  []string                                                                   `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                                    `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                                   `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                                     `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                                      `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                                    `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                                      `json:"createdAt"`
	CreatedIn              string                                                                     `json:"createdIn"`
	Creator                *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator          `json:"creator"`
	DeploymentHostname     string                                                                     `json:"deploymentHostname"`
	Forced                 *bool                                                                      `json:"forced,omitempty"`
	ID                     string                                                                     `json:"id"`
	Meta                   map[string]string                                                          `json:"meta,omitempty"`
	MonorepoManager        *string                                                                    `json:"monorepoManager,omitempty"`
	Name                   string                                                                     `json:"name"`
	Plan                   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                                   `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                                    `json:"private"`
	ReadyAt                *int64                                                                  `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                                  `json:"requestedAt,omitempty"`
	Target                 *string                                                                 `json:"target,omitempty"`
	TeamID                 *string                                                                 `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType           `json:"type"`
	URL                    string                                                                  `json:"url"`
	UserID                 string                                                                  `json:"userId"`
	WithCache              *bool                                                                   `json:"withCache,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetAliasAssigned() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetAliasError() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetBuilds() []UpdateProjectDataCache200ApplicationJSONLatestDeploymentsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetChecksConclusion() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetChecksState() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetCreator() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetPlan() UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetReadyState() UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetReadySubstate() *UpdateProjectDataCache200ApplicationJSONLatestDeploymentsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetType() UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONLatestDeploymentsType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCache200ApplicationJSONLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCache200ApplicationJSONLink3DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCache200ApplicationJSONLink3Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink3TypeBitbucket UpdateProjectDataCache200ApplicationJSONLink3Type = "bitbucket"
)

func (e UpdateProjectDataCache200ApplicationJSONLink3Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink3Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectDataCache200ApplicationJSONLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink3Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink3 struct {
	CreatedAt        *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCache200ApplicationJSONLink3DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                    `json:"gitCredentialId,omitempty"`
	Name             *string                                                    `json:"name,omitempty"`
	Owner            *string                                                    `json:"owner,omitempty"`
	ProductionBranch *string                                                    `json:"productionBranch,omitempty"`
	Slug             *string                                                    `json:"slug,omitempty"`
	Sourceless       *bool                                                      `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCache200ApplicationJSONLink3Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                     `json:"updatedAt,omitempty"`
	UUID             *string                                                    `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                    `json:"workspaceUuid,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetDeployHooks() []UpdateProjectDataCache200ApplicationJSONLink3DeployHooks {
	if o == nil {
		return []UpdateProjectDataCache200ApplicationJSONLink3DeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetType() *UpdateProjectDataCache200ApplicationJSONLink3Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type UpdateProjectDataCache200ApplicationJSONLink2DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCache200ApplicationJSONLink2Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink2TypeGitlab UpdateProjectDataCache200ApplicationJSONLink2Type = "gitlab"
)

func (e UpdateProjectDataCache200ApplicationJSONLink2Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink2Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectDataCache200ApplicationJSONLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink2Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink2 struct {
	CreatedAt                *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks              []UpdateProjectDataCache200ApplicationJSONLink2DeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                                    `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                    `json:"productionBranch,omitempty"`
	ProjectID                *string                                                    `json:"projectId,omitempty"`
	ProjectName              *string                                                    `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                    `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                    `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                    `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                      `json:"sourceless,omitempty"`
	Type                     *UpdateProjectDataCache200ApplicationJSONLink2Type         `json:"type,omitempty"`
	UpdatedAt                *int64                                                     `json:"updatedAt,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetDeployHooks() []UpdateProjectDataCache200ApplicationJSONLink2DeployHooks {
	if o == nil {
		return []UpdateProjectDataCache200ApplicationJSONLink2DeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetType() *UpdateProjectDataCache200ApplicationJSONLink2Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONLink2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDataCache200ApplicationJSONLink1DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCache200ApplicationJSONLink1Type string

const (
	UpdateProjectDataCache200ApplicationJSONLink1TypeGithub UpdateProjectDataCache200ApplicationJSONLink1Type = "github"
)

func (e UpdateProjectDataCache200ApplicationJSONLink1Type) ToPointer() *UpdateProjectDataCache200ApplicationJSONLink1Type {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONLink1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectDataCache200ApplicationJSONLink1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONLink1Type: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONLink1 struct {
	CreatedAt        *int64                                                     `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCache200ApplicationJSONLink1DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                    `json:"gitCredentialId,omitempty"`
	Org              *string                                                    `json:"org,omitempty"`
	ProductionBranch *string                                                    `json:"productionBranch,omitempty"`
	Repo             *string                                                    `json:"repo,omitempty"`
	RepoID           *int64                                                     `json:"repoId,omitempty"`
	Sourceless       *bool                                                      `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCache200ApplicationJSONLink1Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                     `json:"updatedAt,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetDeployHooks() []UpdateProjectDataCache200ApplicationJSONLink1DeployHooks {
	if o == nil {
		return []UpdateProjectDataCache200ApplicationJSONLink1DeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetRepoID() *int64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetType() *UpdateProjectDataCache200ApplicationJSONLink1Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONLink1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDataCache200ApplicationJSONLinkType string

const (
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_1"
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_2"
	UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3 UpdateProjectDataCache200ApplicationJSONLinkType = "updateProjectDataCache_200ApplicationJSON_link_3"
)

type UpdateProjectDataCache200ApplicationJSONLink struct {
	UpdateProjectDataCache200ApplicationJSONLink1 *UpdateProjectDataCache200ApplicationJSONLink1
	UpdateProjectDataCache200ApplicationJSONLink2 *UpdateProjectDataCache200ApplicationJSONLink2
	UpdateProjectDataCache200ApplicationJSONLink3 *UpdateProjectDataCache200ApplicationJSONLink3

	Type UpdateProjectDataCache200ApplicationJSONLinkType
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink1(updateProjectDataCache200ApplicationJSONLink1 UpdateProjectDataCache200ApplicationJSONLink1) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink1: &updateProjectDataCache200ApplicationJSONLink1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink2(updateProjectDataCache200ApplicationJSONLink2 UpdateProjectDataCache200ApplicationJSONLink2) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink2: &updateProjectDataCache200ApplicationJSONLink2,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONLinkUpdateProjectDataCache200ApplicationJSONLink3(updateProjectDataCache200ApplicationJSONLink3 UpdateProjectDataCache200ApplicationJSONLink3) UpdateProjectDataCache200ApplicationJSONLink {
	typ := UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3

	return UpdateProjectDataCache200ApplicationJSONLink{
		UpdateProjectDataCache200ApplicationJSONLink3: &updateProjectDataCache200ApplicationJSONLink3,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONLink) UnmarshalJSON(data []byte) error {

	updateProjectDataCache200ApplicationJSONLink1 := new(UpdateProjectDataCache200ApplicationJSONLink1)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONLink1, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink1 = updateProjectDataCache200ApplicationJSONLink1
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink1
		return nil
	}

	updateProjectDataCache200ApplicationJSONLink2 := new(UpdateProjectDataCache200ApplicationJSONLink2)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONLink2, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink2 = updateProjectDataCache200ApplicationJSONLink2
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink2
		return nil
	}

	updateProjectDataCache200ApplicationJSONLink3 := new(UpdateProjectDataCache200ApplicationJSONLink3)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONLink3, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONLink3 = updateProjectDataCache200ApplicationJSONLink3
		u.Type = UpdateProjectDataCache200ApplicationJSONLinkTypeUpdateProjectDataCache200ApplicationJSONLink3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONLink1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONLink1, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONLink2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONLink2, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONLink3 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONLink3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONNodeVersion string

const (
	UpdateProjectDataCache200ApplicationJSONNodeVersionEighteenX UpdateProjectDataCache200ApplicationJSONNodeVersion = "18.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionSixteenX  UpdateProjectDataCache200ApplicationJSONNodeVersion = "16.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionFourteenX UpdateProjectDataCache200ApplicationJSONNodeVersion = "14.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionTwelveX   UpdateProjectDataCache200ApplicationJSONNodeVersion = "12.x"
	UpdateProjectDataCache200ApplicationJSONNodeVersionTenX      UpdateProjectDataCache200ApplicationJSONNodeVersion = "10.x"
)

func (e UpdateProjectDataCache200ApplicationJSONNodeVersion) ToPointer() *UpdateProjectDataCache200ApplicationJSONNodeVersion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectDataCache200ApplicationJSONNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONNodeVersion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentTypePreview UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentTypeAll     UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType = "all"
)

func (e UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		*e = UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONPasswordProtection struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCache200ApplicationJSONPasswordProtection) GetDeploymentType() UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONPasswordProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCache200ApplicationJSONPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectDataCache200ApplicationJSONPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2AccessRequested UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access = "requested"
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2AccessGranted   UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access = "granted"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2ScopeUser UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope = "user"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass2 struct {
	Access        UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                           `json:"createdAt"`
	LastUpdatedAt int64                                                           `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                          `json:"lastUpdatedBy"`
	Scope         UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope  `json:"scope"`
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass2) GetAccess() UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONProtectionBypass2Access("")
	}
	return o.Access
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass2) GetScope() UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONProtectionBypass2Scope("")
	}
	return o.Scope
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1ScopeShareableLink    UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope = "shareable-link"
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1ScopeAutomationBypass UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope = "automation-bypass"
)

func (e UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope) ToPointer() *UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypass1 struct {
	CreatedAt int64                                                          `json:"createdAt"`
	CreatedBy string                                                         `json:"createdBy"`
	Scope     UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope `json:"scope"`
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCache200ApplicationJSONProtectionBypass1) GetScope() UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONProtectionBypass1Scope("")
	}
	return o.Scope
}

type UpdateProjectDataCache200ApplicationJSONProtectionBypassType string

const (
	UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1 UpdateProjectDataCache200ApplicationJSONProtectionBypassType = "updateProjectDataCache_200ApplicationJSON_protectionBypass_1"
	UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2 UpdateProjectDataCache200ApplicationJSONProtectionBypassType = "updateProjectDataCache_200ApplicationJSON_protectionBypass_2"
)

type UpdateProjectDataCache200ApplicationJSONProtectionBypass struct {
	UpdateProjectDataCache200ApplicationJSONProtectionBypass1 *UpdateProjectDataCache200ApplicationJSONProtectionBypass1
	UpdateProjectDataCache200ApplicationJSONProtectionBypass2 *UpdateProjectDataCache200ApplicationJSONProtectionBypass2

	Type UpdateProjectDataCache200ApplicationJSONProtectionBypassType
}

func CreateUpdateProjectDataCache200ApplicationJSONProtectionBypassUpdateProjectDataCache200ApplicationJSONProtectionBypass1(updateProjectDataCache200ApplicationJSONProtectionBypass1 UpdateProjectDataCache200ApplicationJSONProtectionBypass1) UpdateProjectDataCache200ApplicationJSONProtectionBypass {
	typ := UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1

	return UpdateProjectDataCache200ApplicationJSONProtectionBypass{
		UpdateProjectDataCache200ApplicationJSONProtectionBypass1: &updateProjectDataCache200ApplicationJSONProtectionBypass1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONProtectionBypassUpdateProjectDataCache200ApplicationJSONProtectionBypass2(updateProjectDataCache200ApplicationJSONProtectionBypass2 UpdateProjectDataCache200ApplicationJSONProtectionBypass2) UpdateProjectDataCache200ApplicationJSONProtectionBypass {
	typ := UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2

	return UpdateProjectDataCache200ApplicationJSONProtectionBypass{
		UpdateProjectDataCache200ApplicationJSONProtectionBypass2: &updateProjectDataCache200ApplicationJSONProtectionBypass2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONProtectionBypass) UnmarshalJSON(data []byte) error {

	updateProjectDataCache200ApplicationJSONProtectionBypass1 := new(UpdateProjectDataCache200ApplicationJSONProtectionBypass1)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONProtectionBypass1, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1 = updateProjectDataCache200ApplicationJSONProtectionBypass1
		u.Type = UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass1
		return nil
	}

	updateProjectDataCache200ApplicationJSONProtectionBypass2 := new(UpdateProjectDataCache200ApplicationJSONProtectionBypass2)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONProtectionBypass2, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2 = updateProjectDataCache200ApplicationJSONProtectionBypass2
		u.Type = UpdateProjectDataCache200ApplicationJSONProtectionBypassTypeUpdateProjectDataCache200ApplicationJSONProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONProtectionBypass1, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONProtectionBypass2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentTypePreview UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentTypeAll     UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType = "all"
)

func (e UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		*e = UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONSsoProtection struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCache200ApplicationJSONSsoProtection) GetDeploymentType() UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType = "integer"
	UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType = "boolean"
)

type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedType
}

func CreateUpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedInteger(integer int64) UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger

	return UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedBoolean(boolean bool) UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean

	return UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProjectDataCache200ApplicationJSONTargetsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSONTargetsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectDataCache200ApplicationJSONTargetsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionSucceeded UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "succeeded"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionFailed    UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "failed"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionSkipped   UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "skipped"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusionCanceled  UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion = "canceled"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsChecksState string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateRegistered UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "registered"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateRunning    UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "running"
	UpdateProjectDataCache200ApplicationJSONTargetsChecksStateCompleted  UpdateProjectDataCache200ApplicationJSONTargetsChecksState = "completed"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsChecksState) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsChecksState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsChecksState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCache200ApplicationJSONTargetsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCache200ApplicationJSONTargetsPlan string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsPlanPro        UpdateProjectDataCache200ApplicationJSONTargetsPlan = "pro"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanEnterprise UpdateProjectDataCache200ApplicationJSONTargetsPlan = "enterprise"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanHobby      UpdateProjectDataCache200ApplicationJSONTargetsPlan = "hobby"
	UpdateProjectDataCache200ApplicationJSONTargetsPlanOss        UpdateProjectDataCache200ApplicationJSONTargetsPlan = "oss"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsPlan) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsPlan {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsPlan: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsReadyState string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateBuilding     UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "BUILDING"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateError        UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "ERROR"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateInitializing UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "INITIALIZING"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateQueued       UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "QUEUED"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateReady        UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "READY"
	UpdateProjectDataCache200ApplicationJSONTargetsReadyStateCanceled     UpdateProjectDataCache200ApplicationJSONTargetsReadyState = "CANCELED"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsReadyState) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsReadyState {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsReadyState: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsReadySubstateStaged   UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate = "STAGED"
	UpdateProjectDataCache200ApplicationJSONTargetsReadySubstatePromoted UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargetsType string

const (
	UpdateProjectDataCache200ApplicationJSONTargetsTypeLambdas UpdateProjectDataCache200ApplicationJSONTargetsType = "LAMBDAS"
)

func (e UpdateProjectDataCache200ApplicationJSONTargetsType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTargetsType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCache200ApplicationJSONTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTargetsType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTargets struct {
	Alias                  []string                                                         `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCache200ApplicationJSONTargetsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                          `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                         `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                           `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCache200ApplicationJSONTargetsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCache200ApplicationJSONTargetsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                          `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                            `json:"createdAt"`
	CreatedIn              string                                                           `json:"createdIn"`
	Creator                *UpdateProjectDataCache200ApplicationJSONTargetsCreator          `json:"creator"`
	DeploymentHostname     string                                                           `json:"deploymentHostname"`
	Forced                 *bool                                                            `json:"forced,omitempty"`
	ID                     string                                                           `json:"id"`
	Meta                   map[string]string                                                `json:"meta,omitempty"`
	MonorepoManager        *string                                                          `json:"monorepoManager,omitempty"`
	Name                   string                                                           `json:"name"`
	Plan                   UpdateProjectDataCache200ApplicationJSONTargetsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                         `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                          `json:"private"`
	ReadyAt                *int64                                                        `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCache200ApplicationJSONTargetsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                        `json:"requestedAt,omitempty"`
	Target                 *string                                                       `json:"target,omitempty"`
	TeamID                 *string                                                       `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCache200ApplicationJSONTargetsType           `json:"type"`
	URL                    string                                                        `json:"url"`
	UserID                 string                                                        `json:"userId"`
	WithCache              *bool                                                         `json:"withCache,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetAliasAssigned() *UpdateProjectDataCache200ApplicationJSONTargetsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetAliasError() *UpdateProjectDataCache200ApplicationJSONTargetsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetBuilds() []UpdateProjectDataCache200ApplicationJSONTargetsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetChecksConclusion() *UpdateProjectDataCache200ApplicationJSONTargetsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetChecksState() *UpdateProjectDataCache200ApplicationJSONTargetsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetCreator() *UpdateProjectDataCache200ApplicationJSONTargetsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetPlan() UpdateProjectDataCache200ApplicationJSONTargetsPlan {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTargetsPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetReadyState() UpdateProjectDataCache200ApplicationJSONTargetsReadyState {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTargetsReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetReadySubstate() *UpdateProjectDataCache200ApplicationJSONTargetsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetType() UpdateProjectDataCache200ApplicationJSONTargetsType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTargetsType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCache200ApplicationJSONTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypePreview    UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypeAll        UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "all"
	UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentTypeProduction UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType = "production"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "production":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps2 struct {
	DeploymentType UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps2) GetDeploymentType() UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTrustedIps2DeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypePreview    UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "preview"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypeAll        UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "all"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentTypeProduction UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType = "production"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "production":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionModeAdditional UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode = "additional"
	UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionModeExclusive  UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode = "exclusive"
)

func (e UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode) ToPointer() *UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode {
	return &e
}

func (e *UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode: %v", v)
	}
}

type UpdateProjectDataCache200ApplicationJSONTrustedIps1 struct {
	Addresses      []UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses    `json:"addresses"`
	DeploymentType UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType `json:"deploymentType"`
	ProtectionMode UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode `json:"protectionMode"`
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps1) GetAddresses() []UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses {
	if o == nil {
		return []UpdateProjectDataCache200ApplicationJSONTrustedIps1Addresses{}
	}
	return o.Addresses
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps1) GetDeploymentType() UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTrustedIps1DeploymentType("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectDataCache200ApplicationJSONTrustedIps1) GetProtectionMode() UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONTrustedIps1ProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectDataCache200ApplicationJSONTrustedIpsType string

const (
	UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1 UpdateProjectDataCache200ApplicationJSONTrustedIpsType = "updateProjectDataCache_200ApplicationJSON_trustedIps_1"
	UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2 UpdateProjectDataCache200ApplicationJSONTrustedIpsType = "updateProjectDataCache_200ApplicationJSON_trustedIps_2"
)

type UpdateProjectDataCache200ApplicationJSONTrustedIps struct {
	UpdateProjectDataCache200ApplicationJSONTrustedIps1 *UpdateProjectDataCache200ApplicationJSONTrustedIps1
	UpdateProjectDataCache200ApplicationJSONTrustedIps2 *UpdateProjectDataCache200ApplicationJSONTrustedIps2

	Type UpdateProjectDataCache200ApplicationJSONTrustedIpsType
}

func CreateUpdateProjectDataCache200ApplicationJSONTrustedIpsUpdateProjectDataCache200ApplicationJSONTrustedIps1(updateProjectDataCache200ApplicationJSONTrustedIps1 UpdateProjectDataCache200ApplicationJSONTrustedIps1) UpdateProjectDataCache200ApplicationJSONTrustedIps {
	typ := UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1

	return UpdateProjectDataCache200ApplicationJSONTrustedIps{
		UpdateProjectDataCache200ApplicationJSONTrustedIps1: &updateProjectDataCache200ApplicationJSONTrustedIps1,
		Type: typ,
	}
}

func CreateUpdateProjectDataCache200ApplicationJSONTrustedIpsUpdateProjectDataCache200ApplicationJSONTrustedIps2(updateProjectDataCache200ApplicationJSONTrustedIps2 UpdateProjectDataCache200ApplicationJSONTrustedIps2) UpdateProjectDataCache200ApplicationJSONTrustedIps {
	typ := UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2

	return UpdateProjectDataCache200ApplicationJSONTrustedIps{
		UpdateProjectDataCache200ApplicationJSONTrustedIps2: &updateProjectDataCache200ApplicationJSONTrustedIps2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCache200ApplicationJSONTrustedIps) UnmarshalJSON(data []byte) error {

	updateProjectDataCache200ApplicationJSONTrustedIps2 := new(UpdateProjectDataCache200ApplicationJSONTrustedIps2)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONTrustedIps2, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONTrustedIps2 = updateProjectDataCache200ApplicationJSONTrustedIps2
		u.Type = UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps2
		return nil
	}

	updateProjectDataCache200ApplicationJSONTrustedIps1 := new(UpdateProjectDataCache200ApplicationJSONTrustedIps1)
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache200ApplicationJSONTrustedIps1, "", true, true); err == nil {
		u.UpdateProjectDataCache200ApplicationJSONTrustedIps1 = updateProjectDataCache200ApplicationJSONTrustedIps1
		u.Type = UpdateProjectDataCache200ApplicationJSONTrustedIpsTypeUpdateProjectDataCache200ApplicationJSONTrustedIps1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProjectDataCache200ApplicationJSONTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache200ApplicationJSONTrustedIps1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONTrustedIps1, "", true)
	}

	if u.UpdateProjectDataCache200ApplicationJSONTrustedIps2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache200ApplicationJSONTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateProjectDataCache200ApplicationJSON struct {
	AccountID                        string                                                              `json:"accountId"`
	Analytics                        *UpdateProjectDataCache200ApplicationJSONAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                                               `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                                             `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                                               `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                                             `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                                             `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                                               `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                                             `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                                              `json:"createdAt,omitempty"`
	Crons                            *UpdateProjectDataCache200ApplicationJSONCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                                               `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *UpdateProjectDataCache200ApplicationJSONDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                                             `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                                                `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                                               `json:"enablePreviewFeedback,omitempty"`
	Env                              []UpdateProjectDataCache200ApplicationJSONEnv                       `json:"env,omitempty"`
	Framework                        *UpdateProjectDataCache200ApplicationJSONFramework                  `json:"framework,omitempty"`
	GitComments                      *UpdateProjectDataCache200ApplicationJSONGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                                               `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                                               `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                                               `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                                               `json:"hasFloatingAliases,omitempty"`
	ID                               string                                                              `json:"id"`
	InstallCommand                   *string                                                             `json:"installCommand,omitempty"`
	LastAliasRequest                 *UpdateProjectDataCache200ApplicationJSONLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *UpdateProjectDataCache200ApplicationJSONLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []UpdateProjectDataCache200ApplicationJSONLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *UpdateProjectDataCache200ApplicationJSONLink                       `json:"link,omitempty"`
	Live                             *bool                                                               `json:"live,omitempty"`
	Name                             string                                                              `json:"name"`
	NodeVersion                      UpdateProjectDataCache200ApplicationJSONNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                                             `json:"outputDirectory,omitempty"`
	PasswordProtection               *UpdateProjectDataCache200ApplicationJSONPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *UpdateProjectDataCache200ApplicationJSONPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                                               `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]UpdateProjectDataCache200ApplicationJSONProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                                               `json:"publicSource,omitempty"`
	RootDirectory                    *string                                                             `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                                             `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                                               `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                                               `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *UpdateProjectDataCache200ApplicationJSONSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]UpdateProjectDataCache200ApplicationJSONTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                                              `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                                              `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                                             `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                                             `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *UpdateProjectDataCache200ApplicationJSONTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                                              `json:"updatedAt,omitempty"`
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetAnalytics() *UpdateProjectDataCache200ApplicationJSONAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetCrons() *UpdateProjectDataCache200ApplicationJSONCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetDataCache() *UpdateProjectDataCache200ApplicationJSONDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetEnv() []UpdateProjectDataCache200ApplicationJSONEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetFramework() *UpdateProjectDataCache200ApplicationJSONFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetGitComments() *UpdateProjectDataCache200ApplicationJSONGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetLastAliasRequest() *UpdateProjectDataCache200ApplicationJSONLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetLastRollbackTarget() *UpdateProjectDataCache200ApplicationJSONLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetLatestDeployments() []UpdateProjectDataCache200ApplicationJSONLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetLink() *UpdateProjectDataCache200ApplicationJSONLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetNodeVersion() UpdateProjectDataCache200ApplicationJSONNodeVersion {
	if o == nil {
		return UpdateProjectDataCache200ApplicationJSONNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetPasswordProtection() *UpdateProjectDataCache200ApplicationJSONPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetPermissions() *UpdateProjectDataCache200ApplicationJSONPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetProtectionBypass() map[string]UpdateProjectDataCache200ApplicationJSONProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetSsoProtection() *UpdateProjectDataCache200ApplicationJSONSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTargets() map[string]UpdateProjectDataCache200ApplicationJSONTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTransferCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTransferStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetTrustedIps() *UpdateProjectDataCache200ApplicationJSONTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCache200ApplicationJSON) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                                    *http.Response
	UpdateProjectDataCache200ApplicationJSONObject *UpdateProjectDataCache200ApplicationJSON
}

func (o *UpdateProjectDataCacheResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateProjectDataCacheResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateProjectDataCacheResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateProjectDataCacheResponse) GetUpdateProjectDataCache200ApplicationJSONObject() *UpdateProjectDataCache200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.UpdateProjectDataCache200ApplicationJSONObject
}
