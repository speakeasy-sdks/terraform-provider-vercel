// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

type UserType string

const (
	UserTypeAuthUser        UserType = "AuthUser"
	UserTypeAuthUserLimited UserType = "AuthUserLimited"
)

type User struct {
	AuthUser        *shared.AuthUser
	AuthUserLimited *shared.AuthUserLimited

	Type UserType
}

func CreateUserAuthUser(authUser shared.AuthUser) User {
	typ := UserTypeAuthUser

	return User{
		AuthUser: &authUser,
		Type:     typ,
	}
}

func CreateUserAuthUserLimited(authUserLimited shared.AuthUserLimited) User {
	typ := UserTypeAuthUserLimited

	return User{
		AuthUserLimited: &authUserLimited,
		Type:            typ,
	}
}

func (u *User) UnmarshalJSON(data []byte) error {

	authUserLimited := new(shared.AuthUserLimited)
	if err := utils.UnmarshalJSON(data, &authUserLimited, "", true, true); err == nil {
		u.AuthUserLimited = authUserLimited
		u.Type = UserTypeAuthUserLimited
		return nil
	}

	authUser := new(shared.AuthUser)
	if err := utils.UnmarshalJSON(data, &authUser, "", true, true); err == nil {
		u.AuthUser = authUser
		u.Type = UserTypeAuthUser
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u User) MarshalJSON() ([]byte, error) {
	if u.AuthUser != nil {
		return utils.MarshalJSON(u.AuthUser, "", true)
	}

	if u.AuthUserLimited != nil {
		return utils.MarshalJSON(u.AuthUserLimited, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetAuthUserResponseBody - Successful response.
type GetAuthUserResponseBody struct {
	User User `json:"user"`
}

func (o *GetAuthUserResponseBody) GetUser() User {
	if o == nil {
		return User{}
	}
	return o.User
}

type GetAuthUserResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response.
	Object *GetAuthUserResponseBody
}

func (o *GetAuthUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAuthUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAuthUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAuthUserResponse) GetObject() *GetAuthUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
