// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

type GetAuthUser200ApplicationJSONUserType string

const (
	GetAuthUser200ApplicationJSONUserTypeAuthUser        GetAuthUser200ApplicationJSONUserType = "AuthUser"
	GetAuthUser200ApplicationJSONUserTypeAuthUserLimited GetAuthUser200ApplicationJSONUserType = "AuthUserLimited"
)

type GetAuthUser200ApplicationJSONUser struct {
	AuthUser        *shared.AuthUser
	AuthUserLimited *shared.AuthUserLimited

	Type GetAuthUser200ApplicationJSONUserType
}

func CreateGetAuthUser200ApplicationJSONUserAuthUser(authUser shared.AuthUser) GetAuthUser200ApplicationJSONUser {
	typ := GetAuthUser200ApplicationJSONUserTypeAuthUser

	return GetAuthUser200ApplicationJSONUser{
		AuthUser: &authUser,
		Type:     typ,
	}
}

func CreateGetAuthUser200ApplicationJSONUserAuthUserLimited(authUserLimited shared.AuthUserLimited) GetAuthUser200ApplicationJSONUser {
	typ := GetAuthUser200ApplicationJSONUserTypeAuthUserLimited

	return GetAuthUser200ApplicationJSONUser{
		AuthUserLimited: &authUserLimited,
		Type:            typ,
	}
}

func (u *GetAuthUser200ApplicationJSONUser) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	authUserLimited := new(shared.AuthUserLimited)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authUserLimited); err == nil {
		u.AuthUserLimited = authUserLimited
		u.Type = GetAuthUser200ApplicationJSONUserTypeAuthUserLimited
		return nil
	}

	authUser := new(shared.AuthUser)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&authUser); err == nil {
		u.AuthUser = authUser
		u.Type = GetAuthUser200ApplicationJSONUserTypeAuthUser
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAuthUser200ApplicationJSONUser) MarshalJSON() ([]byte, error) {
	if u.AuthUserLimited != nil {
		return json.Marshal(u.AuthUserLimited)
	}

	if u.AuthUser != nil {
		return json.Marshal(u.AuthUser)
	}

	return nil, nil
}

// GetAuthUser200ApplicationJSON - Successful response.
type GetAuthUser200ApplicationJSON struct {
	User GetAuthUser200ApplicationJSONUser `json:"user"`
}

type GetAuthUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response.
	GetAuthUser200ApplicationJSONObject *GetAuthUser200ApplicationJSON
}
