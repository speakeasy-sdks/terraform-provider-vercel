// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetProjectDomainRequest struct {
	// The project domain name
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetProjectDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectDomainRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectDomainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetProjectDomainRedirectStatusCode int64

const (
	GetProjectDomainRedirectStatusCodeThreeHundredAndSeven GetProjectDomainRedirectStatusCode = 307
	GetProjectDomainRedirectStatusCodeThreeHundredAndOne   GetProjectDomainRedirectStatusCode = 301
	GetProjectDomainRedirectStatusCodeThreeHundredAndTwo   GetProjectDomainRedirectStatusCode = 302
	GetProjectDomainRedirectStatusCodeThreeHundredAndEight GetProjectDomainRedirectStatusCode = 308
)

func (e GetProjectDomainRedirectStatusCode) ToPointer() *GetProjectDomainRedirectStatusCode {
	return &e
}

func (e *GetProjectDomainRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 307:
		fallthrough
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 308:
		*e = GetProjectDomainRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectDomainRedirectStatusCode: %v", v)
	}
}

// GetProjectDomainVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetProjectDomainVerification struct {
	Domain string `json:"domain"`
	Reason string `json:"reason"`
	Type   string `json:"type"`
	Value  string `json:"value"`
}

func (o *GetProjectDomainVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectDomainVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *GetProjectDomainVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetProjectDomainVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectDomainResponseBody struct {
	ApexName           string                              `json:"apexName"`
	CreatedAt          *int64                              `json:"createdAt,omitempty"`
	GitBranch          *string                             `json:"gitBranch,omitempty"`
	Name               string                              `json:"name"`
	ProjectID          string                              `json:"projectId"`
	Redirect           *string                             `json:"redirect,omitempty"`
	RedirectStatusCode *GetProjectDomainRedirectStatusCode `json:"redirectStatusCode,omitempty"`
	UpdatedAt          *int64                              `json:"updatedAt,omitempty"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetProjectDomainVerification `json:"verification,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
}

func (o *GetProjectDomainResponseBody) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetProjectDomainResponseBody) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectDomainResponseBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectDomainResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectDomainResponseBody) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainResponseBody) GetRedirectStatusCode() *GetProjectDomainRedirectStatusCode {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetProjectDomainResponseBody) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectDomainResponseBody) GetVerification() []GetProjectDomainVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

func (o *GetProjectDomainResponseBody) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

type GetProjectDomainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *GetProjectDomainResponseBody
}

func (o *GetProjectDomainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectDomainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectDomainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectDomainResponse) GetObject() *GetProjectDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
