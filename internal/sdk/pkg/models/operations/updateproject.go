// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

// UpdateProjectRequestBodyFramework - The framework that is being used for this project. When `null` is used no framework is selected
type UpdateProjectRequestBodyFramework string

const (
	UpdateProjectRequestBodyFrameworkLessThanNilGreaterThan UpdateProjectRequestBodyFramework = "<nil>"
	UpdateProjectRequestBodyFrameworkBlitzjs                UpdateProjectRequestBodyFramework = "blitzjs"
	UpdateProjectRequestBodyFrameworkNextjs                 UpdateProjectRequestBodyFramework = "nextjs"
	UpdateProjectRequestBodyFrameworkGatsby                 UpdateProjectRequestBodyFramework = "gatsby"
	UpdateProjectRequestBodyFrameworkRemix                  UpdateProjectRequestBodyFramework = "remix"
	UpdateProjectRequestBodyFrameworkAstro                  UpdateProjectRequestBodyFramework = "astro"
	UpdateProjectRequestBodyFrameworkHexo                   UpdateProjectRequestBodyFramework = "hexo"
	UpdateProjectRequestBodyFrameworkEleventy               UpdateProjectRequestBodyFramework = "eleventy"
	UpdateProjectRequestBodyFrameworkDocusaurus2            UpdateProjectRequestBodyFramework = "docusaurus-2"
	UpdateProjectRequestBodyFrameworkDocusaurus             UpdateProjectRequestBodyFramework = "docusaurus"
	UpdateProjectRequestBodyFrameworkPreact                 UpdateProjectRequestBodyFramework = "preact"
	UpdateProjectRequestBodyFrameworkSolidstart             UpdateProjectRequestBodyFramework = "solidstart"
	UpdateProjectRequestBodyFrameworkDojo                   UpdateProjectRequestBodyFramework = "dojo"
	UpdateProjectRequestBodyFrameworkEmber                  UpdateProjectRequestBodyFramework = "ember"
	UpdateProjectRequestBodyFrameworkVue                    UpdateProjectRequestBodyFramework = "vue"
	UpdateProjectRequestBodyFrameworkScully                 UpdateProjectRequestBodyFramework = "scully"
	UpdateProjectRequestBodyFrameworkIonicAngular           UpdateProjectRequestBodyFramework = "ionic-angular"
	UpdateProjectRequestBodyFrameworkAngular                UpdateProjectRequestBodyFramework = "angular"
	UpdateProjectRequestBodyFrameworkPolymer                UpdateProjectRequestBodyFramework = "polymer"
	UpdateProjectRequestBodyFrameworkSvelte                 UpdateProjectRequestBodyFramework = "svelte"
	UpdateProjectRequestBodyFrameworkSveltekit              UpdateProjectRequestBodyFramework = "sveltekit"
	UpdateProjectRequestBodyFrameworkSveltekit1             UpdateProjectRequestBodyFramework = "sveltekit-1"
	UpdateProjectRequestBodyFrameworkIonicReact             UpdateProjectRequestBodyFramework = "ionic-react"
	UpdateProjectRequestBodyFrameworkCreateReactApp         UpdateProjectRequestBodyFramework = "create-react-app"
	UpdateProjectRequestBodyFrameworkGridsome               UpdateProjectRequestBodyFramework = "gridsome"
	UpdateProjectRequestBodyFrameworkUmijs                  UpdateProjectRequestBodyFramework = "umijs"
	UpdateProjectRequestBodyFrameworkSapper                 UpdateProjectRequestBodyFramework = "sapper"
	UpdateProjectRequestBodyFrameworkSaber                  UpdateProjectRequestBodyFramework = "saber"
	UpdateProjectRequestBodyFrameworkStencil                UpdateProjectRequestBodyFramework = "stencil"
	UpdateProjectRequestBodyFrameworkNuxtjs                 UpdateProjectRequestBodyFramework = "nuxtjs"
	UpdateProjectRequestBodyFrameworkRedwoodjs              UpdateProjectRequestBodyFramework = "redwoodjs"
	UpdateProjectRequestBodyFrameworkHugo                   UpdateProjectRequestBodyFramework = "hugo"
	UpdateProjectRequestBodyFrameworkJekyll                 UpdateProjectRequestBodyFramework = "jekyll"
	UpdateProjectRequestBodyFrameworkBrunch                 UpdateProjectRequestBodyFramework = "brunch"
	UpdateProjectRequestBodyFrameworkMiddleman              UpdateProjectRequestBodyFramework = "middleman"
	UpdateProjectRequestBodyFrameworkZola                   UpdateProjectRequestBodyFramework = "zola"
	UpdateProjectRequestBodyFrameworkHydrogen               UpdateProjectRequestBodyFramework = "hydrogen"
	UpdateProjectRequestBodyFrameworkVite                   UpdateProjectRequestBodyFramework = "vite"
	UpdateProjectRequestBodyFrameworkVitepress              UpdateProjectRequestBodyFramework = "vitepress"
	UpdateProjectRequestBodyFrameworkVuepress               UpdateProjectRequestBodyFramework = "vuepress"
	UpdateProjectRequestBodyFrameworkParcel                 UpdateProjectRequestBodyFramework = "parcel"
	UpdateProjectRequestBodyFrameworkSanity                 UpdateProjectRequestBodyFramework = "sanity"
	UpdateProjectRequestBodyFrameworkStorybook              UpdateProjectRequestBodyFramework = "storybook"
)

func (e UpdateProjectRequestBodyFramework) ToPointer() *UpdateProjectRequestBodyFramework {
	return &e
}

func (e *UpdateProjectRequestBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectRequestBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodyFramework: %v", v)
	}
}

type UpdateProjectRequestBodyNodeVersion string

const (
	UpdateProjectRequestBodyNodeVersionEighteenX UpdateProjectRequestBodyNodeVersion = "18.x"
	UpdateProjectRequestBodyNodeVersionSixteenX  UpdateProjectRequestBodyNodeVersion = "16.x"
	UpdateProjectRequestBodyNodeVersionFourteenX UpdateProjectRequestBodyNodeVersion = "14.x"
	UpdateProjectRequestBodyNodeVersionTwelveX   UpdateProjectRequestBodyNodeVersion = "12.x"
	UpdateProjectRequestBodyNodeVersionTenX      UpdateProjectRequestBodyNodeVersion = "10.x"
)

func (e UpdateProjectRequestBodyNodeVersion) ToPointer() *UpdateProjectRequestBodyNodeVersion {
	return &e
}

func (e *UpdateProjectRequestBodyNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectRequestBodyNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodyNodeVersion: %v", v)
	}
}

// UpdateProjectRequestBodyPasswordProtectionDeploymentType - Specify if the password will apply to every Deployment Target or just Preview
type UpdateProjectRequestBodyPasswordProtectionDeploymentType string

const (
	UpdateProjectRequestBodyPasswordProtectionDeploymentTypeAll                              UpdateProjectRequestBodyPasswordProtectionDeploymentType = "all"
	UpdateProjectRequestBodyPasswordProtectionDeploymentTypePreview                          UpdateProjectRequestBodyPasswordProtectionDeploymentType = "preview"
	UpdateProjectRequestBodyPasswordProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectRequestBodyPasswordProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectRequestBodyPasswordProtectionDeploymentType) ToPointer() *UpdateProjectRequestBodyPasswordProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectRequestBodyPasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectRequestBodyPasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodyPasswordProtectionDeploymentType: %v", v)
	}
}

// UpdateProjectRequestBodyPasswordProtection - Allows to protect project deployments with a password
type UpdateProjectRequestBodyPasswordProtection struct {
	// Specify if the password will apply to every Deployment Target or just Preview
	DeploymentType UpdateProjectRequestBodyPasswordProtectionDeploymentType `json:"deploymentType"`
	// The password that will be used to protect Project Deployments
	Password *string `json:"password,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateProjectRequestBodyPasswordProtection UpdateProjectRequestBodyPasswordProtection

func (c *UpdateProjectRequestBodyPasswordProtection) UnmarshalJSON(bs []byte) error {
	data := _UpdateProjectRequestBodyPasswordProtection{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateProjectRequestBodyPasswordProtection(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "deploymentType")
	delete(additionalFields, "password")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateProjectRequestBodyPasswordProtection) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateProjectRequestBodyPasswordProtection(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// UpdateProjectRequestBodySsoProtectionDeploymentType - Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
type UpdateProjectRequestBodySsoProtectionDeploymentType string

const (
	UpdateProjectRequestBodySsoProtectionDeploymentTypeAll                              UpdateProjectRequestBodySsoProtectionDeploymentType = "all"
	UpdateProjectRequestBodySsoProtectionDeploymentTypePreview                          UpdateProjectRequestBodySsoProtectionDeploymentType = "preview"
	UpdateProjectRequestBodySsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectRequestBodySsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectRequestBodySsoProtectionDeploymentType) ToPointer() *UpdateProjectRequestBodySsoProtectionDeploymentType {
	return &e
}

func (e *UpdateProjectRequestBodySsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectRequestBodySsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodySsoProtectionDeploymentType: %v", v)
	}
}

// UpdateProjectRequestBodySsoProtection - Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
type UpdateProjectRequestBodySsoProtection struct {
	// Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
	DeploymentType *UpdateProjectRequestBodySsoProtectionDeploymentType `json:"deploymentType,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateProjectRequestBodySsoProtection UpdateProjectRequestBodySsoProtection

func (c *UpdateProjectRequestBodySsoProtection) UnmarshalJSON(bs []byte) error {
	data := _UpdateProjectRequestBodySsoProtection{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateProjectRequestBodySsoProtection(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "deploymentType")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateProjectRequestBodySsoProtection) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateProjectRequestBodySsoProtection(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type UpdateProjectRequestBodyTrustedIpsAddresses struct {
	// An optional note explaining what the IP address or subnet is used for
	Note *string `json:"note,omitempty"`
	// The IP addresses that are allowlisted. Supported formats are IPv4 and CIDR.
	Value string `json:"value"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateProjectRequestBodyTrustedIpsAddresses UpdateProjectRequestBodyTrustedIpsAddresses

func (c *UpdateProjectRequestBodyTrustedIpsAddresses) UnmarshalJSON(bs []byte) error {
	data := _UpdateProjectRequestBodyTrustedIpsAddresses{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateProjectRequestBodyTrustedIpsAddresses(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "note")
	delete(additionalFields, "value")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateProjectRequestBodyTrustedIpsAddresses) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateProjectRequestBodyTrustedIpsAddresses(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// UpdateProjectRequestBodyTrustedIpsDeploymentType - Specify if the Trusted IPs will apply to every Deployment Target or just Preview
type UpdateProjectRequestBodyTrustedIpsDeploymentType string

const (
	UpdateProjectRequestBodyTrustedIpsDeploymentTypeAll                              UpdateProjectRequestBodyTrustedIpsDeploymentType = "all"
	UpdateProjectRequestBodyTrustedIpsDeploymentTypePreview                          UpdateProjectRequestBodyTrustedIpsDeploymentType = "preview"
	UpdateProjectRequestBodyTrustedIpsDeploymentTypeProduction                       UpdateProjectRequestBodyTrustedIpsDeploymentType = "production"
	UpdateProjectRequestBodyTrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectRequestBodyTrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectRequestBodyTrustedIpsDeploymentType) ToPointer() *UpdateProjectRequestBodyTrustedIpsDeploymentType {
	return &e
}

func (e *UpdateProjectRequestBodyTrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "production":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectRequestBodyTrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodyTrustedIpsDeploymentType: %v", v)
	}
}

// UpdateProjectRequestBodyTrustedIpsProtectionMode - exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
type UpdateProjectRequestBodyTrustedIpsProtectionMode string

const (
	UpdateProjectRequestBodyTrustedIpsProtectionModeExclusive  UpdateProjectRequestBodyTrustedIpsProtectionMode = "exclusive"
	UpdateProjectRequestBodyTrustedIpsProtectionModeAdditional UpdateProjectRequestBodyTrustedIpsProtectionMode = "additional"
)

func (e UpdateProjectRequestBodyTrustedIpsProtectionMode) ToPointer() *UpdateProjectRequestBodyTrustedIpsProtectionMode {
	return &e
}

func (e *UpdateProjectRequestBodyTrustedIpsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = UpdateProjectRequestBodyTrustedIpsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectRequestBodyTrustedIpsProtectionMode: %v", v)
	}
}

// UpdateProjectRequestBodyTrustedIps - Restricts access to deployments based on the incoming request IP address
type UpdateProjectRequestBodyTrustedIps struct {
	Addresses []UpdateProjectRequestBodyTrustedIpsAddresses `json:"addresses"`
	// Specify if the Trusted IPs will apply to every Deployment Target or just Preview
	DeploymentType UpdateProjectRequestBodyTrustedIpsDeploymentType `json:"deploymentType"`
	// exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
	ProtectionMode UpdateProjectRequestBodyTrustedIpsProtectionMode `json:"protectionMode"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateProjectRequestBodyTrustedIps UpdateProjectRequestBodyTrustedIps

func (c *UpdateProjectRequestBodyTrustedIps) UnmarshalJSON(bs []byte) error {
	data := _UpdateProjectRequestBodyTrustedIps{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateProjectRequestBodyTrustedIps(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "addresses")
	delete(additionalFields, "deploymentType")
	delete(additionalFields, "protectionMode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateProjectRequestBodyTrustedIps) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateProjectRequestBodyTrustedIps(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type UpdateProjectRequestBody struct {
	AutoAssignCustomDomains          *bool   `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool   `json:"autoExposeSystemEnvs,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// Specifies whether customer support can see git source for a deployment
	CustomerSupportCodeVisibility *bool `json:"customerSupportCodeVisibility,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand       *string `json:"devCommand,omitempty"`
	DirectoryListing *bool   `json:"directoryListing,omitempty"`
	// Opt-in to Preview comments on the project level
	EnablePreviewFeedback *bool `json:"enablePreviewFeedback,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *UpdateProjectRequestBodyFramework `json:"framework,omitempty"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *bool `json:"gitForkProtection,omitempty"`
	// Specifies whether Git LFS is enabled for this project.
	GitLFS *bool `json:"gitLFS,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name        *string                              `json:"name,omitempty"`
	NodeVersion *UpdateProjectRequestBodyNodeVersion `json:"nodeVersion,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Allows to protect project deployments with a password
	PasswordProtection *UpdateProjectRequestBodyPasswordProtection `json:"passwordProtection,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
	SsoProtection *UpdateProjectRequestBodySsoProtection `json:"ssoProtection,omitempty"`
	// Restricts access to deployments based on the incoming request IP address
	TrustedIps *UpdateProjectRequestBodyTrustedIps `json:"trustedIps,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateProjectRequestBody UpdateProjectRequestBody

func (c *UpdateProjectRequestBody) UnmarshalJSON(bs []byte) error {
	data := _UpdateProjectRequestBody{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateProjectRequestBody(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "autoAssignCustomDomains")
	delete(additionalFields, "autoAssignCustomDomainsUpdatedBy")
	delete(additionalFields, "autoExposeSystemEnvs")
	delete(additionalFields, "buildCommand")
	delete(additionalFields, "commandForIgnoringBuildStep")
	delete(additionalFields, "customerSupportCodeVisibility")
	delete(additionalFields, "devCommand")
	delete(additionalFields, "directoryListing")
	delete(additionalFields, "enablePreviewFeedback")
	delete(additionalFields, "framework")
	delete(additionalFields, "gitForkProtection")
	delete(additionalFields, "gitLFS")
	delete(additionalFields, "installCommand")
	delete(additionalFields, "name")
	delete(additionalFields, "nodeVersion")
	delete(additionalFields, "outputDirectory")
	delete(additionalFields, "passwordProtection")
	delete(additionalFields, "publicSource")
	delete(additionalFields, "rootDirectory")
	delete(additionalFields, "serverlessFunctionRegion")
	delete(additionalFields, "skipGitConnectDuringLink")
	delete(additionalFields, "sourceFilesOutsideRootDirectory")
	delete(additionalFields, "ssoProtection")
	delete(additionalFields, "trustedIps")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateProjectRequestBody) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateProjectRequestBody(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type UpdateProjectRequest struct {
	RequestBody *UpdateProjectRequestBody `request:"mediaType=application/json"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type UpdateProject200ApplicationJSONAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

type UpdateProject200ApplicationJSONCronsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

type UpdateProject200ApplicationJSONCrons struct {
	Definitions []UpdateProject200ApplicationJSONCronsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

type UpdateProject200ApplicationJSONDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

type UpdateProject200ApplicationJSONEnvContentHint12Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint12TypePostgresDatabase UpdateProject200ApplicationJSONEnvContentHint12Type = "postgres-database"
)

func (e UpdateProject200ApplicationJSONEnvContentHint12Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint12Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProject200ApplicationJSONEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint12Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint12 struct {
	StoreID string                                              `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint12Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint11Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint11TypePostgresPassword UpdateProject200ApplicationJSONEnvContentHint11Type = "postgres-password"
)

func (e UpdateProject200ApplicationJSONEnvContentHint11Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint11Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProject200ApplicationJSONEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint11Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint11 struct {
	StoreID string                                              `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint11Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint10Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint10TypePostgresHost UpdateProject200ApplicationJSONEnvContentHint10Type = "postgres-host"
)

func (e UpdateProject200ApplicationJSONEnvContentHint10Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint10Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProject200ApplicationJSONEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint10Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint10 struct {
	StoreID string                                              `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint10Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint9Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint9TypePostgresUser UpdateProject200ApplicationJSONEnvContentHint9Type = "postgres-user"
)

func (e UpdateProject200ApplicationJSONEnvContentHint9Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint9Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProject200ApplicationJSONEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint9Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint9 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint9Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint8Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint8TypePostgresPrismaURL UpdateProject200ApplicationJSONEnvContentHint8Type = "postgres-prisma-url"
)

func (e UpdateProject200ApplicationJSONEnvContentHint8Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint8Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProject200ApplicationJSONEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint8Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint8 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint8Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint7Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint7TypePostgresURLNonPooling UpdateProject200ApplicationJSONEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e UpdateProject200ApplicationJSONEnvContentHint7Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint7Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProject200ApplicationJSONEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint7Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint7 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint7Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint6Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint6TypePostgresURL UpdateProject200ApplicationJSONEnvContentHint6Type = "postgres-url"
)

func (e UpdateProject200ApplicationJSONEnvContentHint6Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint6Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProject200ApplicationJSONEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint6Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint6 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint6Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint5Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint5TypeBlobReadWriteToken UpdateProject200ApplicationJSONEnvContentHint5Type = "blob-read-write-token"
)

func (e UpdateProject200ApplicationJSONEnvContentHint5Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint5Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProject200ApplicationJSONEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint5Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint5 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint5Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint4Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint4TypeRedisRestAPIReadOnlyToken UpdateProject200ApplicationJSONEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e UpdateProject200ApplicationJSONEnvContentHint4Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint4Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProject200ApplicationJSONEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint4Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint4 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint4Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint3Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint3TypeRedisRestAPIToken UpdateProject200ApplicationJSONEnvContentHint3Type = "redis-rest-api-token"
)

func (e UpdateProject200ApplicationJSONEnvContentHint3Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint3Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProject200ApplicationJSONEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint3Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint3 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint3Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint2Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint2TypeRedisRestAPIURL UpdateProject200ApplicationJSONEnvContentHint2Type = "redis-rest-api-url"
)

func (e UpdateProject200ApplicationJSONEnvContentHint2Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint2Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProject200ApplicationJSONEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint2Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint2 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint2Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHint1Type string

const (
	UpdateProject200ApplicationJSONEnvContentHint1TypeRedisURL UpdateProject200ApplicationJSONEnvContentHint1Type = "redis-url"
)

func (e UpdateProject200ApplicationJSONEnvContentHint1Type) ToPointer() *UpdateProject200ApplicationJSONEnvContentHint1Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProject200ApplicationJSONEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvContentHint1Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvContentHint1 struct {
	StoreID string                                             `json:"storeId"`
	Type    UpdateProject200ApplicationJSONEnvContentHint1Type `json:"type"`
}

type UpdateProject200ApplicationJSONEnvContentHintType string

const (
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint1  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_1"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint2  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_2"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint3  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_3"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint4  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_4"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint5  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_5"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint6  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_6"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint7  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_7"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint8  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_8"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint9  UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_9"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint10 UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_10"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint11 UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_11"
	UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint12 UpdateProject200ApplicationJSONEnvContentHintType = "updateProject_200ApplicationJSON_env_contentHint_12"
)

type UpdateProject200ApplicationJSONEnvContentHint struct {
	UpdateProject200ApplicationJSONEnvContentHint1  *UpdateProject200ApplicationJSONEnvContentHint1
	UpdateProject200ApplicationJSONEnvContentHint2  *UpdateProject200ApplicationJSONEnvContentHint2
	UpdateProject200ApplicationJSONEnvContentHint3  *UpdateProject200ApplicationJSONEnvContentHint3
	UpdateProject200ApplicationJSONEnvContentHint4  *UpdateProject200ApplicationJSONEnvContentHint4
	UpdateProject200ApplicationJSONEnvContentHint5  *UpdateProject200ApplicationJSONEnvContentHint5
	UpdateProject200ApplicationJSONEnvContentHint6  *UpdateProject200ApplicationJSONEnvContentHint6
	UpdateProject200ApplicationJSONEnvContentHint7  *UpdateProject200ApplicationJSONEnvContentHint7
	UpdateProject200ApplicationJSONEnvContentHint8  *UpdateProject200ApplicationJSONEnvContentHint8
	UpdateProject200ApplicationJSONEnvContentHint9  *UpdateProject200ApplicationJSONEnvContentHint9
	UpdateProject200ApplicationJSONEnvContentHint10 *UpdateProject200ApplicationJSONEnvContentHint10
	UpdateProject200ApplicationJSONEnvContentHint11 *UpdateProject200ApplicationJSONEnvContentHint11
	UpdateProject200ApplicationJSONEnvContentHint12 *UpdateProject200ApplicationJSONEnvContentHint12

	Type UpdateProject200ApplicationJSONEnvContentHintType
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint1(updateProject200ApplicationJSONEnvContentHint1 UpdateProject200ApplicationJSONEnvContentHint1) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint1

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint1: &updateProject200ApplicationJSONEnvContentHint1,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint2(updateProject200ApplicationJSONEnvContentHint2 UpdateProject200ApplicationJSONEnvContentHint2) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint2

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint2: &updateProject200ApplicationJSONEnvContentHint2,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint3(updateProject200ApplicationJSONEnvContentHint3 UpdateProject200ApplicationJSONEnvContentHint3) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint3

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint3: &updateProject200ApplicationJSONEnvContentHint3,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint4(updateProject200ApplicationJSONEnvContentHint4 UpdateProject200ApplicationJSONEnvContentHint4) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint4

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint4: &updateProject200ApplicationJSONEnvContentHint4,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint5(updateProject200ApplicationJSONEnvContentHint5 UpdateProject200ApplicationJSONEnvContentHint5) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint5

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint5: &updateProject200ApplicationJSONEnvContentHint5,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint6(updateProject200ApplicationJSONEnvContentHint6 UpdateProject200ApplicationJSONEnvContentHint6) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint6

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint6: &updateProject200ApplicationJSONEnvContentHint6,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint7(updateProject200ApplicationJSONEnvContentHint7 UpdateProject200ApplicationJSONEnvContentHint7) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint7

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint7: &updateProject200ApplicationJSONEnvContentHint7,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint8(updateProject200ApplicationJSONEnvContentHint8 UpdateProject200ApplicationJSONEnvContentHint8) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint8

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint8: &updateProject200ApplicationJSONEnvContentHint8,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint9(updateProject200ApplicationJSONEnvContentHint9 UpdateProject200ApplicationJSONEnvContentHint9) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint9

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint9: &updateProject200ApplicationJSONEnvContentHint9,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint10(updateProject200ApplicationJSONEnvContentHint10 UpdateProject200ApplicationJSONEnvContentHint10) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint10

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint10: &updateProject200ApplicationJSONEnvContentHint10,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint11(updateProject200ApplicationJSONEnvContentHint11 UpdateProject200ApplicationJSONEnvContentHint11) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint11

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint11: &updateProject200ApplicationJSONEnvContentHint11,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvContentHintUpdateProject200ApplicationJSONEnvContentHint12(updateProject200ApplicationJSONEnvContentHint12 UpdateProject200ApplicationJSONEnvContentHint12) UpdateProject200ApplicationJSONEnvContentHint {
	typ := UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint12

	return UpdateProject200ApplicationJSONEnvContentHint{
		UpdateProject200ApplicationJSONEnvContentHint12: &updateProject200ApplicationJSONEnvContentHint12,
		Type: typ,
	}
}

func (u *UpdateProject200ApplicationJSONEnvContentHint) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProject200ApplicationJSONEnvContentHint1 := new(UpdateProject200ApplicationJSONEnvContentHint1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint1); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint1 = updateProject200ApplicationJSONEnvContentHint1
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint1
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint2 := new(UpdateProject200ApplicationJSONEnvContentHint2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint2); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint2 = updateProject200ApplicationJSONEnvContentHint2
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint2
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint3 := new(UpdateProject200ApplicationJSONEnvContentHint3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint3); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint3 = updateProject200ApplicationJSONEnvContentHint3
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint3
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint4 := new(UpdateProject200ApplicationJSONEnvContentHint4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint4); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint4 = updateProject200ApplicationJSONEnvContentHint4
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint4
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint5 := new(UpdateProject200ApplicationJSONEnvContentHint5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint5); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint5 = updateProject200ApplicationJSONEnvContentHint5
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint5
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint6 := new(UpdateProject200ApplicationJSONEnvContentHint6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint6); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint6 = updateProject200ApplicationJSONEnvContentHint6
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint6
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint7 := new(UpdateProject200ApplicationJSONEnvContentHint7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint7); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint7 = updateProject200ApplicationJSONEnvContentHint7
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint7
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint8 := new(UpdateProject200ApplicationJSONEnvContentHint8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint8); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint8 = updateProject200ApplicationJSONEnvContentHint8
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint8
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint9 := new(UpdateProject200ApplicationJSONEnvContentHint9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint9); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint9 = updateProject200ApplicationJSONEnvContentHint9
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint9
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint10 := new(UpdateProject200ApplicationJSONEnvContentHint10)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint10); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint10 = updateProject200ApplicationJSONEnvContentHint10
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint10
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint11 := new(UpdateProject200ApplicationJSONEnvContentHint11)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint11); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint11 = updateProject200ApplicationJSONEnvContentHint11
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint11
		return nil
	}

	updateProject200ApplicationJSONEnvContentHint12 := new(UpdateProject200ApplicationJSONEnvContentHint12)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvContentHint12); err == nil {
		u.UpdateProject200ApplicationJSONEnvContentHint12 = updateProject200ApplicationJSONEnvContentHint12
		u.Type = UpdateProject200ApplicationJSONEnvContentHintTypeUpdateProject200ApplicationJSONEnvContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProject200ApplicationJSONEnvContentHint1 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint1)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint2 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint2)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint3 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint3)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint4 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint4)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint5 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint5)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint6 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint6)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint7 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint7)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint8 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint8)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint9 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint9)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint10 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint10)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint11 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint11)
	}

	if u.UpdateProject200ApplicationJSONEnvContentHint12 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvContentHint12)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONEnvTarget2 string

const (
	UpdateProject200ApplicationJSONEnvTarget2Production  UpdateProject200ApplicationJSONEnvTarget2 = "production"
	UpdateProject200ApplicationJSONEnvTarget2Preview     UpdateProject200ApplicationJSONEnvTarget2 = "preview"
	UpdateProject200ApplicationJSONEnvTarget2Development UpdateProject200ApplicationJSONEnvTarget2 = "development"
)

func (e UpdateProject200ApplicationJSONEnvTarget2) ToPointer() *UpdateProject200ApplicationJSONEnvTarget2 {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProject200ApplicationJSONEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvTarget2: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvTarget1 string

const (
	UpdateProject200ApplicationJSONEnvTarget1Production  UpdateProject200ApplicationJSONEnvTarget1 = "production"
	UpdateProject200ApplicationJSONEnvTarget1Preview     UpdateProject200ApplicationJSONEnvTarget1 = "preview"
	UpdateProject200ApplicationJSONEnvTarget1Development UpdateProject200ApplicationJSONEnvTarget1 = "development"
)

func (e UpdateProject200ApplicationJSONEnvTarget1) ToPointer() *UpdateProject200ApplicationJSONEnvTarget1 {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProject200ApplicationJSONEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvTarget1: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnvTargetType string

const (
	UpdateProject200ApplicationJSONEnvTargetTypeArrayOfupdateProject200ApplicationJSONEnvTarget1 UpdateProject200ApplicationJSONEnvTargetType = "arrayOfupdateProject_200ApplicationJSON_env_target_1"
	UpdateProject200ApplicationJSONEnvTargetTypeUpdateProject200ApplicationJSONEnvTarget2        UpdateProject200ApplicationJSONEnvTargetType = "updateProject_200ApplicationJSON_env_target_2"
)

type UpdateProject200ApplicationJSONEnvTarget struct {
	ArrayOfupdateProject200ApplicationJSONEnvTarget1 []UpdateProject200ApplicationJSONEnvTarget1
	UpdateProject200ApplicationJSONEnvTarget2        *UpdateProject200ApplicationJSONEnvTarget2

	Type UpdateProject200ApplicationJSONEnvTargetType
}

func CreateUpdateProject200ApplicationJSONEnvTargetArrayOfupdateProject200ApplicationJSONEnvTarget1(arrayOfupdateProject200ApplicationJSONEnvTarget1 []UpdateProject200ApplicationJSONEnvTarget1) UpdateProject200ApplicationJSONEnvTarget {
	typ := UpdateProject200ApplicationJSONEnvTargetTypeArrayOfupdateProject200ApplicationJSONEnvTarget1

	return UpdateProject200ApplicationJSONEnvTarget{
		ArrayOfupdateProject200ApplicationJSONEnvTarget1: arrayOfupdateProject200ApplicationJSONEnvTarget1,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONEnvTargetUpdateProject200ApplicationJSONEnvTarget2(updateProject200ApplicationJSONEnvTarget2 UpdateProject200ApplicationJSONEnvTarget2) UpdateProject200ApplicationJSONEnvTarget {
	typ := UpdateProject200ApplicationJSONEnvTargetTypeUpdateProject200ApplicationJSONEnvTarget2

	return UpdateProject200ApplicationJSONEnvTarget{
		UpdateProject200ApplicationJSONEnvTarget2: &updateProject200ApplicationJSONEnvTarget2,
		Type: typ,
	}
}

func (u *UpdateProject200ApplicationJSONEnvTarget) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfupdateProject200ApplicationJSONEnvTarget1 := []UpdateProject200ApplicationJSONEnvTarget1{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfupdateProject200ApplicationJSONEnvTarget1); err == nil {
		u.ArrayOfupdateProject200ApplicationJSONEnvTarget1 = arrayOfupdateProject200ApplicationJSONEnvTarget1
		u.Type = UpdateProject200ApplicationJSONEnvTargetTypeArrayOfupdateProject200ApplicationJSONEnvTarget1
		return nil
	}

	updateProject200ApplicationJSONEnvTarget2 := new(UpdateProject200ApplicationJSONEnvTarget2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONEnvTarget2); err == nil {
		u.UpdateProject200ApplicationJSONEnvTarget2 = updateProject200ApplicationJSONEnvTarget2
		u.Type = UpdateProject200ApplicationJSONEnvTargetTypeUpdateProject200ApplicationJSONEnvTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfupdateProject200ApplicationJSONEnvTarget1 != nil {
		return json.Marshal(u.ArrayOfupdateProject200ApplicationJSONEnvTarget1)
	}

	if u.UpdateProject200ApplicationJSONEnvTarget2 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONEnvTarget2)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONEnvType string

const (
	UpdateProject200ApplicationJSONEnvTypeSecret    UpdateProject200ApplicationJSONEnvType = "secret"
	UpdateProject200ApplicationJSONEnvTypeSystem    UpdateProject200ApplicationJSONEnvType = "system"
	UpdateProject200ApplicationJSONEnvTypeEncrypted UpdateProject200ApplicationJSONEnvType = "encrypted"
	UpdateProject200ApplicationJSONEnvTypePlain     UpdateProject200ApplicationJSONEnvType = "plain"
	UpdateProject200ApplicationJSONEnvTypeSensitive UpdateProject200ApplicationJSONEnvType = "sensitive"
)

func (e UpdateProject200ApplicationJSONEnvType) ToPointer() *UpdateProject200ApplicationJSONEnvType {
	return &e
}

func (e *UpdateProject200ApplicationJSONEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProject200ApplicationJSONEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONEnvType: %v", v)
	}
}

type UpdateProject200ApplicationJSONEnv struct {
	ConfigurationID *string                                        `json:"configurationId,omitempty"`
	ContentHint     *UpdateProject200ApplicationJSONEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                         `json:"createdAt,omitempty"`
	CreatedBy       *string                                        `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                     `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                   `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                   `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                   `json:"gitBranch,omitempty"`
	ID                *string                                   `json:"id,omitempty"`
	Key               string                                    `json:"key"`
	Target            *UpdateProject200ApplicationJSONEnvTarget `json:"target,omitempty"`
	Type              UpdateProject200ApplicationJSONEnvType    `json:"type"`
	UpdatedAt         *int64                                    `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                   `json:"updatedBy,omitempty"`
	Value             string                                    `json:"value"`
}

type UpdateProject200ApplicationJSONFramework string

const (
	UpdateProject200ApplicationJSONFrameworkBlitzjs        UpdateProject200ApplicationJSONFramework = "blitzjs"
	UpdateProject200ApplicationJSONFrameworkNextjs         UpdateProject200ApplicationJSONFramework = "nextjs"
	UpdateProject200ApplicationJSONFrameworkGatsby         UpdateProject200ApplicationJSONFramework = "gatsby"
	UpdateProject200ApplicationJSONFrameworkRemix          UpdateProject200ApplicationJSONFramework = "remix"
	UpdateProject200ApplicationJSONFrameworkAstro          UpdateProject200ApplicationJSONFramework = "astro"
	UpdateProject200ApplicationJSONFrameworkHexo           UpdateProject200ApplicationJSONFramework = "hexo"
	UpdateProject200ApplicationJSONFrameworkEleventy       UpdateProject200ApplicationJSONFramework = "eleventy"
	UpdateProject200ApplicationJSONFrameworkDocusaurus2    UpdateProject200ApplicationJSONFramework = "docusaurus-2"
	UpdateProject200ApplicationJSONFrameworkDocusaurus     UpdateProject200ApplicationJSONFramework = "docusaurus"
	UpdateProject200ApplicationJSONFrameworkPreact         UpdateProject200ApplicationJSONFramework = "preact"
	UpdateProject200ApplicationJSONFrameworkSolidstart     UpdateProject200ApplicationJSONFramework = "solidstart"
	UpdateProject200ApplicationJSONFrameworkDojo           UpdateProject200ApplicationJSONFramework = "dojo"
	UpdateProject200ApplicationJSONFrameworkEmber          UpdateProject200ApplicationJSONFramework = "ember"
	UpdateProject200ApplicationJSONFrameworkVue            UpdateProject200ApplicationJSONFramework = "vue"
	UpdateProject200ApplicationJSONFrameworkScully         UpdateProject200ApplicationJSONFramework = "scully"
	UpdateProject200ApplicationJSONFrameworkIonicAngular   UpdateProject200ApplicationJSONFramework = "ionic-angular"
	UpdateProject200ApplicationJSONFrameworkAngular        UpdateProject200ApplicationJSONFramework = "angular"
	UpdateProject200ApplicationJSONFrameworkPolymer        UpdateProject200ApplicationJSONFramework = "polymer"
	UpdateProject200ApplicationJSONFrameworkSvelte         UpdateProject200ApplicationJSONFramework = "svelte"
	UpdateProject200ApplicationJSONFrameworkSveltekit      UpdateProject200ApplicationJSONFramework = "sveltekit"
	UpdateProject200ApplicationJSONFrameworkSveltekit1     UpdateProject200ApplicationJSONFramework = "sveltekit-1"
	UpdateProject200ApplicationJSONFrameworkIonicReact     UpdateProject200ApplicationJSONFramework = "ionic-react"
	UpdateProject200ApplicationJSONFrameworkCreateReactApp UpdateProject200ApplicationJSONFramework = "create-react-app"
	UpdateProject200ApplicationJSONFrameworkGridsome       UpdateProject200ApplicationJSONFramework = "gridsome"
	UpdateProject200ApplicationJSONFrameworkUmijs          UpdateProject200ApplicationJSONFramework = "umijs"
	UpdateProject200ApplicationJSONFrameworkSapper         UpdateProject200ApplicationJSONFramework = "sapper"
	UpdateProject200ApplicationJSONFrameworkSaber          UpdateProject200ApplicationJSONFramework = "saber"
	UpdateProject200ApplicationJSONFrameworkStencil        UpdateProject200ApplicationJSONFramework = "stencil"
	UpdateProject200ApplicationJSONFrameworkNuxtjs         UpdateProject200ApplicationJSONFramework = "nuxtjs"
	UpdateProject200ApplicationJSONFrameworkRedwoodjs      UpdateProject200ApplicationJSONFramework = "redwoodjs"
	UpdateProject200ApplicationJSONFrameworkHugo           UpdateProject200ApplicationJSONFramework = "hugo"
	UpdateProject200ApplicationJSONFrameworkJekyll         UpdateProject200ApplicationJSONFramework = "jekyll"
	UpdateProject200ApplicationJSONFrameworkBrunch         UpdateProject200ApplicationJSONFramework = "brunch"
	UpdateProject200ApplicationJSONFrameworkMiddleman      UpdateProject200ApplicationJSONFramework = "middleman"
	UpdateProject200ApplicationJSONFrameworkZola           UpdateProject200ApplicationJSONFramework = "zola"
	UpdateProject200ApplicationJSONFrameworkHydrogen       UpdateProject200ApplicationJSONFramework = "hydrogen"
	UpdateProject200ApplicationJSONFrameworkVite           UpdateProject200ApplicationJSONFramework = "vite"
	UpdateProject200ApplicationJSONFrameworkVitepress      UpdateProject200ApplicationJSONFramework = "vitepress"
	UpdateProject200ApplicationJSONFrameworkVuepress       UpdateProject200ApplicationJSONFramework = "vuepress"
	UpdateProject200ApplicationJSONFrameworkParcel         UpdateProject200ApplicationJSONFramework = "parcel"
	UpdateProject200ApplicationJSONFrameworkSanity         UpdateProject200ApplicationJSONFramework = "sanity"
	UpdateProject200ApplicationJSONFrameworkStorybook      UpdateProject200ApplicationJSONFramework = "storybook"
)

func (e UpdateProject200ApplicationJSONFramework) ToPointer() *UpdateProject200ApplicationJSONFramework {
	return &e
}

func (e *UpdateProject200ApplicationJSONFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProject200ApplicationJSONFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONFramework: %v", v)
	}
}

type UpdateProject200ApplicationJSONGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

type UpdateProject200ApplicationJSONLastAliasRequestJobStatus string

const (
	UpdateProject200ApplicationJSONLastAliasRequestJobStatusSucceeded  UpdateProject200ApplicationJSONLastAliasRequestJobStatus = "succeeded"
	UpdateProject200ApplicationJSONLastAliasRequestJobStatusFailed     UpdateProject200ApplicationJSONLastAliasRequestJobStatus = "failed"
	UpdateProject200ApplicationJSONLastAliasRequestJobStatusSkipped    UpdateProject200ApplicationJSONLastAliasRequestJobStatus = "skipped"
	UpdateProject200ApplicationJSONLastAliasRequestJobStatusPending    UpdateProject200ApplicationJSONLastAliasRequestJobStatus = "pending"
	UpdateProject200ApplicationJSONLastAliasRequestJobStatusInProgress UpdateProject200ApplicationJSONLastAliasRequestJobStatus = "in-progress"
)

func (e UpdateProject200ApplicationJSONLastAliasRequestJobStatus) ToPointer() *UpdateProject200ApplicationJSONLastAliasRequestJobStatus {
	return &e
}

func (e *UpdateProject200ApplicationJSONLastAliasRequestJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProject200ApplicationJSONLastAliasRequestJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLastAliasRequestJobStatus: %v", v)
	}
}

type UpdateProject200ApplicationJSONLastAliasRequestType string

const (
	UpdateProject200ApplicationJSONLastAliasRequestTypePromote  UpdateProject200ApplicationJSONLastAliasRequestType = "promote"
	UpdateProject200ApplicationJSONLastAliasRequestTypeRollback UpdateProject200ApplicationJSONLastAliasRequestType = "rollback"
)

func (e UpdateProject200ApplicationJSONLastAliasRequestType) ToPointer() *UpdateProject200ApplicationJSONLastAliasRequestType {
	return &e
}

func (e *UpdateProject200ApplicationJSONLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProject200ApplicationJSONLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLastAliasRequestType: %v", v)
	}
}

type UpdateProject200ApplicationJSONLastAliasRequest struct {
	FromDeploymentID string                                                   `json:"fromDeploymentId"`
	JobStatus        UpdateProject200ApplicationJSONLastAliasRequestJobStatus `json:"jobStatus"`
	RequestedAt      int64                                                    `json:"requestedAt"`
	ToDeploymentID   string                                                   `json:"toDeploymentId"`
	Type             UpdateProject200ApplicationJSONLastAliasRequestType      `json:"type"`
}

type UpdateProject200ApplicationJSONLastRollbackTarget struct {
}

type UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedType string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedType = "integer"
	UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedType = "boolean"
)

type UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedType
}

func CreateUpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedInteger(integer int64) UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger

	return UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedBoolean(boolean bool) UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean

	return UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONLatestDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type UpdateProject200ApplicationJSONLatestDeploymentsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

type UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusionSucceeded UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "succeeded"
	UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusionFailed    UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "failed"
	UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusionSkipped   UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "skipped"
	UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusionCanceled  UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "canceled"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeploymentsChecksState string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsChecksStateRegistered UpdateProject200ApplicationJSONLatestDeploymentsChecksState = "registered"
	UpdateProject200ApplicationJSONLatestDeploymentsChecksStateRunning    UpdateProject200ApplicationJSONLatestDeploymentsChecksState = "running"
	UpdateProject200ApplicationJSONLatestDeploymentsChecksStateCompleted  UpdateProject200ApplicationJSONLatestDeploymentsChecksState = "completed"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsChecksState) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsChecksState {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsChecksState: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeploymentsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

type UpdateProject200ApplicationJSONLatestDeploymentsPlan string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsPlanPro        UpdateProject200ApplicationJSONLatestDeploymentsPlan = "pro"
	UpdateProject200ApplicationJSONLatestDeploymentsPlanEnterprise UpdateProject200ApplicationJSONLatestDeploymentsPlan = "enterprise"
	UpdateProject200ApplicationJSONLatestDeploymentsPlanHobby      UpdateProject200ApplicationJSONLatestDeploymentsPlan = "hobby"
	UpdateProject200ApplicationJSONLatestDeploymentsPlanOss        UpdateProject200ApplicationJSONLatestDeploymentsPlan = "oss"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsPlan) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsPlan {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsPlan: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeploymentsReadyState string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateBuilding     UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "BUILDING"
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateError        UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "ERROR"
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateInitializing UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "INITIALIZING"
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateQueued       UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "QUEUED"
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateReady        UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "READY"
	UpdateProject200ApplicationJSONLatestDeploymentsReadyStateCanceled     UpdateProject200ApplicationJSONLatestDeploymentsReadyState = "CANCELED"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsReadyState) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsReadyState {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsReadyState: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsReadySubstateStaged   UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate = "STAGED"
	UpdateProject200ApplicationJSONLatestDeploymentsReadySubstatePromoted UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate = "PROMOTED"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeploymentsType string

const (
	UpdateProject200ApplicationJSONLatestDeploymentsTypeLambdas UpdateProject200ApplicationJSONLatestDeploymentsType = "LAMBDAS"
)

func (e UpdateProject200ApplicationJSONLatestDeploymentsType) ToPointer() *UpdateProject200ApplicationJSONLatestDeploymentsType {
	return &e
}

func (e *UpdateProject200ApplicationJSONLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProject200ApplicationJSONLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLatestDeploymentsType: %v", v)
	}
}

type UpdateProject200ApplicationJSONLatestDeployments struct {
	Alias                  []string                                                          `json:"alias,omitempty"`
	AliasAssigned          *UpdateProject200ApplicationJSONLatestDeploymentsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProject200ApplicationJSONLatestDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                           `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                          `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                            `json:"buildingAt,omitempty"`
	Builds                 []UpdateProject200ApplicationJSONLatestDeploymentsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProject200ApplicationJSONLatestDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProject200ApplicationJSONLatestDeploymentsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                             `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                           `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                             `json:"createdAt"`
	CreatedIn              string                                                            `json:"createdIn"`
	Creator                *UpdateProject200ApplicationJSONLatestDeploymentsCreator          `json:"creator"`
	DeploymentHostname     string                                                            `json:"deploymentHostname"`
	Forced                 *bool                                                             `json:"forced,omitempty"`
	ID                     string                                                            `json:"id"`
	Meta                   map[string]string                                                 `json:"meta,omitempty"`
	MonorepoManager        *string                                                           `json:"monorepoManager,omitempty"`
	Name                   string                                                            `json:"name"`
	Plan                   UpdateProject200ApplicationJSONLatestDeploymentsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                          `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                           `json:"private"`
	ReadyAt                *int64                                                         `json:"readyAt,omitempty"`
	ReadyState             UpdateProject200ApplicationJSONLatestDeploymentsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProject200ApplicationJSONLatestDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                         `json:"requestedAt,omitempty"`
	Target                 *string                                                        `json:"target,omitempty"`
	TeamID                 *string                                                        `json:"teamId,omitempty"`
	Type                   UpdateProject200ApplicationJSONLatestDeploymentsType           `json:"type"`
	URL                    string                                                         `json:"url"`
	UserID                 string                                                         `json:"userId"`
	WithCache              *bool                                                          `json:"withCache,omitempty"`
}

type UpdateProject200ApplicationJSONLink3DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProject200ApplicationJSONLink3Type string

const (
	UpdateProject200ApplicationJSONLink3TypeBitbucket UpdateProject200ApplicationJSONLink3Type = "bitbucket"
)

func (e UpdateProject200ApplicationJSONLink3Type) ToPointer() *UpdateProject200ApplicationJSONLink3Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProject200ApplicationJSONLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLink3Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONLink3 struct {
	CreatedAt        *int64                                            `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProject200ApplicationJSONLink3DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                           `json:"gitCredentialId,omitempty"`
	Name             *string                                           `json:"name,omitempty"`
	Owner            *string                                           `json:"owner,omitempty"`
	ProductionBranch *string                                           `json:"productionBranch,omitempty"`
	Slug             *string                                           `json:"slug,omitempty"`
	Sourceless       *bool                                             `json:"sourceless,omitempty"`
	Type             *UpdateProject200ApplicationJSONLink3Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                            `json:"updatedAt,omitempty"`
	UUID             *string                                           `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                           `json:"workspaceUuid,omitempty"`
}

type UpdateProject200ApplicationJSONLink2DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProject200ApplicationJSONLink2Type string

const (
	UpdateProject200ApplicationJSONLink2TypeGitlab UpdateProject200ApplicationJSONLink2Type = "gitlab"
)

func (e UpdateProject200ApplicationJSONLink2Type) ToPointer() *UpdateProject200ApplicationJSONLink2Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProject200ApplicationJSONLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLink2Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONLink2 struct {
	CreatedAt                *int64                                            `json:"createdAt,omitempty"`
	DeployHooks              []UpdateProject200ApplicationJSONLink2DeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                           `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                           `json:"productionBranch,omitempty"`
	ProjectID                *string                                           `json:"projectId,omitempty"`
	ProjectName              *string                                           `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                           `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                           `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                           `json:"projectUrl,omitempty"`
	Sourceless               *bool                                             `json:"sourceless,omitempty"`
	Type                     *UpdateProject200ApplicationJSONLink2Type         `json:"type,omitempty"`
	UpdatedAt                *int64                                            `json:"updatedAt,omitempty"`
}

type UpdateProject200ApplicationJSONLink1DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

type UpdateProject200ApplicationJSONLink1Type string

const (
	UpdateProject200ApplicationJSONLink1TypeGithub UpdateProject200ApplicationJSONLink1Type = "github"
)

func (e UpdateProject200ApplicationJSONLink1Type) ToPointer() *UpdateProject200ApplicationJSONLink1Type {
	return &e
}

func (e *UpdateProject200ApplicationJSONLink1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProject200ApplicationJSONLink1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONLink1Type: %v", v)
	}
}

type UpdateProject200ApplicationJSONLink1 struct {
	CreatedAt        *int64                                            `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProject200ApplicationJSONLink1DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                           `json:"gitCredentialId,omitempty"`
	Org              *string                                           `json:"org,omitempty"`
	ProductionBranch *string                                           `json:"productionBranch,omitempty"`
	Repo             *string                                           `json:"repo,omitempty"`
	RepoID           *int64                                            `json:"repoId,omitempty"`
	Sourceless       *bool                                             `json:"sourceless,omitempty"`
	Type             *UpdateProject200ApplicationJSONLink1Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                            `json:"updatedAt,omitempty"`
}

type UpdateProject200ApplicationJSONLinkType string

const (
	UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink1 UpdateProject200ApplicationJSONLinkType = "updateProject_200ApplicationJSON_link_1"
	UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink2 UpdateProject200ApplicationJSONLinkType = "updateProject_200ApplicationJSON_link_2"
	UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink3 UpdateProject200ApplicationJSONLinkType = "updateProject_200ApplicationJSON_link_3"
)

type UpdateProject200ApplicationJSONLink struct {
	UpdateProject200ApplicationJSONLink1 *UpdateProject200ApplicationJSONLink1
	UpdateProject200ApplicationJSONLink2 *UpdateProject200ApplicationJSONLink2
	UpdateProject200ApplicationJSONLink3 *UpdateProject200ApplicationJSONLink3

	Type UpdateProject200ApplicationJSONLinkType
}

func CreateUpdateProject200ApplicationJSONLinkUpdateProject200ApplicationJSONLink1(updateProject200ApplicationJSONLink1 UpdateProject200ApplicationJSONLink1) UpdateProject200ApplicationJSONLink {
	typ := UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink1

	return UpdateProject200ApplicationJSONLink{
		UpdateProject200ApplicationJSONLink1: &updateProject200ApplicationJSONLink1,
		Type:                                 typ,
	}
}

func CreateUpdateProject200ApplicationJSONLinkUpdateProject200ApplicationJSONLink2(updateProject200ApplicationJSONLink2 UpdateProject200ApplicationJSONLink2) UpdateProject200ApplicationJSONLink {
	typ := UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink2

	return UpdateProject200ApplicationJSONLink{
		UpdateProject200ApplicationJSONLink2: &updateProject200ApplicationJSONLink2,
		Type:                                 typ,
	}
}

func CreateUpdateProject200ApplicationJSONLinkUpdateProject200ApplicationJSONLink3(updateProject200ApplicationJSONLink3 UpdateProject200ApplicationJSONLink3) UpdateProject200ApplicationJSONLink {
	typ := UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink3

	return UpdateProject200ApplicationJSONLink{
		UpdateProject200ApplicationJSONLink3: &updateProject200ApplicationJSONLink3,
		Type:                                 typ,
	}
}

func (u *UpdateProject200ApplicationJSONLink) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProject200ApplicationJSONLink1 := new(UpdateProject200ApplicationJSONLink1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONLink1); err == nil {
		u.UpdateProject200ApplicationJSONLink1 = updateProject200ApplicationJSONLink1
		u.Type = UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink1
		return nil
	}

	updateProject200ApplicationJSONLink2 := new(UpdateProject200ApplicationJSONLink2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONLink2); err == nil {
		u.UpdateProject200ApplicationJSONLink2 = updateProject200ApplicationJSONLink2
		u.Type = UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink2
		return nil
	}

	updateProject200ApplicationJSONLink3 := new(UpdateProject200ApplicationJSONLink3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONLink3); err == nil {
		u.UpdateProject200ApplicationJSONLink3 = updateProject200ApplicationJSONLink3
		u.Type = UpdateProject200ApplicationJSONLinkTypeUpdateProject200ApplicationJSONLink3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProject200ApplicationJSONLink1 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONLink1)
	}

	if u.UpdateProject200ApplicationJSONLink2 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONLink2)
	}

	if u.UpdateProject200ApplicationJSONLink3 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONLink3)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONNodeVersion string

const (
	UpdateProject200ApplicationJSONNodeVersionEighteenX UpdateProject200ApplicationJSONNodeVersion = "18.x"
	UpdateProject200ApplicationJSONNodeVersionSixteenX  UpdateProject200ApplicationJSONNodeVersion = "16.x"
	UpdateProject200ApplicationJSONNodeVersionFourteenX UpdateProject200ApplicationJSONNodeVersion = "14.x"
	UpdateProject200ApplicationJSONNodeVersionTwelveX   UpdateProject200ApplicationJSONNodeVersion = "12.x"
	UpdateProject200ApplicationJSONNodeVersionTenX      UpdateProject200ApplicationJSONNodeVersion = "10.x"
)

func (e UpdateProject200ApplicationJSONNodeVersion) ToPointer() *UpdateProject200ApplicationJSONNodeVersion {
	return &e
}

func (e *UpdateProject200ApplicationJSONNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProject200ApplicationJSONNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONNodeVersion: %v", v)
	}
}

type UpdateProject200ApplicationJSONPasswordProtection struct {
}

type UpdateProject200ApplicationJSONPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

type UpdateProject200ApplicationJSONProtectionBypass2Access string

const (
	UpdateProject200ApplicationJSONProtectionBypass2AccessRequested UpdateProject200ApplicationJSONProtectionBypass2Access = "requested"
	UpdateProject200ApplicationJSONProtectionBypass2AccessGranted   UpdateProject200ApplicationJSONProtectionBypass2Access = "granted"
)

func (e UpdateProject200ApplicationJSONProtectionBypass2Access) ToPointer() *UpdateProject200ApplicationJSONProtectionBypass2Access {
	return &e
}

func (e *UpdateProject200ApplicationJSONProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = UpdateProject200ApplicationJSONProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONProtectionBypass2Access: %v", v)
	}
}

type UpdateProject200ApplicationJSONProtectionBypass2Scope string

const (
	UpdateProject200ApplicationJSONProtectionBypass2ScopeUser UpdateProject200ApplicationJSONProtectionBypass2Scope = "user"
)

func (e UpdateProject200ApplicationJSONProtectionBypass2Scope) ToPointer() *UpdateProject200ApplicationJSONProtectionBypass2Scope {
	return &e
}

func (e *UpdateProject200ApplicationJSONProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = UpdateProject200ApplicationJSONProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONProtectionBypass2Scope: %v", v)
	}
}

type UpdateProject200ApplicationJSONProtectionBypass2 struct {
	Access        UpdateProject200ApplicationJSONProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                  `json:"createdAt"`
	LastUpdatedAt int64                                                  `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                 `json:"lastUpdatedBy"`
	Scope         UpdateProject200ApplicationJSONProtectionBypass2Scope  `json:"scope"`
}

type UpdateProject200ApplicationJSONProtectionBypass1Scope string

const (
	UpdateProject200ApplicationJSONProtectionBypass1ScopeShareableLink    UpdateProject200ApplicationJSONProtectionBypass1Scope = "shareable-link"
	UpdateProject200ApplicationJSONProtectionBypass1ScopeAutomationBypass UpdateProject200ApplicationJSONProtectionBypass1Scope = "automation-bypass"
)

func (e UpdateProject200ApplicationJSONProtectionBypass1Scope) ToPointer() *UpdateProject200ApplicationJSONProtectionBypass1Scope {
	return &e
}

func (e *UpdateProject200ApplicationJSONProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = UpdateProject200ApplicationJSONProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONProtectionBypass1Scope: %v", v)
	}
}

type UpdateProject200ApplicationJSONProtectionBypass1 struct {
	CreatedAt int64                                                 `json:"createdAt"`
	CreatedBy string                                                `json:"createdBy"`
	Scope     UpdateProject200ApplicationJSONProtectionBypass1Scope `json:"scope"`
}

type UpdateProject200ApplicationJSONProtectionBypassType string

const (
	UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass1 UpdateProject200ApplicationJSONProtectionBypassType = "updateProject_200ApplicationJSON_protectionBypass_1"
	UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass2 UpdateProject200ApplicationJSONProtectionBypassType = "updateProject_200ApplicationJSON_protectionBypass_2"
)

type UpdateProject200ApplicationJSONProtectionBypass struct {
	UpdateProject200ApplicationJSONProtectionBypass1 *UpdateProject200ApplicationJSONProtectionBypass1
	UpdateProject200ApplicationJSONProtectionBypass2 *UpdateProject200ApplicationJSONProtectionBypass2

	Type UpdateProject200ApplicationJSONProtectionBypassType
}

func CreateUpdateProject200ApplicationJSONProtectionBypassUpdateProject200ApplicationJSONProtectionBypass1(updateProject200ApplicationJSONProtectionBypass1 UpdateProject200ApplicationJSONProtectionBypass1) UpdateProject200ApplicationJSONProtectionBypass {
	typ := UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass1

	return UpdateProject200ApplicationJSONProtectionBypass{
		UpdateProject200ApplicationJSONProtectionBypass1: &updateProject200ApplicationJSONProtectionBypass1,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONProtectionBypassUpdateProject200ApplicationJSONProtectionBypass2(updateProject200ApplicationJSONProtectionBypass2 UpdateProject200ApplicationJSONProtectionBypass2) UpdateProject200ApplicationJSONProtectionBypass {
	typ := UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass2

	return UpdateProject200ApplicationJSONProtectionBypass{
		UpdateProject200ApplicationJSONProtectionBypass2: &updateProject200ApplicationJSONProtectionBypass2,
		Type: typ,
	}
}

func (u *UpdateProject200ApplicationJSONProtectionBypass) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProject200ApplicationJSONProtectionBypass1 := new(UpdateProject200ApplicationJSONProtectionBypass1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONProtectionBypass1); err == nil {
		u.UpdateProject200ApplicationJSONProtectionBypass1 = updateProject200ApplicationJSONProtectionBypass1
		u.Type = UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass1
		return nil
	}

	updateProject200ApplicationJSONProtectionBypass2 := new(UpdateProject200ApplicationJSONProtectionBypass2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONProtectionBypass2); err == nil {
		u.UpdateProject200ApplicationJSONProtectionBypass2 = updateProject200ApplicationJSONProtectionBypass2
		u.Type = UpdateProject200ApplicationJSONProtectionBypassTypeUpdateProject200ApplicationJSONProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.UpdateProject200ApplicationJSONProtectionBypass1 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONProtectionBypass1)
	}

	if u.UpdateProject200ApplicationJSONProtectionBypass2 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONProtectionBypass2)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONSsoProtectionDeploymentType string

const (
	UpdateProject200ApplicationJSONSsoProtectionDeploymentTypeAll                              UpdateProject200ApplicationJSONSsoProtectionDeploymentType = "all"
	UpdateProject200ApplicationJSONSsoProtectionDeploymentTypePreview                          UpdateProject200ApplicationJSONSsoProtectionDeploymentType = "preview"
	UpdateProject200ApplicationJSONSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProject200ApplicationJSONSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProject200ApplicationJSONSsoProtectionDeploymentType) ToPointer() *UpdateProject200ApplicationJSONSsoProtectionDeploymentType {
	return &e
}

func (e *UpdateProject200ApplicationJSONSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProject200ApplicationJSONSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONSsoProtectionDeploymentType: %v", v)
	}
}

type UpdateProject200ApplicationJSONSsoProtection struct {
	DeploymentType UpdateProject200ApplicationJSONSsoProtectionDeploymentType `json:"deploymentType"`
}

type UpdateProject200ApplicationJSONTargetsAliasAssignedType string

const (
	UpdateProject200ApplicationJSONTargetsAliasAssignedTypeInteger UpdateProject200ApplicationJSONTargetsAliasAssignedType = "integer"
	UpdateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean UpdateProject200ApplicationJSONTargetsAliasAssignedType = "boolean"
)

type UpdateProject200ApplicationJSONTargetsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type UpdateProject200ApplicationJSONTargetsAliasAssignedType
}

func CreateUpdateProject200ApplicationJSONTargetsAliasAssignedInteger(integer int64) UpdateProject200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProject200ApplicationJSONTargetsAliasAssignedTypeInteger

	return UpdateProject200ApplicationJSONTargetsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateUpdateProject200ApplicationJSONTargetsAliasAssignedBoolean(boolean bool) UpdateProject200ApplicationJSONTargetsAliasAssigned {
	typ := UpdateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean

	return UpdateProject200ApplicationJSONTargetsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProject200ApplicationJSONTargetsAliasAssigned) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = UpdateProject200ApplicationJSONTargetsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = UpdateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONTargetsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

type UpdateProject200ApplicationJSONTargetsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type UpdateProject200ApplicationJSONTargetsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

type UpdateProject200ApplicationJSONTargetsChecksConclusion string

const (
	UpdateProject200ApplicationJSONTargetsChecksConclusionSucceeded UpdateProject200ApplicationJSONTargetsChecksConclusion = "succeeded"
	UpdateProject200ApplicationJSONTargetsChecksConclusionFailed    UpdateProject200ApplicationJSONTargetsChecksConclusion = "failed"
	UpdateProject200ApplicationJSONTargetsChecksConclusionSkipped   UpdateProject200ApplicationJSONTargetsChecksConclusion = "skipped"
	UpdateProject200ApplicationJSONTargetsChecksConclusionCanceled  UpdateProject200ApplicationJSONTargetsChecksConclusion = "canceled"
)

func (e UpdateProject200ApplicationJSONTargetsChecksConclusion) ToPointer() *UpdateProject200ApplicationJSONTargetsChecksConclusion {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProject200ApplicationJSONTargetsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsChecksConclusion: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargetsChecksState string

const (
	UpdateProject200ApplicationJSONTargetsChecksStateRegistered UpdateProject200ApplicationJSONTargetsChecksState = "registered"
	UpdateProject200ApplicationJSONTargetsChecksStateRunning    UpdateProject200ApplicationJSONTargetsChecksState = "running"
	UpdateProject200ApplicationJSONTargetsChecksStateCompleted  UpdateProject200ApplicationJSONTargetsChecksState = "completed"
)

func (e UpdateProject200ApplicationJSONTargetsChecksState) ToPointer() *UpdateProject200ApplicationJSONTargetsChecksState {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProject200ApplicationJSONTargetsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsChecksState: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargetsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

type UpdateProject200ApplicationJSONTargetsPlan string

const (
	UpdateProject200ApplicationJSONTargetsPlanPro        UpdateProject200ApplicationJSONTargetsPlan = "pro"
	UpdateProject200ApplicationJSONTargetsPlanEnterprise UpdateProject200ApplicationJSONTargetsPlan = "enterprise"
	UpdateProject200ApplicationJSONTargetsPlanHobby      UpdateProject200ApplicationJSONTargetsPlan = "hobby"
	UpdateProject200ApplicationJSONTargetsPlanOss        UpdateProject200ApplicationJSONTargetsPlan = "oss"
)

func (e UpdateProject200ApplicationJSONTargetsPlan) ToPointer() *UpdateProject200ApplicationJSONTargetsPlan {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = UpdateProject200ApplicationJSONTargetsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsPlan: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargetsReadyState string

const (
	UpdateProject200ApplicationJSONTargetsReadyStateBuilding     UpdateProject200ApplicationJSONTargetsReadyState = "BUILDING"
	UpdateProject200ApplicationJSONTargetsReadyStateError        UpdateProject200ApplicationJSONTargetsReadyState = "ERROR"
	UpdateProject200ApplicationJSONTargetsReadyStateInitializing UpdateProject200ApplicationJSONTargetsReadyState = "INITIALIZING"
	UpdateProject200ApplicationJSONTargetsReadyStateQueued       UpdateProject200ApplicationJSONTargetsReadyState = "QUEUED"
	UpdateProject200ApplicationJSONTargetsReadyStateReady        UpdateProject200ApplicationJSONTargetsReadyState = "READY"
	UpdateProject200ApplicationJSONTargetsReadyStateCanceled     UpdateProject200ApplicationJSONTargetsReadyState = "CANCELED"
)

func (e UpdateProject200ApplicationJSONTargetsReadyState) ToPointer() *UpdateProject200ApplicationJSONTargetsReadyState {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProject200ApplicationJSONTargetsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsReadyState: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargetsReadySubstate string

const (
	UpdateProject200ApplicationJSONTargetsReadySubstateStaged   UpdateProject200ApplicationJSONTargetsReadySubstate = "STAGED"
	UpdateProject200ApplicationJSONTargetsReadySubstatePromoted UpdateProject200ApplicationJSONTargetsReadySubstate = "PROMOTED"
)

func (e UpdateProject200ApplicationJSONTargetsReadySubstate) ToPointer() *UpdateProject200ApplicationJSONTargetsReadySubstate {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProject200ApplicationJSONTargetsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsReadySubstate: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargetsType string

const (
	UpdateProject200ApplicationJSONTargetsTypeLambdas UpdateProject200ApplicationJSONTargetsType = "LAMBDAS"
)

func (e UpdateProject200ApplicationJSONTargetsType) ToPointer() *UpdateProject200ApplicationJSONTargetsType {
	return &e
}

func (e *UpdateProject200ApplicationJSONTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProject200ApplicationJSONTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTargetsType: %v", v)
	}
}

type UpdateProject200ApplicationJSONTargets struct {
	Alias                  []string                                                `json:"alias,omitempty"`
	AliasAssigned          *UpdateProject200ApplicationJSONTargetsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProject200ApplicationJSONTargetsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                 `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                  `json:"buildingAt,omitempty"`
	Builds                 []UpdateProject200ApplicationJSONTargetsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProject200ApplicationJSONTargetsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProject200ApplicationJSONTargetsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                   `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                 `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                   `json:"createdAt"`
	CreatedIn              string                                                  `json:"createdIn"`
	Creator                *UpdateProject200ApplicationJSONTargetsCreator          `json:"creator"`
	DeploymentHostname     string                                                  `json:"deploymentHostname"`
	Forced                 *bool                                                   `json:"forced,omitempty"`
	ID                     string                                                  `json:"id"`
	Meta                   map[string]string                                       `json:"meta,omitempty"`
	MonorepoManager        *string                                                 `json:"monorepoManager,omitempty"`
	Name                   string                                                  `json:"name"`
	Plan                   UpdateProject200ApplicationJSONTargetsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                 `json:"private"`
	ReadyAt                *int64                                               `json:"readyAt,omitempty"`
	ReadyState             UpdateProject200ApplicationJSONTargetsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProject200ApplicationJSONTargetsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                               `json:"requestedAt,omitempty"`
	Target                 *string                                              `json:"target,omitempty"`
	TeamID                 *string                                              `json:"teamId,omitempty"`
	Type                   UpdateProject200ApplicationJSONTargetsType           `json:"type"`
	URL                    string                                               `json:"url"`
	UserID                 string                                               `json:"userId"`
	WithCache              *bool                                                `json:"withCache,omitempty"`
}

type UpdateProject200ApplicationJSONTrustedIps2DeploymentType string

const (
	UpdateProject200ApplicationJSONTrustedIps2DeploymentTypeAll                              UpdateProject200ApplicationJSONTrustedIps2DeploymentType = "all"
	UpdateProject200ApplicationJSONTrustedIps2DeploymentTypePreview                          UpdateProject200ApplicationJSONTrustedIps2DeploymentType = "preview"
	UpdateProject200ApplicationJSONTrustedIps2DeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProject200ApplicationJSONTrustedIps2DeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProject200ApplicationJSONTrustedIps2DeploymentTypeProduction                       UpdateProject200ApplicationJSONTrustedIps2DeploymentType = "production"
)

func (e UpdateProject200ApplicationJSONTrustedIps2DeploymentType) ToPointer() *UpdateProject200ApplicationJSONTrustedIps2DeploymentType {
	return &e
}

func (e *UpdateProject200ApplicationJSONTrustedIps2DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProject200ApplicationJSONTrustedIps2DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTrustedIps2DeploymentType: %v", v)
	}
}

type UpdateProject200ApplicationJSONTrustedIps2 struct {
	DeploymentType UpdateProject200ApplicationJSONTrustedIps2DeploymentType `json:"deploymentType"`
}

type UpdateProject200ApplicationJSONTrustedIps1Addresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

type UpdateProject200ApplicationJSONTrustedIps1DeploymentType string

const (
	UpdateProject200ApplicationJSONTrustedIps1DeploymentTypeAll                              UpdateProject200ApplicationJSONTrustedIps1DeploymentType = "all"
	UpdateProject200ApplicationJSONTrustedIps1DeploymentTypePreview                          UpdateProject200ApplicationJSONTrustedIps1DeploymentType = "preview"
	UpdateProject200ApplicationJSONTrustedIps1DeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProject200ApplicationJSONTrustedIps1DeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProject200ApplicationJSONTrustedIps1DeploymentTypeProduction                       UpdateProject200ApplicationJSONTrustedIps1DeploymentType = "production"
)

func (e UpdateProject200ApplicationJSONTrustedIps1DeploymentType) ToPointer() *UpdateProject200ApplicationJSONTrustedIps1DeploymentType {
	return &e
}

func (e *UpdateProject200ApplicationJSONTrustedIps1DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProject200ApplicationJSONTrustedIps1DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTrustedIps1DeploymentType: %v", v)
	}
}

type UpdateProject200ApplicationJSONTrustedIps1ProtectionMode string

const (
	UpdateProject200ApplicationJSONTrustedIps1ProtectionModeExclusive  UpdateProject200ApplicationJSONTrustedIps1ProtectionMode = "exclusive"
	UpdateProject200ApplicationJSONTrustedIps1ProtectionModeAdditional UpdateProject200ApplicationJSONTrustedIps1ProtectionMode = "additional"
)

func (e UpdateProject200ApplicationJSONTrustedIps1ProtectionMode) ToPointer() *UpdateProject200ApplicationJSONTrustedIps1ProtectionMode {
	return &e
}

func (e *UpdateProject200ApplicationJSONTrustedIps1ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = UpdateProject200ApplicationJSONTrustedIps1ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProject200ApplicationJSONTrustedIps1ProtectionMode: %v", v)
	}
}

type UpdateProject200ApplicationJSONTrustedIps1 struct {
	Addresses      []UpdateProject200ApplicationJSONTrustedIps1Addresses    `json:"addresses"`
	DeploymentType UpdateProject200ApplicationJSONTrustedIps1DeploymentType `json:"deploymentType"`
	ProtectionMode UpdateProject200ApplicationJSONTrustedIps1ProtectionMode `json:"protectionMode"`
}

type UpdateProject200ApplicationJSONTrustedIpsType string

const (
	UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps1 UpdateProject200ApplicationJSONTrustedIpsType = "updateProject_200ApplicationJSON_trustedIps_1"
	UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps2 UpdateProject200ApplicationJSONTrustedIpsType = "updateProject_200ApplicationJSON_trustedIps_2"
)

type UpdateProject200ApplicationJSONTrustedIps struct {
	UpdateProject200ApplicationJSONTrustedIps1 *UpdateProject200ApplicationJSONTrustedIps1
	UpdateProject200ApplicationJSONTrustedIps2 *UpdateProject200ApplicationJSONTrustedIps2

	Type UpdateProject200ApplicationJSONTrustedIpsType
}

func CreateUpdateProject200ApplicationJSONTrustedIpsUpdateProject200ApplicationJSONTrustedIps1(updateProject200ApplicationJSONTrustedIps1 UpdateProject200ApplicationJSONTrustedIps1) UpdateProject200ApplicationJSONTrustedIps {
	typ := UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps1

	return UpdateProject200ApplicationJSONTrustedIps{
		UpdateProject200ApplicationJSONTrustedIps1: &updateProject200ApplicationJSONTrustedIps1,
		Type: typ,
	}
}

func CreateUpdateProject200ApplicationJSONTrustedIpsUpdateProject200ApplicationJSONTrustedIps2(updateProject200ApplicationJSONTrustedIps2 UpdateProject200ApplicationJSONTrustedIps2) UpdateProject200ApplicationJSONTrustedIps {
	typ := UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps2

	return UpdateProject200ApplicationJSONTrustedIps{
		UpdateProject200ApplicationJSONTrustedIps2: &updateProject200ApplicationJSONTrustedIps2,
		Type: typ,
	}
}

func (u *UpdateProject200ApplicationJSONTrustedIps) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateProject200ApplicationJSONTrustedIps2 := new(UpdateProject200ApplicationJSONTrustedIps2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONTrustedIps2); err == nil {
		u.UpdateProject200ApplicationJSONTrustedIps2 = updateProject200ApplicationJSONTrustedIps2
		u.Type = UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps2
		return nil
	}

	updateProject200ApplicationJSONTrustedIps1 := new(UpdateProject200ApplicationJSONTrustedIps1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProject200ApplicationJSONTrustedIps1); err == nil {
		u.UpdateProject200ApplicationJSONTrustedIps1 = updateProject200ApplicationJSONTrustedIps1
		u.Type = UpdateProject200ApplicationJSONTrustedIpsTypeUpdateProject200ApplicationJSONTrustedIps1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateProject200ApplicationJSONTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProject200ApplicationJSONTrustedIps2 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONTrustedIps2)
	}

	if u.UpdateProject200ApplicationJSONTrustedIps1 != nil {
		return json.Marshal(u.UpdateProject200ApplicationJSONTrustedIps1)
	}

	return nil, nil
}

// UpdateProject200ApplicationJSON - The project was successfully updated
type UpdateProject200ApplicationJSON struct {
	AccountID                        string                                                     `json:"accountId"`
	Analytics                        *UpdateProject200ApplicationJSONAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                                      `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                                    `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                                      `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                                    `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                                    `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                                      `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                                    `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                                     `json:"createdAt,omitempty"`
	Crons                            *UpdateProject200ApplicationJSONCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                                      `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *UpdateProject200ApplicationJSONDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                                    `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                                       `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                                      `json:"enablePreviewFeedback,omitempty"`
	Env                              []UpdateProject200ApplicationJSONEnv                       `json:"env,omitempty"`
	Framework                        *UpdateProject200ApplicationJSONFramework                  `json:"framework,omitempty"`
	GitComments                      *UpdateProject200ApplicationJSONGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                                      `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                                      `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                                      `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                                      `json:"hasFloatingAliases,omitempty"`
	ID                               string                                                     `json:"id"`
	InstallCommand                   *string                                                    `json:"installCommand,omitempty"`
	LastAliasRequest                 *UpdateProject200ApplicationJSONLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *UpdateProject200ApplicationJSONLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []UpdateProject200ApplicationJSONLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *UpdateProject200ApplicationJSONLink                       `json:"link,omitempty"`
	Live                             *bool                                                      `json:"live,omitempty"`
	Name                             string                                                     `json:"name"`
	NodeVersion                      UpdateProject200ApplicationJSONNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                                    `json:"outputDirectory,omitempty"`
	PasswordProtection               *UpdateProject200ApplicationJSONPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *UpdateProject200ApplicationJSONPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                                      `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]UpdateProject200ApplicationJSONProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                                      `json:"publicSource,omitempty"`
	RootDirectory                    *string                                                    `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                                    `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                                      `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                                      `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *UpdateProject200ApplicationJSONSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]UpdateProject200ApplicationJSONTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                                     `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                                     `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                                    `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                                    `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *UpdateProject200ApplicationJSONTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                                     `json:"updatedAt,omitempty"`
}

type UpdateProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project was successfully updated
	UpdateProject200ApplicationJSONObject *UpdateProject200ApplicationJSON
}
