// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/utils"
)

type GetProjectEnvRequest struct {
	// The unique ID for the environment variable to get the decrypted value.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetProjectEnv200ApplicationJSONContentHint12Type string

const (
	GetProjectEnv200ApplicationJSONContentHint12TypePostgresDatabase GetProjectEnv200ApplicationJSONContentHint12Type = "postgres-database"
)

func (e GetProjectEnv200ApplicationJSONContentHint12Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint12Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnv200ApplicationJSONContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint12Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint12 struct {
	StoreID string                                           `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint12Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint12) GetType() GetProjectEnv200ApplicationJSONContentHint12Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint12Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint11Type string

const (
	GetProjectEnv200ApplicationJSONContentHint11TypePostgresPassword GetProjectEnv200ApplicationJSONContentHint11Type = "postgres-password"
)

func (e GetProjectEnv200ApplicationJSONContentHint11Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint11Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnv200ApplicationJSONContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint11Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint11 struct {
	StoreID string                                           `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint11Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint11) GetType() GetProjectEnv200ApplicationJSONContentHint11Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint11Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint10Type string

const (
	GetProjectEnv200ApplicationJSONContentHint10TypePostgresHost GetProjectEnv200ApplicationJSONContentHint10Type = "postgres-host"
)

func (e GetProjectEnv200ApplicationJSONContentHint10Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint10Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnv200ApplicationJSONContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint10Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint10 struct {
	StoreID string                                           `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint10Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint10) GetType() GetProjectEnv200ApplicationJSONContentHint10Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint10Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint9Type string

const (
	GetProjectEnv200ApplicationJSONContentHint9TypePostgresUser GetProjectEnv200ApplicationJSONContentHint9Type = "postgres-user"
)

func (e GetProjectEnv200ApplicationJSONContentHint9Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint9Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnv200ApplicationJSONContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint9Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint9 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint9Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint9) GetType() GetProjectEnv200ApplicationJSONContentHint9Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint9Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint8Type string

const (
	GetProjectEnv200ApplicationJSONContentHint8TypePostgresPrismaURL GetProjectEnv200ApplicationJSONContentHint8Type = "postgres-prisma-url"
)

func (e GetProjectEnv200ApplicationJSONContentHint8Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint8Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnv200ApplicationJSONContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint8Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint8 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint8Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint8) GetType() GetProjectEnv200ApplicationJSONContentHint8Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint8Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint7Type string

const (
	GetProjectEnv200ApplicationJSONContentHint7TypePostgresURLNonPooling GetProjectEnv200ApplicationJSONContentHint7Type = "postgres-url-non-pooling"
)

func (e GetProjectEnv200ApplicationJSONContentHint7Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint7Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnv200ApplicationJSONContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint7Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint7 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint7Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint7) GetType() GetProjectEnv200ApplicationJSONContentHint7Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint7Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint6Type string

const (
	GetProjectEnv200ApplicationJSONContentHint6TypePostgresURL GetProjectEnv200ApplicationJSONContentHint6Type = "postgres-url"
)

func (e GetProjectEnv200ApplicationJSONContentHint6Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint6Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnv200ApplicationJSONContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint6Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint6 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint6Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint6) GetType() GetProjectEnv200ApplicationJSONContentHint6Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint6Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint5Type string

const (
	GetProjectEnv200ApplicationJSONContentHint5TypeBlobReadWriteToken GetProjectEnv200ApplicationJSONContentHint5Type = "blob-read-write-token"
)

func (e GetProjectEnv200ApplicationJSONContentHint5Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint5Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnv200ApplicationJSONContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint5Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint5 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint5Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint5) GetType() GetProjectEnv200ApplicationJSONContentHint5Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint5Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint4Type string

const (
	GetProjectEnv200ApplicationJSONContentHint4TypeRedisRestAPIReadOnlyToken GetProjectEnv200ApplicationJSONContentHint4Type = "redis-rest-api-read-only-token"
)

func (e GetProjectEnv200ApplicationJSONContentHint4Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint4Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnv200ApplicationJSONContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint4Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint4 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint4Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint4) GetType() GetProjectEnv200ApplicationJSONContentHint4Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint4Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint3Type string

const (
	GetProjectEnv200ApplicationJSONContentHint3TypeRedisRestAPIToken GetProjectEnv200ApplicationJSONContentHint3Type = "redis-rest-api-token"
)

func (e GetProjectEnv200ApplicationJSONContentHint3Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint3Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnv200ApplicationJSONContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint3Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint3 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint3Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint3) GetType() GetProjectEnv200ApplicationJSONContentHint3Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint3Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint2Type string

const (
	GetProjectEnv200ApplicationJSONContentHint2TypeRedisRestAPIURL GetProjectEnv200ApplicationJSONContentHint2Type = "redis-rest-api-url"
)

func (e GetProjectEnv200ApplicationJSONContentHint2Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint2Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnv200ApplicationJSONContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint2Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint2 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint2Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint2) GetType() GetProjectEnv200ApplicationJSONContentHint2Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint2Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHint1Type string

const (
	GetProjectEnv200ApplicationJSONContentHint1TypeRedisURL GetProjectEnv200ApplicationJSONContentHint1Type = "redis-url"
)

func (e GetProjectEnv200ApplicationJSONContentHint1Type) ToPointer() *GetProjectEnv200ApplicationJSONContentHint1Type {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnv200ApplicationJSONContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONContentHint1Type: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONContentHint1 struct {
	StoreID string                                          `json:"storeId"`
	Type    GetProjectEnv200ApplicationJSONContentHint1Type `json:"type"`
}

func (o *GetProjectEnv200ApplicationJSONContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnv200ApplicationJSONContentHint1) GetType() GetProjectEnv200ApplicationJSONContentHint1Type {
	if o == nil {
		return GetProjectEnv200ApplicationJSONContentHint1Type("")
	}
	return o.Type
}

type GetProjectEnv200ApplicationJSONContentHintType string

const (
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint1  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_1"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint2  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_2"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint3  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_3"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint4  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_4"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint5  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_5"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint6  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_6"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint7  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_7"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint8  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_8"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint9  GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_9"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint10 GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_10"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint11 GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_11"
	GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint12 GetProjectEnv200ApplicationJSONContentHintType = "getProjectEnv_200ApplicationJSON_contentHint_12"
)

type GetProjectEnv200ApplicationJSONContentHint struct {
	GetProjectEnv200ApplicationJSONContentHint1  *GetProjectEnv200ApplicationJSONContentHint1
	GetProjectEnv200ApplicationJSONContentHint2  *GetProjectEnv200ApplicationJSONContentHint2
	GetProjectEnv200ApplicationJSONContentHint3  *GetProjectEnv200ApplicationJSONContentHint3
	GetProjectEnv200ApplicationJSONContentHint4  *GetProjectEnv200ApplicationJSONContentHint4
	GetProjectEnv200ApplicationJSONContentHint5  *GetProjectEnv200ApplicationJSONContentHint5
	GetProjectEnv200ApplicationJSONContentHint6  *GetProjectEnv200ApplicationJSONContentHint6
	GetProjectEnv200ApplicationJSONContentHint7  *GetProjectEnv200ApplicationJSONContentHint7
	GetProjectEnv200ApplicationJSONContentHint8  *GetProjectEnv200ApplicationJSONContentHint8
	GetProjectEnv200ApplicationJSONContentHint9  *GetProjectEnv200ApplicationJSONContentHint9
	GetProjectEnv200ApplicationJSONContentHint10 *GetProjectEnv200ApplicationJSONContentHint10
	GetProjectEnv200ApplicationJSONContentHint11 *GetProjectEnv200ApplicationJSONContentHint11
	GetProjectEnv200ApplicationJSONContentHint12 *GetProjectEnv200ApplicationJSONContentHint12

	Type GetProjectEnv200ApplicationJSONContentHintType
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint1(getProjectEnv200ApplicationJSONContentHint1 GetProjectEnv200ApplicationJSONContentHint1) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint1

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint1: &getProjectEnv200ApplicationJSONContentHint1,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint2(getProjectEnv200ApplicationJSONContentHint2 GetProjectEnv200ApplicationJSONContentHint2) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint2

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint2: &getProjectEnv200ApplicationJSONContentHint2,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint3(getProjectEnv200ApplicationJSONContentHint3 GetProjectEnv200ApplicationJSONContentHint3) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint3

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint3: &getProjectEnv200ApplicationJSONContentHint3,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint4(getProjectEnv200ApplicationJSONContentHint4 GetProjectEnv200ApplicationJSONContentHint4) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint4

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint4: &getProjectEnv200ApplicationJSONContentHint4,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint5(getProjectEnv200ApplicationJSONContentHint5 GetProjectEnv200ApplicationJSONContentHint5) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint5

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint5: &getProjectEnv200ApplicationJSONContentHint5,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint6(getProjectEnv200ApplicationJSONContentHint6 GetProjectEnv200ApplicationJSONContentHint6) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint6

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint6: &getProjectEnv200ApplicationJSONContentHint6,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint7(getProjectEnv200ApplicationJSONContentHint7 GetProjectEnv200ApplicationJSONContentHint7) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint7

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint7: &getProjectEnv200ApplicationJSONContentHint7,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint8(getProjectEnv200ApplicationJSONContentHint8 GetProjectEnv200ApplicationJSONContentHint8) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint8

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint8: &getProjectEnv200ApplicationJSONContentHint8,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint9(getProjectEnv200ApplicationJSONContentHint9 GetProjectEnv200ApplicationJSONContentHint9) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint9

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint9: &getProjectEnv200ApplicationJSONContentHint9,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint10(getProjectEnv200ApplicationJSONContentHint10 GetProjectEnv200ApplicationJSONContentHint10) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint10

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint10: &getProjectEnv200ApplicationJSONContentHint10,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint11(getProjectEnv200ApplicationJSONContentHint11 GetProjectEnv200ApplicationJSONContentHint11) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint11

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint11: &getProjectEnv200ApplicationJSONContentHint11,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONContentHintGetProjectEnv200ApplicationJSONContentHint12(getProjectEnv200ApplicationJSONContentHint12 GetProjectEnv200ApplicationJSONContentHint12) GetProjectEnv200ApplicationJSONContentHint {
	typ := GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint12

	return GetProjectEnv200ApplicationJSONContentHint{
		GetProjectEnv200ApplicationJSONContentHint12: &getProjectEnv200ApplicationJSONContentHint12,
		Type: typ,
	}
}

func (u *GetProjectEnv200ApplicationJSONContentHint) UnmarshalJSON(data []byte) error {

	getProjectEnv200ApplicationJSONContentHint1 := new(GetProjectEnv200ApplicationJSONContentHint1)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint1, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint1 = getProjectEnv200ApplicationJSONContentHint1
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint1
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint2 := new(GetProjectEnv200ApplicationJSONContentHint2)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint2, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint2 = getProjectEnv200ApplicationJSONContentHint2
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint2
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint3 := new(GetProjectEnv200ApplicationJSONContentHint3)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint3, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint3 = getProjectEnv200ApplicationJSONContentHint3
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint3
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint4 := new(GetProjectEnv200ApplicationJSONContentHint4)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint4, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint4 = getProjectEnv200ApplicationJSONContentHint4
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint4
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint5 := new(GetProjectEnv200ApplicationJSONContentHint5)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint5, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint5 = getProjectEnv200ApplicationJSONContentHint5
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint5
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint6 := new(GetProjectEnv200ApplicationJSONContentHint6)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint6, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint6 = getProjectEnv200ApplicationJSONContentHint6
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint6
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint7 := new(GetProjectEnv200ApplicationJSONContentHint7)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint7, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint7 = getProjectEnv200ApplicationJSONContentHint7
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint7
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint8 := new(GetProjectEnv200ApplicationJSONContentHint8)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint8, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint8 = getProjectEnv200ApplicationJSONContentHint8
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint8
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint9 := new(GetProjectEnv200ApplicationJSONContentHint9)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint9, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint9 = getProjectEnv200ApplicationJSONContentHint9
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint9
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint10 := new(GetProjectEnv200ApplicationJSONContentHint10)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint10, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint10 = getProjectEnv200ApplicationJSONContentHint10
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint10
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint11 := new(GetProjectEnv200ApplicationJSONContentHint11)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint11, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint11 = getProjectEnv200ApplicationJSONContentHint11
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint11
		return nil
	}

	getProjectEnv200ApplicationJSONContentHint12 := new(GetProjectEnv200ApplicationJSONContentHint12)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONContentHint12, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONContentHint12 = getProjectEnv200ApplicationJSONContentHint12
		u.Type = GetProjectEnv200ApplicationJSONContentHintTypeGetProjectEnv200ApplicationJSONContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectEnv200ApplicationJSONContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnv200ApplicationJSONContentHint1 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint1, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint2 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint2, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint3 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint3, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint4 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint4, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint5 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint5, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint6 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint6, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint7 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint7, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint8 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint8, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint9 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint9, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint10 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint10, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint11 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint11, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONContentHint12 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectEnv200ApplicationJSONTarget2 string

const (
	GetProjectEnv200ApplicationJSONTarget2Production  GetProjectEnv200ApplicationJSONTarget2 = "production"
	GetProjectEnv200ApplicationJSONTarget2Preview     GetProjectEnv200ApplicationJSONTarget2 = "preview"
	GetProjectEnv200ApplicationJSONTarget2Development GetProjectEnv200ApplicationJSONTarget2 = "development"
)

func (e GetProjectEnv200ApplicationJSONTarget2) ToPointer() *GetProjectEnv200ApplicationJSONTarget2 {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnv200ApplicationJSONTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONTarget2: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONTarget1 string

const (
	GetProjectEnv200ApplicationJSONTarget1Production  GetProjectEnv200ApplicationJSONTarget1 = "production"
	GetProjectEnv200ApplicationJSONTarget1Preview     GetProjectEnv200ApplicationJSONTarget1 = "preview"
	GetProjectEnv200ApplicationJSONTarget1Development GetProjectEnv200ApplicationJSONTarget1 = "development"
)

func (e GetProjectEnv200ApplicationJSONTarget1) ToPointer() *GetProjectEnv200ApplicationJSONTarget1 {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnv200ApplicationJSONTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONTarget1: %v", v)
	}
}

type GetProjectEnv200ApplicationJSONTargetType string

const (
	GetProjectEnv200ApplicationJSONTargetTypeArrayOfgetProjectEnv200ApplicationJSONTarget1 GetProjectEnv200ApplicationJSONTargetType = "arrayOfgetProjectEnv_200ApplicationJSON_target_1"
	GetProjectEnv200ApplicationJSONTargetTypeGetProjectEnv200ApplicationJSONTarget2        GetProjectEnv200ApplicationJSONTargetType = "getProjectEnv_200ApplicationJSON_target_2"
)

type GetProjectEnv200ApplicationJSONTarget struct {
	ArrayOfgetProjectEnv200ApplicationJSONTarget1 []GetProjectEnv200ApplicationJSONTarget1
	GetProjectEnv200ApplicationJSONTarget2        *GetProjectEnv200ApplicationJSONTarget2

	Type GetProjectEnv200ApplicationJSONTargetType
}

func CreateGetProjectEnv200ApplicationJSONTargetArrayOfgetProjectEnv200ApplicationJSONTarget1(arrayOfgetProjectEnv200ApplicationJSONTarget1 []GetProjectEnv200ApplicationJSONTarget1) GetProjectEnv200ApplicationJSONTarget {
	typ := GetProjectEnv200ApplicationJSONTargetTypeArrayOfgetProjectEnv200ApplicationJSONTarget1

	return GetProjectEnv200ApplicationJSONTarget{
		ArrayOfgetProjectEnv200ApplicationJSONTarget1: arrayOfgetProjectEnv200ApplicationJSONTarget1,
		Type: typ,
	}
}

func CreateGetProjectEnv200ApplicationJSONTargetGetProjectEnv200ApplicationJSONTarget2(getProjectEnv200ApplicationJSONTarget2 GetProjectEnv200ApplicationJSONTarget2) GetProjectEnv200ApplicationJSONTarget {
	typ := GetProjectEnv200ApplicationJSONTargetTypeGetProjectEnv200ApplicationJSONTarget2

	return GetProjectEnv200ApplicationJSONTarget{
		GetProjectEnv200ApplicationJSONTarget2: &getProjectEnv200ApplicationJSONTarget2,
		Type:                                   typ,
	}
}

func (u *GetProjectEnv200ApplicationJSONTarget) UnmarshalJSON(data []byte) error {

	arrayOfgetProjectEnv200ApplicationJSONTarget1 := []GetProjectEnv200ApplicationJSONTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetProjectEnv200ApplicationJSONTarget1, "", true, true); err == nil {
		u.ArrayOfgetProjectEnv200ApplicationJSONTarget1 = arrayOfgetProjectEnv200ApplicationJSONTarget1
		u.Type = GetProjectEnv200ApplicationJSONTargetTypeArrayOfgetProjectEnv200ApplicationJSONTarget1
		return nil
	}

	getProjectEnv200ApplicationJSONTarget2 := new(GetProjectEnv200ApplicationJSONTarget2)
	if err := utils.UnmarshalJSON(data, &getProjectEnv200ApplicationJSONTarget2, "", true, true); err == nil {
		u.GetProjectEnv200ApplicationJSONTarget2 = getProjectEnv200ApplicationJSONTarget2
		u.Type = GetProjectEnv200ApplicationJSONTargetTypeGetProjectEnv200ApplicationJSONTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectEnv200ApplicationJSONTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfgetProjectEnv200ApplicationJSONTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfgetProjectEnv200ApplicationJSONTarget1, "", true)
	}

	if u.GetProjectEnv200ApplicationJSONTarget2 != nil {
		return utils.MarshalJSON(u.GetProjectEnv200ApplicationJSONTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectEnv200ApplicationJSONType string

const (
	GetProjectEnv200ApplicationJSONTypeSecret    GetProjectEnv200ApplicationJSONType = "secret"
	GetProjectEnv200ApplicationJSONTypeSystem    GetProjectEnv200ApplicationJSONType = "system"
	GetProjectEnv200ApplicationJSONTypeEncrypted GetProjectEnv200ApplicationJSONType = "encrypted"
	GetProjectEnv200ApplicationJSONTypePlain     GetProjectEnv200ApplicationJSONType = "plain"
	GetProjectEnv200ApplicationJSONTypeSensitive GetProjectEnv200ApplicationJSONType = "sensitive"
)

func (e GetProjectEnv200ApplicationJSONType) ToPointer() *GetProjectEnv200ApplicationJSONType {
	return &e
}

func (e *GetProjectEnv200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjectEnv200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnv200ApplicationJSONType: %v", v)
	}
}

type GetProjectEnv200ApplicationJSON struct {
	ConfigurationID *string                                     `json:"configurationId,omitempty"`
	ContentHint     *GetProjectEnv200ApplicationJSONContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                      `json:"createdAt,omitempty"`
	CreatedBy       *string                                     `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                  `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                `json:"gitBranch,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Key               string                                 `json:"key"`
	Target            *GetProjectEnv200ApplicationJSONTarget `json:"target,omitempty"`
	Type              GetProjectEnv200ApplicationJSONType    `json:"type"`
	UpdatedAt         *int64                                 `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                `json:"updatedBy,omitempty"`
	Value             string                                 `json:"value"`
}

func (o *GetProjectEnv200ApplicationJSON) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnv200ApplicationJSON) GetContentHint() *GetProjectEnv200ApplicationJSONContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnv200ApplicationJSON) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnv200ApplicationJSON) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnv200ApplicationJSON) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectEnv200ApplicationJSON) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnv200ApplicationJSON) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnv200ApplicationJSON) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnv200ApplicationJSON) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnv200ApplicationJSON) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnv200ApplicationJSON) GetTarget() *GetProjectEnv200ApplicationJSONTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnv200ApplicationJSON) GetType() GetProjectEnv200ApplicationJSONType {
	if o == nil {
		return GetProjectEnv200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetProjectEnv200ApplicationJSON) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnv200ApplicationJSON) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnv200ApplicationJSON) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                           *http.Response
	GetProjectEnv200ApplicationJSONObject *GetProjectEnv200ApplicationJSON
}

func (o *GetProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectEnvResponse) GetGetProjectEnv200ApplicationJSONObject() *GetProjectEnv200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetProjectEnv200ApplicationJSONObject
}
