// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateCheckRequestBody struct {
	// Whether the check should block a deployment from succeeding
	Blocking bool `json:"blocking"`
	// URL to display for further details
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// An identifier that can be used as an external reference
	ExternalID *string `json:"externalId,omitempty"`
	// The name of the check being created
	Name string `json:"name"`
	// Path of the page that is being checked
	Path *string `json:"path,omitempty"`
	// Whether a user should be able to request for the check to be rerun if it fails
	Rerequestable *bool `json:"rerequestable,omitempty"`
}

func (o *CreateCheckRequestBody) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *CreateCheckRequestBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *CreateCheckRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateCheckRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCheckRequestBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateCheckRequestBody) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

type CreateCheckRequest struct {
	RequestBody *CreateCheckRequestBody `request:"mediaType=application/json"`
	// The deployment to create the check for.
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateCheckRequest) GetRequestBody() *CreateCheckRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateCheckRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *CreateCheckRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CreateCheck200ApplicationJSONConclusion string

const (
	CreateCheck200ApplicationJSONConclusionCanceled  CreateCheck200ApplicationJSONConclusion = "canceled"
	CreateCheck200ApplicationJSONConclusionFailed    CreateCheck200ApplicationJSONConclusion = "failed"
	CreateCheck200ApplicationJSONConclusionNeutral   CreateCheck200ApplicationJSONConclusion = "neutral"
	CreateCheck200ApplicationJSONConclusionSucceeded CreateCheck200ApplicationJSONConclusion = "succeeded"
	CreateCheck200ApplicationJSONConclusionSkipped   CreateCheck200ApplicationJSONConclusion = "skipped"
	CreateCheck200ApplicationJSONConclusionStale     CreateCheck200ApplicationJSONConclusion = "stale"
)

func (e CreateCheck200ApplicationJSONConclusion) ToPointer() *CreateCheck200ApplicationJSONConclusion {
	return &e
}

func (e *CreateCheck200ApplicationJSONConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		fallthrough
	case "stale":
		*e = CreateCheck200ApplicationJSONConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONConclusion: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsCLSSource string

const (
	CreateCheck200ApplicationJSONOutputMetricsCLSSourceWebVitals CreateCheck200ApplicationJSONOutputMetricsCLSSource = "web-vitals"
)

func (e CreateCheck200ApplicationJSONOutputMetricsCLSSource) ToPointer() *CreateCheck200ApplicationJSONOutputMetricsCLSSource {
	return &e
}

func (e *CreateCheck200ApplicationJSONOutputMetricsCLSSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheck200ApplicationJSONOutputMetricsCLSSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONOutputMetricsCLSSource: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsCLS struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        CreateCheck200ApplicationJSONOutputMetricsCLSSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *CreateCheck200ApplicationJSONOutputMetricsCLS) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheck200ApplicationJSONOutputMetricsCLS) GetSource() CreateCheck200ApplicationJSONOutputMetricsCLSSource {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsCLSSource("")
	}
	return o.Source
}

func (o *CreateCheck200ApplicationJSONOutputMetricsCLS) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheck200ApplicationJSONOutputMetricsFCPSource string

const (
	CreateCheck200ApplicationJSONOutputMetricsFCPSourceWebVitals CreateCheck200ApplicationJSONOutputMetricsFCPSource = "web-vitals"
)

func (e CreateCheck200ApplicationJSONOutputMetricsFCPSource) ToPointer() *CreateCheck200ApplicationJSONOutputMetricsFCPSource {
	return &e
}

func (e *CreateCheck200ApplicationJSONOutputMetricsFCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheck200ApplicationJSONOutputMetricsFCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONOutputMetricsFCPSource: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsFCP struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        CreateCheck200ApplicationJSONOutputMetricsFCPSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *CreateCheck200ApplicationJSONOutputMetricsFCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheck200ApplicationJSONOutputMetricsFCP) GetSource() CreateCheck200ApplicationJSONOutputMetricsFCPSource {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsFCPSource("")
	}
	return o.Source
}

func (o *CreateCheck200ApplicationJSONOutputMetricsFCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheck200ApplicationJSONOutputMetricsLCPSource string

const (
	CreateCheck200ApplicationJSONOutputMetricsLCPSourceWebVitals CreateCheck200ApplicationJSONOutputMetricsLCPSource = "web-vitals"
)

func (e CreateCheck200ApplicationJSONOutputMetricsLCPSource) ToPointer() *CreateCheck200ApplicationJSONOutputMetricsLCPSource {
	return &e
}

func (e *CreateCheck200ApplicationJSONOutputMetricsLCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheck200ApplicationJSONOutputMetricsLCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONOutputMetricsLCPSource: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsLCP struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        CreateCheck200ApplicationJSONOutputMetricsLCPSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *CreateCheck200ApplicationJSONOutputMetricsLCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheck200ApplicationJSONOutputMetricsLCP) GetSource() CreateCheck200ApplicationJSONOutputMetricsLCPSource {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsLCPSource("")
	}
	return o.Source
}

func (o *CreateCheck200ApplicationJSONOutputMetricsLCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheck200ApplicationJSONOutputMetricsTBTSource string

const (
	CreateCheck200ApplicationJSONOutputMetricsTBTSourceWebVitals CreateCheck200ApplicationJSONOutputMetricsTBTSource = "web-vitals"
)

func (e CreateCheck200ApplicationJSONOutputMetricsTBTSource) ToPointer() *CreateCheck200ApplicationJSONOutputMetricsTBTSource {
	return &e
}

func (e *CreateCheck200ApplicationJSONOutputMetricsTBTSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheck200ApplicationJSONOutputMetricsTBTSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONOutputMetricsTBTSource: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsTBT struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        CreateCheck200ApplicationJSONOutputMetricsTBTSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *CreateCheck200ApplicationJSONOutputMetricsTBT) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheck200ApplicationJSONOutputMetricsTBT) GetSource() CreateCheck200ApplicationJSONOutputMetricsTBTSource {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsTBTSource("")
	}
	return o.Source
}

func (o *CreateCheck200ApplicationJSONOutputMetricsTBT) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource string

const (
	CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSourceWebVitals CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource = "web-vitals"
)

func (e CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) ToPointer() *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource {
	return &e
}

func (e *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource: %v", v)
	}
}

type CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore struct {
	PreviousValue *int64                                                                 `json:"previousValue,omitempty"`
	Source        CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource `json:"source"`
	Value         *int64                                                                 `json:"value"`
}

func (o *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetSource() CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource("")
	}
	return o.Source
}

func (o *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheck200ApplicationJSONOutputMetrics struct {
	Cls                    CreateCheck200ApplicationJSONOutputMetricsCLS                     `json:"CLS"`
	Fcp                    CreateCheck200ApplicationJSONOutputMetricsFCP                     `json:"FCP"`
	Lcp                    CreateCheck200ApplicationJSONOutputMetricsLCP                     `json:"LCP"`
	Tbt                    CreateCheck200ApplicationJSONOutputMetricsTBT                     `json:"TBT"`
	VirtualExperienceScore *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore `json:"virtualExperienceScore,omitempty"`
}

func (o *CreateCheck200ApplicationJSONOutputMetrics) GetCls() CreateCheck200ApplicationJSONOutputMetricsCLS {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsCLS{}
	}
	return o.Cls
}

func (o *CreateCheck200ApplicationJSONOutputMetrics) GetFcp() CreateCheck200ApplicationJSONOutputMetricsFCP {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsFCP{}
	}
	return o.Fcp
}

func (o *CreateCheck200ApplicationJSONOutputMetrics) GetLcp() CreateCheck200ApplicationJSONOutputMetricsLCP {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsLCP{}
	}
	return o.Lcp
}

func (o *CreateCheck200ApplicationJSONOutputMetrics) GetTbt() CreateCheck200ApplicationJSONOutputMetricsTBT {
	if o == nil {
		return CreateCheck200ApplicationJSONOutputMetricsTBT{}
	}
	return o.Tbt
}

func (o *CreateCheck200ApplicationJSONOutputMetrics) GetVirtualExperienceScore() *CreateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

type CreateCheck200ApplicationJSONOutput struct {
	Metrics *CreateCheck200ApplicationJSONOutputMetrics `json:"metrics,omitempty"`
}

func (o *CreateCheck200ApplicationJSONOutput) GetMetrics() *CreateCheck200ApplicationJSONOutputMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

type CreateCheck200ApplicationJSONStatus string

const (
	CreateCheck200ApplicationJSONStatusRegistered CreateCheck200ApplicationJSONStatus = "registered"
	CreateCheck200ApplicationJSONStatusRunning    CreateCheck200ApplicationJSONStatus = "running"
	CreateCheck200ApplicationJSONStatusCompleted  CreateCheck200ApplicationJSONStatus = "completed"
)

func (e CreateCheck200ApplicationJSONStatus) ToPointer() *CreateCheck200ApplicationJSONStatus {
	return &e
}

func (e *CreateCheck200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateCheck200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheck200ApplicationJSONStatus: %v", v)
	}
}

type CreateCheck200ApplicationJSON struct {
	Blocking      bool                                     `json:"blocking"`
	CompletedAt   *int64                                   `json:"completedAt,omitempty"`
	Conclusion    *CreateCheck200ApplicationJSONConclusion `json:"conclusion,omitempty"`
	CreatedAt     int64                                    `json:"createdAt"`
	DeploymentID  string                                   `json:"deploymentId"`
	DetailsURL    *string                                  `json:"detailsUrl,omitempty"`
	ExternalID    *string                                  `json:"externalId,omitempty"`
	ID            string                                   `json:"id"`
	IntegrationID string                                   `json:"integrationId"`
	Name          string                                   `json:"name"`
	Output        *CreateCheck200ApplicationJSONOutput     `json:"output,omitempty"`
	Path          *string                                  `json:"path,omitempty"`
	Rerequestable *bool                                    `json:"rerequestable,omitempty"`
	StartedAt     *int64                                   `json:"startedAt,omitempty"`
	Status        CreateCheck200ApplicationJSONStatus      `json:"status"`
	UpdatedAt     int64                                    `json:"updatedAt"`
}

func (o *CreateCheck200ApplicationJSON) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *CreateCheck200ApplicationJSON) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *CreateCheck200ApplicationJSON) GetConclusion() *CreateCheck200ApplicationJSONConclusion {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *CreateCheck200ApplicationJSON) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateCheck200ApplicationJSON) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *CreateCheck200ApplicationJSON) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *CreateCheck200ApplicationJSON) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateCheck200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCheck200ApplicationJSON) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateCheck200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCheck200ApplicationJSON) GetOutput() *CreateCheck200ApplicationJSONOutput {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *CreateCheck200ApplicationJSON) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateCheck200ApplicationJSON) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

func (o *CreateCheck200ApplicationJSON) GetStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *CreateCheck200ApplicationJSON) GetStatus() CreateCheck200ApplicationJSONStatus {
	if o == nil {
		return CreateCheck200ApplicationJSONStatus("")
	}
	return o.Status
}

func (o *CreateCheck200ApplicationJSON) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type CreateCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                         *http.Response
	CreateCheck200ApplicationJSONObject *CreateCheck200ApplicationJSON
}

func (o *CreateCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateCheckResponse) GetCreateCheck200ApplicationJSONObject() *CreateCheck200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateCheck200ApplicationJSONObject
}
