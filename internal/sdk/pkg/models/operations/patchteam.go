// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/models/shared"
	"net/http"
)

// RemoteCaching - Whether or not remote caching is enabled for the team
type RemoteCaching struct {
	// Enable or disable remote caching for the team.
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *RemoteCaching) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type PatchTeamRoles string

const (
	PatchTeamRolesOwner       PatchTeamRoles = "OWNER"
	PatchTeamRolesMember      PatchTeamRoles = "MEMBER"
	PatchTeamRolesViewer      PatchTeamRoles = "VIEWER"
	PatchTeamRolesDeveloper   PatchTeamRoles = "DEVELOPER"
	PatchTeamRolesBilling     PatchTeamRoles = "BILLING"
	PatchTeamRolesContributor PatchTeamRoles = "CONTRIBUTOR"
)

func (e PatchTeamRoles) ToPointer() *PatchTeamRoles {
	return &e
}

func (e *PatchTeamRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = PatchTeamRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchTeamRoles: %v", v)
	}
}

type Saml struct {
	// Require that members of the team use SAML Single Sign-On.
	Enforced *bool                     `json:"enforced,omitempty"`
	Roles    map[string]PatchTeamRoles `json:"roles,omitempty"`
}

func (o *Saml) GetEnforced() *bool {
	if o == nil {
		return nil
	}
	return o.Enforced
}

func (o *Saml) GetRoles() map[string]PatchTeamRoles {
	if o == nil {
		return nil
	}
	return o.Roles
}

type PatchTeamRequestBody struct {
	// The hash value of an uploaded image.
	Avatar *string `json:"avatar,omitempty"`
	// A short text that describes the team.
	Description *string `json:"description,omitempty"`
	EmailDomain *string `json:"emailDomain,omitempty"`
	// Enable preview comments: one of on, off or default.
	EnablePreviewFeedback *string `json:"enablePreviewFeedback,omitempty"`
	// Display or hide IP addresses in Monitoring queries.
	HideIPAddresses *bool `json:"hideIpAddresses,omitempty"`
	// Runs a task that migrates all existing environment variables to sensitive environment variables.
	MigrateExistingEnvVariablesToSensitive *bool `json:"migrateExistingEnvVariablesToSensitive,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// Suffix that will be used for all preview deployments.
	PreviewDeploymentSuffix *string `json:"previewDeploymentSuffix,omitempty"`
	// Create a new invite code and replace the current one.
	RegenerateInviteCode *bool `json:"regenerateInviteCode,omitempty"`
	// Whether or not remote caching is enabled for the team
	RemoteCaching *RemoteCaching `json:"remoteCaching,omitempty"`
	Saml          *Saml          `json:"saml,omitempty"`
	// Sensitive environment variable policy: one of on, off or default.
	SensitiveEnvironmentVariablePolicy *string `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	// A new slug for the team.
	Slug *string `json:"slug,omitempty"`
}

func (o *PatchTeamRequestBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *PatchTeamRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchTeamRequestBody) GetEmailDomain() *string {
	if o == nil {
		return nil
	}
	return o.EmailDomain
}

func (o *PatchTeamRequestBody) GetEnablePreviewFeedback() *string {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *PatchTeamRequestBody) GetHideIPAddresses() *bool {
	if o == nil {
		return nil
	}
	return o.HideIPAddresses
}

func (o *PatchTeamRequestBody) GetMigrateExistingEnvVariablesToSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.MigrateExistingEnvVariablesToSensitive
}

func (o *PatchTeamRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchTeamRequestBody) GetPreviewDeploymentSuffix() *string {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *PatchTeamRequestBody) GetRegenerateInviteCode() *bool {
	if o == nil {
		return nil
	}
	return o.RegenerateInviteCode
}

func (o *PatchTeamRequestBody) GetRemoteCaching() *RemoteCaching {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *PatchTeamRequestBody) GetSaml() *Saml {
	if o == nil {
		return nil
	}
	return o.Saml
}

func (o *PatchTeamRequestBody) GetSensitiveEnvironmentVariablePolicy() *string {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *PatchTeamRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type PatchTeamRequest struct {
	RequestBody *PatchTeamRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
}

func (o *PatchTeamRequest) GetRequestBody() *PatchTeamRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *PatchTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

type PatchTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Team        *shared.Team
}

func (o *PatchTeamResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchTeamResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchTeamResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PatchTeamResponse) GetTeam() *shared.Team {
	if o == nil {
		return nil
	}
	return o.Team
}
