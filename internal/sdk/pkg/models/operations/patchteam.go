// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

// PatchTeamRequestBodyRemoteCaching - Whether or not remote caching is enabled for the team
type PatchTeamRequestBodyRemoteCaching struct {
	// Enable or disable remote caching for the team.
	Enabled *bool `json:"enabled,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _PatchTeamRequestBodyRemoteCaching PatchTeamRequestBodyRemoteCaching

func (c *PatchTeamRequestBodyRemoteCaching) UnmarshalJSON(bs []byte) error {
	data := _PatchTeamRequestBodyRemoteCaching{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = PatchTeamRequestBodyRemoteCaching(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "enabled")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c PatchTeamRequestBodyRemoteCaching) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_PatchTeamRequestBodyRemoteCaching(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type PatchTeamRequestBodySamlRoles string

const (
	PatchTeamRequestBodySamlRolesOwner       PatchTeamRequestBodySamlRoles = "OWNER"
	PatchTeamRequestBodySamlRolesMember      PatchTeamRequestBodySamlRoles = "MEMBER"
	PatchTeamRequestBodySamlRolesViewer      PatchTeamRequestBodySamlRoles = "VIEWER"
	PatchTeamRequestBodySamlRolesDeveloper   PatchTeamRequestBodySamlRoles = "DEVELOPER"
	PatchTeamRequestBodySamlRolesBilling     PatchTeamRequestBodySamlRoles = "BILLING"
	PatchTeamRequestBodySamlRolesContributor PatchTeamRequestBodySamlRoles = "CONTRIBUTOR"
)

func (e PatchTeamRequestBodySamlRoles) ToPointer() *PatchTeamRequestBodySamlRoles {
	return &e
}

func (e *PatchTeamRequestBodySamlRoles) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = PatchTeamRequestBodySamlRoles(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchTeamRequestBodySamlRoles: %v", v)
	}
}

type PatchTeamRequestBodySaml struct {
	// Require that members of the team use SAML Single Sign-On.
	Enforced *bool                                    `json:"enforced,omitempty"`
	Roles    map[string]PatchTeamRequestBodySamlRoles `json:"roles,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _PatchTeamRequestBodySaml PatchTeamRequestBodySaml

func (c *PatchTeamRequestBodySaml) UnmarshalJSON(bs []byte) error {
	data := _PatchTeamRequestBodySaml{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = PatchTeamRequestBodySaml(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "enforced")
	delete(additionalFields, "roles")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c PatchTeamRequestBodySaml) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_PatchTeamRequestBodySaml(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type PatchTeamRequestBody struct {
	// The hash value of an uploaded image.
	Avatar *string `json:"avatar,omitempty"`
	// A short text that describes the team.
	Description *string `json:"description,omitempty"`
	EmailDomain *string `json:"emailDomain,omitempty"`
	// Enable preview comments: one of on, off or default.
	EnablePreviewFeedback *string `json:"enablePreviewFeedback,omitempty"`
	// Display or hide IP addresses in Monitoring queries.
	HideIPAddresses *bool `json:"hideIpAddresses,omitempty"`
	// Runs a task that migrates all existing environment variables to sensitive environment variables.
	MigrateExistingEnvVariablesToSensitive *bool `json:"migrateExistingEnvVariablesToSensitive,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// Suffix that will be used for all preview deployments.
	PreviewDeploymentSuffix *string `json:"previewDeploymentSuffix,omitempty"`
	// Create a new invite code and replace the current one.
	RegenerateInviteCode *bool `json:"regenerateInviteCode,omitempty"`
	// Whether or not remote caching is enabled for the team
	RemoteCaching *PatchTeamRequestBodyRemoteCaching `json:"remoteCaching,omitempty"`
	Saml          *PatchTeamRequestBodySaml          `json:"saml,omitempty"`
	// Sensitive environment variable policy: one of on, off or default.
	SensitiveEnvironmentVariablePolicy *string `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	// A new slug for the team.
	Slug *string `json:"slug,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _PatchTeamRequestBody PatchTeamRequestBody

func (c *PatchTeamRequestBody) UnmarshalJSON(bs []byte) error {
	data := _PatchTeamRequestBody{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = PatchTeamRequestBody(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "avatar")
	delete(additionalFields, "description")
	delete(additionalFields, "emailDomain")
	delete(additionalFields, "enablePreviewFeedback")
	delete(additionalFields, "hideIpAddresses")
	delete(additionalFields, "migrateExistingEnvVariablesToSensitive")
	delete(additionalFields, "name")
	delete(additionalFields, "previewDeploymentSuffix")
	delete(additionalFields, "regenerateInviteCode")
	delete(additionalFields, "remoteCaching")
	delete(additionalFields, "saml")
	delete(additionalFields, "sensitiveEnvironmentVariablePolicy")
	delete(additionalFields, "slug")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c PatchTeamRequestBody) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_PatchTeamRequestBody(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type PatchTeamRequest struct {
	RequestBody *PatchTeamRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
}

type PatchTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Team        *shared.Team
}
