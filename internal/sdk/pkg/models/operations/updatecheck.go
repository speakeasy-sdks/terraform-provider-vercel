// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateCheckRequestBodyConclusion - The result of the check being run
type UpdateCheckRequestBodyConclusion string

const (
	UpdateCheckRequestBodyConclusionCanceled  UpdateCheckRequestBodyConclusion = "canceled"
	UpdateCheckRequestBodyConclusionFailed    UpdateCheckRequestBodyConclusion = "failed"
	UpdateCheckRequestBodyConclusionNeutral   UpdateCheckRequestBodyConclusion = "neutral"
	UpdateCheckRequestBodyConclusionSucceeded UpdateCheckRequestBodyConclusion = "succeeded"
	UpdateCheckRequestBodyConclusionSkipped   UpdateCheckRequestBodyConclusion = "skipped"
)

func (e UpdateCheckRequestBodyConclusion) ToPointer() *UpdateCheckRequestBodyConclusion {
	return &e
}

func (e *UpdateCheckRequestBodyConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		*e = UpdateCheckRequestBodyConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyConclusion: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsCLSSource string

const (
	UpdateCheckRequestBodyOutputMetricsCLSSourceWebVitals UpdateCheckRequestBodyOutputMetricsCLSSource = "web-vitals"
)

func (e UpdateCheckRequestBodyOutputMetricsCLSSource) ToPointer() *UpdateCheckRequestBodyOutputMetricsCLSSource {
	return &e
}

func (e *UpdateCheckRequestBodyOutputMetricsCLSSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckRequestBodyOutputMetricsCLSSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyOutputMetricsCLSSource: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsCLS struct {
	// Previous Cumulative Layout Shift value to display a delta
	PreviousValue *int64                                       `json:"previousValue,omitempty"`
	Source        UpdateCheckRequestBodyOutputMetricsCLSSource `json:"source"`
	// Cumulative Layout Shift value
	Value *int64 `json:"value"`
}

func (o *UpdateCheckRequestBodyOutputMetricsCLS) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckRequestBodyOutputMetricsCLS) GetSource() UpdateCheckRequestBodyOutputMetricsCLSSource {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsCLSSource("")
	}
	return o.Source
}

func (o *UpdateCheckRequestBodyOutputMetricsCLS) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheckRequestBodyOutputMetricsFCPSource string

const (
	UpdateCheckRequestBodyOutputMetricsFCPSourceWebVitals UpdateCheckRequestBodyOutputMetricsFCPSource = "web-vitals"
)

func (e UpdateCheckRequestBodyOutputMetricsFCPSource) ToPointer() *UpdateCheckRequestBodyOutputMetricsFCPSource {
	return &e
}

func (e *UpdateCheckRequestBodyOutputMetricsFCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckRequestBodyOutputMetricsFCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyOutputMetricsFCPSource: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsFCP struct {
	// Previous First Contentful Paint value to display a delta
	PreviousValue *int64                                       `json:"previousValue,omitempty"`
	Source        UpdateCheckRequestBodyOutputMetricsFCPSource `json:"source"`
	// First Contentful Paint value
	Value *int64 `json:"value"`
}

func (o *UpdateCheckRequestBodyOutputMetricsFCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckRequestBodyOutputMetricsFCP) GetSource() UpdateCheckRequestBodyOutputMetricsFCPSource {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsFCPSource("")
	}
	return o.Source
}

func (o *UpdateCheckRequestBodyOutputMetricsFCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheckRequestBodyOutputMetricsLCPSource string

const (
	UpdateCheckRequestBodyOutputMetricsLCPSourceWebVitals UpdateCheckRequestBodyOutputMetricsLCPSource = "web-vitals"
)

func (e UpdateCheckRequestBodyOutputMetricsLCPSource) ToPointer() *UpdateCheckRequestBodyOutputMetricsLCPSource {
	return &e
}

func (e *UpdateCheckRequestBodyOutputMetricsLCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckRequestBodyOutputMetricsLCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyOutputMetricsLCPSource: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsLCP struct {
	// Previous Largest Contentful Paint value to display a delta
	PreviousValue *int64                                       `json:"previousValue,omitempty"`
	Source        UpdateCheckRequestBodyOutputMetricsLCPSource `json:"source"`
	// Largest Contentful Paint value
	Value *int64 `json:"value"`
}

func (o *UpdateCheckRequestBodyOutputMetricsLCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckRequestBodyOutputMetricsLCP) GetSource() UpdateCheckRequestBodyOutputMetricsLCPSource {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsLCPSource("")
	}
	return o.Source
}

func (o *UpdateCheckRequestBodyOutputMetricsLCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheckRequestBodyOutputMetricsTBTSource string

const (
	UpdateCheckRequestBodyOutputMetricsTBTSourceWebVitals UpdateCheckRequestBodyOutputMetricsTBTSource = "web-vitals"
)

func (e UpdateCheckRequestBodyOutputMetricsTBTSource) ToPointer() *UpdateCheckRequestBodyOutputMetricsTBTSource {
	return &e
}

func (e *UpdateCheckRequestBodyOutputMetricsTBTSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckRequestBodyOutputMetricsTBTSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyOutputMetricsTBTSource: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsTBT struct {
	// Previous Total Blocking Time value to display a delta
	PreviousValue *int64                                       `json:"previousValue,omitempty"`
	Source        UpdateCheckRequestBodyOutputMetricsTBTSource `json:"source"`
	// Total Blocking Time value
	Value *int64 `json:"value"`
}

func (o *UpdateCheckRequestBodyOutputMetricsTBT) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckRequestBodyOutputMetricsTBT) GetSource() UpdateCheckRequestBodyOutputMetricsTBTSource {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsTBTSource("")
	}
	return o.Source
}

func (o *UpdateCheckRequestBodyOutputMetricsTBT) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource string

const (
	UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSourceWebVitals UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource = "web-vitals"
)

func (e UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource) ToPointer() *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource {
	return &e
}

func (e *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource: %v", v)
	}
}

type UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore struct {
	// A previous Virtual Experience Score value to display a delta, between 0 and 100
	PreviousValue *int64                                                          `json:"previousValue,omitempty"`
	Source        UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource `json:"source"`
	// The calculated Virtual Experience Score value, between 0 and 100
	Value *int64 `json:"value"`
}

func (o *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore) GetSource() UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsVirtualExperienceScoreSource("")
	}
	return o.Source
}

func (o *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

// UpdateCheckRequestBodyOutputMetrics - Metrics about the page
type UpdateCheckRequestBodyOutputMetrics struct {
	Cls                    UpdateCheckRequestBodyOutputMetricsCLS                     `json:"CLS"`
	Fcp                    UpdateCheckRequestBodyOutputMetricsFCP                     `json:"FCP"`
	Lcp                    UpdateCheckRequestBodyOutputMetricsLCP                     `json:"LCP"`
	Tbt                    UpdateCheckRequestBodyOutputMetricsTBT                     `json:"TBT"`
	VirtualExperienceScore *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore `json:"virtualExperienceScore,omitempty"`
}

func (o *UpdateCheckRequestBodyOutputMetrics) GetCls() UpdateCheckRequestBodyOutputMetricsCLS {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsCLS{}
	}
	return o.Cls
}

func (o *UpdateCheckRequestBodyOutputMetrics) GetFcp() UpdateCheckRequestBodyOutputMetricsFCP {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsFCP{}
	}
	return o.Fcp
}

func (o *UpdateCheckRequestBodyOutputMetrics) GetLcp() UpdateCheckRequestBodyOutputMetricsLCP {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsLCP{}
	}
	return o.Lcp
}

func (o *UpdateCheckRequestBodyOutputMetrics) GetTbt() UpdateCheckRequestBodyOutputMetricsTBT {
	if o == nil {
		return UpdateCheckRequestBodyOutputMetricsTBT{}
	}
	return o.Tbt
}

func (o *UpdateCheckRequestBodyOutputMetrics) GetVirtualExperienceScore() *UpdateCheckRequestBodyOutputMetricsVirtualExperienceScore {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

// UpdateCheckRequestBodyOutput - The results of the check Run
type UpdateCheckRequestBodyOutput struct {
	// Metrics about the page
	Metrics *UpdateCheckRequestBodyOutputMetrics `json:"metrics,omitempty"`
}

func (o *UpdateCheckRequestBodyOutput) GetMetrics() *UpdateCheckRequestBodyOutputMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

// UpdateCheckRequestBodyStatus - The current status of the check
type UpdateCheckRequestBodyStatus string

const (
	UpdateCheckRequestBodyStatusRunning   UpdateCheckRequestBodyStatus = "running"
	UpdateCheckRequestBodyStatusCompleted UpdateCheckRequestBodyStatus = "completed"
)

func (e UpdateCheckRequestBodyStatus) ToPointer() *UpdateCheckRequestBodyStatus {
	return &e
}

func (e *UpdateCheckRequestBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "running":
		fallthrough
	case "completed":
		*e = UpdateCheckRequestBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckRequestBodyStatus: %v", v)
	}
}

type UpdateCheckRequestBody struct {
	// The result of the check being run
	Conclusion *UpdateCheckRequestBodyConclusion `json:"conclusion,omitempty"`
	// A URL a user may visit to see more information about the check
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// An identifier that can be used as an external reference
	ExternalID *string `json:"externalId,omitempty"`
	// The name of the check being created
	Name *string `json:"name,omitempty"`
	// The results of the check Run
	Output *UpdateCheckRequestBodyOutput `json:"output,omitempty"`
	// Path of the page that is being checked
	Path *string `json:"path,omitempty"`
	// The current status of the check
	Status *UpdateCheckRequestBodyStatus `json:"status,omitempty"`
}

func (o *UpdateCheckRequestBody) GetConclusion() *UpdateCheckRequestBodyConclusion {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *UpdateCheckRequestBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *UpdateCheckRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *UpdateCheckRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateCheckRequestBody) GetOutput() *UpdateCheckRequestBodyOutput {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *UpdateCheckRequestBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *UpdateCheckRequestBody) GetStatus() *UpdateCheckRequestBodyStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateCheckRequest struct {
	RequestBody *UpdateCheckRequestBody `request:"mediaType=application/json"`
	// The check being updated
	CheckID string `pathParam:"style=simple,explode=false,name=checkId"`
	// The deployment to update the check for.
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *UpdateCheckRequest) GetRequestBody() *UpdateCheckRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateCheckRequest) GetCheckID() string {
	if o == nil {
		return ""
	}
	return o.CheckID
}

func (o *UpdateCheckRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *UpdateCheckRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type UpdateCheck200ApplicationJSONConclusion string

const (
	UpdateCheck200ApplicationJSONConclusionCanceled  UpdateCheck200ApplicationJSONConclusion = "canceled"
	UpdateCheck200ApplicationJSONConclusionFailed    UpdateCheck200ApplicationJSONConclusion = "failed"
	UpdateCheck200ApplicationJSONConclusionNeutral   UpdateCheck200ApplicationJSONConclusion = "neutral"
	UpdateCheck200ApplicationJSONConclusionSucceeded UpdateCheck200ApplicationJSONConclusion = "succeeded"
	UpdateCheck200ApplicationJSONConclusionSkipped   UpdateCheck200ApplicationJSONConclusion = "skipped"
	UpdateCheck200ApplicationJSONConclusionStale     UpdateCheck200ApplicationJSONConclusion = "stale"
)

func (e UpdateCheck200ApplicationJSONConclusion) ToPointer() *UpdateCheck200ApplicationJSONConclusion {
	return &e
}

func (e *UpdateCheck200ApplicationJSONConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		fallthrough
	case "stale":
		*e = UpdateCheck200ApplicationJSONConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONConclusion: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsCLSSource string

const (
	UpdateCheck200ApplicationJSONOutputMetricsCLSSourceWebVitals UpdateCheck200ApplicationJSONOutputMetricsCLSSource = "web-vitals"
)

func (e UpdateCheck200ApplicationJSONOutputMetricsCLSSource) ToPointer() *UpdateCheck200ApplicationJSONOutputMetricsCLSSource {
	return &e
}

func (e *UpdateCheck200ApplicationJSONOutputMetricsCLSSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheck200ApplicationJSONOutputMetricsCLSSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONOutputMetricsCLSSource: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsCLS struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        UpdateCheck200ApplicationJSONOutputMetricsCLSSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsCLS) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsCLS) GetSource() UpdateCheck200ApplicationJSONOutputMetricsCLSSource {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsCLSSource("")
	}
	return o.Source
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsCLS) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheck200ApplicationJSONOutputMetricsFCPSource string

const (
	UpdateCheck200ApplicationJSONOutputMetricsFCPSourceWebVitals UpdateCheck200ApplicationJSONOutputMetricsFCPSource = "web-vitals"
)

func (e UpdateCheck200ApplicationJSONOutputMetricsFCPSource) ToPointer() *UpdateCheck200ApplicationJSONOutputMetricsFCPSource {
	return &e
}

func (e *UpdateCheck200ApplicationJSONOutputMetricsFCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheck200ApplicationJSONOutputMetricsFCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONOutputMetricsFCPSource: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsFCP struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        UpdateCheck200ApplicationJSONOutputMetricsFCPSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsFCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsFCP) GetSource() UpdateCheck200ApplicationJSONOutputMetricsFCPSource {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsFCPSource("")
	}
	return o.Source
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsFCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheck200ApplicationJSONOutputMetricsLCPSource string

const (
	UpdateCheck200ApplicationJSONOutputMetricsLCPSourceWebVitals UpdateCheck200ApplicationJSONOutputMetricsLCPSource = "web-vitals"
)

func (e UpdateCheck200ApplicationJSONOutputMetricsLCPSource) ToPointer() *UpdateCheck200ApplicationJSONOutputMetricsLCPSource {
	return &e
}

func (e *UpdateCheck200ApplicationJSONOutputMetricsLCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheck200ApplicationJSONOutputMetricsLCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONOutputMetricsLCPSource: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsLCP struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        UpdateCheck200ApplicationJSONOutputMetricsLCPSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsLCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsLCP) GetSource() UpdateCheck200ApplicationJSONOutputMetricsLCPSource {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsLCPSource("")
	}
	return o.Source
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsLCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheck200ApplicationJSONOutputMetricsTBTSource string

const (
	UpdateCheck200ApplicationJSONOutputMetricsTBTSourceWebVitals UpdateCheck200ApplicationJSONOutputMetricsTBTSource = "web-vitals"
)

func (e UpdateCheck200ApplicationJSONOutputMetricsTBTSource) ToPointer() *UpdateCheck200ApplicationJSONOutputMetricsTBTSource {
	return &e
}

func (e *UpdateCheck200ApplicationJSONOutputMetricsTBTSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheck200ApplicationJSONOutputMetricsTBTSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONOutputMetricsTBTSource: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsTBT struct {
	PreviousValue *int64                                              `json:"previousValue,omitempty"`
	Source        UpdateCheck200ApplicationJSONOutputMetricsTBTSource `json:"source"`
	Value         *int64                                              `json:"value"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsTBT) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsTBT) GetSource() UpdateCheck200ApplicationJSONOutputMetricsTBTSource {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsTBTSource("")
	}
	return o.Source
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsTBT) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource string

const (
	UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSourceWebVitals UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource = "web-vitals"
)

func (e UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) ToPointer() *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource {
	return &e
}

func (e *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource: %v", v)
	}
}

type UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore struct {
	PreviousValue *int64                                                                 `json:"previousValue,omitempty"`
	Source        UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource `json:"source"`
	Value         *int64                                                                 `json:"value"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetSource() UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource("")
	}
	return o.Source
}

func (o *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateCheck200ApplicationJSONOutputMetrics struct {
	Cls                    UpdateCheck200ApplicationJSONOutputMetricsCLS                     `json:"CLS"`
	Fcp                    UpdateCheck200ApplicationJSONOutputMetricsFCP                     `json:"FCP"`
	Lcp                    UpdateCheck200ApplicationJSONOutputMetricsLCP                     `json:"LCP"`
	Tbt                    UpdateCheck200ApplicationJSONOutputMetricsTBT                     `json:"TBT"`
	VirtualExperienceScore *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore `json:"virtualExperienceScore,omitempty"`
}

func (o *UpdateCheck200ApplicationJSONOutputMetrics) GetCls() UpdateCheck200ApplicationJSONOutputMetricsCLS {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsCLS{}
	}
	return o.Cls
}

func (o *UpdateCheck200ApplicationJSONOutputMetrics) GetFcp() UpdateCheck200ApplicationJSONOutputMetricsFCP {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsFCP{}
	}
	return o.Fcp
}

func (o *UpdateCheck200ApplicationJSONOutputMetrics) GetLcp() UpdateCheck200ApplicationJSONOutputMetricsLCP {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsLCP{}
	}
	return o.Lcp
}

func (o *UpdateCheck200ApplicationJSONOutputMetrics) GetTbt() UpdateCheck200ApplicationJSONOutputMetricsTBT {
	if o == nil {
		return UpdateCheck200ApplicationJSONOutputMetricsTBT{}
	}
	return o.Tbt
}

func (o *UpdateCheck200ApplicationJSONOutputMetrics) GetVirtualExperienceScore() *UpdateCheck200ApplicationJSONOutputMetricsVirtualExperienceScore {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

type UpdateCheck200ApplicationJSONOutput struct {
	Metrics *UpdateCheck200ApplicationJSONOutputMetrics `json:"metrics,omitempty"`
}

func (o *UpdateCheck200ApplicationJSONOutput) GetMetrics() *UpdateCheck200ApplicationJSONOutputMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

type UpdateCheck200ApplicationJSONStatus string

const (
	UpdateCheck200ApplicationJSONStatusRegistered UpdateCheck200ApplicationJSONStatus = "registered"
	UpdateCheck200ApplicationJSONStatusRunning    UpdateCheck200ApplicationJSONStatus = "running"
	UpdateCheck200ApplicationJSONStatusCompleted  UpdateCheck200ApplicationJSONStatus = "completed"
)

func (e UpdateCheck200ApplicationJSONStatus) ToPointer() *UpdateCheck200ApplicationJSONStatus {
	return &e
}

func (e *UpdateCheck200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateCheck200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheck200ApplicationJSONStatus: %v", v)
	}
}

type UpdateCheck200ApplicationJSON struct {
	Blocking      bool                                     `json:"blocking"`
	CompletedAt   *int64                                   `json:"completedAt,omitempty"`
	Conclusion    *UpdateCheck200ApplicationJSONConclusion `json:"conclusion,omitempty"`
	CreatedAt     int64                                    `json:"createdAt"`
	DeploymentID  string                                   `json:"deploymentId"`
	DetailsURL    *string                                  `json:"detailsUrl,omitempty"`
	ExternalID    *string                                  `json:"externalId,omitempty"`
	ID            string                                   `json:"id"`
	IntegrationID string                                   `json:"integrationId"`
	Name          string                                   `json:"name"`
	Output        *UpdateCheck200ApplicationJSONOutput     `json:"output,omitempty"`
	Path          *string                                  `json:"path,omitempty"`
	Rerequestable *bool                                    `json:"rerequestable,omitempty"`
	StartedAt     *int64                                   `json:"startedAt,omitempty"`
	Status        UpdateCheck200ApplicationJSONStatus      `json:"status"`
	UpdatedAt     int64                                    `json:"updatedAt"`
}

func (o *UpdateCheck200ApplicationJSON) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *UpdateCheck200ApplicationJSON) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *UpdateCheck200ApplicationJSON) GetConclusion() *UpdateCheck200ApplicationJSONConclusion {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *UpdateCheck200ApplicationJSON) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *UpdateCheck200ApplicationJSON) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *UpdateCheck200ApplicationJSON) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *UpdateCheck200ApplicationJSON) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *UpdateCheck200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCheck200ApplicationJSON) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateCheck200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateCheck200ApplicationJSON) GetOutput() *UpdateCheck200ApplicationJSONOutput {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *UpdateCheck200ApplicationJSON) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *UpdateCheck200ApplicationJSON) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

func (o *UpdateCheck200ApplicationJSON) GetStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *UpdateCheck200ApplicationJSON) GetStatus() UpdateCheck200ApplicationJSONStatus {
	if o == nil {
		return UpdateCheck200ApplicationJSONStatus("")
	}
	return o.Status
}

func (o *UpdateCheck200ApplicationJSON) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type UpdateCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                         *http.Response
	UpdateCheck200ApplicationJSONObject *UpdateCheck200ApplicationJSON
}

func (o *UpdateCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateCheckResponse) GetUpdateCheck200ApplicationJSONObject() *UpdateCheck200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.UpdateCheck200ApplicationJSONObject
}
