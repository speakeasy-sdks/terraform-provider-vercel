// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetConfigurableLogDrainsRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetConfigurableLogDrainsRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetConfigurableLogDrainsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetConfigurableLogDrainsCreatedFrom string

const (
	GetConfigurableLogDrainsCreatedFromSelfServed GetConfigurableLogDrainsCreatedFrom = "self-served"
)

func (e GetConfigurableLogDrainsCreatedFrom) ToPointer() *GetConfigurableLogDrainsCreatedFrom {
	return &e
}

func (e *GetConfigurableLogDrainsCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetConfigurableLogDrainsCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsCreatedFrom: %v", v)
	}
}

type GetConfigurableLogDrainsDeliveryFormat string

const (
	GetConfigurableLogDrainsDeliveryFormatJSON   GetConfigurableLogDrainsDeliveryFormat = "json"
	GetConfigurableLogDrainsDeliveryFormatNdjson GetConfigurableLogDrainsDeliveryFormat = "ndjson"
	GetConfigurableLogDrainsDeliveryFormatSyslog GetConfigurableLogDrainsDeliveryFormat = "syslog"
)

func (e GetConfigurableLogDrainsDeliveryFormat) ToPointer() *GetConfigurableLogDrainsDeliveryFormat {
	return &e
}

func (e *GetConfigurableLogDrainsDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = GetConfigurableLogDrainsDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsDeliveryFormat: %v", v)
	}
}

type GetConfigurableLogDrainsDisabledReason string

const (
	GetConfigurableLogDrainsDisabledReasonLogDrainHighErrorRate         GetConfigurableLogDrainsDisabledReason = "log-drain-high-error-rate"
	GetConfigurableLogDrainsDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurableLogDrainsDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurableLogDrainsDisabledReasonDisabledByAdmin               GetConfigurableLogDrainsDisabledReason = "disabled-by-admin"
	GetConfigurableLogDrainsDisabledReasonAccountPlanDowngrade          GetConfigurableLogDrainsDisabledReason = "account-plan-downgrade"
)

func (e GetConfigurableLogDrainsDisabledReason) ToPointer() *GetConfigurableLogDrainsDisabledReason {
	return &e
}

func (e *GetConfigurableLogDrainsDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "account-plan-downgrade":
		*e = GetConfigurableLogDrainsDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsDisabledReason: %v", v)
	}
}

type GetConfigurableLogDrainsEnvironment string

const (
	GetConfigurableLogDrainsEnvironmentProduction GetConfigurableLogDrainsEnvironment = "production"
	GetConfigurableLogDrainsEnvironmentPreview    GetConfigurableLogDrainsEnvironment = "preview"
)

func (e GetConfigurableLogDrainsEnvironment) ToPointer() *GetConfigurableLogDrainsEnvironment {
	return &e
}

func (e *GetConfigurableLogDrainsEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetConfigurableLogDrainsEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsEnvironment: %v", v)
	}
}

type GetConfigurableLogDrainsSources string

const (
	GetConfigurableLogDrainsSourcesStatic     GetConfigurableLogDrainsSources = "static"
	GetConfigurableLogDrainsSourcesLambda     GetConfigurableLogDrainsSources = "lambda"
	GetConfigurableLogDrainsSourcesBuild      GetConfigurableLogDrainsSources = "build"
	GetConfigurableLogDrainsSourcesEdge       GetConfigurableLogDrainsSources = "edge"
	GetConfigurableLogDrainsSourcesExternal   GetConfigurableLogDrainsSources = "external"
	GetConfigurableLogDrainsSourcesDeployment GetConfigurableLogDrainsSources = "deployment"
)

func (e GetConfigurableLogDrainsSources) ToPointer() *GetConfigurableLogDrainsSources {
	return &e
}

func (e *GetConfigurableLogDrainsSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "deployment":
		*e = GetConfigurableLogDrainsSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsSources: %v", v)
	}
}

type GetConfigurableLogDrainsStatus string

const (
	GetConfigurableLogDrainsStatusEnabled  GetConfigurableLogDrainsStatus = "enabled"
	GetConfigurableLogDrainsStatusDisabled GetConfigurableLogDrainsStatus = "disabled"
	GetConfigurableLogDrainsStatusErrored  GetConfigurableLogDrainsStatus = "errored"
)

func (e GetConfigurableLogDrainsStatus) ToPointer() *GetConfigurableLogDrainsStatus {
	return &e
}

func (e *GetConfigurableLogDrainsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetConfigurableLogDrainsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainsStatus: %v", v)
	}
}

type GetConfigurableLogDrainsResponseBody struct {
	Branch              *string                                 `json:"branch,omitempty"`
	ClientID            *string                                 `json:"clientId,omitempty"`
	ConfigurationID     *string                                 `json:"configurationId,omitempty"`
	CreatedAt           int64                                   `json:"createdAt"`
	CreatedFrom         *GetConfigurableLogDrainsCreatedFrom    `json:"createdFrom,omitempty"`
	DeliveryFormat      GetConfigurableLogDrainsDeliveryFormat  `json:"deliveryFormat"`
	DisabledAt          *int64                                  `json:"disabledAt,omitempty"`
	DisabledBy          *string                                 `json:"disabledBy,omitempty"`
	DisabledReason      *GetConfigurableLogDrainsDisabledReason `json:"disabledReason,omitempty"`
	Environment         *GetConfigurableLogDrainsEnvironment    `json:"environment,omitempty"`
	FirstErrorTimestamp *int64                                  `json:"firstErrorTimestamp,omitempty"`
	Headers             map[string]string                       `json:"headers,omitempty"`
	ID                  string                                  `json:"id"`
	Name                string                                  `json:"name"`
	OwnerID             string                                  `json:"ownerId"`
	ProjectIds          []string                                `json:"projectIds,omitempty"`
	Secret              string                                  `json:"secret"`
	Sources             []GetConfigurableLogDrainsSources       `json:"sources,omitempty"`
	Status              *GetConfigurableLogDrainsStatus         `json:"status,omitempty"`
	TeamID              *string                                 `json:"teamId,omitempty"`
	URL                 string                                  `json:"url"`
}

func (o *GetConfigurableLogDrainsResponseBody) GetBranch() *string {
	if o == nil {
		return nil
	}
	return o.Branch
}

func (o *GetConfigurableLogDrainsResponseBody) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *GetConfigurableLogDrainsResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetConfigurableLogDrainsResponseBody) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetConfigurableLogDrainsResponseBody) GetCreatedFrom() *GetConfigurableLogDrainsCreatedFrom {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *GetConfigurableLogDrainsResponseBody) GetDeliveryFormat() GetConfigurableLogDrainsDeliveryFormat {
	if o == nil {
		return GetConfigurableLogDrainsDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *GetConfigurableLogDrainsResponseBody) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurableLogDrainsResponseBody) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *GetConfigurableLogDrainsResponseBody) GetDisabledReason() *GetConfigurableLogDrainsDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurableLogDrainsResponseBody) GetEnvironment() *GetConfigurableLogDrainsEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *GetConfigurableLogDrainsResponseBody) GetFirstErrorTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *GetConfigurableLogDrainsResponseBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetConfigurableLogDrainsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurableLogDrainsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetConfigurableLogDrainsResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurableLogDrainsResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *GetConfigurableLogDrainsResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *GetConfigurableLogDrainsResponseBody) GetSources() []GetConfigurableLogDrainsSources {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *GetConfigurableLogDrainsResponseBody) GetStatus() *GetConfigurableLogDrainsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetConfigurableLogDrainsResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurableLogDrainsResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetConfigurableLogDrainsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Classes     []GetConfigurableLogDrainsResponseBody
}

func (o *GetConfigurableLogDrainsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConfigurableLogDrainsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConfigurableLogDrainsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConfigurableLogDrainsResponse) GetClasses() []GetConfigurableLogDrainsResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}
