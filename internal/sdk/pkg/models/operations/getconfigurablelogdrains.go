// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetConfigurableLogDrainsSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetConfigurableLogDrainsRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type GetConfigurableLogDrains200ApplicationJSONCreatedFrom string

const (
	GetConfigurableLogDrains200ApplicationJSONCreatedFromSelfServed GetConfigurableLogDrains200ApplicationJSONCreatedFrom = "self-served"
)

func (e GetConfigurableLogDrains200ApplicationJSONCreatedFrom) ToPointer() *GetConfigurableLogDrains200ApplicationJSONCreatedFrom {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetConfigurableLogDrains200ApplicationJSONCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONCreatedFrom: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSONDeliveryFormat string

const (
	GetConfigurableLogDrains200ApplicationJSONDeliveryFormatJSON   GetConfigurableLogDrains200ApplicationJSONDeliveryFormat = "json"
	GetConfigurableLogDrains200ApplicationJSONDeliveryFormatNdjson GetConfigurableLogDrains200ApplicationJSONDeliveryFormat = "ndjson"
	GetConfigurableLogDrains200ApplicationJSONDeliveryFormatSyslog GetConfigurableLogDrains200ApplicationJSONDeliveryFormat = "syslog"
)

func (e GetConfigurableLogDrains200ApplicationJSONDeliveryFormat) ToPointer() *GetConfigurableLogDrains200ApplicationJSONDeliveryFormat {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = GetConfigurableLogDrains200ApplicationJSONDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONDeliveryFormat: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSONDisabledReason string

const (
	GetConfigurableLogDrains200ApplicationJSONDisabledReasonLogDrainHighErrorRate         GetConfigurableLogDrains200ApplicationJSONDisabledReason = "log-drain-high-error-rate"
	GetConfigurableLogDrains200ApplicationJSONDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurableLogDrains200ApplicationJSONDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurableLogDrains200ApplicationJSONDisabledReasonDisabledByAdmin               GetConfigurableLogDrains200ApplicationJSONDisabledReason = "disabled-by-admin"
	GetConfigurableLogDrains200ApplicationJSONDisabledReasonAccountPlanDowngrade          GetConfigurableLogDrains200ApplicationJSONDisabledReason = "account-plan-downgrade"
)

func (e GetConfigurableLogDrains200ApplicationJSONDisabledReason) ToPointer() *GetConfigurableLogDrains200ApplicationJSONDisabledReason {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "account-plan-downgrade":
		*e = GetConfigurableLogDrains200ApplicationJSONDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONDisabledReason: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSONEnvironment string

const (
	GetConfigurableLogDrains200ApplicationJSONEnvironmentProduction GetConfigurableLogDrains200ApplicationJSONEnvironment = "production"
	GetConfigurableLogDrains200ApplicationJSONEnvironmentPreview    GetConfigurableLogDrains200ApplicationJSONEnvironment = "preview"
)

func (e GetConfigurableLogDrains200ApplicationJSONEnvironment) ToPointer() *GetConfigurableLogDrains200ApplicationJSONEnvironment {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetConfigurableLogDrains200ApplicationJSONEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONEnvironment: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSONSources string

const (
	GetConfigurableLogDrains200ApplicationJSONSourcesStatic     GetConfigurableLogDrains200ApplicationJSONSources = "static"
	GetConfigurableLogDrains200ApplicationJSONSourcesLambda     GetConfigurableLogDrains200ApplicationJSONSources = "lambda"
	GetConfigurableLogDrains200ApplicationJSONSourcesBuild      GetConfigurableLogDrains200ApplicationJSONSources = "build"
	GetConfigurableLogDrains200ApplicationJSONSourcesEdge       GetConfigurableLogDrains200ApplicationJSONSources = "edge"
	GetConfigurableLogDrains200ApplicationJSONSourcesExternal   GetConfigurableLogDrains200ApplicationJSONSources = "external"
	GetConfigurableLogDrains200ApplicationJSONSourcesDeployment GetConfigurableLogDrains200ApplicationJSONSources = "deployment"
)

func (e GetConfigurableLogDrains200ApplicationJSONSources) ToPointer() *GetConfigurableLogDrains200ApplicationJSONSources {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "deployment":
		*e = GetConfigurableLogDrains200ApplicationJSONSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONSources: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSONStatus string

const (
	GetConfigurableLogDrains200ApplicationJSONStatusEnabled  GetConfigurableLogDrains200ApplicationJSONStatus = "enabled"
	GetConfigurableLogDrains200ApplicationJSONStatusDisabled GetConfigurableLogDrains200ApplicationJSONStatus = "disabled"
	GetConfigurableLogDrains200ApplicationJSONStatusErrored  GetConfigurableLogDrains200ApplicationJSONStatus = "errored"
)

func (e GetConfigurableLogDrains200ApplicationJSONStatus) ToPointer() *GetConfigurableLogDrains200ApplicationJSONStatus {
	return &e
}

func (e *GetConfigurableLogDrains200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetConfigurableLogDrains200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrains200ApplicationJSONStatus: %v", v)
	}
}

type GetConfigurableLogDrains200ApplicationJSON struct {
	Branch              *string                                                   `json:"branch,omitempty"`
	ClientID            *string                                                   `json:"clientId,omitempty"`
	ConfigurationID     *string                                                   `json:"configurationId,omitempty"`
	CreatedAt           int64                                                     `json:"createdAt"`
	CreatedFrom         *GetConfigurableLogDrains200ApplicationJSONCreatedFrom    `json:"createdFrom,omitempty"`
	DeliveryFormat      GetConfigurableLogDrains200ApplicationJSONDeliveryFormat  `json:"deliveryFormat"`
	DisabledAt          *int64                                                    `json:"disabledAt,omitempty"`
	DisabledBy          *string                                                   `json:"disabledBy,omitempty"`
	DisabledReason      *GetConfigurableLogDrains200ApplicationJSONDisabledReason `json:"disabledReason,omitempty"`
	Environment         *GetConfigurableLogDrains200ApplicationJSONEnvironment    `json:"environment,omitempty"`
	FirstErrorTimestamp *int64                                                    `json:"firstErrorTimestamp,omitempty"`
	Headers             map[string]string                                         `json:"headers,omitempty"`
	ID                  string                                                    `json:"id"`
	Name                string                                                    `json:"name"`
	OwnerID             string                                                    `json:"ownerId"`
	ProjectIds          []string                                                  `json:"projectIds,omitempty"`
	Secret              string                                                    `json:"secret"`
	Sources             []GetConfigurableLogDrains200ApplicationJSONSources       `json:"sources,omitempty"`
	Status              *GetConfigurableLogDrains200ApplicationJSONStatus         `json:"status,omitempty"`
	TeamID              *string                                                   `json:"teamId,omitempty"`
	URL                 string                                                    `json:"url"`
}

type GetConfigurableLogDrainsResponse struct {
	ContentType                                       string
	StatusCode                                        int
	RawResponse                                       *http.Response
	GetConfigurableLogDrains200ApplicationJSONObjects []GetConfigurableLogDrains200ApplicationJSON
}
