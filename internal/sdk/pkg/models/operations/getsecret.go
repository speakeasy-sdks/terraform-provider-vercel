// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
	"vercel/internal/sdk/pkg/utils"
)

// GetSecretDecrypt - Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.
type GetSecretDecrypt string

const (
	GetSecretDecryptTrue  GetSecretDecrypt = "true"
	GetSecretDecryptFalse GetSecretDecrypt = "false"
)

func (e GetSecretDecrypt) ToPointer() *GetSecretDecrypt {
	return &e
}

func (e *GetSecretDecrypt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = GetSecretDecrypt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSecretDecrypt: %v", v)
	}
}

type GetSecretRequest struct {
	// Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.
	Decrypt *GetSecretDecrypt `queryParam:"style=form,explode=true,name=decrypt"`
	// The name or the unique identifier to which the secret belongs to.
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetSecretRequest) GetDecrypt() *GetSecretDecrypt {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *GetSecretRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetSecretRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// GetSecret200ApplicationJSON - Data representing a secret.
type GetSecret200ApplicationJSON struct {
	// The date when the secret was created.
	Created time.Time `json:"created"`
	// Timestamp for when the secret was created.
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// Indicates whether the secret value can be decrypted after it has been created.
	Decryptable *bool `json:"decryptable,omitempty"`
	// The name of the secret.
	Name string `json:"name"`
	// The unique identifier of the project which the secret belongs to.
	ProjectID *string `json:"projectId,omitempty"`
	// The unique identifier of the team the secret was created for.
	TeamID *string `json:"teamId,omitempty"`
	// The unique identifier of the secret.
	UID string `json:"uid"`
	// The unique identifier of the user who created the secret.
	UserID *string `json:"userId,omitempty"`
	// The value of the secret.
	Value *string `json:"value,omitempty"`
}

func (g GetSecret200ApplicationJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSecret200ApplicationJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetSecret200ApplicationJSON) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *GetSecret200ApplicationJSON) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetSecret200ApplicationJSON) GetDecryptable() *bool {
	if o == nil {
		return nil
	}
	return o.Decryptable
}

func (o *GetSecret200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetSecret200ApplicationJSON) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetSecret200ApplicationJSON) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetSecret200ApplicationJSON) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetSecret200ApplicationJSON) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetSecret200ApplicationJSON) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetSecretResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response retrieving a secret.
	GetSecret200ApplicationJSONObject *GetSecret200ApplicationJSON
}

func (o *GetSecretResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSecretResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSecretResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSecretResponse) GetGetSecret200ApplicationJSONObject() *GetSecret200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetSecret200ApplicationJSONObject
}
