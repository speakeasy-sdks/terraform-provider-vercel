// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetIntegrationLogDrainsSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetIntegrationLogDrainsRequest struct {
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

// GetIntegrationLogDrains200ApplicationJSONCreatedFrom - Whether the log drain was created by an integration or by a user
type GetIntegrationLogDrains200ApplicationJSONCreatedFrom string

const (
	GetIntegrationLogDrains200ApplicationJSONCreatedFromSelfServed  GetIntegrationLogDrains200ApplicationJSONCreatedFrom = "self-served"
	GetIntegrationLogDrains200ApplicationJSONCreatedFromIntegration GetIntegrationLogDrains200ApplicationJSONCreatedFrom = "integration"
)

func (e GetIntegrationLogDrains200ApplicationJSONCreatedFrom) ToPointer() *GetIntegrationLogDrains200ApplicationJSONCreatedFrom {
	return &e
}

func (e *GetIntegrationLogDrains200ApplicationJSONCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = GetIntegrationLogDrains200ApplicationJSONCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationLogDrains200ApplicationJSONCreatedFrom: %v", v)
	}
}

// GetIntegrationLogDrains200ApplicationJSONDeliveryFormat - The delivery log format
type GetIntegrationLogDrains200ApplicationJSONDeliveryFormat string

const (
	GetIntegrationLogDrains200ApplicationJSONDeliveryFormatJSON   GetIntegrationLogDrains200ApplicationJSONDeliveryFormat = "json"
	GetIntegrationLogDrains200ApplicationJSONDeliveryFormatNdjson GetIntegrationLogDrains200ApplicationJSONDeliveryFormat = "ndjson"
	GetIntegrationLogDrains200ApplicationJSONDeliveryFormatSyslog GetIntegrationLogDrains200ApplicationJSONDeliveryFormat = "syslog"
)

func (e GetIntegrationLogDrains200ApplicationJSONDeliveryFormat) ToPointer() *GetIntegrationLogDrains200ApplicationJSONDeliveryFormat {
	return &e
}

func (e *GetIntegrationLogDrains200ApplicationJSONDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = GetIntegrationLogDrains200ApplicationJSONDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationLogDrains200ApplicationJSONDeliveryFormat: %v", v)
	}
}

// GetIntegrationLogDrains200ApplicationJSONEnvironment - The environment of log drain
type GetIntegrationLogDrains200ApplicationJSONEnvironment string

const (
	GetIntegrationLogDrains200ApplicationJSONEnvironmentPreview    GetIntegrationLogDrains200ApplicationJSONEnvironment = "preview"
	GetIntegrationLogDrains200ApplicationJSONEnvironmentProduction GetIntegrationLogDrains200ApplicationJSONEnvironment = "production"
)

func (e GetIntegrationLogDrains200ApplicationJSONEnvironment) ToPointer() *GetIntegrationLogDrains200ApplicationJSONEnvironment {
	return &e
}

func (e *GetIntegrationLogDrains200ApplicationJSONEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = GetIntegrationLogDrains200ApplicationJSONEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationLogDrains200ApplicationJSONEnvironment: %v", v)
	}
}

// GetIntegrationLogDrains200ApplicationJSONSources - The sources from which logs are currently being delivered to this log drain.
type GetIntegrationLogDrains200ApplicationJSONSources string

const (
	GetIntegrationLogDrains200ApplicationJSONSourcesStatic     GetIntegrationLogDrains200ApplicationJSONSources = "static"
	GetIntegrationLogDrains200ApplicationJSONSourcesLambda     GetIntegrationLogDrains200ApplicationJSONSources = "lambda"
	GetIntegrationLogDrains200ApplicationJSONSourcesBuild      GetIntegrationLogDrains200ApplicationJSONSources = "build"
	GetIntegrationLogDrains200ApplicationJSONSourcesEdge       GetIntegrationLogDrains200ApplicationJSONSources = "edge"
	GetIntegrationLogDrains200ApplicationJSONSourcesExternal   GetIntegrationLogDrains200ApplicationJSONSources = "external"
	GetIntegrationLogDrains200ApplicationJSONSourcesDeployment GetIntegrationLogDrains200ApplicationJSONSources = "deployment"
)

func (e GetIntegrationLogDrains200ApplicationJSONSources) ToPointer() *GetIntegrationLogDrains200ApplicationJSONSources {
	return &e
}

func (e *GetIntegrationLogDrains200ApplicationJSONSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "deployment":
		*e = GetIntegrationLogDrains200ApplicationJSONSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationLogDrains200ApplicationJSONSources: %v", v)
	}
}

type GetIntegrationLogDrains200ApplicationJSON struct {
	// The branch regexp of log drain
	Branch *string `json:"branch,omitempty"`
	// The oauth2 client application id that created this log drain
	ClientID *string `json:"clientId,omitempty"`
	// The client configuration this log drain was created with
	ConfigurationID *string `json:"configurationId,omitempty"`
	// A timestamp that tells you when the log drain was created
	CreatedAt int64 `json:"createdAt"`
	// Whether the log drain was created by an integration or by a user
	CreatedFrom *GetIntegrationLogDrains200ApplicationJSONCreatedFrom `json:"createdFrom,omitempty"`
	// The delivery log format
	DeliveryFormat *GetIntegrationLogDrains200ApplicationJSONDeliveryFormat `json:"deliveryFormat,omitempty"`
	// The environment of log drain
	Environment *GetIntegrationLogDrains200ApplicationJSONEnvironment `json:"environment,omitempty"`
	// The headers to send with the request
	Headers map[string]string `json:"headers,omitempty"`
	// The unique identifier of the log drain. Always prefixed with `ld_`
	ID string `json:"id"`
	// The name of the log drain
	Name string `json:"name"`
	// The identifier of the team or user whose events will trigger the log drain
	OwnerID   string  `json:"ownerId"`
	ProjectID *string `json:"projectId,omitempty"`
	// The identifier of the projects this log drain is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
	// The sources from which logs are currently being delivered to this log drain.
	Sources []GetIntegrationLogDrains200ApplicationJSONSources `json:"sources,omitempty"`
	// The URL to call when logs are generated
	URL string `json:"url"`
}

type GetIntegrationLogDrainsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of log drains
	GetIntegrationLogDrains200ApplicationJSONObjects []GetIntegrationLogDrains200ApplicationJSON
}
