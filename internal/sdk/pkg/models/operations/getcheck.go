// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetCheckSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetCheckRequest struct {
	// The check to fetch
	CheckID string `pathParam:"style=simple,explode=false,name=checkId"`
	// The deployment to get the check for.
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type GetCheck200ApplicationJSONConclusion string

const (
	GetCheck200ApplicationJSONConclusionCanceled  GetCheck200ApplicationJSONConclusion = "canceled"
	GetCheck200ApplicationJSONConclusionFailed    GetCheck200ApplicationJSONConclusion = "failed"
	GetCheck200ApplicationJSONConclusionNeutral   GetCheck200ApplicationJSONConclusion = "neutral"
	GetCheck200ApplicationJSONConclusionSucceeded GetCheck200ApplicationJSONConclusion = "succeeded"
	GetCheck200ApplicationJSONConclusionSkipped   GetCheck200ApplicationJSONConclusion = "skipped"
	GetCheck200ApplicationJSONConclusionStale     GetCheck200ApplicationJSONConclusion = "stale"
)

func (e GetCheck200ApplicationJSONConclusion) ToPointer() *GetCheck200ApplicationJSONConclusion {
	return &e
}

func (e *GetCheck200ApplicationJSONConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		fallthrough
	case "stale":
		*e = GetCheck200ApplicationJSONConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONConclusion: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsCLSSource string

const (
	GetCheck200ApplicationJSONOutputMetricsCLSSourceWebVitals GetCheck200ApplicationJSONOutputMetricsCLSSource = "web-vitals"
)

func (e GetCheck200ApplicationJSONOutputMetricsCLSSource) ToPointer() *GetCheck200ApplicationJSONOutputMetricsCLSSource {
	return &e
}

func (e *GetCheck200ApplicationJSONOutputMetricsCLSSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = GetCheck200ApplicationJSONOutputMetricsCLSSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONOutputMetricsCLSSource: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsCLS struct {
	PreviousValue *int64                                           `json:"previousValue,omitempty"`
	Source        GetCheck200ApplicationJSONOutputMetricsCLSSource `json:"source"`
	Value         *int64                                           `json:"value"`
}

type GetCheck200ApplicationJSONOutputMetricsFCPSource string

const (
	GetCheck200ApplicationJSONOutputMetricsFCPSourceWebVitals GetCheck200ApplicationJSONOutputMetricsFCPSource = "web-vitals"
)

func (e GetCheck200ApplicationJSONOutputMetricsFCPSource) ToPointer() *GetCheck200ApplicationJSONOutputMetricsFCPSource {
	return &e
}

func (e *GetCheck200ApplicationJSONOutputMetricsFCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = GetCheck200ApplicationJSONOutputMetricsFCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONOutputMetricsFCPSource: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsFCP struct {
	PreviousValue *int64                                           `json:"previousValue,omitempty"`
	Source        GetCheck200ApplicationJSONOutputMetricsFCPSource `json:"source"`
	Value         *int64                                           `json:"value"`
}

type GetCheck200ApplicationJSONOutputMetricsLCPSource string

const (
	GetCheck200ApplicationJSONOutputMetricsLCPSourceWebVitals GetCheck200ApplicationJSONOutputMetricsLCPSource = "web-vitals"
)

func (e GetCheck200ApplicationJSONOutputMetricsLCPSource) ToPointer() *GetCheck200ApplicationJSONOutputMetricsLCPSource {
	return &e
}

func (e *GetCheck200ApplicationJSONOutputMetricsLCPSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = GetCheck200ApplicationJSONOutputMetricsLCPSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONOutputMetricsLCPSource: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsLCP struct {
	PreviousValue *int64                                           `json:"previousValue,omitempty"`
	Source        GetCheck200ApplicationJSONOutputMetricsLCPSource `json:"source"`
	Value         *int64                                           `json:"value"`
}

type GetCheck200ApplicationJSONOutputMetricsTBTSource string

const (
	GetCheck200ApplicationJSONOutputMetricsTBTSourceWebVitals GetCheck200ApplicationJSONOutputMetricsTBTSource = "web-vitals"
)

func (e GetCheck200ApplicationJSONOutputMetricsTBTSource) ToPointer() *GetCheck200ApplicationJSONOutputMetricsTBTSource {
	return &e
}

func (e *GetCheck200ApplicationJSONOutputMetricsTBTSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = GetCheck200ApplicationJSONOutputMetricsTBTSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONOutputMetricsTBTSource: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsTBT struct {
	PreviousValue *int64                                           `json:"previousValue,omitempty"`
	Source        GetCheck200ApplicationJSONOutputMetricsTBTSource `json:"source"`
	Value         *int64                                           `json:"value"`
}

type GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource string

const (
	GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSourceWebVitals GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource = "web-vitals"
)

func (e GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) ToPointer() *GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource {
	return &e
}

func (e *GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource: %v", v)
	}
}

type GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScore struct {
	PreviousValue *int64                                                              `json:"previousValue,omitempty"`
	Source        GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScoreSource `json:"source"`
	Value         *int64                                                              `json:"value"`
}

type GetCheck200ApplicationJSONOutputMetrics struct {
	Cls                    GetCheck200ApplicationJSONOutputMetricsCLS                     `json:"CLS"`
	Fcp                    GetCheck200ApplicationJSONOutputMetricsFCP                     `json:"FCP"`
	Lcp                    GetCheck200ApplicationJSONOutputMetricsLCP                     `json:"LCP"`
	Tbt                    GetCheck200ApplicationJSONOutputMetricsTBT                     `json:"TBT"`
	VirtualExperienceScore *GetCheck200ApplicationJSONOutputMetricsVirtualExperienceScore `json:"virtualExperienceScore,omitempty"`
}

type GetCheck200ApplicationJSONOutput struct {
	Metrics *GetCheck200ApplicationJSONOutputMetrics `json:"metrics,omitempty"`
}

type GetCheck200ApplicationJSONStatus string

const (
	GetCheck200ApplicationJSONStatusRegistered GetCheck200ApplicationJSONStatus = "registered"
	GetCheck200ApplicationJSONStatusRunning    GetCheck200ApplicationJSONStatus = "running"
	GetCheck200ApplicationJSONStatusCompleted  GetCheck200ApplicationJSONStatus = "completed"
)

func (e GetCheck200ApplicationJSONStatus) ToPointer() *GetCheck200ApplicationJSONStatus {
	return &e
}

func (e *GetCheck200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetCheck200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCheck200ApplicationJSONStatus: %v", v)
	}
}

type GetCheck200ApplicationJSON struct {
	Blocking      bool                                  `json:"blocking"`
	CompletedAt   *int64                                `json:"completedAt,omitempty"`
	Conclusion    *GetCheck200ApplicationJSONConclusion `json:"conclusion,omitempty"`
	CreatedAt     int64                                 `json:"createdAt"`
	DeploymentID  string                                `json:"deploymentId"`
	DetailsURL    *string                               `json:"detailsUrl,omitempty"`
	ExternalID    *string                               `json:"externalId,omitempty"`
	ID            string                                `json:"id"`
	IntegrationID string                                `json:"integrationId"`
	Name          string                                `json:"name"`
	Output        *GetCheck200ApplicationJSONOutput     `json:"output,omitempty"`
	Path          *string                               `json:"path,omitempty"`
	Rerequestable *bool                                 `json:"rerequestable,omitempty"`
	StartedAt     *int64                                `json:"startedAt,omitempty"`
	Status        GetCheck200ApplicationJSONStatus      `json:"status"`
	UpdatedAt     int64                                 `json:"updatedAt"`
}

type GetCheckResponse struct {
	ContentType                      string
	StatusCode                       int
	RawResponse                      *http.Response
	GetCheck200ApplicationJSONObject *GetCheck200ApplicationJSON
}
