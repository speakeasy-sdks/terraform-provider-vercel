// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"
	"vercel/internal/sdk/pkg/utils"
)

type ListDeploymentAliasesRequest struct {
	// The ID of the deployment the aliases should be listed for
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *ListDeploymentAliasesRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListDeploymentAliasesRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access string

const (
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2AccessRequested ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access = "requested"
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2AccessGranted   ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access = "granted"
)

func (e ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access) ToPointer() *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access {
	return &e
}

func (e *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access: %v", v)
	}
}

type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope string

const (
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2ScopeUser ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope = "user"
)

func (e ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope) ToPointer() *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope {
	return &e
}

func (e *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope: %v", v)
	}
}

// ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 - The protection bypass for the alias
type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 struct {
	Access        ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                                 `json:"createdAt"`
	LastUpdatedAt int64                                                                 `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                                `json:"lastUpdatedBy"`
	Scope         ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope  `json:"scope"`
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) GetAccess() ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access {
	if o == nil {
		return ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Access("")
	}
	return o.Access
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) GetScope() ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope {
	if o == nil {
		return ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2Scope("")
	}
	return o.Scope
}

type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope string

const (
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1ScopeShareableLink    ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope = "shareable-link"
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1ScopeAutomationBypass ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope = "automation-bypass"
)

func (e ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope) ToPointer() *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope {
	return &e
}

func (e *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope: %v", v)
	}
}

// ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 - The protection bypass for the alias
type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 struct {
	CreatedAt int64                                                                `json:"createdAt"`
	CreatedBy string                                                               `json:"createdBy"`
	Scope     ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope `json:"scope"`
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1) GetScope() ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope {
	if o == nil {
		return ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1Scope("")
	}
	return o.Scope
}

type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassType string

const (
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassType = "listDeploymentAliases_200ApplicationJSON_aliases_protectionBypass_1"
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassType = "listDeploymentAliases_200ApplicationJSON_aliases_protectionBypass_2"
)

type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass struct {
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1
	ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2

	Type ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassType
}

func CreateListDeploymentAliases200ApplicationJSONAliasesProtectionBypassListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1(listDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1) ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass {
	typ := ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1

	return ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass{
		ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1: &listDeploymentAliases200ApplicationJSONAliasesProtectionBypass1,
		Type: typ,
	}
}

func CreateListDeploymentAliases200ApplicationJSONAliasesProtectionBypassListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2(listDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2) ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass {
	typ := ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2

	return ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass{
		ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2: &listDeploymentAliases200ApplicationJSONAliasesProtectionBypass2,
		Type: typ,
	}
}

func (u *ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass) UnmarshalJSON(data []byte) error {

	listDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 := new(ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1)
	if err := utils.UnmarshalJSON(data, &listDeploymentAliases200ApplicationJSONAliasesProtectionBypass1, "", true, true); err == nil {
		u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 = listDeploymentAliases200ApplicationJSONAliasesProtectionBypass1
		u.Type = ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1
		return nil
	}

	listDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 := new(ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2)
	if err := utils.UnmarshalJSON(data, &listDeploymentAliases200ApplicationJSONAliasesProtectionBypass2, "", true, true); err == nil {
		u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 = listDeploymentAliases200ApplicationJSONAliasesProtectionBypass2
		u.Type = ListDeploymentAliases200ApplicationJSONAliasesProtectionBypassTypeListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1 != nil {
		return utils.MarshalJSON(u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass1, "", true)
	}

	if u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2 != nil {
		return utils.MarshalJSON(u.ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ListDeploymentAliases200ApplicationJSONAliases - A list of the aliases assigned to the deployment
type ListDeploymentAliases200ApplicationJSONAliases struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The protection bypass for the alias
	ProtectionBypass map[string]ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass `json:"protectionBypass,omitempty"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
}

func (l ListDeploymentAliases200ApplicationJSONAliases) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListDeploymentAliases200ApplicationJSONAliases) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListDeploymentAliases200ApplicationJSONAliases) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *ListDeploymentAliases200ApplicationJSONAliases) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *ListDeploymentAliases200ApplicationJSONAliases) GetProtectionBypass() map[string]ListDeploymentAliases200ApplicationJSONAliasesProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *ListDeploymentAliases200ApplicationJSONAliases) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *ListDeploymentAliases200ApplicationJSONAliases) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

// ListDeploymentAliases200ApplicationJSON - The list of aliases assigned to the deployment
type ListDeploymentAliases200ApplicationJSON struct {
	// A list of the aliases assigned to the deployment
	Aliases []ListDeploymentAliases200ApplicationJSONAliases `json:"aliases"`
}

func (o *ListDeploymentAliases200ApplicationJSON) GetAliases() []ListDeploymentAliases200ApplicationJSONAliases {
	if o == nil {
		return []ListDeploymentAliases200ApplicationJSONAliases{}
	}
	return o.Aliases
}

type ListDeploymentAliasesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of aliases assigned to the deployment
	ListDeploymentAliases200ApplicationJSONObject *ListDeploymentAliases200ApplicationJSON
}

func (o *ListDeploymentAliasesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListDeploymentAliasesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListDeploymentAliasesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListDeploymentAliasesResponse) GetListDeploymentAliases200ApplicationJSONObject() *ListDeploymentAliases200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ListDeploymentAliases200ApplicationJSONObject
}
