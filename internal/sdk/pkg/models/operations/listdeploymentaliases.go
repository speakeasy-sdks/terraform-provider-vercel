// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"
	"vercel/internal/sdk/pkg/utils"
)

type ListDeploymentAliasesRequest struct {
	// The ID of the deployment the aliases should be listed for
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *ListDeploymentAliasesRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListDeploymentAliasesRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type ListDeploymentAliasesAccess string

const (
	ListDeploymentAliasesAccessRequested ListDeploymentAliasesAccess = "requested"
	ListDeploymentAliasesAccessGranted   ListDeploymentAliasesAccess = "granted"
)

func (e ListDeploymentAliasesAccess) ToPointer() *ListDeploymentAliasesAccess {
	return &e
}

func (e *ListDeploymentAliasesAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = ListDeploymentAliasesAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliasesAccess: %v", v)
	}
}

type ListDeploymentAliasesAliasesScope string

const (
	ListDeploymentAliasesAliasesScopeUser ListDeploymentAliasesAliasesScope = "user"
)

func (e ListDeploymentAliasesAliasesScope) ToPointer() *ListDeploymentAliasesAliasesScope {
	return &e
}

func (e *ListDeploymentAliasesAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = ListDeploymentAliasesAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliasesAliasesScope: %v", v)
	}
}

// ListDeploymentAliases2 - The protection bypass for the alias
type ListDeploymentAliases2 struct {
	Access        ListDeploymentAliasesAccess       `json:"access"`
	CreatedAt     int64                             `json:"createdAt"`
	LastUpdatedAt int64                             `json:"lastUpdatedAt"`
	LastUpdatedBy string                            `json:"lastUpdatedBy"`
	Scope         ListDeploymentAliasesAliasesScope `json:"scope"`
}

func (o *ListDeploymentAliases2) GetAccess() ListDeploymentAliasesAccess {
	if o == nil {
		return ListDeploymentAliasesAccess("")
	}
	return o.Access
}

func (o *ListDeploymentAliases2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *ListDeploymentAliases2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *ListDeploymentAliases2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListDeploymentAliases2) GetScope() ListDeploymentAliasesAliasesScope {
	if o == nil {
		return ListDeploymentAliasesAliasesScope("")
	}
	return o.Scope
}

type ListDeploymentAliasesScope string

const (
	ListDeploymentAliasesScopeShareableLink    ListDeploymentAliasesScope = "shareable-link"
	ListDeploymentAliasesScopeAutomationBypass ListDeploymentAliasesScope = "automation-bypass"
)

func (e ListDeploymentAliasesScope) ToPointer() *ListDeploymentAliasesScope {
	return &e
}

func (e *ListDeploymentAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = ListDeploymentAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentAliasesScope: %v", v)
	}
}

// ListDeploymentAliases1 - The protection bypass for the alias
type ListDeploymentAliases1 struct {
	CreatedAt int64                      `json:"createdAt"`
	CreatedBy string                     `json:"createdBy"`
	Scope     ListDeploymentAliasesScope `json:"scope"`
}

func (o *ListDeploymentAliases1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *ListDeploymentAliases1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListDeploymentAliases1) GetScope() ListDeploymentAliasesScope {
	if o == nil {
		return ListDeploymentAliasesScope("")
	}
	return o.Scope
}

type ListDeploymentAliasesProtectionBypassType string

const (
	ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases1 ListDeploymentAliasesProtectionBypassType = "listDeploymentAliases_1"
	ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases2 ListDeploymentAliasesProtectionBypassType = "listDeploymentAliases_2"
)

type ListDeploymentAliasesProtectionBypass struct {
	ListDeploymentAliases1 *ListDeploymentAliases1
	ListDeploymentAliases2 *ListDeploymentAliases2

	Type ListDeploymentAliasesProtectionBypassType
}

func CreateListDeploymentAliasesProtectionBypassListDeploymentAliases1(listDeploymentAliases1 ListDeploymentAliases1) ListDeploymentAliasesProtectionBypass {
	typ := ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases1

	return ListDeploymentAliasesProtectionBypass{
		ListDeploymentAliases1: &listDeploymentAliases1,
		Type:                   typ,
	}
}

func CreateListDeploymentAliasesProtectionBypassListDeploymentAliases2(listDeploymentAliases2 ListDeploymentAliases2) ListDeploymentAliasesProtectionBypass {
	typ := ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases2

	return ListDeploymentAliasesProtectionBypass{
		ListDeploymentAliases2: &listDeploymentAliases2,
		Type:                   typ,
	}
}

func (u *ListDeploymentAliasesProtectionBypass) UnmarshalJSON(data []byte) error {

	listDeploymentAliases1 := new(ListDeploymentAliases1)
	if err := utils.UnmarshalJSON(data, &listDeploymentAliases1, "", true, true); err == nil {
		u.ListDeploymentAliases1 = listDeploymentAliases1
		u.Type = ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases1
		return nil
	}

	listDeploymentAliases2 := new(ListDeploymentAliases2)
	if err := utils.UnmarshalJSON(data, &listDeploymentAliases2, "", true, true); err == nil {
		u.ListDeploymentAliases2 = listDeploymentAliases2
		u.Type = ListDeploymentAliasesProtectionBypassTypeListDeploymentAliases2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ListDeploymentAliasesProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.ListDeploymentAliases1 != nil {
		return utils.MarshalJSON(u.ListDeploymentAliases1, "", true)
	}

	if u.ListDeploymentAliases2 != nil {
		return utils.MarshalJSON(u.ListDeploymentAliases2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Aliases - A list of the aliases assigned to the deployment
type Aliases struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The protection bypass for the alias
	ProtectionBypass map[string]ListDeploymentAliasesProtectionBypass `json:"protectionBypass,omitempty"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
}

func (a Aliases) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Aliases) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Aliases) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Aliases) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *Aliases) GetProtectionBypass() map[string]ListDeploymentAliasesProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *Aliases) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Aliases) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

// ListDeploymentAliasesResponseBody - The list of aliases assigned to the deployment
type ListDeploymentAliasesResponseBody struct {
	// A list of the aliases assigned to the deployment
	Aliases []Aliases `json:"aliases"`
}

func (o *ListDeploymentAliasesResponseBody) GetAliases() []Aliases {
	if o == nil {
		return []Aliases{}
	}
	return o.Aliases
}

type ListDeploymentAliasesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of aliases assigned to the deployment
	Object *ListDeploymentAliasesResponseBody
}

func (o *ListDeploymentAliasesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListDeploymentAliasesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListDeploymentAliasesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListDeploymentAliasesResponse) GetObject() *ListDeploymentAliasesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
