// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetDeploymentRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Whether to add in gitRepo information.
	WithGitRepoInfo *string `queryParam:"style=form,explode=true,name=withGitRepoInfo"`
}

// GetDeployment200ApplicationJSON2AliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type GetDeployment200ApplicationJSON2AliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type GetDeployment200ApplicationJSON2AliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

type GetDeployment200ApplicationJSON2ChecksConclusion string

const (
	GetDeployment200ApplicationJSON2ChecksConclusionSucceeded GetDeployment200ApplicationJSON2ChecksConclusion = "succeeded"
	GetDeployment200ApplicationJSON2ChecksConclusionFailed    GetDeployment200ApplicationJSON2ChecksConclusion = "failed"
	GetDeployment200ApplicationJSON2ChecksConclusionSkipped   GetDeployment200ApplicationJSON2ChecksConclusion = "skipped"
	GetDeployment200ApplicationJSON2ChecksConclusionCanceled  GetDeployment200ApplicationJSON2ChecksConclusion = "canceled"
)

func (e GetDeployment200ApplicationJSON2ChecksConclusion) ToPointer() *GetDeployment200ApplicationJSON2ChecksConclusion {
	return &e
}

func (e *GetDeployment200ApplicationJSON2ChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeployment200ApplicationJSON2ChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2ChecksConclusion: %v", v)
	}
}

type GetDeployment200ApplicationJSON2ChecksState string

const (
	GetDeployment200ApplicationJSON2ChecksStateRegistered GetDeployment200ApplicationJSON2ChecksState = "registered"
	GetDeployment200ApplicationJSON2ChecksStateRunning    GetDeployment200ApplicationJSON2ChecksState = "running"
	GetDeployment200ApplicationJSON2ChecksStateCompleted  GetDeployment200ApplicationJSON2ChecksState = "completed"
)

func (e GetDeployment200ApplicationJSON2ChecksState) ToPointer() *GetDeployment200ApplicationJSON2ChecksState {
	return &e
}

func (e *GetDeployment200ApplicationJSON2ChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeployment200ApplicationJSON2ChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2ChecksState: %v", v)
	}
}

// GetDeployment200ApplicationJSON2Creator - Information about the deployment creator
type GetDeployment200ApplicationJSON2Creator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

type GetDeployment200ApplicationJSON2GitSource9Type string

const (
	GetDeployment200ApplicationJSON2GitSource9TypeBitbucket GetDeployment200ApplicationJSON2GitSource9Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON2GitSource9Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource9Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON2GitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource9Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource9 struct {
	Owner         *string                                        `json:"owner,omitempty"`
	Ref           string                                         `json:"ref"`
	RepoUUID      string                                         `json:"repoUuid"`
	Sha           string                                         `json:"sha"`
	Slug          *string                                        `json:"slug,omitempty"`
	Type          GetDeployment200ApplicationJSON2GitSource9Type `json:"type"`
	WorkspaceUUID string                                         `json:"workspaceUuid"`
}

type GetDeployment200ApplicationJSON2GitSource8Type string

const (
	GetDeployment200ApplicationJSON2GitSource8TypeGitlab GetDeployment200ApplicationJSON2GitSource8Type = "gitlab"
)

func (e GetDeployment200ApplicationJSON2GitSource8Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource8Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeployment200ApplicationJSON2GitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource8Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource8 struct {
	ProjectID int64                                          `json:"projectId"`
	Ref       string                                         `json:"ref"`
	Sha       string                                         `json:"sha"`
	Type      GetDeployment200ApplicationJSON2GitSource8Type `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource7Type string

const (
	GetDeployment200ApplicationJSON2GitSource7TypeGithub GetDeployment200ApplicationJSON2GitSource7Type = "github"
)

func (e GetDeployment200ApplicationJSON2GitSource7Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource7Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON2GitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource7Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource7 struct {
	Org    *string                                        `json:"org,omitempty"`
	Ref    string                                         `json:"ref"`
	Repo   *string                                        `json:"repo,omitempty"`
	RepoID int64                                          `json:"repoId"`
	Sha    string                                         `json:"sha"`
	Type   GetDeployment200ApplicationJSON2GitSource7Type `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource6Type string

const (
	GetDeployment200ApplicationJSON2GitSource6TypeCustom GetDeployment200ApplicationJSON2GitSource6Type = "custom"
)

func (e GetDeployment200ApplicationJSON2GitSource6Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource6Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeployment200ApplicationJSON2GitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource6Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource6 struct {
	GitURL string                                         `json:"gitUrl"`
	Ref    string                                         `json:"ref"`
	Sha    string                                         `json:"sha"`
	Type   GetDeployment200ApplicationJSON2GitSource6Type `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource5Type string

const (
	GetDeployment200ApplicationJSON2GitSource5TypeBitbucket GetDeployment200ApplicationJSON2GitSource5Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON2GitSource5Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource5Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON2GitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource5Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource5 struct {
	Owner string                                         `json:"owner"`
	PrID  *int64                                         `json:"prId,omitempty"`
	Ref   *string                                        `json:"ref,omitempty"`
	Sha   *string                                        `json:"sha,omitempty"`
	Slug  string                                         `json:"slug"`
	Type  GetDeployment200ApplicationJSON2GitSource5Type `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource4Type string

const (
	GetDeployment200ApplicationJSON2GitSource4TypeBitbucket GetDeployment200ApplicationJSON2GitSource4Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON2GitSource4Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource4Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON2GitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource4Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource4 struct {
	PrID          *int64                                         `json:"prId,omitempty"`
	Ref           *string                                        `json:"ref,omitempty"`
	RepoUUID      string                                         `json:"repoUuid"`
	Sha           *string                                        `json:"sha,omitempty"`
	Type          GetDeployment200ApplicationJSON2GitSource4Type `json:"type"`
	WorkspaceUUID *string                                        `json:"workspaceUuid,omitempty"`
}

type GetDeployment200ApplicationJSON2GitSource3ProjectIDType string

const (
	GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeStr     GetDeployment200ApplicationJSON2GitSource3ProjectIDType = "str"
	GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeInteger GetDeployment200ApplicationJSON2GitSource3ProjectIDType = "integer"
)

type GetDeployment200ApplicationJSON2GitSource3ProjectID struct {
	Str     *string
	Integer *int64

	Type GetDeployment200ApplicationJSON2GitSource3ProjectIDType
}

func CreateGetDeployment200ApplicationJSON2GitSource3ProjectIDStr(str string) GetDeployment200ApplicationJSON2GitSource3ProjectID {
	typ := GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeStr

	return GetDeployment200ApplicationJSON2GitSource3ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSource3ProjectIDInteger(integer int64) GetDeployment200ApplicationJSON2GitSource3ProjectID {
	typ := GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeInteger

	return GetDeployment200ApplicationJSON2GitSource3ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GetDeployment200ApplicationJSON2GitSource3ProjectID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetDeployment200ApplicationJSON2GitSource3ProjectIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON2GitSource3ProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON2GitSource3Type string

const (
	GetDeployment200ApplicationJSON2GitSource3TypeGitlab GetDeployment200ApplicationJSON2GitSource3Type = "gitlab"
)

func (e GetDeployment200ApplicationJSON2GitSource3Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource3Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeployment200ApplicationJSON2GitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource3Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource3 struct {
	PrID      *int64                                              `json:"prId,omitempty"`
	ProjectID GetDeployment200ApplicationJSON2GitSource3ProjectID `json:"projectId"`
	Ref       *string                                             `json:"ref,omitempty"`
	Sha       *string                                             `json:"sha,omitempty"`
	Type      GetDeployment200ApplicationJSON2GitSource3Type      `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource2Type string

const (
	GetDeployment200ApplicationJSON2GitSource2TypeGithub GetDeployment200ApplicationJSON2GitSource2Type = "github"
)

func (e GetDeployment200ApplicationJSON2GitSource2Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON2GitSource2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource2Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource2 struct {
	Org  string                                         `json:"org"`
	PrID *int64                                         `json:"prId,omitempty"`
	Ref  *string                                        `json:"ref,omitempty"`
	Repo string                                         `json:"repo"`
	Sha  *string                                        `json:"sha,omitempty"`
	Type GetDeployment200ApplicationJSON2GitSource2Type `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSource1RepoIDType string

const (
	GetDeployment200ApplicationJSON2GitSource1RepoIDTypeStr     GetDeployment200ApplicationJSON2GitSource1RepoIDType = "str"
	GetDeployment200ApplicationJSON2GitSource1RepoIDTypeInteger GetDeployment200ApplicationJSON2GitSource1RepoIDType = "integer"
)

type GetDeployment200ApplicationJSON2GitSource1RepoID struct {
	Str     *string
	Integer *int64

	Type GetDeployment200ApplicationJSON2GitSource1RepoIDType
}

func CreateGetDeployment200ApplicationJSON2GitSource1RepoIDStr(str string) GetDeployment200ApplicationJSON2GitSource1RepoID {
	typ := GetDeployment200ApplicationJSON2GitSource1RepoIDTypeStr

	return GetDeployment200ApplicationJSON2GitSource1RepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSource1RepoIDInteger(integer int64) GetDeployment200ApplicationJSON2GitSource1RepoID {
	typ := GetDeployment200ApplicationJSON2GitSource1RepoIDTypeInteger

	return GetDeployment200ApplicationJSON2GitSource1RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GetDeployment200ApplicationJSON2GitSource1RepoID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetDeployment200ApplicationJSON2GitSource1RepoIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetDeployment200ApplicationJSON2GitSource1RepoIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON2GitSource1RepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON2GitSource1Type string

const (
	GetDeployment200ApplicationJSON2GitSource1TypeGithub GetDeployment200ApplicationJSON2GitSource1Type = "github"
)

func (e GetDeployment200ApplicationJSON2GitSource1Type) ToPointer() *GetDeployment200ApplicationJSON2GitSource1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2GitSource1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON2GitSource1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2GitSource1Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON2GitSource1 struct {
	PrID   *int64                                           `json:"prId,omitempty"`
	Ref    *string                                          `json:"ref,omitempty"`
	RepoID GetDeployment200ApplicationJSON2GitSource1RepoID `json:"repoId"`
	Sha    *string                                          `json:"sha,omitempty"`
	Type   GetDeployment200ApplicationJSON2GitSource1Type   `json:"type"`
}

type GetDeployment200ApplicationJSON2GitSourceType string

const (
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource1 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_1"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource2 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_2"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource3 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_3"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource4 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_4"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource5 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_5"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource6 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_6"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource7 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_7"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource8 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_8"
	GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource9 GetDeployment200ApplicationJSON2GitSourceType = "getDeployment_200ApplicationJSON_2_gitSource_9"
)

type GetDeployment200ApplicationJSON2GitSource struct {
	GetDeployment200ApplicationJSON2GitSource1 *GetDeployment200ApplicationJSON2GitSource1
	GetDeployment200ApplicationJSON2GitSource2 *GetDeployment200ApplicationJSON2GitSource2
	GetDeployment200ApplicationJSON2GitSource3 *GetDeployment200ApplicationJSON2GitSource3
	GetDeployment200ApplicationJSON2GitSource4 *GetDeployment200ApplicationJSON2GitSource4
	GetDeployment200ApplicationJSON2GitSource5 *GetDeployment200ApplicationJSON2GitSource5
	GetDeployment200ApplicationJSON2GitSource6 *GetDeployment200ApplicationJSON2GitSource6
	GetDeployment200ApplicationJSON2GitSource7 *GetDeployment200ApplicationJSON2GitSource7
	GetDeployment200ApplicationJSON2GitSource8 *GetDeployment200ApplicationJSON2GitSource8
	GetDeployment200ApplicationJSON2GitSource9 *GetDeployment200ApplicationJSON2GitSource9

	Type GetDeployment200ApplicationJSON2GitSourceType
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource1(getDeployment200ApplicationJSON2GitSource1 GetDeployment200ApplicationJSON2GitSource1) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource1

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource1: &getDeployment200ApplicationJSON2GitSource1,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource2(getDeployment200ApplicationJSON2GitSource2 GetDeployment200ApplicationJSON2GitSource2) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource2

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource2: &getDeployment200ApplicationJSON2GitSource2,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource3(getDeployment200ApplicationJSON2GitSource3 GetDeployment200ApplicationJSON2GitSource3) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource3

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource3: &getDeployment200ApplicationJSON2GitSource3,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource4(getDeployment200ApplicationJSON2GitSource4 GetDeployment200ApplicationJSON2GitSource4) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource4

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource4: &getDeployment200ApplicationJSON2GitSource4,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource5(getDeployment200ApplicationJSON2GitSource5 GetDeployment200ApplicationJSON2GitSource5) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource5

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource5: &getDeployment200ApplicationJSON2GitSource5,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource6(getDeployment200ApplicationJSON2GitSource6 GetDeployment200ApplicationJSON2GitSource6) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource6

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource6: &getDeployment200ApplicationJSON2GitSource6,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource7(getDeployment200ApplicationJSON2GitSource7 GetDeployment200ApplicationJSON2GitSource7) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource7

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource7: &getDeployment200ApplicationJSON2GitSource7,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource8(getDeployment200ApplicationJSON2GitSource8 GetDeployment200ApplicationJSON2GitSource8) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource8

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource8: &getDeployment200ApplicationJSON2GitSource8,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON2GitSourceGetDeployment200ApplicationJSON2GitSource9(getDeployment200ApplicationJSON2GitSource9 GetDeployment200ApplicationJSON2GitSource9) GetDeployment200ApplicationJSON2GitSource {
	typ := GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource9

	return GetDeployment200ApplicationJSON2GitSource{
		GetDeployment200ApplicationJSON2GitSource9: &getDeployment200ApplicationJSON2GitSource9,
		Type: typ,
	}
}

func (u *GetDeployment200ApplicationJSON2GitSource) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON2GitSource6 := new(GetDeployment200ApplicationJSON2GitSource6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource6); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource6 = getDeployment200ApplicationJSON2GitSource6
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource6
		return nil
	}

	getDeployment200ApplicationJSON2GitSource8 := new(GetDeployment200ApplicationJSON2GitSource8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource8); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource8 = getDeployment200ApplicationJSON2GitSource8
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource8
		return nil
	}

	getDeployment200ApplicationJSON2GitSource1 := new(GetDeployment200ApplicationJSON2GitSource1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource1); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource1 = getDeployment200ApplicationJSON2GitSource1
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource1
		return nil
	}

	getDeployment200ApplicationJSON2GitSource3 := new(GetDeployment200ApplicationJSON2GitSource3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource3); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource3 = getDeployment200ApplicationJSON2GitSource3
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource3
		return nil
	}

	getDeployment200ApplicationJSON2GitSource2 := new(GetDeployment200ApplicationJSON2GitSource2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource2); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource2 = getDeployment200ApplicationJSON2GitSource2
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource2
		return nil
	}

	getDeployment200ApplicationJSON2GitSource4 := new(GetDeployment200ApplicationJSON2GitSource4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource4); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource4 = getDeployment200ApplicationJSON2GitSource4
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource4
		return nil
	}

	getDeployment200ApplicationJSON2GitSource5 := new(GetDeployment200ApplicationJSON2GitSource5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource5); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource5 = getDeployment200ApplicationJSON2GitSource5
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource5
		return nil
	}

	getDeployment200ApplicationJSON2GitSource7 := new(GetDeployment200ApplicationJSON2GitSource7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource7); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource7 = getDeployment200ApplicationJSON2GitSource7
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource7
		return nil
	}

	getDeployment200ApplicationJSON2GitSource9 := new(GetDeployment200ApplicationJSON2GitSource9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2GitSource9); err == nil {
		u.GetDeployment200ApplicationJSON2GitSource9 = getDeployment200ApplicationJSON2GitSource9
		u.Type = GetDeployment200ApplicationJSON2GitSourceTypeGetDeployment200ApplicationJSON2GitSource9
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON2GitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON2GitSource6 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource6)
	}

	if u.GetDeployment200ApplicationJSON2GitSource8 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource8)
	}

	if u.GetDeployment200ApplicationJSON2GitSource1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource1)
	}

	if u.GetDeployment200ApplicationJSON2GitSource3 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource3)
	}

	if u.GetDeployment200ApplicationJSON2GitSource2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource2)
	}

	if u.GetDeployment200ApplicationJSON2GitSource4 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource4)
	}

	if u.GetDeployment200ApplicationJSON2GitSource5 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource5)
	}

	if u.GetDeployment200ApplicationJSON2GitSource7 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource7)
	}

	if u.GetDeployment200ApplicationJSON2GitSource9 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2GitSource9)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON2LambdasOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

type GetDeployment200ApplicationJSON2LambdasReadyState string

const (
	GetDeployment200ApplicationJSON2LambdasReadyStateBuilding     GetDeployment200ApplicationJSON2LambdasReadyState = "BUILDING"
	GetDeployment200ApplicationJSON2LambdasReadyStateError        GetDeployment200ApplicationJSON2LambdasReadyState = "ERROR"
	GetDeployment200ApplicationJSON2LambdasReadyStateInitializing GetDeployment200ApplicationJSON2LambdasReadyState = "INITIALIZING"
	GetDeployment200ApplicationJSON2LambdasReadyStateReady        GetDeployment200ApplicationJSON2LambdasReadyState = "READY"
)

func (e GetDeployment200ApplicationJSON2LambdasReadyState) ToPointer() *GetDeployment200ApplicationJSON2LambdasReadyState {
	return &e
}

func (e *GetDeployment200ApplicationJSON2LambdasReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeployment200ApplicationJSON2LambdasReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2LambdasReadyState: %v", v)
	}
}

type GetDeployment200ApplicationJSON2Lambdas struct {
	CreatedAt    *int64                                             `json:"createdAt,omitempty"`
	Entrypoint   *string                                            `json:"entrypoint,omitempty"`
	ID           string                                             `json:"id"`
	Output       []GetDeployment200ApplicationJSON2LambdasOutput    `json:"output"`
	ReadyState   *GetDeployment200ApplicationJSON2LambdasReadyState `json:"readyState,omitempty"`
	ReadyStateAt *int64                                             `json:"readyStateAt,omitempty"`
}

// GetDeployment200ApplicationJSON2ReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type GetDeployment200ApplicationJSON2ReadyState string

const (
	GetDeployment200ApplicationJSON2ReadyStateQueued       GetDeployment200ApplicationJSON2ReadyState = "QUEUED"
	GetDeployment200ApplicationJSON2ReadyStateBuilding     GetDeployment200ApplicationJSON2ReadyState = "BUILDING"
	GetDeployment200ApplicationJSON2ReadyStateError        GetDeployment200ApplicationJSON2ReadyState = "ERROR"
	GetDeployment200ApplicationJSON2ReadyStateInitializing GetDeployment200ApplicationJSON2ReadyState = "INITIALIZING"
	GetDeployment200ApplicationJSON2ReadyStateReady        GetDeployment200ApplicationJSON2ReadyState = "READY"
	GetDeployment200ApplicationJSON2ReadyStateCanceled     GetDeployment200ApplicationJSON2ReadyState = "CANCELED"
)

func (e GetDeployment200ApplicationJSON2ReadyState) ToPointer() *GetDeployment200ApplicationJSON2ReadyState {
	return &e
}

func (e *GetDeployment200ApplicationJSON2ReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeployment200ApplicationJSON2ReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2ReadyState: %v", v)
	}
}

// GetDeployment200ApplicationJSON2ReadySubstate - The substate of the deployment when the state is "READY"
type GetDeployment200ApplicationJSON2ReadySubstate string

const (
	GetDeployment200ApplicationJSON2ReadySubstateStaged   GetDeployment200ApplicationJSON2ReadySubstate = "STAGED"
	GetDeployment200ApplicationJSON2ReadySubstatePromoted GetDeployment200ApplicationJSON2ReadySubstate = "PROMOTED"
)

func (e GetDeployment200ApplicationJSON2ReadySubstate) ToPointer() *GetDeployment200ApplicationJSON2ReadySubstate {
	return &e
}

func (e *GetDeployment200ApplicationJSON2ReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeployment200ApplicationJSON2ReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2ReadySubstate: %v", v)
	}
}

// GetDeployment200ApplicationJSON2Source - Where was the deployment created from
type GetDeployment200ApplicationJSON2Source string

const (
	GetDeployment200ApplicationJSON2SourceCli        GetDeployment200ApplicationJSON2Source = "cli"
	GetDeployment200ApplicationJSON2SourceGit        GetDeployment200ApplicationJSON2Source = "git"
	GetDeployment200ApplicationJSON2SourceImport     GetDeployment200ApplicationJSON2Source = "import"
	GetDeployment200ApplicationJSON2SourceImportRepo GetDeployment200ApplicationJSON2Source = "import/repo"
	GetDeployment200ApplicationJSON2SourceCloneRepo  GetDeployment200ApplicationJSON2Source = "clone/repo"
)

func (e GetDeployment200ApplicationJSON2Source) ToPointer() *GetDeployment200ApplicationJSON2Source {
	return &e
}

func (e *GetDeployment200ApplicationJSON2Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		*e = GetDeployment200ApplicationJSON2Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2Source: %v", v)
	}
}

// GetDeployment200ApplicationJSON2Target - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type GetDeployment200ApplicationJSON2Target string

const (
	GetDeployment200ApplicationJSON2TargetStaging    GetDeployment200ApplicationJSON2Target = "staging"
	GetDeployment200ApplicationJSON2TargetProduction GetDeployment200ApplicationJSON2Target = "production"
)

func (e GetDeployment200ApplicationJSON2Target) ToPointer() *GetDeployment200ApplicationJSON2Target {
	return &e
}

func (e *GetDeployment200ApplicationJSON2Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeployment200ApplicationJSON2Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2Target: %v", v)
	}
}

// GetDeployment200ApplicationJSON2Team - The team that owns the deployment if any
type GetDeployment200ApplicationJSON2Team struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

type GetDeployment200ApplicationJSON2Type string

const (
	GetDeployment200ApplicationJSON2TypeLambdas GetDeployment200ApplicationJSON2Type = "LAMBDAS"
)

func (e GetDeployment200ApplicationJSON2Type) ToPointer() *GetDeployment200ApplicationJSON2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeployment200ApplicationJSON2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2Type: %v", v)
	}
}

// GetDeployment200ApplicationJSON2Version - The platform version that was used to create the deployment.
type GetDeployment200ApplicationJSON2Version int64

const (
	GetDeployment200ApplicationJSON2VersionTwo GetDeployment200ApplicationJSON2Version = 2
)

func (e GetDeployment200ApplicationJSON2Version) ToPointer() *GetDeployment200ApplicationJSON2Version {
	return &e
}

func (e *GetDeployment200ApplicationJSON2Version) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		*e = GetDeployment200ApplicationJSON2Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON2Version: %v", v)
	}
}

// GetDeployment200ApplicationJSON2 - The deployment including only public information
type GetDeployment200ApplicationJSON2 struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned bool `json:"aliasAssigned"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *GetDeployment200ApplicationJSON2AliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                           `json:"aliasFinal,omitempty"`
	AliasWarning            *GetDeployment200ApplicationJSON2AliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                          `json:"automaticAliases,omitempty"`
	BootedAt                int64                                             `json:"bootedAt"`
	BuildErrorAt            *int64                                            `json:"buildErrorAt,omitempty"`
	BuildingAt              int64                                             `json:"buildingAt"`
	CanceledAt              *int64                                            `json:"canceledAt,omitempty"`
	ChecksConclusion        *GetDeployment200ApplicationJSON2ChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *GetDeployment200ApplicationJSON2ChecksState      `json:"checksState,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt int64 `json:"createdAt"`
	// Information about the deployment creator
	Creator      GetDeployment200ApplicationJSON2Creator    `json:"creator"`
	ErrorCode    *string                                    `json:"errorCode,omitempty"`
	ErrorLink    *string                                    `json:"errorLink,omitempty"`
	ErrorMessage *string                                    `json:"errorMessage,omitempty"`
	ErrorStep    *string                                    `json:"errorStep,omitempty"`
	GitSource    *GetDeployment200ApplicationJSON2GitSource `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID      string                                    `json:"id"`
	Lambdas []GetDeployment200ApplicationJSON2Lambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState GetDeployment200ApplicationJSON2ReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *GetDeployment200ApplicationJSON2ReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// Where was the deployment created from
	Source *GetDeployment200ApplicationJSON2Source `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *GetDeployment200ApplicationJSON2Target `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *GetDeployment200ApplicationJSON2Team `json:"team,omitempty"`
	Type GetDeployment200ApplicationJSON2Type  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version GetDeployment200ApplicationJSON2Version `json:"version"`
}

type GetDeployment200ApplicationJSON1AliasAssignedAtType string

const (
	GetDeployment200ApplicationJSON1AliasAssignedAtTypeInteger GetDeployment200ApplicationJSON1AliasAssignedAtType = "integer"
	GetDeployment200ApplicationJSON1AliasAssignedAtTypeBoolean GetDeployment200ApplicationJSON1AliasAssignedAtType = "boolean"
)

type GetDeployment200ApplicationJSON1AliasAssignedAt struct {
	Integer *int64
	Boolean *bool

	Type GetDeployment200ApplicationJSON1AliasAssignedAtType
}

func CreateGetDeployment200ApplicationJSON1AliasAssignedAtInteger(integer int64) GetDeployment200ApplicationJSON1AliasAssignedAt {
	typ := GetDeployment200ApplicationJSON1AliasAssignedAtTypeInteger

	return GetDeployment200ApplicationJSON1AliasAssignedAt{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetDeployment200ApplicationJSON1AliasAssignedAtBoolean(boolean bool) GetDeployment200ApplicationJSON1AliasAssignedAt {
	typ := GetDeployment200ApplicationJSON1AliasAssignedAtTypeBoolean

	return GetDeployment200ApplicationJSON1AliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetDeployment200ApplicationJSON1AliasAssignedAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetDeployment200ApplicationJSON1AliasAssignedAtTypeInteger
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = GetDeployment200ApplicationJSON1AliasAssignedAtTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1AliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

// GetDeployment200ApplicationJSON1AliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type GetDeployment200ApplicationJSON1AliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type GetDeployment200ApplicationJSON1AliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

type GetDeployment200ApplicationJSON1Build struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

type GetDeployment200ApplicationJSON1Builds struct {
}

type GetDeployment200ApplicationJSON1ChecksConclusion string

const (
	GetDeployment200ApplicationJSON1ChecksConclusionSucceeded GetDeployment200ApplicationJSON1ChecksConclusion = "succeeded"
	GetDeployment200ApplicationJSON1ChecksConclusionFailed    GetDeployment200ApplicationJSON1ChecksConclusion = "failed"
	GetDeployment200ApplicationJSON1ChecksConclusionSkipped   GetDeployment200ApplicationJSON1ChecksConclusion = "skipped"
	GetDeployment200ApplicationJSON1ChecksConclusionCanceled  GetDeployment200ApplicationJSON1ChecksConclusion = "canceled"
)

func (e GetDeployment200ApplicationJSON1ChecksConclusion) ToPointer() *GetDeployment200ApplicationJSON1ChecksConclusion {
	return &e
}

func (e *GetDeployment200ApplicationJSON1ChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeployment200ApplicationJSON1ChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1ChecksConclusion: %v", v)
	}
}

type GetDeployment200ApplicationJSON1ChecksState string

const (
	GetDeployment200ApplicationJSON1ChecksStateRegistered GetDeployment200ApplicationJSON1ChecksState = "registered"
	GetDeployment200ApplicationJSON1ChecksStateRunning    GetDeployment200ApplicationJSON1ChecksState = "running"
	GetDeployment200ApplicationJSON1ChecksStateCompleted  GetDeployment200ApplicationJSON1ChecksState = "completed"
)

func (e GetDeployment200ApplicationJSON1ChecksState) ToPointer() *GetDeployment200ApplicationJSON1ChecksState {
	return &e
}

func (e *GetDeployment200ApplicationJSON1ChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeployment200ApplicationJSON1ChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1ChecksState: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Creator - Information about the deployment creator
type GetDeployment200ApplicationJSON1Creator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

// GetDeployment200ApplicationJSON1Functions - An object used to configure your Serverless Functions
type GetDeployment200ApplicationJSON1Functions struct {
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	IncludeFiles *string `json:"includeFiles,omitempty"`
	MaxDuration  *int64  `json:"maxDuration,omitempty"`
	Memory       *int64  `json:"memory,omitempty"`
	Runtime      *string `json:"runtime,omitempty"`
}

type GetDeployment200ApplicationJSON1GitRepo3OwnerType string

const (
	GetDeployment200ApplicationJSON1GitRepo3OwnerTypeTeam GetDeployment200ApplicationJSON1GitRepo3OwnerType = "team"
	GetDeployment200ApplicationJSON1GitRepo3OwnerTypeUser GetDeployment200ApplicationJSON1GitRepo3OwnerType = "user"
)

func (e GetDeployment200ApplicationJSON1GitRepo3OwnerType) ToPointer() *GetDeployment200ApplicationJSON1GitRepo3OwnerType {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo3OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeployment200ApplicationJSON1GitRepo3OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo3OwnerType: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo3Type string

const (
	GetDeployment200ApplicationJSON1GitRepo3TypeBitbucket GetDeployment200ApplicationJSON1GitRepo3Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON1GitRepo3Type) ToPointer() *GetDeployment200ApplicationJSON1GitRepo3Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON1GitRepo3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo3Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo3 struct {
	DefaultBranch string                                            `json:"defaultBranch"`
	Name          string                                            `json:"name"`
	Owner         string                                            `json:"owner"`
	OwnerType     GetDeployment200ApplicationJSON1GitRepo3OwnerType `json:"ownerType"`
	Path          string                                            `json:"path"`
	Private       bool                                              `json:"private"`
	RepoUUID      string                                            `json:"repoUuid"`
	Slug          string                                            `json:"slug"`
	Type          GetDeployment200ApplicationJSON1GitRepo3Type      `json:"type"`
	WorkspaceUUID string                                            `json:"workspaceUuid"`
}

type GetDeployment200ApplicationJSON1GitRepo2OwnerType string

const (
	GetDeployment200ApplicationJSON1GitRepo2OwnerTypeTeam GetDeployment200ApplicationJSON1GitRepo2OwnerType = "team"
	GetDeployment200ApplicationJSON1GitRepo2OwnerTypeUser GetDeployment200ApplicationJSON1GitRepo2OwnerType = "user"
)

func (e GetDeployment200ApplicationJSON1GitRepo2OwnerType) ToPointer() *GetDeployment200ApplicationJSON1GitRepo2OwnerType {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo2OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeployment200ApplicationJSON1GitRepo2OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo2OwnerType: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo2Type string

const (
	GetDeployment200ApplicationJSON1GitRepo2TypeGithub GetDeployment200ApplicationJSON1GitRepo2Type = "github"
)

func (e GetDeployment200ApplicationJSON1GitRepo2Type) ToPointer() *GetDeployment200ApplicationJSON1GitRepo2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON1GitRepo2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo2Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo2 struct {
	DefaultBranch string                                            `json:"defaultBranch"`
	Name          string                                            `json:"name"`
	Org           string                                            `json:"org"`
	OwnerType     GetDeployment200ApplicationJSON1GitRepo2OwnerType `json:"ownerType"`
	Path          string                                            `json:"path"`
	Private       bool                                              `json:"private"`
	Repo          string                                            `json:"repo"`
	RepoID        int64                                             `json:"repoId"`
	RepoOwnerID   string                                            `json:"repoOwnerId"`
	Type          GetDeployment200ApplicationJSON1GitRepo2Type      `json:"type"`
}

type GetDeployment200ApplicationJSON1GitRepo1OwnerType string

const (
	GetDeployment200ApplicationJSON1GitRepo1OwnerTypeTeam GetDeployment200ApplicationJSON1GitRepo1OwnerType = "team"
	GetDeployment200ApplicationJSON1GitRepo1OwnerTypeUser GetDeployment200ApplicationJSON1GitRepo1OwnerType = "user"
)

func (e GetDeployment200ApplicationJSON1GitRepo1OwnerType) ToPointer() *GetDeployment200ApplicationJSON1GitRepo1OwnerType {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo1OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeployment200ApplicationJSON1GitRepo1OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo1OwnerType: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo1Type string

const (
	GetDeployment200ApplicationJSON1GitRepo1TypeGitlab GetDeployment200ApplicationJSON1GitRepo1Type = "gitlab"
)

func (e GetDeployment200ApplicationJSON1GitRepo1Type) ToPointer() *GetDeployment200ApplicationJSON1GitRepo1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitRepo1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeployment200ApplicationJSON1GitRepo1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitRepo1Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitRepo1 struct {
	DefaultBranch string                                            `json:"defaultBranch"`
	Name          string                                            `json:"name"`
	Namespace     string                                            `json:"namespace"`
	OwnerType     GetDeployment200ApplicationJSON1GitRepo1OwnerType `json:"ownerType"`
	Path          string                                            `json:"path"`
	Private       bool                                              `json:"private"`
	ProjectID     int64                                             `json:"projectId"`
	Type          GetDeployment200ApplicationJSON1GitRepo1Type      `json:"type"`
	URL           string                                            `json:"url"`
}

type GetDeployment200ApplicationJSON1GitRepoType string

const (
	GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo1 GetDeployment200ApplicationJSON1GitRepoType = "getDeployment_200ApplicationJSON_1_gitRepo_1"
	GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo2 GetDeployment200ApplicationJSON1GitRepoType = "getDeployment_200ApplicationJSON_1_gitRepo_2"
	GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo3 GetDeployment200ApplicationJSON1GitRepoType = "getDeployment_200ApplicationJSON_1_gitRepo_3"
)

type GetDeployment200ApplicationJSON1GitRepo struct {
	GetDeployment200ApplicationJSON1GitRepo1 *GetDeployment200ApplicationJSON1GitRepo1
	GetDeployment200ApplicationJSON1GitRepo2 *GetDeployment200ApplicationJSON1GitRepo2
	GetDeployment200ApplicationJSON1GitRepo3 *GetDeployment200ApplicationJSON1GitRepo3

	Type GetDeployment200ApplicationJSON1GitRepoType
}

func CreateGetDeployment200ApplicationJSON1GitRepoGetDeployment200ApplicationJSON1GitRepo1(getDeployment200ApplicationJSON1GitRepo1 GetDeployment200ApplicationJSON1GitRepo1) GetDeployment200ApplicationJSON1GitRepo {
	typ := GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo1

	return GetDeployment200ApplicationJSON1GitRepo{
		GetDeployment200ApplicationJSON1GitRepo1: &getDeployment200ApplicationJSON1GitRepo1,
		Type:                                     typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitRepoGetDeployment200ApplicationJSON1GitRepo2(getDeployment200ApplicationJSON1GitRepo2 GetDeployment200ApplicationJSON1GitRepo2) GetDeployment200ApplicationJSON1GitRepo {
	typ := GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo2

	return GetDeployment200ApplicationJSON1GitRepo{
		GetDeployment200ApplicationJSON1GitRepo2: &getDeployment200ApplicationJSON1GitRepo2,
		Type:                                     typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitRepoGetDeployment200ApplicationJSON1GitRepo3(getDeployment200ApplicationJSON1GitRepo3 GetDeployment200ApplicationJSON1GitRepo3) GetDeployment200ApplicationJSON1GitRepo {
	typ := GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo3

	return GetDeployment200ApplicationJSON1GitRepo{
		GetDeployment200ApplicationJSON1GitRepo3: &getDeployment200ApplicationJSON1GitRepo3,
		Type:                                     typ,
	}
}

func (u *GetDeployment200ApplicationJSON1GitRepo) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON1GitRepo1 := new(GetDeployment200ApplicationJSON1GitRepo1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitRepo1); err == nil {
		u.GetDeployment200ApplicationJSON1GitRepo1 = getDeployment200ApplicationJSON1GitRepo1
		u.Type = GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo1
		return nil
	}

	getDeployment200ApplicationJSON1GitRepo2 := new(GetDeployment200ApplicationJSON1GitRepo2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitRepo2); err == nil {
		u.GetDeployment200ApplicationJSON1GitRepo2 = getDeployment200ApplicationJSON1GitRepo2
		u.Type = GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo2
		return nil
	}

	getDeployment200ApplicationJSON1GitRepo3 := new(GetDeployment200ApplicationJSON1GitRepo3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitRepo3); err == nil {
		u.GetDeployment200ApplicationJSON1GitRepo3 = getDeployment200ApplicationJSON1GitRepo3
		u.Type = GetDeployment200ApplicationJSON1GitRepoTypeGetDeployment200ApplicationJSON1GitRepo3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1GitRepo) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON1GitRepo1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitRepo1)
	}

	if u.GetDeployment200ApplicationJSON1GitRepo2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitRepo2)
	}

	if u.GetDeployment200ApplicationJSON1GitRepo3 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitRepo3)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON1GitSource9Type string

const (
	GetDeployment200ApplicationJSON1GitSource9TypeBitbucket GetDeployment200ApplicationJSON1GitSource9Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON1GitSource9Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource9Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON1GitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource9Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource9 struct {
	Owner         *string                                        `json:"owner,omitempty"`
	Ref           string                                         `json:"ref"`
	RepoUUID      string                                         `json:"repoUuid"`
	Sha           string                                         `json:"sha"`
	Slug          *string                                        `json:"slug,omitempty"`
	Type          GetDeployment200ApplicationJSON1GitSource9Type `json:"type"`
	WorkspaceUUID string                                         `json:"workspaceUuid"`
}

type GetDeployment200ApplicationJSON1GitSource8Type string

const (
	GetDeployment200ApplicationJSON1GitSource8TypeGitlab GetDeployment200ApplicationJSON1GitSource8Type = "gitlab"
)

func (e GetDeployment200ApplicationJSON1GitSource8Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource8Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeployment200ApplicationJSON1GitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource8Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource8 struct {
	ProjectID int64                                          `json:"projectId"`
	Ref       string                                         `json:"ref"`
	Sha       string                                         `json:"sha"`
	Type      GetDeployment200ApplicationJSON1GitSource8Type `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource7Type string

const (
	GetDeployment200ApplicationJSON1GitSource7TypeGithub GetDeployment200ApplicationJSON1GitSource7Type = "github"
)

func (e GetDeployment200ApplicationJSON1GitSource7Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource7Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON1GitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource7Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource7 struct {
	Org    *string                                        `json:"org,omitempty"`
	Ref    string                                         `json:"ref"`
	Repo   *string                                        `json:"repo,omitempty"`
	RepoID int64                                          `json:"repoId"`
	Sha    string                                         `json:"sha"`
	Type   GetDeployment200ApplicationJSON1GitSource7Type `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource6Type string

const (
	GetDeployment200ApplicationJSON1GitSource6TypeCustom GetDeployment200ApplicationJSON1GitSource6Type = "custom"
)

func (e GetDeployment200ApplicationJSON1GitSource6Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource6Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeployment200ApplicationJSON1GitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource6Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource6 struct {
	GitURL string                                         `json:"gitUrl"`
	Ref    string                                         `json:"ref"`
	Sha    string                                         `json:"sha"`
	Type   GetDeployment200ApplicationJSON1GitSource6Type `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource5Type string

const (
	GetDeployment200ApplicationJSON1GitSource5TypeBitbucket GetDeployment200ApplicationJSON1GitSource5Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON1GitSource5Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource5Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON1GitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource5Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource5 struct {
	Owner string                                         `json:"owner"`
	PrID  *int64                                         `json:"prId,omitempty"`
	Ref   *string                                        `json:"ref,omitempty"`
	Sha   *string                                        `json:"sha,omitempty"`
	Slug  string                                         `json:"slug"`
	Type  GetDeployment200ApplicationJSON1GitSource5Type `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource4Type string

const (
	GetDeployment200ApplicationJSON1GitSource4TypeBitbucket GetDeployment200ApplicationJSON1GitSource4Type = "bitbucket"
)

func (e GetDeployment200ApplicationJSON1GitSource4Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource4Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeployment200ApplicationJSON1GitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource4Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource4 struct {
	PrID          *int64                                         `json:"prId,omitempty"`
	Ref           *string                                        `json:"ref,omitempty"`
	RepoUUID      string                                         `json:"repoUuid"`
	Sha           *string                                        `json:"sha,omitempty"`
	Type          GetDeployment200ApplicationJSON1GitSource4Type `json:"type"`
	WorkspaceUUID *string                                        `json:"workspaceUuid,omitempty"`
}

type GetDeployment200ApplicationJSON1GitSource3ProjectIDType string

const (
	GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeStr     GetDeployment200ApplicationJSON1GitSource3ProjectIDType = "str"
	GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeInteger GetDeployment200ApplicationJSON1GitSource3ProjectIDType = "integer"
)

type GetDeployment200ApplicationJSON1GitSource3ProjectID struct {
	Str     *string
	Integer *int64

	Type GetDeployment200ApplicationJSON1GitSource3ProjectIDType
}

func CreateGetDeployment200ApplicationJSON1GitSource3ProjectIDStr(str string) GetDeployment200ApplicationJSON1GitSource3ProjectID {
	typ := GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeStr

	return GetDeployment200ApplicationJSON1GitSource3ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSource3ProjectIDInteger(integer int64) GetDeployment200ApplicationJSON1GitSource3ProjectID {
	typ := GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeInteger

	return GetDeployment200ApplicationJSON1GitSource3ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GetDeployment200ApplicationJSON1GitSource3ProjectID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetDeployment200ApplicationJSON1GitSource3ProjectIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1GitSource3ProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON1GitSource3Type string

const (
	GetDeployment200ApplicationJSON1GitSource3TypeGitlab GetDeployment200ApplicationJSON1GitSource3Type = "gitlab"
)

func (e GetDeployment200ApplicationJSON1GitSource3Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource3Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeployment200ApplicationJSON1GitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource3Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource3 struct {
	PrID      *int64                                              `json:"prId,omitempty"`
	ProjectID GetDeployment200ApplicationJSON1GitSource3ProjectID `json:"projectId"`
	Ref       *string                                             `json:"ref,omitempty"`
	Sha       *string                                             `json:"sha,omitempty"`
	Type      GetDeployment200ApplicationJSON1GitSource3Type      `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource2Type string

const (
	GetDeployment200ApplicationJSON1GitSource2TypeGithub GetDeployment200ApplicationJSON1GitSource2Type = "github"
)

func (e GetDeployment200ApplicationJSON1GitSource2Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON1GitSource2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource2Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource2 struct {
	Org  string                                         `json:"org"`
	PrID *int64                                         `json:"prId,omitempty"`
	Ref  *string                                        `json:"ref,omitempty"`
	Repo string                                         `json:"repo"`
	Sha  *string                                        `json:"sha,omitempty"`
	Type GetDeployment200ApplicationJSON1GitSource2Type `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSource1RepoIDType string

const (
	GetDeployment200ApplicationJSON1GitSource1RepoIDTypeStr     GetDeployment200ApplicationJSON1GitSource1RepoIDType = "str"
	GetDeployment200ApplicationJSON1GitSource1RepoIDTypeInteger GetDeployment200ApplicationJSON1GitSource1RepoIDType = "integer"
)

type GetDeployment200ApplicationJSON1GitSource1RepoID struct {
	Str     *string
	Integer *int64

	Type GetDeployment200ApplicationJSON1GitSource1RepoIDType
}

func CreateGetDeployment200ApplicationJSON1GitSource1RepoIDStr(str string) GetDeployment200ApplicationJSON1GitSource1RepoID {
	typ := GetDeployment200ApplicationJSON1GitSource1RepoIDTypeStr

	return GetDeployment200ApplicationJSON1GitSource1RepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSource1RepoIDInteger(integer int64) GetDeployment200ApplicationJSON1GitSource1RepoID {
	typ := GetDeployment200ApplicationJSON1GitSource1RepoIDTypeInteger

	return GetDeployment200ApplicationJSON1GitSource1RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GetDeployment200ApplicationJSON1GitSource1RepoID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetDeployment200ApplicationJSON1GitSource1RepoIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GetDeployment200ApplicationJSON1GitSource1RepoIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1GitSource1RepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON1GitSource1Type string

const (
	GetDeployment200ApplicationJSON1GitSource1TypeGithub GetDeployment200ApplicationJSON1GitSource1Type = "github"
)

func (e GetDeployment200ApplicationJSON1GitSource1Type) ToPointer() *GetDeployment200ApplicationJSON1GitSource1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1GitSource1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeployment200ApplicationJSON1GitSource1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1GitSource1Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1GitSource1 struct {
	PrID   *int64                                           `json:"prId,omitempty"`
	Ref    *string                                          `json:"ref,omitempty"`
	RepoID GetDeployment200ApplicationJSON1GitSource1RepoID `json:"repoId"`
	Sha    *string                                          `json:"sha,omitempty"`
	Type   GetDeployment200ApplicationJSON1GitSource1Type   `json:"type"`
}

type GetDeployment200ApplicationJSON1GitSourceType string

const (
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource1 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_1"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource2 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_2"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource3 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_3"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource4 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_4"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource5 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_5"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource6 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_6"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource7 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_7"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource8 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_8"
	GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource9 GetDeployment200ApplicationJSON1GitSourceType = "getDeployment_200ApplicationJSON_1_gitSource_9"
)

type GetDeployment200ApplicationJSON1GitSource struct {
	GetDeployment200ApplicationJSON1GitSource1 *GetDeployment200ApplicationJSON1GitSource1
	GetDeployment200ApplicationJSON1GitSource2 *GetDeployment200ApplicationJSON1GitSource2
	GetDeployment200ApplicationJSON1GitSource3 *GetDeployment200ApplicationJSON1GitSource3
	GetDeployment200ApplicationJSON1GitSource4 *GetDeployment200ApplicationJSON1GitSource4
	GetDeployment200ApplicationJSON1GitSource5 *GetDeployment200ApplicationJSON1GitSource5
	GetDeployment200ApplicationJSON1GitSource6 *GetDeployment200ApplicationJSON1GitSource6
	GetDeployment200ApplicationJSON1GitSource7 *GetDeployment200ApplicationJSON1GitSource7
	GetDeployment200ApplicationJSON1GitSource8 *GetDeployment200ApplicationJSON1GitSource8
	GetDeployment200ApplicationJSON1GitSource9 *GetDeployment200ApplicationJSON1GitSource9

	Type GetDeployment200ApplicationJSON1GitSourceType
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource1(getDeployment200ApplicationJSON1GitSource1 GetDeployment200ApplicationJSON1GitSource1) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource1

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource1: &getDeployment200ApplicationJSON1GitSource1,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource2(getDeployment200ApplicationJSON1GitSource2 GetDeployment200ApplicationJSON1GitSource2) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource2

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource2: &getDeployment200ApplicationJSON1GitSource2,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource3(getDeployment200ApplicationJSON1GitSource3 GetDeployment200ApplicationJSON1GitSource3) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource3

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource3: &getDeployment200ApplicationJSON1GitSource3,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource4(getDeployment200ApplicationJSON1GitSource4 GetDeployment200ApplicationJSON1GitSource4) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource4

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource4: &getDeployment200ApplicationJSON1GitSource4,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource5(getDeployment200ApplicationJSON1GitSource5 GetDeployment200ApplicationJSON1GitSource5) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource5

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource5: &getDeployment200ApplicationJSON1GitSource5,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource6(getDeployment200ApplicationJSON1GitSource6 GetDeployment200ApplicationJSON1GitSource6) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource6

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource6: &getDeployment200ApplicationJSON1GitSource6,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource7(getDeployment200ApplicationJSON1GitSource7 GetDeployment200ApplicationJSON1GitSource7) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource7

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource7: &getDeployment200ApplicationJSON1GitSource7,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource8(getDeployment200ApplicationJSON1GitSource8 GetDeployment200ApplicationJSON1GitSource8) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource8

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource8: &getDeployment200ApplicationJSON1GitSource8,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1GitSourceGetDeployment200ApplicationJSON1GitSource9(getDeployment200ApplicationJSON1GitSource9 GetDeployment200ApplicationJSON1GitSource9) GetDeployment200ApplicationJSON1GitSource {
	typ := GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource9

	return GetDeployment200ApplicationJSON1GitSource{
		GetDeployment200ApplicationJSON1GitSource9: &getDeployment200ApplicationJSON1GitSource9,
		Type: typ,
	}
}

func (u *GetDeployment200ApplicationJSON1GitSource) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON1GitSource6 := new(GetDeployment200ApplicationJSON1GitSource6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource6); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource6 = getDeployment200ApplicationJSON1GitSource6
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource6
		return nil
	}

	getDeployment200ApplicationJSON1GitSource8 := new(GetDeployment200ApplicationJSON1GitSource8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource8); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource8 = getDeployment200ApplicationJSON1GitSource8
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource8
		return nil
	}

	getDeployment200ApplicationJSON1GitSource1 := new(GetDeployment200ApplicationJSON1GitSource1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource1); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource1 = getDeployment200ApplicationJSON1GitSource1
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource1
		return nil
	}

	getDeployment200ApplicationJSON1GitSource3 := new(GetDeployment200ApplicationJSON1GitSource3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource3); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource3 = getDeployment200ApplicationJSON1GitSource3
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource3
		return nil
	}

	getDeployment200ApplicationJSON1GitSource2 := new(GetDeployment200ApplicationJSON1GitSource2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource2); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource2 = getDeployment200ApplicationJSON1GitSource2
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource2
		return nil
	}

	getDeployment200ApplicationJSON1GitSource4 := new(GetDeployment200ApplicationJSON1GitSource4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource4); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource4 = getDeployment200ApplicationJSON1GitSource4
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource4
		return nil
	}

	getDeployment200ApplicationJSON1GitSource5 := new(GetDeployment200ApplicationJSON1GitSource5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource5); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource5 = getDeployment200ApplicationJSON1GitSource5
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource5
		return nil
	}

	getDeployment200ApplicationJSON1GitSource7 := new(GetDeployment200ApplicationJSON1GitSource7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource7); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource7 = getDeployment200ApplicationJSON1GitSource7
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource7
		return nil
	}

	getDeployment200ApplicationJSON1GitSource9 := new(GetDeployment200ApplicationJSON1GitSource9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1GitSource9); err == nil {
		u.GetDeployment200ApplicationJSON1GitSource9 = getDeployment200ApplicationJSON1GitSource9
		u.Type = GetDeployment200ApplicationJSON1GitSourceTypeGetDeployment200ApplicationJSON1GitSource9
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1GitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON1GitSource6 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource6)
	}

	if u.GetDeployment200ApplicationJSON1GitSource8 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource8)
	}

	if u.GetDeployment200ApplicationJSON1GitSource1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource1)
	}

	if u.GetDeployment200ApplicationJSON1GitSource3 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource3)
	}

	if u.GetDeployment200ApplicationJSON1GitSource2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource2)
	}

	if u.GetDeployment200ApplicationJSON1GitSource4 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource4)
	}

	if u.GetDeployment200ApplicationJSON1GitSource5 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource5)
	}

	if u.GetDeployment200ApplicationJSON1GitSource7 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource7)
	}

	if u.GetDeployment200ApplicationJSON1GitSource9 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1GitSource9)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON1LambdasOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

type GetDeployment200ApplicationJSON1LambdasReadyState string

const (
	GetDeployment200ApplicationJSON1LambdasReadyStateBuilding     GetDeployment200ApplicationJSON1LambdasReadyState = "BUILDING"
	GetDeployment200ApplicationJSON1LambdasReadyStateError        GetDeployment200ApplicationJSON1LambdasReadyState = "ERROR"
	GetDeployment200ApplicationJSON1LambdasReadyStateInitializing GetDeployment200ApplicationJSON1LambdasReadyState = "INITIALIZING"
	GetDeployment200ApplicationJSON1LambdasReadyStateReady        GetDeployment200ApplicationJSON1LambdasReadyState = "READY"
)

func (e GetDeployment200ApplicationJSON1LambdasReadyState) ToPointer() *GetDeployment200ApplicationJSON1LambdasReadyState {
	return &e
}

func (e *GetDeployment200ApplicationJSON1LambdasReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeployment200ApplicationJSON1LambdasReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1LambdasReadyState: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Lambdas struct {
	CreatedAt    *int64                                             `json:"createdAt,omitempty"`
	Entrypoint   *string                                            `json:"entrypoint,omitempty"`
	ID           string                                             `json:"id"`
	Output       []GetDeployment200ApplicationJSON1LambdasOutput    `json:"output"`
	ReadyState   *GetDeployment200ApplicationJSON1LambdasReadyState `json:"readyState,omitempty"`
	ReadyStateAt *int64                                             `json:"readyStateAt,omitempty"`
}

// GetDeployment200ApplicationJSON1Plan - The pricing plan the deployment was made under
type GetDeployment200ApplicationJSON1Plan string

const (
	GetDeployment200ApplicationJSON1PlanPro        GetDeployment200ApplicationJSON1Plan = "pro"
	GetDeployment200ApplicationJSON1PlanEnterprise GetDeployment200ApplicationJSON1Plan = "enterprise"
	GetDeployment200ApplicationJSON1PlanHobby      GetDeployment200ApplicationJSON1Plan = "hobby"
	GetDeployment200ApplicationJSON1PlanOss        GetDeployment200ApplicationJSON1Plan = "oss"
)

func (e GetDeployment200ApplicationJSON1Plan) ToPointer() *GetDeployment200ApplicationJSON1Plan {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Plan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = GetDeployment200ApplicationJSON1Plan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Plan: %v", v)
	}
}

// GetDeployment200ApplicationJSON1ReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type GetDeployment200ApplicationJSON1ReadyState string

const (
	GetDeployment200ApplicationJSON1ReadyStateQueued       GetDeployment200ApplicationJSON1ReadyState = "QUEUED"
	GetDeployment200ApplicationJSON1ReadyStateBuilding     GetDeployment200ApplicationJSON1ReadyState = "BUILDING"
	GetDeployment200ApplicationJSON1ReadyStateError        GetDeployment200ApplicationJSON1ReadyState = "ERROR"
	GetDeployment200ApplicationJSON1ReadyStateInitializing GetDeployment200ApplicationJSON1ReadyState = "INITIALIZING"
	GetDeployment200ApplicationJSON1ReadyStateReady        GetDeployment200ApplicationJSON1ReadyState = "READY"
	GetDeployment200ApplicationJSON1ReadyStateCanceled     GetDeployment200ApplicationJSON1ReadyState = "CANCELED"
)

func (e GetDeployment200ApplicationJSON1ReadyState) ToPointer() *GetDeployment200ApplicationJSON1ReadyState {
	return &e
}

func (e *GetDeployment200ApplicationJSON1ReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeployment200ApplicationJSON1ReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1ReadyState: %v", v)
	}
}

// GetDeployment200ApplicationJSON1ReadySubstate - The substate of the deployment when the state is "READY"
type GetDeployment200ApplicationJSON1ReadySubstate string

const (
	GetDeployment200ApplicationJSON1ReadySubstateStaged   GetDeployment200ApplicationJSON1ReadySubstate = "STAGED"
	GetDeployment200ApplicationJSON1ReadySubstatePromoted GetDeployment200ApplicationJSON1ReadySubstate = "PROMOTED"
)

func (e GetDeployment200ApplicationJSON1ReadySubstate) ToPointer() *GetDeployment200ApplicationJSON1ReadySubstate {
	return &e
}

func (e *GetDeployment200ApplicationJSON1ReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeployment200ApplicationJSON1ReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1ReadySubstate: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Routes3Middleware int64

const (
	GetDeployment200ApplicationJSON1Routes3MiddlewareZero GetDeployment200ApplicationJSON1Routes3Middleware = 0
)

func (e GetDeployment200ApplicationJSON1Routes3Middleware) ToPointer() *GetDeployment200ApplicationJSON1Routes3Middleware {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes3Middleware) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		*e = GetDeployment200ApplicationJSON1Routes3Middleware(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes3Middleware: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Routes3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeployment200ApplicationJSON1Routes3 struct {
	Continue   bool                                              `json:"continue"`
	Middleware GetDeployment200ApplicationJSON1Routes3Middleware `json:"middleware"`
	Src        string                                            `json:"src"`
}

type GetDeployment200ApplicationJSON1Routes2Handle string

const (
	GetDeployment200ApplicationJSON1Routes2HandleError      GetDeployment200ApplicationJSON1Routes2Handle = "error"
	GetDeployment200ApplicationJSON1Routes2HandleFilesystem GetDeployment200ApplicationJSON1Routes2Handle = "filesystem"
	GetDeployment200ApplicationJSON1Routes2HandleHit        GetDeployment200ApplicationJSON1Routes2Handle = "hit"
	GetDeployment200ApplicationJSON1Routes2HandleMiss       GetDeployment200ApplicationJSON1Routes2Handle = "miss"
	GetDeployment200ApplicationJSON1Routes2HandleRewrite    GetDeployment200ApplicationJSON1Routes2Handle = "rewrite"
	GetDeployment200ApplicationJSON1Routes2HandleResource   GetDeployment200ApplicationJSON1Routes2Handle = "resource"
)

func (e GetDeployment200ApplicationJSON1Routes2Handle) ToPointer() *GetDeployment200ApplicationJSON1Routes2Handle {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes2Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = GetDeployment200ApplicationJSON1Routes2Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes2Handle: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Routes2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeployment200ApplicationJSON1Routes2 struct {
	Dest   *string                                       `json:"dest,omitempty"`
	Handle GetDeployment200ApplicationJSON1Routes2Handle `json:"handle"`
	Src    *string                                       `json:"src,omitempty"`
	Status *int64                                        `json:"status,omitempty"`
}

type GetDeployment200ApplicationJSON1Routes1Has2Type string

const (
	GetDeployment200ApplicationJSON1Routes1Has2TypeHeader GetDeployment200ApplicationJSON1Routes1Has2Type = "header"
	GetDeployment200ApplicationJSON1Routes1Has2TypeCookie GetDeployment200ApplicationJSON1Routes1Has2Type = "cookie"
	GetDeployment200ApplicationJSON1Routes1Has2TypeQuery  GetDeployment200ApplicationJSON1Routes1Has2Type = "query"
)

func (e GetDeployment200ApplicationJSON1Routes1Has2Type) ToPointer() *GetDeployment200ApplicationJSON1Routes1Has2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes1Has2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeployment200ApplicationJSON1Routes1Has2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes1Has2Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Routes1Has2 struct {
	Key   string                                          `json:"key"`
	Type  GetDeployment200ApplicationJSON1Routes1Has2Type `json:"type"`
	Value *string                                         `json:"value,omitempty"`
}

type GetDeployment200ApplicationJSON1Routes1Has1Type string

const (
	GetDeployment200ApplicationJSON1Routes1Has1TypeHost GetDeployment200ApplicationJSON1Routes1Has1Type = "host"
)

func (e GetDeployment200ApplicationJSON1Routes1Has1Type) ToPointer() *GetDeployment200ApplicationJSON1Routes1Has1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes1Has1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeployment200ApplicationJSON1Routes1Has1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes1Has1Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Routes1Has1 struct {
	Type  GetDeployment200ApplicationJSON1Routes1Has1Type `json:"type"`
	Value string                                          `json:"value"`
}

type GetDeployment200ApplicationJSON1Routes1HasType string

const (
	GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has1 GetDeployment200ApplicationJSON1Routes1HasType = "getDeployment_200ApplicationJSON_1_routes_1_has_1"
	GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has2 GetDeployment200ApplicationJSON1Routes1HasType = "getDeployment_200ApplicationJSON_1_routes_1_has_2"
)

type GetDeployment200ApplicationJSON1Routes1Has struct {
	GetDeployment200ApplicationJSON1Routes1Has1 *GetDeployment200ApplicationJSON1Routes1Has1
	GetDeployment200ApplicationJSON1Routes1Has2 *GetDeployment200ApplicationJSON1Routes1Has2

	Type GetDeployment200ApplicationJSON1Routes1HasType
}

func CreateGetDeployment200ApplicationJSON1Routes1HasGetDeployment200ApplicationJSON1Routes1Has1(getDeployment200ApplicationJSON1Routes1Has1 GetDeployment200ApplicationJSON1Routes1Has1) GetDeployment200ApplicationJSON1Routes1Has {
	typ := GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has1

	return GetDeployment200ApplicationJSON1Routes1Has{
		GetDeployment200ApplicationJSON1Routes1Has1: &getDeployment200ApplicationJSON1Routes1Has1,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1Routes1HasGetDeployment200ApplicationJSON1Routes1Has2(getDeployment200ApplicationJSON1Routes1Has2 GetDeployment200ApplicationJSON1Routes1Has2) GetDeployment200ApplicationJSON1Routes1Has {
	typ := GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has2

	return GetDeployment200ApplicationJSON1Routes1Has{
		GetDeployment200ApplicationJSON1Routes1Has2: &getDeployment200ApplicationJSON1Routes1Has2,
		Type: typ,
	}
}

func (u *GetDeployment200ApplicationJSON1Routes1Has) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON1Routes1Has1 := new(GetDeployment200ApplicationJSON1Routes1Has1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes1Has1); err == nil {
		u.GetDeployment200ApplicationJSON1Routes1Has1 = getDeployment200ApplicationJSON1Routes1Has1
		u.Type = GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has1
		return nil
	}

	getDeployment200ApplicationJSON1Routes1Has2 := new(GetDeployment200ApplicationJSON1Routes1Has2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes1Has2); err == nil {
		u.GetDeployment200ApplicationJSON1Routes1Has2 = getDeployment200ApplicationJSON1Routes1Has2
		u.Type = GetDeployment200ApplicationJSON1Routes1HasTypeGetDeployment200ApplicationJSON1Routes1Has2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1Routes1Has) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON1Routes1Has1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes1Has1)
	}

	if u.GetDeployment200ApplicationJSON1Routes1Has2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes1Has2)
	}

	return nil, nil
}

type GetDeployment200ApplicationJSON1Routes1Locale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

type GetDeployment200ApplicationJSON1Routes1Missing2Type string

const (
	GetDeployment200ApplicationJSON1Routes1Missing2TypeHeader GetDeployment200ApplicationJSON1Routes1Missing2Type = "header"
	GetDeployment200ApplicationJSON1Routes1Missing2TypeCookie GetDeployment200ApplicationJSON1Routes1Missing2Type = "cookie"
	GetDeployment200ApplicationJSON1Routes1Missing2TypeQuery  GetDeployment200ApplicationJSON1Routes1Missing2Type = "query"
)

func (e GetDeployment200ApplicationJSON1Routes1Missing2Type) ToPointer() *GetDeployment200ApplicationJSON1Routes1Missing2Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeployment200ApplicationJSON1Routes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes1Missing2Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Routes1Missing2 struct {
	Key   string                                              `json:"key"`
	Type  GetDeployment200ApplicationJSON1Routes1Missing2Type `json:"type"`
	Value *string                                             `json:"value,omitempty"`
}

type GetDeployment200ApplicationJSON1Routes1Missing1Type string

const (
	GetDeployment200ApplicationJSON1Routes1Missing1TypeHost GetDeployment200ApplicationJSON1Routes1Missing1Type = "host"
)

func (e GetDeployment200ApplicationJSON1Routes1Missing1Type) ToPointer() *GetDeployment200ApplicationJSON1Routes1Missing1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Routes1Missing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeployment200ApplicationJSON1Routes1Missing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Routes1Missing1Type: %v", v)
	}
}

type GetDeployment200ApplicationJSON1Routes1Missing1 struct {
	Type  GetDeployment200ApplicationJSON1Routes1Missing1Type `json:"type"`
	Value string                                              `json:"value"`
}

type GetDeployment200ApplicationJSON1Routes1MissingType string

const (
	GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing1 GetDeployment200ApplicationJSON1Routes1MissingType = "getDeployment_200ApplicationJSON_1_routes_1_missing_1"
	GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing2 GetDeployment200ApplicationJSON1Routes1MissingType = "getDeployment_200ApplicationJSON_1_routes_1_missing_2"
)

type GetDeployment200ApplicationJSON1Routes1Missing struct {
	GetDeployment200ApplicationJSON1Routes1Missing1 *GetDeployment200ApplicationJSON1Routes1Missing1
	GetDeployment200ApplicationJSON1Routes1Missing2 *GetDeployment200ApplicationJSON1Routes1Missing2

	Type GetDeployment200ApplicationJSON1Routes1MissingType
}

func CreateGetDeployment200ApplicationJSON1Routes1MissingGetDeployment200ApplicationJSON1Routes1Missing1(getDeployment200ApplicationJSON1Routes1Missing1 GetDeployment200ApplicationJSON1Routes1Missing1) GetDeployment200ApplicationJSON1Routes1Missing {
	typ := GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing1

	return GetDeployment200ApplicationJSON1Routes1Missing{
		GetDeployment200ApplicationJSON1Routes1Missing1: &getDeployment200ApplicationJSON1Routes1Missing1,
		Type: typ,
	}
}

func CreateGetDeployment200ApplicationJSON1Routes1MissingGetDeployment200ApplicationJSON1Routes1Missing2(getDeployment200ApplicationJSON1Routes1Missing2 GetDeployment200ApplicationJSON1Routes1Missing2) GetDeployment200ApplicationJSON1Routes1Missing {
	typ := GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing2

	return GetDeployment200ApplicationJSON1Routes1Missing{
		GetDeployment200ApplicationJSON1Routes1Missing2: &getDeployment200ApplicationJSON1Routes1Missing2,
		Type: typ,
	}
}

func (u *GetDeployment200ApplicationJSON1Routes1Missing) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON1Routes1Missing1 := new(GetDeployment200ApplicationJSON1Routes1Missing1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes1Missing1); err == nil {
		u.GetDeployment200ApplicationJSON1Routes1Missing1 = getDeployment200ApplicationJSON1Routes1Missing1
		u.Type = GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing1
		return nil
	}

	getDeployment200ApplicationJSON1Routes1Missing2 := new(GetDeployment200ApplicationJSON1Routes1Missing2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes1Missing2); err == nil {
		u.GetDeployment200ApplicationJSON1Routes1Missing2 = getDeployment200ApplicationJSON1Routes1Missing2
		u.Type = GetDeployment200ApplicationJSON1Routes1MissingTypeGetDeployment200ApplicationJSON1Routes1Missing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1Routes1Missing) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON1Routes1Missing1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes1Missing1)
	}

	if u.GetDeployment200ApplicationJSON1Routes1Missing2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes1Missing2)
	}

	return nil, nil
}

// GetDeployment200ApplicationJSON1Routes1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeployment200ApplicationJSON1Routes1 struct {
	CaseSensitive *bool                                          `json:"caseSensitive,omitempty"`
	Check         *bool                                          `json:"check,omitempty"`
	Continue      *bool                                          `json:"continue,omitempty"`
	Dest          *string                                        `json:"dest,omitempty"`
	Has           []GetDeployment200ApplicationJSON1Routes1Has   `json:"has,omitempty"`
	Headers       map[string]string                              `json:"headers,omitempty"`
	Important     *bool                                          `json:"important,omitempty"`
	Locale        *GetDeployment200ApplicationJSON1Routes1Locale `json:"locale,omitempty"`
	Methods       []string                                       `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *int64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string                                         `json:"middlewareRawSrc,omitempty"`
	Missing          []GetDeployment200ApplicationJSON1Routes1Missing `json:"missing,omitempty"`
	Override         *bool                                            `json:"override,omitempty"`
	Src              string                                           `json:"src"`
	Status           *int64                                           `json:"status,omitempty"`
}

type GetDeployment200ApplicationJSON1RoutesType string

const (
	GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes1 GetDeployment200ApplicationJSON1RoutesType = "getDeployment_200ApplicationJSON_1_routes_1"
	GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes2 GetDeployment200ApplicationJSON1RoutesType = "getDeployment_200ApplicationJSON_1_routes_2"
	GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes3 GetDeployment200ApplicationJSON1RoutesType = "getDeployment_200ApplicationJSON_1_routes_3"
)

type GetDeployment200ApplicationJSON1Routes struct {
	GetDeployment200ApplicationJSON1Routes1 *GetDeployment200ApplicationJSON1Routes1
	GetDeployment200ApplicationJSON1Routes2 *GetDeployment200ApplicationJSON1Routes2
	GetDeployment200ApplicationJSON1Routes3 *GetDeployment200ApplicationJSON1Routes3

	Type GetDeployment200ApplicationJSON1RoutesType
}

func CreateGetDeployment200ApplicationJSON1RoutesGetDeployment200ApplicationJSON1Routes1(getDeployment200ApplicationJSON1Routes1 GetDeployment200ApplicationJSON1Routes1) GetDeployment200ApplicationJSON1Routes {
	typ := GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes1

	return GetDeployment200ApplicationJSON1Routes{
		GetDeployment200ApplicationJSON1Routes1: &getDeployment200ApplicationJSON1Routes1,
		Type:                                    typ,
	}
}

func CreateGetDeployment200ApplicationJSON1RoutesGetDeployment200ApplicationJSON1Routes2(getDeployment200ApplicationJSON1Routes2 GetDeployment200ApplicationJSON1Routes2) GetDeployment200ApplicationJSON1Routes {
	typ := GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes2

	return GetDeployment200ApplicationJSON1Routes{
		GetDeployment200ApplicationJSON1Routes2: &getDeployment200ApplicationJSON1Routes2,
		Type:                                    typ,
	}
}

func CreateGetDeployment200ApplicationJSON1RoutesGetDeployment200ApplicationJSON1Routes3(getDeployment200ApplicationJSON1Routes3 GetDeployment200ApplicationJSON1Routes3) GetDeployment200ApplicationJSON1Routes {
	typ := GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes3

	return GetDeployment200ApplicationJSON1Routes{
		GetDeployment200ApplicationJSON1Routes3: &getDeployment200ApplicationJSON1Routes3,
		Type:                                    typ,
	}
}

func (u *GetDeployment200ApplicationJSON1Routes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON1Routes3 := new(GetDeployment200ApplicationJSON1Routes3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes3); err == nil {
		u.GetDeployment200ApplicationJSON1Routes3 = getDeployment200ApplicationJSON1Routes3
		u.Type = GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes3
		return nil
	}

	getDeployment200ApplicationJSON1Routes2 := new(GetDeployment200ApplicationJSON1Routes2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes2); err == nil {
		u.GetDeployment200ApplicationJSON1Routes2 = getDeployment200ApplicationJSON1Routes2
		u.Type = GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes2
		return nil
	}

	getDeployment200ApplicationJSON1Routes1 := new(GetDeployment200ApplicationJSON1Routes1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1Routes1); err == nil {
		u.GetDeployment200ApplicationJSON1Routes1 = getDeployment200ApplicationJSON1Routes1
		u.Type = GetDeployment200ApplicationJSON1RoutesTypeGetDeployment200ApplicationJSON1Routes1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON1Routes) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON1Routes3 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes3)
	}

	if u.GetDeployment200ApplicationJSON1Routes2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes2)
	}

	if u.GetDeployment200ApplicationJSON1Routes1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1Routes1)
	}

	return nil, nil
}

// GetDeployment200ApplicationJSON1Source - Where was the deployment created from
type GetDeployment200ApplicationJSON1Source string

const (
	GetDeployment200ApplicationJSON1SourceCli        GetDeployment200ApplicationJSON1Source = "cli"
	GetDeployment200ApplicationJSON1SourceGit        GetDeployment200ApplicationJSON1Source = "git"
	GetDeployment200ApplicationJSON1SourceImport     GetDeployment200ApplicationJSON1Source = "import"
	GetDeployment200ApplicationJSON1SourceImportRepo GetDeployment200ApplicationJSON1Source = "import/repo"
	GetDeployment200ApplicationJSON1SourceCloneRepo  GetDeployment200ApplicationJSON1Source = "clone/repo"
)

func (e GetDeployment200ApplicationJSON1Source) ToPointer() *GetDeployment200ApplicationJSON1Source {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		*e = GetDeployment200ApplicationJSON1Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Source: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Target - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type GetDeployment200ApplicationJSON1Target string

const (
	GetDeployment200ApplicationJSON1TargetStaging    GetDeployment200ApplicationJSON1Target = "staging"
	GetDeployment200ApplicationJSON1TargetProduction GetDeployment200ApplicationJSON1Target = "production"
)

func (e GetDeployment200ApplicationJSON1Target) ToPointer() *GetDeployment200ApplicationJSON1Target {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeployment200ApplicationJSON1Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Target: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Team - The team that owns the deployment if any
type GetDeployment200ApplicationJSON1Team struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

type GetDeployment200ApplicationJSON1Type string

const (
	GetDeployment200ApplicationJSON1TypeLambdas GetDeployment200ApplicationJSON1Type = "LAMBDAS"
)

func (e GetDeployment200ApplicationJSON1Type) ToPointer() *GetDeployment200ApplicationJSON1Type {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeployment200ApplicationJSON1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Type: %v", v)
	}
}

// GetDeployment200ApplicationJSON1Version - The platform version that was used to create the deployment.
type GetDeployment200ApplicationJSON1Version int64

const (
	GetDeployment200ApplicationJSON1VersionTwo GetDeployment200ApplicationJSON1Version = 2
)

func (e GetDeployment200ApplicationJSON1Version) ToPointer() *GetDeployment200ApplicationJSON1Version {
	return &e
}

func (e *GetDeployment200ApplicationJSON1Version) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		*e = GetDeployment200ApplicationJSON1Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeployment200ApplicationJSON1Version: %v", v)
	}
}

// GetDeployment200ApplicationJSON1 - The deployment including both public and private information
type GetDeployment200ApplicationJSON1 struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                                             `json:"aliasAssigned"`
	AliasAssignedAt *GetDeployment200ApplicationJSON1AliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *GetDeployment200ApplicationJSON1AliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                           `json:"aliasFinal,omitempty"`
	AliasWarning            *GetDeployment200ApplicationJSON1AliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                          `json:"automaticAliases,omitempty"`
	BootedAt                int64                                             `json:"bootedAt"`
	Build                   GetDeployment200ApplicationJSON1Build             `json:"build"`
	BuildErrorAt            *int64                                            `json:"buildErrorAt,omitempty"`
	BuildingAt              int64                                             `json:"buildingAt"`
	Builds                  []GetDeployment200ApplicationJSON1Builds          `json:"builds,omitempty"`
	CanceledAt              *int64                                            `json:"canceledAt,omitempty"`
	ChecksConclusion        *GetDeployment200ApplicationJSON1ChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *GetDeployment200ApplicationJSON1ChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt int64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator GetDeployment200ApplicationJSON1Creator `json:"creator"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]GetDeployment200ApplicationJSON1Functions `json:"functions,omitempty"`
	GitRepo   *GetDeployment200ApplicationJSON1GitRepo             `json:"gitRepo,omitempty"`
	GitSource *GetDeployment200ApplicationJSON1GitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                                      `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []GetDeployment200ApplicationJSON1Lambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The pricing plan the deployment was made under
	Plan GetDeployment200ApplicationJSON1Plan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState GetDeployment200ApplicationJSON1ReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *GetDeployment200ApplicationJSON1ReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []GetDeployment200ApplicationJSON1Routes `json:"routes"`
	// Where was the deployment created from
	Source *GetDeployment200ApplicationJSON1Source `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *GetDeployment200ApplicationJSON1Target `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *GetDeployment200ApplicationJSON1Team `json:"team,omitempty"`
	Type GetDeployment200ApplicationJSON1Type  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version GetDeployment200ApplicationJSON1Version `json:"version"`
}

type GetDeployment200ApplicationJSONType string

const (
	GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON1 GetDeployment200ApplicationJSONType = "getDeployment_200ApplicationJSON_1"
	GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON2 GetDeployment200ApplicationJSONType = "getDeployment_200ApplicationJSON_2"
)

type GetDeployment200ApplicationJSON struct {
	GetDeployment200ApplicationJSON1 *GetDeployment200ApplicationJSON1
	GetDeployment200ApplicationJSON2 *GetDeployment200ApplicationJSON2

	Type GetDeployment200ApplicationJSONType
}

func CreateGetDeployment200ApplicationJSONGetDeployment200ApplicationJSON1(getDeployment200ApplicationJSON1 GetDeployment200ApplicationJSON1) GetDeployment200ApplicationJSON {
	typ := GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON1

	return GetDeployment200ApplicationJSON{
		GetDeployment200ApplicationJSON1: &getDeployment200ApplicationJSON1,
		Type:                             typ,
	}
}

func CreateGetDeployment200ApplicationJSONGetDeployment200ApplicationJSON2(getDeployment200ApplicationJSON2 GetDeployment200ApplicationJSON2) GetDeployment200ApplicationJSON {
	typ := GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON2

	return GetDeployment200ApplicationJSON{
		GetDeployment200ApplicationJSON2: &getDeployment200ApplicationJSON2,
		Type:                             typ,
	}
}

func (u *GetDeployment200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getDeployment200ApplicationJSON2 := new(GetDeployment200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON2); err == nil {
		u.GetDeployment200ApplicationJSON2 = getDeployment200ApplicationJSON2
		u.Type = GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON2
		return nil
	}

	getDeployment200ApplicationJSON1 := new(GetDeployment200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getDeployment200ApplicationJSON1); err == nil {
		u.GetDeployment200ApplicationJSON1 = getDeployment200ApplicationJSON1
		u.Type = GetDeployment200ApplicationJSONTypeGetDeployment200ApplicationJSON1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDeployment200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetDeployment200ApplicationJSON2 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON2)
	}

	if u.GetDeployment200ApplicationJSON1 != nil {
		return json.Marshal(u.GetDeployment200ApplicationJSON1)
	}

	return nil, nil
}

type GetDeploymentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The deployment including only public information
	// The deployment including both public and private information
	GetDeployment200ApplicationJSONOneOf *GetDeployment200ApplicationJSON
}
