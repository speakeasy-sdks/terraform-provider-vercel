// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetConfigurableLogDrainSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetConfigurableLogDrainRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type GetConfigurableLogDrain200ApplicationJSONCreatedFrom string

const (
	GetConfigurableLogDrain200ApplicationJSONCreatedFromSelfServed GetConfigurableLogDrain200ApplicationJSONCreatedFrom = "self-served"
)

func (e GetConfigurableLogDrain200ApplicationJSONCreatedFrom) ToPointer() *GetConfigurableLogDrain200ApplicationJSONCreatedFrom {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetConfigurableLogDrain200ApplicationJSONCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONCreatedFrom: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSONDeliveryFormat string

const (
	GetConfigurableLogDrain200ApplicationJSONDeliveryFormatJSON   GetConfigurableLogDrain200ApplicationJSONDeliveryFormat = "json"
	GetConfigurableLogDrain200ApplicationJSONDeliveryFormatNdjson GetConfigurableLogDrain200ApplicationJSONDeliveryFormat = "ndjson"
	GetConfigurableLogDrain200ApplicationJSONDeliveryFormatSyslog GetConfigurableLogDrain200ApplicationJSONDeliveryFormat = "syslog"
)

func (e GetConfigurableLogDrain200ApplicationJSONDeliveryFormat) ToPointer() *GetConfigurableLogDrain200ApplicationJSONDeliveryFormat {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = GetConfigurableLogDrain200ApplicationJSONDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONDeliveryFormat: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSONDisabledReason string

const (
	GetConfigurableLogDrain200ApplicationJSONDisabledReasonLogDrainHighErrorRate         GetConfigurableLogDrain200ApplicationJSONDisabledReason = "log-drain-high-error-rate"
	GetConfigurableLogDrain200ApplicationJSONDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurableLogDrain200ApplicationJSONDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurableLogDrain200ApplicationJSONDisabledReasonDisabledByAdmin               GetConfigurableLogDrain200ApplicationJSONDisabledReason = "disabled-by-admin"
	GetConfigurableLogDrain200ApplicationJSONDisabledReasonAccountPlanDowngrade          GetConfigurableLogDrain200ApplicationJSONDisabledReason = "account-plan-downgrade"
)

func (e GetConfigurableLogDrain200ApplicationJSONDisabledReason) ToPointer() *GetConfigurableLogDrain200ApplicationJSONDisabledReason {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "account-plan-downgrade":
		*e = GetConfigurableLogDrain200ApplicationJSONDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONDisabledReason: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSONEnvironment string

const (
	GetConfigurableLogDrain200ApplicationJSONEnvironmentProduction GetConfigurableLogDrain200ApplicationJSONEnvironment = "production"
	GetConfigurableLogDrain200ApplicationJSONEnvironmentPreview    GetConfigurableLogDrain200ApplicationJSONEnvironment = "preview"
)

func (e GetConfigurableLogDrain200ApplicationJSONEnvironment) ToPointer() *GetConfigurableLogDrain200ApplicationJSONEnvironment {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetConfigurableLogDrain200ApplicationJSONEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONEnvironment: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSONSources string

const (
	GetConfigurableLogDrain200ApplicationJSONSourcesStatic     GetConfigurableLogDrain200ApplicationJSONSources = "static"
	GetConfigurableLogDrain200ApplicationJSONSourcesLambda     GetConfigurableLogDrain200ApplicationJSONSources = "lambda"
	GetConfigurableLogDrain200ApplicationJSONSourcesBuild      GetConfigurableLogDrain200ApplicationJSONSources = "build"
	GetConfigurableLogDrain200ApplicationJSONSourcesEdge       GetConfigurableLogDrain200ApplicationJSONSources = "edge"
	GetConfigurableLogDrain200ApplicationJSONSourcesExternal   GetConfigurableLogDrain200ApplicationJSONSources = "external"
	GetConfigurableLogDrain200ApplicationJSONSourcesDeployment GetConfigurableLogDrain200ApplicationJSONSources = "deployment"
)

func (e GetConfigurableLogDrain200ApplicationJSONSources) ToPointer() *GetConfigurableLogDrain200ApplicationJSONSources {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "deployment":
		*e = GetConfigurableLogDrain200ApplicationJSONSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONSources: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSONStatus string

const (
	GetConfigurableLogDrain200ApplicationJSONStatusEnabled  GetConfigurableLogDrain200ApplicationJSONStatus = "enabled"
	GetConfigurableLogDrain200ApplicationJSONStatusDisabled GetConfigurableLogDrain200ApplicationJSONStatus = "disabled"
	GetConfigurableLogDrain200ApplicationJSONStatusErrored  GetConfigurableLogDrain200ApplicationJSONStatus = "errored"
)

func (e GetConfigurableLogDrain200ApplicationJSONStatus) ToPointer() *GetConfigurableLogDrain200ApplicationJSONStatus {
	return &e
}

func (e *GetConfigurableLogDrain200ApplicationJSONStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetConfigurableLogDrain200ApplicationJSONStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrain200ApplicationJSONStatus: %v", v)
	}
}

type GetConfigurableLogDrain200ApplicationJSON struct {
	Branch              *string                                                  `json:"branch,omitempty"`
	ClientID            *string                                                  `json:"clientId,omitempty"`
	ConfigurationID     *string                                                  `json:"configurationId,omitempty"`
	CreatedAt           int64                                                    `json:"createdAt"`
	CreatedFrom         *GetConfigurableLogDrain200ApplicationJSONCreatedFrom    `json:"createdFrom,omitempty"`
	DeliveryFormat      GetConfigurableLogDrain200ApplicationJSONDeliveryFormat  `json:"deliveryFormat"`
	DisabledAt          *int64                                                   `json:"disabledAt,omitempty"`
	DisabledBy          *string                                                  `json:"disabledBy,omitempty"`
	DisabledReason      *GetConfigurableLogDrain200ApplicationJSONDisabledReason `json:"disabledReason,omitempty"`
	Environment         *GetConfigurableLogDrain200ApplicationJSONEnvironment    `json:"environment,omitempty"`
	FirstErrorTimestamp *int64                                                   `json:"firstErrorTimestamp,omitempty"`
	Headers             map[string]string                                        `json:"headers,omitempty"`
	ID                  string                                                   `json:"id"`
	Name                string                                                   `json:"name"`
	OwnerID             string                                                   `json:"ownerId"`
	ProjectIds          []string                                                 `json:"projectIds,omitempty"`
	Secret              string                                                   `json:"secret"`
	Sources             []GetConfigurableLogDrain200ApplicationJSONSources       `json:"sources,omitempty"`
	Status              *GetConfigurableLogDrain200ApplicationJSONStatus         `json:"status,omitempty"`
	TeamID              *string                                                  `json:"teamId,omitempty"`
	URL                 string                                                   `json:"url"`
}

type GetConfigurableLogDrainResponse struct {
	ContentType                                     string
	StatusCode                                      int
	RawResponse                                     *http.Response
	GetConfigurableLogDrain200ApplicationJSONObject *GetConfigurableLogDrain200ApplicationJSON
}
