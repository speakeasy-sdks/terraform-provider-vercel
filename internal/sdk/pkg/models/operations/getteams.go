// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

type GetTeamsRequest struct {
	// Maximum number of Teams which may be returned.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp (in milliseconds) to only include Teams created since then.
	Since *int64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp (in milliseconds) to only include Teams created until then.
	Until *int64 `queryParam:"style=form,explode=true,name=until"`
}

type GetTeams200ApplicationJSONTeamsType string

const (
	GetTeams200ApplicationJSONTeamsTypeTeam        GetTeams200ApplicationJSONTeamsType = "Team"
	GetTeams200ApplicationJSONTeamsTypeTeamLimited GetTeams200ApplicationJSONTeamsType = "TeamLimited"
)

type GetTeams200ApplicationJSONTeams struct {
	Team        *shared.Team
	TeamLimited *shared.TeamLimited

	Type GetTeams200ApplicationJSONTeamsType
}

func CreateGetTeams200ApplicationJSONTeamsTeam(team shared.Team) GetTeams200ApplicationJSONTeams {
	typ := GetTeams200ApplicationJSONTeamsTypeTeam

	return GetTeams200ApplicationJSONTeams{
		Team: &team,
		Type: typ,
	}
}

func CreateGetTeams200ApplicationJSONTeamsTeamLimited(teamLimited shared.TeamLimited) GetTeams200ApplicationJSONTeams {
	typ := GetTeams200ApplicationJSONTeamsTypeTeamLimited

	return GetTeams200ApplicationJSONTeams{
		TeamLimited: &teamLimited,
		Type:        typ,
	}
}

func (u *GetTeams200ApplicationJSONTeams) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	team := new(shared.Team)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&team); err == nil {
		u.Team = team
		u.Type = GetTeams200ApplicationJSONTeamsTypeTeam
		return nil
	}

	teamLimited := new(shared.TeamLimited)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&teamLimited); err == nil {
		u.TeamLimited = teamLimited
		u.Type = GetTeams200ApplicationJSONTeamsTypeTeamLimited
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTeams200ApplicationJSONTeams) MarshalJSON() ([]byte, error) {
	if u.Team != nil {
		return json.Marshal(u.Team)
	}

	if u.TeamLimited != nil {
		return json.Marshal(u.TeamLimited)
	}

	return nil, nil
}

// GetTeams200ApplicationJSON - A paginated list of teams.
type GetTeams200ApplicationJSON struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination                 `json:"pagination"`
	Teams      []GetTeams200ApplicationJSONTeams `json:"teams"`
}

type GetTeamsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A paginated list of teams.
	GetTeams200ApplicationJSONObject *GetTeams200ApplicationJSON
}
