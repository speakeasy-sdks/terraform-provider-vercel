// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateLogDrainRequestBodyDeliveryFormat - The delivery log format
type CreateLogDrainRequestBodyDeliveryFormat string

const (
	CreateLogDrainRequestBodyDeliveryFormatJSON   CreateLogDrainRequestBodyDeliveryFormat = "json"
	CreateLogDrainRequestBodyDeliveryFormatNdjson CreateLogDrainRequestBodyDeliveryFormat = "ndjson"
	CreateLogDrainRequestBodyDeliveryFormatSyslog CreateLogDrainRequestBodyDeliveryFormat = "syslog"
)

func (e CreateLogDrainRequestBodyDeliveryFormat) ToPointer() *CreateLogDrainRequestBodyDeliveryFormat {
	return &e
}

func (e *CreateLogDrainRequestBodyDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = CreateLogDrainRequestBodyDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainRequestBodyDeliveryFormat: %v", v)
	}
}

// CreateLogDrainRequestBodyEnvironment - The environment of log drain
type CreateLogDrainRequestBodyEnvironment string

const (
	CreateLogDrainRequestBodyEnvironmentPreview    CreateLogDrainRequestBodyEnvironment = "preview"
	CreateLogDrainRequestBodyEnvironmentProduction CreateLogDrainRequestBodyEnvironment = "production"
)

func (e CreateLogDrainRequestBodyEnvironment) ToPointer() *CreateLogDrainRequestBodyEnvironment {
	return &e
}

func (e *CreateLogDrainRequestBodyEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = CreateLogDrainRequestBodyEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainRequestBodyEnvironment: %v", v)
	}
}

type CreateLogDrainRequestBodySources string

const (
	CreateLogDrainRequestBodySourcesStatic   CreateLogDrainRequestBodySources = "static"
	CreateLogDrainRequestBodySourcesLambda   CreateLogDrainRequestBodySources = "lambda"
	CreateLogDrainRequestBodySourcesBuild    CreateLogDrainRequestBodySources = "build"
	CreateLogDrainRequestBodySourcesEdge     CreateLogDrainRequestBodySources = "edge"
	CreateLogDrainRequestBodySourcesExternal CreateLogDrainRequestBodySources = "external"
)

func (e CreateLogDrainRequestBodySources) ToPointer() *CreateLogDrainRequestBodySources {
	return &e
}

func (e *CreateLogDrainRequestBodySources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		*e = CreateLogDrainRequestBodySources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainRequestBodySources: %v", v)
	}
}

type CreateLogDrainRequestBody struct {
	// The branch regexp of log drain
	Branch *string `json:"branch,omitempty"`
	// The delivery log format
	DeliveryFormat *CreateLogDrainRequestBodyDeliveryFormat `json:"deliveryFormat,omitempty"`
	// The environment of log drain
	Environment *CreateLogDrainRequestBodyEnvironment `json:"environment,omitempty"`
	// Headers to be sent together with the request
	Headers map[string]string `json:"headers,omitempty"`
	// The name of the log drain
	Name       string   `json:"name"`
	ProjectIds []string `json:"projectIds,omitempty"`
	// A secret to sign log drain notification headers so a consumer can verify their authenticity
	Secret  *string                            `json:"secret,omitempty"`
	Sources []CreateLogDrainRequestBodySources `json:"sources,omitempty"`
	// The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`, and `syslog+tls:` or `syslog:` when the type is `syslog`.
	URL string `json:"url"`
}

type CreateLogDrainRequest struct {
	RequestBody *CreateLogDrainRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

// CreateLogDrain200ApplicationJSONCreatedFrom - Whether the log drain was created by an integration or by a user
type CreateLogDrain200ApplicationJSONCreatedFrom string

const (
	CreateLogDrain200ApplicationJSONCreatedFromSelfServed  CreateLogDrain200ApplicationJSONCreatedFrom = "self-served"
	CreateLogDrain200ApplicationJSONCreatedFromIntegration CreateLogDrain200ApplicationJSONCreatedFrom = "integration"
)

func (e CreateLogDrain200ApplicationJSONCreatedFrom) ToPointer() *CreateLogDrain200ApplicationJSONCreatedFrom {
	return &e
}

func (e *CreateLogDrain200ApplicationJSONCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = CreateLogDrain200ApplicationJSONCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrain200ApplicationJSONCreatedFrom: %v", v)
	}
}

// CreateLogDrain200ApplicationJSONDeliveryFormat - The delivery log format
type CreateLogDrain200ApplicationJSONDeliveryFormat string

const (
	CreateLogDrain200ApplicationJSONDeliveryFormatJSON   CreateLogDrain200ApplicationJSONDeliveryFormat = "json"
	CreateLogDrain200ApplicationJSONDeliveryFormatNdjson CreateLogDrain200ApplicationJSONDeliveryFormat = "ndjson"
	CreateLogDrain200ApplicationJSONDeliveryFormatSyslog CreateLogDrain200ApplicationJSONDeliveryFormat = "syslog"
)

func (e CreateLogDrain200ApplicationJSONDeliveryFormat) ToPointer() *CreateLogDrain200ApplicationJSONDeliveryFormat {
	return &e
}

func (e *CreateLogDrain200ApplicationJSONDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = CreateLogDrain200ApplicationJSONDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrain200ApplicationJSONDeliveryFormat: %v", v)
	}
}

// CreateLogDrain200ApplicationJSONEnvironment - The environment of log drain
type CreateLogDrain200ApplicationJSONEnvironment string

const (
	CreateLogDrain200ApplicationJSONEnvironmentPreview    CreateLogDrain200ApplicationJSONEnvironment = "preview"
	CreateLogDrain200ApplicationJSONEnvironmentProduction CreateLogDrain200ApplicationJSONEnvironment = "production"
)

func (e CreateLogDrain200ApplicationJSONEnvironment) ToPointer() *CreateLogDrain200ApplicationJSONEnvironment {
	return &e
}

func (e *CreateLogDrain200ApplicationJSONEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = CreateLogDrain200ApplicationJSONEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrain200ApplicationJSONEnvironment: %v", v)
	}
}

// CreateLogDrain200ApplicationJSONSources - The sources from which logs are currently being delivered to this log drain.
type CreateLogDrain200ApplicationJSONSources string

const (
	CreateLogDrain200ApplicationJSONSourcesStatic     CreateLogDrain200ApplicationJSONSources = "static"
	CreateLogDrain200ApplicationJSONSourcesLambda     CreateLogDrain200ApplicationJSONSources = "lambda"
	CreateLogDrain200ApplicationJSONSourcesBuild      CreateLogDrain200ApplicationJSONSources = "build"
	CreateLogDrain200ApplicationJSONSourcesEdge       CreateLogDrain200ApplicationJSONSources = "edge"
	CreateLogDrain200ApplicationJSONSourcesExternal   CreateLogDrain200ApplicationJSONSources = "external"
	CreateLogDrain200ApplicationJSONSourcesDeployment CreateLogDrain200ApplicationJSONSources = "deployment"
)

func (e CreateLogDrain200ApplicationJSONSources) ToPointer() *CreateLogDrain200ApplicationJSONSources {
	return &e
}

func (e *CreateLogDrain200ApplicationJSONSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "deployment":
		*e = CreateLogDrain200ApplicationJSONSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrain200ApplicationJSONSources: %v", v)
	}
}

// CreateLogDrain200ApplicationJSON - The log drain was successfully created
type CreateLogDrain200ApplicationJSON struct {
	// The branch regexp of log drain
	Branch *string `json:"branch,omitempty"`
	// The oauth2 client application id that created this log drain
	ClientID *string `json:"clientId,omitempty"`
	// The client configuration this log drain was created with
	ConfigurationID *string `json:"configurationId,omitempty"`
	// A timestamp that tells you when the log drain was created
	CreatedAt int64 `json:"createdAt"`
	// Whether the log drain was created by an integration or by a user
	CreatedFrom *CreateLogDrain200ApplicationJSONCreatedFrom `json:"createdFrom,omitempty"`
	// The delivery log format
	DeliveryFormat *CreateLogDrain200ApplicationJSONDeliveryFormat `json:"deliveryFormat,omitempty"`
	// The environment of log drain
	Environment *CreateLogDrain200ApplicationJSONEnvironment `json:"environment,omitempty"`
	// The headers to send with the request
	Headers map[string]string `json:"headers,omitempty"`
	// The unique identifier of the log drain. Always prefixed with `ld_`
	ID string `json:"id"`
	// The name of the log drain
	Name string `json:"name"`
	// The identifier of the team or user whose events will trigger the log drain
	OwnerID   string  `json:"ownerId"`
	ProjectID *string `json:"projectId,omitempty"`
	// The identifier of the projects this log drain is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
	// The sources from which logs are currently being delivered to this log drain.
	Sources []CreateLogDrain200ApplicationJSONSources `json:"sources,omitempty"`
	// The URL to call when logs are generated
	URL string `json:"url"`
}

type CreateLogDrainResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The log drain was successfully created
	CreateLogDrain200ApplicationJSONObject *CreateLogDrain200ApplicationJSON
}
