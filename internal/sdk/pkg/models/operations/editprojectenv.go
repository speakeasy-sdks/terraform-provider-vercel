// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type EditProjectEnvRequestBodyTarget string

const (
	EditProjectEnvRequestBodyTargetProduction  EditProjectEnvRequestBodyTarget = "production"
	EditProjectEnvRequestBodyTargetPreview     EditProjectEnvRequestBodyTarget = "preview"
	EditProjectEnvRequestBodyTargetDevelopment EditProjectEnvRequestBodyTarget = "development"
)

func (e EditProjectEnvRequestBodyTarget) ToPointer() *EditProjectEnvRequestBodyTarget {
	return &e
}

func (e *EditProjectEnvRequestBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvRequestBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvRequestBodyTarget: %v", v)
	}
}

// EditProjectEnvRequestBodyType - The type of environment variable
type EditProjectEnvRequestBodyType string

const (
	EditProjectEnvRequestBodyTypeSystem    EditProjectEnvRequestBodyType = "system"
	EditProjectEnvRequestBodyTypeSecret    EditProjectEnvRequestBodyType = "secret"
	EditProjectEnvRequestBodyTypeEncrypted EditProjectEnvRequestBodyType = "encrypted"
	EditProjectEnvRequestBodyTypePlain     EditProjectEnvRequestBodyType = "plain"
	EditProjectEnvRequestBodyTypeSensitive EditProjectEnvRequestBodyType = "sensitive"
)

func (e EditProjectEnvRequestBodyType) ToPointer() *EditProjectEnvRequestBodyType {
	return &e
}

func (e *EditProjectEnvRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EditProjectEnvRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvRequestBodyType: %v", v)
	}
}

type EditProjectEnvRequestBody struct {
	// The git branch of the environment variable
	GitBranch *string `json:"gitBranch,omitempty"`
	// The name of the environment variable
	Key *string `json:"key,omitempty"`
	// The target environment of the environment variable
	Target []EditProjectEnvRequestBodyTarget `json:"target,omitempty"`
	// The type of environment variable
	Type *EditProjectEnvRequestBodyType `json:"type,omitempty"`
	// The value of the environment variable
	Value *string `json:"value,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _EditProjectEnvRequestBody EditProjectEnvRequestBody

func (c *EditProjectEnvRequestBody) UnmarshalJSON(bs []byte) error {
	data := _EditProjectEnvRequestBody{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = EditProjectEnvRequestBody(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "gitBranch")
	delete(additionalFields, "key")
	delete(additionalFields, "target")
	delete(additionalFields, "type")
	delete(additionalFields, "value")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c EditProjectEnvRequestBody) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_EditProjectEnvRequestBody(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type EditProjectEnvRequest struct {
	RequestBody *EditProjectEnvRequestBody `request:"mediaType=application/json"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type EditProjectEnv200ApplicationJSONContentHint12Type string

const (
	EditProjectEnv200ApplicationJSONContentHint12TypePostgresDatabase EditProjectEnv200ApplicationJSONContentHint12Type = "postgres-database"
)

func (e EditProjectEnv200ApplicationJSONContentHint12Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint12Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = EditProjectEnv200ApplicationJSONContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint12Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint12 struct {
	StoreID string                                            `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint12Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint11Type string

const (
	EditProjectEnv200ApplicationJSONContentHint11TypePostgresPassword EditProjectEnv200ApplicationJSONContentHint11Type = "postgres-password"
)

func (e EditProjectEnv200ApplicationJSONContentHint11Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint11Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = EditProjectEnv200ApplicationJSONContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint11Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint11 struct {
	StoreID string                                            `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint11Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint10Type string

const (
	EditProjectEnv200ApplicationJSONContentHint10TypePostgresHost EditProjectEnv200ApplicationJSONContentHint10Type = "postgres-host"
)

func (e EditProjectEnv200ApplicationJSONContentHint10Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint10Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = EditProjectEnv200ApplicationJSONContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint10Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint10 struct {
	StoreID string                                            `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint10Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint9Type string

const (
	EditProjectEnv200ApplicationJSONContentHint9TypePostgresUser EditProjectEnv200ApplicationJSONContentHint9Type = "postgres-user"
)

func (e EditProjectEnv200ApplicationJSONContentHint9Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint9Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = EditProjectEnv200ApplicationJSONContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint9Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint9 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint9Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint8Type string

const (
	EditProjectEnv200ApplicationJSONContentHint8TypePostgresPrismaURL EditProjectEnv200ApplicationJSONContentHint8Type = "postgres-prisma-url"
)

func (e EditProjectEnv200ApplicationJSONContentHint8Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint8Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = EditProjectEnv200ApplicationJSONContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint8Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint8 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint8Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint7Type string

const (
	EditProjectEnv200ApplicationJSONContentHint7TypePostgresURLNonPooling EditProjectEnv200ApplicationJSONContentHint7Type = "postgres-url-non-pooling"
)

func (e EditProjectEnv200ApplicationJSONContentHint7Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint7Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = EditProjectEnv200ApplicationJSONContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint7Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint7 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint7Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint6Type string

const (
	EditProjectEnv200ApplicationJSONContentHint6TypePostgresURL EditProjectEnv200ApplicationJSONContentHint6Type = "postgres-url"
)

func (e EditProjectEnv200ApplicationJSONContentHint6Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint6Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = EditProjectEnv200ApplicationJSONContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint6Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint6 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint6Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint5Type string

const (
	EditProjectEnv200ApplicationJSONContentHint5TypeBlobReadWriteToken EditProjectEnv200ApplicationJSONContentHint5Type = "blob-read-write-token"
)

func (e EditProjectEnv200ApplicationJSONContentHint5Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint5Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = EditProjectEnv200ApplicationJSONContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint5Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint5 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint5Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint4Type string

const (
	EditProjectEnv200ApplicationJSONContentHint4TypeRedisRestAPIReadOnlyToken EditProjectEnv200ApplicationJSONContentHint4Type = "redis-rest-api-read-only-token"
)

func (e EditProjectEnv200ApplicationJSONContentHint4Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint4Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = EditProjectEnv200ApplicationJSONContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint4Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint4 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint4Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint3Type string

const (
	EditProjectEnv200ApplicationJSONContentHint3TypeRedisRestAPIToken EditProjectEnv200ApplicationJSONContentHint3Type = "redis-rest-api-token"
)

func (e EditProjectEnv200ApplicationJSONContentHint3Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint3Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = EditProjectEnv200ApplicationJSONContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint3Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint3 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint3Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint2Type string

const (
	EditProjectEnv200ApplicationJSONContentHint2TypeRedisRestAPIURL EditProjectEnv200ApplicationJSONContentHint2Type = "redis-rest-api-url"
)

func (e EditProjectEnv200ApplicationJSONContentHint2Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint2Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = EditProjectEnv200ApplicationJSONContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint2Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint2 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint2Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHint1Type string

const (
	EditProjectEnv200ApplicationJSONContentHint1TypeRedisURL EditProjectEnv200ApplicationJSONContentHint1Type = "redis-url"
)

func (e EditProjectEnv200ApplicationJSONContentHint1Type) ToPointer() *EditProjectEnv200ApplicationJSONContentHint1Type {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = EditProjectEnv200ApplicationJSONContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONContentHint1Type: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONContentHint1 struct {
	StoreID string                                           `json:"storeId"`
	Type    EditProjectEnv200ApplicationJSONContentHint1Type `json:"type"`
}

type EditProjectEnv200ApplicationJSONContentHintType string

const (
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint1  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_1"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint2  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_2"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint3  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_3"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint4  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_4"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint5  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_5"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint6  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_6"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint7  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_7"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint8  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_8"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint9  EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_9"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint10 EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_10"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint11 EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_11"
	EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint12 EditProjectEnv200ApplicationJSONContentHintType = "editProjectEnv_200ApplicationJSON_contentHint_12"
)

type EditProjectEnv200ApplicationJSONContentHint struct {
	EditProjectEnv200ApplicationJSONContentHint1  *EditProjectEnv200ApplicationJSONContentHint1
	EditProjectEnv200ApplicationJSONContentHint2  *EditProjectEnv200ApplicationJSONContentHint2
	EditProjectEnv200ApplicationJSONContentHint3  *EditProjectEnv200ApplicationJSONContentHint3
	EditProjectEnv200ApplicationJSONContentHint4  *EditProjectEnv200ApplicationJSONContentHint4
	EditProjectEnv200ApplicationJSONContentHint5  *EditProjectEnv200ApplicationJSONContentHint5
	EditProjectEnv200ApplicationJSONContentHint6  *EditProjectEnv200ApplicationJSONContentHint6
	EditProjectEnv200ApplicationJSONContentHint7  *EditProjectEnv200ApplicationJSONContentHint7
	EditProjectEnv200ApplicationJSONContentHint8  *EditProjectEnv200ApplicationJSONContentHint8
	EditProjectEnv200ApplicationJSONContentHint9  *EditProjectEnv200ApplicationJSONContentHint9
	EditProjectEnv200ApplicationJSONContentHint10 *EditProjectEnv200ApplicationJSONContentHint10
	EditProjectEnv200ApplicationJSONContentHint11 *EditProjectEnv200ApplicationJSONContentHint11
	EditProjectEnv200ApplicationJSONContentHint12 *EditProjectEnv200ApplicationJSONContentHint12

	Type EditProjectEnv200ApplicationJSONContentHintType
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint1(editProjectEnv200ApplicationJSONContentHint1 EditProjectEnv200ApplicationJSONContentHint1) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint1

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint1: &editProjectEnv200ApplicationJSONContentHint1,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint2(editProjectEnv200ApplicationJSONContentHint2 EditProjectEnv200ApplicationJSONContentHint2) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint2

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint2: &editProjectEnv200ApplicationJSONContentHint2,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint3(editProjectEnv200ApplicationJSONContentHint3 EditProjectEnv200ApplicationJSONContentHint3) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint3

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint3: &editProjectEnv200ApplicationJSONContentHint3,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint4(editProjectEnv200ApplicationJSONContentHint4 EditProjectEnv200ApplicationJSONContentHint4) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint4

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint4: &editProjectEnv200ApplicationJSONContentHint4,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint5(editProjectEnv200ApplicationJSONContentHint5 EditProjectEnv200ApplicationJSONContentHint5) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint5

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint5: &editProjectEnv200ApplicationJSONContentHint5,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint6(editProjectEnv200ApplicationJSONContentHint6 EditProjectEnv200ApplicationJSONContentHint6) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint6

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint6: &editProjectEnv200ApplicationJSONContentHint6,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint7(editProjectEnv200ApplicationJSONContentHint7 EditProjectEnv200ApplicationJSONContentHint7) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint7

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint7: &editProjectEnv200ApplicationJSONContentHint7,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint8(editProjectEnv200ApplicationJSONContentHint8 EditProjectEnv200ApplicationJSONContentHint8) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint8

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint8: &editProjectEnv200ApplicationJSONContentHint8,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint9(editProjectEnv200ApplicationJSONContentHint9 EditProjectEnv200ApplicationJSONContentHint9) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint9

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint9: &editProjectEnv200ApplicationJSONContentHint9,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint10(editProjectEnv200ApplicationJSONContentHint10 EditProjectEnv200ApplicationJSONContentHint10) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint10

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint10: &editProjectEnv200ApplicationJSONContentHint10,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint11(editProjectEnv200ApplicationJSONContentHint11 EditProjectEnv200ApplicationJSONContentHint11) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint11

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint11: &editProjectEnv200ApplicationJSONContentHint11,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONContentHintEditProjectEnv200ApplicationJSONContentHint12(editProjectEnv200ApplicationJSONContentHint12 EditProjectEnv200ApplicationJSONContentHint12) EditProjectEnv200ApplicationJSONContentHint {
	typ := EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint12

	return EditProjectEnv200ApplicationJSONContentHint{
		EditProjectEnv200ApplicationJSONContentHint12: &editProjectEnv200ApplicationJSONContentHint12,
		Type: typ,
	}
}

func (u *EditProjectEnv200ApplicationJSONContentHint) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	editProjectEnv200ApplicationJSONContentHint1 := new(EditProjectEnv200ApplicationJSONContentHint1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint1); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint1 = editProjectEnv200ApplicationJSONContentHint1
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint1
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint2 := new(EditProjectEnv200ApplicationJSONContentHint2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint2); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint2 = editProjectEnv200ApplicationJSONContentHint2
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint2
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint3 := new(EditProjectEnv200ApplicationJSONContentHint3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint3); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint3 = editProjectEnv200ApplicationJSONContentHint3
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint3
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint4 := new(EditProjectEnv200ApplicationJSONContentHint4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint4); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint4 = editProjectEnv200ApplicationJSONContentHint4
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint4
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint5 := new(EditProjectEnv200ApplicationJSONContentHint5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint5); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint5 = editProjectEnv200ApplicationJSONContentHint5
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint5
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint6 := new(EditProjectEnv200ApplicationJSONContentHint6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint6); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint6 = editProjectEnv200ApplicationJSONContentHint6
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint6
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint7 := new(EditProjectEnv200ApplicationJSONContentHint7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint7); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint7 = editProjectEnv200ApplicationJSONContentHint7
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint7
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint8 := new(EditProjectEnv200ApplicationJSONContentHint8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint8); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint8 = editProjectEnv200ApplicationJSONContentHint8
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint8
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint9 := new(EditProjectEnv200ApplicationJSONContentHint9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint9); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint9 = editProjectEnv200ApplicationJSONContentHint9
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint9
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint10 := new(EditProjectEnv200ApplicationJSONContentHint10)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint10); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint10 = editProjectEnv200ApplicationJSONContentHint10
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint10
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint11 := new(EditProjectEnv200ApplicationJSONContentHint11)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint11); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint11 = editProjectEnv200ApplicationJSONContentHint11
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint11
		return nil
	}

	editProjectEnv200ApplicationJSONContentHint12 := new(EditProjectEnv200ApplicationJSONContentHint12)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONContentHint12); err == nil {
		u.EditProjectEnv200ApplicationJSONContentHint12 = editProjectEnv200ApplicationJSONContentHint12
		u.Type = EditProjectEnv200ApplicationJSONContentHintTypeEditProjectEnv200ApplicationJSONContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EditProjectEnv200ApplicationJSONContentHint) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnv200ApplicationJSONContentHint1 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint1)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint2 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint2)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint3 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint3)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint4 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint4)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint5 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint5)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint6 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint6)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint7 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint7)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint8 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint8)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint9 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint9)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint10 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint10)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint11 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint11)
	}

	if u.EditProjectEnv200ApplicationJSONContentHint12 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONContentHint12)
	}

	return nil, nil
}

type EditProjectEnv200ApplicationJSONTarget2 string

const (
	EditProjectEnv200ApplicationJSONTarget2Production  EditProjectEnv200ApplicationJSONTarget2 = "production"
	EditProjectEnv200ApplicationJSONTarget2Preview     EditProjectEnv200ApplicationJSONTarget2 = "preview"
	EditProjectEnv200ApplicationJSONTarget2Development EditProjectEnv200ApplicationJSONTarget2 = "development"
)

func (e EditProjectEnv200ApplicationJSONTarget2) ToPointer() *EditProjectEnv200ApplicationJSONTarget2 {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnv200ApplicationJSONTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONTarget2: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONTarget1 string

const (
	EditProjectEnv200ApplicationJSONTarget1Production  EditProjectEnv200ApplicationJSONTarget1 = "production"
	EditProjectEnv200ApplicationJSONTarget1Preview     EditProjectEnv200ApplicationJSONTarget1 = "preview"
	EditProjectEnv200ApplicationJSONTarget1Development EditProjectEnv200ApplicationJSONTarget1 = "development"
)

func (e EditProjectEnv200ApplicationJSONTarget1) ToPointer() *EditProjectEnv200ApplicationJSONTarget1 {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnv200ApplicationJSONTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONTarget1: %v", v)
	}
}

type EditProjectEnv200ApplicationJSONTargetType string

const (
	EditProjectEnv200ApplicationJSONTargetTypeArrayOfeditProjectEnv200ApplicationJSONTarget1 EditProjectEnv200ApplicationJSONTargetType = "arrayOfeditProjectEnv_200ApplicationJSON_target_1"
	EditProjectEnv200ApplicationJSONTargetTypeEditProjectEnv200ApplicationJSONTarget2        EditProjectEnv200ApplicationJSONTargetType = "editProjectEnv_200ApplicationJSON_target_2"
)

type EditProjectEnv200ApplicationJSONTarget struct {
	ArrayOfeditProjectEnv200ApplicationJSONTarget1 []EditProjectEnv200ApplicationJSONTarget1
	EditProjectEnv200ApplicationJSONTarget2        *EditProjectEnv200ApplicationJSONTarget2

	Type EditProjectEnv200ApplicationJSONTargetType
}

func CreateEditProjectEnv200ApplicationJSONTargetArrayOfeditProjectEnv200ApplicationJSONTarget1(arrayOfeditProjectEnv200ApplicationJSONTarget1 []EditProjectEnv200ApplicationJSONTarget1) EditProjectEnv200ApplicationJSONTarget {
	typ := EditProjectEnv200ApplicationJSONTargetTypeArrayOfeditProjectEnv200ApplicationJSONTarget1

	return EditProjectEnv200ApplicationJSONTarget{
		ArrayOfeditProjectEnv200ApplicationJSONTarget1: arrayOfeditProjectEnv200ApplicationJSONTarget1,
		Type: typ,
	}
}

func CreateEditProjectEnv200ApplicationJSONTargetEditProjectEnv200ApplicationJSONTarget2(editProjectEnv200ApplicationJSONTarget2 EditProjectEnv200ApplicationJSONTarget2) EditProjectEnv200ApplicationJSONTarget {
	typ := EditProjectEnv200ApplicationJSONTargetTypeEditProjectEnv200ApplicationJSONTarget2

	return EditProjectEnv200ApplicationJSONTarget{
		EditProjectEnv200ApplicationJSONTarget2: &editProjectEnv200ApplicationJSONTarget2,
		Type:                                    typ,
	}
}

func (u *EditProjectEnv200ApplicationJSONTarget) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfeditProjectEnv200ApplicationJSONTarget1 := []EditProjectEnv200ApplicationJSONTarget1{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfeditProjectEnv200ApplicationJSONTarget1); err == nil {
		u.ArrayOfeditProjectEnv200ApplicationJSONTarget1 = arrayOfeditProjectEnv200ApplicationJSONTarget1
		u.Type = EditProjectEnv200ApplicationJSONTargetTypeArrayOfeditProjectEnv200ApplicationJSONTarget1
		return nil
	}

	editProjectEnv200ApplicationJSONTarget2 := new(EditProjectEnv200ApplicationJSONTarget2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&editProjectEnv200ApplicationJSONTarget2); err == nil {
		u.EditProjectEnv200ApplicationJSONTarget2 = editProjectEnv200ApplicationJSONTarget2
		u.Type = EditProjectEnv200ApplicationJSONTargetTypeEditProjectEnv200ApplicationJSONTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EditProjectEnv200ApplicationJSONTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfeditProjectEnv200ApplicationJSONTarget1 != nil {
		return json.Marshal(u.ArrayOfeditProjectEnv200ApplicationJSONTarget1)
	}

	if u.EditProjectEnv200ApplicationJSONTarget2 != nil {
		return json.Marshal(u.EditProjectEnv200ApplicationJSONTarget2)
	}

	return nil, nil
}

type EditProjectEnv200ApplicationJSONType string

const (
	EditProjectEnv200ApplicationJSONTypeSystem    EditProjectEnv200ApplicationJSONType = "system"
	EditProjectEnv200ApplicationJSONTypeEncrypted EditProjectEnv200ApplicationJSONType = "encrypted"
	EditProjectEnv200ApplicationJSONTypePlain     EditProjectEnv200ApplicationJSONType = "plain"
	EditProjectEnv200ApplicationJSONTypeSensitive EditProjectEnv200ApplicationJSONType = "sensitive"
	EditProjectEnv200ApplicationJSONTypeSecret    EditProjectEnv200ApplicationJSONType = "secret"
)

func (e EditProjectEnv200ApplicationJSONType) ToPointer() *EditProjectEnv200ApplicationJSONType {
	return &e
}

func (e *EditProjectEnv200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = EditProjectEnv200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnv200ApplicationJSONType: %v", v)
	}
}

// EditProjectEnv200ApplicationJSON - The environment variable was successfully edited
type EditProjectEnv200ApplicationJSON struct {
	ConfigurationID *string                                      `json:"configurationId,omitempty"`
	ContentHint     *EditProjectEnv200ApplicationJSONContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                       `json:"createdAt,omitempty"`
	CreatedBy       *string                                      `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                   `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                 `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                 `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                 `json:"gitBranch,omitempty"`
	ID                *string                                 `json:"id,omitempty"`
	Key               string                                  `json:"key"`
	Target            *EditProjectEnv200ApplicationJSONTarget `json:"target,omitempty"`
	Type              EditProjectEnv200ApplicationJSONType    `json:"type"`
	UpdatedAt         *int64                                  `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                 `json:"updatedBy,omitempty"`
	Value             string                                  `json:"value"`
}

type EditProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was successfully edited
	EditProjectEnv200ApplicationJSONObject *EditProjectEnv200ApplicationJSON
}
