// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetDomainRequest struct {
	// The name of the domain.
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetDomainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// GetDomain200ApplicationJSONDomainCreator - An object containing information of the domain creator, including the user's id, username, and email.
type GetDomain200ApplicationJSONDomainCreator struct {
	CustomerID       *string `json:"customerId,omitempty"`
	Email            string  `json:"email"`
	ID               string  `json:"id"`
	IsDomainReseller *bool   `json:"isDomainReseller,omitempty"`
	Username         string  `json:"username"`
}

func (o *GetDomain200ApplicationJSONDomainCreator) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *GetDomain200ApplicationJSONDomainCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetDomain200ApplicationJSONDomainCreator) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDomain200ApplicationJSONDomainCreator) GetIsDomainReseller() *bool {
	if o == nil {
		return nil
	}
	return o.IsDomainReseller
}

func (o *GetDomain200ApplicationJSONDomainCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// GetDomain200ApplicationJSONDomainServiceType - The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
type GetDomain200ApplicationJSONDomainServiceType string

const (
	GetDomain200ApplicationJSONDomainServiceTypeZeitWorld GetDomain200ApplicationJSONDomainServiceType = "zeit.world"
	GetDomain200ApplicationJSONDomainServiceTypeExternal  GetDomain200ApplicationJSONDomainServiceType = "external"
	GetDomain200ApplicationJSONDomainServiceTypeNa        GetDomain200ApplicationJSONDomainServiceType = "na"
)

func (e GetDomain200ApplicationJSONDomainServiceType) ToPointer() *GetDomain200ApplicationJSONDomainServiceType {
	return &e
}

func (e *GetDomain200ApplicationJSONDomainServiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zeit.world":
		fallthrough
	case "external":
		fallthrough
	case "na":
		*e = GetDomain200ApplicationJSONDomainServiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDomain200ApplicationJSONDomainServiceType: %v", v)
	}
}

type GetDomain200ApplicationJSONDomain struct {
	// If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
	BoughtAt *int64 `json:"boughtAt"`
	// Timestamp in milliseconds when the domain was created in the registry.
	CreatedAt int64 `json:"createdAt"`
	// An object containing information of the domain creator, including the user's id, username, and email.
	Creator GetDomain200ApplicationJSONDomainCreator `json:"creator"`
	// A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
	CustomNameservers []string `json:"customNameservers,omitempty"`
	// Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
	ExpiresAt *int64 `json:"expiresAt"`
	// The unique identifier of the domain.
	ID string `json:"id"`
	// A list of the intended nameservers for the domain to point to Vercel DNS.
	IntendedNameservers []string `json:"intendedNameservers"`
	// The domain name.
	Name string `json:"name"`
	// A list of the current nameservers of the domain.
	Nameservers []string `json:"nameservers"`
	// Timestamp in milliseconds at which the domain was ordered.
	OrderedAt *int64 `json:"orderedAt,omitempty"`
	// Indicates whether the domain is set to automatically renew.
	Renew *bool `json:"renew,omitempty"`
	// The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
	ServiceType GetDomain200ApplicationJSONDomainServiceType `json:"serviceType"`
	Suffix      bool                                         `json:"suffix"`
	// If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
	TransferStartedAt *int64 `json:"transferStartedAt,omitempty"`
	// Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
	TransferredAt *int64 `json:"transferredAt,omitempty"`
	// If the domain has the ownership verified.
	Verified bool `json:"verified"`
}

func (o *GetDomain200ApplicationJSONDomain) GetBoughtAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BoughtAt
}

func (o *GetDomain200ApplicationJSONDomain) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetDomain200ApplicationJSONDomain) GetCreator() GetDomain200ApplicationJSONDomainCreator {
	if o == nil {
		return GetDomain200ApplicationJSONDomainCreator{}
	}
	return o.Creator
}

func (o *GetDomain200ApplicationJSONDomain) GetCustomNameservers() []string {
	if o == nil {
		return nil
	}
	return o.CustomNameservers
}

func (o *GetDomain200ApplicationJSONDomain) GetExpiresAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *GetDomain200ApplicationJSONDomain) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDomain200ApplicationJSONDomain) GetIntendedNameservers() []string {
	if o == nil {
		return []string{}
	}
	return o.IntendedNameservers
}

func (o *GetDomain200ApplicationJSONDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDomain200ApplicationJSONDomain) GetNameservers() []string {
	if o == nil {
		return []string{}
	}
	return o.Nameservers
}

func (o *GetDomain200ApplicationJSONDomain) GetOrderedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.OrderedAt
}

func (o *GetDomain200ApplicationJSONDomain) GetRenew() *bool {
	if o == nil {
		return nil
	}
	return o.Renew
}

func (o *GetDomain200ApplicationJSONDomain) GetServiceType() GetDomain200ApplicationJSONDomainServiceType {
	if o == nil {
		return GetDomain200ApplicationJSONDomainServiceType("")
	}
	return o.ServiceType
}

func (o *GetDomain200ApplicationJSONDomain) GetSuffix() bool {
	if o == nil {
		return false
	}
	return o.Suffix
}

func (o *GetDomain200ApplicationJSONDomain) GetTransferStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *GetDomain200ApplicationJSONDomain) GetTransferredAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferredAt
}

func (o *GetDomain200ApplicationJSONDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

// GetDomain200ApplicationJSON - Successful response retrieving an information for a specific domains.
type GetDomain200ApplicationJSON struct {
	Domain GetDomain200ApplicationJSONDomain `json:"domain"`
}

func (o *GetDomain200ApplicationJSON) GetDomain() GetDomain200ApplicationJSONDomain {
	if o == nil {
		return GetDomain200ApplicationJSONDomain{}
	}
	return o.Domain
}

type GetDomainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response retrieving an information for a specific domains.
	GetDomain200ApplicationJSONObject *GetDomain200ApplicationJSON
}

func (o *GetDomainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDomainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDomainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDomainResponse) GetGetDomain200ApplicationJSONObject() *GetDomain200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetDomain200ApplicationJSONObject
}
