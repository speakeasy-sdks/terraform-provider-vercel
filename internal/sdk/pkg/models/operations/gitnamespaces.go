// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// GitNamespacesProvider
type GitNamespacesProvider string

const (
	GitNamespacesProviderGithub    GitNamespacesProvider = "github"
	GitNamespacesProviderGitlab    GitNamespacesProvider = "gitlab"
	GitNamespacesProviderBitbucket GitNamespacesProvider = "bitbucket"
)

func (e GitNamespacesProvider) ToPointer() *GitNamespacesProvider {
	return &e
}

func (e *GitNamespacesProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = GitNamespacesProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitNamespacesProvider: %v", v)
	}
}

type GitNamespacesRequest struct {
	Provider *GitNamespacesProvider `queryParam:"style=form,explode=true,name=provider"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type GitNamespaces200ApplicationJSONIDType string

const (
	GitNamespaces200ApplicationJSONIDTypeStr     GitNamespaces200ApplicationJSONIDType = "str"
	GitNamespaces200ApplicationJSONIDTypeInteger GitNamespaces200ApplicationJSONIDType = "integer"
)

type GitNamespaces200ApplicationJSONID struct {
	Str     *string
	Integer *int64

	Type GitNamespaces200ApplicationJSONIDType
}

func CreateGitNamespaces200ApplicationJSONIDStr(str string) GitNamespaces200ApplicationJSONID {
	typ := GitNamespaces200ApplicationJSONIDTypeStr

	return GitNamespaces200ApplicationJSONID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGitNamespaces200ApplicationJSONIDInteger(integer int64) GitNamespaces200ApplicationJSONID {
	typ := GitNamespaces200ApplicationJSONIDTypeInteger

	return GitNamespaces200ApplicationJSONID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *GitNamespaces200ApplicationJSONID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GitNamespaces200ApplicationJSONIDTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = GitNamespaces200ApplicationJSONIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GitNamespaces200ApplicationJSONID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type GitNamespaces200ApplicationJSON struct {
	ID                 GitNamespaces200ApplicationJSONID `json:"id"`
	InstallationID     *int64                            `json:"installationId,omitempty"`
	IsAccessRestricted *bool                             `json:"isAccessRestricted,omitempty"`
	Name               *string                           `json:"name,omitempty"`
	OwnerType          string                            `json:"ownerType"`
	Provider           string                            `json:"provider"`
	RequireReauth      *bool                             `json:"requireReauth,omitempty"`
	Slug               string                            `json:"slug"`
}

type GitNamespacesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                            *http.Response
	GitNamespaces200ApplicationJSONObjects []GitNamespaces200ApplicationJSON
}
