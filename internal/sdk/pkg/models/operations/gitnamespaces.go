// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/utils"
	"net/http"
)

type Provider string

const (
	ProviderGithub    Provider = "github"
	ProviderGitlab    Provider = "gitlab"
	ProviderBitbucket Provider = "bitbucket"
)

func (e Provider) ToPointer() *Provider {
	return &e
}

func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

type GitNamespacesRequest struct {
	Provider *Provider `queryParam:"style=form,explode=true,name=provider"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GitNamespacesRequest) GetProvider() *Provider {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *GitNamespacesRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type IDType string

const (
	IDTypeStr     IDType = "str"
	IDTypeInteger IDType = "integer"
)

type ID struct {
	Str     *string
	Integer *int64

	Type IDType
}

func CreateIDStr(str string) ID {
	typ := IDTypeStr

	return ID{
		Str:  &str,
		Type: typ,
	}
}

func CreateIDInteger(integer int64) ID {
	typ := IDTypeInteger

	return ID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *ID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = IDTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = IDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GitNamespacesResponseBody struct {
	ID                 ID      `json:"id"`
	InstallationID     *int64  `json:"installationId,omitempty"`
	IsAccessRestricted *bool   `json:"isAccessRestricted,omitempty"`
	Name               *string `json:"name,omitempty"`
	OwnerType          string  `json:"ownerType"`
	Provider           string  `json:"provider"`
	RequireReauth      *bool   `json:"requireReauth,omitempty"`
	Slug               string  `json:"slug"`
}

func (o *GitNamespacesResponseBody) GetID() ID {
	if o == nil {
		return ID{}
	}
	return o.ID
}

func (o *GitNamespacesResponseBody) GetInstallationID() *int64 {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *GitNamespacesResponseBody) GetIsAccessRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.IsAccessRestricted
}

func (o *GitNamespacesResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GitNamespacesResponseBody) GetOwnerType() string {
	if o == nil {
		return ""
	}
	return o.OwnerType
}

func (o *GitNamespacesResponseBody) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *GitNamespacesResponseBody) GetRequireReauth() *bool {
	if o == nil {
		return nil
	}
	return o.RequireReauth
}

func (o *GitNamespacesResponseBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type GitNamespacesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Classes     []GitNamespacesResponseBody
}

func (o *GitNamespacesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GitNamespacesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GitNamespacesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GitNamespacesResponse) GetClasses() []GitNamespacesResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}
