// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateTeamMemberRequestBodyJoinedFrom struct {
	SsoUserID *string `json:"ssoUserId,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateTeamMemberRequestBodyJoinedFrom UpdateTeamMemberRequestBodyJoinedFrom

func (c *UpdateTeamMemberRequestBodyJoinedFrom) UnmarshalJSON(bs []byte) error {
	data := _UpdateTeamMemberRequestBodyJoinedFrom{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateTeamMemberRequestBodyJoinedFrom(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ssoUserId")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateTeamMemberRequestBodyJoinedFrom) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateTeamMemberRequestBodyJoinedFrom(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// UpdateTeamMemberRequestBodyProjectsRole - The project role of the member that will be added. \"null\" will remove this project level role.
type UpdateTeamMemberRequestBodyProjectsRole string

const (
	UpdateTeamMemberRequestBodyProjectsRoleAdmin                  UpdateTeamMemberRequestBodyProjectsRole = "ADMIN"
	UpdateTeamMemberRequestBodyProjectsRoleProjectViewer          UpdateTeamMemberRequestBodyProjectsRole = "PROJECT_VIEWER"
	UpdateTeamMemberRequestBodyProjectsRoleProjectDeveloper       UpdateTeamMemberRequestBodyProjectsRole = "PROJECT_DEVELOPER"
	UpdateTeamMemberRequestBodyProjectsRoleLessThanNilGreaterThan UpdateTeamMemberRequestBodyProjectsRole = "<nil>"
)

func (e UpdateTeamMemberRequestBodyProjectsRole) ToPointer() *UpdateTeamMemberRequestBodyProjectsRole {
	return &e
}

func (e *UpdateTeamMemberRequestBodyProjectsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "<nil>":
		*e = UpdateTeamMemberRequestBodyProjectsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTeamMemberRequestBodyProjectsRole: %v", v)
	}
}

type UpdateTeamMemberRequestBodyProjects struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// The project role of the member that will be added. \"null\" will remove this project level role.
	Role *UpdateTeamMemberRequestBodyProjectsRole `json:"role"`

	AdditionalProperties interface{} `json:"-"`
}
type _UpdateTeamMemberRequestBodyProjects UpdateTeamMemberRequestBodyProjects

func (c *UpdateTeamMemberRequestBodyProjects) UnmarshalJSON(bs []byte) error {
	data := _UpdateTeamMemberRequestBodyProjects{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = UpdateTeamMemberRequestBodyProjects(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "projectId")
	delete(additionalFields, "role")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c UpdateTeamMemberRequestBodyProjects) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_UpdateTeamMemberRequestBodyProjects(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type UpdateTeamMemberRequestBody struct {
	// Accept a user who requested access to the team.
	Confirmed  *bool                                  `json:"confirmed,omitempty"`
	JoinedFrom *UpdateTeamMemberRequestBodyJoinedFrom `json:"joinedFrom,omitempty"`
	Projects   []UpdateTeamMemberRequestBodyProjects  `json:"projects,omitempty"`
	// The role in the team of the member.
	Role *string `json:"role,omitempty"`
}

type UpdateTeamMemberRequest struct {
	RequestBody *UpdateTeamMemberRequestBody `request:"mediaType=application/json"`
	TeamID      string                       `pathParam:"style=simple,explode=false,name=teamId"`
	// The ID of the member.
	UID string `pathParam:"style=simple,explode=false,name=uid"`
}

// UpdateTeamMember200ApplicationJSON - Successfully updated the membership.
type UpdateTeamMember200ApplicationJSON struct {
	// ID of the team.
	ID string `json:"id"`
}

type UpdateTeamMemberResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully updated the membership.
	UpdateTeamMember200ApplicationJSONObject *UpdateTeamMember200ApplicationJSON
}
