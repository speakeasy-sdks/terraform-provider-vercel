// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateRecordRequestBodySrv struct {
	Port     *int64  `json:"port"`
	Priority *int64  `json:"priority"`
	Target   *string `json:"target"`
	Weight   *int64  `json:"weight"`
}

func (o *UpdateRecordRequestBodySrv) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *UpdateRecordRequestBodySrv) GetPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *UpdateRecordRequestBodySrv) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateRecordRequestBodySrv) GetWeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

// UpdateRecordRequestBodyType - The type of the DNS record
type UpdateRecordRequestBodyType string

const (
	UpdateRecordRequestBodyTypeA     UpdateRecordRequestBodyType = "A"
	UpdateRecordRequestBodyTypeAaaa  UpdateRecordRequestBodyType = "AAAA"
	UpdateRecordRequestBodyTypeAlias UpdateRecordRequestBodyType = "ALIAS"
	UpdateRecordRequestBodyTypeCaa   UpdateRecordRequestBodyType = "CAA"
	UpdateRecordRequestBodyTypeCname UpdateRecordRequestBodyType = "CNAME"
	UpdateRecordRequestBodyTypeMx    UpdateRecordRequestBodyType = "MX"
	UpdateRecordRequestBodyTypeSrv   UpdateRecordRequestBodyType = "SRV"
	UpdateRecordRequestBodyTypeTxt   UpdateRecordRequestBodyType = "TXT"
	UpdateRecordRequestBodyTypeNs    UpdateRecordRequestBodyType = "NS"
)

func (e UpdateRecordRequestBodyType) ToPointer() *UpdateRecordRequestBodyType {
	return &e
}

func (e *UpdateRecordRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = UpdateRecordRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRecordRequestBodyType: %v", v)
	}
}

type UpdateRecordRequestBody struct {
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
	// The MX priority value of the DNS record
	MxPriority *int64 `json:"mxPriority,omitempty"`
	// The name of the DNS record
	Name *string                     `json:"name,omitempty"`
	Srv  *UpdateRecordRequestBodySrv `json:"srv,omitempty"`
	// The Time to live (TTL) value of the DNS record
	TTL *int64 `json:"ttl,omitempty"`
	// The type of the DNS record
	Type *UpdateRecordRequestBodyType `json:"type,omitempty"`
	// The value of the DNS record
	Value *string `json:"value,omitempty"`
}

func (o *UpdateRecordRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateRecordRequestBody) GetMxPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.MxPriority
}

func (o *UpdateRecordRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateRecordRequestBody) GetSrv() *UpdateRecordRequestBodySrv {
	if o == nil {
		return nil
	}
	return o.Srv
}

func (o *UpdateRecordRequestBody) GetTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateRecordRequestBody) GetType() *UpdateRecordRequestBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateRecordRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateRecordRequest struct {
	RequestBody *UpdateRecordRequestBody `request:"mediaType=application/json"`
	// The id of the DNS record
	RecordID string `pathParam:"style=simple,explode=false,name=recordId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *UpdateRecordRequest) GetRequestBody() *UpdateRecordRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateRecordRequest) GetRecordID() string {
	if o == nil {
		return ""
	}
	return o.RecordID
}

func (o *UpdateRecordRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type UpdateRecord200ApplicationJSONRecordType string

const (
	UpdateRecord200ApplicationJSONRecordTypeA     UpdateRecord200ApplicationJSONRecordType = "A"
	UpdateRecord200ApplicationJSONRecordTypeAaaa  UpdateRecord200ApplicationJSONRecordType = "AAAA"
	UpdateRecord200ApplicationJSONRecordTypeAlias UpdateRecord200ApplicationJSONRecordType = "ALIAS"
	UpdateRecord200ApplicationJSONRecordTypeCaa   UpdateRecord200ApplicationJSONRecordType = "CAA"
	UpdateRecord200ApplicationJSONRecordTypeCname UpdateRecord200ApplicationJSONRecordType = "CNAME"
	UpdateRecord200ApplicationJSONRecordTypeMx    UpdateRecord200ApplicationJSONRecordType = "MX"
	UpdateRecord200ApplicationJSONRecordTypeSrv   UpdateRecord200ApplicationJSONRecordType = "SRV"
	UpdateRecord200ApplicationJSONRecordTypeTxt   UpdateRecord200ApplicationJSONRecordType = "TXT"
	UpdateRecord200ApplicationJSONRecordTypeNs    UpdateRecord200ApplicationJSONRecordType = "NS"
)

func (e UpdateRecord200ApplicationJSONRecordType) ToPointer() *UpdateRecord200ApplicationJSONRecordType {
	return &e
}

func (e *UpdateRecord200ApplicationJSONRecordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = UpdateRecord200ApplicationJSONRecordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRecord200ApplicationJSONRecordType: %v", v)
	}
}

type UpdateRecord200ApplicationJSONType string

const (
	UpdateRecord200ApplicationJSONTypeRecord    UpdateRecord200ApplicationJSONType = "record"
	UpdateRecord200ApplicationJSONTypeRecordSys UpdateRecord200ApplicationJSONType = "record-sys"
)

func (e UpdateRecord200ApplicationJSONType) ToPointer() *UpdateRecord200ApplicationJSONType {
	return &e
}

func (e *UpdateRecord200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record":
		fallthrough
	case "record-sys":
		*e = UpdateRecord200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRecord200ApplicationJSONType: %v", v)
	}
}

type UpdateRecord200ApplicationJSON struct {
	Comment    *string                                  `json:"comment,omitempty"`
	CreatedAt  *int64                                   `json:"createdAt,omitempty"`
	Creator    string                                   `json:"creator"`
	Domain     string                                   `json:"domain"`
	ID         string                                   `json:"id"`
	Name       string                                   `json:"name"`
	RecordType UpdateRecord200ApplicationJSONRecordType `json:"recordType"`
	TTL        *int64                                   `json:"ttl,omitempty"`
	Type       UpdateRecord200ApplicationJSONType       `json:"type"`
	Value      string                                   `json:"value"`
}

func (o *UpdateRecord200ApplicationJSON) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateRecord200ApplicationJSON) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateRecord200ApplicationJSON) GetCreator() string {
	if o == nil {
		return ""
	}
	return o.Creator
}

func (o *UpdateRecord200ApplicationJSON) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpdateRecord200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateRecord200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateRecord200ApplicationJSON) GetRecordType() UpdateRecord200ApplicationJSONRecordType {
	if o == nil {
		return UpdateRecord200ApplicationJSONRecordType("")
	}
	return o.RecordType
}

func (o *UpdateRecord200ApplicationJSON) GetTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateRecord200ApplicationJSON) GetType() UpdateRecord200ApplicationJSONType {
	if o == nil {
		return UpdateRecord200ApplicationJSONType("")
	}
	return o.Type
}

func (o *UpdateRecord200ApplicationJSON) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateRecordResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                          *http.Response
	UpdateRecord200ApplicationJSONObject *UpdateRecord200ApplicationJSON
}

func (o *UpdateRecordResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateRecordResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateRecordResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateRecordResponse) GetUpdateRecord200ApplicationJSONObject() *UpdateRecord200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.UpdateRecord200ApplicationJSONObject
}
