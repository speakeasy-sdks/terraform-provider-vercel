// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

type CreateAuthTokenType string

const (
	CreateAuthTokenTypeOauth2Token CreateAuthTokenType = "oauth2-token"
)

func (e CreateAuthTokenType) ToPointer() *CreateAuthTokenType {
	return &e
}

func (e *CreateAuthTokenType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2-token":
		*e = CreateAuthTokenType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAuthTokenType: %v", v)
	}
}

type CreateAuthToken2 struct {
	ClientID       *string             `json:"clientId,omitempty"`
	ExpiresAt      *int64              `json:"expiresAt,omitempty"`
	InstallationID *string             `json:"installationId,omitempty"`
	Name           string              `json:"name"`
	Type           CreateAuthTokenType `json:"type"`
}

func (o *CreateAuthToken2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateAuthToken2) GetExpiresAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAuthToken2) GetInstallationID() *string {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *CreateAuthToken2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAuthToken2) GetType() CreateAuthTokenType {
	if o == nil {
		return CreateAuthTokenType("")
	}
	return o.Type
}

type CreateAuthToken1 struct {
	ExpiresAt *int64 `json:"expiresAt,omitempty"`
	Name      string `json:"name"`
}

func (o *CreateAuthToken1) GetExpiresAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateAuthToken1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type CreateAuthTokenRequestBodyType string

const (
	CreateAuthTokenRequestBodyTypeCreateAuthToken1 CreateAuthTokenRequestBodyType = "createAuthToken_1"
	CreateAuthTokenRequestBodyTypeCreateAuthToken2 CreateAuthTokenRequestBodyType = "createAuthToken_2"
)

type CreateAuthTokenRequestBody struct {
	CreateAuthToken1 *CreateAuthToken1
	CreateAuthToken2 *CreateAuthToken2

	Type CreateAuthTokenRequestBodyType
}

func CreateCreateAuthTokenRequestBodyCreateAuthToken1(createAuthToken1 CreateAuthToken1) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyTypeCreateAuthToken1

	return CreateAuthTokenRequestBody{
		CreateAuthToken1: &createAuthToken1,
		Type:             typ,
	}
}

func CreateCreateAuthTokenRequestBodyCreateAuthToken2(createAuthToken2 CreateAuthToken2) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyTypeCreateAuthToken2

	return CreateAuthTokenRequestBody{
		CreateAuthToken2: &createAuthToken2,
		Type:             typ,
	}
}

func (u *CreateAuthTokenRequestBody) UnmarshalJSON(data []byte) error {

	createAuthToken1 := new(CreateAuthToken1)
	if err := utils.UnmarshalJSON(data, &createAuthToken1, "", true, true); err == nil {
		u.CreateAuthToken1 = createAuthToken1
		u.Type = CreateAuthTokenRequestBodyTypeCreateAuthToken1
		return nil
	}

	createAuthToken2 := new(CreateAuthToken2)
	if err := utils.UnmarshalJSON(data, &createAuthToken2, "", true, true); err == nil {
		u.CreateAuthToken2 = createAuthToken2
		u.Type = CreateAuthTokenRequestBodyTypeCreateAuthToken2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAuthTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateAuthToken1 != nil {
		return utils.MarshalJSON(u.CreateAuthToken1, "", true)
	}

	if u.CreateAuthToken2 != nil {
		return utils.MarshalJSON(u.CreateAuthToken2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateAuthTokenRequest struct {
	RequestBody *CreateAuthTokenRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateAuthTokenRequest) GetRequestBody() *CreateAuthTokenRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateAuthTokenRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// CreateAuthTokenResponseBody - Successful response.
type CreateAuthTokenResponseBody struct {
	// The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!
	BearerToken string `json:"bearerToken"`
	// Authentication token metadata.
	Token shared.AuthToken `json:"token"`
}

func (o *CreateAuthTokenResponseBody) GetBearerToken() string {
	if o == nil {
		return ""
	}
	return o.BearerToken
}

func (o *CreateAuthTokenResponseBody) GetToken() shared.AuthToken {
	if o == nil {
		return shared.AuthToken{}
	}
	return o.Token
}

type CreateAuthTokenResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response.
	Object *CreateAuthTokenResponseBody
}

func (o *CreateAuthTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAuthTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAuthTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateAuthTokenResponse) GetObject() *CreateAuthTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
