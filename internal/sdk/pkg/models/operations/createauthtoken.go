// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

type CreateAuthTokenRequestBody2Type string

const (
	CreateAuthTokenRequestBody2TypeOauth2Token CreateAuthTokenRequestBody2Type = "oauth2-token"
)

func (e CreateAuthTokenRequestBody2Type) ToPointer() *CreateAuthTokenRequestBody2Type {
	return &e
}

func (e *CreateAuthTokenRequestBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2-token":
		*e = CreateAuthTokenRequestBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAuthTokenRequestBody2Type: %v", v)
	}
}

type CreateAuthTokenRequestBody2 struct {
	ClientID       *string                         `json:"clientId,omitempty"`
	ExpiresAt      *int64                          `json:"expiresAt,omitempty"`
	InstallationID *string                         `json:"installationId,omitempty"`
	Name           string                          `json:"name"`
	Type           CreateAuthTokenRequestBody2Type `json:"type"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateAuthTokenRequestBody2 CreateAuthTokenRequestBody2

func (c *CreateAuthTokenRequestBody2) UnmarshalJSON(bs []byte) error {
	data := _CreateAuthTokenRequestBody2{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateAuthTokenRequestBody2(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "clientId")
	delete(additionalFields, "expiresAt")
	delete(additionalFields, "installationId")
	delete(additionalFields, "name")
	delete(additionalFields, "type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateAuthTokenRequestBody2) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateAuthTokenRequestBody2(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type CreateAuthTokenRequestBody1 struct {
	ExpiresAt *int64 `json:"expiresAt,omitempty"`
	Name      string `json:"name"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateAuthTokenRequestBody1 CreateAuthTokenRequestBody1

func (c *CreateAuthTokenRequestBody1) UnmarshalJSON(bs []byte) error {
	data := _CreateAuthTokenRequestBody1{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateAuthTokenRequestBody1(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "expiresAt")
	delete(additionalFields, "name")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateAuthTokenRequestBody1) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateAuthTokenRequestBody1(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type CreateAuthTokenRequestBodyType string

const (
	CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody1 CreateAuthTokenRequestBodyType = "createAuthToken_requestBody_1"
	CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody2 CreateAuthTokenRequestBodyType = "createAuthToken_requestBody_2"
)

type CreateAuthTokenRequestBody struct {
	CreateAuthTokenRequestBody1 *CreateAuthTokenRequestBody1
	CreateAuthTokenRequestBody2 *CreateAuthTokenRequestBody2

	Type CreateAuthTokenRequestBodyType
}

func CreateCreateAuthTokenRequestBodyCreateAuthTokenRequestBody1(createAuthTokenRequestBody1 CreateAuthTokenRequestBody1) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody1

	return CreateAuthTokenRequestBody{
		CreateAuthTokenRequestBody1: &createAuthTokenRequestBody1,
		Type:                        typ,
	}
}

func CreateCreateAuthTokenRequestBodyCreateAuthTokenRequestBody2(createAuthTokenRequestBody2 CreateAuthTokenRequestBody2) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody2

	return CreateAuthTokenRequestBody{
		CreateAuthTokenRequestBody2: &createAuthTokenRequestBody2,
		Type:                        typ,
	}
}

func (u *CreateAuthTokenRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createAuthTokenRequestBody1 := new(CreateAuthTokenRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createAuthTokenRequestBody1); err == nil {
		u.CreateAuthTokenRequestBody1 = createAuthTokenRequestBody1
		u.Type = CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody1
		return nil
	}

	createAuthTokenRequestBody2 := new(CreateAuthTokenRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createAuthTokenRequestBody2); err == nil {
		u.CreateAuthTokenRequestBody2 = createAuthTokenRequestBody2
		u.Type = CreateAuthTokenRequestBodyTypeCreateAuthTokenRequestBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAuthTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateAuthTokenRequestBody1 != nil {
		return json.Marshal(u.CreateAuthTokenRequestBody1)
	}

	if u.CreateAuthTokenRequestBody2 != nil {
		return json.Marshal(u.CreateAuthTokenRequestBody2)
	}

	return nil, nil
}

type CreateAuthTokenRequest struct {
	RequestBody *CreateAuthTokenRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

// CreateAuthToken200ApplicationJSON - Successful response.
type CreateAuthToken200ApplicationJSON struct {
	// The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!
	BearerToken string `json:"bearerToken"`
	// Authentication token metadata.
	Token shared.AuthToken `json:"token"`
}

type CreateAuthTokenResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response.
	CreateAuthToken200ApplicationJSONObject *CreateAuthToken200ApplicationJSON
}
