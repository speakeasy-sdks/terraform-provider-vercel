// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type View string

const (
	ViewAccount View = "account"
	ViewProject View = "project"
)

func (e View) ToPointer() *View {
	return &e
}

func (e *View) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "project":
		*e = View(v)
		return nil
	default:
		return fmt.Errorf("invalid value for View: %v", v)
	}
}

type GetConfigurationsRequest struct {
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	View   View    `queryParam:"style=form,explode=true,name=view"`
}

func (o *GetConfigurationsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsRequest) GetView() View {
	if o == nil {
		return View("")
	}
	return o.View
}

type DisabledReason string

const (
	DisabledReasonLogDrainHighErrorRate         DisabledReason = "log-drain-high-error-rate"
	DisabledReasonLogDrainsAddOnDisabledByOwner DisabledReason = "log-drains-add-on-disabled-by-owner"
	DisabledReasonAccountPlanDowngrade          DisabledReason = "account-plan-downgrade"
	DisabledReasonDisabledByAdmin               DisabledReason = "disabled-by-admin"
	DisabledReasonOriginalOwnerLeftTheTeam      DisabledReason = "original-owner-left-the-team"
)

func (e DisabledReason) ToPointer() *DisabledReason {
	return &e
}

func (e *DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledReason: %v", v)
	}
}

type Added string

const (
	AddedReadIntegrationConfiguration      Added = "read:integration-configuration"
	AddedReadWriteIntegrationConfiguration Added = "read-write:integration-configuration"
	AddedReadDeployment                    Added = "read:deployment"
	AddedReadWriteDeployment               Added = "read-write:deployment"
	AddedReadWriteDeploymentCheck          Added = "read-write:deployment-check"
	AddedReadProject                       Added = "read:project"
	AddedReadWriteProject                  Added = "read-write:project"
	AddedReadWriteProjectEnvVars           Added = "read-write:project-env-vars"
	AddedReadWriteGlobalProjectEnvVars     Added = "read-write:global-project-env-vars"
	AddedReadTeam                          Added = "read:team"
	AddedReadUser                          Added = "read:user"
	AddedReadWriteLogDrain                 Added = "read-write:log-drain"
	AddedReadDomain                        Added = "read:domain"
	AddedReadWriteDomain                   Added = "read-write:domain"
	AddedReadWriteEdgeConfig               Added = "read-write:edge-config"
	AddedReadWriteOtelEndpoint             Added = "read-write:otel-endpoint"
	AddedReadMonitoring                    Added = "read:monitoring"
)

func (e Added) ToPointer() *Added {
	return &e
}

func (e *Added) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = Added(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Added: %v", v)
	}
}

type Upgraded string

const (
	UpgradedReadIntegrationConfiguration      Upgraded = "read:integration-configuration"
	UpgradedReadWriteIntegrationConfiguration Upgraded = "read-write:integration-configuration"
	UpgradedReadDeployment                    Upgraded = "read:deployment"
	UpgradedReadWriteDeployment               Upgraded = "read-write:deployment"
	UpgradedReadWriteDeploymentCheck          Upgraded = "read-write:deployment-check"
	UpgradedReadProject                       Upgraded = "read:project"
	UpgradedReadWriteProject                  Upgraded = "read-write:project"
	UpgradedReadWriteProjectEnvVars           Upgraded = "read-write:project-env-vars"
	UpgradedReadWriteGlobalProjectEnvVars     Upgraded = "read-write:global-project-env-vars"
	UpgradedReadTeam                          Upgraded = "read:team"
	UpgradedReadUser                          Upgraded = "read:user"
	UpgradedReadWriteLogDrain                 Upgraded = "read-write:log-drain"
	UpgradedReadDomain                        Upgraded = "read:domain"
	UpgradedReadWriteDomain                   Upgraded = "read-write:domain"
	UpgradedReadWriteEdgeConfig               Upgraded = "read-write:edge-config"
	UpgradedReadWriteOtelEndpoint             Upgraded = "read-write:otel-endpoint"
	UpgradedReadMonitoring                    Upgraded = "read:monitoring"
)

func (e Upgraded) ToPointer() *Upgraded {
	return &e
}

func (e *Upgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = Upgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Upgraded: %v", v)
	}
}

type Scopes struct {
	Added    []Added    `json:"added"`
	Upgraded []Upgraded `json:"upgraded"`
}

func (o *Scopes) GetAdded() []Added {
	if o == nil {
		return []Added{}
	}
	return o.Added
}

func (o *Scopes) GetUpgraded() []Upgraded {
	if o == nil {
		return []Upgraded{}
	}
	return o.Upgraded
}

type ScopesQueue struct {
	ConfirmedAt *int64 `json:"confirmedAt,omitempty"`
	Note        string `json:"note"`
	RequestedAt int64  `json:"requestedAt"`
	Scopes      Scopes `json:"scopes"`
}

func (o *ScopesQueue) GetConfirmedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *ScopesQueue) GetNote() string {
	if o == nil {
		return ""
	}
	return o.Note
}

func (o *ScopesQueue) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *ScopesQueue) GetScopes() Scopes {
	if o == nil {
		return Scopes{}
	}
	return o.Scopes
}

// GetConfigurationsSource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationsSource string

const (
	GetConfigurationsSourceMarketplace  GetConfigurationsSource = "marketplace"
	GetConfigurationsSourceDeployButton GetConfigurationsSource = "deploy-button"
	GetConfigurationsSourceExternal     GetConfigurationsSource = "external"
)

func (e GetConfigurationsSource) ToPointer() *GetConfigurationsSource {
	return &e
}

func (e *GetConfigurationsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurationsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsSource: %v", v)
	}
}

type GetConfigurationsType string

const (
	GetConfigurationsTypeIntegrationConfiguration GetConfigurationsType = "integration-configuration"
)

func (e GetConfigurationsType) ToPointer() *GetConfigurationsType {
	return &e
}

func (e *GetConfigurationsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsType: %v", v)
	}
}

type GetConfigurationsResponseBody struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64          `json:"disabledAt,omitempty"`
	DisabledReason *DisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string      `json:"scopes"`
	ScopesQueue []ScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationsSource `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string               `json:"teamId,omitempty"`
	Type   GetConfigurationsType `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

func (o *GetConfigurationsResponseBody) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurationsResponseBody) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetConfigurationsResponseBody) GetDeletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurationsResponseBody) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurationsResponseBody) GetDisabledReason() *DisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurationsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationsResponseBody) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfigurationsResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurationsResponseBody) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurationsResponseBody) GetRemovedLogDrainsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedLogDrainsAt
}

func (o *GetConfigurationsResponseBody) GetRemovedProjectEnvsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedProjectEnvsAt
}

func (o *GetConfigurationsResponseBody) GetRemovedTokensAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedTokensAt
}

func (o *GetConfigurationsResponseBody) GetRemovedWebhooksAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedWebhooksAt
}

func (o *GetConfigurationsResponseBody) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfigurationsResponseBody) GetScopesQueue() []ScopesQueue {
	if o == nil {
		return nil
	}
	return o.ScopesQueue
}

func (o *GetConfigurationsResponseBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfigurationsResponseBody) GetSource() *GetConfigurationsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurationsResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsResponseBody) GetType() GetConfigurationsType {
	if o == nil {
		return GetConfigurationsType("")
	}
	return o.Type
}

func (o *GetConfigurationsResponseBody) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

func (o *GetConfigurationsResponseBody) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type GetConfigurationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of configurations for the authenticated user
	Classes []GetConfigurationsResponseBody
}

func (o *GetConfigurationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConfigurationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConfigurationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConfigurationsResponse) GetClasses() []GetConfigurationsResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}
