// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetConfigurationsView string

const (
	GetConfigurationsViewAccount GetConfigurationsView = "account"
	GetConfigurationsViewProject GetConfigurationsView = "project"
)

func (e GetConfigurationsView) ToPointer() *GetConfigurationsView {
	return &e
}

func (e *GetConfigurationsView) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "project":
		*e = GetConfigurationsView(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsView: %v", v)
	}
}

type GetConfigurationsRequest struct {
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string               `queryParam:"style=form,explode=true,name=teamId"`
	View   GetConfigurationsView `queryParam:"style=form,explode=true,name=view"`
}

func (o *GetConfigurationsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsRequest) GetView() GetConfigurationsView {
	if o == nil {
		return GetConfigurationsView("")
	}
	return o.View
}

type GetConfigurations200ApplicationJSONDisabledReason string

const (
	GetConfigurations200ApplicationJSONDisabledReasonLogDrainHighErrorRate         GetConfigurations200ApplicationJSONDisabledReason = "log-drain-high-error-rate"
	GetConfigurations200ApplicationJSONDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurations200ApplicationJSONDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurations200ApplicationJSONDisabledReasonAccountPlanDowngrade          GetConfigurations200ApplicationJSONDisabledReason = "account-plan-downgrade"
	GetConfigurations200ApplicationJSONDisabledReasonDisabledByAdmin               GetConfigurations200ApplicationJSONDisabledReason = "disabled-by-admin"
	GetConfigurations200ApplicationJSONDisabledReasonOriginalOwnerLeftTheTeam      GetConfigurations200ApplicationJSONDisabledReason = "original-owner-left-the-team"
)

func (e GetConfigurations200ApplicationJSONDisabledReason) ToPointer() *GetConfigurations200ApplicationJSONDisabledReason {
	return &e
}

func (e *GetConfigurations200ApplicationJSONDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = GetConfigurations200ApplicationJSONDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurations200ApplicationJSONDisabledReason: %v", v)
	}
}

type GetConfigurations200ApplicationJSONScopesQueueScopesAdded string

const (
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadIntegrationConfiguration      GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:integration-configuration"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteIntegrationConfiguration GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:integration-configuration"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadDeployment                    GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:deployment"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteDeployment               GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:deployment"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteDeploymentCheck          GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:deployment-check"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadProject                       GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:project"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteProject                  GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:project"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteProjectEnvVars           GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:project-env-vars"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteGlobalProjectEnvVars     GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:global-project-env-vars"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadTeam                          GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:team"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadUser                          GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:user"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteLogDrain                 GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:log-drain"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadDomain                        GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:domain"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteDomain                   GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:domain"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteEdgeConfig               GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:edge-config"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadWriteOtelEndpoint             GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read-write:otel-endpoint"
	GetConfigurations200ApplicationJSONScopesQueueScopesAddedReadMonitoring                    GetConfigurations200ApplicationJSONScopesQueueScopesAdded = "read:monitoring"
)

func (e GetConfigurations200ApplicationJSONScopesQueueScopesAdded) ToPointer() *GetConfigurations200ApplicationJSONScopesQueueScopesAdded {
	return &e
}

func (e *GetConfigurations200ApplicationJSONScopesQueueScopesAdded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurations200ApplicationJSONScopesQueueScopesAdded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurations200ApplicationJSONScopesQueueScopesAdded: %v", v)
	}
}

type GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded string

const (
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadIntegrationConfiguration      GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:integration-configuration"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteIntegrationConfiguration GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:integration-configuration"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadDeployment                    GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:deployment"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteDeployment               GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:deployment"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteDeploymentCheck          GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:deployment-check"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadProject                       GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:project"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteProject                  GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:project"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteProjectEnvVars           GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:project-env-vars"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteGlobalProjectEnvVars     GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:global-project-env-vars"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadTeam                          GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:team"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadUser                          GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:user"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteLogDrain                 GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:log-drain"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadDomain                        GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:domain"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteDomain                   GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:domain"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteEdgeConfig               GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:edge-config"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadWriteOtelEndpoint             GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read-write:otel-endpoint"
	GetConfigurations200ApplicationJSONScopesQueueScopesUpgradedReadMonitoring                    GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded = "read:monitoring"
)

func (e GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded) ToPointer() *GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded {
	return &e
}

func (e *GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded: %v", v)
	}
}

type GetConfigurations200ApplicationJSONScopesQueueScopes struct {
	Added    []GetConfigurations200ApplicationJSONScopesQueueScopesAdded    `json:"added"`
	Upgraded []GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded `json:"upgraded"`
}

func (o *GetConfigurations200ApplicationJSONScopesQueueScopes) GetAdded() []GetConfigurations200ApplicationJSONScopesQueueScopesAdded {
	if o == nil {
		return []GetConfigurations200ApplicationJSONScopesQueueScopesAdded{}
	}
	return o.Added
}

func (o *GetConfigurations200ApplicationJSONScopesQueueScopes) GetUpgraded() []GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded {
	if o == nil {
		return []GetConfigurations200ApplicationJSONScopesQueueScopesUpgraded{}
	}
	return o.Upgraded
}

type GetConfigurations200ApplicationJSONScopesQueue struct {
	ConfirmedAt *int64                                               `json:"confirmedAt,omitempty"`
	Note        string                                               `json:"note"`
	RequestedAt int64                                                `json:"requestedAt"`
	Scopes      GetConfigurations200ApplicationJSONScopesQueueScopes `json:"scopes"`
}

func (o *GetConfigurations200ApplicationJSONScopesQueue) GetConfirmedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *GetConfigurations200ApplicationJSONScopesQueue) GetNote() string {
	if o == nil {
		return ""
	}
	return o.Note
}

func (o *GetConfigurations200ApplicationJSONScopesQueue) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *GetConfigurations200ApplicationJSONScopesQueue) GetScopes() GetConfigurations200ApplicationJSONScopesQueueScopes {
	if o == nil {
		return GetConfigurations200ApplicationJSONScopesQueueScopes{}
	}
	return o.Scopes
}

// GetConfigurations200ApplicationJSONSource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurations200ApplicationJSONSource string

const (
	GetConfigurations200ApplicationJSONSourceMarketplace  GetConfigurations200ApplicationJSONSource = "marketplace"
	GetConfigurations200ApplicationJSONSourceDeployButton GetConfigurations200ApplicationJSONSource = "deploy-button"
	GetConfigurations200ApplicationJSONSourceExternal     GetConfigurations200ApplicationJSONSource = "external"
)

func (e GetConfigurations200ApplicationJSONSource) ToPointer() *GetConfigurations200ApplicationJSONSource {
	return &e
}

func (e *GetConfigurations200ApplicationJSONSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurations200ApplicationJSONSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurations200ApplicationJSONSource: %v", v)
	}
}

type GetConfigurations200ApplicationJSONType string

const (
	GetConfigurations200ApplicationJSONTypeIntegrationConfiguration GetConfigurations200ApplicationJSONType = "integration-configuration"
)

func (e GetConfigurations200ApplicationJSONType) ToPointer() *GetConfigurations200ApplicationJSONType {
	return &e
}

func (e *GetConfigurations200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurations200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurations200ApplicationJSONType: %v", v)
	}
}

type GetConfigurations200ApplicationJSON struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64                                             `json:"disabledAt,omitempty"`
	DisabledReason *GetConfigurations200ApplicationJSONDisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string                                         `json:"scopes"`
	ScopesQueue []GetConfigurations200ApplicationJSONScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurations200ApplicationJSONSource `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                                 `json:"teamId,omitempty"`
	Type   GetConfigurations200ApplicationJSONType `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

func (o *GetConfigurations200ApplicationJSON) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurations200ApplicationJSON) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetConfigurations200ApplicationJSON) GetDeletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurations200ApplicationJSON) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurations200ApplicationJSON) GetDisabledReason() *GetConfigurations200ApplicationJSONDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurations200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurations200ApplicationJSON) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfigurations200ApplicationJSON) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurations200ApplicationJSON) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurations200ApplicationJSON) GetRemovedLogDrainsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedLogDrainsAt
}

func (o *GetConfigurations200ApplicationJSON) GetRemovedProjectEnvsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedProjectEnvsAt
}

func (o *GetConfigurations200ApplicationJSON) GetRemovedTokensAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedTokensAt
}

func (o *GetConfigurations200ApplicationJSON) GetRemovedWebhooksAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedWebhooksAt
}

func (o *GetConfigurations200ApplicationJSON) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfigurations200ApplicationJSON) GetScopesQueue() []GetConfigurations200ApplicationJSONScopesQueue {
	if o == nil {
		return nil
	}
	return o.ScopesQueue
}

func (o *GetConfigurations200ApplicationJSON) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfigurations200ApplicationJSON) GetSource() *GetConfigurations200ApplicationJSONSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurations200ApplicationJSON) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurations200ApplicationJSON) GetType() GetConfigurations200ApplicationJSONType {
	if o == nil {
		return GetConfigurations200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetConfigurations200ApplicationJSON) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

func (o *GetConfigurations200ApplicationJSON) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type GetConfigurationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of configurations for the authenticated user
	GetConfigurations200ApplicationJSONObjects []GetConfigurations200ApplicationJSON
}

func (o *GetConfigurationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConfigurationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConfigurationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConfigurationsResponse) GetGetConfigurations200ApplicationJSONObjects() []GetConfigurations200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetConfigurations200ApplicationJSONObjects
}
