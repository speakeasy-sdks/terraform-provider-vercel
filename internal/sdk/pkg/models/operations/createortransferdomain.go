// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// CreateOrTransferDomainRequestBody3 - transfer-in
type CreateOrTransferDomainRequestBody3 struct {
	// The authorization code assigned to the domain.
	AuthCode *string `json:"authCode,omitempty"`
	// The price you expect to be charged for the required 1 year renewal.
	ExpectedPrice *int64 `json:"expectedPrice,omitempty"`
	// The domain operation to perform.
	Method string `json:"method"`
	// The domain name you want to add.
	Name string `json:"name"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBody3

func (c *CreateOrTransferDomainRequestBody3) UnmarshalJSON(bs []byte) error {
	data := _CreateOrTransferDomainRequestBody3{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateOrTransferDomainRequestBody3(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "authCode")
	delete(additionalFields, "expectedPrice")
	delete(additionalFields, "method")
	delete(additionalFields, "name")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateOrTransferDomainRequestBody3) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateOrTransferDomainRequestBody3(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// CreateOrTransferDomainRequestBody2 - move-in
type CreateOrTransferDomainRequestBody2 struct {
	// The domain operation to perform.
	Method string `json:"method"`
	// The domain name you want to add.
	Name string `json:"name"`
	// The move-in token from Move Requested email.
	Token *string `json:"token,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBody2

func (c *CreateOrTransferDomainRequestBody2) UnmarshalJSON(bs []byte) error {
	data := _CreateOrTransferDomainRequestBody2{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateOrTransferDomainRequestBody2(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "method")
	delete(additionalFields, "name")
	delete(additionalFields, "token")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateOrTransferDomainRequestBody2) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateOrTransferDomainRequestBody2(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// CreateOrTransferDomainRequestBody1 - add
type CreateOrTransferDomainRequestBody1 struct {
	// Whether the domain has the Vercel Edge Network enabled or not.
	CdnEnabled *bool `json:"cdnEnabled,omitempty"`
	// The domain operation to perform.
	Method *string `json:"method,omitempty"`
	// The domain name you want to add.
	Name string `json:"name"`
	Zone *bool  `json:"zone,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _CreateOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBody1

func (c *CreateOrTransferDomainRequestBody1) UnmarshalJSON(bs []byte) error {
	data := _CreateOrTransferDomainRequestBody1{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = CreateOrTransferDomainRequestBody1(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "cdnEnabled")
	delete(additionalFields, "method")
	delete(additionalFields, "name")
	delete(additionalFields, "zone")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c CreateOrTransferDomainRequestBody1) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_CreateOrTransferDomainRequestBody1(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type CreateOrTransferDomainRequestBodyType string

const (
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_1"
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_2"
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_3"
)

type CreateOrTransferDomainRequestBody struct {
	CreateOrTransferDomainRequestBody1 *CreateOrTransferDomainRequestBody1
	CreateOrTransferDomainRequestBody2 *CreateOrTransferDomainRequestBody2
	CreateOrTransferDomainRequestBody3 *CreateOrTransferDomainRequestBody3

	Type CreateOrTransferDomainRequestBodyType
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody1(createOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBody1) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody1: &createOrTransferDomainRequestBody1,
		Type:                               typ,
	}
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody2(createOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBody2) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody2: &createOrTransferDomainRequestBody2,
		Type:                               typ,
	}
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody3(createOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBody3) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody3: &createOrTransferDomainRequestBody3,
		Type:                               typ,
	}
}

func (u *CreateOrTransferDomainRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createOrTransferDomainRequestBody2 := new(CreateOrTransferDomainRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrTransferDomainRequestBody2); err == nil {
		u.CreateOrTransferDomainRequestBody2 = createOrTransferDomainRequestBody2
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2
		return nil
	}

	createOrTransferDomainRequestBody1 := new(CreateOrTransferDomainRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrTransferDomainRequestBody1); err == nil {
		u.CreateOrTransferDomainRequestBody1 = createOrTransferDomainRequestBody1
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1
		return nil
	}

	createOrTransferDomainRequestBody3 := new(CreateOrTransferDomainRequestBody3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrTransferDomainRequestBody3); err == nil {
		u.CreateOrTransferDomainRequestBody3 = createOrTransferDomainRequestBody3
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateOrTransferDomainRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateOrTransferDomainRequestBody2 != nil {
		return json.Marshal(u.CreateOrTransferDomainRequestBody2)
	}

	if u.CreateOrTransferDomainRequestBody1 != nil {
		return json.Marshal(u.CreateOrTransferDomainRequestBody1)
	}

	if u.CreateOrTransferDomainRequestBody3 != nil {
		return json.Marshal(u.CreateOrTransferDomainRequestBody3)
	}

	return nil, nil
}

type CreateOrTransferDomainRequest struct {
	RequestBody *CreateOrTransferDomainRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

// CreateOrTransferDomain200ApplicationJSONDomainCreator - An object containing information of the domain creator, including the user's id, username, and email.
type CreateOrTransferDomain200ApplicationJSONDomainCreator struct {
	CustomerID       *string `json:"customerId,omitempty"`
	Email            string  `json:"email"`
	ID               string  `json:"id"`
	IsDomainReseller *bool   `json:"isDomainReseller,omitempty"`
	Username         string  `json:"username"`
}

// CreateOrTransferDomain200ApplicationJSONDomainServiceType - The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
type CreateOrTransferDomain200ApplicationJSONDomainServiceType string

const (
	CreateOrTransferDomain200ApplicationJSONDomainServiceTypeZeitWorld CreateOrTransferDomain200ApplicationJSONDomainServiceType = "zeit.world"
	CreateOrTransferDomain200ApplicationJSONDomainServiceTypeExternal  CreateOrTransferDomain200ApplicationJSONDomainServiceType = "external"
	CreateOrTransferDomain200ApplicationJSONDomainServiceTypeNa        CreateOrTransferDomain200ApplicationJSONDomainServiceType = "na"
)

func (e CreateOrTransferDomain200ApplicationJSONDomainServiceType) ToPointer() *CreateOrTransferDomain200ApplicationJSONDomainServiceType {
	return &e
}

func (e *CreateOrTransferDomain200ApplicationJSONDomainServiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zeit.world":
		fallthrough
	case "external":
		fallthrough
	case "na":
		*e = CreateOrTransferDomain200ApplicationJSONDomainServiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrTransferDomain200ApplicationJSONDomainServiceType: %v", v)
	}
}

type CreateOrTransferDomain200ApplicationJSONDomain struct {
	// If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
	BoughtAt *int64 `json:"boughtAt"`
	// Timestamp in milliseconds when the domain was created in the registry.
	CreatedAt int64 `json:"createdAt"`
	// An object containing information of the domain creator, including the user's id, username, and email.
	Creator CreateOrTransferDomain200ApplicationJSONDomainCreator `json:"creator"`
	// A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
	CustomNameservers []string `json:"customNameservers,omitempty"`
	// Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
	ExpiresAt *int64 `json:"expiresAt"`
	// The unique identifier of the domain.
	ID string `json:"id"`
	// A list of the intended nameservers for the domain to point to Vercel DNS.
	IntendedNameservers []string `json:"intendedNameservers"`
	// The domain name.
	Name string `json:"name"`
	// A list of the current nameservers of the domain.
	Nameservers []string `json:"nameservers"`
	// Timestamp in milliseconds at which the domain was ordered.
	OrderedAt *int64 `json:"orderedAt,omitempty"`
	// Indicates whether the domain is set to automatically renew.
	Renew *bool `json:"renew,omitempty"`
	// The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
	ServiceType CreateOrTransferDomain200ApplicationJSONDomainServiceType `json:"serviceType"`
	// If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
	TransferStartedAt *int64 `json:"transferStartedAt,omitempty"`
	// Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
	TransferredAt *int64 `json:"transferredAt,omitempty"`
	// If the domain has the ownership verified.
	Verified bool `json:"verified"`
}

type CreateOrTransferDomain200ApplicationJSON struct {
	Domain CreateOrTransferDomain200ApplicationJSONDomain `json:"domain"`
}

type CreateOrTransferDomainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                                    *http.Response
	CreateOrTransferDomain200ApplicationJSONObject *CreateOrTransferDomain200ApplicationJSON
}
