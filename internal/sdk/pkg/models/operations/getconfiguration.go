// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/utils"
)

type GetConfigurationRequest struct {
	// ID of the configuration to check
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetConfigurationRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetConfigurationDisabledReason string

const (
	GetConfigurationDisabledReasonLogDrainHighErrorRate         GetConfigurationDisabledReason = "log-drain-high-error-rate"
	GetConfigurationDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurationDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurationDisabledReasonAccountPlanDowngrade          GetConfigurationDisabledReason = "account-plan-downgrade"
	GetConfigurationDisabledReasonDisabledByAdmin               GetConfigurationDisabledReason = "disabled-by-admin"
	GetConfigurationDisabledReasonOriginalOwnerLeftTheTeam      GetConfigurationDisabledReason = "original-owner-left-the-team"
)

func (e GetConfigurationDisabledReason) ToPointer() *GetConfigurationDisabledReason {
	return &e
}

func (e *GetConfigurationDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = GetConfigurationDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationDisabledReason: %v", v)
	}
}

// ProjectSelection - A string representing the permission for projects. Possible values are `all` or `selected`.
type ProjectSelection string

const (
	ProjectSelectionSelected ProjectSelection = "selected"
	ProjectSelectionAll      ProjectSelection = "all"
)

func (e ProjectSelection) ToPointer() *ProjectSelection {
	return &e
}

func (e *ProjectSelection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "selected":
		fallthrough
	case "all":
		*e = ProjectSelection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectSelection: %v", v)
	}
}

type GetConfigurationAdded string

const (
	GetConfigurationAddedReadIntegrationConfiguration      GetConfigurationAdded = "read:integration-configuration"
	GetConfigurationAddedReadWriteIntegrationConfiguration GetConfigurationAdded = "read-write:integration-configuration"
	GetConfigurationAddedReadDeployment                    GetConfigurationAdded = "read:deployment"
	GetConfigurationAddedReadWriteDeployment               GetConfigurationAdded = "read-write:deployment"
	GetConfigurationAddedReadWriteDeploymentCheck          GetConfigurationAdded = "read-write:deployment-check"
	GetConfigurationAddedReadProject                       GetConfigurationAdded = "read:project"
	GetConfigurationAddedReadWriteProject                  GetConfigurationAdded = "read-write:project"
	GetConfigurationAddedReadWriteProjectEnvVars           GetConfigurationAdded = "read-write:project-env-vars"
	GetConfigurationAddedReadWriteGlobalProjectEnvVars     GetConfigurationAdded = "read-write:global-project-env-vars"
	GetConfigurationAddedReadTeam                          GetConfigurationAdded = "read:team"
	GetConfigurationAddedReadUser                          GetConfigurationAdded = "read:user"
	GetConfigurationAddedReadWriteLogDrain                 GetConfigurationAdded = "read-write:log-drain"
	GetConfigurationAddedReadDomain                        GetConfigurationAdded = "read:domain"
	GetConfigurationAddedReadWriteDomain                   GetConfigurationAdded = "read-write:domain"
	GetConfigurationAddedReadWriteEdgeConfig               GetConfigurationAdded = "read-write:edge-config"
	GetConfigurationAddedReadWriteOtelEndpoint             GetConfigurationAdded = "read-write:otel-endpoint"
	GetConfigurationAddedReadMonitoring                    GetConfigurationAdded = "read:monitoring"
)

func (e GetConfigurationAdded) ToPointer() *GetConfigurationAdded {
	return &e
}

func (e *GetConfigurationAdded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurationAdded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationAdded: %v", v)
	}
}

type GetConfigurationUpgraded string

const (
	GetConfigurationUpgradedReadIntegrationConfiguration      GetConfigurationUpgraded = "read:integration-configuration"
	GetConfigurationUpgradedReadWriteIntegrationConfiguration GetConfigurationUpgraded = "read-write:integration-configuration"
	GetConfigurationUpgradedReadDeployment                    GetConfigurationUpgraded = "read:deployment"
	GetConfigurationUpgradedReadWriteDeployment               GetConfigurationUpgraded = "read-write:deployment"
	GetConfigurationUpgradedReadWriteDeploymentCheck          GetConfigurationUpgraded = "read-write:deployment-check"
	GetConfigurationUpgradedReadProject                       GetConfigurationUpgraded = "read:project"
	GetConfigurationUpgradedReadWriteProject                  GetConfigurationUpgraded = "read-write:project"
	GetConfigurationUpgradedReadWriteProjectEnvVars           GetConfigurationUpgraded = "read-write:project-env-vars"
	GetConfigurationUpgradedReadWriteGlobalProjectEnvVars     GetConfigurationUpgraded = "read-write:global-project-env-vars"
	GetConfigurationUpgradedReadTeam                          GetConfigurationUpgraded = "read:team"
	GetConfigurationUpgradedReadUser                          GetConfigurationUpgraded = "read:user"
	GetConfigurationUpgradedReadWriteLogDrain                 GetConfigurationUpgraded = "read-write:log-drain"
	GetConfigurationUpgradedReadDomain                        GetConfigurationUpgraded = "read:domain"
	GetConfigurationUpgradedReadWriteDomain                   GetConfigurationUpgraded = "read-write:domain"
	GetConfigurationUpgradedReadWriteEdgeConfig               GetConfigurationUpgraded = "read-write:edge-config"
	GetConfigurationUpgradedReadWriteOtelEndpoint             GetConfigurationUpgraded = "read-write:otel-endpoint"
	GetConfigurationUpgradedReadMonitoring                    GetConfigurationUpgraded = "read:monitoring"
)

func (e GetConfigurationUpgraded) ToPointer() *GetConfigurationUpgraded {
	return &e
}

func (e *GetConfigurationUpgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurationUpgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationUpgraded: %v", v)
	}
}

type GetConfigurationScopes struct {
	Added    []GetConfigurationAdded    `json:"added"`
	Upgraded []GetConfigurationUpgraded `json:"upgraded"`
}

func (o *GetConfigurationScopes) GetAdded() []GetConfigurationAdded {
	if o == nil {
		return []GetConfigurationAdded{}
	}
	return o.Added
}

func (o *GetConfigurationScopes) GetUpgraded() []GetConfigurationUpgraded {
	if o == nil {
		return []GetConfigurationUpgraded{}
	}
	return o.Upgraded
}

type GetConfigurationScopesQueue struct {
	ConfirmedAt *int64                 `json:"confirmedAt,omitempty"`
	Note        string                 `json:"note"`
	RequestedAt int64                  `json:"requestedAt"`
	Scopes      GetConfigurationScopes `json:"scopes"`
}

func (o *GetConfigurationScopesQueue) GetConfirmedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *GetConfigurationScopesQueue) GetNote() string {
	if o == nil {
		return ""
	}
	return o.Note
}

func (o *GetConfigurationScopesQueue) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *GetConfigurationScopesQueue) GetScopes() GetConfigurationScopes {
	if o == nil {
		return GetConfigurationScopes{}
	}
	return o.Scopes
}

// GetConfigurationIntegrationsSource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationIntegrationsSource string

const (
	GetConfigurationIntegrationsSourceMarketplace  GetConfigurationIntegrationsSource = "marketplace"
	GetConfigurationIntegrationsSourceDeployButton GetConfigurationIntegrationsSource = "deploy-button"
	GetConfigurationIntegrationsSourceExternal     GetConfigurationIntegrationsSource = "external"
)

func (e GetConfigurationIntegrationsSource) ToPointer() *GetConfigurationIntegrationsSource {
	return &e
}

func (e *GetConfigurationIntegrationsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurationIntegrationsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationIntegrationsSource: %v", v)
	}
}

type GetConfigurationIntegrationsType string

const (
	GetConfigurationIntegrationsTypeIntegrationConfiguration GetConfigurationIntegrationsType = "integration-configuration"
)

func (e GetConfigurationIntegrationsType) ToPointer() *GetConfigurationIntegrationsType {
	return &e
}

func (e *GetConfigurationIntegrationsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationIntegrationsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationIntegrationsType: %v", v)
	}
}

type GetConfiguration2 struct {
	CanConfigureOpenTelemetry *bool `json:"canConfigureOpenTelemetry,omitempty"`
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64                          `json:"disabledAt,omitempty"`
	DisabledReason *GetConfigurationDisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// A string representing the permission for projects. Possible values are `all` or `selected`.
	ProjectSelection ProjectSelection `json:"projectSelection"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string                      `json:"scopes"`
	ScopesQueue []GetConfigurationScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationIntegrationsSource `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                          `json:"teamId,omitempty"`
	Type   GetConfigurationIntegrationsType `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

func (o *GetConfiguration2) GetCanConfigureOpenTelemetry() *bool {
	if o == nil {
		return nil
	}
	return o.CanConfigureOpenTelemetry
}

func (o *GetConfiguration2) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfiguration2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetConfiguration2) GetDeletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfiguration2) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfiguration2) GetDisabledReason() *GetConfigurationDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfiguration2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfiguration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfiguration2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfiguration2) GetProjectSelection() ProjectSelection {
	if o == nil {
		return ProjectSelection("")
	}
	return o.ProjectSelection
}

func (o *GetConfiguration2) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfiguration2) GetRemovedLogDrainsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedLogDrainsAt
}

func (o *GetConfiguration2) GetRemovedProjectEnvsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedProjectEnvsAt
}

func (o *GetConfiguration2) GetRemovedTokensAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedTokensAt
}

func (o *GetConfiguration2) GetRemovedWebhooksAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedWebhooksAt
}

func (o *GetConfiguration2) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfiguration2) GetScopesQueue() []GetConfigurationScopesQueue {
	if o == nil {
		return nil
	}
	return o.ScopesQueue
}

func (o *GetConfiguration2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfiguration2) GetSource() *GetConfigurationIntegrationsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfiguration2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfiguration2) GetType() GetConfigurationIntegrationsType {
	if o == nil {
		return GetConfigurationIntegrationsType("")
	}
	return o.Type
}

func (o *GetConfiguration2) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

func (o *GetConfiguration2) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type GetConfigurationIntegrationsDisabledReason string

const (
	GetConfigurationIntegrationsDisabledReasonLogDrainHighErrorRate         GetConfigurationIntegrationsDisabledReason = "log-drain-high-error-rate"
	GetConfigurationIntegrationsDisabledReasonLogDrainsAddOnDisabledByOwner GetConfigurationIntegrationsDisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfigurationIntegrationsDisabledReasonAccountPlanDowngrade          GetConfigurationIntegrationsDisabledReason = "account-plan-downgrade"
	GetConfigurationIntegrationsDisabledReasonDisabledByAdmin               GetConfigurationIntegrationsDisabledReason = "disabled-by-admin"
	GetConfigurationIntegrationsDisabledReasonOriginalOwnerLeftTheTeam      GetConfigurationIntegrationsDisabledReason = "original-owner-left-the-team"
)

func (e GetConfigurationIntegrationsDisabledReason) ToPointer() *GetConfigurationIntegrationsDisabledReason {
	return &e
}

func (e *GetConfigurationIntegrationsDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = GetConfigurationIntegrationsDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationIntegrationsDisabledReason: %v", v)
	}
}

type GetConfigurationIntegrationsAdded string

const (
	GetConfigurationIntegrationsAddedReadIntegrationConfiguration      GetConfigurationIntegrationsAdded = "read:integration-configuration"
	GetConfigurationIntegrationsAddedReadWriteIntegrationConfiguration GetConfigurationIntegrationsAdded = "read-write:integration-configuration"
	GetConfigurationIntegrationsAddedReadDeployment                    GetConfigurationIntegrationsAdded = "read:deployment"
	GetConfigurationIntegrationsAddedReadWriteDeployment               GetConfigurationIntegrationsAdded = "read-write:deployment"
	GetConfigurationIntegrationsAddedReadWriteDeploymentCheck          GetConfigurationIntegrationsAdded = "read-write:deployment-check"
	GetConfigurationIntegrationsAddedReadProject                       GetConfigurationIntegrationsAdded = "read:project"
	GetConfigurationIntegrationsAddedReadWriteProject                  GetConfigurationIntegrationsAdded = "read-write:project"
	GetConfigurationIntegrationsAddedReadWriteProjectEnvVars           GetConfigurationIntegrationsAdded = "read-write:project-env-vars"
	GetConfigurationIntegrationsAddedReadWriteGlobalProjectEnvVars     GetConfigurationIntegrationsAdded = "read-write:global-project-env-vars"
	GetConfigurationIntegrationsAddedReadTeam                          GetConfigurationIntegrationsAdded = "read:team"
	GetConfigurationIntegrationsAddedReadUser                          GetConfigurationIntegrationsAdded = "read:user"
	GetConfigurationIntegrationsAddedReadWriteLogDrain                 GetConfigurationIntegrationsAdded = "read-write:log-drain"
	GetConfigurationIntegrationsAddedReadDomain                        GetConfigurationIntegrationsAdded = "read:domain"
	GetConfigurationIntegrationsAddedReadWriteDomain                   GetConfigurationIntegrationsAdded = "read-write:domain"
	GetConfigurationIntegrationsAddedReadWriteEdgeConfig               GetConfigurationIntegrationsAdded = "read-write:edge-config"
	GetConfigurationIntegrationsAddedReadWriteOtelEndpoint             GetConfigurationIntegrationsAdded = "read-write:otel-endpoint"
	GetConfigurationIntegrationsAddedReadMonitoring                    GetConfigurationIntegrationsAdded = "read:monitoring"
)

func (e GetConfigurationIntegrationsAdded) ToPointer() *GetConfigurationIntegrationsAdded {
	return &e
}

func (e *GetConfigurationIntegrationsAdded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurationIntegrationsAdded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationIntegrationsAdded: %v", v)
	}
}

type GetConfigurationIntegrationsUpgraded string

const (
	GetConfigurationIntegrationsUpgradedReadIntegrationConfiguration      GetConfigurationIntegrationsUpgraded = "read:integration-configuration"
	GetConfigurationIntegrationsUpgradedReadWriteIntegrationConfiguration GetConfigurationIntegrationsUpgraded = "read-write:integration-configuration"
	GetConfigurationIntegrationsUpgradedReadDeployment                    GetConfigurationIntegrationsUpgraded = "read:deployment"
	GetConfigurationIntegrationsUpgradedReadWriteDeployment               GetConfigurationIntegrationsUpgraded = "read-write:deployment"
	GetConfigurationIntegrationsUpgradedReadWriteDeploymentCheck          GetConfigurationIntegrationsUpgraded = "read-write:deployment-check"
	GetConfigurationIntegrationsUpgradedReadProject                       GetConfigurationIntegrationsUpgraded = "read:project"
	GetConfigurationIntegrationsUpgradedReadWriteProject                  GetConfigurationIntegrationsUpgraded = "read-write:project"
	GetConfigurationIntegrationsUpgradedReadWriteProjectEnvVars           GetConfigurationIntegrationsUpgraded = "read-write:project-env-vars"
	GetConfigurationIntegrationsUpgradedReadWriteGlobalProjectEnvVars     GetConfigurationIntegrationsUpgraded = "read-write:global-project-env-vars"
	GetConfigurationIntegrationsUpgradedReadTeam                          GetConfigurationIntegrationsUpgraded = "read:team"
	GetConfigurationIntegrationsUpgradedReadUser                          GetConfigurationIntegrationsUpgraded = "read:user"
	GetConfigurationIntegrationsUpgradedReadWriteLogDrain                 GetConfigurationIntegrationsUpgraded = "read-write:log-drain"
	GetConfigurationIntegrationsUpgradedReadDomain                        GetConfigurationIntegrationsUpgraded = "read:domain"
	GetConfigurationIntegrationsUpgradedReadWriteDomain                   GetConfigurationIntegrationsUpgraded = "read-write:domain"
	GetConfigurationIntegrationsUpgradedReadWriteEdgeConfig               GetConfigurationIntegrationsUpgraded = "read-write:edge-config"
	GetConfigurationIntegrationsUpgradedReadWriteOtelEndpoint             GetConfigurationIntegrationsUpgraded = "read-write:otel-endpoint"
	GetConfigurationIntegrationsUpgradedReadMonitoring                    GetConfigurationIntegrationsUpgraded = "read:monitoring"
)

func (e GetConfigurationIntegrationsUpgraded) ToPointer() *GetConfigurationIntegrationsUpgraded {
	return &e
}

func (e *GetConfigurationIntegrationsUpgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfigurationIntegrationsUpgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationIntegrationsUpgraded: %v", v)
	}
}

type GetConfigurationIntegrationsScopes struct {
	Added    []GetConfigurationIntegrationsAdded    `json:"added"`
	Upgraded []GetConfigurationIntegrationsUpgraded `json:"upgraded"`
}

func (o *GetConfigurationIntegrationsScopes) GetAdded() []GetConfigurationIntegrationsAdded {
	if o == nil {
		return []GetConfigurationIntegrationsAdded{}
	}
	return o.Added
}

func (o *GetConfigurationIntegrationsScopes) GetUpgraded() []GetConfigurationIntegrationsUpgraded {
	if o == nil {
		return []GetConfigurationIntegrationsUpgraded{}
	}
	return o.Upgraded
}

type GetConfigurationIntegrationsScopesQueue struct {
	ConfirmedAt *int64                             `json:"confirmedAt,omitempty"`
	Note        string                             `json:"note"`
	RequestedAt int64                              `json:"requestedAt"`
	Scopes      GetConfigurationIntegrationsScopes `json:"scopes"`
}

func (o *GetConfigurationIntegrationsScopesQueue) GetConfirmedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *GetConfigurationIntegrationsScopesQueue) GetNote() string {
	if o == nil {
		return ""
	}
	return o.Note
}

func (o *GetConfigurationIntegrationsScopesQueue) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *GetConfigurationIntegrationsScopesQueue) GetScopes() GetConfigurationIntegrationsScopes {
	if o == nil {
		return GetConfigurationIntegrationsScopes{}
	}
	return o.Scopes
}

// GetConfigurationSource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationSource string

const (
	GetConfigurationSourceMarketplace  GetConfigurationSource = "marketplace"
	GetConfigurationSourceDeployButton GetConfigurationSource = "deploy-button"
	GetConfigurationSourceExternal     GetConfigurationSource = "external"
)

func (e GetConfigurationSource) ToPointer() *GetConfigurationSource {
	return &e
}

func (e *GetConfigurationSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurationSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationSource: %v", v)
	}
}

type GetConfigurationType string

const (
	GetConfigurationTypeIntegrationConfiguration GetConfigurationType = "integration-configuration"
)

func (e GetConfigurationType) ToPointer() *GetConfigurationType {
	return &e
}

func (e *GetConfigurationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationType: %v", v)
	}
}

type GetConfiguration1 struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64                                      `json:"disabledAt,omitempty"`
	DisabledReason *GetConfigurationIntegrationsDisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string                                  `json:"scopes"`
	ScopesQueue []GetConfigurationIntegrationsScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationSource `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string              `json:"teamId,omitempty"`
	Type   GetConfigurationType `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

func (o *GetConfiguration1) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfiguration1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetConfiguration1) GetDeletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfiguration1) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfiguration1) GetDisabledReason() *GetConfigurationIntegrationsDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfiguration1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfiguration1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfiguration1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfiguration1) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfiguration1) GetRemovedLogDrainsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedLogDrainsAt
}

func (o *GetConfiguration1) GetRemovedProjectEnvsAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedProjectEnvsAt
}

func (o *GetConfiguration1) GetRemovedTokensAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedTokensAt
}

func (o *GetConfiguration1) GetRemovedWebhooksAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedWebhooksAt
}

func (o *GetConfiguration1) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfiguration1) GetScopesQueue() []GetConfigurationIntegrationsScopesQueue {
	if o == nil {
		return nil
	}
	return o.ScopesQueue
}

func (o *GetConfiguration1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfiguration1) GetSource() *GetConfigurationSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfiguration1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfiguration1) GetType() GetConfigurationType {
	if o == nil {
		return GetConfigurationType("")
	}
	return o.Type
}

func (o *GetConfiguration1) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

func (o *GetConfiguration1) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

type GetConfigurationResponseBodyType string

const (
	GetConfigurationResponseBodyTypeGetConfiguration1 GetConfigurationResponseBodyType = "getConfiguration_1"
	GetConfigurationResponseBodyTypeGetConfiguration2 GetConfigurationResponseBodyType = "getConfiguration_2"
)

type GetConfigurationResponseBody struct {
	GetConfiguration1 *GetConfiguration1
	GetConfiguration2 *GetConfiguration2

	Type GetConfigurationResponseBodyType
}

func CreateGetConfigurationResponseBodyGetConfiguration1(getConfiguration1 GetConfiguration1) GetConfigurationResponseBody {
	typ := GetConfigurationResponseBodyTypeGetConfiguration1

	return GetConfigurationResponseBody{
		GetConfiguration1: &getConfiguration1,
		Type:              typ,
	}
}

func CreateGetConfigurationResponseBodyGetConfiguration2(getConfiguration2 GetConfiguration2) GetConfigurationResponseBody {
	typ := GetConfigurationResponseBodyTypeGetConfiguration2

	return GetConfigurationResponseBody{
		GetConfiguration2: &getConfiguration2,
		Type:              typ,
	}
}

func (u *GetConfigurationResponseBody) UnmarshalJSON(data []byte) error {

	getConfiguration1 := new(GetConfiguration1)
	if err := utils.UnmarshalJSON(data, &getConfiguration1, "", true, true); err == nil {
		u.GetConfiguration1 = getConfiguration1
		u.Type = GetConfigurationResponseBodyTypeGetConfiguration1
		return nil
	}

	getConfiguration2 := new(GetConfiguration2)
	if err := utils.UnmarshalJSON(data, &getConfiguration2, "", true, true); err == nil {
		u.GetConfiguration2 = getConfiguration2
		u.Type = GetConfigurationResponseBodyTypeGetConfiguration2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetConfigurationResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetConfiguration1 != nil {
		return utils.MarshalJSON(u.GetConfiguration1, "", true)
	}

	if u.GetConfiguration2 != nil {
		return utils.MarshalJSON(u.GetConfiguration2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetConfigurationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	OneOf       *GetConfigurationResponseBody
}

func (o *GetConfigurationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConfigurationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConfigurationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConfigurationResponse) GetOneOf() *GetConfigurationResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
