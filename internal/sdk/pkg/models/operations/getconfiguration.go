// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetConfigurationSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetConfigurationRequest struct {
	// ID of the configuration to check
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

type GetConfiguration200ApplicationJSON2DisabledReason string

const (
	GetConfiguration200ApplicationJSON2DisabledReasonLogDrainHighErrorRate         GetConfiguration200ApplicationJSON2DisabledReason = "log-drain-high-error-rate"
	GetConfiguration200ApplicationJSON2DisabledReasonLogDrainsAddOnDisabledByOwner GetConfiguration200ApplicationJSON2DisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfiguration200ApplicationJSON2DisabledReasonAccountPlanDowngrade          GetConfiguration200ApplicationJSON2DisabledReason = "account-plan-downgrade"
	GetConfiguration200ApplicationJSON2DisabledReasonDisabledByAdmin               GetConfiguration200ApplicationJSON2DisabledReason = "disabled-by-admin"
	GetConfiguration200ApplicationJSON2DisabledReasonOriginalOwnerLeftTheTeam      GetConfiguration200ApplicationJSON2DisabledReason = "original-owner-left-the-team"
)

func (e GetConfiguration200ApplicationJSON2DisabledReason) ToPointer() *GetConfiguration200ApplicationJSON2DisabledReason {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = GetConfiguration200ApplicationJSON2DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2DisabledReason: %v", v)
	}
}

// GetConfiguration200ApplicationJSON2ProjectSelection - A string representing the permission for projects. Possible values are `all` or `selected`.
type GetConfiguration200ApplicationJSON2ProjectSelection string

const (
	GetConfiguration200ApplicationJSON2ProjectSelectionSelected GetConfiguration200ApplicationJSON2ProjectSelection = "selected"
	GetConfiguration200ApplicationJSON2ProjectSelectionAll      GetConfiguration200ApplicationJSON2ProjectSelection = "all"
)

func (e GetConfiguration200ApplicationJSON2ProjectSelection) ToPointer() *GetConfiguration200ApplicationJSON2ProjectSelection {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2ProjectSelection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "selected":
		fallthrough
	case "all":
		*e = GetConfiguration200ApplicationJSON2ProjectSelection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2ProjectSelection: %v", v)
	}
}

type GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded string

const (
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadIntegrationConfiguration      GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:integration-configuration"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteIntegrationConfiguration GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:integration-configuration"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadDeployment                    GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:deployment"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteDeployment               GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:deployment"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteDeploymentCheck          GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:deployment-check"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadProject                       GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:project"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteProject                  GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:project"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteProjectEnvVars           GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:project-env-vars"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteGlobalProjectEnvVars     GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:global-project-env-vars"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadTeam                          GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:team"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadUser                          GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:user"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteLogDrain                 GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:log-drain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadDomain                        GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:domain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteDomain                   GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:domain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteEdgeConfig               GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:edge-config"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadWriteOtelEndpoint             GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read-write:otel-endpoint"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesAddedReadMonitoring                    GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded = "read:monitoring"
)

func (e GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded) ToPointer() *GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded: %v", v)
	}
}

type GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded string

const (
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadIntegrationConfiguration      GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:integration-configuration"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteIntegrationConfiguration GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:integration-configuration"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadDeployment                    GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:deployment"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteDeployment               GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:deployment"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteDeploymentCheck          GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:deployment-check"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadProject                       GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:project"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteProject                  GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:project"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteProjectEnvVars           GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:project-env-vars"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteGlobalProjectEnvVars     GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:global-project-env-vars"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadTeam                          GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:team"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadUser                          GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:user"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteLogDrain                 GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:log-drain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadDomain                        GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:domain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteDomain                   GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:domain"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteEdgeConfig               GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:edge-config"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadWriteOtelEndpoint             GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read-write:otel-endpoint"
	GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgradedReadMonitoring                    GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded = "read:monitoring"
)

func (e GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded) ToPointer() *GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded: %v", v)
	}
}

type GetConfiguration200ApplicationJSON2ScopesQueueScopes struct {
	Added    []GetConfiguration200ApplicationJSON2ScopesQueueScopesAdded    `json:"added"`
	Upgraded []GetConfiguration200ApplicationJSON2ScopesQueueScopesUpgraded `json:"upgraded"`
}

type GetConfiguration200ApplicationJSON2ScopesQueue struct {
	ConfirmedAt *int64                                               `json:"confirmedAt,omitempty"`
	Note        string                                               `json:"note"`
	RequestedAt int64                                                `json:"requestedAt"`
	Scopes      GetConfiguration200ApplicationJSON2ScopesQueueScopes `json:"scopes"`
}

// GetConfiguration200ApplicationJSON2Source - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfiguration200ApplicationJSON2Source string

const (
	GetConfiguration200ApplicationJSON2SourceMarketplace  GetConfiguration200ApplicationJSON2Source = "marketplace"
	GetConfiguration200ApplicationJSON2SourceDeployButton GetConfiguration200ApplicationJSON2Source = "deploy-button"
	GetConfiguration200ApplicationJSON2SourceExternal     GetConfiguration200ApplicationJSON2Source = "external"
)

func (e GetConfiguration200ApplicationJSON2Source) ToPointer() *GetConfiguration200ApplicationJSON2Source {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfiguration200ApplicationJSON2Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2Source: %v", v)
	}
}

type GetConfiguration200ApplicationJSON2Type string

const (
	GetConfiguration200ApplicationJSON2TypeIntegrationConfiguration GetConfiguration200ApplicationJSON2Type = "integration-configuration"
)

func (e GetConfiguration200ApplicationJSON2Type) ToPointer() *GetConfiguration200ApplicationJSON2Type {
	return &e
}

func (e *GetConfiguration200ApplicationJSON2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfiguration200ApplicationJSON2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON2Type: %v", v)
	}
}

type GetConfiguration200ApplicationJSON2 struct {
	CanConfigureOpenTelemetry *bool `json:"canConfigureOpenTelemetry,omitempty"`
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64                                             `json:"disabledAt,omitempty"`
	DisabledReason *GetConfiguration200ApplicationJSON2DisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// A string representing the permission for projects. Possible values are `all` or `selected`.
	ProjectSelection GetConfiguration200ApplicationJSON2ProjectSelection `json:"projectSelection"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string                                         `json:"scopes"`
	ScopesQueue []GetConfiguration200ApplicationJSON2ScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfiguration200ApplicationJSON2Source `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                                 `json:"teamId,omitempty"`
	Type   GetConfiguration200ApplicationJSON2Type `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

type GetConfiguration200ApplicationJSON1DisabledReason string

const (
	GetConfiguration200ApplicationJSON1DisabledReasonLogDrainHighErrorRate         GetConfiguration200ApplicationJSON1DisabledReason = "log-drain-high-error-rate"
	GetConfiguration200ApplicationJSON1DisabledReasonLogDrainsAddOnDisabledByOwner GetConfiguration200ApplicationJSON1DisabledReason = "log-drains-add-on-disabled-by-owner"
	GetConfiguration200ApplicationJSON1DisabledReasonAccountPlanDowngrade          GetConfiguration200ApplicationJSON1DisabledReason = "account-plan-downgrade"
	GetConfiguration200ApplicationJSON1DisabledReasonDisabledByAdmin               GetConfiguration200ApplicationJSON1DisabledReason = "disabled-by-admin"
	GetConfiguration200ApplicationJSON1DisabledReasonOriginalOwnerLeftTheTeam      GetConfiguration200ApplicationJSON1DisabledReason = "original-owner-left-the-team"
)

func (e GetConfiguration200ApplicationJSON1DisabledReason) ToPointer() *GetConfiguration200ApplicationJSON1DisabledReason {
	return &e
}

func (e *GetConfiguration200ApplicationJSON1DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log-drain-high-error-rate":
		fallthrough
	case "log-drains-add-on-disabled-by-owner":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		*e = GetConfiguration200ApplicationJSON1DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON1DisabledReason: %v", v)
	}
}

type GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded string

const (
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadIntegrationConfiguration      GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:integration-configuration"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteIntegrationConfiguration GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:integration-configuration"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadDeployment                    GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:deployment"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteDeployment               GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:deployment"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteDeploymentCheck          GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:deployment-check"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadProject                       GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:project"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteProject                  GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:project"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteProjectEnvVars           GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:project-env-vars"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteGlobalProjectEnvVars     GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:global-project-env-vars"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadTeam                          GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:team"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadUser                          GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:user"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteLogDrain                 GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:log-drain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadDomain                        GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:domain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteDomain                   GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:domain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteEdgeConfig               GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:edge-config"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadWriteOtelEndpoint             GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read-write:otel-endpoint"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesAddedReadMonitoring                    GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded = "read:monitoring"
)

func (e GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded) ToPointer() *GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded {
	return &e
}

func (e *GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded: %v", v)
	}
}

type GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded string

const (
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadIntegrationConfiguration      GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:integration-configuration"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteIntegrationConfiguration GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:integration-configuration"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadDeployment                    GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:deployment"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteDeployment               GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:deployment"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteDeploymentCheck          GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:deployment-check"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadProject                       GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:project"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteProject                  GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:project"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteProjectEnvVars           GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:project-env-vars"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteGlobalProjectEnvVars     GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:global-project-env-vars"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadTeam                          GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:team"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadUser                          GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:user"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteLogDrain                 GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:log-drain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadDomain                        GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:domain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteDomain                   GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:domain"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteEdgeConfig               GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:edge-config"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadWriteOtelEndpoint             GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read-write:otel-endpoint"
	GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgradedReadMonitoring                    GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded = "read:monitoring"
)

func (e GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded) ToPointer() *GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded {
	return &e
}

func (e *GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read:integration-configuration":
		fallthrough
	case "read-write:integration-configuration":
		fallthrough
	case "read:deployment":
		fallthrough
	case "read-write:deployment":
		fallthrough
	case "read-write:deployment-check":
		fallthrough
	case "read:project":
		fallthrough
	case "read-write:project":
		fallthrough
	case "read-write:project-env-vars":
		fallthrough
	case "read-write:global-project-env-vars":
		fallthrough
	case "read:team":
		fallthrough
	case "read:user":
		fallthrough
	case "read-write:log-drain":
		fallthrough
	case "read:domain":
		fallthrough
	case "read-write:domain":
		fallthrough
	case "read-write:edge-config":
		fallthrough
	case "read-write:otel-endpoint":
		fallthrough
	case "read:monitoring":
		*e = GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded: %v", v)
	}
}

type GetConfiguration200ApplicationJSON1ScopesQueueScopes struct {
	Added    []GetConfiguration200ApplicationJSON1ScopesQueueScopesAdded    `json:"added"`
	Upgraded []GetConfiguration200ApplicationJSON1ScopesQueueScopesUpgraded `json:"upgraded"`
}

type GetConfiguration200ApplicationJSON1ScopesQueue struct {
	ConfirmedAt *int64                                               `json:"confirmedAt,omitempty"`
	Note        string                                               `json:"note"`
	RequestedAt int64                                                `json:"requestedAt"`
	Scopes      GetConfiguration200ApplicationJSON1ScopesQueueScopes `json:"scopes"`
}

// GetConfiguration200ApplicationJSON1Source - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfiguration200ApplicationJSON1Source string

const (
	GetConfiguration200ApplicationJSON1SourceMarketplace  GetConfiguration200ApplicationJSON1Source = "marketplace"
	GetConfiguration200ApplicationJSON1SourceDeployButton GetConfiguration200ApplicationJSON1Source = "deploy-button"
	GetConfiguration200ApplicationJSON1SourceExternal     GetConfiguration200ApplicationJSON1Source = "external"
)

func (e GetConfiguration200ApplicationJSON1Source) ToPointer() *GetConfiguration200ApplicationJSON1Source {
	return &e
}

func (e *GetConfiguration200ApplicationJSON1Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfiguration200ApplicationJSON1Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON1Source: %v", v)
	}
}

type GetConfiguration200ApplicationJSON1Type string

const (
	GetConfiguration200ApplicationJSON1TypeIntegrationConfiguration GetConfiguration200ApplicationJSON1Type = "integration-configuration"
)

func (e GetConfiguration200ApplicationJSON1Type) ToPointer() *GetConfiguration200ApplicationJSON1Type {
	return &e
}

func (e *GetConfiguration200ApplicationJSON1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfiguration200ApplicationJSON1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfiguration200ApplicationJSON1Type: %v", v)
	}
}

type GetConfiguration200ApplicationJSON1 struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *int64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt int64 `json:"createdAt"`
	// A timestamp that tells you when the configuration was updated.
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt     *int64                                             `json:"disabledAt,omitempty"`
	DisabledReason *GetConfiguration200ApplicationJSON1DisabledReason `json:"disabledReason,omitempty"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects             []string `json:"projects,omitempty"`
	RemovedLogDrainsAt   *int64   `json:"removedLogDrainsAt,omitempty"`
	RemovedProjectEnvsAt *int64   `json:"removedProjectEnvsAt,omitempty"`
	RemovedTokensAt      *int64   `json:"removedTokensAt,omitempty"`
	RemovedWebhooksAt    *int64   `json:"removedWebhooksAt,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes      []string                                         `json:"scopes"`
	ScopesQueue []GetConfiguration200ApplicationJSON1ScopesQueue `json:"scopesQueue,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfiguration200ApplicationJSON1Source `json:"source,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                                 `json:"teamId,omitempty"`
	Type   GetConfiguration200ApplicationJSON1Type `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt int64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
}

type GetConfiguration200ApplicationJSONType string

const (
	GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON1 GetConfiguration200ApplicationJSONType = "getConfiguration_200ApplicationJSON_1"
	GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON2 GetConfiguration200ApplicationJSONType = "getConfiguration_200ApplicationJSON_2"
)

type GetConfiguration200ApplicationJSON struct {
	GetConfiguration200ApplicationJSON1 *GetConfiguration200ApplicationJSON1
	GetConfiguration200ApplicationJSON2 *GetConfiguration200ApplicationJSON2

	Type GetConfiguration200ApplicationJSONType
}

func CreateGetConfiguration200ApplicationJSONGetConfiguration200ApplicationJSON1(getConfiguration200ApplicationJSON1 GetConfiguration200ApplicationJSON1) GetConfiguration200ApplicationJSON {
	typ := GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON1

	return GetConfiguration200ApplicationJSON{
		GetConfiguration200ApplicationJSON1: &getConfiguration200ApplicationJSON1,
		Type:                                typ,
	}
}

func CreateGetConfiguration200ApplicationJSONGetConfiguration200ApplicationJSON2(getConfiguration200ApplicationJSON2 GetConfiguration200ApplicationJSON2) GetConfiguration200ApplicationJSON {
	typ := GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON2

	return GetConfiguration200ApplicationJSON{
		GetConfiguration200ApplicationJSON2: &getConfiguration200ApplicationJSON2,
		Type:                                typ,
	}
}

func (u *GetConfiguration200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getConfiguration200ApplicationJSON1 := new(GetConfiguration200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getConfiguration200ApplicationJSON1); err == nil {
		u.GetConfiguration200ApplicationJSON1 = getConfiguration200ApplicationJSON1
		u.Type = GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON1
		return nil
	}

	getConfiguration200ApplicationJSON2 := new(GetConfiguration200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getConfiguration200ApplicationJSON2); err == nil {
		u.GetConfiguration200ApplicationJSON2 = getConfiguration200ApplicationJSON2
		u.Type = GetConfiguration200ApplicationJSONTypeGetConfiguration200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetConfiguration200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetConfiguration200ApplicationJSON1 != nil {
		return json.Marshal(u.GetConfiguration200ApplicationJSON1)
	}

	if u.GetConfiguration200ApplicationJSON2 != nil {
		return json.Marshal(u.GetConfiguration200ApplicationJSON2)
	}

	return nil, nil
}

type GetConfigurationResponse struct {
	ContentType                             string
	StatusCode                              int
	RawResponse                             *http.Response
	GetConfiguration200ApplicationJSONOneOf *GetConfiguration200ApplicationJSON
}
