// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/utils"
)

type CreateDeploymentRequestBodyBranchCurrentState string

const (
	CreateDeploymentRequestBodyBranchCurrentStateInit  CreateDeploymentRequestBodyBranchCurrentState = "init"
	CreateDeploymentRequestBodyBranchCurrentStateReady CreateDeploymentRequestBodyBranchCurrentState = "ready"
)

func (e CreateDeploymentRequestBodyBranchCurrentState) ToPointer() *CreateDeploymentRequestBodyBranchCurrentState {
	return &e
}

func (e *CreateDeploymentRequestBodyBranchCurrentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "ready":
		*e = CreateDeploymentRequestBodyBranchCurrentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyBranchCurrentState: %v", v)
	}
}

type CreateDeploymentRequestBodyBranch struct {
	CreatedAt    string                                        `json:"created_at"`
	CurrentState CreateDeploymentRequestBodyBranchCurrentState `json:"current_state"`
	ID           string                                        `json:"id"`
	Name         string                                        `json:"name"`
	ParentID     *string                                       `json:"parent_id,omitempty"`
	Primary      bool                                          `json:"primary"`
	ProjectID    string                                        `json:"project_id"`
	UpdatedAt    string                                        `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyBranch) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyBranch) GetCurrentState() CreateDeploymentRequestBodyBranchCurrentState {
	if o == nil {
		return CreateDeploymentRequestBodyBranchCurrentState("")
	}
	return o.CurrentState
}

func (o *CreateDeploymentRequestBodyBranch) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyBranch) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyBranch) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *CreateDeploymentRequestBodyBranch) GetPrimary() bool {
	if o == nil {
		return false
	}
	return o.Primary
}

func (o *CreateDeploymentRequestBodyBranch) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeploymentRequestBodyBranch) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

// CreateDeploymentRequestBodyBuild - An object containing another object with information to be passed to the Build Process
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type CreateDeploymentRequestBodyBuild struct {
	// An object containing the deployment's environment variable names and values to be passed to Builds. Secrets can be referenced by prefixing the value with `@`
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Env map[string]string `json:"env,omitempty"`
}

func (o *CreateDeploymentRequestBodyBuild) GetEnv() map[string]string {
	if o == nil {
		return nil
	}
	return o.Env
}

// CreateDeploymentRequestBodyBuildsConfig - Optionally, an object including arbitrary metadata to be passed to the Builder
type CreateDeploymentRequestBodyBuildsConfig struct {
}

type CreateDeploymentRequestBodyBuilds struct {
	// Optionally, an object including arbitrary metadata to be passed to the Builder
	Config *CreateDeploymentRequestBodyBuildsConfig `json:"config,omitempty"`
	// A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include `*` and `**`
	Src *string `json:"src,omitempty"`
	// An npm module to be installed by the build process. It can include a semver compatible version (e.g.: `@org/proj@1`)
	Use string `json:"use"`
}

func (o *CreateDeploymentRequestBodyBuilds) GetConfig() *CreateDeploymentRequestBodyBuildsConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateDeploymentRequestBodyBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateDeploymentRequestBodyBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type CreateDeploymentRequestBodyConnectionUris struct {
	ConnectionURI string `json:"connection_uri"`
}

func (o *CreateDeploymentRequestBodyConnectionUris) GetConnectionURI() string {
	if o == nil {
		return ""
	}
	return o.ConnectionURI
}

type CreateDeploymentRequestBodyCrons struct {
	Path     string `json:"path"`
	Schedule string `json:"schedule"`
}

func (o *CreateDeploymentRequestBodyCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeploymentRequestBodyCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateDeploymentRequestBodyDatabase struct {
	BranchID  string `json:"branch_id"`
	CreatedAt string `json:"created_at"`
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	OwnerName string `json:"owner_name"`
	UpdatedAt string `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyDatabase) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyDatabase) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyDatabase) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyDatabase) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyDatabase) GetOwnerName() string {
	if o == nil {
		return ""
	}
	return o.OwnerName
}

func (o *CreateDeploymentRequestBodyDatabase) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateDeploymentRequestBodyDatabases struct {
	BranchID  string `json:"branch_id"`
	CreatedAt string `json:"created_at"`
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	OwnerName string `json:"owner_name"`
	UpdatedAt string `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyDatabases) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyDatabases) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyDatabases) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyDatabases) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyDatabases) GetOwnerName() string {
	if o == nil {
		return ""
	}
	return o.OwnerName
}

func (o *CreateDeploymentRequestBodyDatabases) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateDeploymentRequestBodyEndpoint struct {
	AutoscalingLimitMaxCu int64   `json:"autoscaling_limit_max_cu"`
	AutoscalingLimitMinCu int64   `json:"autoscaling_limit_min_cu"`
	BranchID              string  `json:"branch_id"`
	CreatedAt             string  `json:"created_at"`
	CurrentState          string  `json:"current_state"`
	Disabled              bool    `json:"disabled"`
	Host                  string  `json:"host"`
	ID                    string  `json:"id"`
	LastActive            *string `json:"last_active,omitempty"`
	PasswordlessAccess    bool    `json:"passwordless_access"`
	PoolerEnabled         bool    `json:"pooler_enabled"`
	PoolerMode            string  `json:"pooler_mode"`
	ProjectID             string  `json:"project_id"`
	RegionID              string  `json:"region_id"`
	SuspendTimeoutSeconds int64   `json:"suspend_timeout_seconds"`
	Type                  string  `json:"type"`
	UpdatedAt             string  `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyEndpoint) GetAutoscalingLimitMaxCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMaxCu
}

func (o *CreateDeploymentRequestBodyEndpoint) GetAutoscalingLimitMinCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMinCu
}

func (o *CreateDeploymentRequestBodyEndpoint) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyEndpoint) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyEndpoint) GetCurrentState() string {
	if o == nil {
		return ""
	}
	return o.CurrentState
}

func (o *CreateDeploymentRequestBodyEndpoint) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *CreateDeploymentRequestBodyEndpoint) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateDeploymentRequestBodyEndpoint) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyEndpoint) GetLastActive() *string {
	if o == nil {
		return nil
	}
	return o.LastActive
}

func (o *CreateDeploymentRequestBodyEndpoint) GetPasswordlessAccess() bool {
	if o == nil {
		return false
	}
	return o.PasswordlessAccess
}

func (o *CreateDeploymentRequestBodyEndpoint) GetPoolerEnabled() bool {
	if o == nil {
		return false
	}
	return o.PoolerEnabled
}

func (o *CreateDeploymentRequestBodyEndpoint) GetPoolerMode() string {
	if o == nil {
		return ""
	}
	return o.PoolerMode
}

func (o *CreateDeploymentRequestBodyEndpoint) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeploymentRequestBodyEndpoint) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *CreateDeploymentRequestBodyEndpoint) GetSuspendTimeoutSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.SuspendTimeoutSeconds
}

func (o *CreateDeploymentRequestBodyEndpoint) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyEndpoint) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateDeploymentRequestBodyEndpoints struct {
	AutoscalingLimitMaxCu int64   `json:"autoscaling_limit_max_cu"`
	AutoscalingLimitMinCu int64   `json:"autoscaling_limit_min_cu"`
	BranchID              string  `json:"branch_id"`
	CreatedAt             string  `json:"created_at"`
	CurrentState          string  `json:"current_state"`
	Disabled              bool    `json:"disabled"`
	Host                  string  `json:"host"`
	ID                    string  `json:"id"`
	LastActive            *string `json:"last_active,omitempty"`
	PasswordlessAccess    bool    `json:"passwordless_access"`
	PoolerEnabled         bool    `json:"pooler_enabled"`
	PoolerMode            string  `json:"pooler_mode"`
	ProjectID             string  `json:"project_id"`
	RegionID              string  `json:"region_id"`
	SuspendTimeoutSeconds int64   `json:"suspend_timeout_seconds"`
	Type                  string  `json:"type"`
	UpdatedAt             string  `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyEndpoints) GetAutoscalingLimitMaxCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMaxCu
}

func (o *CreateDeploymentRequestBodyEndpoints) GetAutoscalingLimitMinCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMinCu
}

func (o *CreateDeploymentRequestBodyEndpoints) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyEndpoints) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyEndpoints) GetCurrentState() string {
	if o == nil {
		return ""
	}
	return o.CurrentState
}

func (o *CreateDeploymentRequestBodyEndpoints) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *CreateDeploymentRequestBodyEndpoints) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateDeploymentRequestBodyEndpoints) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyEndpoints) GetLastActive() *string {
	if o == nil {
		return nil
	}
	return o.LastActive
}

func (o *CreateDeploymentRequestBodyEndpoints) GetPasswordlessAccess() bool {
	if o == nil {
		return false
	}
	return o.PasswordlessAccess
}

func (o *CreateDeploymentRequestBodyEndpoints) GetPoolerEnabled() bool {
	if o == nil {
		return false
	}
	return o.PoolerEnabled
}

func (o *CreateDeploymentRequestBodyEndpoints) GetPoolerMode() string {
	if o == nil {
		return ""
	}
	return o.PoolerMode
}

func (o *CreateDeploymentRequestBodyEndpoints) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeploymentRequestBodyEndpoints) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *CreateDeploymentRequestBodyEndpoints) GetSuspendTimeoutSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.SuspendTimeoutSeconds
}

func (o *CreateDeploymentRequestBodyEndpoints) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyEndpoints) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

// CreateDeploymentRequestBodyFilesUploadedFile - Used in the case you want to reference a file that was already uploaded
type CreateDeploymentRequestBodyFilesUploadedFile struct {
	// The file path relative to the project root
	File string `json:"file"`
	// The file contents hashed with SHA1, used to check the integrity
	Sha *string `json:"sha,omitempty"`
	// The file size in bytes
	Size *int64 `json:"size,omitempty"`
}

func (o *CreateDeploymentRequestBodyFilesUploadedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

func (o *CreateDeploymentRequestBodyFilesUploadedFile) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyFilesUploadedFile) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

// CreateDeploymentRequestBodyFilesInlinedFileEncoding - The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
type CreateDeploymentRequestBodyFilesInlinedFileEncoding string

const (
	CreateDeploymentRequestBodyFilesInlinedFileEncodingBase64 CreateDeploymentRequestBodyFilesInlinedFileEncoding = "base64"
	CreateDeploymentRequestBodyFilesInlinedFileEncodingUTF8   CreateDeploymentRequestBodyFilesInlinedFileEncoding = "utf-8"
)

func (e CreateDeploymentRequestBodyFilesInlinedFileEncoding) ToPointer() *CreateDeploymentRequestBodyFilesInlinedFileEncoding {
	return &e
}

func (e *CreateDeploymentRequestBodyFilesInlinedFileEncoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "base64":
		fallthrough
	case "utf-8":
		*e = CreateDeploymentRequestBodyFilesInlinedFileEncoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyFilesInlinedFileEncoding: %v", v)
	}
}

// CreateDeploymentRequestBodyFilesInlinedFile - Used in the case you want to inline a file inside the request
type CreateDeploymentRequestBodyFilesInlinedFile struct {
	// The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code
	Data string `json:"data"`
	// The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
	Encoding *CreateDeploymentRequestBodyFilesInlinedFileEncoding `json:"encoding,omitempty"`
	// The file name including the whole path
	File string `json:"file"`
}

func (o *CreateDeploymentRequestBodyFilesInlinedFile) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *CreateDeploymentRequestBodyFilesInlinedFile) GetEncoding() *CreateDeploymentRequestBodyFilesInlinedFileEncoding {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *CreateDeploymentRequestBodyFilesInlinedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

type CreateDeploymentRequestBodyFilesType string

const (
	CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesInlinedFile  CreateDeploymentRequestBodyFilesType = "createDeployment_requestBody_files_InlinedFile"
	CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesUploadedFile CreateDeploymentRequestBodyFilesType = "createDeployment_requestBody_files_UploadedFile"
)

type CreateDeploymentRequestBodyFiles struct {
	CreateDeploymentRequestBodyFilesInlinedFile  *CreateDeploymentRequestBodyFilesInlinedFile
	CreateDeploymentRequestBodyFilesUploadedFile *CreateDeploymentRequestBodyFilesUploadedFile

	Type CreateDeploymentRequestBodyFilesType
}

func CreateCreateDeploymentRequestBodyFilesCreateDeploymentRequestBodyFilesInlinedFile(createDeploymentRequestBodyFilesInlinedFile CreateDeploymentRequestBodyFilesInlinedFile) CreateDeploymentRequestBodyFiles {
	typ := CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesInlinedFile

	return CreateDeploymentRequestBodyFiles{
		CreateDeploymentRequestBodyFilesInlinedFile: &createDeploymentRequestBodyFilesInlinedFile,
		Type: typ,
	}
}

func CreateCreateDeploymentRequestBodyFilesCreateDeploymentRequestBodyFilesUploadedFile(createDeploymentRequestBodyFilesUploadedFile CreateDeploymentRequestBodyFilesUploadedFile) CreateDeploymentRequestBodyFiles {
	typ := CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesUploadedFile

	return CreateDeploymentRequestBodyFiles{
		CreateDeploymentRequestBodyFilesUploadedFile: &createDeploymentRequestBodyFilesUploadedFile,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyFiles) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyFilesInlinedFile := new(CreateDeploymentRequestBodyFilesInlinedFile)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyFilesInlinedFile, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyFilesInlinedFile = createDeploymentRequestBodyFilesInlinedFile
		u.Type = CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesInlinedFile
		return nil
	}

	createDeploymentRequestBodyFilesUploadedFile := new(CreateDeploymentRequestBodyFilesUploadedFile)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyFilesUploadedFile, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyFilesUploadedFile = createDeploymentRequestBodyFilesUploadedFile
		u.Type = CreateDeploymentRequestBodyFilesTypeCreateDeploymentRequestBodyFilesUploadedFile
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyFiles) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyFilesInlinedFile != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyFilesInlinedFile, "", true)
	}

	if u.CreateDeploymentRequestBodyFilesUploadedFile != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyFilesUploadedFile, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentRequestBodyFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateDeploymentRequestBodyFramework string

const (
	CreateDeploymentRequestBodyFrameworkLessThanNilGreaterThan CreateDeploymentRequestBodyFramework = "<nil>"
	CreateDeploymentRequestBodyFrameworkBlitzjs                CreateDeploymentRequestBodyFramework = "blitzjs"
	CreateDeploymentRequestBodyFrameworkNextjs                 CreateDeploymentRequestBodyFramework = "nextjs"
	CreateDeploymentRequestBodyFrameworkGatsby                 CreateDeploymentRequestBodyFramework = "gatsby"
	CreateDeploymentRequestBodyFrameworkRemix                  CreateDeploymentRequestBodyFramework = "remix"
	CreateDeploymentRequestBodyFrameworkAstro                  CreateDeploymentRequestBodyFramework = "astro"
	CreateDeploymentRequestBodyFrameworkHexo                   CreateDeploymentRequestBodyFramework = "hexo"
	CreateDeploymentRequestBodyFrameworkEleventy               CreateDeploymentRequestBodyFramework = "eleventy"
	CreateDeploymentRequestBodyFrameworkDocusaurus2            CreateDeploymentRequestBodyFramework = "docusaurus-2"
	CreateDeploymentRequestBodyFrameworkDocusaurus             CreateDeploymentRequestBodyFramework = "docusaurus"
	CreateDeploymentRequestBodyFrameworkPreact                 CreateDeploymentRequestBodyFramework = "preact"
	CreateDeploymentRequestBodyFrameworkSolidstart             CreateDeploymentRequestBodyFramework = "solidstart"
	CreateDeploymentRequestBodyFrameworkDojo                   CreateDeploymentRequestBodyFramework = "dojo"
	CreateDeploymentRequestBodyFrameworkEmber                  CreateDeploymentRequestBodyFramework = "ember"
	CreateDeploymentRequestBodyFrameworkVue                    CreateDeploymentRequestBodyFramework = "vue"
	CreateDeploymentRequestBodyFrameworkScully                 CreateDeploymentRequestBodyFramework = "scully"
	CreateDeploymentRequestBodyFrameworkIonicAngular           CreateDeploymentRequestBodyFramework = "ionic-angular"
	CreateDeploymentRequestBodyFrameworkAngular                CreateDeploymentRequestBodyFramework = "angular"
	CreateDeploymentRequestBodyFrameworkPolymer                CreateDeploymentRequestBodyFramework = "polymer"
	CreateDeploymentRequestBodyFrameworkSvelte                 CreateDeploymentRequestBodyFramework = "svelte"
	CreateDeploymentRequestBodyFrameworkSveltekit              CreateDeploymentRequestBodyFramework = "sveltekit"
	CreateDeploymentRequestBodyFrameworkSveltekit1             CreateDeploymentRequestBodyFramework = "sveltekit-1"
	CreateDeploymentRequestBodyFrameworkIonicReact             CreateDeploymentRequestBodyFramework = "ionic-react"
	CreateDeploymentRequestBodyFrameworkCreateReactApp         CreateDeploymentRequestBodyFramework = "create-react-app"
	CreateDeploymentRequestBodyFrameworkGridsome               CreateDeploymentRequestBodyFramework = "gridsome"
	CreateDeploymentRequestBodyFrameworkUmijs                  CreateDeploymentRequestBodyFramework = "umijs"
	CreateDeploymentRequestBodyFrameworkSapper                 CreateDeploymentRequestBodyFramework = "sapper"
	CreateDeploymentRequestBodyFrameworkSaber                  CreateDeploymentRequestBodyFramework = "saber"
	CreateDeploymentRequestBodyFrameworkStencil                CreateDeploymentRequestBodyFramework = "stencil"
	CreateDeploymentRequestBodyFrameworkNuxtjs                 CreateDeploymentRequestBodyFramework = "nuxtjs"
	CreateDeploymentRequestBodyFrameworkRedwoodjs              CreateDeploymentRequestBodyFramework = "redwoodjs"
	CreateDeploymentRequestBodyFrameworkHugo                   CreateDeploymentRequestBodyFramework = "hugo"
	CreateDeploymentRequestBodyFrameworkJekyll                 CreateDeploymentRequestBodyFramework = "jekyll"
	CreateDeploymentRequestBodyFrameworkBrunch                 CreateDeploymentRequestBodyFramework = "brunch"
	CreateDeploymentRequestBodyFrameworkMiddleman              CreateDeploymentRequestBodyFramework = "middleman"
	CreateDeploymentRequestBodyFrameworkZola                   CreateDeploymentRequestBodyFramework = "zola"
	CreateDeploymentRequestBodyFrameworkHydrogen               CreateDeploymentRequestBodyFramework = "hydrogen"
	CreateDeploymentRequestBodyFrameworkVite                   CreateDeploymentRequestBodyFramework = "vite"
	CreateDeploymentRequestBodyFrameworkVitepress              CreateDeploymentRequestBodyFramework = "vitepress"
	CreateDeploymentRequestBodyFrameworkVuepress               CreateDeploymentRequestBodyFramework = "vuepress"
	CreateDeploymentRequestBodyFrameworkParcel                 CreateDeploymentRequestBodyFramework = "parcel"
	CreateDeploymentRequestBodyFrameworkSanity                 CreateDeploymentRequestBodyFramework = "sanity"
	CreateDeploymentRequestBodyFrameworkStorybook              CreateDeploymentRequestBodyFramework = "storybook"
)

func (e CreateDeploymentRequestBodyFramework) ToPointer() *CreateDeploymentRequestBodyFramework {
	return &e
}

func (e *CreateDeploymentRequestBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateDeploymentRequestBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyFramework: %v", v)
	}
}

type CreateDeploymentRequestBodyFunctions struct {
	// A glob pattern to match files that should be excluded from your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	// A glob pattern to match files that should be included in your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
	IncludeFiles *string `json:"includeFiles,omitempty"`
	// An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between 1 and the maximum limit of your plan).
	MaxDuration *int64 `json:"maxDuration,omitempty"`
	// An integer defining the memory your Serverless Function should be provided with (between 128 and 3008).
	Memory *int64 `json:"memory,omitempty"`
	// The npm package name of a Runtime, including its version
	Runtime *string `json:"runtime,omitempty"`
}

func (o *CreateDeploymentRequestBodyFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CreateDeploymentRequestBodyFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CreateDeploymentRequestBodyFunctions) GetMaxDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CreateDeploymentRequestBodyFunctions) GetMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CreateDeploymentRequestBodyFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type CreateDeploymentRequestBodyGitDeploymentEnabledType string

const (
	CreateDeploymentRequestBodyGitDeploymentEnabledTypeBoolean      CreateDeploymentRequestBodyGitDeploymentEnabledType = "boolean"
	CreateDeploymentRequestBodyGitDeploymentEnabledTypeMapOfboolean CreateDeploymentRequestBodyGitDeploymentEnabledType = "mapOfboolean"
)

type CreateDeploymentRequestBodyGitDeploymentEnabled struct {
	Boolean      *bool
	MapOfboolean map[string]bool

	Type CreateDeploymentRequestBodyGitDeploymentEnabledType
}

func CreateCreateDeploymentRequestBodyGitDeploymentEnabledBoolean(boolean bool) CreateDeploymentRequestBodyGitDeploymentEnabled {
	typ := CreateDeploymentRequestBodyGitDeploymentEnabledTypeBoolean

	return CreateDeploymentRequestBodyGitDeploymentEnabled{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCreateDeploymentRequestBodyGitDeploymentEnabledMapOfboolean(mapOfboolean map[string]bool) CreateDeploymentRequestBodyGitDeploymentEnabled {
	typ := CreateDeploymentRequestBodyGitDeploymentEnabledTypeMapOfboolean

	return CreateDeploymentRequestBodyGitDeploymentEnabled{
		MapOfboolean: mapOfboolean,
		Type:         typ,
	}
}

func (u *CreateDeploymentRequestBodyGitDeploymentEnabled) UnmarshalJSON(data []byte) error {

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = CreateDeploymentRequestBodyGitDeploymentEnabledTypeBoolean
		return nil
	}

	mapOfboolean := map[string]bool{}
	if err := utils.UnmarshalJSON(data, &mapOfboolean, "", true, true); err == nil {
		u.MapOfboolean = mapOfboolean
		u.Type = CreateDeploymentRequestBodyGitDeploymentEnabledTypeMapOfboolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyGitDeploymentEnabled) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfboolean != nil {
		return utils.MarshalJSON(u.MapOfboolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyGit struct {
	// Specifies the branches that will not trigger an auto-deployment when committing to them. Any non specified branch is `true` by default.
	DeploymentEnabled *CreateDeploymentRequestBodyGitDeploymentEnabled `json:"deploymentEnabled,omitempty"`
}

func (o *CreateDeploymentRequestBodyGit) GetDeploymentEnabled() *CreateDeploymentRequestBodyGitDeploymentEnabled {
	if o == nil {
		return nil
	}
	return o.DeploymentEnabled
}

// CreateDeploymentRequestBodyGitMetadata - Populates initial git metadata for different git providers.
type CreateDeploymentRequestBodyGitMetadata struct {
	// The name of the author of the commit
	CommitAuthorName *string `json:"commitAuthorName,omitempty"`
	// The commit message
	CommitMessage *string `json:"commitMessage,omitempty"`
	// The branch on which the commit was made
	CommitRef *string `json:"commitRef,omitempty"`
	// The hash of the commit
	CommitSha *string `json:"commitSha,omitempty"`
	// Whether or not there have been modifications to the working tree since the latest commit
	Dirty *bool `json:"dirty,omitempty"`
	// The git repository's remote origin url
	RemoteURL *string `json:"remoteUrl,omitempty"`
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetCommitAuthorName() *string {
	if o == nil {
		return nil
	}
	return o.CommitAuthorName
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetCommitMessage() *string {
	if o == nil {
		return nil
	}
	return o.CommitMessage
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetCommitRef() *string {
	if o == nil {
		return nil
	}
	return o.CommitRef
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetCommitSha() *string {
	if o == nil {
		return nil
	}
	return o.CommitSha
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetDirty() *bool {
	if o == nil {
		return nil
	}
	return o.Dirty
}

func (o *CreateDeploymentRequestBodyGitMetadata) GetRemoteURL() *string {
	if o == nil {
		return nil
	}
	return o.RemoteURL
}

type CreateDeploymentRequestBodyGitSource5Type string

const (
	CreateDeploymentRequestBodyGitSource5TypeBitbucket CreateDeploymentRequestBodyGitSource5Type = "bitbucket"
)

func (e CreateDeploymentRequestBodyGitSource5Type) ToPointer() *CreateDeploymentRequestBodyGitSource5Type {
	return &e
}

func (e *CreateDeploymentRequestBodyGitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentRequestBodyGitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyGitSource5Type: %v", v)
	}
}

// CreateDeploymentRequestBodyGitSource5 - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type CreateDeploymentRequestBodyGitSource5 struct {
	Owner string                                    `json:"owner"`
	Ref   string                                    `json:"ref"`
	Sha   *string                                   `json:"sha,omitempty"`
	Slug  string                                    `json:"slug"`
	Type  CreateDeploymentRequestBodyGitSource5Type `json:"type"`
}

func (o *CreateDeploymentRequestBodyGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeploymentRequestBodyGitSource5) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeploymentRequestBodyGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeploymentRequestBodyGitSource5) GetType() CreateDeploymentRequestBodyGitSource5Type {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource5Type("")
	}
	return o.Type
}

type CreateDeploymentRequestBodyGitSource4Type string

const (
	CreateDeploymentRequestBodyGitSource4TypeBitbucket CreateDeploymentRequestBodyGitSource4Type = "bitbucket"
)

func (e CreateDeploymentRequestBodyGitSource4Type) ToPointer() *CreateDeploymentRequestBodyGitSource4Type {
	return &e
}

func (e *CreateDeploymentRequestBodyGitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentRequestBodyGitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyGitSource4Type: %v", v)
	}
}

// CreateDeploymentRequestBodyGitSource4 - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type CreateDeploymentRequestBodyGitSource4 struct {
	Ref           string                                    `json:"ref"`
	RepoUUID      string                                    `json:"repoUuid"`
	Sha           *string                                   `json:"sha,omitempty"`
	Type          CreateDeploymentRequestBodyGitSource4Type `json:"type"`
	WorkspaceUUID *string                                   `json:"workspaceUuid,omitempty"`
}

func (o *CreateDeploymentRequestBodyGitSource4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeploymentRequestBodyGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeploymentRequestBodyGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyGitSource4) GetType() CreateDeploymentRequestBodyGitSource4Type {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource4Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateDeploymentRequestBodyGitSource3ProjectIDType string

const (
	CreateDeploymentRequestBodyGitSource3ProjectIDTypeInteger CreateDeploymentRequestBodyGitSource3ProjectIDType = "integer"
	CreateDeploymentRequestBodyGitSource3ProjectIDTypeStr     CreateDeploymentRequestBodyGitSource3ProjectIDType = "str"
)

type CreateDeploymentRequestBodyGitSource3ProjectID struct {
	Integer *int64
	Str     *string

	Type CreateDeploymentRequestBodyGitSource3ProjectIDType
}

func CreateCreateDeploymentRequestBodyGitSource3ProjectIDInteger(integer int64) CreateDeploymentRequestBodyGitSource3ProjectID {
	typ := CreateDeploymentRequestBodyGitSource3ProjectIDTypeInteger

	return CreateDeploymentRequestBodyGitSource3ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSource3ProjectIDStr(str string) CreateDeploymentRequestBodyGitSource3ProjectID {
	typ := CreateDeploymentRequestBodyGitSource3ProjectIDTypeStr

	return CreateDeploymentRequestBodyGitSource3ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyGitSource3ProjectID) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateDeploymentRequestBodyGitSource3ProjectIDTypeInteger
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateDeploymentRequestBodyGitSource3ProjectIDTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyGitSource3ProjectID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyGitSource3Type string

const (
	CreateDeploymentRequestBodyGitSource3TypeGitlab CreateDeploymentRequestBodyGitSource3Type = "gitlab"
)

func (e CreateDeploymentRequestBodyGitSource3Type) ToPointer() *CreateDeploymentRequestBodyGitSource3Type {
	return &e
}

func (e *CreateDeploymentRequestBodyGitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentRequestBodyGitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyGitSource3Type: %v", v)
	}
}

// CreateDeploymentRequestBodyGitSource3 - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type CreateDeploymentRequestBodyGitSource3 struct {
	ProjectID CreateDeploymentRequestBodyGitSource3ProjectID `json:"projectId"`
	Ref       string                                         `json:"ref"`
	Sha       *string                                        `json:"sha,omitempty"`
	Type      CreateDeploymentRequestBodyGitSource3Type      `json:"type"`
}

func (o *CreateDeploymentRequestBodyGitSource3) GetProjectID() CreateDeploymentRequestBodyGitSource3ProjectID {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource3ProjectID{}
	}
	return o.ProjectID
}

func (o *CreateDeploymentRequestBodyGitSource3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeploymentRequestBodyGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyGitSource3) GetType() CreateDeploymentRequestBodyGitSource3Type {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource3Type("")
	}
	return o.Type
}

type CreateDeploymentRequestBodyGitSource2Type string

const (
	CreateDeploymentRequestBodyGitSource2TypeGithub CreateDeploymentRequestBodyGitSource2Type = "github"
)

func (e CreateDeploymentRequestBodyGitSource2Type) ToPointer() *CreateDeploymentRequestBodyGitSource2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyGitSource2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentRequestBodyGitSource2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyGitSource2Type: %v", v)
	}
}

// CreateDeploymentRequestBodyGitSource2 - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type CreateDeploymentRequestBodyGitSource2 struct {
	Org  string                                    `json:"org"`
	Ref  string                                    `json:"ref"`
	Repo string                                    `json:"repo"`
	Sha  *string                                   `json:"sha,omitempty"`
	Type CreateDeploymentRequestBodyGitSource2Type `json:"type"`
}

func (o *CreateDeploymentRequestBodyGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeploymentRequestBodyGitSource2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeploymentRequestBodyGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeploymentRequestBodyGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyGitSource2) GetType() CreateDeploymentRequestBodyGitSource2Type {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource2Type("")
	}
	return o.Type
}

type CreateDeploymentRequestBodyGitSource1RepoIDType string

const (
	CreateDeploymentRequestBodyGitSource1RepoIDTypeInteger CreateDeploymentRequestBodyGitSource1RepoIDType = "integer"
	CreateDeploymentRequestBodyGitSource1RepoIDTypeStr     CreateDeploymentRequestBodyGitSource1RepoIDType = "str"
)

type CreateDeploymentRequestBodyGitSource1RepoID struct {
	Integer *int64
	Str     *string

	Type CreateDeploymentRequestBodyGitSource1RepoIDType
}

func CreateCreateDeploymentRequestBodyGitSource1RepoIDInteger(integer int64) CreateDeploymentRequestBodyGitSource1RepoID {
	typ := CreateDeploymentRequestBodyGitSource1RepoIDTypeInteger

	return CreateDeploymentRequestBodyGitSource1RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSource1RepoIDStr(str string) CreateDeploymentRequestBodyGitSource1RepoID {
	typ := CreateDeploymentRequestBodyGitSource1RepoIDTypeStr

	return CreateDeploymentRequestBodyGitSource1RepoID{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyGitSource1RepoID) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateDeploymentRequestBodyGitSource1RepoIDTypeInteger
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateDeploymentRequestBodyGitSource1RepoIDTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyGitSource1RepoID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyGitSource1Type string

const (
	CreateDeploymentRequestBodyGitSource1TypeGithub CreateDeploymentRequestBodyGitSource1Type = "github"
)

func (e CreateDeploymentRequestBodyGitSource1Type) ToPointer() *CreateDeploymentRequestBodyGitSource1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyGitSource1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentRequestBodyGitSource1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyGitSource1Type: %v", v)
	}
}

// CreateDeploymentRequestBodyGitSource1 - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type CreateDeploymentRequestBodyGitSource1 struct {
	Ref    string                                      `json:"ref"`
	RepoID CreateDeploymentRequestBodyGitSource1RepoID `json:"repoId"`
	Sha    *string                                     `json:"sha,omitempty"`
	Type   CreateDeploymentRequestBodyGitSource1Type   `json:"type"`
}

func (o *CreateDeploymentRequestBodyGitSource1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeploymentRequestBodyGitSource1) GetRepoID() CreateDeploymentRequestBodyGitSource1RepoID {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource1RepoID{}
	}
	return o.RepoID
}

func (o *CreateDeploymentRequestBodyGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentRequestBodyGitSource1) GetType() CreateDeploymentRequestBodyGitSource1Type {
	if o == nil {
		return CreateDeploymentRequestBodyGitSource1Type("")
	}
	return o.Type
}

type CreateDeploymentRequestBodyGitSourceType string

const (
	CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource1 CreateDeploymentRequestBodyGitSourceType = "createDeployment_requestBody_gitSource_1"
	CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource2 CreateDeploymentRequestBodyGitSourceType = "createDeployment_requestBody_gitSource_2"
	CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource3 CreateDeploymentRequestBodyGitSourceType = "createDeployment_requestBody_gitSource_3"
	CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource4 CreateDeploymentRequestBodyGitSourceType = "createDeployment_requestBody_gitSource_4"
	CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource5 CreateDeploymentRequestBodyGitSourceType = "createDeployment_requestBody_gitSource_5"
)

type CreateDeploymentRequestBodyGitSource struct {
	CreateDeploymentRequestBodyGitSource1 *CreateDeploymentRequestBodyGitSource1
	CreateDeploymentRequestBodyGitSource2 *CreateDeploymentRequestBodyGitSource2
	CreateDeploymentRequestBodyGitSource3 *CreateDeploymentRequestBodyGitSource3
	CreateDeploymentRequestBodyGitSource4 *CreateDeploymentRequestBodyGitSource4
	CreateDeploymentRequestBodyGitSource5 *CreateDeploymentRequestBodyGitSource5

	Type CreateDeploymentRequestBodyGitSourceType
}

func CreateCreateDeploymentRequestBodyGitSourceCreateDeploymentRequestBodyGitSource1(createDeploymentRequestBodyGitSource1 CreateDeploymentRequestBodyGitSource1) CreateDeploymentRequestBodyGitSource {
	typ := CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource1

	return CreateDeploymentRequestBodyGitSource{
		CreateDeploymentRequestBodyGitSource1: &createDeploymentRequestBodyGitSource1,
		Type:                                  typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSourceCreateDeploymentRequestBodyGitSource2(createDeploymentRequestBodyGitSource2 CreateDeploymentRequestBodyGitSource2) CreateDeploymentRequestBodyGitSource {
	typ := CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource2

	return CreateDeploymentRequestBodyGitSource{
		CreateDeploymentRequestBodyGitSource2: &createDeploymentRequestBodyGitSource2,
		Type:                                  typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSourceCreateDeploymentRequestBodyGitSource3(createDeploymentRequestBodyGitSource3 CreateDeploymentRequestBodyGitSource3) CreateDeploymentRequestBodyGitSource {
	typ := CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource3

	return CreateDeploymentRequestBodyGitSource{
		CreateDeploymentRequestBodyGitSource3: &createDeploymentRequestBodyGitSource3,
		Type:                                  typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSourceCreateDeploymentRequestBodyGitSource4(createDeploymentRequestBodyGitSource4 CreateDeploymentRequestBodyGitSource4) CreateDeploymentRequestBodyGitSource {
	typ := CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource4

	return CreateDeploymentRequestBodyGitSource{
		CreateDeploymentRequestBodyGitSource4: &createDeploymentRequestBodyGitSource4,
		Type:                                  typ,
	}
}

func CreateCreateDeploymentRequestBodyGitSourceCreateDeploymentRequestBodyGitSource5(createDeploymentRequestBodyGitSource5 CreateDeploymentRequestBodyGitSource5) CreateDeploymentRequestBodyGitSource {
	typ := CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource5

	return CreateDeploymentRequestBodyGitSource{
		CreateDeploymentRequestBodyGitSource5: &createDeploymentRequestBodyGitSource5,
		Type:                                  typ,
	}
}

func (u *CreateDeploymentRequestBodyGitSource) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyGitSource1 := new(CreateDeploymentRequestBodyGitSource1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyGitSource1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyGitSource1 = createDeploymentRequestBodyGitSource1
		u.Type = CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource1
		return nil
	}

	createDeploymentRequestBodyGitSource3 := new(CreateDeploymentRequestBodyGitSource3)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyGitSource3, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyGitSource3 = createDeploymentRequestBodyGitSource3
		u.Type = CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource3
		return nil
	}

	createDeploymentRequestBodyGitSource2 := new(CreateDeploymentRequestBodyGitSource2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyGitSource2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyGitSource2 = createDeploymentRequestBodyGitSource2
		u.Type = CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource2
		return nil
	}

	createDeploymentRequestBodyGitSource4 := new(CreateDeploymentRequestBodyGitSource4)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyGitSource4, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyGitSource4 = createDeploymentRequestBodyGitSource4
		u.Type = CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource4
		return nil
	}

	createDeploymentRequestBodyGitSource5 := new(CreateDeploymentRequestBodyGitSource5)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyGitSource5, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyGitSource5 = createDeploymentRequestBodyGitSource5
		u.Type = CreateDeploymentRequestBodyGitSourceTypeCreateDeploymentRequestBodyGitSource5
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyGitSource) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyGitSource1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyGitSource1, "", true)
	}

	if u.CreateDeploymentRequestBodyGitSource2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyGitSource2, "", true)
	}

	if u.CreateDeploymentRequestBodyGitSource3 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyGitSource3, "", true)
	}

	if u.CreateDeploymentRequestBodyGitSource4 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyGitSource4, "", true)
	}

	if u.CreateDeploymentRequestBodyGitSource5 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyGitSource5, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentRequestBodyHeadersHas2Type - The type of request element to check
type CreateDeploymentRequestBodyHeadersHas2Type string

const (
	CreateDeploymentRequestBodyHeadersHas2TypeHeader CreateDeploymentRequestBodyHeadersHas2Type = "header"
	CreateDeploymentRequestBodyHeadersHas2TypeCookie CreateDeploymentRequestBodyHeadersHas2Type = "cookie"
	CreateDeploymentRequestBodyHeadersHas2TypeQuery  CreateDeploymentRequestBodyHeadersHas2Type = "query"
)

func (e CreateDeploymentRequestBodyHeadersHas2Type) ToPointer() *CreateDeploymentRequestBodyHeadersHas2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyHeadersHas2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyHeadersHas2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyHeadersHas2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyHeadersHas2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyHeadersHas2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyHeadersHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyHeadersHas2) GetType() CreateDeploymentRequestBodyHeadersHas2Type {
	if o == nil {
		return CreateDeploymentRequestBodyHeadersHas2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyHeadersHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyHeadersHas1Type - The type of request element to check
type CreateDeploymentRequestBodyHeadersHas1Type string

const (
	CreateDeploymentRequestBodyHeadersHas1TypeHost CreateDeploymentRequestBodyHeadersHas1Type = "host"
)

func (e CreateDeploymentRequestBodyHeadersHas1Type) ToPointer() *CreateDeploymentRequestBodyHeadersHas1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyHeadersHas1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyHeadersHas1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyHeadersHas1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyHeadersHas1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyHeadersHas1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyHeadersHas1) GetType() CreateDeploymentRequestBodyHeadersHas1Type {
	if o == nil {
		return CreateDeploymentRequestBodyHeadersHas1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyHeadersHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyHeadersHasType string

const (
	CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas1 CreateDeploymentRequestBodyHeadersHasType = "createDeployment_requestBody_headers_has_1"
	CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas2 CreateDeploymentRequestBodyHeadersHasType = "createDeployment_requestBody_headers_has_2"
)

type CreateDeploymentRequestBodyHeadersHas struct {
	CreateDeploymentRequestBodyHeadersHas1 *CreateDeploymentRequestBodyHeadersHas1
	CreateDeploymentRequestBodyHeadersHas2 *CreateDeploymentRequestBodyHeadersHas2

	Type CreateDeploymentRequestBodyHeadersHasType
}

func CreateCreateDeploymentRequestBodyHeadersHasCreateDeploymentRequestBodyHeadersHas1(createDeploymentRequestBodyHeadersHas1 CreateDeploymentRequestBodyHeadersHas1) CreateDeploymentRequestBodyHeadersHas {
	typ := CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas1

	return CreateDeploymentRequestBodyHeadersHas{
		CreateDeploymentRequestBodyHeadersHas1: &createDeploymentRequestBodyHeadersHas1,
		Type:                                   typ,
	}
}

func CreateCreateDeploymentRequestBodyHeadersHasCreateDeploymentRequestBodyHeadersHas2(createDeploymentRequestBodyHeadersHas2 CreateDeploymentRequestBodyHeadersHas2) CreateDeploymentRequestBodyHeadersHas {
	typ := CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas2

	return CreateDeploymentRequestBodyHeadersHas{
		CreateDeploymentRequestBodyHeadersHas2: &createDeploymentRequestBodyHeadersHas2,
		Type:                                   typ,
	}
}

func (u *CreateDeploymentRequestBodyHeadersHas) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyHeadersHas1 := new(CreateDeploymentRequestBodyHeadersHas1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyHeadersHas1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyHeadersHas1 = createDeploymentRequestBodyHeadersHas1
		u.Type = CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas1
		return nil
	}

	createDeploymentRequestBodyHeadersHas2 := new(CreateDeploymentRequestBodyHeadersHas2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyHeadersHas2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyHeadersHas2 = createDeploymentRequestBodyHeadersHas2
		u.Type = CreateDeploymentRequestBodyHeadersHasTypeCreateDeploymentRequestBodyHeadersHas2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyHeadersHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyHeadersHas1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyHeadersHas1, "", true)
	}

	if u.CreateDeploymentRequestBodyHeadersHas2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyHeadersHas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyHeadersHeaders struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyHeadersHeaders) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyHeadersHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateDeploymentRequestBodyHeadersMissing2Type - The type of request element to check
type CreateDeploymentRequestBodyHeadersMissing2Type string

const (
	CreateDeploymentRequestBodyHeadersMissing2TypeHeader CreateDeploymentRequestBodyHeadersMissing2Type = "header"
	CreateDeploymentRequestBodyHeadersMissing2TypeCookie CreateDeploymentRequestBodyHeadersMissing2Type = "cookie"
	CreateDeploymentRequestBodyHeadersMissing2TypeQuery  CreateDeploymentRequestBodyHeadersMissing2Type = "query"
)

func (e CreateDeploymentRequestBodyHeadersMissing2Type) ToPointer() *CreateDeploymentRequestBodyHeadersMissing2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyHeadersMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyHeadersMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyHeadersMissing2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyHeadersMissing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyHeadersMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyHeadersMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyHeadersMissing2) GetType() CreateDeploymentRequestBodyHeadersMissing2Type {
	if o == nil {
		return CreateDeploymentRequestBodyHeadersMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyHeadersMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyHeadersMissing1Type - The type of request element to check
type CreateDeploymentRequestBodyHeadersMissing1Type string

const (
	CreateDeploymentRequestBodyHeadersMissing1TypeHost CreateDeploymentRequestBodyHeadersMissing1Type = "host"
)

func (e CreateDeploymentRequestBodyHeadersMissing1Type) ToPointer() *CreateDeploymentRequestBodyHeadersMissing1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyHeadersMissing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyHeadersMissing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyHeadersMissing1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyHeadersMissing1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyHeadersMissing1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyHeadersMissing1) GetType() CreateDeploymentRequestBodyHeadersMissing1Type {
	if o == nil {
		return CreateDeploymentRequestBodyHeadersMissing1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyHeadersMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyHeadersMissingType string

const (
	CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing1 CreateDeploymentRequestBodyHeadersMissingType = "createDeployment_requestBody_headers_missing_1"
	CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing2 CreateDeploymentRequestBodyHeadersMissingType = "createDeployment_requestBody_headers_missing_2"
)

type CreateDeploymentRequestBodyHeadersMissing struct {
	CreateDeploymentRequestBodyHeadersMissing1 *CreateDeploymentRequestBodyHeadersMissing1
	CreateDeploymentRequestBodyHeadersMissing2 *CreateDeploymentRequestBodyHeadersMissing2

	Type CreateDeploymentRequestBodyHeadersMissingType
}

func CreateCreateDeploymentRequestBodyHeadersMissingCreateDeploymentRequestBodyHeadersMissing1(createDeploymentRequestBodyHeadersMissing1 CreateDeploymentRequestBodyHeadersMissing1) CreateDeploymentRequestBodyHeadersMissing {
	typ := CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing1

	return CreateDeploymentRequestBodyHeadersMissing{
		CreateDeploymentRequestBodyHeadersMissing1: &createDeploymentRequestBodyHeadersMissing1,
		Type: typ,
	}
}

func CreateCreateDeploymentRequestBodyHeadersMissingCreateDeploymentRequestBodyHeadersMissing2(createDeploymentRequestBodyHeadersMissing2 CreateDeploymentRequestBodyHeadersMissing2) CreateDeploymentRequestBodyHeadersMissing {
	typ := CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing2

	return CreateDeploymentRequestBodyHeadersMissing{
		CreateDeploymentRequestBodyHeadersMissing2: &createDeploymentRequestBodyHeadersMissing2,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyHeadersMissing) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyHeadersMissing1 := new(CreateDeploymentRequestBodyHeadersMissing1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyHeadersMissing1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyHeadersMissing1 = createDeploymentRequestBodyHeadersMissing1
		u.Type = CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing1
		return nil
	}

	createDeploymentRequestBodyHeadersMissing2 := new(CreateDeploymentRequestBodyHeadersMissing2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyHeadersMissing2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyHeadersMissing2 = createDeploymentRequestBodyHeadersMissing2
		u.Type = CreateDeploymentRequestBodyHeadersMissingTypeCreateDeploymentRequestBodyHeadersMissing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyHeadersMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyHeadersMissing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyHeadersMissing1, "", true)
	}

	if u.CreateDeploymentRequestBodyHeadersMissing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyHeadersMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyHeaders struct {
	// An array of requirements that are needed to match
	Has []CreateDeploymentRequestBodyHeadersHas `json:"has,omitempty"`
	// An array of key/value pairs representing each response header.
	Headers []CreateDeploymentRequestBodyHeadersHeaders `json:"headers"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentRequestBodyHeadersMissing `json:"missing,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring)
	Source string `json:"source"`
}

func (o *CreateDeploymentRequestBodyHeaders) GetHas() []CreateDeploymentRequestBodyHeadersHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentRequestBodyHeaders) GetHeaders() []CreateDeploymentRequestBodyHeadersHeaders {
	if o == nil {
		return []CreateDeploymentRequestBodyHeadersHeaders{}
	}
	return o.Headers
}

func (o *CreateDeploymentRequestBodyHeaders) GetMissing() []CreateDeploymentRequestBodyHeadersMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentRequestBodyHeaders) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type CreateDeploymentRequestBodyImagesContentDispositionType string

const (
	CreateDeploymentRequestBodyImagesContentDispositionTypeInline     CreateDeploymentRequestBodyImagesContentDispositionType = "inline"
	CreateDeploymentRequestBodyImagesContentDispositionTypeAttachment CreateDeploymentRequestBodyImagesContentDispositionType = "attachment"
)

func (e CreateDeploymentRequestBodyImagesContentDispositionType) ToPointer() *CreateDeploymentRequestBodyImagesContentDispositionType {
	return &e
}

func (e *CreateDeploymentRequestBodyImagesContentDispositionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = CreateDeploymentRequestBodyImagesContentDispositionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyImagesContentDispositionType: %v", v)
	}
}

type CreateDeploymentRequestBodyImagesFormats string

const (
	CreateDeploymentRequestBodyImagesFormatsImageAvif CreateDeploymentRequestBodyImagesFormats = "image/avif"
	CreateDeploymentRequestBodyImagesFormatsImageWebp CreateDeploymentRequestBodyImagesFormats = "image/webp"
	CreateDeploymentRequestBodyImagesFormatsImageJpeg CreateDeploymentRequestBodyImagesFormats = "image/jpeg"
	CreateDeploymentRequestBodyImagesFormatsImagePng  CreateDeploymentRequestBodyImagesFormats = "image/png"
)

func (e CreateDeploymentRequestBodyImagesFormats) ToPointer() *CreateDeploymentRequestBodyImagesFormats {
	return &e
}

func (e *CreateDeploymentRequestBodyImagesFormats) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/avif":
		fallthrough
	case "image/webp":
		fallthrough
	case "image/jpeg":
		fallthrough
	case "image/png":
		*e = CreateDeploymentRequestBodyImagesFormats(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyImagesFormats: %v", v)
	}
}

type CreateDeploymentRequestBodyImagesRemotePatternsProtocol string

const (
	CreateDeploymentRequestBodyImagesRemotePatternsProtocolHTTP  CreateDeploymentRequestBodyImagesRemotePatternsProtocol = "http"
	CreateDeploymentRequestBodyImagesRemotePatternsProtocolHTTPS CreateDeploymentRequestBodyImagesRemotePatternsProtocol = "https"
)

func (e CreateDeploymentRequestBodyImagesRemotePatternsProtocol) ToPointer() *CreateDeploymentRequestBodyImagesRemotePatternsProtocol {
	return &e
}

func (e *CreateDeploymentRequestBodyImagesRemotePatternsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = CreateDeploymentRequestBodyImagesRemotePatternsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyImagesRemotePatternsProtocol: %v", v)
	}
}

type CreateDeploymentRequestBodyImagesRemotePatterns struct {
	Hostname string                                                   `json:"hostname"`
	Pathname *string                                                  `json:"pathname,omitempty"`
	Port     *string                                                  `json:"port,omitempty"`
	Protocol *CreateDeploymentRequestBodyImagesRemotePatternsProtocol `json:"protocol,omitempty"`
}

func (o *CreateDeploymentRequestBodyImagesRemotePatterns) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *CreateDeploymentRequestBodyImagesRemotePatterns) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *CreateDeploymentRequestBodyImagesRemotePatterns) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateDeploymentRequestBodyImagesRemotePatterns) GetProtocol() *CreateDeploymentRequestBodyImagesRemotePatternsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

type CreateDeploymentRequestBodyImages struct {
	ContentDispositionType *CreateDeploymentRequestBodyImagesContentDispositionType `json:"contentDispositionType,omitempty"`
	ContentSecurityPolicy  *string                                                  `json:"contentSecurityPolicy,omitempty"`
	DangerouslyAllowSVG    *bool                                                    `json:"dangerouslyAllowSVG,omitempty"`
	Domains                []string                                                 `json:"domains,omitempty"`
	Formats                []CreateDeploymentRequestBodyImagesFormats               `json:"formats,omitempty"`
	MinimumCacheTTL        *int64                                                   `json:"minimumCacheTTL,omitempty"`
	RemotePatterns         []CreateDeploymentRequestBodyImagesRemotePatterns        `json:"remotePatterns,omitempty"`
	Sizes                  []int64                                                  `json:"sizes"`
}

func (o *CreateDeploymentRequestBodyImages) GetContentDispositionType() *CreateDeploymentRequestBodyImagesContentDispositionType {
	if o == nil {
		return nil
	}
	return o.ContentDispositionType
}

func (o *CreateDeploymentRequestBodyImages) GetContentSecurityPolicy() *string {
	if o == nil {
		return nil
	}
	return o.ContentSecurityPolicy
}

func (o *CreateDeploymentRequestBodyImages) GetDangerouslyAllowSVG() *bool {
	if o == nil {
		return nil
	}
	return o.DangerouslyAllowSVG
}

func (o *CreateDeploymentRequestBodyImages) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *CreateDeploymentRequestBodyImages) GetFormats() []CreateDeploymentRequestBodyImagesFormats {
	if o == nil {
		return nil
	}
	return o.Formats
}

func (o *CreateDeploymentRequestBodyImages) GetMinimumCacheTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumCacheTTL
}

func (o *CreateDeploymentRequestBodyImages) GetRemotePatterns() []CreateDeploymentRequestBodyImagesRemotePatterns {
	if o == nil {
		return nil
	}
	return o.RemotePatterns
}

func (o *CreateDeploymentRequestBodyImages) GetSizes() []int64 {
	if o == nil {
		return []int64{}
	}
	return o.Sizes
}

type CreateDeploymentRequestBodyPagination struct {
	Cursor string `json:"cursor"`
}

func (o *CreateDeploymentRequestBodyPagination) GetCursor() string {
	if o == nil {
		return ""
	}
	return o.Cursor
}

type CreateDeploymentRequestBodyProjectSettingsQuota struct {
	// The total amount of wall-clock time allowed to be spent by a project's compute endpoints.
	ActiveTimeSeconds *int64 `json:"active_time_seconds,omitempty"`
	// The total amount of CPU seconds allowed to be spent by a project's compute endpoints.
	ComputeTimeSeconds *int64 `json:"compute_time_seconds,omitempty"`
	// The total amount of data transferred from all project's branches using proxy.
	DataTransferBytes *int64 `json:"data_transfer_bytes,omitempty"`
	// The logical size of every project's branch.
	LogicalSizeBytes *int64 `json:"logical_size_bytes,omitempty"`
	// The total amount of data written to all project's branches.
	WrittenDataBytes *int64 `json:"written_data_bytes,omitempty"`
}

func (o *CreateDeploymentRequestBodyProjectSettingsQuota) GetActiveTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ActiveTimeSeconds
}

func (o *CreateDeploymentRequestBodyProjectSettingsQuota) GetComputeTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSeconds
}

func (o *CreateDeploymentRequestBodyProjectSettingsQuota) GetDataTransferBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.DataTransferBytes
}

func (o *CreateDeploymentRequestBodyProjectSettingsQuota) GetLogicalSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.LogicalSizeBytes
}

func (o *CreateDeploymentRequestBodyProjectSettingsQuota) GetWrittenDataBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytes
}

type CreateDeploymentRequestBodyProjectSettings struct {
	Quota *CreateDeploymentRequestBodyProjectSettingsQuota `json:"quota,omitempty"`
}

func (o *CreateDeploymentRequestBodyProjectSettings) GetQuota() *CreateDeploymentRequestBodyProjectSettingsQuota {
	if o == nil {
		return nil
	}
	return o.Quota
}

type CreateDeploymentRequestBodyProject struct {
	ActiveTimeSeconds *int64 `json:"active_time_seconds,omitempty"`
	// The logical size limit for a branch in MiB.
	BranchLogicalSizeLimit int64 `json:"branch_logical_size_limit"`
	// The logical size limit for a branch in bytes.
	BranchLogicalSizeLimitBytes int64                                       `json:"branch_logical_size_limit_bytes"`
	ComputeTimeSeconds          *int64                                      `json:"compute_time_seconds,omitempty"`
	CreatedAt                   string                                      `json:"created_at"`
	DataStorageBytesHour        *int64                                      `json:"data_storage_bytes_hour,omitempty"`
	DataTransferBytes           *int64                                      `json:"data_transfer_bytes,omitempty"`
	ID                          string                                      `json:"id"`
	Name                        string                                      `json:"name"`
	OwnerID                     string                                      `json:"owner_id"`
	PgVersion                   int64                                       `json:"pg_version"`
	ProxyHost                   string                                      `json:"proxy_host"`
	QuotaResetAt                *string                                     `json:"quota_reset_at,omitempty"`
	RegionID                    string                                      `json:"region_id"`
	Settings                    *CreateDeploymentRequestBodyProjectSettings `json:"settings,omitempty"`
	StorePasswords              bool                                        `json:"store_passwords"`
	// The data storage size in bytes.
	SyntheticStorageSize *int64 `json:"synthetic_storage_size,omitempty"`
	UpdatedAt            string `json:"updated_at"`
	WrittenDataBytes     *int64 `json:"written_data_bytes,omitempty"`
}

func (o *CreateDeploymentRequestBodyProject) GetActiveTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ActiveTimeSeconds
}

func (o *CreateDeploymentRequestBodyProject) GetBranchLogicalSizeLimit() int64 {
	if o == nil {
		return 0
	}
	return o.BranchLogicalSizeLimit
}

func (o *CreateDeploymentRequestBodyProject) GetBranchLogicalSizeLimitBytes() int64 {
	if o == nil {
		return 0
	}
	return o.BranchLogicalSizeLimitBytes
}

func (o *CreateDeploymentRequestBodyProject) GetComputeTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSeconds
}

func (o *CreateDeploymentRequestBodyProject) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyProject) GetDataStorageBytesHour() *int64 {
	if o == nil {
		return nil
	}
	return o.DataStorageBytesHour
}

func (o *CreateDeploymentRequestBodyProject) GetDataTransferBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.DataTransferBytes
}

func (o *CreateDeploymentRequestBodyProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyProject) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDeploymentRequestBodyProject) GetPgVersion() int64 {
	if o == nil {
		return 0
	}
	return o.PgVersion
}

func (o *CreateDeploymentRequestBodyProject) GetProxyHost() string {
	if o == nil {
		return ""
	}
	return o.ProxyHost
}

func (o *CreateDeploymentRequestBodyProject) GetQuotaResetAt() *string {
	if o == nil {
		return nil
	}
	return o.QuotaResetAt
}

func (o *CreateDeploymentRequestBodyProject) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *CreateDeploymentRequestBodyProject) GetSettings() *CreateDeploymentRequestBodyProjectSettings {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *CreateDeploymentRequestBodyProject) GetStorePasswords() bool {
	if o == nil {
		return false
	}
	return o.StorePasswords
}

func (o *CreateDeploymentRequestBodyProject) GetSyntheticStorageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.SyntheticStorageSize
}

func (o *CreateDeploymentRequestBodyProject) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *CreateDeploymentRequestBodyProject) GetWrittenDataBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytes
}

// CreateDeploymentRequestBodyProjectSettingsFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateDeploymentRequestBodyProjectSettingsFramework string

const (
	CreateDeploymentRequestBodyProjectSettingsFrameworkLessThanNilGreaterThan CreateDeploymentRequestBodyProjectSettingsFramework = "<nil>"
	CreateDeploymentRequestBodyProjectSettingsFrameworkBlitzjs                CreateDeploymentRequestBodyProjectSettingsFramework = "blitzjs"
	CreateDeploymentRequestBodyProjectSettingsFrameworkNextjs                 CreateDeploymentRequestBodyProjectSettingsFramework = "nextjs"
	CreateDeploymentRequestBodyProjectSettingsFrameworkGatsby                 CreateDeploymentRequestBodyProjectSettingsFramework = "gatsby"
	CreateDeploymentRequestBodyProjectSettingsFrameworkRemix                  CreateDeploymentRequestBodyProjectSettingsFramework = "remix"
	CreateDeploymentRequestBodyProjectSettingsFrameworkAstro                  CreateDeploymentRequestBodyProjectSettingsFramework = "astro"
	CreateDeploymentRequestBodyProjectSettingsFrameworkHexo                   CreateDeploymentRequestBodyProjectSettingsFramework = "hexo"
	CreateDeploymentRequestBodyProjectSettingsFrameworkEleventy               CreateDeploymentRequestBodyProjectSettingsFramework = "eleventy"
	CreateDeploymentRequestBodyProjectSettingsFrameworkDocusaurus2            CreateDeploymentRequestBodyProjectSettingsFramework = "docusaurus-2"
	CreateDeploymentRequestBodyProjectSettingsFrameworkDocusaurus             CreateDeploymentRequestBodyProjectSettingsFramework = "docusaurus"
	CreateDeploymentRequestBodyProjectSettingsFrameworkPreact                 CreateDeploymentRequestBodyProjectSettingsFramework = "preact"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSolidstart             CreateDeploymentRequestBodyProjectSettingsFramework = "solidstart"
	CreateDeploymentRequestBodyProjectSettingsFrameworkDojo                   CreateDeploymentRequestBodyProjectSettingsFramework = "dojo"
	CreateDeploymentRequestBodyProjectSettingsFrameworkEmber                  CreateDeploymentRequestBodyProjectSettingsFramework = "ember"
	CreateDeploymentRequestBodyProjectSettingsFrameworkVue                    CreateDeploymentRequestBodyProjectSettingsFramework = "vue"
	CreateDeploymentRequestBodyProjectSettingsFrameworkScully                 CreateDeploymentRequestBodyProjectSettingsFramework = "scully"
	CreateDeploymentRequestBodyProjectSettingsFrameworkIonicAngular           CreateDeploymentRequestBodyProjectSettingsFramework = "ionic-angular"
	CreateDeploymentRequestBodyProjectSettingsFrameworkAngular                CreateDeploymentRequestBodyProjectSettingsFramework = "angular"
	CreateDeploymentRequestBodyProjectSettingsFrameworkPolymer                CreateDeploymentRequestBodyProjectSettingsFramework = "polymer"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSvelte                 CreateDeploymentRequestBodyProjectSettingsFramework = "svelte"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSveltekit              CreateDeploymentRequestBodyProjectSettingsFramework = "sveltekit"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSveltekit1             CreateDeploymentRequestBodyProjectSettingsFramework = "sveltekit-1"
	CreateDeploymentRequestBodyProjectSettingsFrameworkIonicReact             CreateDeploymentRequestBodyProjectSettingsFramework = "ionic-react"
	CreateDeploymentRequestBodyProjectSettingsFrameworkCreateReactApp         CreateDeploymentRequestBodyProjectSettingsFramework = "create-react-app"
	CreateDeploymentRequestBodyProjectSettingsFrameworkGridsome               CreateDeploymentRequestBodyProjectSettingsFramework = "gridsome"
	CreateDeploymentRequestBodyProjectSettingsFrameworkUmijs                  CreateDeploymentRequestBodyProjectSettingsFramework = "umijs"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSapper                 CreateDeploymentRequestBodyProjectSettingsFramework = "sapper"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSaber                  CreateDeploymentRequestBodyProjectSettingsFramework = "saber"
	CreateDeploymentRequestBodyProjectSettingsFrameworkStencil                CreateDeploymentRequestBodyProjectSettingsFramework = "stencil"
	CreateDeploymentRequestBodyProjectSettingsFrameworkNuxtjs                 CreateDeploymentRequestBodyProjectSettingsFramework = "nuxtjs"
	CreateDeploymentRequestBodyProjectSettingsFrameworkRedwoodjs              CreateDeploymentRequestBodyProjectSettingsFramework = "redwoodjs"
	CreateDeploymentRequestBodyProjectSettingsFrameworkHugo                   CreateDeploymentRequestBodyProjectSettingsFramework = "hugo"
	CreateDeploymentRequestBodyProjectSettingsFrameworkJekyll                 CreateDeploymentRequestBodyProjectSettingsFramework = "jekyll"
	CreateDeploymentRequestBodyProjectSettingsFrameworkBrunch                 CreateDeploymentRequestBodyProjectSettingsFramework = "brunch"
	CreateDeploymentRequestBodyProjectSettingsFrameworkMiddleman              CreateDeploymentRequestBodyProjectSettingsFramework = "middleman"
	CreateDeploymentRequestBodyProjectSettingsFrameworkZola                   CreateDeploymentRequestBodyProjectSettingsFramework = "zola"
	CreateDeploymentRequestBodyProjectSettingsFrameworkHydrogen               CreateDeploymentRequestBodyProjectSettingsFramework = "hydrogen"
	CreateDeploymentRequestBodyProjectSettingsFrameworkVite                   CreateDeploymentRequestBodyProjectSettingsFramework = "vite"
	CreateDeploymentRequestBodyProjectSettingsFrameworkVitepress              CreateDeploymentRequestBodyProjectSettingsFramework = "vitepress"
	CreateDeploymentRequestBodyProjectSettingsFrameworkVuepress               CreateDeploymentRequestBodyProjectSettingsFramework = "vuepress"
	CreateDeploymentRequestBodyProjectSettingsFrameworkParcel                 CreateDeploymentRequestBodyProjectSettingsFramework = "parcel"
	CreateDeploymentRequestBodyProjectSettingsFrameworkSanity                 CreateDeploymentRequestBodyProjectSettingsFramework = "sanity"
	CreateDeploymentRequestBodyProjectSettingsFrameworkStorybook              CreateDeploymentRequestBodyProjectSettingsFramework = "storybook"
)

func (e CreateDeploymentRequestBodyProjectSettingsFramework) ToPointer() *CreateDeploymentRequestBodyProjectSettingsFramework {
	return &e
}

func (e *CreateDeploymentRequestBodyProjectSettingsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateDeploymentRequestBodyProjectSettingsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyProjectSettingsFramework: %v", v)
	}
}

// CreateDeploymentRequestBodyProjectSettings1 - Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
type CreateDeploymentRequestBodyProjectSettings1 struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateDeploymentRequestBodyProjectSettingsFramework `json:"framework,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory, typically used for monorepos
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetFramework() *CreateDeploymentRequestBodyProjectSettingsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateDeploymentRequestBodyProjectSettings1) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

type CreateDeploymentRequestBodyProjects struct {
	ComputeTimeSeconds            int64   `json:"compute_time_seconds"`
	ComputeTimeSecondsUpdatedAt   *string `json:"compute_time_seconds_updated_at,omitempty"`
	DataStorageBytesHour          int64   `json:"data_storage_bytes_hour"`
	DataStorageBytesHourUpdatedAt *string `json:"data_storage_bytes_hour_updated_at,omitempty"`
	DataTransferBytes             int64   `json:"data_transfer_bytes"`
	DataTransferBytesUpdatedAt    *string `json:"data_transfer_bytes_updated_at,omitempty"`
	ID                            string  `json:"id"`
	SyntheticStorageSize          int64   `json:"synthetic_storage_size"`
	SyntheticStorageSizeUpdatedAt *string `json:"synthetic_storage_size_updated_at,omitempty"`
	WrittenDataBytes              int64   `json:"written_data_bytes"`
	WrittenDataBytesUpdatedAt     *string `json:"written_data_bytes_updated_at,omitempty"`
}

func (o *CreateDeploymentRequestBodyProjects) GetComputeTimeSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.ComputeTimeSeconds
}

func (o *CreateDeploymentRequestBodyProjects) GetComputeTimeSecondsUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSecondsUpdatedAt
}

func (o *CreateDeploymentRequestBodyProjects) GetDataStorageBytesHour() int64 {
	if o == nil {
		return 0
	}
	return o.DataStorageBytesHour
}

func (o *CreateDeploymentRequestBodyProjects) GetDataStorageBytesHourUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DataStorageBytesHourUpdatedAt
}

func (o *CreateDeploymentRequestBodyProjects) GetDataTransferBytes() int64 {
	if o == nil {
		return 0
	}
	return o.DataTransferBytes
}

func (o *CreateDeploymentRequestBodyProjects) GetDataTransferBytesUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DataTransferBytesUpdatedAt
}

func (o *CreateDeploymentRequestBodyProjects) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentRequestBodyProjects) GetSyntheticStorageSize() int64 {
	if o == nil {
		return 0
	}
	return o.SyntheticStorageSize
}

func (o *CreateDeploymentRequestBodyProjects) GetSyntheticStorageSizeUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.SyntheticStorageSizeUpdatedAt
}

func (o *CreateDeploymentRequestBodyProjects) GetWrittenDataBytes() int64 {
	if o == nil {
		return 0
	}
	return o.WrittenDataBytes
}

func (o *CreateDeploymentRequestBodyProjects) GetWrittenDataBytesUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytesUpdatedAt
}

// CreateDeploymentRequestBodyRedirectsHas2Type - The type of request element to check
type CreateDeploymentRequestBodyRedirectsHas2Type string

const (
	CreateDeploymentRequestBodyRedirectsHas2TypeHeader CreateDeploymentRequestBodyRedirectsHas2Type = "header"
	CreateDeploymentRequestBodyRedirectsHas2TypeCookie CreateDeploymentRequestBodyRedirectsHas2Type = "cookie"
	CreateDeploymentRequestBodyRedirectsHas2TypeQuery  CreateDeploymentRequestBodyRedirectsHas2Type = "query"
)

func (e CreateDeploymentRequestBodyRedirectsHas2Type) ToPointer() *CreateDeploymentRequestBodyRedirectsHas2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRedirectsHas2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRedirectsHas2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRedirectsHas2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRedirectsHas2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRedirectsHas2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRedirectsHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRedirectsHas2) GetType() CreateDeploymentRequestBodyRedirectsHas2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRedirectsHas2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRedirectsHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRedirectsHas1Type - The type of request element to check
type CreateDeploymentRequestBodyRedirectsHas1Type string

const (
	CreateDeploymentRequestBodyRedirectsHas1TypeHost CreateDeploymentRequestBodyRedirectsHas1Type = "host"
)

func (e CreateDeploymentRequestBodyRedirectsHas1Type) ToPointer() *CreateDeploymentRequestBodyRedirectsHas1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRedirectsHas1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRedirectsHas1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRedirectsHas1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRedirectsHas1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRedirectsHas1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRedirectsHas1) GetType() CreateDeploymentRequestBodyRedirectsHas1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRedirectsHas1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRedirectsHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRedirectsHasType string

const (
	CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas1 CreateDeploymentRequestBodyRedirectsHasType = "createDeployment_requestBody_redirects_has_1"
	CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas2 CreateDeploymentRequestBodyRedirectsHasType = "createDeployment_requestBody_redirects_has_2"
)

type CreateDeploymentRequestBodyRedirectsHas struct {
	CreateDeploymentRequestBodyRedirectsHas1 *CreateDeploymentRequestBodyRedirectsHas1
	CreateDeploymentRequestBodyRedirectsHas2 *CreateDeploymentRequestBodyRedirectsHas2

	Type CreateDeploymentRequestBodyRedirectsHasType
}

func CreateCreateDeploymentRequestBodyRedirectsHasCreateDeploymentRequestBodyRedirectsHas1(createDeploymentRequestBodyRedirectsHas1 CreateDeploymentRequestBodyRedirectsHas1) CreateDeploymentRequestBodyRedirectsHas {
	typ := CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas1

	return CreateDeploymentRequestBodyRedirectsHas{
		CreateDeploymentRequestBodyRedirectsHas1: &createDeploymentRequestBodyRedirectsHas1,
		Type:                                     typ,
	}
}

func CreateCreateDeploymentRequestBodyRedirectsHasCreateDeploymentRequestBodyRedirectsHas2(createDeploymentRequestBodyRedirectsHas2 CreateDeploymentRequestBodyRedirectsHas2) CreateDeploymentRequestBodyRedirectsHas {
	typ := CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas2

	return CreateDeploymentRequestBodyRedirectsHas{
		CreateDeploymentRequestBodyRedirectsHas2: &createDeploymentRequestBodyRedirectsHas2,
		Type:                                     typ,
	}
}

func (u *CreateDeploymentRequestBodyRedirectsHas) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRedirectsHas1 := new(CreateDeploymentRequestBodyRedirectsHas1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRedirectsHas1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRedirectsHas1 = createDeploymentRequestBodyRedirectsHas1
		u.Type = CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas1
		return nil
	}

	createDeploymentRequestBodyRedirectsHas2 := new(CreateDeploymentRequestBodyRedirectsHas2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRedirectsHas2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRedirectsHas2 = createDeploymentRequestBodyRedirectsHas2
		u.Type = CreateDeploymentRequestBodyRedirectsHasTypeCreateDeploymentRequestBodyRedirectsHas2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRedirectsHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRedirectsHas1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRedirectsHas1, "", true)
	}

	if u.CreateDeploymentRequestBodyRedirectsHas2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRedirectsHas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentRequestBodyRedirectsMissing2Type - The type of request element to check
type CreateDeploymentRequestBodyRedirectsMissing2Type string

const (
	CreateDeploymentRequestBodyRedirectsMissing2TypeHeader CreateDeploymentRequestBodyRedirectsMissing2Type = "header"
	CreateDeploymentRequestBodyRedirectsMissing2TypeCookie CreateDeploymentRequestBodyRedirectsMissing2Type = "cookie"
	CreateDeploymentRequestBodyRedirectsMissing2TypeQuery  CreateDeploymentRequestBodyRedirectsMissing2Type = "query"
)

func (e CreateDeploymentRequestBodyRedirectsMissing2Type) ToPointer() *CreateDeploymentRequestBodyRedirectsMissing2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRedirectsMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRedirectsMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRedirectsMissing2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRedirectsMissing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRedirectsMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRedirectsMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRedirectsMissing2) GetType() CreateDeploymentRequestBodyRedirectsMissing2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRedirectsMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRedirectsMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRedirectsMissing1Type - The type of request element to check
type CreateDeploymentRequestBodyRedirectsMissing1Type string

const (
	CreateDeploymentRequestBodyRedirectsMissing1TypeHost CreateDeploymentRequestBodyRedirectsMissing1Type = "host"
)

func (e CreateDeploymentRequestBodyRedirectsMissing1Type) ToPointer() *CreateDeploymentRequestBodyRedirectsMissing1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRedirectsMissing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRedirectsMissing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRedirectsMissing1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRedirectsMissing1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRedirectsMissing1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRedirectsMissing1) GetType() CreateDeploymentRequestBodyRedirectsMissing1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRedirectsMissing1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRedirectsMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRedirectsMissingType string

const (
	CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing1 CreateDeploymentRequestBodyRedirectsMissingType = "createDeployment_requestBody_redirects_missing_1"
	CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing2 CreateDeploymentRequestBodyRedirectsMissingType = "createDeployment_requestBody_redirects_missing_2"
)

type CreateDeploymentRequestBodyRedirectsMissing struct {
	CreateDeploymentRequestBodyRedirectsMissing1 *CreateDeploymentRequestBodyRedirectsMissing1
	CreateDeploymentRequestBodyRedirectsMissing2 *CreateDeploymentRequestBodyRedirectsMissing2

	Type CreateDeploymentRequestBodyRedirectsMissingType
}

func CreateCreateDeploymentRequestBodyRedirectsMissingCreateDeploymentRequestBodyRedirectsMissing1(createDeploymentRequestBodyRedirectsMissing1 CreateDeploymentRequestBodyRedirectsMissing1) CreateDeploymentRequestBodyRedirectsMissing {
	typ := CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing1

	return CreateDeploymentRequestBodyRedirectsMissing{
		CreateDeploymentRequestBodyRedirectsMissing1: &createDeploymentRequestBodyRedirectsMissing1,
		Type: typ,
	}
}

func CreateCreateDeploymentRequestBodyRedirectsMissingCreateDeploymentRequestBodyRedirectsMissing2(createDeploymentRequestBodyRedirectsMissing2 CreateDeploymentRequestBodyRedirectsMissing2) CreateDeploymentRequestBodyRedirectsMissing {
	typ := CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing2

	return CreateDeploymentRequestBodyRedirectsMissing{
		CreateDeploymentRequestBodyRedirectsMissing2: &createDeploymentRequestBodyRedirectsMissing2,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyRedirectsMissing) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRedirectsMissing1 := new(CreateDeploymentRequestBodyRedirectsMissing1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRedirectsMissing1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRedirectsMissing1 = createDeploymentRequestBodyRedirectsMissing1
		u.Type = CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing1
		return nil
	}

	createDeploymentRequestBodyRedirectsMissing2 := new(CreateDeploymentRequestBodyRedirectsMissing2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRedirectsMissing2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRedirectsMissing2 = createDeploymentRequestBodyRedirectsMissing2
		u.Type = CreateDeploymentRequestBodyRedirectsMissingTypeCreateDeploymentRequestBodyRedirectsMissing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRedirectsMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRedirectsMissing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRedirectsMissing1, "", true)
	}

	if u.CreateDeploymentRequestBodyRedirectsMissing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRedirectsMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyRedirects struct {
	// A location destination defined as an absolute pathname or external URL.
	Destination string `json:"destination"`
	// An array of requirements that are needed to match
	Has []CreateDeploymentRequestBodyRedirectsHas `json:"has,omitempty"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentRequestBodyRedirectsMissing `json:"missing,omitempty"`
	// A boolean to toggle between permanent and temporary redirect. When `true`, the status code is `308`. When `false` the status code is `307`.
	Permanent *bool `json:"permanent,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring).
	Source string `json:"source"`
}

func (o *CreateDeploymentRequestBodyRedirects) GetDestination() string {
	if o == nil {
		return ""
	}
	return o.Destination
}

func (o *CreateDeploymentRequestBodyRedirects) GetHas() []CreateDeploymentRequestBodyRedirectsHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentRequestBodyRedirects) GetMissing() []CreateDeploymentRequestBodyRedirectsMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentRequestBodyRedirects) GetPermanent() *bool {
	if o == nil {
		return nil
	}
	return o.Permanent
}

func (o *CreateDeploymentRequestBodyRedirects) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

// CreateDeploymentRequestBodyRewritesHas2Type - The type of request element to check
type CreateDeploymentRequestBodyRewritesHas2Type string

const (
	CreateDeploymentRequestBodyRewritesHas2TypeHeader CreateDeploymentRequestBodyRewritesHas2Type = "header"
	CreateDeploymentRequestBodyRewritesHas2TypeCookie CreateDeploymentRequestBodyRewritesHas2Type = "cookie"
	CreateDeploymentRequestBodyRewritesHas2TypeQuery  CreateDeploymentRequestBodyRewritesHas2Type = "query"
)

func (e CreateDeploymentRequestBodyRewritesHas2Type) ToPointer() *CreateDeploymentRequestBodyRewritesHas2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRewritesHas2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRewritesHas2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRewritesHas2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRewritesHas2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRewritesHas2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRewritesHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRewritesHas2) GetType() CreateDeploymentRequestBodyRewritesHas2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRewritesHas2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRewritesHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRewritesHas1Type - The type of request element to check
type CreateDeploymentRequestBodyRewritesHas1Type string

const (
	CreateDeploymentRequestBodyRewritesHas1TypeHost CreateDeploymentRequestBodyRewritesHas1Type = "host"
)

func (e CreateDeploymentRequestBodyRewritesHas1Type) ToPointer() *CreateDeploymentRequestBodyRewritesHas1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRewritesHas1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRewritesHas1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRewritesHas1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRewritesHas1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRewritesHas1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRewritesHas1) GetType() CreateDeploymentRequestBodyRewritesHas1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRewritesHas1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRewritesHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRewritesHasType string

const (
	CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas1 CreateDeploymentRequestBodyRewritesHasType = "createDeployment_requestBody_rewrites_has_1"
	CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas2 CreateDeploymentRequestBodyRewritesHasType = "createDeployment_requestBody_rewrites_has_2"
)

type CreateDeploymentRequestBodyRewritesHas struct {
	CreateDeploymentRequestBodyRewritesHas1 *CreateDeploymentRequestBodyRewritesHas1
	CreateDeploymentRequestBodyRewritesHas2 *CreateDeploymentRequestBodyRewritesHas2

	Type CreateDeploymentRequestBodyRewritesHasType
}

func CreateCreateDeploymentRequestBodyRewritesHasCreateDeploymentRequestBodyRewritesHas1(createDeploymentRequestBodyRewritesHas1 CreateDeploymentRequestBodyRewritesHas1) CreateDeploymentRequestBodyRewritesHas {
	typ := CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas1

	return CreateDeploymentRequestBodyRewritesHas{
		CreateDeploymentRequestBodyRewritesHas1: &createDeploymentRequestBodyRewritesHas1,
		Type:                                    typ,
	}
}

func CreateCreateDeploymentRequestBodyRewritesHasCreateDeploymentRequestBodyRewritesHas2(createDeploymentRequestBodyRewritesHas2 CreateDeploymentRequestBodyRewritesHas2) CreateDeploymentRequestBodyRewritesHas {
	typ := CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas2

	return CreateDeploymentRequestBodyRewritesHas{
		CreateDeploymentRequestBodyRewritesHas2: &createDeploymentRequestBodyRewritesHas2,
		Type:                                    typ,
	}
}

func (u *CreateDeploymentRequestBodyRewritesHas) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRewritesHas1 := new(CreateDeploymentRequestBodyRewritesHas1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRewritesHas1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRewritesHas1 = createDeploymentRequestBodyRewritesHas1
		u.Type = CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas1
		return nil
	}

	createDeploymentRequestBodyRewritesHas2 := new(CreateDeploymentRequestBodyRewritesHas2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRewritesHas2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRewritesHas2 = createDeploymentRequestBodyRewritesHas2
		u.Type = CreateDeploymentRequestBodyRewritesHasTypeCreateDeploymentRequestBodyRewritesHas2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRewritesHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRewritesHas1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRewritesHas1, "", true)
	}

	if u.CreateDeploymentRequestBodyRewritesHas2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRewritesHas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentRequestBodyRewritesMissing2Type - The type of request element to check
type CreateDeploymentRequestBodyRewritesMissing2Type string

const (
	CreateDeploymentRequestBodyRewritesMissing2TypeHeader CreateDeploymentRequestBodyRewritesMissing2Type = "header"
	CreateDeploymentRequestBodyRewritesMissing2TypeCookie CreateDeploymentRequestBodyRewritesMissing2Type = "cookie"
	CreateDeploymentRequestBodyRewritesMissing2TypeQuery  CreateDeploymentRequestBodyRewritesMissing2Type = "query"
)

func (e CreateDeploymentRequestBodyRewritesMissing2Type) ToPointer() *CreateDeploymentRequestBodyRewritesMissing2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRewritesMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRewritesMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRewritesMissing2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRewritesMissing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRewritesMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRewritesMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRewritesMissing2) GetType() CreateDeploymentRequestBodyRewritesMissing2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRewritesMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRewritesMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRewritesMissing1Type - The type of request element to check
type CreateDeploymentRequestBodyRewritesMissing1Type string

const (
	CreateDeploymentRequestBodyRewritesMissing1TypeHost CreateDeploymentRequestBodyRewritesMissing1Type = "host"
)

func (e CreateDeploymentRequestBodyRewritesMissing1Type) ToPointer() *CreateDeploymentRequestBodyRewritesMissing1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRewritesMissing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRewritesMissing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRewritesMissing1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRewritesMissing1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRewritesMissing1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRewritesMissing1) GetType() CreateDeploymentRequestBodyRewritesMissing1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRewritesMissing1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRewritesMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRewritesMissingType string

const (
	CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing1 CreateDeploymentRequestBodyRewritesMissingType = "createDeployment_requestBody_rewrites_missing_1"
	CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing2 CreateDeploymentRequestBodyRewritesMissingType = "createDeployment_requestBody_rewrites_missing_2"
)

type CreateDeploymentRequestBodyRewritesMissing struct {
	CreateDeploymentRequestBodyRewritesMissing1 *CreateDeploymentRequestBodyRewritesMissing1
	CreateDeploymentRequestBodyRewritesMissing2 *CreateDeploymentRequestBodyRewritesMissing2

	Type CreateDeploymentRequestBodyRewritesMissingType
}

func CreateCreateDeploymentRequestBodyRewritesMissingCreateDeploymentRequestBodyRewritesMissing1(createDeploymentRequestBodyRewritesMissing1 CreateDeploymentRequestBodyRewritesMissing1) CreateDeploymentRequestBodyRewritesMissing {
	typ := CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing1

	return CreateDeploymentRequestBodyRewritesMissing{
		CreateDeploymentRequestBodyRewritesMissing1: &createDeploymentRequestBodyRewritesMissing1,
		Type: typ,
	}
}

func CreateCreateDeploymentRequestBodyRewritesMissingCreateDeploymentRequestBodyRewritesMissing2(createDeploymentRequestBodyRewritesMissing2 CreateDeploymentRequestBodyRewritesMissing2) CreateDeploymentRequestBodyRewritesMissing {
	typ := CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing2

	return CreateDeploymentRequestBodyRewritesMissing{
		CreateDeploymentRequestBodyRewritesMissing2: &createDeploymentRequestBodyRewritesMissing2,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyRewritesMissing) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRewritesMissing1 := new(CreateDeploymentRequestBodyRewritesMissing1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRewritesMissing1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRewritesMissing1 = createDeploymentRequestBodyRewritesMissing1
		u.Type = CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing1
		return nil
	}

	createDeploymentRequestBodyRewritesMissing2 := new(CreateDeploymentRequestBodyRewritesMissing2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRewritesMissing2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRewritesMissing2 = createDeploymentRequestBodyRewritesMissing2
		u.Type = CreateDeploymentRequestBodyRewritesMissingTypeCreateDeploymentRequestBodyRewritesMissing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRewritesMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRewritesMissing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRewritesMissing1, "", true)
	}

	if u.CreateDeploymentRequestBodyRewritesMissing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRewritesMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyRewrites struct {
	// An absolute pathname to an existing resource or an external URL.
	Destination string `json:"destination"`
	// An array of requirements that are needed to match
	Has []CreateDeploymentRequestBodyRewritesHas `json:"has,omitempty"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentRequestBodyRewritesMissing `json:"missing,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring).
	Source string `json:"source"`
}

func (o *CreateDeploymentRequestBodyRewrites) GetDestination() string {
	if o == nil {
		return ""
	}
	return o.Destination
}

func (o *CreateDeploymentRequestBodyRewrites) GetHas() []CreateDeploymentRequestBodyRewritesHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentRequestBodyRewrites) GetMissing() []CreateDeploymentRequestBodyRewritesMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentRequestBodyRewrites) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type CreateDeploymentRequestBodyRole struct {
	BranchID  string  `json:"branch_id"`
	CreatedAt string  `json:"created_at"`
	Name      string  `json:"name"`
	Password  *string `json:"password,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
	UpdatedAt string  `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyRole) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyRole) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyRole) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyRole) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateDeploymentRequestBodyRole) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *CreateDeploymentRequestBodyRole) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateDeploymentRequestBodyRoles struct {
	BranchID  string  `json:"branch_id"`
	CreatedAt string  `json:"created_at"`
	Name      string  `json:"name"`
	Password  *string `json:"password,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
	UpdatedAt string  `json:"updated_at"`
}

func (o *CreateDeploymentRequestBodyRoles) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *CreateDeploymentRequestBodyRoles) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateDeploymentRequestBodyRoles) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBodyRoles) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateDeploymentRequestBodyRoles) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *CreateDeploymentRequestBodyRoles) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateDeploymentRequestBodyRoutes2Handle string

const (
	CreateDeploymentRequestBodyRoutes2HandleError      CreateDeploymentRequestBodyRoutes2Handle = "error"
	CreateDeploymentRequestBodyRoutes2HandleFilesystem CreateDeploymentRequestBodyRoutes2Handle = "filesystem"
	CreateDeploymentRequestBodyRoutes2HandleHit        CreateDeploymentRequestBodyRoutes2Handle = "hit"
	CreateDeploymentRequestBodyRoutes2HandleMiss       CreateDeploymentRequestBodyRoutes2Handle = "miss"
	CreateDeploymentRequestBodyRoutes2HandleResource   CreateDeploymentRequestBodyRoutes2Handle = "resource"
	CreateDeploymentRequestBodyRoutes2HandleRewrite    CreateDeploymentRequestBodyRoutes2Handle = "rewrite"
)

func (e CreateDeploymentRequestBodyRoutes2Handle) ToPointer() *CreateDeploymentRequestBodyRoutes2Handle {
	return &e
}

func (e *CreateDeploymentRequestBodyRoutes2Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "resource":
		fallthrough
	case "rewrite":
		*e = CreateDeploymentRequestBodyRoutes2Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRoutes2Handle: %v", v)
	}
}

type CreateDeploymentRequestBodyRoutes2 struct {
	Handle CreateDeploymentRequestBodyRoutes2Handle `json:"handle"`
}

func (o *CreateDeploymentRequestBodyRoutes2) GetHandle() CreateDeploymentRequestBodyRoutes2Handle {
	if o == nil {
		return CreateDeploymentRequestBodyRoutes2Handle("")
	}
	return o.Handle
}

// CreateDeploymentRequestBodyRoutes1Has2Type - The type of request element to check
type CreateDeploymentRequestBodyRoutes1Has2Type string

const (
	CreateDeploymentRequestBodyRoutes1Has2TypeHeader CreateDeploymentRequestBodyRoutes1Has2Type = "header"
	CreateDeploymentRequestBodyRoutes1Has2TypeCookie CreateDeploymentRequestBodyRoutes1Has2Type = "cookie"
	CreateDeploymentRequestBodyRoutes1Has2TypeQuery  CreateDeploymentRequestBodyRoutes1Has2Type = "query"
)

func (e CreateDeploymentRequestBodyRoutes1Has2Type) ToPointer() *CreateDeploymentRequestBodyRoutes1Has2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRoutes1Has2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRoutes1Has2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRoutes1Has2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRoutes1Has2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRoutes1Has2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRoutes1Has2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRoutes1Has2) GetType() CreateDeploymentRequestBodyRoutes1Has2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRoutes1Has2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRoutes1Has2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRoutes1Has1Type - The type of request element to check
type CreateDeploymentRequestBodyRoutes1Has1Type string

const (
	CreateDeploymentRequestBodyRoutes1Has1TypeHost CreateDeploymentRequestBodyRoutes1Has1Type = "host"
)

func (e CreateDeploymentRequestBodyRoutes1Has1Type) ToPointer() *CreateDeploymentRequestBodyRoutes1Has1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRoutes1Has1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRoutes1Has1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRoutes1Has1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRoutes1Has1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRoutes1Has1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRoutes1Has1) GetType() CreateDeploymentRequestBodyRoutes1Has1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRoutes1Has1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRoutes1Has1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRoutes1HasType string

const (
	CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has1 CreateDeploymentRequestBodyRoutes1HasType = "createDeployment_requestBody_routes_1_has_1"
	CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has2 CreateDeploymentRequestBodyRoutes1HasType = "createDeployment_requestBody_routes_1_has_2"
)

type CreateDeploymentRequestBodyRoutes1Has struct {
	CreateDeploymentRequestBodyRoutes1Has1 *CreateDeploymentRequestBodyRoutes1Has1
	CreateDeploymentRequestBodyRoutes1Has2 *CreateDeploymentRequestBodyRoutes1Has2

	Type CreateDeploymentRequestBodyRoutes1HasType
}

func CreateCreateDeploymentRequestBodyRoutes1HasCreateDeploymentRequestBodyRoutes1Has1(createDeploymentRequestBodyRoutes1Has1 CreateDeploymentRequestBodyRoutes1Has1) CreateDeploymentRequestBodyRoutes1Has {
	typ := CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has1

	return CreateDeploymentRequestBodyRoutes1Has{
		CreateDeploymentRequestBodyRoutes1Has1: &createDeploymentRequestBodyRoutes1Has1,
		Type:                                   typ,
	}
}

func CreateCreateDeploymentRequestBodyRoutes1HasCreateDeploymentRequestBodyRoutes1Has2(createDeploymentRequestBodyRoutes1Has2 CreateDeploymentRequestBodyRoutes1Has2) CreateDeploymentRequestBodyRoutes1Has {
	typ := CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has2

	return CreateDeploymentRequestBodyRoutes1Has{
		CreateDeploymentRequestBodyRoutes1Has2: &createDeploymentRequestBodyRoutes1Has2,
		Type:                                   typ,
	}
}

func (u *CreateDeploymentRequestBodyRoutes1Has) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRoutes1Has1 := new(CreateDeploymentRequestBodyRoutes1Has1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes1Has1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes1Has1 = createDeploymentRequestBodyRoutes1Has1
		u.Type = CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has1
		return nil
	}

	createDeploymentRequestBodyRoutes1Has2 := new(CreateDeploymentRequestBodyRoutes1Has2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes1Has2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes1Has2 = createDeploymentRequestBodyRoutes1Has2
		u.Type = CreateDeploymentRequestBodyRoutes1HasTypeCreateDeploymentRequestBodyRoutes1Has2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRoutes1Has) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRoutes1Has1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes1Has1, "", true)
	}

	if u.CreateDeploymentRequestBodyRoutes1Has2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes1Has2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyRoutes1Locale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Default  *string           `json:"default,omitempty"`
	Path     *string           `json:"path,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
	Value    *string           `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRoutes1Locale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *CreateDeploymentRequestBodyRoutes1Locale) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *CreateDeploymentRequestBodyRoutes1Locale) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateDeploymentRequestBodyRoutes1Locale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *CreateDeploymentRequestBodyRoutes1Locale) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRoutes1Missing2Type - The type of request element to check
type CreateDeploymentRequestBodyRoutes1Missing2Type string

const (
	CreateDeploymentRequestBodyRoutes1Missing2TypeHeader CreateDeploymentRequestBodyRoutes1Missing2Type = "header"
	CreateDeploymentRequestBodyRoutes1Missing2TypeCookie CreateDeploymentRequestBodyRoutes1Missing2Type = "cookie"
	CreateDeploymentRequestBodyRoutes1Missing2TypeQuery  CreateDeploymentRequestBodyRoutes1Missing2Type = "query"
)

func (e CreateDeploymentRequestBodyRoutes1Missing2Type) ToPointer() *CreateDeploymentRequestBodyRoutes1Missing2Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentRequestBodyRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRoutes1Missing2Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRoutes1Missing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentRequestBodyRoutes1Missing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentRequestBodyRoutes1Missing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentRequestBodyRoutes1Missing2) GetType() CreateDeploymentRequestBodyRoutes1Missing2Type {
	if o == nil {
		return CreateDeploymentRequestBodyRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRoutes1Missing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentRequestBodyRoutes1Missing1Type - The type of request element to check
type CreateDeploymentRequestBodyRoutes1Missing1Type string

const (
	CreateDeploymentRequestBodyRoutes1Missing1TypeHost CreateDeploymentRequestBodyRoutes1Missing1Type = "host"
)

func (e CreateDeploymentRequestBodyRoutes1Missing1Type) ToPointer() *CreateDeploymentRequestBodyRoutes1Missing1Type {
	return &e
}

func (e *CreateDeploymentRequestBodyRoutes1Missing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentRequestBodyRoutes1Missing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyRoutes1Missing1Type: %v", v)
	}
}

type CreateDeploymentRequestBodyRoutes1Missing1 struct {
	// The type of request element to check
	Type CreateDeploymentRequestBodyRoutes1Missing1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentRequestBodyRoutes1Missing1) GetType() CreateDeploymentRequestBodyRoutes1Missing1Type {
	if o == nil {
		return CreateDeploymentRequestBodyRoutes1Missing1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentRequestBodyRoutes1Missing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentRequestBodyRoutes1MissingType string

const (
	CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing1 CreateDeploymentRequestBodyRoutes1MissingType = "createDeployment_requestBody_routes_1_missing_1"
	CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing2 CreateDeploymentRequestBodyRoutes1MissingType = "createDeployment_requestBody_routes_1_missing_2"
)

type CreateDeploymentRequestBodyRoutes1Missing struct {
	CreateDeploymentRequestBodyRoutes1Missing1 *CreateDeploymentRequestBodyRoutes1Missing1
	CreateDeploymentRequestBodyRoutes1Missing2 *CreateDeploymentRequestBodyRoutes1Missing2

	Type CreateDeploymentRequestBodyRoutes1MissingType
}

func CreateCreateDeploymentRequestBodyRoutes1MissingCreateDeploymentRequestBodyRoutes1Missing1(createDeploymentRequestBodyRoutes1Missing1 CreateDeploymentRequestBodyRoutes1Missing1) CreateDeploymentRequestBodyRoutes1Missing {
	typ := CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing1

	return CreateDeploymentRequestBodyRoutes1Missing{
		CreateDeploymentRequestBodyRoutes1Missing1: &createDeploymentRequestBodyRoutes1Missing1,
		Type: typ,
	}
}

func CreateCreateDeploymentRequestBodyRoutes1MissingCreateDeploymentRequestBodyRoutes1Missing2(createDeploymentRequestBodyRoutes1Missing2 CreateDeploymentRequestBodyRoutes1Missing2) CreateDeploymentRequestBodyRoutes1Missing {
	typ := CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing2

	return CreateDeploymentRequestBodyRoutes1Missing{
		CreateDeploymentRequestBodyRoutes1Missing2: &createDeploymentRequestBodyRoutes1Missing2,
		Type: typ,
	}
}

func (u *CreateDeploymentRequestBodyRoutes1Missing) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRoutes1Missing1 := new(CreateDeploymentRequestBodyRoutes1Missing1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes1Missing1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes1Missing1 = createDeploymentRequestBodyRoutes1Missing1
		u.Type = CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing1
		return nil
	}

	createDeploymentRequestBodyRoutes1Missing2 := new(CreateDeploymentRequestBodyRoutes1Missing2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes1Missing2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes1Missing2 = createDeploymentRequestBodyRoutes1Missing2
		u.Type = CreateDeploymentRequestBodyRoutes1MissingTypeCreateDeploymentRequestBodyRoutes1Missing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRoutes1Missing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRoutes1Missing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes1Missing1, "", true)
	}

	if u.CreateDeploymentRequestBodyRoutes1Missing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes1Missing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentRequestBodyRoutes1 struct {
	CaseSensitive *bool   `json:"caseSensitive,omitempty"`
	Check         *bool   `json:"check,omitempty"`
	Continue      *bool   `json:"continue,omitempty"`
	Dest          *string `json:"dest,omitempty"`
	// An array of requirements that are needed to match
	Has              []CreateDeploymentRequestBodyRoutes1Has   `json:"has,omitempty"`
	Headers          map[string]string                         `json:"headers,omitempty"`
	Important        *bool                                     `json:"important,omitempty"`
	IsInternal       *bool                                     `json:"isInternal,omitempty"`
	Locale           *CreateDeploymentRequestBodyRoutes1Locale `json:"locale,omitempty"`
	Methods          []string                                  `json:"methods,omitempty"`
	Middleware       *int64                                    `json:"middleware,omitempty"`
	MiddlewarePath   *string                                   `json:"middlewarePath,omitempty"`
	MiddlewareRawSrc []string                                  `json:"middlewareRawSrc,omitempty"`
	// An array of requirements that are needed to match
	Missing  []CreateDeploymentRequestBodyRoutes1Missing `json:"missing,omitempty"`
	Override *bool                                       `json:"override,omitempty"`
	Src      string                                      `json:"src"`
	Status   *int64                                      `json:"status,omitempty"`
	User     *bool                                       `json:"user,omitempty"`
}

func (o *CreateDeploymentRequestBodyRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CreateDeploymentRequestBodyRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateDeploymentRequestBodyRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CreateDeploymentRequestBodyRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeploymentRequestBodyRoutes1) GetHas() []CreateDeploymentRequestBodyRoutes1Has {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentRequestBodyRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeploymentRequestBodyRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CreateDeploymentRequestBodyRoutes1) GetIsInternal() *bool {
	if o == nil {
		return nil
	}
	return o.IsInternal
}

func (o *CreateDeploymentRequestBodyRoutes1) GetLocale() *CreateDeploymentRequestBodyRoutes1Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateDeploymentRequestBodyRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateDeploymentRequestBodyRoutes1) GetMiddleware() *int64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CreateDeploymentRequestBodyRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CreateDeploymentRequestBodyRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CreateDeploymentRequestBodyRoutes1) GetMissing() []CreateDeploymentRequestBodyRoutes1Missing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentRequestBodyRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CreateDeploymentRequestBodyRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CreateDeploymentRequestBodyRoutes1) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateDeploymentRequestBodyRoutes1) GetUser() *bool {
	if o == nil {
		return nil
	}
	return o.User
}

type CreateDeploymentRequestBodyRoutesType string

const (
	CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes1 CreateDeploymentRequestBodyRoutesType = "createDeployment_requestBody_routes_1"
	CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes2 CreateDeploymentRequestBodyRoutesType = "createDeployment_requestBody_routes_2"
)

type CreateDeploymentRequestBodyRoutes struct {
	CreateDeploymentRequestBodyRoutes1 *CreateDeploymentRequestBodyRoutes1
	CreateDeploymentRequestBodyRoutes2 *CreateDeploymentRequestBodyRoutes2

	Type CreateDeploymentRequestBodyRoutesType
}

func CreateCreateDeploymentRequestBodyRoutesCreateDeploymentRequestBodyRoutes1(createDeploymentRequestBodyRoutes1 CreateDeploymentRequestBodyRoutes1) CreateDeploymentRequestBodyRoutes {
	typ := CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes1

	return CreateDeploymentRequestBodyRoutes{
		CreateDeploymentRequestBodyRoutes1: &createDeploymentRequestBodyRoutes1,
		Type:                               typ,
	}
}

func CreateCreateDeploymentRequestBodyRoutesCreateDeploymentRequestBodyRoutes2(createDeploymentRequestBodyRoutes2 CreateDeploymentRequestBodyRoutes2) CreateDeploymentRequestBodyRoutes {
	typ := CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes2

	return CreateDeploymentRequestBodyRoutes{
		CreateDeploymentRequestBodyRoutes2: &createDeploymentRequestBodyRoutes2,
		Type:                               typ,
	}
}

func (u *CreateDeploymentRequestBodyRoutes) UnmarshalJSON(data []byte) error {

	createDeploymentRequestBodyRoutes2 := new(CreateDeploymentRequestBodyRoutes2)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes2, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes2 = createDeploymentRequestBodyRoutes2
		u.Type = CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes2
		return nil
	}

	createDeploymentRequestBodyRoutes1 := new(CreateDeploymentRequestBodyRoutes1)
	if err := utils.UnmarshalJSON(data, &createDeploymentRequestBodyRoutes1, "", true, true); err == nil {
		u.CreateDeploymentRequestBodyRoutes1 = createDeploymentRequestBodyRoutes1
		u.Type = CreateDeploymentRequestBodyRoutesTypeCreateDeploymentRequestBodyRoutes1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRequestBodyRoutes) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentRequestBodyRoutes1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes1, "", true)
	}

	if u.CreateDeploymentRequestBodyRoutes2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentRequestBodyRoutes2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentRequestBodyTarget - Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
type CreateDeploymentRequestBodyTarget string

const (
	CreateDeploymentRequestBodyTargetStaging    CreateDeploymentRequestBodyTarget = "staging"
	CreateDeploymentRequestBodyTargetProduction CreateDeploymentRequestBodyTarget = "production"
)

func (e CreateDeploymentRequestBodyTarget) ToPointer() *CreateDeploymentRequestBodyTarget {
	return &e
}

func (e *CreateDeploymentRequestBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CreateDeploymentRequestBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyTarget: %v", v)
	}
}

type CreateDeploymentRequestBody struct {
	// Ignored. Can be set to get completions, validations and documentation in some editors.
	DollarSchema *string `json:"$schema,omitempty"`
	// Aliases that will get assigned when the deployment is `READY` and the target is `production`. The client needs to make a `GET` request to its API to ensure the assignment
	Alias  []string                          `json:"alias,omitempty"`
	Branch CreateDeploymentRequestBodyBranch `json:"branch"`
	// An object containing another object with information to be passed to the Build Process
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Build *CreateDeploymentRequestBodyBuild `json:"build,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand *string `json:"buildCommand,omitempty"`
	// A list of build descriptions whose src references valid source files.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Builds []CreateDeploymentRequestBodyBuilds `json:"builds,omitempty"`
	// When set to `true`, all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.
	CleanUrls      *bool                                       `json:"cleanUrls,omitempty"`
	ConnectionUris []CreateDeploymentRequestBodyConnectionUris `json:"connection_uris"`
	// An array of cron jobs that should be created for production Deployments.
	Crons     []CreateDeploymentRequestBodyCrons     `json:"crons,omitempty"`
	Database  CreateDeploymentRequestBodyDatabase    `json:"database"`
	Databases []CreateDeploymentRequestBodyDatabases `json:"databases"`
	// An deployment id for an existing deployment to redeploy
	DeploymentID *string `json:"deploymentId,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string                                `json:"devCommand,omitempty"`
	Endpoint   CreateDeploymentRequestBodyEndpoint    `json:"endpoint"`
	Endpoints  []CreateDeploymentRequestBodyEndpoints `json:"endpoints"`
	// An object containing the deployment's environment variable names and values. Secrets can be referenced by prefixing the value with `@`
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Env map[string]string `json:"env,omitempty"`
	// A list of objects with the files to be deployed
	Files []CreateDeploymentRequestBodyFiles `json:"files,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateDeploymentRequestBodyFramework `json:"framework,omitempty"`
	// An object describing custom options for your Serverless Functions. Each key must be glob pattern that matches the paths of the Serverless Functions you would like to customize (like `api/*.js` or `api/test.js`).
	Functions map[string]CreateDeploymentRequestBodyFunctions `json:"functions,omitempty"`
	Git       *CreateDeploymentRequestBodyGit                 `json:"git,omitempty"`
	// Populates initial git metadata for different git providers.
	GitMetadata *CreateDeploymentRequestBodyGitMetadata `json:"gitMetadata,omitempty"`
	// Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
	GitSource *CreateDeploymentRequestBodyGitSource `json:"gitSource,omitempty"`
	// A list of header definitions.
	Headers       []CreateDeploymentRequestBodyHeaders `json:"headers,omitempty"`
	IgnoreCommand *string                              `json:"ignoreCommand,omitempty"`
	Images        *CreateDeploymentRequestBodyImages   `json:"images,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment
	Meta map[string]string `json:"meta,omitempty"`
	// The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// A string with the project name used in the deployment URL
	Name string `json:"name"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string                               `json:"outputDirectory,omitempty"`
	Pagination      CreateDeploymentRequestBodyPagination `json:"pagination"`
	Password        string                                `json:"password"`
	Project         CreateDeploymentRequestBodyProject    `json:"project"`
	// Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
	ProjectSettings *CreateDeploymentRequestBodyProjectSettings1 `json:"projectSettings,omitempty"`
	Projects        []CreateDeploymentRequestBodyProjects        `json:"projects"`
	// Whether a deployment's source and logs are available publicly
	Public *bool `json:"public,omitempty"`
	// A list of redirect definitions.
	Redirects []CreateDeploymentRequestBodyRedirects `json:"redirects,omitempty"`
	// An array of the regions the deployment's Serverless Functions should be deployed to
	Regions []string `json:"regions,omitempty"`
	// A list of rewrite definitions.
	Rewrites []CreateDeploymentRequestBodyRewrites `json:"rewrites,omitempty"`
	Role     CreateDeploymentRequestBodyRole       `json:"role"`
	Roles    []CreateDeploymentRequestBodyRoles    `json:"roles"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Routes []CreateDeploymentRequestBodyRoutes `json:"routes,omitempty"`
	// Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
	Target *CreateDeploymentRequestBodyTarget `json:"target,omitempty"`
	// When `false`, visiting a path that ends with a forward slash will respond with a `308` status code and redirect to the path without the trailing slash.
	TrailingSlash *bool `json:"trailingSlash,omitempty"`
	// When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.
	WithLatestCommit *bool `json:"withLatestCommit,omitempty"`
}

func (o *CreateDeploymentRequestBody) GetDollarSchema() *string {
	if o == nil {
		return nil
	}
	return o.DollarSchema
}

func (o *CreateDeploymentRequestBody) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateDeploymentRequestBody) GetBranch() CreateDeploymentRequestBodyBranch {
	if o == nil {
		return CreateDeploymentRequestBodyBranch{}
	}
	return o.Branch
}

func (o *CreateDeploymentRequestBody) GetBuild() *CreateDeploymentRequestBodyBuild {
	if o == nil {
		return nil
	}
	return o.Build
}

func (o *CreateDeploymentRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateDeploymentRequestBody) GetBuilds() []CreateDeploymentRequestBodyBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateDeploymentRequestBody) GetCleanUrls() *bool {
	if o == nil {
		return nil
	}
	return o.CleanUrls
}

func (o *CreateDeploymentRequestBody) GetConnectionUris() []CreateDeploymentRequestBodyConnectionUris {
	if o == nil {
		return []CreateDeploymentRequestBodyConnectionUris{}
	}
	return o.ConnectionUris
}

func (o *CreateDeploymentRequestBody) GetCrons() []CreateDeploymentRequestBodyCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateDeploymentRequestBody) GetDatabase() CreateDeploymentRequestBodyDatabase {
	if o == nil {
		return CreateDeploymentRequestBodyDatabase{}
	}
	return o.Database
}

func (o *CreateDeploymentRequestBody) GetDatabases() []CreateDeploymentRequestBodyDatabases {
	if o == nil {
		return []CreateDeploymentRequestBodyDatabases{}
	}
	return o.Databases
}

func (o *CreateDeploymentRequestBody) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateDeploymentRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateDeploymentRequestBody) GetEndpoint() CreateDeploymentRequestBodyEndpoint {
	if o == nil {
		return CreateDeploymentRequestBodyEndpoint{}
	}
	return o.Endpoint
}

func (o *CreateDeploymentRequestBody) GetEndpoints() []CreateDeploymentRequestBodyEndpoints {
	if o == nil {
		return []CreateDeploymentRequestBodyEndpoints{}
	}
	return o.Endpoints
}

func (o *CreateDeploymentRequestBody) GetEnv() map[string]string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateDeploymentRequestBody) GetFiles() []CreateDeploymentRequestBodyFiles {
	if o == nil {
		return nil
	}
	return o.Files
}

func (o *CreateDeploymentRequestBody) GetFramework() *CreateDeploymentRequestBodyFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateDeploymentRequestBody) GetFunctions() map[string]CreateDeploymentRequestBodyFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateDeploymentRequestBody) GetGit() *CreateDeploymentRequestBodyGit {
	if o == nil {
		return nil
	}
	return o.Git
}

func (o *CreateDeploymentRequestBody) GetGitMetadata() *CreateDeploymentRequestBodyGitMetadata {
	if o == nil {
		return nil
	}
	return o.GitMetadata
}

func (o *CreateDeploymentRequestBody) GetGitSource() *CreateDeploymentRequestBodyGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeploymentRequestBody) GetHeaders() []CreateDeploymentRequestBodyHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeploymentRequestBody) GetIgnoreCommand() *string {
	if o == nil {
		return nil
	}
	return o.IgnoreCommand
}

func (o *CreateDeploymentRequestBody) GetImages() *CreateDeploymentRequestBodyImages {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *CreateDeploymentRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateDeploymentRequestBody) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateDeploymentRequestBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeploymentRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateDeploymentRequestBody) GetPagination() CreateDeploymentRequestBodyPagination {
	if o == nil {
		return CreateDeploymentRequestBodyPagination{}
	}
	return o.Pagination
}

func (o *CreateDeploymentRequestBody) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *CreateDeploymentRequestBody) GetProject() CreateDeploymentRequestBodyProject {
	if o == nil {
		return CreateDeploymentRequestBodyProject{}
	}
	return o.Project
}

func (o *CreateDeploymentRequestBody) GetProjectSettings() *CreateDeploymentRequestBodyProjectSettings1 {
	if o == nil {
		return nil
	}
	return o.ProjectSettings
}

func (o *CreateDeploymentRequestBody) GetProjects() []CreateDeploymentRequestBodyProjects {
	if o == nil {
		return []CreateDeploymentRequestBodyProjects{}
	}
	return o.Projects
}

func (o *CreateDeploymentRequestBody) GetPublic() *bool {
	if o == nil {
		return nil
	}
	return o.Public
}

func (o *CreateDeploymentRequestBody) GetRedirects() []CreateDeploymentRequestBodyRedirects {
	if o == nil {
		return nil
	}
	return o.Redirects
}

func (o *CreateDeploymentRequestBody) GetRegions() []string {
	if o == nil {
		return nil
	}
	return o.Regions
}

func (o *CreateDeploymentRequestBody) GetRewrites() []CreateDeploymentRequestBodyRewrites {
	if o == nil {
		return nil
	}
	return o.Rewrites
}

func (o *CreateDeploymentRequestBody) GetRole() CreateDeploymentRequestBodyRole {
	if o == nil {
		return CreateDeploymentRequestBodyRole{}
	}
	return o.Role
}

func (o *CreateDeploymentRequestBody) GetRoles() []CreateDeploymentRequestBodyRoles {
	if o == nil {
		return []CreateDeploymentRequestBodyRoles{}
	}
	return o.Roles
}

func (o *CreateDeploymentRequestBody) GetRoutes() []CreateDeploymentRequestBodyRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CreateDeploymentRequestBody) GetTarget() *CreateDeploymentRequestBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeploymentRequestBody) GetTrailingSlash() *bool {
	if o == nil {
		return nil
	}
	return o.TrailingSlash
}

func (o *CreateDeploymentRequestBody) GetWithLatestCommit() *bool {
	if o == nil {
		return nil
	}
	return o.WithLatestCommit
}

type CreateDeployment200ApplicationJSONAliasAssignedAtType string

const (
	CreateDeployment200ApplicationJSONAliasAssignedAtTypeInteger CreateDeployment200ApplicationJSONAliasAssignedAtType = "integer"
	CreateDeployment200ApplicationJSONAliasAssignedAtTypeBoolean CreateDeployment200ApplicationJSONAliasAssignedAtType = "boolean"
)

type CreateDeployment200ApplicationJSONAliasAssignedAt struct {
	Integer *int64
	Boolean *bool

	Type CreateDeployment200ApplicationJSONAliasAssignedAtType
}

func CreateCreateDeployment200ApplicationJSONAliasAssignedAtInteger(integer int64) CreateDeployment200ApplicationJSONAliasAssignedAt {
	typ := CreateDeployment200ApplicationJSONAliasAssignedAtTypeInteger

	return CreateDeployment200ApplicationJSONAliasAssignedAt{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateDeployment200ApplicationJSONAliasAssignedAtBoolean(boolean bool) CreateDeployment200ApplicationJSONAliasAssignedAt {
	typ := CreateDeployment200ApplicationJSONAliasAssignedAtTypeBoolean

	return CreateDeployment200ApplicationJSONAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateDeployment200ApplicationJSONAliasAssignedAt) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateDeployment200ApplicationJSONAliasAssignedAtTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = CreateDeployment200ApplicationJSONAliasAssignedAtTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeployment200ApplicationJSONAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type CreateDeployment200ApplicationJSONAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateDeployment200ApplicationJSONAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeployment200ApplicationJSONAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeployment200ApplicationJSONAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *CreateDeployment200ApplicationJSONAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateDeployment200ApplicationJSONAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeployment200ApplicationJSONAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateDeployment200ApplicationJSONAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeployment200ApplicationJSONBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *CreateDeployment200ApplicationJSONBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CreateDeployment200ApplicationJSONBuilds struct {
}

type CreateDeployment200ApplicationJSONChecksConclusion string

const (
	CreateDeployment200ApplicationJSONChecksConclusionSucceeded CreateDeployment200ApplicationJSONChecksConclusion = "succeeded"
	CreateDeployment200ApplicationJSONChecksConclusionFailed    CreateDeployment200ApplicationJSONChecksConclusion = "failed"
	CreateDeployment200ApplicationJSONChecksConclusionSkipped   CreateDeployment200ApplicationJSONChecksConclusion = "skipped"
	CreateDeployment200ApplicationJSONChecksConclusionCanceled  CreateDeployment200ApplicationJSONChecksConclusion = "canceled"
)

func (e CreateDeployment200ApplicationJSONChecksConclusion) ToPointer() *CreateDeployment200ApplicationJSONChecksConclusion {
	return &e
}

func (e *CreateDeployment200ApplicationJSONChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateDeployment200ApplicationJSONChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONChecksConclusion: %v", v)
	}
}

type CreateDeployment200ApplicationJSONChecksState string

const (
	CreateDeployment200ApplicationJSONChecksStateRegistered CreateDeployment200ApplicationJSONChecksState = "registered"
	CreateDeployment200ApplicationJSONChecksStateRunning    CreateDeployment200ApplicationJSONChecksState = "running"
	CreateDeployment200ApplicationJSONChecksStateCompleted  CreateDeployment200ApplicationJSONChecksState = "completed"
)

func (e CreateDeployment200ApplicationJSONChecksState) ToPointer() *CreateDeployment200ApplicationJSONChecksState {
	return &e
}

func (e *CreateDeployment200ApplicationJSONChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateDeployment200ApplicationJSONChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONChecksState: %v", v)
	}
}

// CreateDeployment200ApplicationJSONCreator - Information about the deployment creator
type CreateDeployment200ApplicationJSONCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateDeployment200ApplicationJSONCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// CreateDeployment200ApplicationJSONFunctions - An object used to configure your Serverless Functions
type CreateDeployment200ApplicationJSONFunctions struct {
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	IncludeFiles *string `json:"includeFiles,omitempty"`
	MaxDuration  *int64  `json:"maxDuration,omitempty"`
	Memory       *int64  `json:"memory,omitempty"`
	Runtime      *string `json:"runtime,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CreateDeployment200ApplicationJSONFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CreateDeployment200ApplicationJSONFunctions) GetMaxDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CreateDeployment200ApplicationJSONFunctions) GetMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CreateDeployment200ApplicationJSONFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type CreateDeployment200ApplicationJSONGitRepo3OwnerType string

const (
	CreateDeployment200ApplicationJSONGitRepo3OwnerTypeTeam CreateDeployment200ApplicationJSONGitRepo3OwnerType = "team"
	CreateDeployment200ApplicationJSONGitRepo3OwnerTypeUser CreateDeployment200ApplicationJSONGitRepo3OwnerType = "user"
)

func (e CreateDeployment200ApplicationJSONGitRepo3OwnerType) ToPointer() *CreateDeployment200ApplicationJSONGitRepo3OwnerType {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo3OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeployment200ApplicationJSONGitRepo3OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo3OwnerType: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo3Type string

const (
	CreateDeployment200ApplicationJSONGitRepo3TypeBitbucket CreateDeployment200ApplicationJSONGitRepo3Type = "bitbucket"
)

func (e CreateDeployment200ApplicationJSONGitRepo3Type) ToPointer() *CreateDeployment200ApplicationJSONGitRepo3Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeployment200ApplicationJSONGitRepo3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo3Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo3 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Owner         string                                              `json:"owner"`
	OwnerType     CreateDeployment200ApplicationJSONGitRepo3OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	RepoUUID      string                                              `json:"repoUuid"`
	Slug          string                                              `json:"slug"`
	Type          CreateDeployment200ApplicationJSONGitRepo3Type      `json:"type"`
	WorkspaceUUID string                                              `json:"workspaceUuid"`
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetOwnerType() CreateDeployment200ApplicationJSONGitRepo3OwnerType {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo3OwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetType() CreateDeployment200ApplicationJSONGitRepo3Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo3Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONGitRepo3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeployment200ApplicationJSONGitRepo2OwnerType string

const (
	CreateDeployment200ApplicationJSONGitRepo2OwnerTypeTeam CreateDeployment200ApplicationJSONGitRepo2OwnerType = "team"
	CreateDeployment200ApplicationJSONGitRepo2OwnerTypeUser CreateDeployment200ApplicationJSONGitRepo2OwnerType = "user"
)

func (e CreateDeployment200ApplicationJSONGitRepo2OwnerType) ToPointer() *CreateDeployment200ApplicationJSONGitRepo2OwnerType {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo2OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeployment200ApplicationJSONGitRepo2OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo2OwnerType: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo2Type string

const (
	CreateDeployment200ApplicationJSONGitRepo2TypeGithub CreateDeployment200ApplicationJSONGitRepo2Type = "github"
)

func (e CreateDeployment200ApplicationJSONGitRepo2Type) ToPointer() *CreateDeployment200ApplicationJSONGitRepo2Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeployment200ApplicationJSONGitRepo2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo2Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo2 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Org           string                                              `json:"org"`
	OwnerType     CreateDeployment200ApplicationJSONGitRepo2OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	Repo          string                                              `json:"repo"`
	RepoID        int64                                               `json:"repoId"`
	RepoOwnerID   string                                              `json:"repoOwnerId"`
	Type          CreateDeployment200ApplicationJSONGitRepo2Type      `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetOwnerType() CreateDeployment200ApplicationJSONGitRepo2OwnerType {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo2OwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *CreateDeployment200ApplicationJSONGitRepo2) GetType() CreateDeployment200ApplicationJSONGitRepo2Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo2Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitRepo1OwnerType string

const (
	CreateDeployment200ApplicationJSONGitRepo1OwnerTypeTeam CreateDeployment200ApplicationJSONGitRepo1OwnerType = "team"
	CreateDeployment200ApplicationJSONGitRepo1OwnerTypeUser CreateDeployment200ApplicationJSONGitRepo1OwnerType = "user"
)

func (e CreateDeployment200ApplicationJSONGitRepo1OwnerType) ToPointer() *CreateDeployment200ApplicationJSONGitRepo1OwnerType {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo1OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeployment200ApplicationJSONGitRepo1OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo1OwnerType: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo1Type string

const (
	CreateDeployment200ApplicationJSONGitRepo1TypeGitlab CreateDeployment200ApplicationJSONGitRepo1Type = "gitlab"
)

func (e CreateDeployment200ApplicationJSONGitRepo1Type) ToPointer() *CreateDeployment200ApplicationJSONGitRepo1Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitRepo1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeployment200ApplicationJSONGitRepo1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitRepo1Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitRepo1 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Namespace     string                                              `json:"namespace"`
	OwnerType     CreateDeployment200ApplicationJSONGitRepo1OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	ProjectID     int64                                               `json:"projectId"`
	Type          CreateDeployment200ApplicationJSONGitRepo1Type      `json:"type"`
	URL           string                                              `json:"url"`
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetOwnerType() CreateDeployment200ApplicationJSONGitRepo1OwnerType {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo1OwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetType() CreateDeployment200ApplicationJSONGitRepo1Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitRepo1Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONGitRepo1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateDeployment200ApplicationJSONGitRepoType string

const (
	CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo1 CreateDeployment200ApplicationJSONGitRepoType = "createDeployment_200ApplicationJSON_gitRepo_1"
	CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo2 CreateDeployment200ApplicationJSONGitRepoType = "createDeployment_200ApplicationJSON_gitRepo_2"
	CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo3 CreateDeployment200ApplicationJSONGitRepoType = "createDeployment_200ApplicationJSON_gitRepo_3"
)

type CreateDeployment200ApplicationJSONGitRepo struct {
	CreateDeployment200ApplicationJSONGitRepo1 *CreateDeployment200ApplicationJSONGitRepo1
	CreateDeployment200ApplicationJSONGitRepo2 *CreateDeployment200ApplicationJSONGitRepo2
	CreateDeployment200ApplicationJSONGitRepo3 *CreateDeployment200ApplicationJSONGitRepo3

	Type CreateDeployment200ApplicationJSONGitRepoType
}

func CreateCreateDeployment200ApplicationJSONGitRepoCreateDeployment200ApplicationJSONGitRepo1(createDeployment200ApplicationJSONGitRepo1 CreateDeployment200ApplicationJSONGitRepo1) CreateDeployment200ApplicationJSONGitRepo {
	typ := CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo1

	return CreateDeployment200ApplicationJSONGitRepo{
		CreateDeployment200ApplicationJSONGitRepo1: &createDeployment200ApplicationJSONGitRepo1,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitRepoCreateDeployment200ApplicationJSONGitRepo2(createDeployment200ApplicationJSONGitRepo2 CreateDeployment200ApplicationJSONGitRepo2) CreateDeployment200ApplicationJSONGitRepo {
	typ := CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo2

	return CreateDeployment200ApplicationJSONGitRepo{
		CreateDeployment200ApplicationJSONGitRepo2: &createDeployment200ApplicationJSONGitRepo2,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitRepoCreateDeployment200ApplicationJSONGitRepo3(createDeployment200ApplicationJSONGitRepo3 CreateDeployment200ApplicationJSONGitRepo3) CreateDeployment200ApplicationJSONGitRepo {
	typ := CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo3

	return CreateDeployment200ApplicationJSONGitRepo{
		CreateDeployment200ApplicationJSONGitRepo3: &createDeployment200ApplicationJSONGitRepo3,
		Type: typ,
	}
}

func (u *CreateDeployment200ApplicationJSONGitRepo) UnmarshalJSON(data []byte) error {

	createDeployment200ApplicationJSONGitRepo1 := new(CreateDeployment200ApplicationJSONGitRepo1)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitRepo1, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitRepo1 = createDeployment200ApplicationJSONGitRepo1
		u.Type = CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo1
		return nil
	}

	createDeployment200ApplicationJSONGitRepo2 := new(CreateDeployment200ApplicationJSONGitRepo2)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitRepo2, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitRepo2 = createDeployment200ApplicationJSONGitRepo2
		u.Type = CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo2
		return nil
	}

	createDeployment200ApplicationJSONGitRepo3 := new(CreateDeployment200ApplicationJSONGitRepo3)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitRepo3, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitRepo3 = createDeployment200ApplicationJSONGitRepo3
		u.Type = CreateDeployment200ApplicationJSONGitRepoTypeCreateDeployment200ApplicationJSONGitRepo3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONGitRepo) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment200ApplicationJSONGitRepo1 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitRepo1, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitRepo2 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitRepo2, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitRepo3 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitRepo3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment200ApplicationJSONGitSource9Type string

const (
	CreateDeployment200ApplicationJSONGitSource9TypeBitbucket CreateDeployment200ApplicationJSONGitSource9Type = "bitbucket"
)

func (e CreateDeployment200ApplicationJSONGitSource9Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource9Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeployment200ApplicationJSONGitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource9Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource9 struct {
	Owner         *string                                          `json:"owner,omitempty"`
	Ref           string                                           `json:"ref"`
	RepoUUID      string                                           `json:"repoUuid"`
	Sha           string                                           `json:"sha"`
	Slug          *string                                          `json:"slug,omitempty"`
	Type          CreateDeployment200ApplicationJSONGitSource9Type `json:"type"`
	WorkspaceUUID string                                           `json:"workspaceUuid"`
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetType() CreateDeployment200ApplicationJSONGitSource9Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource9Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONGitSource9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeployment200ApplicationJSONGitSource8Type string

const (
	CreateDeployment200ApplicationJSONGitSource8TypeGitlab CreateDeployment200ApplicationJSONGitSource8Type = "gitlab"
)

func (e CreateDeployment200ApplicationJSONGitSource8Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource8Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeployment200ApplicationJSONGitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource8Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource8 struct {
	ProjectID int64                                            `json:"projectId"`
	Ref       string                                           `json:"ref"`
	Sha       string                                           `json:"sha"`
	Type      CreateDeployment200ApplicationJSONGitSource8Type `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource8) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateDeployment200ApplicationJSONGitSource8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource8) GetType() CreateDeployment200ApplicationJSONGitSource8Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource8Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource7Type string

const (
	CreateDeployment200ApplicationJSONGitSource7TypeGithub CreateDeployment200ApplicationJSONGitSource7Type = "github"
)

func (e CreateDeployment200ApplicationJSONGitSource7Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource7Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeployment200ApplicationJSONGitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource7Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource7 struct {
	Org    *string                                          `json:"org,omitempty"`
	Ref    string                                           `json:"ref"`
	Repo   *string                                          `json:"repo,omitempty"`
	RepoID int64                                            `json:"repoId"`
	Sha    string                                           `json:"sha"`
	Type   CreateDeployment200ApplicationJSONGitSource7Type `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource7) GetType() CreateDeployment200ApplicationJSONGitSource7Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource7Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource6Type string

const (
	CreateDeployment200ApplicationJSONGitSource6TypeCustom CreateDeployment200ApplicationJSONGitSource6Type = "custom"
)

func (e CreateDeployment200ApplicationJSONGitSource6Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource6Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CreateDeployment200ApplicationJSONGitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource6Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource6 struct {
	GitURL string                                           `json:"gitUrl"`
	Ref    string                                           `json:"ref"`
	Sha    string                                           `json:"sha"`
	Type   CreateDeployment200ApplicationJSONGitSource6Type `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *CreateDeployment200ApplicationJSONGitSource6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource6) GetType() CreateDeployment200ApplicationJSONGitSource6Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource6Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource5Type string

const (
	CreateDeployment200ApplicationJSONGitSource5TypeBitbucket CreateDeployment200ApplicationJSONGitSource5Type = "bitbucket"
)

func (e CreateDeployment200ApplicationJSONGitSource5Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource5Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeployment200ApplicationJSONGitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource5Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource5 struct {
	Owner string                                           `json:"owner"`
	PrID  *int64                                           `json:"prId,omitempty"`
	Ref   *string                                          `json:"ref,omitempty"`
	Sha   *string                                          `json:"sha,omitempty"`
	Slug  string                                           `json:"slug"`
	Type  CreateDeployment200ApplicationJSONGitSource5Type `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment200ApplicationJSONGitSource5) GetType() CreateDeployment200ApplicationJSONGitSource5Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource5Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource4Type string

const (
	CreateDeployment200ApplicationJSONGitSource4TypeBitbucket CreateDeployment200ApplicationJSONGitSource4Type = "bitbucket"
)

func (e CreateDeployment200ApplicationJSONGitSource4Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource4Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeployment200ApplicationJSONGitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource4Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource4 struct {
	PrID          *int64                                           `json:"prId,omitempty"`
	Ref           *string                                          `json:"ref,omitempty"`
	RepoUUID      string                                           `json:"repoUuid"`
	Sha           *string                                          `json:"sha,omitempty"`
	Type          CreateDeployment200ApplicationJSONGitSource4Type `json:"type"`
	WorkspaceUUID *string                                          `json:"workspaceUuid,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetType() CreateDeployment200ApplicationJSONGitSource4Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource4Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateDeployment200ApplicationJSONGitSource3ProjectIDType string

const (
	CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeStr     CreateDeployment200ApplicationJSONGitSource3ProjectIDType = "str"
	CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger CreateDeployment200ApplicationJSONGitSource3ProjectIDType = "integer"
)

type CreateDeployment200ApplicationJSONGitSource3ProjectID struct {
	Str     *string
	Integer *int64

	Type CreateDeployment200ApplicationJSONGitSource3ProjectIDType
}

func CreateCreateDeployment200ApplicationJSONGitSource3ProjectIDStr(str string) CreateDeployment200ApplicationJSONGitSource3ProjectID {
	typ := CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeStr

	return CreateDeployment200ApplicationJSONGitSource3ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSource3ProjectIDInteger(integer int64) CreateDeployment200ApplicationJSONGitSource3ProjectID {
	typ := CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger

	return CreateDeployment200ApplicationJSONGitSource3ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CreateDeployment200ApplicationJSONGitSource3ProjectID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONGitSource3ProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment200ApplicationJSONGitSource3Type string

const (
	CreateDeployment200ApplicationJSONGitSource3TypeGitlab CreateDeployment200ApplicationJSONGitSource3Type = "gitlab"
)

func (e CreateDeployment200ApplicationJSONGitSource3Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource3Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeployment200ApplicationJSONGitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource3Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource3 struct {
	PrID      *int64                                                `json:"prId,omitempty"`
	ProjectID CreateDeployment200ApplicationJSONGitSource3ProjectID `json:"projectId"`
	Ref       *string                                               `json:"ref,omitempty"`
	Sha       *string                                               `json:"sha,omitempty"`
	Type      CreateDeployment200ApplicationJSONGitSource3Type      `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource3) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment200ApplicationJSONGitSource3) GetProjectID() CreateDeployment200ApplicationJSONGitSource3ProjectID {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource3ProjectID{}
	}
	return o.ProjectID
}

func (o *CreateDeployment200ApplicationJSONGitSource3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource3) GetType() CreateDeployment200ApplicationJSONGitSource3Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource3Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource2Type string

const (
	CreateDeployment200ApplicationJSONGitSource2TypeGithub CreateDeployment200ApplicationJSONGitSource2Type = "github"
)

func (e CreateDeployment200ApplicationJSONGitSource2Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource2Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeployment200ApplicationJSONGitSource2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource2Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource2 struct {
	Org  string                                           `json:"org"`
	PrID *int64                                           `json:"prId,omitempty"`
	Ref  *string                                          `json:"ref,omitempty"`
	Repo string                                           `json:"repo"`
	Sha  *string                                          `json:"sha,omitempty"`
	Type CreateDeployment200ApplicationJSONGitSource2Type `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource2) GetType() CreateDeployment200ApplicationJSONGitSource2Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource2Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSource1RepoIDType string

const (
	CreateDeployment200ApplicationJSONGitSource1RepoIDTypeStr     CreateDeployment200ApplicationJSONGitSource1RepoIDType = "str"
	CreateDeployment200ApplicationJSONGitSource1RepoIDTypeInteger CreateDeployment200ApplicationJSONGitSource1RepoIDType = "integer"
)

type CreateDeployment200ApplicationJSONGitSource1RepoID struct {
	Str     *string
	Integer *int64

	Type CreateDeployment200ApplicationJSONGitSource1RepoIDType
}

func CreateCreateDeployment200ApplicationJSONGitSource1RepoIDStr(str string) CreateDeployment200ApplicationJSONGitSource1RepoID {
	typ := CreateDeployment200ApplicationJSONGitSource1RepoIDTypeStr

	return CreateDeployment200ApplicationJSONGitSource1RepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSource1RepoIDInteger(integer int64) CreateDeployment200ApplicationJSONGitSource1RepoID {
	typ := CreateDeployment200ApplicationJSONGitSource1RepoIDTypeInteger

	return CreateDeployment200ApplicationJSONGitSource1RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CreateDeployment200ApplicationJSONGitSource1RepoID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateDeployment200ApplicationJSONGitSource1RepoIDTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateDeployment200ApplicationJSONGitSource1RepoIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONGitSource1RepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment200ApplicationJSONGitSource1Type string

const (
	CreateDeployment200ApplicationJSONGitSource1TypeGithub CreateDeployment200ApplicationJSONGitSource1Type = "github"
)

func (e CreateDeployment200ApplicationJSONGitSource1Type) ToPointer() *CreateDeployment200ApplicationJSONGitSource1Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONGitSource1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeployment200ApplicationJSONGitSource1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONGitSource1Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONGitSource1 struct {
	PrID   *int64                                             `json:"prId,omitempty"`
	Ref    *string                                            `json:"ref,omitempty"`
	RepoID CreateDeployment200ApplicationJSONGitSource1RepoID `json:"repoId"`
	Sha    *string                                            `json:"sha,omitempty"`
	Type   CreateDeployment200ApplicationJSONGitSource1Type   `json:"type"`
}

func (o *CreateDeployment200ApplicationJSONGitSource1) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment200ApplicationJSONGitSource1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment200ApplicationJSONGitSource1) GetRepoID() CreateDeployment200ApplicationJSONGitSource1RepoID {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource1RepoID{}
	}
	return o.RepoID
}

func (o *CreateDeployment200ApplicationJSONGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment200ApplicationJSONGitSource1) GetType() CreateDeployment200ApplicationJSONGitSource1Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONGitSource1Type("")
	}
	return o.Type
}

type CreateDeployment200ApplicationJSONGitSourceType string

const (
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource1 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_1"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource2 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_2"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource3 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_3"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource4 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_4"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource5 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_5"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource6 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_6"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource7 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_7"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource8 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_8"
	CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource9 CreateDeployment200ApplicationJSONGitSourceType = "createDeployment_200ApplicationJSON_gitSource_9"
)

type CreateDeployment200ApplicationJSONGitSource struct {
	CreateDeployment200ApplicationJSONGitSource1 *CreateDeployment200ApplicationJSONGitSource1
	CreateDeployment200ApplicationJSONGitSource2 *CreateDeployment200ApplicationJSONGitSource2
	CreateDeployment200ApplicationJSONGitSource3 *CreateDeployment200ApplicationJSONGitSource3
	CreateDeployment200ApplicationJSONGitSource4 *CreateDeployment200ApplicationJSONGitSource4
	CreateDeployment200ApplicationJSONGitSource5 *CreateDeployment200ApplicationJSONGitSource5
	CreateDeployment200ApplicationJSONGitSource6 *CreateDeployment200ApplicationJSONGitSource6
	CreateDeployment200ApplicationJSONGitSource7 *CreateDeployment200ApplicationJSONGitSource7
	CreateDeployment200ApplicationJSONGitSource8 *CreateDeployment200ApplicationJSONGitSource8
	CreateDeployment200ApplicationJSONGitSource9 *CreateDeployment200ApplicationJSONGitSource9

	Type CreateDeployment200ApplicationJSONGitSourceType
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource1(createDeployment200ApplicationJSONGitSource1 CreateDeployment200ApplicationJSONGitSource1) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource1

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource1: &createDeployment200ApplicationJSONGitSource1,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource2(createDeployment200ApplicationJSONGitSource2 CreateDeployment200ApplicationJSONGitSource2) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource2

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource2: &createDeployment200ApplicationJSONGitSource2,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource3(createDeployment200ApplicationJSONGitSource3 CreateDeployment200ApplicationJSONGitSource3) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource3

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource3: &createDeployment200ApplicationJSONGitSource3,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource4(createDeployment200ApplicationJSONGitSource4 CreateDeployment200ApplicationJSONGitSource4) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource4

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource4: &createDeployment200ApplicationJSONGitSource4,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource5(createDeployment200ApplicationJSONGitSource5 CreateDeployment200ApplicationJSONGitSource5) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource5

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource5: &createDeployment200ApplicationJSONGitSource5,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource6(createDeployment200ApplicationJSONGitSource6 CreateDeployment200ApplicationJSONGitSource6) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource6

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource6: &createDeployment200ApplicationJSONGitSource6,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource7(createDeployment200ApplicationJSONGitSource7 CreateDeployment200ApplicationJSONGitSource7) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource7

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource7: &createDeployment200ApplicationJSONGitSource7,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource8(createDeployment200ApplicationJSONGitSource8 CreateDeployment200ApplicationJSONGitSource8) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource8

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource8: &createDeployment200ApplicationJSONGitSource8,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONGitSourceCreateDeployment200ApplicationJSONGitSource9(createDeployment200ApplicationJSONGitSource9 CreateDeployment200ApplicationJSONGitSource9) CreateDeployment200ApplicationJSONGitSource {
	typ := CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource9

	return CreateDeployment200ApplicationJSONGitSource{
		CreateDeployment200ApplicationJSONGitSource9: &createDeployment200ApplicationJSONGitSource9,
		Type: typ,
	}
}

func (u *CreateDeployment200ApplicationJSONGitSource) UnmarshalJSON(data []byte) error {

	createDeployment200ApplicationJSONGitSource6 := new(CreateDeployment200ApplicationJSONGitSource6)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource6, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource6 = createDeployment200ApplicationJSONGitSource6
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource6
		return nil
	}

	createDeployment200ApplicationJSONGitSource8 := new(CreateDeployment200ApplicationJSONGitSource8)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource8, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource8 = createDeployment200ApplicationJSONGitSource8
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource8
		return nil
	}

	createDeployment200ApplicationJSONGitSource1 := new(CreateDeployment200ApplicationJSONGitSource1)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource1, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource1 = createDeployment200ApplicationJSONGitSource1
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource1
		return nil
	}

	createDeployment200ApplicationJSONGitSource3 := new(CreateDeployment200ApplicationJSONGitSource3)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource3, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource3 = createDeployment200ApplicationJSONGitSource3
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource3
		return nil
	}

	createDeployment200ApplicationJSONGitSource2 := new(CreateDeployment200ApplicationJSONGitSource2)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource2, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource2 = createDeployment200ApplicationJSONGitSource2
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource2
		return nil
	}

	createDeployment200ApplicationJSONGitSource4 := new(CreateDeployment200ApplicationJSONGitSource4)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource4, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource4 = createDeployment200ApplicationJSONGitSource4
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource4
		return nil
	}

	createDeployment200ApplicationJSONGitSource5 := new(CreateDeployment200ApplicationJSONGitSource5)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource5, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource5 = createDeployment200ApplicationJSONGitSource5
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource5
		return nil
	}

	createDeployment200ApplicationJSONGitSource7 := new(CreateDeployment200ApplicationJSONGitSource7)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource7, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource7 = createDeployment200ApplicationJSONGitSource7
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource7
		return nil
	}

	createDeployment200ApplicationJSONGitSource9 := new(CreateDeployment200ApplicationJSONGitSource9)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONGitSource9, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONGitSource9 = createDeployment200ApplicationJSONGitSource9
		u.Type = CreateDeployment200ApplicationJSONGitSourceTypeCreateDeployment200ApplicationJSONGitSource9
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONGitSource) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment200ApplicationJSONGitSource1 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource1, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource2 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource2, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource3 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource3, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource4 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource4, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource5 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource5, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource6 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource6, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource7 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource7, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource8 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource8, "", true)
	}

	if u.CreateDeployment200ApplicationJSONGitSource9 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONGitSource9, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment200ApplicationJSONLambdasOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *CreateDeployment200ApplicationJSONLambdasOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *CreateDeployment200ApplicationJSONLambdasOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CreateDeployment200ApplicationJSONLambdasReadyState string

const (
	CreateDeployment200ApplicationJSONLambdasReadyStateBuilding     CreateDeployment200ApplicationJSONLambdasReadyState = "BUILDING"
	CreateDeployment200ApplicationJSONLambdasReadyStateError        CreateDeployment200ApplicationJSONLambdasReadyState = "ERROR"
	CreateDeployment200ApplicationJSONLambdasReadyStateInitializing CreateDeployment200ApplicationJSONLambdasReadyState = "INITIALIZING"
	CreateDeployment200ApplicationJSONLambdasReadyStateReady        CreateDeployment200ApplicationJSONLambdasReadyState = "READY"
)

func (e CreateDeployment200ApplicationJSONLambdasReadyState) ToPointer() *CreateDeployment200ApplicationJSONLambdasReadyState {
	return &e
}

func (e *CreateDeployment200ApplicationJSONLambdasReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = CreateDeployment200ApplicationJSONLambdasReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONLambdasReadyState: %v", v)
	}
}

type CreateDeployment200ApplicationJSONLambdas struct {
	CreatedAt    *int64                                               `json:"createdAt,omitempty"`
	Entrypoint   *string                                              `json:"entrypoint,omitempty"`
	ID           string                                               `json:"id"`
	Output       []CreateDeployment200ApplicationJSONLambdasOutput    `json:"output"`
	ReadyState   *CreateDeployment200ApplicationJSONLambdasReadyState `json:"readyState,omitempty"`
	ReadyStateAt *int64                                               `json:"readyStateAt,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetOutput() []CreateDeployment200ApplicationJSONLambdasOutput {
	if o == nil {
		return []CreateDeployment200ApplicationJSONLambdasOutput{}
	}
	return o.Output
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetReadyState() *CreateDeployment200ApplicationJSONLambdasReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CreateDeployment200ApplicationJSONLambdas) GetReadyStateAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// CreateDeployment200ApplicationJSONPlan - The pricing plan the deployment was made under
type CreateDeployment200ApplicationJSONPlan string

const (
	CreateDeployment200ApplicationJSONPlanPro        CreateDeployment200ApplicationJSONPlan = "pro"
	CreateDeployment200ApplicationJSONPlanEnterprise CreateDeployment200ApplicationJSONPlan = "enterprise"
	CreateDeployment200ApplicationJSONPlanHobby      CreateDeployment200ApplicationJSONPlan = "hobby"
	CreateDeployment200ApplicationJSONPlanOss        CreateDeployment200ApplicationJSONPlan = "oss"
)

func (e CreateDeployment200ApplicationJSONPlan) ToPointer() *CreateDeployment200ApplicationJSONPlan {
	return &e
}

func (e *CreateDeployment200ApplicationJSONPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = CreateDeployment200ApplicationJSONPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONPlan: %v", v)
	}
}

// CreateDeployment200ApplicationJSONReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type CreateDeployment200ApplicationJSONReadyState string

const (
	CreateDeployment200ApplicationJSONReadyStateQueued       CreateDeployment200ApplicationJSONReadyState = "QUEUED"
	CreateDeployment200ApplicationJSONReadyStateBuilding     CreateDeployment200ApplicationJSONReadyState = "BUILDING"
	CreateDeployment200ApplicationJSONReadyStateError        CreateDeployment200ApplicationJSONReadyState = "ERROR"
	CreateDeployment200ApplicationJSONReadyStateInitializing CreateDeployment200ApplicationJSONReadyState = "INITIALIZING"
	CreateDeployment200ApplicationJSONReadyStateReady        CreateDeployment200ApplicationJSONReadyState = "READY"
	CreateDeployment200ApplicationJSONReadyStateCanceled     CreateDeployment200ApplicationJSONReadyState = "CANCELED"
)

func (e CreateDeployment200ApplicationJSONReadyState) ToPointer() *CreateDeployment200ApplicationJSONReadyState {
	return &e
}

func (e *CreateDeployment200ApplicationJSONReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateDeployment200ApplicationJSONReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONReadyState: %v", v)
	}
}

// CreateDeployment200ApplicationJSONReadySubstate - The substate of the deployment when the state is "READY"
type CreateDeployment200ApplicationJSONReadySubstate string

const (
	CreateDeployment200ApplicationJSONReadySubstateStaged   CreateDeployment200ApplicationJSONReadySubstate = "STAGED"
	CreateDeployment200ApplicationJSONReadySubstatePromoted CreateDeployment200ApplicationJSONReadySubstate = "PROMOTED"
)

func (e CreateDeployment200ApplicationJSONReadySubstate) ToPointer() *CreateDeployment200ApplicationJSONReadySubstate {
	return &e
}

func (e *CreateDeployment200ApplicationJSONReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateDeployment200ApplicationJSONReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONReadySubstate: %v", v)
	}
}

type CreateDeployment200ApplicationJSONRoutes3Middleware int64

const (
	CreateDeployment200ApplicationJSONRoutes3MiddlewareZero CreateDeployment200ApplicationJSONRoutes3Middleware = 0
)

func (e CreateDeployment200ApplicationJSONRoutes3Middleware) ToPointer() *CreateDeployment200ApplicationJSONRoutes3Middleware {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes3Middleware) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		*e = CreateDeployment200ApplicationJSONRoutes3Middleware(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes3Middleware: %v", v)
	}
}

// CreateDeployment200ApplicationJSONRoutes3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeployment200ApplicationJSONRoutes3 struct {
	Continue   bool                                                `json:"continue"`
	Middleware CreateDeployment200ApplicationJSONRoutes3Middleware `json:"middleware"`
	Src        string                                              `json:"src"`
}

func (o *CreateDeployment200ApplicationJSONRoutes3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CreateDeployment200ApplicationJSONRoutes3) GetMiddleware() CreateDeployment200ApplicationJSONRoutes3Middleware {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes3Middleware(0)
	}
	return o.Middleware
}

func (o *CreateDeployment200ApplicationJSONRoutes3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

type CreateDeployment200ApplicationJSONRoutes2Handle string

const (
	CreateDeployment200ApplicationJSONRoutes2HandleError      CreateDeployment200ApplicationJSONRoutes2Handle = "error"
	CreateDeployment200ApplicationJSONRoutes2HandleFilesystem CreateDeployment200ApplicationJSONRoutes2Handle = "filesystem"
	CreateDeployment200ApplicationJSONRoutes2HandleHit        CreateDeployment200ApplicationJSONRoutes2Handle = "hit"
	CreateDeployment200ApplicationJSONRoutes2HandleMiss       CreateDeployment200ApplicationJSONRoutes2Handle = "miss"
	CreateDeployment200ApplicationJSONRoutes2HandleRewrite    CreateDeployment200ApplicationJSONRoutes2Handle = "rewrite"
	CreateDeployment200ApplicationJSONRoutes2HandleResource   CreateDeployment200ApplicationJSONRoutes2Handle = "resource"
)

func (e CreateDeployment200ApplicationJSONRoutes2Handle) ToPointer() *CreateDeployment200ApplicationJSONRoutes2Handle {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes2Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = CreateDeployment200ApplicationJSONRoutes2Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes2Handle: %v", v)
	}
}

// CreateDeployment200ApplicationJSONRoutes2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeployment200ApplicationJSONRoutes2 struct {
	Dest   *string                                         `json:"dest,omitempty"`
	Handle CreateDeployment200ApplicationJSONRoutes2Handle `json:"handle"`
	Src    *string                                         `json:"src,omitempty"`
	Status *int64                                          `json:"status,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONRoutes2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeployment200ApplicationJSONRoutes2) GetHandle() CreateDeployment200ApplicationJSONRoutes2Handle {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes2Handle("")
	}
	return o.Handle
}

func (o *CreateDeployment200ApplicationJSONRoutes2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateDeployment200ApplicationJSONRoutes2) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeployment200ApplicationJSONRoutes1Has2Type string

const (
	CreateDeployment200ApplicationJSONRoutes1Has2TypeHeader CreateDeployment200ApplicationJSONRoutes1Has2Type = "header"
	CreateDeployment200ApplicationJSONRoutes1Has2TypeCookie CreateDeployment200ApplicationJSONRoutes1Has2Type = "cookie"
	CreateDeployment200ApplicationJSONRoutes1Has2TypeQuery  CreateDeployment200ApplicationJSONRoutes1Has2Type = "query"
)

func (e CreateDeployment200ApplicationJSONRoutes1Has2Type) ToPointer() *CreateDeployment200ApplicationJSONRoutes1Has2Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes1Has2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeployment200ApplicationJSONRoutes1Has2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes1Has2Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONRoutes1Has2 struct {
	Key   string                                            `json:"key"`
	Type  CreateDeployment200ApplicationJSONRoutes1Has2Type `json:"type"`
	Value *string                                           `json:"value,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1Has2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeployment200ApplicationJSONRoutes1Has2) GetType() CreateDeployment200ApplicationJSONRoutes1Has2Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes1Has2Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONRoutes1Has2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeployment200ApplicationJSONRoutes1Has1Type string

const (
	CreateDeployment200ApplicationJSONRoutes1Has1TypeHost CreateDeployment200ApplicationJSONRoutes1Has1Type = "host"
)

func (e CreateDeployment200ApplicationJSONRoutes1Has1Type) ToPointer() *CreateDeployment200ApplicationJSONRoutes1Has1Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes1Has1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeployment200ApplicationJSONRoutes1Has1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes1Has1Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONRoutes1Has1 struct {
	Type  CreateDeployment200ApplicationJSONRoutes1Has1Type `json:"type"`
	Value string                                            `json:"value"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1Has1) GetType() CreateDeployment200ApplicationJSONRoutes1Has1Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes1Has1Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONRoutes1Has1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeployment200ApplicationJSONRoutes1HasType string

const (
	CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has1 CreateDeployment200ApplicationJSONRoutes1HasType = "createDeployment_200ApplicationJSON_routes_1_has_1"
	CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has2 CreateDeployment200ApplicationJSONRoutes1HasType = "createDeployment_200ApplicationJSON_routes_1_has_2"
)

type CreateDeployment200ApplicationJSONRoutes1Has struct {
	CreateDeployment200ApplicationJSONRoutes1Has1 *CreateDeployment200ApplicationJSONRoutes1Has1
	CreateDeployment200ApplicationJSONRoutes1Has2 *CreateDeployment200ApplicationJSONRoutes1Has2

	Type CreateDeployment200ApplicationJSONRoutes1HasType
}

func CreateCreateDeployment200ApplicationJSONRoutes1HasCreateDeployment200ApplicationJSONRoutes1Has1(createDeployment200ApplicationJSONRoutes1Has1 CreateDeployment200ApplicationJSONRoutes1Has1) CreateDeployment200ApplicationJSONRoutes1Has {
	typ := CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has1

	return CreateDeployment200ApplicationJSONRoutes1Has{
		CreateDeployment200ApplicationJSONRoutes1Has1: &createDeployment200ApplicationJSONRoutes1Has1,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONRoutes1HasCreateDeployment200ApplicationJSONRoutes1Has2(createDeployment200ApplicationJSONRoutes1Has2 CreateDeployment200ApplicationJSONRoutes1Has2) CreateDeployment200ApplicationJSONRoutes1Has {
	typ := CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has2

	return CreateDeployment200ApplicationJSONRoutes1Has{
		CreateDeployment200ApplicationJSONRoutes1Has2: &createDeployment200ApplicationJSONRoutes1Has2,
		Type: typ,
	}
}

func (u *CreateDeployment200ApplicationJSONRoutes1Has) UnmarshalJSON(data []byte) error {

	createDeployment200ApplicationJSONRoutes1Has1 := new(CreateDeployment200ApplicationJSONRoutes1Has1)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes1Has1, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes1Has1 = createDeployment200ApplicationJSONRoutes1Has1
		u.Type = CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has1
		return nil
	}

	createDeployment200ApplicationJSONRoutes1Has2 := new(CreateDeployment200ApplicationJSONRoutes1Has2)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes1Has2, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes1Has2 = createDeployment200ApplicationJSONRoutes1Has2
		u.Type = CreateDeployment200ApplicationJSONRoutes1HasTypeCreateDeployment200ApplicationJSONRoutes1Has2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONRoutes1Has) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment200ApplicationJSONRoutes1Has1 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes1Has1, "", true)
	}

	if u.CreateDeployment200ApplicationJSONRoutes1Has2 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes1Has2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment200ApplicationJSONRoutes1Locale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1Locale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *CreateDeployment200ApplicationJSONRoutes1Locale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type CreateDeployment200ApplicationJSONRoutes1Missing2Type string

const (
	CreateDeployment200ApplicationJSONRoutes1Missing2TypeHeader CreateDeployment200ApplicationJSONRoutes1Missing2Type = "header"
	CreateDeployment200ApplicationJSONRoutes1Missing2TypeCookie CreateDeployment200ApplicationJSONRoutes1Missing2Type = "cookie"
	CreateDeployment200ApplicationJSONRoutes1Missing2TypeQuery  CreateDeployment200ApplicationJSONRoutes1Missing2Type = "query"
)

func (e CreateDeployment200ApplicationJSONRoutes1Missing2Type) ToPointer() *CreateDeployment200ApplicationJSONRoutes1Missing2Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeployment200ApplicationJSONRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes1Missing2Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONRoutes1Missing2 struct {
	Key   string                                                `json:"key"`
	Type  CreateDeployment200ApplicationJSONRoutes1Missing2Type `json:"type"`
	Value *string                                               `json:"value,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1Missing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeployment200ApplicationJSONRoutes1Missing2) GetType() CreateDeployment200ApplicationJSONRoutes1Missing2Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONRoutes1Missing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeployment200ApplicationJSONRoutes1Missing1Type string

const (
	CreateDeployment200ApplicationJSONRoutes1Missing1TypeHost CreateDeployment200ApplicationJSONRoutes1Missing1Type = "host"
)

func (e CreateDeployment200ApplicationJSONRoutes1Missing1Type) ToPointer() *CreateDeployment200ApplicationJSONRoutes1Missing1Type {
	return &e
}

func (e *CreateDeployment200ApplicationJSONRoutes1Missing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeployment200ApplicationJSONRoutes1Missing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONRoutes1Missing1Type: %v", v)
	}
}

type CreateDeployment200ApplicationJSONRoutes1Missing1 struct {
	Type  CreateDeployment200ApplicationJSONRoutes1Missing1Type `json:"type"`
	Value string                                                `json:"value"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1Missing1) GetType() CreateDeployment200ApplicationJSONRoutes1Missing1Type {
	if o == nil {
		return CreateDeployment200ApplicationJSONRoutes1Missing1Type("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSONRoutes1Missing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeployment200ApplicationJSONRoutes1MissingType string

const (
	CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing1 CreateDeployment200ApplicationJSONRoutes1MissingType = "createDeployment_200ApplicationJSON_routes_1_missing_1"
	CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing2 CreateDeployment200ApplicationJSONRoutes1MissingType = "createDeployment_200ApplicationJSON_routes_1_missing_2"
)

type CreateDeployment200ApplicationJSONRoutes1Missing struct {
	CreateDeployment200ApplicationJSONRoutes1Missing1 *CreateDeployment200ApplicationJSONRoutes1Missing1
	CreateDeployment200ApplicationJSONRoutes1Missing2 *CreateDeployment200ApplicationJSONRoutes1Missing2

	Type CreateDeployment200ApplicationJSONRoutes1MissingType
}

func CreateCreateDeployment200ApplicationJSONRoutes1MissingCreateDeployment200ApplicationJSONRoutes1Missing1(createDeployment200ApplicationJSONRoutes1Missing1 CreateDeployment200ApplicationJSONRoutes1Missing1) CreateDeployment200ApplicationJSONRoutes1Missing {
	typ := CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing1

	return CreateDeployment200ApplicationJSONRoutes1Missing{
		CreateDeployment200ApplicationJSONRoutes1Missing1: &createDeployment200ApplicationJSONRoutes1Missing1,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONRoutes1MissingCreateDeployment200ApplicationJSONRoutes1Missing2(createDeployment200ApplicationJSONRoutes1Missing2 CreateDeployment200ApplicationJSONRoutes1Missing2) CreateDeployment200ApplicationJSONRoutes1Missing {
	typ := CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing2

	return CreateDeployment200ApplicationJSONRoutes1Missing{
		CreateDeployment200ApplicationJSONRoutes1Missing2: &createDeployment200ApplicationJSONRoutes1Missing2,
		Type: typ,
	}
}

func (u *CreateDeployment200ApplicationJSONRoutes1Missing) UnmarshalJSON(data []byte) error {

	createDeployment200ApplicationJSONRoutes1Missing1 := new(CreateDeployment200ApplicationJSONRoutes1Missing1)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes1Missing1, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes1Missing1 = createDeployment200ApplicationJSONRoutes1Missing1
		u.Type = CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing1
		return nil
	}

	createDeployment200ApplicationJSONRoutes1Missing2 := new(CreateDeployment200ApplicationJSONRoutes1Missing2)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes1Missing2, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes1Missing2 = createDeployment200ApplicationJSONRoutes1Missing2
		u.Type = CreateDeployment200ApplicationJSONRoutes1MissingTypeCreateDeployment200ApplicationJSONRoutes1Missing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONRoutes1Missing) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment200ApplicationJSONRoutes1Missing1 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes1Missing1, "", true)
	}

	if u.CreateDeployment200ApplicationJSONRoutes1Missing2 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes1Missing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeployment200ApplicationJSONRoutes1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeployment200ApplicationJSONRoutes1 struct {
	CaseSensitive *bool                                            `json:"caseSensitive,omitempty"`
	Check         *bool                                            `json:"check,omitempty"`
	Continue      *bool                                            `json:"continue,omitempty"`
	Dest          *string                                          `json:"dest,omitempty"`
	Has           []CreateDeployment200ApplicationJSONRoutes1Has   `json:"has,omitempty"`
	Headers       map[string]string                                `json:"headers,omitempty"`
	Important     *bool                                            `json:"important,omitempty"`
	Locale        *CreateDeployment200ApplicationJSONRoutes1Locale `json:"locale,omitempty"`
	Methods       []string                                         `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *int64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string                                           `json:"middlewareRawSrc,omitempty"`
	Missing          []CreateDeployment200ApplicationJSONRoutes1Missing `json:"missing,omitempty"`
	Override         *bool                                              `json:"override,omitempty"`
	Src              string                                             `json:"src"`
	Status           *int64                                             `json:"status,omitempty"`
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetHas() []CreateDeployment200ApplicationJSONRoutes1Has {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetLocale() *CreateDeployment200ApplicationJSONRoutes1Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetMiddleware() *int64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetMissing() []CreateDeployment200ApplicationJSONRoutes1Missing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CreateDeployment200ApplicationJSONRoutes1) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeployment200ApplicationJSONRoutesType string

const (
	CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes1 CreateDeployment200ApplicationJSONRoutesType = "createDeployment_200ApplicationJSON_routes_1"
	CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes2 CreateDeployment200ApplicationJSONRoutesType = "createDeployment_200ApplicationJSON_routes_2"
	CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes3 CreateDeployment200ApplicationJSONRoutesType = "createDeployment_200ApplicationJSON_routes_3"
)

type CreateDeployment200ApplicationJSONRoutes struct {
	CreateDeployment200ApplicationJSONRoutes1 *CreateDeployment200ApplicationJSONRoutes1
	CreateDeployment200ApplicationJSONRoutes2 *CreateDeployment200ApplicationJSONRoutes2
	CreateDeployment200ApplicationJSONRoutes3 *CreateDeployment200ApplicationJSONRoutes3

	Type CreateDeployment200ApplicationJSONRoutesType
}

func CreateCreateDeployment200ApplicationJSONRoutesCreateDeployment200ApplicationJSONRoutes1(createDeployment200ApplicationJSONRoutes1 CreateDeployment200ApplicationJSONRoutes1) CreateDeployment200ApplicationJSONRoutes {
	typ := CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes1

	return CreateDeployment200ApplicationJSONRoutes{
		CreateDeployment200ApplicationJSONRoutes1: &createDeployment200ApplicationJSONRoutes1,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONRoutesCreateDeployment200ApplicationJSONRoutes2(createDeployment200ApplicationJSONRoutes2 CreateDeployment200ApplicationJSONRoutes2) CreateDeployment200ApplicationJSONRoutes {
	typ := CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes2

	return CreateDeployment200ApplicationJSONRoutes{
		CreateDeployment200ApplicationJSONRoutes2: &createDeployment200ApplicationJSONRoutes2,
		Type: typ,
	}
}

func CreateCreateDeployment200ApplicationJSONRoutesCreateDeployment200ApplicationJSONRoutes3(createDeployment200ApplicationJSONRoutes3 CreateDeployment200ApplicationJSONRoutes3) CreateDeployment200ApplicationJSONRoutes {
	typ := CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes3

	return CreateDeployment200ApplicationJSONRoutes{
		CreateDeployment200ApplicationJSONRoutes3: &createDeployment200ApplicationJSONRoutes3,
		Type: typ,
	}
}

func (u *CreateDeployment200ApplicationJSONRoutes) UnmarshalJSON(data []byte) error {

	createDeployment200ApplicationJSONRoutes3 := new(CreateDeployment200ApplicationJSONRoutes3)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes3, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes3 = createDeployment200ApplicationJSONRoutes3
		u.Type = CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes3
		return nil
	}

	createDeployment200ApplicationJSONRoutes2 := new(CreateDeployment200ApplicationJSONRoutes2)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes2, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes2 = createDeployment200ApplicationJSONRoutes2
		u.Type = CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes2
		return nil
	}

	createDeployment200ApplicationJSONRoutes1 := new(CreateDeployment200ApplicationJSONRoutes1)
	if err := utils.UnmarshalJSON(data, &createDeployment200ApplicationJSONRoutes1, "", true, true); err == nil {
		u.CreateDeployment200ApplicationJSONRoutes1 = createDeployment200ApplicationJSONRoutes1
		u.Type = CreateDeployment200ApplicationJSONRoutesTypeCreateDeployment200ApplicationJSONRoutes1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeployment200ApplicationJSONRoutes) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment200ApplicationJSONRoutes1 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes1, "", true)
	}

	if u.CreateDeployment200ApplicationJSONRoutes2 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes2, "", true)
	}

	if u.CreateDeployment200ApplicationJSONRoutes3 != nil {
		return utils.MarshalJSON(u.CreateDeployment200ApplicationJSONRoutes3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeployment200ApplicationJSONSource - Where was the deployment created from
type CreateDeployment200ApplicationJSONSource string

const (
	CreateDeployment200ApplicationJSONSourceCli        CreateDeployment200ApplicationJSONSource = "cli"
	CreateDeployment200ApplicationJSONSourceGit        CreateDeployment200ApplicationJSONSource = "git"
	CreateDeployment200ApplicationJSONSourceImport     CreateDeployment200ApplicationJSONSource = "import"
	CreateDeployment200ApplicationJSONSourceImportRepo CreateDeployment200ApplicationJSONSource = "import/repo"
	CreateDeployment200ApplicationJSONSourceCloneRepo  CreateDeployment200ApplicationJSONSource = "clone/repo"
)

func (e CreateDeployment200ApplicationJSONSource) ToPointer() *CreateDeployment200ApplicationJSONSource {
	return &e
}

func (e *CreateDeployment200ApplicationJSONSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		*e = CreateDeployment200ApplicationJSONSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONSource: %v", v)
	}
}

// CreateDeployment200ApplicationJSONTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type CreateDeployment200ApplicationJSONTarget string

const (
	CreateDeployment200ApplicationJSONTargetStaging    CreateDeployment200ApplicationJSONTarget = "staging"
	CreateDeployment200ApplicationJSONTargetProduction CreateDeployment200ApplicationJSONTarget = "production"
)

func (e CreateDeployment200ApplicationJSONTarget) ToPointer() *CreateDeployment200ApplicationJSONTarget {
	return &e
}

func (e *CreateDeployment200ApplicationJSONTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CreateDeployment200ApplicationJSONTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONTarget: %v", v)
	}
}

// CreateDeployment200ApplicationJSONTeam - The team that owns the deployment if any
type CreateDeployment200ApplicationJSONTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *CreateDeployment200ApplicationJSONTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeployment200ApplicationJSONTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment200ApplicationJSONTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type CreateDeployment200ApplicationJSONType string

const (
	CreateDeployment200ApplicationJSONTypeLambdas CreateDeployment200ApplicationJSONType = "LAMBDAS"
)

func (e CreateDeployment200ApplicationJSONType) ToPointer() *CreateDeployment200ApplicationJSONType {
	return &e
}

func (e *CreateDeployment200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateDeployment200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONType: %v", v)
	}
}

// CreateDeployment200ApplicationJSONVersion - The platform version that was used to create the deployment.
type CreateDeployment200ApplicationJSONVersion int64

const (
	CreateDeployment200ApplicationJSONVersionTwo CreateDeployment200ApplicationJSONVersion = 2
)

func (e CreateDeployment200ApplicationJSONVersion) ToPointer() *CreateDeployment200ApplicationJSONVersion {
	return &e
}

func (e *CreateDeployment200ApplicationJSONVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		*e = CreateDeployment200ApplicationJSONVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployment200ApplicationJSONVersion: %v", v)
	}
}

// CreateDeployment200ApplicationJSON - The successfully created deployment
type CreateDeployment200ApplicationJSON struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                                               `json:"aliasAssigned"`
	AliasAssignedAt *CreateDeployment200ApplicationJSONAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *CreateDeployment200ApplicationJSONAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                             `json:"aliasFinal,omitempty"`
	AliasWarning            *CreateDeployment200ApplicationJSONAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                               `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                            `json:"automaticAliases,omitempty"`
	BootedAt                int64                                               `json:"bootedAt"`
	Build                   CreateDeployment200ApplicationJSONBuild             `json:"build"`
	BuildErrorAt            *int64                                              `json:"buildErrorAt,omitempty"`
	BuildingAt              int64                                               `json:"buildingAt"`
	Builds                  []CreateDeployment200ApplicationJSONBuilds          `json:"builds,omitempty"`
	CanceledAt              *int64                                              `json:"canceledAt,omitempty"`
	ChecksConclusion        *CreateDeployment200ApplicationJSONChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *CreateDeployment200ApplicationJSONChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt int64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator CreateDeployment200ApplicationJSONCreator `json:"creator"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]CreateDeployment200ApplicationJSONFunctions `json:"functions,omitempty"`
	GitRepo   *CreateDeployment200ApplicationJSONGitRepo             `json:"gitRepo,omitempty"`
	GitSource *CreateDeployment200ApplicationJSONGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                                        `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []CreateDeployment200ApplicationJSONLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The pricing plan the deployment was made under
	Plan CreateDeployment200ApplicationJSONPlan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState CreateDeployment200ApplicationJSONReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *CreateDeployment200ApplicationJSONReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []CreateDeployment200ApplicationJSONRoutes `json:"routes"`
	// Where was the deployment created from
	Source *CreateDeployment200ApplicationJSONSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *CreateDeployment200ApplicationJSONTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *CreateDeployment200ApplicationJSONTeam `json:"team,omitempty"`
	Type CreateDeployment200ApplicationJSONType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version CreateDeployment200ApplicationJSONVersion `json:"version"`
}

func (o *CreateDeployment200ApplicationJSON) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *CreateDeployment200ApplicationJSON) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CreateDeployment200ApplicationJSON) GetAliasAssignedAt() *CreateDeployment200ApplicationJSONAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CreateDeployment200ApplicationJSON) GetAliasError() *CreateDeployment200ApplicationJSONAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateDeployment200ApplicationJSON) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateDeployment200ApplicationJSON) GetAliasWarning() *CreateDeployment200ApplicationJSONAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CreateDeployment200ApplicationJSON) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateDeployment200ApplicationJSON) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateDeployment200ApplicationJSON) GetBootedAt() int64 {
	if o == nil {
		return 0
	}
	return o.BootedAt
}

func (o *CreateDeployment200ApplicationJSON) GetBuild() CreateDeployment200ApplicationJSONBuild {
	if o == nil {
		return CreateDeployment200ApplicationJSONBuild{}
	}
	return o.Build
}

func (o *CreateDeployment200ApplicationJSON) GetBuildErrorAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CreateDeployment200ApplicationJSON) GetBuildingAt() int64 {
	if o == nil {
		return 0
	}
	return o.BuildingAt
}

func (o *CreateDeployment200ApplicationJSON) GetBuilds() []CreateDeployment200ApplicationJSONBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateDeployment200ApplicationJSON) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateDeployment200ApplicationJSON) GetChecksConclusion() *CreateDeployment200ApplicationJSONChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateDeployment200ApplicationJSON) GetChecksState() *CreateDeployment200ApplicationJSONChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateDeployment200ApplicationJSON) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateDeployment200ApplicationJSON) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateDeployment200ApplicationJSON) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateDeployment200ApplicationJSON) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateDeployment200ApplicationJSON) GetCreator() CreateDeployment200ApplicationJSONCreator {
	if o == nil {
		return CreateDeployment200ApplicationJSONCreator{}
	}
	return o.Creator
}

func (o *CreateDeployment200ApplicationJSON) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CreateDeployment200ApplicationJSON) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CreateDeployment200ApplicationJSON) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CreateDeployment200ApplicationJSON) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateDeployment200ApplicationJSON) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CreateDeployment200ApplicationJSON) GetFunctions() map[string]CreateDeployment200ApplicationJSONFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateDeployment200ApplicationJSON) GetGitRepo() *CreateDeployment200ApplicationJSONGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CreateDeployment200ApplicationJSON) GetGitSource() *CreateDeployment200ApplicationJSONGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeployment200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeployment200ApplicationJSON) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CreateDeployment200ApplicationJSON) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CreateDeployment200ApplicationJSON) GetLambdas() []CreateDeployment200ApplicationJSONLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CreateDeployment200ApplicationJSON) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CreateDeployment200ApplicationJSON) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeployment200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment200ApplicationJSON) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDeployment200ApplicationJSON) GetPlan() CreateDeployment200ApplicationJSONPlan {
	if o == nil {
		return CreateDeployment200ApplicationJSONPlan("")
	}
	return o.Plan
}

func (o *CreateDeployment200ApplicationJSON) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateDeployment200ApplicationJSON) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeployment200ApplicationJSON) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CreateDeployment200ApplicationJSON) GetReadyState() CreateDeployment200ApplicationJSONReadyState {
	if o == nil {
		return CreateDeployment200ApplicationJSONReadyState("")
	}
	return o.ReadyState
}

func (o *CreateDeployment200ApplicationJSON) GetReadySubstate() *CreateDeployment200ApplicationJSONReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateDeployment200ApplicationJSON) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CreateDeployment200ApplicationJSON) GetRoutes() []CreateDeployment200ApplicationJSONRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CreateDeployment200ApplicationJSON) GetSource() *CreateDeployment200ApplicationJSONSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateDeployment200ApplicationJSON) GetTarget() *CreateDeployment200ApplicationJSONTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeployment200ApplicationJSON) GetTeam() *CreateDeployment200ApplicationJSONTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateDeployment200ApplicationJSON) GetType() CreateDeployment200ApplicationJSONType {
	if o == nil {
		return CreateDeployment200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateDeployment200ApplicationJSON) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateDeployment200ApplicationJSON) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CreateDeployment200ApplicationJSON) GetVersion() CreateDeployment200ApplicationJSONVersion {
	if o == nil {
		return CreateDeployment200ApplicationJSONVersion(0)
	}
	return o.Version
}

type CreateDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The successfully created deployment
	CreateDeployment200ApplicationJSONObject *CreateDeployment200ApplicationJSON
}

func (o *CreateDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateDeploymentResponse) GetCreateDeployment200ApplicationJSONObject() *CreateDeployment200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateDeployment200ApplicationJSONObject
}
