// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

// FilterProjectEnvsDecrypt - If true, the environment variable value will be decrypted
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type FilterProjectEnvsDecrypt string

const (
	FilterProjectEnvsDecryptTrue  FilterProjectEnvsDecrypt = "true"
	FilterProjectEnvsDecryptFalse FilterProjectEnvsDecrypt = "false"
)

func (e FilterProjectEnvsDecrypt) ToPointer() *FilterProjectEnvsDecrypt {
	return &e
}

func (e *FilterProjectEnvsDecrypt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = FilterProjectEnvsDecrypt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsDecrypt: %v", v)
	}
}

type FilterProjectEnvsRequest struct {
	// If true, the environment variable value will be decrypted
	Decrypt *FilterProjectEnvsDecrypt `queryParam:"style=form,explode=true,name=decrypt"`
	// If defined, the git branch of the environment variable to filter the results
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The source that is calling the endpoint.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *FilterProjectEnvsRequest) GetDecrypt() *FilterProjectEnvsDecrypt {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *FilterProjectEnvsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *FilterProjectEnvsRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *FilterProjectEnvsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint12TypePostgresDatabase FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type = "postgres-database"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint12 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint12) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint12Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint11TypePostgresPassword FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type = "postgres-password"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint11 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint11) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint11Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint10TypePostgresHost FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type = "postgres-host"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint10 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint10) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint10Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint9TypePostgresUser FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint9 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint9) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint8TypePostgresPrismaURL FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint8 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint8) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint7TypePostgresURLNonPooling FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint7 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint7) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint6TypePostgresURL FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint6 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint6) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint5TypeBlobReadWriteToken FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type = "blob-read-write-token"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint5 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint5) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint5Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint4TypeRedisRestAPIReadOnlyToken FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint4 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint4) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint4Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint3TypeRedisRestAPIToken FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint3 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint3) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint3Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint2TypeRedisRestAPIURL FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type = "redis-rest-api-url"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint2 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint2) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint2Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint1TypeRedisURL FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type = "redis-url"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint1 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON3EnvsContentHint1) GetType() FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON3EnvsContentHint1Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON3EnvsContentHintType string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint1  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_1"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint2  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_2"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint3  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_3"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint4  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_4"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint5  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_5"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint6  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_6"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint7  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_7"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint8  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_8"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint9  FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_9"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint10 FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_10"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint11 FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_11"
	FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint12 FilterProjectEnvs200ApplicationJSON3EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_3_envs_contentHint_12"
)

type FilterProjectEnvs200ApplicationJSON3EnvsContentHint struct {
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint1  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint1
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint2  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint2
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint3  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint3
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint4  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint4
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint5  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint5
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint6  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint6
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint7  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint7
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint8  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint8
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint9  *FilterProjectEnvs200ApplicationJSON3EnvsContentHint9
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint10 *FilterProjectEnvs200ApplicationJSON3EnvsContentHint10
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint11 *FilterProjectEnvs200ApplicationJSON3EnvsContentHint11
	FilterProjectEnvs200ApplicationJSON3EnvsContentHint12 *FilterProjectEnvs200ApplicationJSON3EnvsContentHint12

	Type FilterProjectEnvs200ApplicationJSON3EnvsContentHintType
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint1(filterProjectEnvs200ApplicationJSON3EnvsContentHint1 FilterProjectEnvs200ApplicationJSON3EnvsContentHint1) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint1

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint1: &filterProjectEnvs200ApplicationJSON3EnvsContentHint1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint2(filterProjectEnvs200ApplicationJSON3EnvsContentHint2 FilterProjectEnvs200ApplicationJSON3EnvsContentHint2) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint2

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint2: &filterProjectEnvs200ApplicationJSON3EnvsContentHint2,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint3(filterProjectEnvs200ApplicationJSON3EnvsContentHint3 FilterProjectEnvs200ApplicationJSON3EnvsContentHint3) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint3

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint3: &filterProjectEnvs200ApplicationJSON3EnvsContentHint3,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint4(filterProjectEnvs200ApplicationJSON3EnvsContentHint4 FilterProjectEnvs200ApplicationJSON3EnvsContentHint4) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint4

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint4: &filterProjectEnvs200ApplicationJSON3EnvsContentHint4,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint5(filterProjectEnvs200ApplicationJSON3EnvsContentHint5 FilterProjectEnvs200ApplicationJSON3EnvsContentHint5) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint5

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint5: &filterProjectEnvs200ApplicationJSON3EnvsContentHint5,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint6(filterProjectEnvs200ApplicationJSON3EnvsContentHint6 FilterProjectEnvs200ApplicationJSON3EnvsContentHint6) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint6

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint6: &filterProjectEnvs200ApplicationJSON3EnvsContentHint6,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint7(filterProjectEnvs200ApplicationJSON3EnvsContentHint7 FilterProjectEnvs200ApplicationJSON3EnvsContentHint7) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint7

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint7: &filterProjectEnvs200ApplicationJSON3EnvsContentHint7,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint8(filterProjectEnvs200ApplicationJSON3EnvsContentHint8 FilterProjectEnvs200ApplicationJSON3EnvsContentHint8) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint8

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint8: &filterProjectEnvs200ApplicationJSON3EnvsContentHint8,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint9(filterProjectEnvs200ApplicationJSON3EnvsContentHint9 FilterProjectEnvs200ApplicationJSON3EnvsContentHint9) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint9

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint9: &filterProjectEnvs200ApplicationJSON3EnvsContentHint9,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint10(filterProjectEnvs200ApplicationJSON3EnvsContentHint10 FilterProjectEnvs200ApplicationJSON3EnvsContentHint10) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint10

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint10: &filterProjectEnvs200ApplicationJSON3EnvsContentHint10,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint11(filterProjectEnvs200ApplicationJSON3EnvsContentHint11 FilterProjectEnvs200ApplicationJSON3EnvsContentHint11) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint11

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint11: &filterProjectEnvs200ApplicationJSON3EnvsContentHint11,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsContentHintFilterProjectEnvs200ApplicationJSON3EnvsContentHint12(filterProjectEnvs200ApplicationJSON3EnvsContentHint12 FilterProjectEnvs200ApplicationJSON3EnvsContentHint12) FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint12

	return FilterProjectEnvs200ApplicationJSON3EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON3EnvsContentHint12: &filterProjectEnvs200ApplicationJSON3EnvsContentHint12,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON3EnvsContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvs200ApplicationJSON3EnvsContentHint1 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint1)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint1, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint1 = filterProjectEnvs200ApplicationJSON3EnvsContentHint1
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint1
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint2 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint2 = filterProjectEnvs200ApplicationJSON3EnvsContentHint2
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint2
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint3 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint3)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint3, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint3 = filterProjectEnvs200ApplicationJSON3EnvsContentHint3
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint3
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint4 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint4)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint4, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint4 = filterProjectEnvs200ApplicationJSON3EnvsContentHint4
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint4
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint5 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint5)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint5, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint5 = filterProjectEnvs200ApplicationJSON3EnvsContentHint5
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint5
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint6 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint6)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint6, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint6 = filterProjectEnvs200ApplicationJSON3EnvsContentHint6
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint6
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint7 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint7)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint7, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint7 = filterProjectEnvs200ApplicationJSON3EnvsContentHint7
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint7
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint8 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint8)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint8, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint8 = filterProjectEnvs200ApplicationJSON3EnvsContentHint8
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint8
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint9 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint9)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint9, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint9 = filterProjectEnvs200ApplicationJSON3EnvsContentHint9
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint9
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint10 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint10)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint10, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint10 = filterProjectEnvs200ApplicationJSON3EnvsContentHint10
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint10
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint11 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint11)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint11, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint11 = filterProjectEnvs200ApplicationJSON3EnvsContentHint11
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint11
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsContentHint12 := new(FilterProjectEnvs200ApplicationJSON3EnvsContentHint12)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsContentHint12, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint12 = filterProjectEnvs200ApplicationJSON3EnvsContentHint12
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON3EnvsContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON3EnvsContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint2, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint3, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint4, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint5, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint6, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint7, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint8, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint9, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint10, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint11, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON3EnvsTarget2 string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsTarget2Production  FilterProjectEnvs200ApplicationJSON3EnvsTarget2 = "production"
	FilterProjectEnvs200ApplicationJSON3EnvsTarget2Preview     FilterProjectEnvs200ApplicationJSON3EnvsTarget2 = "preview"
	FilterProjectEnvs200ApplicationJSON3EnvsTarget2Development FilterProjectEnvs200ApplicationJSON3EnvsTarget2 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsTarget2) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsTarget2 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsTarget2: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsTarget1 string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsTarget1Production  FilterProjectEnvs200ApplicationJSON3EnvsTarget1 = "production"
	FilterProjectEnvs200ApplicationJSON3EnvsTarget1Preview     FilterProjectEnvs200ApplicationJSON3EnvsTarget1 = "preview"
	FilterProjectEnvs200ApplicationJSON3EnvsTarget1Development FilterProjectEnvs200ApplicationJSON3EnvsTarget1 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsTarget1) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsTarget1 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsTarget1: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3EnvsTargetType string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 FilterProjectEnvs200ApplicationJSON3EnvsTargetType = "arrayOffilterProjectEnvs_200ApplicationJSON_3_envs_target_1"
	FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeFilterProjectEnvs200ApplicationJSON3EnvsTarget2        FilterProjectEnvs200ApplicationJSON3EnvsTargetType = "filterProjectEnvs_200ApplicationJSON_3_envs_target_2"
)

type FilterProjectEnvs200ApplicationJSON3EnvsTarget struct {
	ArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 []FilterProjectEnvs200ApplicationJSON3EnvsTarget1
	FilterProjectEnvs200ApplicationJSON3EnvsTarget2        *FilterProjectEnvs200ApplicationJSON3EnvsTarget2

	Type FilterProjectEnvs200ApplicationJSON3EnvsTargetType
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsTargetArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1(arrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 []FilterProjectEnvs200ApplicationJSON3EnvsTarget1) FilterProjectEnvs200ApplicationJSON3EnvsTarget {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1

	return FilterProjectEnvs200ApplicationJSON3EnvsTarget{
		ArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1: arrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON3EnvsTargetFilterProjectEnvs200ApplicationJSON3EnvsTarget2(filterProjectEnvs200ApplicationJSON3EnvsTarget2 FilterProjectEnvs200ApplicationJSON3EnvsTarget2) FilterProjectEnvs200ApplicationJSON3EnvsTarget {
	typ := FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeFilterProjectEnvs200ApplicationJSON3EnvsTarget2

	return FilterProjectEnvs200ApplicationJSON3EnvsTarget{
		FilterProjectEnvs200ApplicationJSON3EnvsTarget2: &filterProjectEnvs200ApplicationJSON3EnvsTarget2,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON3EnvsTarget) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 := []FilterProjectEnvs200ApplicationJSON3EnvsTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 = arrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1
		return nil
	}

	filterProjectEnvs200ApplicationJSON3EnvsTarget2 := new(FilterProjectEnvs200ApplicationJSON3EnvsTarget2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3EnvsTarget2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3EnvsTarget2 = filterProjectEnvs200ApplicationJSON3EnvsTarget2
		u.Type = FilterProjectEnvs200ApplicationJSON3EnvsTargetTypeFilterProjectEnvs200ApplicationJSON3EnvsTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON3EnvsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvs200ApplicationJSON3EnvsTarget1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3EnvsTarget2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3EnvsTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON3EnvsType string

const (
	FilterProjectEnvs200ApplicationJSON3EnvsTypeSecret    FilterProjectEnvs200ApplicationJSON3EnvsType = "secret"
	FilterProjectEnvs200ApplicationJSON3EnvsTypeSystem    FilterProjectEnvs200ApplicationJSON3EnvsType = "system"
	FilterProjectEnvs200ApplicationJSON3EnvsTypeEncrypted FilterProjectEnvs200ApplicationJSON3EnvsType = "encrypted"
	FilterProjectEnvs200ApplicationJSON3EnvsTypePlain     FilterProjectEnvs200ApplicationJSON3EnvsType = "plain"
	FilterProjectEnvs200ApplicationJSON3EnvsTypeSensitive FilterProjectEnvs200ApplicationJSON3EnvsType = "sensitive"
)

func (e FilterProjectEnvs200ApplicationJSON3EnvsType) ToPointer() *FilterProjectEnvs200ApplicationJSON3EnvsType {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON3EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvs200ApplicationJSON3EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON3EnvsType: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON3Envs struct {
	ConfigurationID *string                                              `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvs200ApplicationJSON3EnvsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                               `json:"createdAt,omitempty"`
	CreatedBy       *string                                              `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                           `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                         `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                         `json:"gitBranch,omitempty"`
	ID                *string                                         `json:"id,omitempty"`
	Key               *string                                         `json:"key,omitempty"`
	System            *bool                                           `json:"system,omitempty"`
	Target            *FilterProjectEnvs200ApplicationJSON3EnvsTarget `json:"target,omitempty"`
	Type              *FilterProjectEnvs200ApplicationJSON3EnvsType   `json:"type,omitempty"`
	UpdatedAt         *int64                                          `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                         `json:"updatedBy,omitempty"`
	Value             *string                                         `json:"value,omitempty"`
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetContentHint() *FilterProjectEnvs200ApplicationJSON3EnvsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetTarget() *FilterProjectEnvs200ApplicationJSON3EnvsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetType() *FilterProjectEnvs200ApplicationJSON3EnvsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON3Envs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// FilterProjectEnvs200ApplicationJSON3 - The list of environment variables for the given project
type FilterProjectEnvs200ApplicationJSON3 struct {
	Envs []FilterProjectEnvs200ApplicationJSON3Envs `json:"envs"`
}

func (o *FilterProjectEnvs200ApplicationJSON3) GetEnvs() []FilterProjectEnvs200ApplicationJSON3Envs {
	if o == nil {
		return []FilterProjectEnvs200ApplicationJSON3Envs{}
	}
	return o.Envs
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint12TypePostgresDatabase FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type = "postgres-database"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint12 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint12) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint12Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint11TypePostgresPassword FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type = "postgres-password"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint11 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint11) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint11Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint10TypePostgresHost FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type = "postgres-host"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint10 struct {
	StoreID string                                                    `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint10) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint10Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint9TypePostgresUser FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint9 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint9) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint8TypePostgresPrismaURL FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint8 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint8) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint7TypePostgresURLNonPooling FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint7 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint7) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint6TypePostgresURL FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint6 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint6) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint5TypeBlobReadWriteToken FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type = "blob-read-write-token"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint5 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint5) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint5Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint4TypeRedisRestAPIReadOnlyToken FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint4 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint4) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint4Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint3TypeRedisRestAPIToken FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint3 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint3) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint3Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint2TypeRedisRestAPIURL FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type = "redis-rest-api-url"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint2 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint2) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint2Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint1TypeRedisURL FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type = "redis-url"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint1 struct {
	StoreID string                                                   `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON2EnvsContentHint1) GetType() FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON2EnvsContentHint1Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON2EnvsContentHintType string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint1  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_1"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint2  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_2"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint3  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_3"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint4  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_4"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint5  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_5"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint6  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_6"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint7  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_7"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint8  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_8"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint9  FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_9"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint10 FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_10"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint11 FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_11"
	FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint12 FilterProjectEnvs200ApplicationJSON2EnvsContentHintType = "filterProjectEnvs_200ApplicationJSON_2_envs_contentHint_12"
)

type FilterProjectEnvs200ApplicationJSON2EnvsContentHint struct {
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint1  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint1
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint2  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint2
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint3  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint3
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint4  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint4
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint5  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint5
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint6  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint6
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint7  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint7
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint8  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint8
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint9  *FilterProjectEnvs200ApplicationJSON2EnvsContentHint9
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint10 *FilterProjectEnvs200ApplicationJSON2EnvsContentHint10
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint11 *FilterProjectEnvs200ApplicationJSON2EnvsContentHint11
	FilterProjectEnvs200ApplicationJSON2EnvsContentHint12 *FilterProjectEnvs200ApplicationJSON2EnvsContentHint12

	Type FilterProjectEnvs200ApplicationJSON2EnvsContentHintType
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint1(filterProjectEnvs200ApplicationJSON2EnvsContentHint1 FilterProjectEnvs200ApplicationJSON2EnvsContentHint1) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint1

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint1: &filterProjectEnvs200ApplicationJSON2EnvsContentHint1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint2(filterProjectEnvs200ApplicationJSON2EnvsContentHint2 FilterProjectEnvs200ApplicationJSON2EnvsContentHint2) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint2

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint2: &filterProjectEnvs200ApplicationJSON2EnvsContentHint2,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint3(filterProjectEnvs200ApplicationJSON2EnvsContentHint3 FilterProjectEnvs200ApplicationJSON2EnvsContentHint3) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint3

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint3: &filterProjectEnvs200ApplicationJSON2EnvsContentHint3,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint4(filterProjectEnvs200ApplicationJSON2EnvsContentHint4 FilterProjectEnvs200ApplicationJSON2EnvsContentHint4) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint4

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint4: &filterProjectEnvs200ApplicationJSON2EnvsContentHint4,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint5(filterProjectEnvs200ApplicationJSON2EnvsContentHint5 FilterProjectEnvs200ApplicationJSON2EnvsContentHint5) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint5

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint5: &filterProjectEnvs200ApplicationJSON2EnvsContentHint5,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint6(filterProjectEnvs200ApplicationJSON2EnvsContentHint6 FilterProjectEnvs200ApplicationJSON2EnvsContentHint6) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint6

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint6: &filterProjectEnvs200ApplicationJSON2EnvsContentHint6,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint7(filterProjectEnvs200ApplicationJSON2EnvsContentHint7 FilterProjectEnvs200ApplicationJSON2EnvsContentHint7) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint7

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint7: &filterProjectEnvs200ApplicationJSON2EnvsContentHint7,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint8(filterProjectEnvs200ApplicationJSON2EnvsContentHint8 FilterProjectEnvs200ApplicationJSON2EnvsContentHint8) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint8

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint8: &filterProjectEnvs200ApplicationJSON2EnvsContentHint8,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint9(filterProjectEnvs200ApplicationJSON2EnvsContentHint9 FilterProjectEnvs200ApplicationJSON2EnvsContentHint9) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint9

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint9: &filterProjectEnvs200ApplicationJSON2EnvsContentHint9,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint10(filterProjectEnvs200ApplicationJSON2EnvsContentHint10 FilterProjectEnvs200ApplicationJSON2EnvsContentHint10) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint10

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint10: &filterProjectEnvs200ApplicationJSON2EnvsContentHint10,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint11(filterProjectEnvs200ApplicationJSON2EnvsContentHint11 FilterProjectEnvs200ApplicationJSON2EnvsContentHint11) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint11

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint11: &filterProjectEnvs200ApplicationJSON2EnvsContentHint11,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsContentHintFilterProjectEnvs200ApplicationJSON2EnvsContentHint12(filterProjectEnvs200ApplicationJSON2EnvsContentHint12 FilterProjectEnvs200ApplicationJSON2EnvsContentHint12) FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint12

	return FilterProjectEnvs200ApplicationJSON2EnvsContentHint{
		FilterProjectEnvs200ApplicationJSON2EnvsContentHint12: &filterProjectEnvs200ApplicationJSON2EnvsContentHint12,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON2EnvsContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvs200ApplicationJSON2EnvsContentHint1 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint1)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint1, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint1 = filterProjectEnvs200ApplicationJSON2EnvsContentHint1
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint1
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint2 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint2 = filterProjectEnvs200ApplicationJSON2EnvsContentHint2
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint2
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint3 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint3)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint3, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint3 = filterProjectEnvs200ApplicationJSON2EnvsContentHint3
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint3
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint4 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint4)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint4, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint4 = filterProjectEnvs200ApplicationJSON2EnvsContentHint4
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint4
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint5 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint5)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint5, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint5 = filterProjectEnvs200ApplicationJSON2EnvsContentHint5
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint5
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint6 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint6)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint6, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint6 = filterProjectEnvs200ApplicationJSON2EnvsContentHint6
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint6
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint7 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint7)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint7, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint7 = filterProjectEnvs200ApplicationJSON2EnvsContentHint7
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint7
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint8 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint8)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint8, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint8 = filterProjectEnvs200ApplicationJSON2EnvsContentHint8
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint8
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint9 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint9)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint9, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint9 = filterProjectEnvs200ApplicationJSON2EnvsContentHint9
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint9
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint10 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint10)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint10, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint10 = filterProjectEnvs200ApplicationJSON2EnvsContentHint10
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint10
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint11 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint11)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint11, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint11 = filterProjectEnvs200ApplicationJSON2EnvsContentHint11
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint11
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsContentHint12 := new(FilterProjectEnvs200ApplicationJSON2EnvsContentHint12)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsContentHint12, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint12 = filterProjectEnvs200ApplicationJSON2EnvsContentHint12
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsContentHintTypeFilterProjectEnvs200ApplicationJSON2EnvsContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON2EnvsContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint2, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint3, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint4, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint5, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint6, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint7, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint8, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint9, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint10, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint11, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON2EnvsTarget2 string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsTarget2Production  FilterProjectEnvs200ApplicationJSON2EnvsTarget2 = "production"
	FilterProjectEnvs200ApplicationJSON2EnvsTarget2Preview     FilterProjectEnvs200ApplicationJSON2EnvsTarget2 = "preview"
	FilterProjectEnvs200ApplicationJSON2EnvsTarget2Development FilterProjectEnvs200ApplicationJSON2EnvsTarget2 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsTarget2) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsTarget2 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsTarget2: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsTarget1 string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsTarget1Production  FilterProjectEnvs200ApplicationJSON2EnvsTarget1 = "production"
	FilterProjectEnvs200ApplicationJSON2EnvsTarget1Preview     FilterProjectEnvs200ApplicationJSON2EnvsTarget1 = "preview"
	FilterProjectEnvs200ApplicationJSON2EnvsTarget1Development FilterProjectEnvs200ApplicationJSON2EnvsTarget1 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsTarget1) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsTarget1 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsTarget1: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2EnvsTargetType string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 FilterProjectEnvs200ApplicationJSON2EnvsTargetType = "arrayOffilterProjectEnvs_200ApplicationJSON_2_envs_target_1"
	FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeFilterProjectEnvs200ApplicationJSON2EnvsTarget2        FilterProjectEnvs200ApplicationJSON2EnvsTargetType = "filterProjectEnvs_200ApplicationJSON_2_envs_target_2"
)

type FilterProjectEnvs200ApplicationJSON2EnvsTarget struct {
	ArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 []FilterProjectEnvs200ApplicationJSON2EnvsTarget1
	FilterProjectEnvs200ApplicationJSON2EnvsTarget2        *FilterProjectEnvs200ApplicationJSON2EnvsTarget2

	Type FilterProjectEnvs200ApplicationJSON2EnvsTargetType
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsTargetArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1(arrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 []FilterProjectEnvs200ApplicationJSON2EnvsTarget1) FilterProjectEnvs200ApplicationJSON2EnvsTarget {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1

	return FilterProjectEnvs200ApplicationJSON2EnvsTarget{
		ArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1: arrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON2EnvsTargetFilterProjectEnvs200ApplicationJSON2EnvsTarget2(filterProjectEnvs200ApplicationJSON2EnvsTarget2 FilterProjectEnvs200ApplicationJSON2EnvsTarget2) FilterProjectEnvs200ApplicationJSON2EnvsTarget {
	typ := FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeFilterProjectEnvs200ApplicationJSON2EnvsTarget2

	return FilterProjectEnvs200ApplicationJSON2EnvsTarget{
		FilterProjectEnvs200ApplicationJSON2EnvsTarget2: &filterProjectEnvs200ApplicationJSON2EnvsTarget2,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON2EnvsTarget) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 := []FilterProjectEnvs200ApplicationJSON2EnvsTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 = arrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1
		return nil
	}

	filterProjectEnvs200ApplicationJSON2EnvsTarget2 := new(FilterProjectEnvs200ApplicationJSON2EnvsTarget2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2EnvsTarget2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2EnvsTarget2 = filterProjectEnvs200ApplicationJSON2EnvsTarget2
		u.Type = FilterProjectEnvs200ApplicationJSON2EnvsTargetTypeFilterProjectEnvs200ApplicationJSON2EnvsTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON2EnvsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvs200ApplicationJSON2EnvsTarget1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2EnvsTarget2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2EnvsTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON2EnvsType string

const (
	FilterProjectEnvs200ApplicationJSON2EnvsTypeSecret    FilterProjectEnvs200ApplicationJSON2EnvsType = "secret"
	FilterProjectEnvs200ApplicationJSON2EnvsTypeSystem    FilterProjectEnvs200ApplicationJSON2EnvsType = "system"
	FilterProjectEnvs200ApplicationJSON2EnvsTypeEncrypted FilterProjectEnvs200ApplicationJSON2EnvsType = "encrypted"
	FilterProjectEnvs200ApplicationJSON2EnvsTypePlain     FilterProjectEnvs200ApplicationJSON2EnvsType = "plain"
	FilterProjectEnvs200ApplicationJSON2EnvsTypeSensitive FilterProjectEnvs200ApplicationJSON2EnvsType = "sensitive"
)

func (e FilterProjectEnvs200ApplicationJSON2EnvsType) ToPointer() *FilterProjectEnvs200ApplicationJSON2EnvsType {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON2EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvs200ApplicationJSON2EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON2EnvsType: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON2Envs struct {
	ConfigurationID *string                                              `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvs200ApplicationJSON2EnvsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                               `json:"createdAt,omitempty"`
	CreatedBy       *string                                              `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                           `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                         `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                         `json:"gitBranch,omitempty"`
	ID                *string                                         `json:"id,omitempty"`
	Key               *string                                         `json:"key,omitempty"`
	System            *bool                                           `json:"system,omitempty"`
	Target            *FilterProjectEnvs200ApplicationJSON2EnvsTarget `json:"target,omitempty"`
	Type              *FilterProjectEnvs200ApplicationJSON2EnvsType   `json:"type,omitempty"`
	UpdatedAt         *int64                                          `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                         `json:"updatedBy,omitempty"`
	Value             *string                                         `json:"value,omitempty"`
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetContentHint() *FilterProjectEnvs200ApplicationJSON2EnvsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetTarget() *FilterProjectEnvs200ApplicationJSON2EnvsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetType() *FilterProjectEnvs200ApplicationJSON2EnvsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON2Envs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type FilterProjectEnvs200ApplicationJSON2 struct {
	Envs []FilterProjectEnvs200ApplicationJSON2Envs `json:"envs"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination `json:"pagination"`
}

func (o *FilterProjectEnvs200ApplicationJSON2) GetEnvs() []FilterProjectEnvs200ApplicationJSON2Envs {
	if o == nil {
		return []FilterProjectEnvs200ApplicationJSON2Envs{}
	}
	return o.Envs
}

func (o *FilterProjectEnvs200ApplicationJSON2) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

type FilterProjectEnvs200ApplicationJSON1ContentHint12Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint12TypePostgresDatabase FilterProjectEnvs200ApplicationJSON1ContentHint12Type = "postgres-database"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint12Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint12Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint12Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint12 struct {
	StoreID string                                                `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint12Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint12) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint12Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint12Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint11Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint11TypePostgresPassword FilterProjectEnvs200ApplicationJSON1ContentHint11Type = "postgres-password"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint11Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint11Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint11Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint11 struct {
	StoreID string                                                `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint11Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint11) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint11Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint11Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint10Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint10TypePostgresHost FilterProjectEnvs200ApplicationJSON1ContentHint10Type = "postgres-host"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint10Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint10Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint10Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint10 struct {
	StoreID string                                                `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint10Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint10) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint10Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint10Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint9Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint9TypePostgresUser FilterProjectEnvs200ApplicationJSON1ContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint9Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint9Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint9Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint9 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint9) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint9Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint8Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint8TypePostgresPrismaURL FilterProjectEnvs200ApplicationJSON1ContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint8Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint8Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint8Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint8 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint8) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint8Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint7Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint7TypePostgresURLNonPooling FilterProjectEnvs200ApplicationJSON1ContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint7Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint7Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint7Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint7 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint7) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint7Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint6Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint6TypePostgresURL FilterProjectEnvs200ApplicationJSON1ContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint6Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint6Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint6Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint6 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint6) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint6Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint5Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint5TypeBlobReadWriteToken FilterProjectEnvs200ApplicationJSON1ContentHint5Type = "blob-read-write-token"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint5Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint5Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint5Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint5 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint5Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint5) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint5Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint5Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint4Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint4TypeRedisRestAPIReadOnlyToken FilterProjectEnvs200ApplicationJSON1ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint4Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint4Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint4Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint4 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint4Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint4) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint4Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint4Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint3Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint3TypeRedisRestAPIToken FilterProjectEnvs200ApplicationJSON1ContentHint3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint3Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint3Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint3Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint3 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint3Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint3) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint3Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint3Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint2Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint2TypeRedisRestAPIURL FilterProjectEnvs200ApplicationJSON1ContentHint2Type = "redis-rest-api-url"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint2Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint2Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint2Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint2 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint2Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint2) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint2Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint2Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHint1Type string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHint1TypeRedisURL FilterProjectEnvs200ApplicationJSON1ContentHint1Type = "redis-url"
)

func (e FilterProjectEnvs200ApplicationJSON1ContentHint1Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1ContentHint1Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvs200ApplicationJSON1ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1ContentHint1Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1ContentHint1 struct {
	StoreID string                                               `json:"storeId"`
	Type    FilterProjectEnvs200ApplicationJSON1ContentHint1Type `json:"type"`
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs200ApplicationJSON1ContentHint1) GetType() FilterProjectEnvs200ApplicationJSON1ContentHint1Type {
	if o == nil {
		return FilterProjectEnvs200ApplicationJSON1ContentHint1Type("")
	}
	return o.Type
}

type FilterProjectEnvs200ApplicationJSON1ContentHintType string

const (
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint1  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_1"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint2  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_2"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint3  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_3"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint4  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_4"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint5  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_5"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint6  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_6"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint7  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_7"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint8  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_8"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint9  FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_9"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint10 FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_10"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint11 FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_11"
	FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint12 FilterProjectEnvs200ApplicationJSON1ContentHintType = "filterProjectEnvs_200ApplicationJSON_1_contentHint_12"
)

type FilterProjectEnvs200ApplicationJSON1ContentHint struct {
	FilterProjectEnvs200ApplicationJSON1ContentHint1  *FilterProjectEnvs200ApplicationJSON1ContentHint1
	FilterProjectEnvs200ApplicationJSON1ContentHint2  *FilterProjectEnvs200ApplicationJSON1ContentHint2
	FilterProjectEnvs200ApplicationJSON1ContentHint3  *FilterProjectEnvs200ApplicationJSON1ContentHint3
	FilterProjectEnvs200ApplicationJSON1ContentHint4  *FilterProjectEnvs200ApplicationJSON1ContentHint4
	FilterProjectEnvs200ApplicationJSON1ContentHint5  *FilterProjectEnvs200ApplicationJSON1ContentHint5
	FilterProjectEnvs200ApplicationJSON1ContentHint6  *FilterProjectEnvs200ApplicationJSON1ContentHint6
	FilterProjectEnvs200ApplicationJSON1ContentHint7  *FilterProjectEnvs200ApplicationJSON1ContentHint7
	FilterProjectEnvs200ApplicationJSON1ContentHint8  *FilterProjectEnvs200ApplicationJSON1ContentHint8
	FilterProjectEnvs200ApplicationJSON1ContentHint9  *FilterProjectEnvs200ApplicationJSON1ContentHint9
	FilterProjectEnvs200ApplicationJSON1ContentHint10 *FilterProjectEnvs200ApplicationJSON1ContentHint10
	FilterProjectEnvs200ApplicationJSON1ContentHint11 *FilterProjectEnvs200ApplicationJSON1ContentHint11
	FilterProjectEnvs200ApplicationJSON1ContentHint12 *FilterProjectEnvs200ApplicationJSON1ContentHint12

	Type FilterProjectEnvs200ApplicationJSON1ContentHintType
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint1(filterProjectEnvs200ApplicationJSON1ContentHint1 FilterProjectEnvs200ApplicationJSON1ContentHint1) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint1

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint1: &filterProjectEnvs200ApplicationJSON1ContentHint1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint2(filterProjectEnvs200ApplicationJSON1ContentHint2 FilterProjectEnvs200ApplicationJSON1ContentHint2) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint2

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint2: &filterProjectEnvs200ApplicationJSON1ContentHint2,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint3(filterProjectEnvs200ApplicationJSON1ContentHint3 FilterProjectEnvs200ApplicationJSON1ContentHint3) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint3

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint3: &filterProjectEnvs200ApplicationJSON1ContentHint3,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint4(filterProjectEnvs200ApplicationJSON1ContentHint4 FilterProjectEnvs200ApplicationJSON1ContentHint4) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint4

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint4: &filterProjectEnvs200ApplicationJSON1ContentHint4,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint5(filterProjectEnvs200ApplicationJSON1ContentHint5 FilterProjectEnvs200ApplicationJSON1ContentHint5) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint5

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint5: &filterProjectEnvs200ApplicationJSON1ContentHint5,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint6(filterProjectEnvs200ApplicationJSON1ContentHint6 FilterProjectEnvs200ApplicationJSON1ContentHint6) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint6

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint6: &filterProjectEnvs200ApplicationJSON1ContentHint6,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint7(filterProjectEnvs200ApplicationJSON1ContentHint7 FilterProjectEnvs200ApplicationJSON1ContentHint7) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint7

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint7: &filterProjectEnvs200ApplicationJSON1ContentHint7,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint8(filterProjectEnvs200ApplicationJSON1ContentHint8 FilterProjectEnvs200ApplicationJSON1ContentHint8) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint8

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint8: &filterProjectEnvs200ApplicationJSON1ContentHint8,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint9(filterProjectEnvs200ApplicationJSON1ContentHint9 FilterProjectEnvs200ApplicationJSON1ContentHint9) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint9

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint9: &filterProjectEnvs200ApplicationJSON1ContentHint9,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint10(filterProjectEnvs200ApplicationJSON1ContentHint10 FilterProjectEnvs200ApplicationJSON1ContentHint10) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint10

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint10: &filterProjectEnvs200ApplicationJSON1ContentHint10,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint11(filterProjectEnvs200ApplicationJSON1ContentHint11 FilterProjectEnvs200ApplicationJSON1ContentHint11) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint11

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint11: &filterProjectEnvs200ApplicationJSON1ContentHint11,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1ContentHintFilterProjectEnvs200ApplicationJSON1ContentHint12(filterProjectEnvs200ApplicationJSON1ContentHint12 FilterProjectEnvs200ApplicationJSON1ContentHint12) FilterProjectEnvs200ApplicationJSON1ContentHint {
	typ := FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint12

	return FilterProjectEnvs200ApplicationJSON1ContentHint{
		FilterProjectEnvs200ApplicationJSON1ContentHint12: &filterProjectEnvs200ApplicationJSON1ContentHint12,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON1ContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvs200ApplicationJSON1ContentHint1 := new(FilterProjectEnvs200ApplicationJSON1ContentHint1)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint1, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint1 = filterProjectEnvs200ApplicationJSON1ContentHint1
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint1
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint2 := new(FilterProjectEnvs200ApplicationJSON1ContentHint2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint2 = filterProjectEnvs200ApplicationJSON1ContentHint2
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint2
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint3 := new(FilterProjectEnvs200ApplicationJSON1ContentHint3)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint3, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint3 = filterProjectEnvs200ApplicationJSON1ContentHint3
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint3
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint4 := new(FilterProjectEnvs200ApplicationJSON1ContentHint4)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint4, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint4 = filterProjectEnvs200ApplicationJSON1ContentHint4
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint4
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint5 := new(FilterProjectEnvs200ApplicationJSON1ContentHint5)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint5, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint5 = filterProjectEnvs200ApplicationJSON1ContentHint5
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint5
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint6 := new(FilterProjectEnvs200ApplicationJSON1ContentHint6)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint6, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint6 = filterProjectEnvs200ApplicationJSON1ContentHint6
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint6
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint7 := new(FilterProjectEnvs200ApplicationJSON1ContentHint7)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint7, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint7 = filterProjectEnvs200ApplicationJSON1ContentHint7
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint7
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint8 := new(FilterProjectEnvs200ApplicationJSON1ContentHint8)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint8, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint8 = filterProjectEnvs200ApplicationJSON1ContentHint8
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint8
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint9 := new(FilterProjectEnvs200ApplicationJSON1ContentHint9)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint9, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint9 = filterProjectEnvs200ApplicationJSON1ContentHint9
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint9
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint10 := new(FilterProjectEnvs200ApplicationJSON1ContentHint10)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint10, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint10 = filterProjectEnvs200ApplicationJSON1ContentHint10
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint10
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint11 := new(FilterProjectEnvs200ApplicationJSON1ContentHint11)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint11, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint11 = filterProjectEnvs200ApplicationJSON1ContentHint11
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint11
		return nil
	}

	filterProjectEnvs200ApplicationJSON1ContentHint12 := new(FilterProjectEnvs200ApplicationJSON1ContentHint12)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1ContentHint12, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1ContentHint12 = filterProjectEnvs200ApplicationJSON1ContentHint12
		u.Type = FilterProjectEnvs200ApplicationJSON1ContentHintTypeFilterProjectEnvs200ApplicationJSON1ContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON1ContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvs200ApplicationJSON1ContentHint1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint2, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint3, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint4, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint5, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint6, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint7, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint8, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint9, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint10, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint11, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1ContentHint12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1ContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON1Target2 string

const (
	FilterProjectEnvs200ApplicationJSON1Target2Production  FilterProjectEnvs200ApplicationJSON1Target2 = "production"
	FilterProjectEnvs200ApplicationJSON1Target2Preview     FilterProjectEnvs200ApplicationJSON1Target2 = "preview"
	FilterProjectEnvs200ApplicationJSON1Target2Development FilterProjectEnvs200ApplicationJSON1Target2 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON1Target2) ToPointer() *FilterProjectEnvs200ApplicationJSON1Target2 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON1Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1Target2: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1Target1 string

const (
	FilterProjectEnvs200ApplicationJSON1Target1Production  FilterProjectEnvs200ApplicationJSON1Target1 = "production"
	FilterProjectEnvs200ApplicationJSON1Target1Preview     FilterProjectEnvs200ApplicationJSON1Target1 = "preview"
	FilterProjectEnvs200ApplicationJSON1Target1Development FilterProjectEnvs200ApplicationJSON1Target1 = "development"
)

func (e FilterProjectEnvs200ApplicationJSON1Target1) ToPointer() *FilterProjectEnvs200ApplicationJSON1Target1 {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvs200ApplicationJSON1Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1Target1: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1TargetType string

const (
	FilterProjectEnvs200ApplicationJSON1TargetTypeArrayOffilterProjectEnvs200ApplicationJSON1Target1 FilterProjectEnvs200ApplicationJSON1TargetType = "arrayOffilterProjectEnvs_200ApplicationJSON_1_target_1"
	FilterProjectEnvs200ApplicationJSON1TargetTypeFilterProjectEnvs200ApplicationJSON1Target2        FilterProjectEnvs200ApplicationJSON1TargetType = "filterProjectEnvs_200ApplicationJSON_1_target_2"
)

type FilterProjectEnvs200ApplicationJSON1Target struct {
	ArrayOffilterProjectEnvs200ApplicationJSON1Target1 []FilterProjectEnvs200ApplicationJSON1Target1
	FilterProjectEnvs200ApplicationJSON1Target2        *FilterProjectEnvs200ApplicationJSON1Target2

	Type FilterProjectEnvs200ApplicationJSON1TargetType
}

func CreateFilterProjectEnvs200ApplicationJSON1TargetArrayOffilterProjectEnvs200ApplicationJSON1Target1(arrayOffilterProjectEnvs200ApplicationJSON1Target1 []FilterProjectEnvs200ApplicationJSON1Target1) FilterProjectEnvs200ApplicationJSON1Target {
	typ := FilterProjectEnvs200ApplicationJSON1TargetTypeArrayOffilterProjectEnvs200ApplicationJSON1Target1

	return FilterProjectEnvs200ApplicationJSON1Target{
		ArrayOffilterProjectEnvs200ApplicationJSON1Target1: arrayOffilterProjectEnvs200ApplicationJSON1Target1,
		Type: typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSON1TargetFilterProjectEnvs200ApplicationJSON1Target2(filterProjectEnvs200ApplicationJSON1Target2 FilterProjectEnvs200ApplicationJSON1Target2) FilterProjectEnvs200ApplicationJSON1Target {
	typ := FilterProjectEnvs200ApplicationJSON1TargetTypeFilterProjectEnvs200ApplicationJSON1Target2

	return FilterProjectEnvs200ApplicationJSON1Target{
		FilterProjectEnvs200ApplicationJSON1Target2: &filterProjectEnvs200ApplicationJSON1Target2,
		Type: typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON1Target) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvs200ApplicationJSON1Target1 := []FilterProjectEnvs200ApplicationJSON1Target1{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvs200ApplicationJSON1Target1, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvs200ApplicationJSON1Target1 = arrayOffilterProjectEnvs200ApplicationJSON1Target1
		u.Type = FilterProjectEnvs200ApplicationJSON1TargetTypeArrayOffilterProjectEnvs200ApplicationJSON1Target1
		return nil
	}

	filterProjectEnvs200ApplicationJSON1Target2 := new(FilterProjectEnvs200ApplicationJSON1Target2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1Target2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1Target2 = filterProjectEnvs200ApplicationJSON1Target2
		u.Type = FilterProjectEnvs200ApplicationJSON1TargetTypeFilterProjectEnvs200ApplicationJSON1Target2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON1Target) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvs200ApplicationJSON1Target1 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvs200ApplicationJSON1Target1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON1Target2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1Target2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvs200ApplicationJSON1Type string

const (
	FilterProjectEnvs200ApplicationJSON1TypeSecret    FilterProjectEnvs200ApplicationJSON1Type = "secret"
	FilterProjectEnvs200ApplicationJSON1TypeSystem    FilterProjectEnvs200ApplicationJSON1Type = "system"
	FilterProjectEnvs200ApplicationJSON1TypeEncrypted FilterProjectEnvs200ApplicationJSON1Type = "encrypted"
	FilterProjectEnvs200ApplicationJSON1TypePlain     FilterProjectEnvs200ApplicationJSON1Type = "plain"
	FilterProjectEnvs200ApplicationJSON1TypeSensitive FilterProjectEnvs200ApplicationJSON1Type = "sensitive"
)

func (e FilterProjectEnvs200ApplicationJSON1Type) ToPointer() *FilterProjectEnvs200ApplicationJSON1Type {
	return &e
}

func (e *FilterProjectEnvs200ApplicationJSON1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvs200ApplicationJSON1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvs200ApplicationJSON1Type: %v", v)
	}
}

type FilterProjectEnvs200ApplicationJSON1 struct {
	ConfigurationID *string                                          `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvs200ApplicationJSON1ContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                           `json:"createdAt,omitempty"`
	CreatedBy       *string                                          `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                       `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                     `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                     `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                     `json:"gitBranch,omitempty"`
	ID                *string                                     `json:"id,omitempty"`
	Key               *string                                     `json:"key,omitempty"`
	System            *bool                                       `json:"system,omitempty"`
	Target            *FilterProjectEnvs200ApplicationJSON1Target `json:"target,omitempty"`
	Type              *FilterProjectEnvs200ApplicationJSON1Type   `json:"type,omitempty"`
	UpdatedAt         *int64                                      `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                     `json:"updatedBy,omitempty"`
	Value             *string                                     `json:"value,omitempty"`
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetContentHint() *FilterProjectEnvs200ApplicationJSON1ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetTarget() *FilterProjectEnvs200ApplicationJSON1Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetType() *FilterProjectEnvs200ApplicationJSON1Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvs200ApplicationJSON1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type FilterProjectEnvs200ApplicationJSONType string

const (
	FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON1 FilterProjectEnvs200ApplicationJSONType = "filterProjectEnvs_200ApplicationJSON_1"
	FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON2 FilterProjectEnvs200ApplicationJSONType = "filterProjectEnvs_200ApplicationJSON_2"
	FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON3 FilterProjectEnvs200ApplicationJSONType = "filterProjectEnvs_200ApplicationJSON_3"
)

type FilterProjectEnvs200ApplicationJSON struct {
	FilterProjectEnvs200ApplicationJSON1 *FilterProjectEnvs200ApplicationJSON1
	FilterProjectEnvs200ApplicationJSON2 *FilterProjectEnvs200ApplicationJSON2
	FilterProjectEnvs200ApplicationJSON3 *FilterProjectEnvs200ApplicationJSON3

	Type FilterProjectEnvs200ApplicationJSONType
}

func CreateFilterProjectEnvs200ApplicationJSONFilterProjectEnvs200ApplicationJSON1(filterProjectEnvs200ApplicationJSON1 FilterProjectEnvs200ApplicationJSON1) FilterProjectEnvs200ApplicationJSON {
	typ := FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON1

	return FilterProjectEnvs200ApplicationJSON{
		FilterProjectEnvs200ApplicationJSON1: &filterProjectEnvs200ApplicationJSON1,
		Type:                                 typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSONFilterProjectEnvs200ApplicationJSON2(filterProjectEnvs200ApplicationJSON2 FilterProjectEnvs200ApplicationJSON2) FilterProjectEnvs200ApplicationJSON {
	typ := FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON2

	return FilterProjectEnvs200ApplicationJSON{
		FilterProjectEnvs200ApplicationJSON2: &filterProjectEnvs200ApplicationJSON2,
		Type:                                 typ,
	}
}

func CreateFilterProjectEnvs200ApplicationJSONFilterProjectEnvs200ApplicationJSON3(filterProjectEnvs200ApplicationJSON3 FilterProjectEnvs200ApplicationJSON3) FilterProjectEnvs200ApplicationJSON {
	typ := FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON3

	return FilterProjectEnvs200ApplicationJSON{
		FilterProjectEnvs200ApplicationJSON3: &filterProjectEnvs200ApplicationJSON3,
		Type:                                 typ,
	}
}

func (u *FilterProjectEnvs200ApplicationJSON) UnmarshalJSON(data []byte) error {

	filterProjectEnvs200ApplicationJSON3 := new(FilterProjectEnvs200ApplicationJSON3)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON3, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON3 = filterProjectEnvs200ApplicationJSON3
		u.Type = FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON3
		return nil
	}

	filterProjectEnvs200ApplicationJSON2 := new(FilterProjectEnvs200ApplicationJSON2)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON2, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON2 = filterProjectEnvs200ApplicationJSON2
		u.Type = FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON2
		return nil
	}

	filterProjectEnvs200ApplicationJSON1 := new(FilterProjectEnvs200ApplicationJSON1)
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs200ApplicationJSON1, "", true, true); err == nil {
		u.FilterProjectEnvs200ApplicationJSON1 = filterProjectEnvs200ApplicationJSON1
		u.Type = FilterProjectEnvs200ApplicationJSONTypeFilterProjectEnvs200ApplicationJSON1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvs200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvs200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON1, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON2, "", true)
	}

	if u.FilterProjectEnvs200ApplicationJSON3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs200ApplicationJSON3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of environment variables for the given project
	FilterProjectEnvs200ApplicationJSONOneOf *FilterProjectEnvs200ApplicationJSON
}

func (o *FilterProjectEnvsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FilterProjectEnvsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FilterProjectEnvsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *FilterProjectEnvsResponse) GetFilterProjectEnvs200ApplicationJSONOneOf() *FilterProjectEnvs200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.FilterProjectEnvs200ApplicationJSONOneOf
}
