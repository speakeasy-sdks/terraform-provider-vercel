// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/utils"
)

type RemoveProjectEnvRequest struct {
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *RemoveProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RemoveProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *RemoveProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type RemoveProjectEnv200ApplicationJSON3ContentHint12Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint12TypePostgresDatabase RemoveProjectEnv200ApplicationJSON3ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint12Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint12Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint12 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint12) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint12Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint11Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint11TypePostgresPassword RemoveProjectEnv200ApplicationJSON3ContentHint11Type = "postgres-password"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint11Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint11Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint11Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint11 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint11Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint11) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint11Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint11Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint10Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint10TypePostgresHost RemoveProjectEnv200ApplicationJSON3ContentHint10Type = "postgres-host"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint10Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint10Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint10Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint10 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint10Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint10) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint10Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint10Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint9Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint9TypePostgresUser RemoveProjectEnv200ApplicationJSON3ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint9Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint9Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint9 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint9) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint9Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint8Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint8TypePostgresPrismaURL RemoveProjectEnv200ApplicationJSON3ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint8Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint8Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint8 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint8) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint8Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint7Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint7TypePostgresURLNonPooling RemoveProjectEnv200ApplicationJSON3ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint7Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint7Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint7 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint7) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint7Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint6Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint6TypePostgresURL RemoveProjectEnv200ApplicationJSON3ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint6Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint6Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint6 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint6) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint6Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint5Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint5TypeBlobReadWriteToken RemoveProjectEnv200ApplicationJSON3ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint5Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint5Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint5 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint5) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint5Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint4Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnv200ApplicationJSON3ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint4Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint4Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint4 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint4) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint4Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint3Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint3TypeRedisRestAPIToken RemoveProjectEnv200ApplicationJSON3ContentHint3Type = "redis-rest-api-token"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint3Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint3Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint3Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint3 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint3Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint3) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint3Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint3Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint2Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint2TypeRedisRestAPIURL RemoveProjectEnv200ApplicationJSON3ContentHint2Type = "redis-rest-api-url"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint2Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint2Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint2Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint2 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint2Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint2) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint2Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint2Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHint1Type string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHint1TypeRedisURL RemoveProjectEnv200ApplicationJSON3ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnv200ApplicationJSON3ContentHint1Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3ContentHint1Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnv200ApplicationJSON3ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3ContentHint1 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON3ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON3ContentHint1) GetType() RemoveProjectEnv200ApplicationJSON3ContentHint1Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON3ContentHintType string

const (
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint1  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_1"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint2  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_2"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint3  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_3"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint4  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_4"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint5  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_5"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint6  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_6"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint7  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_7"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint8  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_8"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint9  RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_9"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint10 RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_10"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint11 RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_11"
	RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint12 RemoveProjectEnv200ApplicationJSON3ContentHintType = "removeProjectEnv_200ApplicationJSON_3_contentHint_12"
)

type RemoveProjectEnv200ApplicationJSON3ContentHint struct {
	RemoveProjectEnv200ApplicationJSON3ContentHint1  *RemoveProjectEnv200ApplicationJSON3ContentHint1
	RemoveProjectEnv200ApplicationJSON3ContentHint2  *RemoveProjectEnv200ApplicationJSON3ContentHint2
	RemoveProjectEnv200ApplicationJSON3ContentHint3  *RemoveProjectEnv200ApplicationJSON3ContentHint3
	RemoveProjectEnv200ApplicationJSON3ContentHint4  *RemoveProjectEnv200ApplicationJSON3ContentHint4
	RemoveProjectEnv200ApplicationJSON3ContentHint5  *RemoveProjectEnv200ApplicationJSON3ContentHint5
	RemoveProjectEnv200ApplicationJSON3ContentHint6  *RemoveProjectEnv200ApplicationJSON3ContentHint6
	RemoveProjectEnv200ApplicationJSON3ContentHint7  *RemoveProjectEnv200ApplicationJSON3ContentHint7
	RemoveProjectEnv200ApplicationJSON3ContentHint8  *RemoveProjectEnv200ApplicationJSON3ContentHint8
	RemoveProjectEnv200ApplicationJSON3ContentHint9  *RemoveProjectEnv200ApplicationJSON3ContentHint9
	RemoveProjectEnv200ApplicationJSON3ContentHint10 *RemoveProjectEnv200ApplicationJSON3ContentHint10
	RemoveProjectEnv200ApplicationJSON3ContentHint11 *RemoveProjectEnv200ApplicationJSON3ContentHint11
	RemoveProjectEnv200ApplicationJSON3ContentHint12 *RemoveProjectEnv200ApplicationJSON3ContentHint12

	Type RemoveProjectEnv200ApplicationJSON3ContentHintType
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint1(removeProjectEnv200ApplicationJSON3ContentHint1 RemoveProjectEnv200ApplicationJSON3ContentHint1) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint1

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint1: &removeProjectEnv200ApplicationJSON3ContentHint1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint2(removeProjectEnv200ApplicationJSON3ContentHint2 RemoveProjectEnv200ApplicationJSON3ContentHint2) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint2

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint2: &removeProjectEnv200ApplicationJSON3ContentHint2,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint3(removeProjectEnv200ApplicationJSON3ContentHint3 RemoveProjectEnv200ApplicationJSON3ContentHint3) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint3

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint3: &removeProjectEnv200ApplicationJSON3ContentHint3,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint4(removeProjectEnv200ApplicationJSON3ContentHint4 RemoveProjectEnv200ApplicationJSON3ContentHint4) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint4

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint4: &removeProjectEnv200ApplicationJSON3ContentHint4,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint5(removeProjectEnv200ApplicationJSON3ContentHint5 RemoveProjectEnv200ApplicationJSON3ContentHint5) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint5

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint5: &removeProjectEnv200ApplicationJSON3ContentHint5,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint6(removeProjectEnv200ApplicationJSON3ContentHint6 RemoveProjectEnv200ApplicationJSON3ContentHint6) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint6

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint6: &removeProjectEnv200ApplicationJSON3ContentHint6,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint7(removeProjectEnv200ApplicationJSON3ContentHint7 RemoveProjectEnv200ApplicationJSON3ContentHint7) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint7

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint7: &removeProjectEnv200ApplicationJSON3ContentHint7,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint8(removeProjectEnv200ApplicationJSON3ContentHint8 RemoveProjectEnv200ApplicationJSON3ContentHint8) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint8

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint8: &removeProjectEnv200ApplicationJSON3ContentHint8,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint9(removeProjectEnv200ApplicationJSON3ContentHint9 RemoveProjectEnv200ApplicationJSON3ContentHint9) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint9

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint9: &removeProjectEnv200ApplicationJSON3ContentHint9,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint10(removeProjectEnv200ApplicationJSON3ContentHint10 RemoveProjectEnv200ApplicationJSON3ContentHint10) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint10

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint10: &removeProjectEnv200ApplicationJSON3ContentHint10,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint11(removeProjectEnv200ApplicationJSON3ContentHint11 RemoveProjectEnv200ApplicationJSON3ContentHint11) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint11

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint11: &removeProjectEnv200ApplicationJSON3ContentHint11,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3ContentHintRemoveProjectEnv200ApplicationJSON3ContentHint12(removeProjectEnv200ApplicationJSON3ContentHint12 RemoveProjectEnv200ApplicationJSON3ContentHint12) RemoveProjectEnv200ApplicationJSON3ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint12

	return RemoveProjectEnv200ApplicationJSON3ContentHint{
		RemoveProjectEnv200ApplicationJSON3ContentHint12: &removeProjectEnv200ApplicationJSON3ContentHint12,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON3ContentHint) UnmarshalJSON(data []byte) error {

	removeProjectEnv200ApplicationJSON3ContentHint1 := new(RemoveProjectEnv200ApplicationJSON3ContentHint1)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint1, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint1 = removeProjectEnv200ApplicationJSON3ContentHint1
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint1
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint2 := new(RemoveProjectEnv200ApplicationJSON3ContentHint2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint2 = removeProjectEnv200ApplicationJSON3ContentHint2
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint2
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint3 := new(RemoveProjectEnv200ApplicationJSON3ContentHint3)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint3, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint3 = removeProjectEnv200ApplicationJSON3ContentHint3
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint3
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint4 := new(RemoveProjectEnv200ApplicationJSON3ContentHint4)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint4, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint4 = removeProjectEnv200ApplicationJSON3ContentHint4
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint4
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint5 := new(RemoveProjectEnv200ApplicationJSON3ContentHint5)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint5, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint5 = removeProjectEnv200ApplicationJSON3ContentHint5
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint5
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint6 := new(RemoveProjectEnv200ApplicationJSON3ContentHint6)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint6, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint6 = removeProjectEnv200ApplicationJSON3ContentHint6
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint6
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint7 := new(RemoveProjectEnv200ApplicationJSON3ContentHint7)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint7, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint7 = removeProjectEnv200ApplicationJSON3ContentHint7
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint7
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint8 := new(RemoveProjectEnv200ApplicationJSON3ContentHint8)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint8, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint8 = removeProjectEnv200ApplicationJSON3ContentHint8
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint8
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint9 := new(RemoveProjectEnv200ApplicationJSON3ContentHint9)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint9, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint9 = removeProjectEnv200ApplicationJSON3ContentHint9
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint9
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint10 := new(RemoveProjectEnv200ApplicationJSON3ContentHint10)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint10, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint10 = removeProjectEnv200ApplicationJSON3ContentHint10
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint10
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint11 := new(RemoveProjectEnv200ApplicationJSON3ContentHint11)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint11, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint11 = removeProjectEnv200ApplicationJSON3ContentHint11
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint11
		return nil
	}

	removeProjectEnv200ApplicationJSON3ContentHint12 := new(RemoveProjectEnv200ApplicationJSON3ContentHint12)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3ContentHint12, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3ContentHint12 = removeProjectEnv200ApplicationJSON3ContentHint12
		u.Type = RemoveProjectEnv200ApplicationJSON3ContentHintTypeRemoveProjectEnv200ApplicationJSON3ContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON3ContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnv200ApplicationJSON3ContentHint1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint2, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint3, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint4, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint5, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint6, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint7, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint8, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint9, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint10, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint11, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3ContentHint12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3ContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON3Target2 string

const (
	RemoveProjectEnv200ApplicationJSON3Target2Production  RemoveProjectEnv200ApplicationJSON3Target2 = "production"
	RemoveProjectEnv200ApplicationJSON3Target2Preview     RemoveProjectEnv200ApplicationJSON3Target2 = "preview"
	RemoveProjectEnv200ApplicationJSON3Target2Development RemoveProjectEnv200ApplicationJSON3Target2 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON3Target2) ToPointer() *RemoveProjectEnv200ApplicationJSON3Target2 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON3Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3Target2: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3Target1 string

const (
	RemoveProjectEnv200ApplicationJSON3Target1Production  RemoveProjectEnv200ApplicationJSON3Target1 = "production"
	RemoveProjectEnv200ApplicationJSON3Target1Preview     RemoveProjectEnv200ApplicationJSON3Target1 = "preview"
	RemoveProjectEnv200ApplicationJSON3Target1Development RemoveProjectEnv200ApplicationJSON3Target1 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON3Target1) ToPointer() *RemoveProjectEnv200ApplicationJSON3Target1 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON3Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3Target1: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3TargetType string

const (
	RemoveProjectEnv200ApplicationJSON3TargetTypeArrayOfremoveProjectEnv200ApplicationJSON3Target1 RemoveProjectEnv200ApplicationJSON3TargetType = "arrayOfremoveProjectEnv_200ApplicationJSON_3_target_1"
	RemoveProjectEnv200ApplicationJSON3TargetTypeRemoveProjectEnv200ApplicationJSON3Target2        RemoveProjectEnv200ApplicationJSON3TargetType = "removeProjectEnv_200ApplicationJSON_3_target_2"
)

type RemoveProjectEnv200ApplicationJSON3Target struct {
	ArrayOfremoveProjectEnv200ApplicationJSON3Target1 []RemoveProjectEnv200ApplicationJSON3Target1
	RemoveProjectEnv200ApplicationJSON3Target2        *RemoveProjectEnv200ApplicationJSON3Target2

	Type RemoveProjectEnv200ApplicationJSON3TargetType
}

func CreateRemoveProjectEnv200ApplicationJSON3TargetArrayOfremoveProjectEnv200ApplicationJSON3Target1(arrayOfremoveProjectEnv200ApplicationJSON3Target1 []RemoveProjectEnv200ApplicationJSON3Target1) RemoveProjectEnv200ApplicationJSON3Target {
	typ := RemoveProjectEnv200ApplicationJSON3TargetTypeArrayOfremoveProjectEnv200ApplicationJSON3Target1

	return RemoveProjectEnv200ApplicationJSON3Target{
		ArrayOfremoveProjectEnv200ApplicationJSON3Target1: arrayOfremoveProjectEnv200ApplicationJSON3Target1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON3TargetRemoveProjectEnv200ApplicationJSON3Target2(removeProjectEnv200ApplicationJSON3Target2 RemoveProjectEnv200ApplicationJSON3Target2) RemoveProjectEnv200ApplicationJSON3Target {
	typ := RemoveProjectEnv200ApplicationJSON3TargetTypeRemoveProjectEnv200ApplicationJSON3Target2

	return RemoveProjectEnv200ApplicationJSON3Target{
		RemoveProjectEnv200ApplicationJSON3Target2: &removeProjectEnv200ApplicationJSON3Target2,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON3Target) UnmarshalJSON(data []byte) error {

	arrayOfremoveProjectEnv200ApplicationJSON3Target1 := []RemoveProjectEnv200ApplicationJSON3Target1{}
	if err := utils.UnmarshalJSON(data, &arrayOfremoveProjectEnv200ApplicationJSON3Target1, "", true, true); err == nil {
		u.ArrayOfremoveProjectEnv200ApplicationJSON3Target1 = arrayOfremoveProjectEnv200ApplicationJSON3Target1
		u.Type = RemoveProjectEnv200ApplicationJSON3TargetTypeArrayOfremoveProjectEnv200ApplicationJSON3Target1
		return nil
	}

	removeProjectEnv200ApplicationJSON3Target2 := new(RemoveProjectEnv200ApplicationJSON3Target2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3Target2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3Target2 = removeProjectEnv200ApplicationJSON3Target2
		u.Type = RemoveProjectEnv200ApplicationJSON3TargetTypeRemoveProjectEnv200ApplicationJSON3Target2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON3Target) MarshalJSON() ([]byte, error) {
	if u.ArrayOfremoveProjectEnv200ApplicationJSON3Target1 != nil {
		return utils.MarshalJSON(u.ArrayOfremoveProjectEnv200ApplicationJSON3Target1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3Target2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3Target2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON3Type string

const (
	RemoveProjectEnv200ApplicationJSON3TypeSystem    RemoveProjectEnv200ApplicationJSON3Type = "system"
	RemoveProjectEnv200ApplicationJSON3TypeEncrypted RemoveProjectEnv200ApplicationJSON3Type = "encrypted"
	RemoveProjectEnv200ApplicationJSON3TypePlain     RemoveProjectEnv200ApplicationJSON3Type = "plain"
	RemoveProjectEnv200ApplicationJSON3TypeSensitive RemoveProjectEnv200ApplicationJSON3Type = "sensitive"
	RemoveProjectEnv200ApplicationJSON3TypeSecret    RemoveProjectEnv200ApplicationJSON3Type = "secret"
)

func (e RemoveProjectEnv200ApplicationJSON3Type) ToPointer() *RemoveProjectEnv200ApplicationJSON3Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnv200ApplicationJSON3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON3Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON3 struct {
	ConfigurationID *string                                         `json:"configurationId,omitempty"`
	ContentHint     *RemoveProjectEnv200ApplicationJSON3ContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                          `json:"createdAt,omitempty"`
	CreatedBy       *string                                         `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                      `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                    `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                    `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                    `json:"gitBranch,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	Key               string                                     `json:"key"`
	Target            *RemoveProjectEnv200ApplicationJSON3Target `json:"target,omitempty"`
	Type              RemoveProjectEnv200ApplicationJSON3Type    `json:"type"`
	UpdatedAt         *int64                                     `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                    `json:"updatedBy,omitempty"`
	Value             string                                     `json:"value"`
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetContentHint() *RemoveProjectEnv200ApplicationJSON3ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetTarget() *RemoveProjectEnv200ApplicationJSON3Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetType() RemoveProjectEnv200ApplicationJSON3Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON3Type("")
	}
	return o.Type
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnv200ApplicationJSON2ContentHint12Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint12TypePostgresDatabase RemoveProjectEnv200ApplicationJSON2ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint12Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint12Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint12 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint12) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint12Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint11Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint11TypePostgresPassword RemoveProjectEnv200ApplicationJSON2ContentHint11Type = "postgres-password"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint11Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint11Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint11Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint11 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint11Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint11) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint11Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint11Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint10Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint10TypePostgresHost RemoveProjectEnv200ApplicationJSON2ContentHint10Type = "postgres-host"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint10Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint10Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint10Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint10 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint10Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint10) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint10Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint10Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint9Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint9TypePostgresUser RemoveProjectEnv200ApplicationJSON2ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint9Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint9Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint9 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint9) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint9Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint8Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint8TypePostgresPrismaURL RemoveProjectEnv200ApplicationJSON2ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint8Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint8Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint8 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint8) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint8Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint7Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint7TypePostgresURLNonPooling RemoveProjectEnv200ApplicationJSON2ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint7Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint7Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint7 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint7) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint7Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint6Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint6TypePostgresURL RemoveProjectEnv200ApplicationJSON2ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint6Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint6Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint6 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint6) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint6Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint5Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint5TypeBlobReadWriteToken RemoveProjectEnv200ApplicationJSON2ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint5Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint5Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint5 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint5) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint5Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint4Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnv200ApplicationJSON2ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint4Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint4Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint4 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint4) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint4Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint3Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint3TypeRedisRestAPIToken RemoveProjectEnv200ApplicationJSON2ContentHint3Type = "redis-rest-api-token"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint3Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint3Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint3Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint3 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint3Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint3) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint3Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint3Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint2Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint2TypeRedisRestAPIURL RemoveProjectEnv200ApplicationJSON2ContentHint2Type = "redis-rest-api-url"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint2Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint2Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint2Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint2 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint2Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint2) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint2Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint2Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHint1Type string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHint1TypeRedisURL RemoveProjectEnv200ApplicationJSON2ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnv200ApplicationJSON2ContentHint1Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2ContentHint1Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnv200ApplicationJSON2ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2ContentHint1 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON2ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON2ContentHint1) GetType() RemoveProjectEnv200ApplicationJSON2ContentHint1Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON2ContentHintType string

const (
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint1  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_1"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint2  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_2"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint3  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_3"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint4  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_4"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint5  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_5"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint6  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_6"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint7  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_7"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint8  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_8"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint9  RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_9"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint10 RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_10"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint11 RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_11"
	RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint12 RemoveProjectEnv200ApplicationJSON2ContentHintType = "removeProjectEnv_200ApplicationJSON_2_contentHint_12"
)

type RemoveProjectEnv200ApplicationJSON2ContentHint struct {
	RemoveProjectEnv200ApplicationJSON2ContentHint1  *RemoveProjectEnv200ApplicationJSON2ContentHint1
	RemoveProjectEnv200ApplicationJSON2ContentHint2  *RemoveProjectEnv200ApplicationJSON2ContentHint2
	RemoveProjectEnv200ApplicationJSON2ContentHint3  *RemoveProjectEnv200ApplicationJSON2ContentHint3
	RemoveProjectEnv200ApplicationJSON2ContentHint4  *RemoveProjectEnv200ApplicationJSON2ContentHint4
	RemoveProjectEnv200ApplicationJSON2ContentHint5  *RemoveProjectEnv200ApplicationJSON2ContentHint5
	RemoveProjectEnv200ApplicationJSON2ContentHint6  *RemoveProjectEnv200ApplicationJSON2ContentHint6
	RemoveProjectEnv200ApplicationJSON2ContentHint7  *RemoveProjectEnv200ApplicationJSON2ContentHint7
	RemoveProjectEnv200ApplicationJSON2ContentHint8  *RemoveProjectEnv200ApplicationJSON2ContentHint8
	RemoveProjectEnv200ApplicationJSON2ContentHint9  *RemoveProjectEnv200ApplicationJSON2ContentHint9
	RemoveProjectEnv200ApplicationJSON2ContentHint10 *RemoveProjectEnv200ApplicationJSON2ContentHint10
	RemoveProjectEnv200ApplicationJSON2ContentHint11 *RemoveProjectEnv200ApplicationJSON2ContentHint11
	RemoveProjectEnv200ApplicationJSON2ContentHint12 *RemoveProjectEnv200ApplicationJSON2ContentHint12

	Type RemoveProjectEnv200ApplicationJSON2ContentHintType
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint1(removeProjectEnv200ApplicationJSON2ContentHint1 RemoveProjectEnv200ApplicationJSON2ContentHint1) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint1

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint1: &removeProjectEnv200ApplicationJSON2ContentHint1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint2(removeProjectEnv200ApplicationJSON2ContentHint2 RemoveProjectEnv200ApplicationJSON2ContentHint2) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint2

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint2: &removeProjectEnv200ApplicationJSON2ContentHint2,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint3(removeProjectEnv200ApplicationJSON2ContentHint3 RemoveProjectEnv200ApplicationJSON2ContentHint3) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint3

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint3: &removeProjectEnv200ApplicationJSON2ContentHint3,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint4(removeProjectEnv200ApplicationJSON2ContentHint4 RemoveProjectEnv200ApplicationJSON2ContentHint4) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint4

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint4: &removeProjectEnv200ApplicationJSON2ContentHint4,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint5(removeProjectEnv200ApplicationJSON2ContentHint5 RemoveProjectEnv200ApplicationJSON2ContentHint5) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint5

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint5: &removeProjectEnv200ApplicationJSON2ContentHint5,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint6(removeProjectEnv200ApplicationJSON2ContentHint6 RemoveProjectEnv200ApplicationJSON2ContentHint6) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint6

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint6: &removeProjectEnv200ApplicationJSON2ContentHint6,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint7(removeProjectEnv200ApplicationJSON2ContentHint7 RemoveProjectEnv200ApplicationJSON2ContentHint7) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint7

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint7: &removeProjectEnv200ApplicationJSON2ContentHint7,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint8(removeProjectEnv200ApplicationJSON2ContentHint8 RemoveProjectEnv200ApplicationJSON2ContentHint8) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint8

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint8: &removeProjectEnv200ApplicationJSON2ContentHint8,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint9(removeProjectEnv200ApplicationJSON2ContentHint9 RemoveProjectEnv200ApplicationJSON2ContentHint9) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint9

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint9: &removeProjectEnv200ApplicationJSON2ContentHint9,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint10(removeProjectEnv200ApplicationJSON2ContentHint10 RemoveProjectEnv200ApplicationJSON2ContentHint10) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint10

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint10: &removeProjectEnv200ApplicationJSON2ContentHint10,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint11(removeProjectEnv200ApplicationJSON2ContentHint11 RemoveProjectEnv200ApplicationJSON2ContentHint11) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint11

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint11: &removeProjectEnv200ApplicationJSON2ContentHint11,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2ContentHintRemoveProjectEnv200ApplicationJSON2ContentHint12(removeProjectEnv200ApplicationJSON2ContentHint12 RemoveProjectEnv200ApplicationJSON2ContentHint12) RemoveProjectEnv200ApplicationJSON2ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint12

	return RemoveProjectEnv200ApplicationJSON2ContentHint{
		RemoveProjectEnv200ApplicationJSON2ContentHint12: &removeProjectEnv200ApplicationJSON2ContentHint12,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON2ContentHint) UnmarshalJSON(data []byte) error {

	removeProjectEnv200ApplicationJSON2ContentHint1 := new(RemoveProjectEnv200ApplicationJSON2ContentHint1)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint1, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint1 = removeProjectEnv200ApplicationJSON2ContentHint1
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint1
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint2 := new(RemoveProjectEnv200ApplicationJSON2ContentHint2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint2 = removeProjectEnv200ApplicationJSON2ContentHint2
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint2
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint3 := new(RemoveProjectEnv200ApplicationJSON2ContentHint3)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint3, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint3 = removeProjectEnv200ApplicationJSON2ContentHint3
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint3
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint4 := new(RemoveProjectEnv200ApplicationJSON2ContentHint4)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint4, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint4 = removeProjectEnv200ApplicationJSON2ContentHint4
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint4
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint5 := new(RemoveProjectEnv200ApplicationJSON2ContentHint5)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint5, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint5 = removeProjectEnv200ApplicationJSON2ContentHint5
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint5
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint6 := new(RemoveProjectEnv200ApplicationJSON2ContentHint6)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint6, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint6 = removeProjectEnv200ApplicationJSON2ContentHint6
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint6
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint7 := new(RemoveProjectEnv200ApplicationJSON2ContentHint7)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint7, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint7 = removeProjectEnv200ApplicationJSON2ContentHint7
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint7
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint8 := new(RemoveProjectEnv200ApplicationJSON2ContentHint8)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint8, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint8 = removeProjectEnv200ApplicationJSON2ContentHint8
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint8
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint9 := new(RemoveProjectEnv200ApplicationJSON2ContentHint9)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint9, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint9 = removeProjectEnv200ApplicationJSON2ContentHint9
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint9
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint10 := new(RemoveProjectEnv200ApplicationJSON2ContentHint10)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint10, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint10 = removeProjectEnv200ApplicationJSON2ContentHint10
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint10
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint11 := new(RemoveProjectEnv200ApplicationJSON2ContentHint11)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint11, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint11 = removeProjectEnv200ApplicationJSON2ContentHint11
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint11
		return nil
	}

	removeProjectEnv200ApplicationJSON2ContentHint12 := new(RemoveProjectEnv200ApplicationJSON2ContentHint12)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2ContentHint12, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2ContentHint12 = removeProjectEnv200ApplicationJSON2ContentHint12
		u.Type = RemoveProjectEnv200ApplicationJSON2ContentHintTypeRemoveProjectEnv200ApplicationJSON2ContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON2ContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnv200ApplicationJSON2ContentHint1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint2, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint3, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint4, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint5, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint6, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint7, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint8, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint9, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint10, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint11, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2ContentHint12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2ContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON2Target2 string

const (
	RemoveProjectEnv200ApplicationJSON2Target2Production  RemoveProjectEnv200ApplicationJSON2Target2 = "production"
	RemoveProjectEnv200ApplicationJSON2Target2Preview     RemoveProjectEnv200ApplicationJSON2Target2 = "preview"
	RemoveProjectEnv200ApplicationJSON2Target2Development RemoveProjectEnv200ApplicationJSON2Target2 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON2Target2) ToPointer() *RemoveProjectEnv200ApplicationJSON2Target2 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON2Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2Target2: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2Target1 string

const (
	RemoveProjectEnv200ApplicationJSON2Target1Production  RemoveProjectEnv200ApplicationJSON2Target1 = "production"
	RemoveProjectEnv200ApplicationJSON2Target1Preview     RemoveProjectEnv200ApplicationJSON2Target1 = "preview"
	RemoveProjectEnv200ApplicationJSON2Target1Development RemoveProjectEnv200ApplicationJSON2Target1 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON2Target1) ToPointer() *RemoveProjectEnv200ApplicationJSON2Target1 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON2Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2Target1: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2TargetType string

const (
	RemoveProjectEnv200ApplicationJSON2TargetTypeArrayOfremoveProjectEnv200ApplicationJSON2Target1 RemoveProjectEnv200ApplicationJSON2TargetType = "arrayOfremoveProjectEnv_200ApplicationJSON_2_target_1"
	RemoveProjectEnv200ApplicationJSON2TargetTypeRemoveProjectEnv200ApplicationJSON2Target2        RemoveProjectEnv200ApplicationJSON2TargetType = "removeProjectEnv_200ApplicationJSON_2_target_2"
)

type RemoveProjectEnv200ApplicationJSON2Target struct {
	ArrayOfremoveProjectEnv200ApplicationJSON2Target1 []RemoveProjectEnv200ApplicationJSON2Target1
	RemoveProjectEnv200ApplicationJSON2Target2        *RemoveProjectEnv200ApplicationJSON2Target2

	Type RemoveProjectEnv200ApplicationJSON2TargetType
}

func CreateRemoveProjectEnv200ApplicationJSON2TargetArrayOfremoveProjectEnv200ApplicationJSON2Target1(arrayOfremoveProjectEnv200ApplicationJSON2Target1 []RemoveProjectEnv200ApplicationJSON2Target1) RemoveProjectEnv200ApplicationJSON2Target {
	typ := RemoveProjectEnv200ApplicationJSON2TargetTypeArrayOfremoveProjectEnv200ApplicationJSON2Target1

	return RemoveProjectEnv200ApplicationJSON2Target{
		ArrayOfremoveProjectEnv200ApplicationJSON2Target1: arrayOfremoveProjectEnv200ApplicationJSON2Target1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON2TargetRemoveProjectEnv200ApplicationJSON2Target2(removeProjectEnv200ApplicationJSON2Target2 RemoveProjectEnv200ApplicationJSON2Target2) RemoveProjectEnv200ApplicationJSON2Target {
	typ := RemoveProjectEnv200ApplicationJSON2TargetTypeRemoveProjectEnv200ApplicationJSON2Target2

	return RemoveProjectEnv200ApplicationJSON2Target{
		RemoveProjectEnv200ApplicationJSON2Target2: &removeProjectEnv200ApplicationJSON2Target2,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON2Target) UnmarshalJSON(data []byte) error {

	arrayOfremoveProjectEnv200ApplicationJSON2Target1 := []RemoveProjectEnv200ApplicationJSON2Target1{}
	if err := utils.UnmarshalJSON(data, &arrayOfremoveProjectEnv200ApplicationJSON2Target1, "", true, true); err == nil {
		u.ArrayOfremoveProjectEnv200ApplicationJSON2Target1 = arrayOfremoveProjectEnv200ApplicationJSON2Target1
		u.Type = RemoveProjectEnv200ApplicationJSON2TargetTypeArrayOfremoveProjectEnv200ApplicationJSON2Target1
		return nil
	}

	removeProjectEnv200ApplicationJSON2Target2 := new(RemoveProjectEnv200ApplicationJSON2Target2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2Target2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2Target2 = removeProjectEnv200ApplicationJSON2Target2
		u.Type = RemoveProjectEnv200ApplicationJSON2TargetTypeRemoveProjectEnv200ApplicationJSON2Target2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON2Target) MarshalJSON() ([]byte, error) {
	if u.ArrayOfremoveProjectEnv200ApplicationJSON2Target1 != nil {
		return utils.MarshalJSON(u.ArrayOfremoveProjectEnv200ApplicationJSON2Target1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2Target2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2Target2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON2Type string

const (
	RemoveProjectEnv200ApplicationJSON2TypeSystem    RemoveProjectEnv200ApplicationJSON2Type = "system"
	RemoveProjectEnv200ApplicationJSON2TypeEncrypted RemoveProjectEnv200ApplicationJSON2Type = "encrypted"
	RemoveProjectEnv200ApplicationJSON2TypePlain     RemoveProjectEnv200ApplicationJSON2Type = "plain"
	RemoveProjectEnv200ApplicationJSON2TypeSensitive RemoveProjectEnv200ApplicationJSON2Type = "sensitive"
	RemoveProjectEnv200ApplicationJSON2TypeSecret    RemoveProjectEnv200ApplicationJSON2Type = "secret"
)

func (e RemoveProjectEnv200ApplicationJSON2Type) ToPointer() *RemoveProjectEnv200ApplicationJSON2Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnv200ApplicationJSON2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON2Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON2 struct {
	ConfigurationID *string                                         `json:"configurationId,omitempty"`
	ContentHint     *RemoveProjectEnv200ApplicationJSON2ContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                          `json:"createdAt,omitempty"`
	CreatedBy       *string                                         `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                      `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                    `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                    `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                    `json:"gitBranch,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	Key               string                                     `json:"key"`
	System            *bool                                      `json:"system,omitempty"`
	Target            *RemoveProjectEnv200ApplicationJSON2Target `json:"target,omitempty"`
	Type              RemoveProjectEnv200ApplicationJSON2Type    `json:"type"`
	UpdatedAt         *int64                                     `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                    `json:"updatedBy,omitempty"`
	Value             string                                     `json:"value"`
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetContentHint() *RemoveProjectEnv200ApplicationJSON2ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetTarget() *RemoveProjectEnv200ApplicationJSON2Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetType() RemoveProjectEnv200ApplicationJSON2Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON2Type("")
	}
	return o.Type
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnv200ApplicationJSON1ContentHint12Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint12TypePostgresDatabase RemoveProjectEnv200ApplicationJSON1ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint12Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint12Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint12 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint12) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint12Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint11Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint11TypePostgresPassword RemoveProjectEnv200ApplicationJSON1ContentHint11Type = "postgres-password"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint11Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint11Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint11Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint11 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint11Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint11) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint11Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint11Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint10Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint10TypePostgresHost RemoveProjectEnv200ApplicationJSON1ContentHint10Type = "postgres-host"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint10Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint10Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint10Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint10 struct {
	StoreID string                                               `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint10Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint10) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint10Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint10Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint9Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint9TypePostgresUser RemoveProjectEnv200ApplicationJSON1ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint9Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint9Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint9 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint9) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint9Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint8Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint8TypePostgresPrismaURL RemoveProjectEnv200ApplicationJSON1ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint8Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint8Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint8 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint8) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint8Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint7Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint7TypePostgresURLNonPooling RemoveProjectEnv200ApplicationJSON1ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint7Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint7Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint7 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint7) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint7Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint6Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint6TypePostgresURL RemoveProjectEnv200ApplicationJSON1ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint6Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint6Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint6 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint6) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint6Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint5Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint5TypeBlobReadWriteToken RemoveProjectEnv200ApplicationJSON1ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint5Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint5Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint5 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint5) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint5Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint4Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnv200ApplicationJSON1ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint4Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint4Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint4 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint4) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint4Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint3Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint3TypeRedisRestAPIToken RemoveProjectEnv200ApplicationJSON1ContentHint3Type = "redis-rest-api-token"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint3Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint3Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint3Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint3 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint3Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint3) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint3Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint3Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint2Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint2TypeRedisRestAPIURL RemoveProjectEnv200ApplicationJSON1ContentHint2Type = "redis-rest-api-url"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint2Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint2Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint2Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint2 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint2Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint2) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint2Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint2Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHint1Type string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHint1TypeRedisURL RemoveProjectEnv200ApplicationJSON1ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnv200ApplicationJSON1ContentHint1Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1ContentHint1Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnv200ApplicationJSON1ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1ContentHint1 struct {
	StoreID string                                              `json:"storeId"`
	Type    RemoveProjectEnv200ApplicationJSON1ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv200ApplicationJSON1ContentHint1) GetType() RemoveProjectEnv200ApplicationJSON1ContentHint1Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnv200ApplicationJSON1ContentHintType string

const (
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint1  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_1"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint2  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_2"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint3  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_3"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint4  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_4"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint5  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_5"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint6  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_6"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint7  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_7"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint8  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_8"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint9  RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_9"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint10 RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_10"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint11 RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_11"
	RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint12 RemoveProjectEnv200ApplicationJSON1ContentHintType = "removeProjectEnv_200ApplicationJSON_1_contentHint_12"
)

type RemoveProjectEnv200ApplicationJSON1ContentHint struct {
	RemoveProjectEnv200ApplicationJSON1ContentHint1  *RemoveProjectEnv200ApplicationJSON1ContentHint1
	RemoveProjectEnv200ApplicationJSON1ContentHint2  *RemoveProjectEnv200ApplicationJSON1ContentHint2
	RemoveProjectEnv200ApplicationJSON1ContentHint3  *RemoveProjectEnv200ApplicationJSON1ContentHint3
	RemoveProjectEnv200ApplicationJSON1ContentHint4  *RemoveProjectEnv200ApplicationJSON1ContentHint4
	RemoveProjectEnv200ApplicationJSON1ContentHint5  *RemoveProjectEnv200ApplicationJSON1ContentHint5
	RemoveProjectEnv200ApplicationJSON1ContentHint6  *RemoveProjectEnv200ApplicationJSON1ContentHint6
	RemoveProjectEnv200ApplicationJSON1ContentHint7  *RemoveProjectEnv200ApplicationJSON1ContentHint7
	RemoveProjectEnv200ApplicationJSON1ContentHint8  *RemoveProjectEnv200ApplicationJSON1ContentHint8
	RemoveProjectEnv200ApplicationJSON1ContentHint9  *RemoveProjectEnv200ApplicationJSON1ContentHint9
	RemoveProjectEnv200ApplicationJSON1ContentHint10 *RemoveProjectEnv200ApplicationJSON1ContentHint10
	RemoveProjectEnv200ApplicationJSON1ContentHint11 *RemoveProjectEnv200ApplicationJSON1ContentHint11
	RemoveProjectEnv200ApplicationJSON1ContentHint12 *RemoveProjectEnv200ApplicationJSON1ContentHint12

	Type RemoveProjectEnv200ApplicationJSON1ContentHintType
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint1(removeProjectEnv200ApplicationJSON1ContentHint1 RemoveProjectEnv200ApplicationJSON1ContentHint1) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint1

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint1: &removeProjectEnv200ApplicationJSON1ContentHint1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint2(removeProjectEnv200ApplicationJSON1ContentHint2 RemoveProjectEnv200ApplicationJSON1ContentHint2) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint2

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint2: &removeProjectEnv200ApplicationJSON1ContentHint2,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint3(removeProjectEnv200ApplicationJSON1ContentHint3 RemoveProjectEnv200ApplicationJSON1ContentHint3) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint3

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint3: &removeProjectEnv200ApplicationJSON1ContentHint3,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint4(removeProjectEnv200ApplicationJSON1ContentHint4 RemoveProjectEnv200ApplicationJSON1ContentHint4) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint4

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint4: &removeProjectEnv200ApplicationJSON1ContentHint4,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint5(removeProjectEnv200ApplicationJSON1ContentHint5 RemoveProjectEnv200ApplicationJSON1ContentHint5) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint5

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint5: &removeProjectEnv200ApplicationJSON1ContentHint5,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint6(removeProjectEnv200ApplicationJSON1ContentHint6 RemoveProjectEnv200ApplicationJSON1ContentHint6) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint6

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint6: &removeProjectEnv200ApplicationJSON1ContentHint6,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint7(removeProjectEnv200ApplicationJSON1ContentHint7 RemoveProjectEnv200ApplicationJSON1ContentHint7) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint7

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint7: &removeProjectEnv200ApplicationJSON1ContentHint7,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint8(removeProjectEnv200ApplicationJSON1ContentHint8 RemoveProjectEnv200ApplicationJSON1ContentHint8) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint8

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint8: &removeProjectEnv200ApplicationJSON1ContentHint8,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint9(removeProjectEnv200ApplicationJSON1ContentHint9 RemoveProjectEnv200ApplicationJSON1ContentHint9) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint9

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint9: &removeProjectEnv200ApplicationJSON1ContentHint9,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint10(removeProjectEnv200ApplicationJSON1ContentHint10 RemoveProjectEnv200ApplicationJSON1ContentHint10) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint10

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint10: &removeProjectEnv200ApplicationJSON1ContentHint10,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint11(removeProjectEnv200ApplicationJSON1ContentHint11 RemoveProjectEnv200ApplicationJSON1ContentHint11) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint11

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint11: &removeProjectEnv200ApplicationJSON1ContentHint11,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1ContentHintRemoveProjectEnv200ApplicationJSON1ContentHint12(removeProjectEnv200ApplicationJSON1ContentHint12 RemoveProjectEnv200ApplicationJSON1ContentHint12) RemoveProjectEnv200ApplicationJSON1ContentHint {
	typ := RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint12

	return RemoveProjectEnv200ApplicationJSON1ContentHint{
		RemoveProjectEnv200ApplicationJSON1ContentHint12: &removeProjectEnv200ApplicationJSON1ContentHint12,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON1ContentHint) UnmarshalJSON(data []byte) error {

	removeProjectEnv200ApplicationJSON1ContentHint1 := new(RemoveProjectEnv200ApplicationJSON1ContentHint1)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint1, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint1 = removeProjectEnv200ApplicationJSON1ContentHint1
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint1
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint2 := new(RemoveProjectEnv200ApplicationJSON1ContentHint2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint2 = removeProjectEnv200ApplicationJSON1ContentHint2
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint2
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint3 := new(RemoveProjectEnv200ApplicationJSON1ContentHint3)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint3, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint3 = removeProjectEnv200ApplicationJSON1ContentHint3
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint3
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint4 := new(RemoveProjectEnv200ApplicationJSON1ContentHint4)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint4, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint4 = removeProjectEnv200ApplicationJSON1ContentHint4
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint4
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint5 := new(RemoveProjectEnv200ApplicationJSON1ContentHint5)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint5, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint5 = removeProjectEnv200ApplicationJSON1ContentHint5
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint5
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint6 := new(RemoveProjectEnv200ApplicationJSON1ContentHint6)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint6, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint6 = removeProjectEnv200ApplicationJSON1ContentHint6
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint6
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint7 := new(RemoveProjectEnv200ApplicationJSON1ContentHint7)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint7, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint7 = removeProjectEnv200ApplicationJSON1ContentHint7
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint7
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint8 := new(RemoveProjectEnv200ApplicationJSON1ContentHint8)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint8, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint8 = removeProjectEnv200ApplicationJSON1ContentHint8
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint8
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint9 := new(RemoveProjectEnv200ApplicationJSON1ContentHint9)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint9, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint9 = removeProjectEnv200ApplicationJSON1ContentHint9
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint9
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint10 := new(RemoveProjectEnv200ApplicationJSON1ContentHint10)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint10, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint10 = removeProjectEnv200ApplicationJSON1ContentHint10
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint10
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint11 := new(RemoveProjectEnv200ApplicationJSON1ContentHint11)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint11, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint11 = removeProjectEnv200ApplicationJSON1ContentHint11
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint11
		return nil
	}

	removeProjectEnv200ApplicationJSON1ContentHint12 := new(RemoveProjectEnv200ApplicationJSON1ContentHint12)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1ContentHint12, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1ContentHint12 = removeProjectEnv200ApplicationJSON1ContentHint12
		u.Type = RemoveProjectEnv200ApplicationJSON1ContentHintTypeRemoveProjectEnv200ApplicationJSON1ContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON1ContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnv200ApplicationJSON1ContentHint1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint2, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint3, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint4, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint5, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint6, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint7, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint8, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint9, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint10, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint11, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1ContentHint12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1ContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON1Target2 string

const (
	RemoveProjectEnv200ApplicationJSON1Target2Production  RemoveProjectEnv200ApplicationJSON1Target2 = "production"
	RemoveProjectEnv200ApplicationJSON1Target2Preview     RemoveProjectEnv200ApplicationJSON1Target2 = "preview"
	RemoveProjectEnv200ApplicationJSON1Target2Development RemoveProjectEnv200ApplicationJSON1Target2 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON1Target2) ToPointer() *RemoveProjectEnv200ApplicationJSON1Target2 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON1Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1Target2: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1Target1 string

const (
	RemoveProjectEnv200ApplicationJSON1Target1Production  RemoveProjectEnv200ApplicationJSON1Target1 = "production"
	RemoveProjectEnv200ApplicationJSON1Target1Preview     RemoveProjectEnv200ApplicationJSON1Target1 = "preview"
	RemoveProjectEnv200ApplicationJSON1Target1Development RemoveProjectEnv200ApplicationJSON1Target1 = "development"
)

func (e RemoveProjectEnv200ApplicationJSON1Target1) ToPointer() *RemoveProjectEnv200ApplicationJSON1Target1 {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnv200ApplicationJSON1Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1Target1: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1TargetType string

const (
	RemoveProjectEnv200ApplicationJSON1TargetTypeArrayOfremoveProjectEnv200ApplicationJSON1Target1 RemoveProjectEnv200ApplicationJSON1TargetType = "arrayOfremoveProjectEnv_200ApplicationJSON_1_target_1"
	RemoveProjectEnv200ApplicationJSON1TargetTypeRemoveProjectEnv200ApplicationJSON1Target2        RemoveProjectEnv200ApplicationJSON1TargetType = "removeProjectEnv_200ApplicationJSON_1_target_2"
)

type RemoveProjectEnv200ApplicationJSON1Target struct {
	ArrayOfremoveProjectEnv200ApplicationJSON1Target1 []RemoveProjectEnv200ApplicationJSON1Target1
	RemoveProjectEnv200ApplicationJSON1Target2        *RemoveProjectEnv200ApplicationJSON1Target2

	Type RemoveProjectEnv200ApplicationJSON1TargetType
}

func CreateRemoveProjectEnv200ApplicationJSON1TargetArrayOfremoveProjectEnv200ApplicationJSON1Target1(arrayOfremoveProjectEnv200ApplicationJSON1Target1 []RemoveProjectEnv200ApplicationJSON1Target1) RemoveProjectEnv200ApplicationJSON1Target {
	typ := RemoveProjectEnv200ApplicationJSON1TargetTypeArrayOfremoveProjectEnv200ApplicationJSON1Target1

	return RemoveProjectEnv200ApplicationJSON1Target{
		ArrayOfremoveProjectEnv200ApplicationJSON1Target1: arrayOfremoveProjectEnv200ApplicationJSON1Target1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSON1TargetRemoveProjectEnv200ApplicationJSON1Target2(removeProjectEnv200ApplicationJSON1Target2 RemoveProjectEnv200ApplicationJSON1Target2) RemoveProjectEnv200ApplicationJSON1Target {
	typ := RemoveProjectEnv200ApplicationJSON1TargetTypeRemoveProjectEnv200ApplicationJSON1Target2

	return RemoveProjectEnv200ApplicationJSON1Target{
		RemoveProjectEnv200ApplicationJSON1Target2: &removeProjectEnv200ApplicationJSON1Target2,
		Type: typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON1Target) UnmarshalJSON(data []byte) error {

	arrayOfremoveProjectEnv200ApplicationJSON1Target1 := []RemoveProjectEnv200ApplicationJSON1Target1{}
	if err := utils.UnmarshalJSON(data, &arrayOfremoveProjectEnv200ApplicationJSON1Target1, "", true, true); err == nil {
		u.ArrayOfremoveProjectEnv200ApplicationJSON1Target1 = arrayOfremoveProjectEnv200ApplicationJSON1Target1
		u.Type = RemoveProjectEnv200ApplicationJSON1TargetTypeArrayOfremoveProjectEnv200ApplicationJSON1Target1
		return nil
	}

	removeProjectEnv200ApplicationJSON1Target2 := new(RemoveProjectEnv200ApplicationJSON1Target2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON1Target2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON1Target2 = removeProjectEnv200ApplicationJSON1Target2
		u.Type = RemoveProjectEnv200ApplicationJSON1TargetTypeRemoveProjectEnv200ApplicationJSON1Target2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON1Target) MarshalJSON() ([]byte, error) {
	if u.ArrayOfremoveProjectEnv200ApplicationJSON1Target1 != nil {
		return utils.MarshalJSON(u.ArrayOfremoveProjectEnv200ApplicationJSON1Target1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON1Target2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON1Target2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnv200ApplicationJSON1Type string

const (
	RemoveProjectEnv200ApplicationJSON1TypeSystem    RemoveProjectEnv200ApplicationJSON1Type = "system"
	RemoveProjectEnv200ApplicationJSON1TypeEncrypted RemoveProjectEnv200ApplicationJSON1Type = "encrypted"
	RemoveProjectEnv200ApplicationJSON1TypePlain     RemoveProjectEnv200ApplicationJSON1Type = "plain"
	RemoveProjectEnv200ApplicationJSON1TypeSensitive RemoveProjectEnv200ApplicationJSON1Type = "sensitive"
	RemoveProjectEnv200ApplicationJSON1TypeSecret    RemoveProjectEnv200ApplicationJSON1Type = "secret"
)

func (e RemoveProjectEnv200ApplicationJSON1Type) ToPointer() *RemoveProjectEnv200ApplicationJSON1Type {
	return &e
}

func (e *RemoveProjectEnv200ApplicationJSON1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnv200ApplicationJSON1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnv200ApplicationJSON1Type: %v", v)
	}
}

type RemoveProjectEnv200ApplicationJSON1 struct {
	ConfigurationID *string                                         `json:"configurationId,omitempty"`
	ContentHint     *RemoveProjectEnv200ApplicationJSON1ContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                          `json:"createdAt,omitempty"`
	CreatedBy       *string                                         `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                      `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                    `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                    `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                    `json:"gitBranch,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	Key               string                                     `json:"key"`
	Target            *RemoveProjectEnv200ApplicationJSON1Target `json:"target,omitempty"`
	Type              RemoveProjectEnv200ApplicationJSON1Type    `json:"type"`
	UpdatedAt         *int64                                     `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                    `json:"updatedBy,omitempty"`
	Value             string                                     `json:"value"`
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetContentHint() *RemoveProjectEnv200ApplicationJSON1ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetTarget() *RemoveProjectEnv200ApplicationJSON1Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetType() RemoveProjectEnv200ApplicationJSON1Type {
	if o == nil {
		return RemoveProjectEnv200ApplicationJSON1Type("")
	}
	return o.Type
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv200ApplicationJSON1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnv200ApplicationJSONType string

const (
	RemoveProjectEnv200ApplicationJSONTypeArrayOfremoveProjectEnv200ApplicationJSON1 RemoveProjectEnv200ApplicationJSONType = "arrayOfremoveProjectEnv_200ApplicationJSON_1"
	RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON2        RemoveProjectEnv200ApplicationJSONType = "removeProjectEnv_200ApplicationJSON_2"
	RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON3        RemoveProjectEnv200ApplicationJSONType = "removeProjectEnv_200ApplicationJSON_3"
)

type RemoveProjectEnv200ApplicationJSON struct {
	ArrayOfremoveProjectEnv200ApplicationJSON1 []RemoveProjectEnv200ApplicationJSON1
	RemoveProjectEnv200ApplicationJSON2        *RemoveProjectEnv200ApplicationJSON2
	RemoveProjectEnv200ApplicationJSON3        *RemoveProjectEnv200ApplicationJSON3

	Type RemoveProjectEnv200ApplicationJSONType
}

func CreateRemoveProjectEnv200ApplicationJSONArrayOfremoveProjectEnv200ApplicationJSON1(arrayOfremoveProjectEnv200ApplicationJSON1 []RemoveProjectEnv200ApplicationJSON1) RemoveProjectEnv200ApplicationJSON {
	typ := RemoveProjectEnv200ApplicationJSONTypeArrayOfremoveProjectEnv200ApplicationJSON1

	return RemoveProjectEnv200ApplicationJSON{
		ArrayOfremoveProjectEnv200ApplicationJSON1: arrayOfremoveProjectEnv200ApplicationJSON1,
		Type: typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSONRemoveProjectEnv200ApplicationJSON2(removeProjectEnv200ApplicationJSON2 RemoveProjectEnv200ApplicationJSON2) RemoveProjectEnv200ApplicationJSON {
	typ := RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON2

	return RemoveProjectEnv200ApplicationJSON{
		RemoveProjectEnv200ApplicationJSON2: &removeProjectEnv200ApplicationJSON2,
		Type:                                typ,
	}
}

func CreateRemoveProjectEnv200ApplicationJSONRemoveProjectEnv200ApplicationJSON3(removeProjectEnv200ApplicationJSON3 RemoveProjectEnv200ApplicationJSON3) RemoveProjectEnv200ApplicationJSON {
	typ := RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON3

	return RemoveProjectEnv200ApplicationJSON{
		RemoveProjectEnv200ApplicationJSON3: &removeProjectEnv200ApplicationJSON3,
		Type:                                typ,
	}
}

func (u *RemoveProjectEnv200ApplicationJSON) UnmarshalJSON(data []byte) error {

	removeProjectEnv200ApplicationJSON3 := new(RemoveProjectEnv200ApplicationJSON3)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON3, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON3 = removeProjectEnv200ApplicationJSON3
		u.Type = RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON3
		return nil
	}

	removeProjectEnv200ApplicationJSON2 := new(RemoveProjectEnv200ApplicationJSON2)
	if err := utils.UnmarshalJSON(data, &removeProjectEnv200ApplicationJSON2, "", true, true); err == nil {
		u.RemoveProjectEnv200ApplicationJSON2 = removeProjectEnv200ApplicationJSON2
		u.Type = RemoveProjectEnv200ApplicationJSONTypeRemoveProjectEnv200ApplicationJSON2
		return nil
	}

	arrayOfremoveProjectEnv200ApplicationJSON1 := []RemoveProjectEnv200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &arrayOfremoveProjectEnv200ApplicationJSON1, "", true, true); err == nil {
		u.ArrayOfremoveProjectEnv200ApplicationJSON1 = arrayOfremoveProjectEnv200ApplicationJSON1
		u.Type = RemoveProjectEnv200ApplicationJSONTypeArrayOfremoveProjectEnv200ApplicationJSON1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RemoveProjectEnv200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ArrayOfremoveProjectEnv200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.ArrayOfremoveProjectEnv200ApplicationJSON1, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON2, "", true)
	}

	if u.RemoveProjectEnv200ApplicationJSON3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv200ApplicationJSON3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RemoveProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was successfully removed
	RemoveProjectEnv200ApplicationJSONOneOf *RemoveProjectEnv200ApplicationJSON
}

func (o *RemoveProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RemoveProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RemoveProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RemoveProjectEnvResponse) GetRemoveProjectEnv200ApplicationJSONOneOf() *RemoveProjectEnv200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.RemoveProjectEnv200ApplicationJSONOneOf
}
