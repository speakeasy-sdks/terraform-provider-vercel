// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateTeamSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type CreateTeamRequestBody struct {
	// The desired name for the Team. It will be generated from the provided slug if nothing is provided
	Name *string `json:"name,omitempty"`
	// The desired slug for the Team
	Slug string `json:"slug"`
}

type CreateTeam200ApplicationJSONBillingAddress struct {
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	State      *string `json:"state,omitempty"`
}

type CreateTeam200ApplicationJSONBillingContract struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type CreateTeam200ApplicationJSONBillingControls struct {
	AnalyticsSampleRateInPercent *int64 `json:"analyticsSampleRateInPercent,omitempty"`
	AnalyticsSpendLimitInDollars *int64 `json:"analyticsSpendLimitInDollars,omitempty"`
}

type CreateTeam200ApplicationJSONBillingCurrency string

const (
	CreateTeam200ApplicationJSONBillingCurrencyUsd CreateTeam200ApplicationJSONBillingCurrency = "usd"
	CreateTeam200ApplicationJSONBillingCurrencyEur CreateTeam200ApplicationJSONBillingCurrency = "eur"
)

func (e CreateTeam200ApplicationJSONBillingCurrency) ToPointer() *CreateTeam200ApplicationJSONBillingCurrency {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usd":
		fallthrough
	case "eur":
		*e = CreateTeam200ApplicationJSONBillingCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingCurrency: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsAnalytics struct {
	CreatedAt   *int64                                                             `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                             `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                               `json:"hidden"`
	MaxQuantity *int64                                                             `json:"maxQuantity,omitempty"`
	Name        *string                                                            `json:"name,omitempty"`
	Price       int64                                                              `json:"price"`
	Quantity    int64                                                              `json:"quantity"`
	Tier        *int64                                                             `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsUsage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsArtifacts struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsBandwidth struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuilds - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuilds struct {
	CreatedAt   *int64                                                                    `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                    `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuildsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                      `json:"hidden"`
	MaxQuantity *int64                                                                    `json:"maxQuantity,omitempty"`
	Name        *string                                                                   `json:"name,omitempty"`
	Price       int64                                                                     `json:"price"`
	Quantity    int64                                                                     `json:"quantity"`
	Tier        *int64                                                                    `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsCronJobInvocation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheRevalidation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeConfigRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeConfigWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeFunctionExecutionUnits struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeMiddlewareInvocations struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsEnterprise - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsEnterprise struct {
	CreatedAt   *int64                                                              `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                              `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterpriseFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                `json:"hidden"`
	MaxQuantity *int64                                                              `json:"maxQuantity,omitempty"`
	Name        *string                                                             `json:"name,omitempty"`
	Price       int64                                                               `json:"price"`
	Quantity    int64                                                               `json:"quantity"`
	Tier        *int64                                                              `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoring - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoring struct {
	CreatedAt   *int64                                                              `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                              `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                `json:"hidden"`
	MaxQuantity *int64                                                              `json:"maxQuantity,omitempty"`
	Name        *string                                                             `json:"name,omitempty"`
	Price       int64                                                               `json:"price"`
	Quantity    int64                                                               `json:"quantity"`
	Tier        *int64                                                              `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringMetric struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtection - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtection struct {
	CreatedAt   *int64                                                                      `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                      `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtectionFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                        `json:"hidden"`
	MaxQuantity *int64                                                                      `json:"maxQuantity,omitempty"`
	Name        *string                                                                     `json:"name,omitempty"`
	Price       int64                                                                       `json:"price"`
	Quantity    int64                                                                       `json:"quantity"`
	Tier        *int64                                                                      `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresComputeTime struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDataStorage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDataTransfer struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDatabase struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresWrittenData struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffix - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffix struct {
	CreatedAt   *int64                                                                           `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                           `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffixFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                             `json:"hidden"`
	MaxQuantity *int64                                                                           `json:"maxQuantity,omitempty"`
	Name        *string                                                                          `json:"name,omitempty"`
	Price       int64                                                                            `json:"price"`
	Quantity    int64                                                                            `json:"quantity"`
	Tier        *int64                                                                           `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsPro - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsPro struct {
	CreatedAt   *int64                                                       `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                       `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsProFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                         `json:"hidden"`
	MaxQuantity *int64                                                       `json:"maxQuantity,omitempty"`
	Name        *string                                                      `json:"name,omitempty"`
	Price       int64                                                        `json:"price"`
	Quantity    int64                                                        `json:"quantity"`
	Tier        *int64                                                       `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsSaml - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsSaml struct {
	CreatedAt   *int64                                                        `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                        `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsSamlFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                          `json:"hidden"`
	MaxQuantity *int64                                                        `json:"maxQuantity,omitempty"`
	Name        *string                                                       `json:"name,omitempty"`
	Price       int64                                                         `json:"price"`
	Quantity    int64                                                         `json:"quantity"`
	Tier        *int64                                                        `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsServerlessFunctionExecution struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsSourceImages struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalBandwidthInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalCommands struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalDailyAvgStorageInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalDatabases struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeats - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeats struct {
	CreatedAt   *int64                                                             `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                             `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeatsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                               `json:"hidden"`
	MaxQuantity *int64                                                             `json:"maxQuantity,omitempty"`
	Name        *string                                                            `json:"name,omitempty"`
	Price       int64                                                              `json:"price"`
	Quantity    int64                                                              `json:"quantity"`
	Tier        *int64                                                             `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval = "month"
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount int64

const (
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountOne    CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 1
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountTwelve CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 12
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountTwo    CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 2
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountThree  CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 3
	CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCountSix    CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount = 6
)

func (e CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount) ToPointer() *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyInterval      `json:"interval"`
	IntervalCount CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequencyIntervalCount `json:"intervalCount"`
}

// CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalytics struct {
	CreatedAt   *int64                                                                `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                `json:"disabledAt,omitempty"`
	Frequency   *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                  `json:"hidden"`
	MaxQuantity *int64                                                                `json:"maxQuantity,omitempty"`
	Name        *string                                                               `json:"name,omitempty"`
	Price       int64                                                                 `json:"price"`
	Quantity    int64                                                                 `json:"quantity"`
	Tier        *int64                                                                `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsEvent struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceItems struct {
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Analytics      *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalytics      `json:"analytics,omitempty"`
	AnalyticsUsage *CreateTeam200ApplicationJSONBillingInvoiceItemsAnalyticsUsage `json:"analyticsUsage,omitempty"`
	Artifacts      *CreateTeam200ApplicationJSONBillingInvoiceItemsArtifacts      `json:"artifacts,omitempty"`
	Bandwidth      *CreateTeam200ApplicationJSONBillingInvoiceItemsBandwidth      `json:"bandwidth,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	ConcurrentBuilds           *CreateTeam200ApplicationJSONBillingInvoiceItemsConcurrentBuilds           `json:"concurrentBuilds,omitempty"`
	CronJobInvocation          *CreateTeam200ApplicationJSONBillingInvoiceItemsCronJobInvocation          `json:"cronJobInvocation,omitempty"`
	DataCacheRead              *CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheRead              `json:"dataCacheRead,omitempty"`
	DataCacheRevalidation      *CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheRevalidation      `json:"dataCacheRevalidation,omitempty"`
	DataCacheWrite             *CreateTeam200ApplicationJSONBillingInvoiceItemsDataCacheWrite             `json:"dataCacheWrite,omitempty"`
	EdgeConfigRead             *CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeConfigRead             `json:"edgeConfigRead,omitempty"`
	EdgeConfigWrite            *CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeConfigWrite            `json:"edgeConfigWrite,omitempty"`
	EdgeFunctionExecutionUnits *CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeFunctionExecutionUnits `json:"edgeFunctionExecutionUnits,omitempty"`
	EdgeMiddlewareInvocations  *CreateTeam200ApplicationJSONBillingInvoiceItemsEdgeMiddlewareInvocations  `json:"edgeMiddlewareInvocations,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Enterprise *CreateTeam200ApplicationJSONBillingInvoiceItemsEnterprise `json:"enterprise,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Monitoring       *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoring       `json:"monitoring,omitempty"`
	MonitoringMetric *CreateTeam200ApplicationJSONBillingInvoiceItemsMonitoringMetric `json:"monitoringMetric,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PasswordProtection   *CreateTeam200ApplicationJSONBillingInvoiceItemsPasswordProtection   `json:"passwordProtection,omitempty"`
	PostgresComputeTime  *CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresComputeTime  `json:"postgresComputeTime,omitempty"`
	PostgresDataStorage  *CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDataStorage  `json:"postgresDataStorage,omitempty"`
	PostgresDataTransfer *CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDataTransfer `json:"postgresDataTransfer,omitempty"`
	PostgresDatabase     *CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresDatabase     `json:"postgresDatabase,omitempty"`
	PostgresWrittenData  *CreateTeam200ApplicationJSONBillingInvoiceItemsPostgresWrittenData  `json:"postgresWrittenData,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PreviewDeploymentSuffix *CreateTeam200ApplicationJSONBillingInvoiceItemsPreviewDeploymentSuffix `json:"previewDeploymentSuffix,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Pro *CreateTeam200ApplicationJSONBillingInvoiceItemsPro `json:"pro,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Saml                                    *CreateTeam200ApplicationJSONBillingInvoiceItemsSaml                                    `json:"saml,omitempty"`
	ServerlessFunctionExecution             *CreateTeam200ApplicationJSONBillingInvoiceItemsServerlessFunctionExecution             `json:"serverlessFunctionExecution,omitempty"`
	SourceImages                            *CreateTeam200ApplicationJSONBillingInvoiceItemsSourceImages                            `json:"sourceImages,omitempty"`
	StorageRedisTotalBandwidthInBytes       *CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalBandwidthInBytes       `json:"storageRedisTotalBandwidthInBytes,omitempty"`
	StorageRedisTotalCommands               *CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalCommands               `json:"storageRedisTotalCommands,omitempty"`
	StorageRedisTotalDailyAvgStorageInBytes *CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalDailyAvgStorageInBytes `json:"storageRedisTotalDailyAvgStorageInBytes,omitempty"`
	StorageRedisTotalDatabases              *CreateTeam200ApplicationJSONBillingInvoiceItemsStorageRedisTotalDatabases              `json:"storageRedisTotalDatabases,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	TeamSeats *CreateTeam200ApplicationJSONBillingInvoiceItemsTeamSeats `json:"teamSeats,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	WebAnalytics      *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalytics      `json:"webAnalytics,omitempty"`
	WebAnalyticsEvent *CreateTeam200ApplicationJSONBillingInvoiceItemsWebAnalyticsEvent `json:"webAnalyticsEvent,omitempty"`
}

type CreateTeam200ApplicationJSONBillingInvoiceSettings struct {
	Footer *string `json:"footer,omitempty"`
}

type CreateTeam200ApplicationJSONBillingPeriod struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type CreateTeam200ApplicationJSONBillingPlan string

const (
	CreateTeam200ApplicationJSONBillingPlanEnterprise CreateTeam200ApplicationJSONBillingPlan = "enterprise"
	CreateTeam200ApplicationJSONBillingPlanPro        CreateTeam200ApplicationJSONBillingPlan = "pro"
	CreateTeam200ApplicationJSONBillingPlanHobby      CreateTeam200ApplicationJSONBillingPlan = "hobby"
)

func (e CreateTeam200ApplicationJSONBillingPlan) ToPointer() *CreateTeam200ApplicationJSONBillingPlan {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise":
		fallthrough
	case "pro":
		fallthrough
	case "hobby":
		*e = CreateTeam200ApplicationJSONBillingPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingPlan: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingPlatform string

const (
	CreateTeam200ApplicationJSONBillingPlatformStripeTestMode CreateTeam200ApplicationJSONBillingPlatform = "stripeTestMode"
	CreateTeam200ApplicationJSONBillingPlatformStripe         CreateTeam200ApplicationJSONBillingPlatform = "stripe"
)

func (e CreateTeam200ApplicationJSONBillingPlatform) ToPointer() *CreateTeam200ApplicationJSONBillingPlatform {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripeTestMode":
		fallthrough
	case "stripe":
		*e = CreateTeam200ApplicationJSONBillingPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingPlatform: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingPricingExperiment string

const (
	CreateTeam200ApplicationJSONBillingPricingExperimentAugust2022 CreateTeam200ApplicationJSONBillingPricingExperiment = "august-2022"
)

func (e CreateTeam200ApplicationJSONBillingPricingExperiment) ToPointer() *CreateTeam200ApplicationJSONBillingPricingExperiment {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingPricingExperiment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "august-2022":
		*e = CreateTeam200ApplicationJSONBillingPricingExperiment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingPricingExperiment: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingProgramType string

const (
	CreateTeam200ApplicationJSONBillingProgramTypeStartup CreateTeam200ApplicationJSONBillingProgramType = "startup"
	CreateTeam200ApplicationJSONBillingProgramTypeAgency  CreateTeam200ApplicationJSONBillingProgramType = "agency"
)

func (e CreateTeam200ApplicationJSONBillingProgramType) ToPointer() *CreateTeam200ApplicationJSONBillingProgramType {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingProgramType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "startup":
		fallthrough
	case "agency":
		*e = CreateTeam200ApplicationJSONBillingProgramType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingProgramType: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingStatus string

const (
	CreateTeam200ApplicationJSONBillingStatusTrialing CreateTeam200ApplicationJSONBillingStatus = "trialing"
	CreateTeam200ApplicationJSONBillingStatusActive   CreateTeam200ApplicationJSONBillingStatus = "active"
	CreateTeam200ApplicationJSONBillingStatusOverdue  CreateTeam200ApplicationJSONBillingStatus = "overdue"
	CreateTeam200ApplicationJSONBillingStatusExpired  CreateTeam200ApplicationJSONBillingStatus = "expired"
	CreateTeam200ApplicationJSONBillingStatusCanceled CreateTeam200ApplicationJSONBillingStatus = "canceled"
)

func (e CreateTeam200ApplicationJSONBillingStatus) ToPointer() *CreateTeam200ApplicationJSONBillingStatus {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trialing":
		fallthrough
	case "active":
		fallthrough
	case "overdue":
		fallthrough
	case "expired":
		fallthrough
	case "canceled":
		*e = CreateTeam200ApplicationJSONBillingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingStatus: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration string

const (
	CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDurationForever   CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration = "forever"
	CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDurationRepeating CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration = "repeating"
	CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDurationOnce      CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration = "once"
)

func (e CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration) ToPointer() *CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "forever":
		fallthrough
	case "repeating":
		fallthrough
	case "once":
		*e = CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCoupon struct {
	AmountOff        *int64                                                                 `json:"amountOff"`
	Duration         CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCouponDuration `json:"duration"`
	DurationInMonths *int64                                                                 `json:"durationInMonths"`
	ID               string                                                                 `json:"id"`
	Name             *string                                                                `json:"name"`
	PercentageOff    *int64                                                                 `json:"percentageOff"`
}

type CreateTeam200ApplicationJSONBillingSubscriptionsDiscount struct {
	Coupon CreateTeam200ApplicationJSONBillingSubscriptionsDiscountCoupon `json:"coupon"`
	ID     string                                                         `json:"id"`
}

type CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval string

const (
	CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyIntervalDay   CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval = "day"
	CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyIntervalMonth CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval = "month"
	CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyIntervalWeek  CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval = "week"
	CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyIntervalYear  CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval = "year"
)

func (e CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval) ToPointer() *CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval {
	return &e
}

func (e *CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "month":
		fallthrough
	case "week":
		fallthrough
	case "year":
		*e = CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval: %v", v)
	}
}

type CreateTeam200ApplicationJSONBillingSubscriptionsFrequency struct {
	Interval      CreateTeam200ApplicationJSONBillingSubscriptionsFrequencyInterval `json:"interval"`
	IntervalCount int64                                                             `json:"intervalCount"`
}

type CreateTeam200ApplicationJSONBillingSubscriptionsItems struct {
	Amount    int64  `json:"amount"`
	ID        string `json:"id"`
	PriceID   string `json:"priceId"`
	ProductID string `json:"productId"`
	Quantity  int64  `json:"quantity"`
}

type CreateTeam200ApplicationJSONBillingSubscriptionsPeriod struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type CreateTeam200ApplicationJSONBillingSubscriptionsTrial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type CreateTeam200ApplicationJSONBillingSubscriptions struct {
	Discount  *CreateTeam200ApplicationJSONBillingSubscriptionsDiscount `json:"discount"`
	Frequency CreateTeam200ApplicationJSONBillingSubscriptionsFrequency `json:"frequency"`
	ID        string                                                    `json:"id"`
	Items     []CreateTeam200ApplicationJSONBillingSubscriptionsItems   `json:"items"`
	Period    CreateTeam200ApplicationJSONBillingSubscriptionsPeriod    `json:"period"`
	Trial     *CreateTeam200ApplicationJSONBillingSubscriptionsTrial    `json:"trial"`
}

type CreateTeam200ApplicationJSONBillingTax struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type CreateTeam200ApplicationJSONBillingTrial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

type CreateTeam200ApplicationJSONBilling struct {
	Address                 *CreateTeam200ApplicationJSONBillingAddress           `json:"address,omitempty"`
	Cancelation             *int64                                                `json:"cancelation,omitempty"`
	Contract                *CreateTeam200ApplicationJSONBillingContract          `json:"contract,omitempty"`
	Controls                *CreateTeam200ApplicationJSONBillingControls          `json:"controls,omitempty"`
	Currency                *CreateTeam200ApplicationJSONBillingCurrency          `json:"currency,omitempty"`
	Email                   *string                                               `json:"email,omitempty"`
	InvoiceItems            *CreateTeam200ApplicationJSONBillingInvoiceItems      `json:"invoiceItems,omitempty"`
	InvoiceSettings         *CreateTeam200ApplicationJSONBillingInvoiceSettings   `json:"invoiceSettings,omitempty"`
	Language                *string                                               `json:"language,omitempty"`
	Name                    *string                                               `json:"name,omitempty"`
	OrbCustomerID           *string                                               `json:"orbCustomerId,omitempty"`
	OrbMigrationScheduledAt *int64                                                `json:"orbMigrationScheduledAt,omitempty"`
	Period                  *CreateTeam200ApplicationJSONBillingPeriod            `json:"period"`
	Plan                    CreateTeam200ApplicationJSONBillingPlan               `json:"plan"`
	Platform                *CreateTeam200ApplicationJSONBillingPlatform          `json:"platform,omitempty"`
	PricingExperiment       *CreateTeam200ApplicationJSONBillingPricingExperiment `json:"pricingExperiment,omitempty"`
	ProgramType             *CreateTeam200ApplicationJSONBillingProgramType       `json:"programType,omitempty"`
	PurchaseOrder           *string                                               `json:"purchaseOrder,omitempty"`
	Status                  *CreateTeam200ApplicationJSONBillingStatus            `json:"status,omitempty"`
	Subscriptions           []CreateTeam200ApplicationJSONBillingSubscriptions    `json:"subscriptions,omitempty"`
	SyncedAt                *int64                                                `json:"syncedAt,omitempty"`
	Tax                     *CreateTeam200ApplicationJSONBillingTax               `json:"tax,omitempty"`
	Trial                   *CreateTeam200ApplicationJSONBillingTrial             `json:"trial,omitempty"`
}

// CreateTeam200ApplicationJSON - The team was created successfully
type CreateTeam200ApplicationJSON struct {
	Billing CreateTeam200ApplicationJSONBilling `json:"billing"`
	// Id of the created team
	ID string `json:"id"`
}

type CreateTeamResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The team was created successfully
	CreateTeam200ApplicationJSONObject *CreateTeam200ApplicationJSON
}
