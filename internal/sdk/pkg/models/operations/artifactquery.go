// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/utils"
	"net/http"
)

type ArtifactQueryRequestBody struct {
	// artifact hashes
	Hashes []string `json:"hashes"`
}

func (o *ArtifactQueryRequestBody) GetHashes() []string {
	if o == nil {
		return []string{}
	}
	return o.Hashes
}

type ArtifactQueryRequest struct {
	RequestBody *ArtifactQueryRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *ArtifactQueryRequest) GetRequestBody() *ArtifactQueryRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *ArtifactQueryRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type Error struct {
	Message string `json:"message"`
}

func (o *Error) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ArtifactQuery2 struct {
	Error Error `json:"error"`
}

func (o *ArtifactQuery2) GetError() Error {
	if o == nil {
		return Error{}
	}
	return o.Error
}

type ArtifactQuery1 struct {
	Size           int64   `json:"size"`
	Tag            *string `json:"tag,omitempty"`
	TaskDurationMs int64   `json:"taskDurationMs"`
}

func (o *ArtifactQuery1) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *ArtifactQuery1) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

func (o *ArtifactQuery1) GetTaskDurationMs() int64 {
	if o == nil {
		return 0
	}
	return o.TaskDurationMs
}

type ResponseBodyType string

const (
	ResponseBodyTypeArtifactQuery1 ResponseBodyType = "artifactQuery_1"
	ResponseBodyTypeArtifactQuery2 ResponseBodyType = "artifactQuery_2"
)

type ResponseBody struct {
	ArtifactQuery1 *ArtifactQuery1
	ArtifactQuery2 *ArtifactQuery2

	Type ResponseBodyType
}

func CreateResponseBodyArtifactQuery1(artifactQuery1 ArtifactQuery1) ResponseBody {
	typ := ResponseBodyTypeArtifactQuery1

	return ResponseBody{
		ArtifactQuery1: &artifactQuery1,
		Type:           typ,
	}
}

func CreateResponseBodyArtifactQuery2(artifactQuery2 ArtifactQuery2) ResponseBody {
	typ := ResponseBodyTypeArtifactQuery2

	return ResponseBody{
		ArtifactQuery2: &artifactQuery2,
		Type:           typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {

	artifactQuery2 := new(ArtifactQuery2)
	if err := utils.UnmarshalJSON(data, &artifactQuery2, "", true, true); err == nil {
		u.ArtifactQuery2 = artifactQuery2
		u.Type = ResponseBodyTypeArtifactQuery2
		return nil
	}

	artifactQuery1 := new(ArtifactQuery1)
	if err := utils.UnmarshalJSON(data, &artifactQuery1, "", true, true); err == nil {
		u.ArtifactQuery1 = artifactQuery1
		u.Type = ResponseBodyTypeArtifactQuery1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArtifactQuery1 != nil {
		return utils.MarshalJSON(u.ArtifactQuery1, "", true)
	}

	if u.ArtifactQuery2 != nil {
		return utils.MarshalJSON(u.ArtifactQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ArtifactQueryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      map[string]ResponseBody
}

func (o *ArtifactQueryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ArtifactQueryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ArtifactQueryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ArtifactQueryResponse) GetObject() map[string]ResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
