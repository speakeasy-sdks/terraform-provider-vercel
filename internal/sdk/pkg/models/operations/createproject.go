// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

type CreateProjectRequestBodyEnvironmentVariablesTarget2 string

const (
	CreateProjectRequestBodyEnvironmentVariablesTarget2Production  CreateProjectRequestBodyEnvironmentVariablesTarget2 = "production"
	CreateProjectRequestBodyEnvironmentVariablesTarget2Preview     CreateProjectRequestBodyEnvironmentVariablesTarget2 = "preview"
	CreateProjectRequestBodyEnvironmentVariablesTarget2Development CreateProjectRequestBodyEnvironmentVariablesTarget2 = "development"
)

func (e CreateProjectRequestBodyEnvironmentVariablesTarget2) ToPointer() *CreateProjectRequestBodyEnvironmentVariablesTarget2 {
	return &e
}

func (e *CreateProjectRequestBodyEnvironmentVariablesTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectRequestBodyEnvironmentVariablesTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectRequestBodyEnvironmentVariablesTarget2: %v", v)
	}
}

// CreateProjectRequestBodyEnvironmentVariablesTarget1 - Deployment Target or Targets in which the ENV variable will be used
type CreateProjectRequestBodyEnvironmentVariablesTarget1 string

const (
	CreateProjectRequestBodyEnvironmentVariablesTarget1Production  CreateProjectRequestBodyEnvironmentVariablesTarget1 = "production"
	CreateProjectRequestBodyEnvironmentVariablesTarget1Preview     CreateProjectRequestBodyEnvironmentVariablesTarget1 = "preview"
	CreateProjectRequestBodyEnvironmentVariablesTarget1Development CreateProjectRequestBodyEnvironmentVariablesTarget1 = "development"
)

func (e CreateProjectRequestBodyEnvironmentVariablesTarget1) ToPointer() *CreateProjectRequestBodyEnvironmentVariablesTarget1 {
	return &e
}

func (e *CreateProjectRequestBodyEnvironmentVariablesTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectRequestBodyEnvironmentVariablesTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectRequestBodyEnvironmentVariablesTarget1: %v", v)
	}
}

type CreateProjectRequestBodyEnvironmentVariablesTargetType string

const (
	CreateProjectRequestBodyEnvironmentVariablesTargetTypeCreateProjectRequestBodyEnvironmentVariablesTarget1        CreateProjectRequestBodyEnvironmentVariablesTargetType = "createProject_requestBody_environmentVariables_target_1"
	CreateProjectRequestBodyEnvironmentVariablesTargetTypeArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 CreateProjectRequestBodyEnvironmentVariablesTargetType = "arrayOfcreateProject_requestBody_environmentVariables_target_2"
)

type CreateProjectRequestBodyEnvironmentVariablesTarget struct {
	CreateProjectRequestBodyEnvironmentVariablesTarget1        *CreateProjectRequestBodyEnvironmentVariablesTarget1
	ArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 []CreateProjectRequestBodyEnvironmentVariablesTarget2

	Type CreateProjectRequestBodyEnvironmentVariablesTargetType
}

func CreateCreateProjectRequestBodyEnvironmentVariablesTargetCreateProjectRequestBodyEnvironmentVariablesTarget1(createProjectRequestBodyEnvironmentVariablesTarget1 CreateProjectRequestBodyEnvironmentVariablesTarget1) CreateProjectRequestBodyEnvironmentVariablesTarget {
	typ := CreateProjectRequestBodyEnvironmentVariablesTargetTypeCreateProjectRequestBodyEnvironmentVariablesTarget1

	return CreateProjectRequestBodyEnvironmentVariablesTarget{
		CreateProjectRequestBodyEnvironmentVariablesTarget1: &createProjectRequestBodyEnvironmentVariablesTarget1,
		Type: typ,
	}
}

func CreateCreateProjectRequestBodyEnvironmentVariablesTargetArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2(arrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 []CreateProjectRequestBodyEnvironmentVariablesTarget2) CreateProjectRequestBodyEnvironmentVariablesTarget {
	typ := CreateProjectRequestBodyEnvironmentVariablesTargetTypeArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2

	return CreateProjectRequestBodyEnvironmentVariablesTarget{
		ArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2: arrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2,
		Type: typ,
	}
}

func (u *CreateProjectRequestBodyEnvironmentVariablesTarget) UnmarshalJSON(data []byte) error {

	createProjectRequestBodyEnvironmentVariablesTarget1 := new(CreateProjectRequestBodyEnvironmentVariablesTarget1)
	if err := utils.UnmarshalJSON(data, &createProjectRequestBodyEnvironmentVariablesTarget1, "", true, true); err == nil {
		u.CreateProjectRequestBodyEnvironmentVariablesTarget1 = createProjectRequestBodyEnvironmentVariablesTarget1
		u.Type = CreateProjectRequestBodyEnvironmentVariablesTargetTypeCreateProjectRequestBodyEnvironmentVariablesTarget1
		return nil
	}

	arrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 := []CreateProjectRequestBodyEnvironmentVariablesTarget2{}
	if err := utils.UnmarshalJSON(data, &arrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2, "", true, true); err == nil {
		u.ArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 = arrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2
		u.Type = CreateProjectRequestBodyEnvironmentVariablesTargetTypeArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectRequestBodyEnvironmentVariablesTarget) MarshalJSON() ([]byte, error) {
	if u.CreateProjectRequestBodyEnvironmentVariablesTarget1 != nil {
		return utils.MarshalJSON(u.CreateProjectRequestBodyEnvironmentVariablesTarget1, "", true)
	}

	if u.ArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2 != nil {
		return utils.MarshalJSON(u.ArrayOfcreateProjectRequestBodyEnvironmentVariablesTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateProjectRequestBodyEnvironmentVariablesType - Type of the ENV variable
type CreateProjectRequestBodyEnvironmentVariablesType string

const (
	CreateProjectRequestBodyEnvironmentVariablesTypeSystem    CreateProjectRequestBodyEnvironmentVariablesType = "system"
	CreateProjectRequestBodyEnvironmentVariablesTypeSecret    CreateProjectRequestBodyEnvironmentVariablesType = "secret"
	CreateProjectRequestBodyEnvironmentVariablesTypeEncrypted CreateProjectRequestBodyEnvironmentVariablesType = "encrypted"
	CreateProjectRequestBodyEnvironmentVariablesTypePlain     CreateProjectRequestBodyEnvironmentVariablesType = "plain"
)

func (e CreateProjectRequestBodyEnvironmentVariablesType) ToPointer() *CreateProjectRequestBodyEnvironmentVariablesType {
	return &e
}

func (e *CreateProjectRequestBodyEnvironmentVariablesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		*e = CreateProjectRequestBodyEnvironmentVariablesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectRequestBodyEnvironmentVariablesType: %v", v)
	}
}

type CreateProjectRequestBodyEnvironmentVariables struct {
	// The git branch of the environment variable
	GitBranch *string `json:"gitBranch,omitempty"`
	// Name of the ENV variable
	Key string `json:"key"`
	// Deployment Target or Targets in which the ENV variable will be used
	Target CreateProjectRequestBodyEnvironmentVariablesTarget `json:"target"`
	// Type of the ENV variable
	Type *CreateProjectRequestBodyEnvironmentVariablesType `json:"type,omitempty"`
	// Value for the ENV variable
	Value string `json:"value"`
}

func (o *CreateProjectRequestBodyEnvironmentVariables) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectRequestBodyEnvironmentVariables) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectRequestBodyEnvironmentVariables) GetTarget() CreateProjectRequestBodyEnvironmentVariablesTarget {
	if o == nil {
		return CreateProjectRequestBodyEnvironmentVariablesTarget{}
	}
	return o.Target
}

func (o *CreateProjectRequestBodyEnvironmentVariables) GetType() *CreateProjectRequestBodyEnvironmentVariablesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectRequestBodyEnvironmentVariables) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateProjectRequestBodyFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateProjectRequestBodyFramework string

const (
	CreateProjectRequestBodyFrameworkLessThanNilGreaterThan CreateProjectRequestBodyFramework = "<nil>"
	CreateProjectRequestBodyFrameworkBlitzjs                CreateProjectRequestBodyFramework = "blitzjs"
	CreateProjectRequestBodyFrameworkNextjs                 CreateProjectRequestBodyFramework = "nextjs"
	CreateProjectRequestBodyFrameworkGatsby                 CreateProjectRequestBodyFramework = "gatsby"
	CreateProjectRequestBodyFrameworkRemix                  CreateProjectRequestBodyFramework = "remix"
	CreateProjectRequestBodyFrameworkAstro                  CreateProjectRequestBodyFramework = "astro"
	CreateProjectRequestBodyFrameworkHexo                   CreateProjectRequestBodyFramework = "hexo"
	CreateProjectRequestBodyFrameworkEleventy               CreateProjectRequestBodyFramework = "eleventy"
	CreateProjectRequestBodyFrameworkDocusaurus2            CreateProjectRequestBodyFramework = "docusaurus-2"
	CreateProjectRequestBodyFrameworkDocusaurus             CreateProjectRequestBodyFramework = "docusaurus"
	CreateProjectRequestBodyFrameworkPreact                 CreateProjectRequestBodyFramework = "preact"
	CreateProjectRequestBodyFrameworkSolidstart             CreateProjectRequestBodyFramework = "solidstart"
	CreateProjectRequestBodyFrameworkDojo                   CreateProjectRequestBodyFramework = "dojo"
	CreateProjectRequestBodyFrameworkEmber                  CreateProjectRequestBodyFramework = "ember"
	CreateProjectRequestBodyFrameworkVue                    CreateProjectRequestBodyFramework = "vue"
	CreateProjectRequestBodyFrameworkScully                 CreateProjectRequestBodyFramework = "scully"
	CreateProjectRequestBodyFrameworkIonicAngular           CreateProjectRequestBodyFramework = "ionic-angular"
	CreateProjectRequestBodyFrameworkAngular                CreateProjectRequestBodyFramework = "angular"
	CreateProjectRequestBodyFrameworkPolymer                CreateProjectRequestBodyFramework = "polymer"
	CreateProjectRequestBodyFrameworkSvelte                 CreateProjectRequestBodyFramework = "svelte"
	CreateProjectRequestBodyFrameworkSveltekit              CreateProjectRequestBodyFramework = "sveltekit"
	CreateProjectRequestBodyFrameworkSveltekit1             CreateProjectRequestBodyFramework = "sveltekit-1"
	CreateProjectRequestBodyFrameworkIonicReact             CreateProjectRequestBodyFramework = "ionic-react"
	CreateProjectRequestBodyFrameworkCreateReactApp         CreateProjectRequestBodyFramework = "create-react-app"
	CreateProjectRequestBodyFrameworkGridsome               CreateProjectRequestBodyFramework = "gridsome"
	CreateProjectRequestBodyFrameworkUmijs                  CreateProjectRequestBodyFramework = "umijs"
	CreateProjectRequestBodyFrameworkSapper                 CreateProjectRequestBodyFramework = "sapper"
	CreateProjectRequestBodyFrameworkSaber                  CreateProjectRequestBodyFramework = "saber"
	CreateProjectRequestBodyFrameworkStencil                CreateProjectRequestBodyFramework = "stencil"
	CreateProjectRequestBodyFrameworkNuxtjs                 CreateProjectRequestBodyFramework = "nuxtjs"
	CreateProjectRequestBodyFrameworkRedwoodjs              CreateProjectRequestBodyFramework = "redwoodjs"
	CreateProjectRequestBodyFrameworkHugo                   CreateProjectRequestBodyFramework = "hugo"
	CreateProjectRequestBodyFrameworkJekyll                 CreateProjectRequestBodyFramework = "jekyll"
	CreateProjectRequestBodyFrameworkBrunch                 CreateProjectRequestBodyFramework = "brunch"
	CreateProjectRequestBodyFrameworkMiddleman              CreateProjectRequestBodyFramework = "middleman"
	CreateProjectRequestBodyFrameworkZola                   CreateProjectRequestBodyFramework = "zola"
	CreateProjectRequestBodyFrameworkHydrogen               CreateProjectRequestBodyFramework = "hydrogen"
	CreateProjectRequestBodyFrameworkVite                   CreateProjectRequestBodyFramework = "vite"
	CreateProjectRequestBodyFrameworkVitepress              CreateProjectRequestBodyFramework = "vitepress"
	CreateProjectRequestBodyFrameworkVuepress               CreateProjectRequestBodyFramework = "vuepress"
	CreateProjectRequestBodyFrameworkParcel                 CreateProjectRequestBodyFramework = "parcel"
	CreateProjectRequestBodyFrameworkSanity                 CreateProjectRequestBodyFramework = "sanity"
	CreateProjectRequestBodyFrameworkStorybook              CreateProjectRequestBodyFramework = "storybook"
)

func (e CreateProjectRequestBodyFramework) ToPointer() *CreateProjectRequestBodyFramework {
	return &e
}

func (e *CreateProjectRequestBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectRequestBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectRequestBodyFramework: %v", v)
	}
}

// CreateProjectRequestBodyGitRepositoryType - The Git Provider of the repository
type CreateProjectRequestBodyGitRepositoryType string

const (
	CreateProjectRequestBodyGitRepositoryTypeGithub    CreateProjectRequestBodyGitRepositoryType = "github"
	CreateProjectRequestBodyGitRepositoryTypeGitlab    CreateProjectRequestBodyGitRepositoryType = "gitlab"
	CreateProjectRequestBodyGitRepositoryTypeBitbucket CreateProjectRequestBodyGitRepositoryType = "bitbucket"
)

func (e CreateProjectRequestBodyGitRepositoryType) ToPointer() *CreateProjectRequestBodyGitRepositoryType {
	return &e
}

func (e *CreateProjectRequestBodyGitRepositoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = CreateProjectRequestBodyGitRepositoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectRequestBodyGitRepositoryType: %v", v)
	}
}

// CreateProjectRequestBodyGitRepository - The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
type CreateProjectRequestBodyGitRepository struct {
	// The name of the git repository. For example: \"vercel/next.js\"
	Repo string `json:"repo"`
	// The Git Provider of the repository
	Type CreateProjectRequestBodyGitRepositoryType `json:"type"`
}

func (o *CreateProjectRequestBodyGitRepository) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateProjectRequestBodyGitRepository) GetType() CreateProjectRequestBodyGitRepositoryType {
	if o == nil {
		return CreateProjectRequestBodyGitRepositoryType("")
	}
	return o.Type
}

type CreateProjectRequestBody struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// Collection of ENV Variables the Project will use
	EnvironmentVariables []CreateProjectRequestBodyEnvironmentVariables `json:"environmentVariables,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateProjectRequestBodyFramework `json:"framework,omitempty"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
	GitRepository *CreateProjectRequestBodyGitRepository `json:"gitRepository,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name string `json:"name"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
}

func (o *CreateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectRequestBody) GetEnvironmentVariables() []CreateProjectRequestBodyEnvironmentVariables {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateProjectRequestBody) GetFramework() *CreateProjectRequestBodyFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectRequestBody) GetGitRepository() *CreateProjectRequestBodyGitRepository {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

type CreateProjectRequest struct {
	RequestBody *CreateProjectRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateProjectRequest) GetRequestBody() *CreateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CreateProject200ApplicationJSONAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

func (o *CreateProject200ApplicationJSONAnalytics) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProject200ApplicationJSONAnalytics) GetDisabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.DisabledAt
}

func (o *CreateProject200ApplicationJSONAnalytics) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *CreateProject200ApplicationJSONAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONAnalytics) GetPaidAt() *int64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreateProject200ApplicationJSONAnalytics) GetSampleRatePercent() *int64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *CreateProject200ApplicationJSONAnalytics) GetSpendLimitInDollars() *int64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type CreateProject200ApplicationJSONCronsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *CreateProject200ApplicationJSONCronsDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateProject200ApplicationJSONCronsDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateProject200ApplicationJSONCronsDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateProject200ApplicationJSONCrons struct {
	Definitions []CreateProject200ApplicationJSONCronsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

func (o *CreateProject200ApplicationJSONCrons) GetDefinitions() []CreateProject200ApplicationJSONCronsDefinitions {
	if o == nil {
		return []CreateProject200ApplicationJSONCronsDefinitions{}
	}
	return o.Definitions
}

func (o *CreateProject200ApplicationJSONCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateProject200ApplicationJSONCrons) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProject200ApplicationJSONCrons) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *CreateProject200ApplicationJSONCrons) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type CreateProject200ApplicationJSONDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

func (o *CreateProject200ApplicationJSONDataCache) GetStorageSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *CreateProject200ApplicationJSONDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *CreateProject200ApplicationJSONDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type CreateProject200ApplicationJSONEnvContentHint12Type string

const (
	CreateProject200ApplicationJSONEnvContentHint12TypePostgresDatabase CreateProject200ApplicationJSONEnvContentHint12Type = "postgres-database"
)

func (e CreateProject200ApplicationJSONEnvContentHint12Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint12Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProject200ApplicationJSONEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint12Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint12 struct {
	StoreID string                                              `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint12Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint12) GetType() CreateProject200ApplicationJSONEnvContentHint12Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint12Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint11Type string

const (
	CreateProject200ApplicationJSONEnvContentHint11TypePostgresPassword CreateProject200ApplicationJSONEnvContentHint11Type = "postgres-password"
)

func (e CreateProject200ApplicationJSONEnvContentHint11Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint11Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProject200ApplicationJSONEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint11Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint11 struct {
	StoreID string                                              `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint11Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint11) GetType() CreateProject200ApplicationJSONEnvContentHint11Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint11Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint10Type string

const (
	CreateProject200ApplicationJSONEnvContentHint10TypePostgresHost CreateProject200ApplicationJSONEnvContentHint10Type = "postgres-host"
)

func (e CreateProject200ApplicationJSONEnvContentHint10Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint10Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProject200ApplicationJSONEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint10Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint10 struct {
	StoreID string                                              `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint10Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint10) GetType() CreateProject200ApplicationJSONEnvContentHint10Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint10Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint9Type string

const (
	CreateProject200ApplicationJSONEnvContentHint9TypePostgresUser CreateProject200ApplicationJSONEnvContentHint9Type = "postgres-user"
)

func (e CreateProject200ApplicationJSONEnvContentHint9Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint9Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProject200ApplicationJSONEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint9Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint9 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint9Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint9) GetType() CreateProject200ApplicationJSONEnvContentHint9Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint9Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint8Type string

const (
	CreateProject200ApplicationJSONEnvContentHint8TypePostgresPrismaURL CreateProject200ApplicationJSONEnvContentHint8Type = "postgres-prisma-url"
)

func (e CreateProject200ApplicationJSONEnvContentHint8Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint8Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProject200ApplicationJSONEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint8Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint8 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint8Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint8) GetType() CreateProject200ApplicationJSONEnvContentHint8Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint8Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint7Type string

const (
	CreateProject200ApplicationJSONEnvContentHint7TypePostgresURLNonPooling CreateProject200ApplicationJSONEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e CreateProject200ApplicationJSONEnvContentHint7Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint7Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProject200ApplicationJSONEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint7Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint7 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint7Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint7) GetType() CreateProject200ApplicationJSONEnvContentHint7Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint7Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint6Type string

const (
	CreateProject200ApplicationJSONEnvContentHint6TypePostgresURL CreateProject200ApplicationJSONEnvContentHint6Type = "postgres-url"
)

func (e CreateProject200ApplicationJSONEnvContentHint6Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint6Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProject200ApplicationJSONEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint6Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint6 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint6Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint6) GetType() CreateProject200ApplicationJSONEnvContentHint6Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint6Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint5Type string

const (
	CreateProject200ApplicationJSONEnvContentHint5TypeBlobReadWriteToken CreateProject200ApplicationJSONEnvContentHint5Type = "blob-read-write-token"
)

func (e CreateProject200ApplicationJSONEnvContentHint5Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint5Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProject200ApplicationJSONEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint5Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint5 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint5Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint5) GetType() CreateProject200ApplicationJSONEnvContentHint5Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint5Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint4Type string

const (
	CreateProject200ApplicationJSONEnvContentHint4TypeRedisRestAPIReadOnlyToken CreateProject200ApplicationJSONEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e CreateProject200ApplicationJSONEnvContentHint4Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint4Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProject200ApplicationJSONEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint4Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint4 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint4Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint4) GetType() CreateProject200ApplicationJSONEnvContentHint4Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint4Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint3Type string

const (
	CreateProject200ApplicationJSONEnvContentHint3TypeRedisRestAPIToken CreateProject200ApplicationJSONEnvContentHint3Type = "redis-rest-api-token"
)

func (e CreateProject200ApplicationJSONEnvContentHint3Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint3Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProject200ApplicationJSONEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint3Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint3 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint3Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint3) GetType() CreateProject200ApplicationJSONEnvContentHint3Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint3Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint2Type string

const (
	CreateProject200ApplicationJSONEnvContentHint2TypeRedisRestAPIURL CreateProject200ApplicationJSONEnvContentHint2Type = "redis-rest-api-url"
)

func (e CreateProject200ApplicationJSONEnvContentHint2Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint2Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProject200ApplicationJSONEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint2Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint2 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint2Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint2) GetType() CreateProject200ApplicationJSONEnvContentHint2Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint2Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHint1Type string

const (
	CreateProject200ApplicationJSONEnvContentHint1TypeRedisURL CreateProject200ApplicationJSONEnvContentHint1Type = "redis-url"
)

func (e CreateProject200ApplicationJSONEnvContentHint1Type) ToPointer() *CreateProject200ApplicationJSONEnvContentHint1Type {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProject200ApplicationJSONEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvContentHint1Type: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvContentHint1 struct {
	StoreID string                                             `json:"storeId"`
	Type    CreateProject200ApplicationJSONEnvContentHint1Type `json:"type"`
}

func (o *CreateProject200ApplicationJSONEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject200ApplicationJSONEnvContentHint1) GetType() CreateProject200ApplicationJSONEnvContentHint1Type {
	if o == nil {
		return CreateProject200ApplicationJSONEnvContentHint1Type("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONEnvContentHintType string

const (
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint1  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_1"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint2  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_2"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint3  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_3"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint4  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_4"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint5  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_5"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint6  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_6"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint7  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_7"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint8  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_8"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint9  CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_9"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint10 CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_10"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint11 CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_11"
	CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint12 CreateProject200ApplicationJSONEnvContentHintType = "createProject_200ApplicationJSON_env_contentHint_12"
)

type CreateProject200ApplicationJSONEnvContentHint struct {
	CreateProject200ApplicationJSONEnvContentHint1  *CreateProject200ApplicationJSONEnvContentHint1
	CreateProject200ApplicationJSONEnvContentHint2  *CreateProject200ApplicationJSONEnvContentHint2
	CreateProject200ApplicationJSONEnvContentHint3  *CreateProject200ApplicationJSONEnvContentHint3
	CreateProject200ApplicationJSONEnvContentHint4  *CreateProject200ApplicationJSONEnvContentHint4
	CreateProject200ApplicationJSONEnvContentHint5  *CreateProject200ApplicationJSONEnvContentHint5
	CreateProject200ApplicationJSONEnvContentHint6  *CreateProject200ApplicationJSONEnvContentHint6
	CreateProject200ApplicationJSONEnvContentHint7  *CreateProject200ApplicationJSONEnvContentHint7
	CreateProject200ApplicationJSONEnvContentHint8  *CreateProject200ApplicationJSONEnvContentHint8
	CreateProject200ApplicationJSONEnvContentHint9  *CreateProject200ApplicationJSONEnvContentHint9
	CreateProject200ApplicationJSONEnvContentHint10 *CreateProject200ApplicationJSONEnvContentHint10
	CreateProject200ApplicationJSONEnvContentHint11 *CreateProject200ApplicationJSONEnvContentHint11
	CreateProject200ApplicationJSONEnvContentHint12 *CreateProject200ApplicationJSONEnvContentHint12

	Type CreateProject200ApplicationJSONEnvContentHintType
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint1(createProject200ApplicationJSONEnvContentHint1 CreateProject200ApplicationJSONEnvContentHint1) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint1

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint1: &createProject200ApplicationJSONEnvContentHint1,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint2(createProject200ApplicationJSONEnvContentHint2 CreateProject200ApplicationJSONEnvContentHint2) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint2

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint2: &createProject200ApplicationJSONEnvContentHint2,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint3(createProject200ApplicationJSONEnvContentHint3 CreateProject200ApplicationJSONEnvContentHint3) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint3

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint3: &createProject200ApplicationJSONEnvContentHint3,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint4(createProject200ApplicationJSONEnvContentHint4 CreateProject200ApplicationJSONEnvContentHint4) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint4

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint4: &createProject200ApplicationJSONEnvContentHint4,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint5(createProject200ApplicationJSONEnvContentHint5 CreateProject200ApplicationJSONEnvContentHint5) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint5

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint5: &createProject200ApplicationJSONEnvContentHint5,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint6(createProject200ApplicationJSONEnvContentHint6 CreateProject200ApplicationJSONEnvContentHint6) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint6

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint6: &createProject200ApplicationJSONEnvContentHint6,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint7(createProject200ApplicationJSONEnvContentHint7 CreateProject200ApplicationJSONEnvContentHint7) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint7

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint7: &createProject200ApplicationJSONEnvContentHint7,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint8(createProject200ApplicationJSONEnvContentHint8 CreateProject200ApplicationJSONEnvContentHint8) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint8

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint8: &createProject200ApplicationJSONEnvContentHint8,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint9(createProject200ApplicationJSONEnvContentHint9 CreateProject200ApplicationJSONEnvContentHint9) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint9

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint9: &createProject200ApplicationJSONEnvContentHint9,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint10(createProject200ApplicationJSONEnvContentHint10 CreateProject200ApplicationJSONEnvContentHint10) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint10

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint10: &createProject200ApplicationJSONEnvContentHint10,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint11(createProject200ApplicationJSONEnvContentHint11 CreateProject200ApplicationJSONEnvContentHint11) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint11

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint11: &createProject200ApplicationJSONEnvContentHint11,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvContentHintCreateProject200ApplicationJSONEnvContentHint12(createProject200ApplicationJSONEnvContentHint12 CreateProject200ApplicationJSONEnvContentHint12) CreateProject200ApplicationJSONEnvContentHint {
	typ := CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint12

	return CreateProject200ApplicationJSONEnvContentHint{
		CreateProject200ApplicationJSONEnvContentHint12: &createProject200ApplicationJSONEnvContentHint12,
		Type: typ,
	}
}

func (u *CreateProject200ApplicationJSONEnvContentHint) UnmarshalJSON(data []byte) error {

	createProject200ApplicationJSONEnvContentHint1 := new(CreateProject200ApplicationJSONEnvContentHint1)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint1, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint1 = createProject200ApplicationJSONEnvContentHint1
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint1
		return nil
	}

	createProject200ApplicationJSONEnvContentHint2 := new(CreateProject200ApplicationJSONEnvContentHint2)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint2, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint2 = createProject200ApplicationJSONEnvContentHint2
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint2
		return nil
	}

	createProject200ApplicationJSONEnvContentHint3 := new(CreateProject200ApplicationJSONEnvContentHint3)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint3, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint3 = createProject200ApplicationJSONEnvContentHint3
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint3
		return nil
	}

	createProject200ApplicationJSONEnvContentHint4 := new(CreateProject200ApplicationJSONEnvContentHint4)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint4, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint4 = createProject200ApplicationJSONEnvContentHint4
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint4
		return nil
	}

	createProject200ApplicationJSONEnvContentHint5 := new(CreateProject200ApplicationJSONEnvContentHint5)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint5, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint5 = createProject200ApplicationJSONEnvContentHint5
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint5
		return nil
	}

	createProject200ApplicationJSONEnvContentHint6 := new(CreateProject200ApplicationJSONEnvContentHint6)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint6, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint6 = createProject200ApplicationJSONEnvContentHint6
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint6
		return nil
	}

	createProject200ApplicationJSONEnvContentHint7 := new(CreateProject200ApplicationJSONEnvContentHint7)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint7, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint7 = createProject200ApplicationJSONEnvContentHint7
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint7
		return nil
	}

	createProject200ApplicationJSONEnvContentHint8 := new(CreateProject200ApplicationJSONEnvContentHint8)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint8, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint8 = createProject200ApplicationJSONEnvContentHint8
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint8
		return nil
	}

	createProject200ApplicationJSONEnvContentHint9 := new(CreateProject200ApplicationJSONEnvContentHint9)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint9, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint9 = createProject200ApplicationJSONEnvContentHint9
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint9
		return nil
	}

	createProject200ApplicationJSONEnvContentHint10 := new(CreateProject200ApplicationJSONEnvContentHint10)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint10, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint10 = createProject200ApplicationJSONEnvContentHint10
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint10
		return nil
	}

	createProject200ApplicationJSONEnvContentHint11 := new(CreateProject200ApplicationJSONEnvContentHint11)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint11, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint11 = createProject200ApplicationJSONEnvContentHint11
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint11
		return nil
	}

	createProject200ApplicationJSONEnvContentHint12 := new(CreateProject200ApplicationJSONEnvContentHint12)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvContentHint12, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvContentHint12 = createProject200ApplicationJSONEnvContentHint12
		u.Type = CreateProject200ApplicationJSONEnvContentHintTypeCreateProject200ApplicationJSONEnvContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProject200ApplicationJSONEnvContentHint1 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint1, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint2 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint2, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint3 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint3, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint4 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint4, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint5 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint5, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint6 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint6, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint7 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint7, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint8 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint8, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint9 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint9, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint10 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint10, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint11 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint11, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvContentHint12 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONEnvTarget2 string

const (
	CreateProject200ApplicationJSONEnvTarget2Production  CreateProject200ApplicationJSONEnvTarget2 = "production"
	CreateProject200ApplicationJSONEnvTarget2Preview     CreateProject200ApplicationJSONEnvTarget2 = "preview"
	CreateProject200ApplicationJSONEnvTarget2Development CreateProject200ApplicationJSONEnvTarget2 = "development"
)

func (e CreateProject200ApplicationJSONEnvTarget2) ToPointer() *CreateProject200ApplicationJSONEnvTarget2 {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProject200ApplicationJSONEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvTarget2: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvTarget1 string

const (
	CreateProject200ApplicationJSONEnvTarget1Production  CreateProject200ApplicationJSONEnvTarget1 = "production"
	CreateProject200ApplicationJSONEnvTarget1Preview     CreateProject200ApplicationJSONEnvTarget1 = "preview"
	CreateProject200ApplicationJSONEnvTarget1Development CreateProject200ApplicationJSONEnvTarget1 = "development"
)

func (e CreateProject200ApplicationJSONEnvTarget1) ToPointer() *CreateProject200ApplicationJSONEnvTarget1 {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProject200ApplicationJSONEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvTarget1: %v", v)
	}
}

type CreateProject200ApplicationJSONEnvTargetType string

const (
	CreateProject200ApplicationJSONEnvTargetTypeArrayOfcreateProject200ApplicationJSONEnvTarget1 CreateProject200ApplicationJSONEnvTargetType = "arrayOfcreateProject_200ApplicationJSON_env_target_1"
	CreateProject200ApplicationJSONEnvTargetTypeCreateProject200ApplicationJSONEnvTarget2        CreateProject200ApplicationJSONEnvTargetType = "createProject_200ApplicationJSON_env_target_2"
)

type CreateProject200ApplicationJSONEnvTarget struct {
	ArrayOfcreateProject200ApplicationJSONEnvTarget1 []CreateProject200ApplicationJSONEnvTarget1
	CreateProject200ApplicationJSONEnvTarget2        *CreateProject200ApplicationJSONEnvTarget2

	Type CreateProject200ApplicationJSONEnvTargetType
}

func CreateCreateProject200ApplicationJSONEnvTargetArrayOfcreateProject200ApplicationJSONEnvTarget1(arrayOfcreateProject200ApplicationJSONEnvTarget1 []CreateProject200ApplicationJSONEnvTarget1) CreateProject200ApplicationJSONEnvTarget {
	typ := CreateProject200ApplicationJSONEnvTargetTypeArrayOfcreateProject200ApplicationJSONEnvTarget1

	return CreateProject200ApplicationJSONEnvTarget{
		ArrayOfcreateProject200ApplicationJSONEnvTarget1: arrayOfcreateProject200ApplicationJSONEnvTarget1,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONEnvTargetCreateProject200ApplicationJSONEnvTarget2(createProject200ApplicationJSONEnvTarget2 CreateProject200ApplicationJSONEnvTarget2) CreateProject200ApplicationJSONEnvTarget {
	typ := CreateProject200ApplicationJSONEnvTargetTypeCreateProject200ApplicationJSONEnvTarget2

	return CreateProject200ApplicationJSONEnvTarget{
		CreateProject200ApplicationJSONEnvTarget2: &createProject200ApplicationJSONEnvTarget2,
		Type: typ,
	}
}

func (u *CreateProject200ApplicationJSONEnvTarget) UnmarshalJSON(data []byte) error {

	arrayOfcreateProject200ApplicationJSONEnvTarget1 := []CreateProject200ApplicationJSONEnvTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfcreateProject200ApplicationJSONEnvTarget1, "", true, true); err == nil {
		u.ArrayOfcreateProject200ApplicationJSONEnvTarget1 = arrayOfcreateProject200ApplicationJSONEnvTarget1
		u.Type = CreateProject200ApplicationJSONEnvTargetTypeArrayOfcreateProject200ApplicationJSONEnvTarget1
		return nil
	}

	createProject200ApplicationJSONEnvTarget2 := new(CreateProject200ApplicationJSONEnvTarget2)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONEnvTarget2, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONEnvTarget2 = createProject200ApplicationJSONEnvTarget2
		u.Type = CreateProject200ApplicationJSONEnvTargetTypeCreateProject200ApplicationJSONEnvTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfcreateProject200ApplicationJSONEnvTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfcreateProject200ApplicationJSONEnvTarget1, "", true)
	}

	if u.CreateProject200ApplicationJSONEnvTarget2 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONEnvType string

const (
	CreateProject200ApplicationJSONEnvTypeSystem    CreateProject200ApplicationJSONEnvType = "system"
	CreateProject200ApplicationJSONEnvTypeSecret    CreateProject200ApplicationJSONEnvType = "secret"
	CreateProject200ApplicationJSONEnvTypeEncrypted CreateProject200ApplicationJSONEnvType = "encrypted"
	CreateProject200ApplicationJSONEnvTypePlain     CreateProject200ApplicationJSONEnvType = "plain"
	CreateProject200ApplicationJSONEnvTypeSensitive CreateProject200ApplicationJSONEnvType = "sensitive"
)

func (e CreateProject200ApplicationJSONEnvType) ToPointer() *CreateProject200ApplicationJSONEnvType {
	return &e
}

func (e *CreateProject200ApplicationJSONEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProject200ApplicationJSONEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONEnvType: %v", v)
	}
}

type CreateProject200ApplicationJSONEnv struct {
	ConfigurationID *string                                        `json:"configurationId,omitempty"`
	ContentHint     *CreateProject200ApplicationJSONEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                         `json:"createdAt,omitempty"`
	CreatedBy       *string                                        `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                     `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                   `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                   `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                   `json:"gitBranch,omitempty"`
	ID                *string                                   `json:"id,omitempty"`
	Key               string                                    `json:"key"`
	Target            *CreateProject200ApplicationJSONEnvTarget `json:"target,omitempty"`
	Type              CreateProject200ApplicationJSONEnvType    `json:"type"`
	UpdatedAt         *int64                                    `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                   `json:"updatedBy,omitempty"`
	Value             string                                    `json:"value"`
}

func (o *CreateProject200ApplicationJSONEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProject200ApplicationJSONEnv) GetContentHint() *CreateProject200ApplicationJSONEnvContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProject200ApplicationJSONEnv) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProject200ApplicationJSONEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProject200ApplicationJSONEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProject200ApplicationJSONEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProject200ApplicationJSONEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProject200ApplicationJSONEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProject200ApplicationJSONEnv) GetTarget() *CreateProject200ApplicationJSONEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProject200ApplicationJSONEnv) GetType() CreateProject200ApplicationJSONEnvType {
	if o == nil {
		return CreateProject200ApplicationJSONEnvType("")
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONEnv) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProject200ApplicationJSONEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProject200ApplicationJSONEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProject200ApplicationJSONFramework string

const (
	CreateProject200ApplicationJSONFrameworkBlitzjs        CreateProject200ApplicationJSONFramework = "blitzjs"
	CreateProject200ApplicationJSONFrameworkNextjs         CreateProject200ApplicationJSONFramework = "nextjs"
	CreateProject200ApplicationJSONFrameworkGatsby         CreateProject200ApplicationJSONFramework = "gatsby"
	CreateProject200ApplicationJSONFrameworkRemix          CreateProject200ApplicationJSONFramework = "remix"
	CreateProject200ApplicationJSONFrameworkAstro          CreateProject200ApplicationJSONFramework = "astro"
	CreateProject200ApplicationJSONFrameworkHexo           CreateProject200ApplicationJSONFramework = "hexo"
	CreateProject200ApplicationJSONFrameworkEleventy       CreateProject200ApplicationJSONFramework = "eleventy"
	CreateProject200ApplicationJSONFrameworkDocusaurus2    CreateProject200ApplicationJSONFramework = "docusaurus-2"
	CreateProject200ApplicationJSONFrameworkDocusaurus     CreateProject200ApplicationJSONFramework = "docusaurus"
	CreateProject200ApplicationJSONFrameworkPreact         CreateProject200ApplicationJSONFramework = "preact"
	CreateProject200ApplicationJSONFrameworkSolidstart     CreateProject200ApplicationJSONFramework = "solidstart"
	CreateProject200ApplicationJSONFrameworkDojo           CreateProject200ApplicationJSONFramework = "dojo"
	CreateProject200ApplicationJSONFrameworkEmber          CreateProject200ApplicationJSONFramework = "ember"
	CreateProject200ApplicationJSONFrameworkVue            CreateProject200ApplicationJSONFramework = "vue"
	CreateProject200ApplicationJSONFrameworkScully         CreateProject200ApplicationJSONFramework = "scully"
	CreateProject200ApplicationJSONFrameworkIonicAngular   CreateProject200ApplicationJSONFramework = "ionic-angular"
	CreateProject200ApplicationJSONFrameworkAngular        CreateProject200ApplicationJSONFramework = "angular"
	CreateProject200ApplicationJSONFrameworkPolymer        CreateProject200ApplicationJSONFramework = "polymer"
	CreateProject200ApplicationJSONFrameworkSvelte         CreateProject200ApplicationJSONFramework = "svelte"
	CreateProject200ApplicationJSONFrameworkSveltekit      CreateProject200ApplicationJSONFramework = "sveltekit"
	CreateProject200ApplicationJSONFrameworkSveltekit1     CreateProject200ApplicationJSONFramework = "sveltekit-1"
	CreateProject200ApplicationJSONFrameworkIonicReact     CreateProject200ApplicationJSONFramework = "ionic-react"
	CreateProject200ApplicationJSONFrameworkCreateReactApp CreateProject200ApplicationJSONFramework = "create-react-app"
	CreateProject200ApplicationJSONFrameworkGridsome       CreateProject200ApplicationJSONFramework = "gridsome"
	CreateProject200ApplicationJSONFrameworkUmijs          CreateProject200ApplicationJSONFramework = "umijs"
	CreateProject200ApplicationJSONFrameworkSapper         CreateProject200ApplicationJSONFramework = "sapper"
	CreateProject200ApplicationJSONFrameworkSaber          CreateProject200ApplicationJSONFramework = "saber"
	CreateProject200ApplicationJSONFrameworkStencil        CreateProject200ApplicationJSONFramework = "stencil"
	CreateProject200ApplicationJSONFrameworkNuxtjs         CreateProject200ApplicationJSONFramework = "nuxtjs"
	CreateProject200ApplicationJSONFrameworkRedwoodjs      CreateProject200ApplicationJSONFramework = "redwoodjs"
	CreateProject200ApplicationJSONFrameworkHugo           CreateProject200ApplicationJSONFramework = "hugo"
	CreateProject200ApplicationJSONFrameworkJekyll         CreateProject200ApplicationJSONFramework = "jekyll"
	CreateProject200ApplicationJSONFrameworkBrunch         CreateProject200ApplicationJSONFramework = "brunch"
	CreateProject200ApplicationJSONFrameworkMiddleman      CreateProject200ApplicationJSONFramework = "middleman"
	CreateProject200ApplicationJSONFrameworkZola           CreateProject200ApplicationJSONFramework = "zola"
	CreateProject200ApplicationJSONFrameworkHydrogen       CreateProject200ApplicationJSONFramework = "hydrogen"
	CreateProject200ApplicationJSONFrameworkVite           CreateProject200ApplicationJSONFramework = "vite"
	CreateProject200ApplicationJSONFrameworkVitepress      CreateProject200ApplicationJSONFramework = "vitepress"
	CreateProject200ApplicationJSONFrameworkVuepress       CreateProject200ApplicationJSONFramework = "vuepress"
	CreateProject200ApplicationJSONFrameworkParcel         CreateProject200ApplicationJSONFramework = "parcel"
	CreateProject200ApplicationJSONFrameworkSanity         CreateProject200ApplicationJSONFramework = "sanity"
	CreateProject200ApplicationJSONFrameworkStorybook      CreateProject200ApplicationJSONFramework = "storybook"
)

func (e CreateProject200ApplicationJSONFramework) ToPointer() *CreateProject200ApplicationJSONFramework {
	return &e
}

func (e *CreateProject200ApplicationJSONFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProject200ApplicationJSONFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONFramework: %v", v)
	}
}

type CreateProject200ApplicationJSONGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *CreateProject200ApplicationJSONGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *CreateProject200ApplicationJSONGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type CreateProject200ApplicationJSONLastAliasRequestJobStatus string

const (
	CreateProject200ApplicationJSONLastAliasRequestJobStatusSucceeded  CreateProject200ApplicationJSONLastAliasRequestJobStatus = "succeeded"
	CreateProject200ApplicationJSONLastAliasRequestJobStatusFailed     CreateProject200ApplicationJSONLastAliasRequestJobStatus = "failed"
	CreateProject200ApplicationJSONLastAliasRequestJobStatusSkipped    CreateProject200ApplicationJSONLastAliasRequestJobStatus = "skipped"
	CreateProject200ApplicationJSONLastAliasRequestJobStatusPending    CreateProject200ApplicationJSONLastAliasRequestJobStatus = "pending"
	CreateProject200ApplicationJSONLastAliasRequestJobStatusInProgress CreateProject200ApplicationJSONLastAliasRequestJobStatus = "in-progress"
)

func (e CreateProject200ApplicationJSONLastAliasRequestJobStatus) ToPointer() *CreateProject200ApplicationJSONLastAliasRequestJobStatus {
	return &e
}

func (e *CreateProject200ApplicationJSONLastAliasRequestJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = CreateProject200ApplicationJSONLastAliasRequestJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLastAliasRequestJobStatus: %v", v)
	}
}

type CreateProject200ApplicationJSONLastAliasRequestType string

const (
	CreateProject200ApplicationJSONLastAliasRequestTypePromote  CreateProject200ApplicationJSONLastAliasRequestType = "promote"
	CreateProject200ApplicationJSONLastAliasRequestTypeRollback CreateProject200ApplicationJSONLastAliasRequestType = "rollback"
)

func (e CreateProject200ApplicationJSONLastAliasRequestType) ToPointer() *CreateProject200ApplicationJSONLastAliasRequestType {
	return &e
}

func (e *CreateProject200ApplicationJSONLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = CreateProject200ApplicationJSONLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLastAliasRequestType: %v", v)
	}
}

type CreateProject200ApplicationJSONLastAliasRequest struct {
	FromDeploymentID string                                                   `json:"fromDeploymentId"`
	JobStatus        CreateProject200ApplicationJSONLastAliasRequestJobStatus `json:"jobStatus"`
	RequestedAt      int64                                                    `json:"requestedAt"`
	ToDeploymentID   string                                                   `json:"toDeploymentId"`
	Type             CreateProject200ApplicationJSONLastAliasRequestType      `json:"type"`
}

func (o *CreateProject200ApplicationJSONLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *CreateProject200ApplicationJSONLastAliasRequest) GetJobStatus() CreateProject200ApplicationJSONLastAliasRequestJobStatus {
	if o == nil {
		return CreateProject200ApplicationJSONLastAliasRequestJobStatus("")
	}
	return o.JobStatus
}

func (o *CreateProject200ApplicationJSONLastAliasRequest) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *CreateProject200ApplicationJSONLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *CreateProject200ApplicationJSONLastAliasRequest) GetType() CreateProject200ApplicationJSONLastAliasRequestType {
	if o == nil {
		return CreateProject200ApplicationJSONLastAliasRequestType("")
	}
	return o.Type
}

type CreateProject200ApplicationJSONLastRollbackTarget struct {
}

type CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedType string

const (
	CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedType = "integer"
	CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedType = "boolean"
)

type CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedType
}

func CreateCreateProject200ApplicationJSONLatestDeploymentsAliasAssignedInteger(integer int64) CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger

	return CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateProject200ApplicationJSONLatestDeploymentsAliasAssignedBoolean(boolean bool) CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned {
	typ := CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean

	return CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = CreateProject200ApplicationJSONLatestDeploymentsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONLatestDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProject200ApplicationJSONLatestDeploymentsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion string

const (
	CreateProject200ApplicationJSONLatestDeploymentsChecksConclusionSucceeded CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "succeeded"
	CreateProject200ApplicationJSONLatestDeploymentsChecksConclusionFailed    CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "failed"
	CreateProject200ApplicationJSONLatestDeploymentsChecksConclusionSkipped   CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "skipped"
	CreateProject200ApplicationJSONLatestDeploymentsChecksConclusionCanceled  CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion = "canceled"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeploymentsChecksState string

const (
	CreateProject200ApplicationJSONLatestDeploymentsChecksStateRegistered CreateProject200ApplicationJSONLatestDeploymentsChecksState = "registered"
	CreateProject200ApplicationJSONLatestDeploymentsChecksStateRunning    CreateProject200ApplicationJSONLatestDeploymentsChecksState = "running"
	CreateProject200ApplicationJSONLatestDeploymentsChecksStateCompleted  CreateProject200ApplicationJSONLatestDeploymentsChecksState = "completed"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsChecksState) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsChecksState {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProject200ApplicationJSONLatestDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsChecksState: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeploymentsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProject200ApplicationJSONLatestDeploymentsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProject200ApplicationJSONLatestDeploymentsPlan string

const (
	CreateProject200ApplicationJSONLatestDeploymentsPlanPro        CreateProject200ApplicationJSONLatestDeploymentsPlan = "pro"
	CreateProject200ApplicationJSONLatestDeploymentsPlanEnterprise CreateProject200ApplicationJSONLatestDeploymentsPlan = "enterprise"
	CreateProject200ApplicationJSONLatestDeploymentsPlanHobby      CreateProject200ApplicationJSONLatestDeploymentsPlan = "hobby"
	CreateProject200ApplicationJSONLatestDeploymentsPlanOss        CreateProject200ApplicationJSONLatestDeploymentsPlan = "oss"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsPlan) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsPlan {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = CreateProject200ApplicationJSONLatestDeploymentsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsPlan: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeploymentsReadyState string

const (
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateBuilding     CreateProject200ApplicationJSONLatestDeploymentsReadyState = "BUILDING"
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateError        CreateProject200ApplicationJSONLatestDeploymentsReadyState = "ERROR"
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateInitializing CreateProject200ApplicationJSONLatestDeploymentsReadyState = "INITIALIZING"
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateQueued       CreateProject200ApplicationJSONLatestDeploymentsReadyState = "QUEUED"
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateReady        CreateProject200ApplicationJSONLatestDeploymentsReadyState = "READY"
	CreateProject200ApplicationJSONLatestDeploymentsReadyStateCanceled     CreateProject200ApplicationJSONLatestDeploymentsReadyState = "CANCELED"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsReadyState) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsReadyState {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProject200ApplicationJSONLatestDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsReadyState: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeploymentsReadySubstate string

const (
	CreateProject200ApplicationJSONLatestDeploymentsReadySubstateStaged   CreateProject200ApplicationJSONLatestDeploymentsReadySubstate = "STAGED"
	CreateProject200ApplicationJSONLatestDeploymentsReadySubstatePromoted CreateProject200ApplicationJSONLatestDeploymentsReadySubstate = "PROMOTED"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsReadySubstate) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsReadySubstate {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProject200ApplicationJSONLatestDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsReadySubstate: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeploymentsType string

const (
	CreateProject200ApplicationJSONLatestDeploymentsTypeLambdas CreateProject200ApplicationJSONLatestDeploymentsType = "LAMBDAS"
)

func (e CreateProject200ApplicationJSONLatestDeploymentsType) ToPointer() *CreateProject200ApplicationJSONLatestDeploymentsType {
	return &e
}

func (e *CreateProject200ApplicationJSONLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProject200ApplicationJSONLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLatestDeploymentsType: %v", v)
	}
}

type CreateProject200ApplicationJSONLatestDeployments struct {
	Alias                  []string                                                          `json:"alias,omitempty"`
	AliasAssigned          *CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProject200ApplicationJSONLatestDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                           `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                          `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                            `json:"buildingAt,omitempty"`
	Builds                 []CreateProject200ApplicationJSONLatestDeploymentsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProject200ApplicationJSONLatestDeploymentsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                             `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                           `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                             `json:"createdAt"`
	CreatedIn              string                                                            `json:"createdIn"`
	Creator                *CreateProject200ApplicationJSONLatestDeploymentsCreator          `json:"creator"`
	DeploymentHostname     string                                                            `json:"deploymentHostname"`
	Forced                 *bool                                                             `json:"forced,omitempty"`
	ID                     string                                                            `json:"id"`
	Meta                   map[string]string                                                 `json:"meta,omitempty"`
	MonorepoManager        *string                                                           `json:"monorepoManager,omitempty"`
	Name                   string                                                            `json:"name"`
	Plan                   CreateProject200ApplicationJSONLatestDeploymentsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                          `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                           `json:"private"`
	ReadyAt                *int64                                                         `json:"readyAt,omitempty"`
	ReadyState             CreateProject200ApplicationJSONLatestDeploymentsReadyState     `json:"readyState"`
	ReadySubstate          *CreateProject200ApplicationJSONLatestDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                         `json:"requestedAt,omitempty"`
	Target                 *string                                                        `json:"target,omitempty"`
	TeamID                 *string                                                        `json:"teamId,omitempty"`
	Type                   CreateProject200ApplicationJSONLatestDeploymentsType           `json:"type"`
	URL                    string                                                         `json:"url"`
	UserID                 string                                                         `json:"userId"`
	WithCache              *bool                                                          `json:"withCache,omitempty"`
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetAliasAssigned() *CreateProject200ApplicationJSONLatestDeploymentsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetAliasError() *CreateProject200ApplicationJSONLatestDeploymentsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetBuilds() []CreateProject200ApplicationJSONLatestDeploymentsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetChecksConclusion() *CreateProject200ApplicationJSONLatestDeploymentsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetChecksState() *CreateProject200ApplicationJSONLatestDeploymentsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetCreator() *CreateProject200ApplicationJSONLatestDeploymentsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetPlan() CreateProject200ApplicationJSONLatestDeploymentsPlan {
	if o == nil {
		return CreateProject200ApplicationJSONLatestDeploymentsPlan("")
	}
	return o.Plan
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetReadyState() CreateProject200ApplicationJSONLatestDeploymentsReadyState {
	if o == nil {
		return CreateProject200ApplicationJSONLatestDeploymentsReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetReadySubstate() *CreateProject200ApplicationJSONLatestDeploymentsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetType() CreateProject200ApplicationJSONLatestDeploymentsType {
	if o == nil {
		return CreateProject200ApplicationJSONLatestDeploymentsType("")
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProject200ApplicationJSONLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProject200ApplicationJSONLink3DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *CreateProject200ApplicationJSONLink3DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink3DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONLink3DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONLink3DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProject200ApplicationJSONLink3DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProject200ApplicationJSONLink3Type string

const (
	CreateProject200ApplicationJSONLink3TypeBitbucket CreateProject200ApplicationJSONLink3Type = "bitbucket"
)

func (e CreateProject200ApplicationJSONLink3Type) ToPointer() *CreateProject200ApplicationJSONLink3Type {
	return &e
}

func (e *CreateProject200ApplicationJSONLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateProject200ApplicationJSONLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLink3Type: %v", v)
	}
}

type CreateProject200ApplicationJSONLink3 struct {
	CreatedAt        *int64                                            `json:"createdAt,omitempty"`
	DeployHooks      []CreateProject200ApplicationJSONLink3DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                           `json:"gitCredentialId,omitempty"`
	Name             *string                                           `json:"name,omitempty"`
	Owner            *string                                           `json:"owner,omitempty"`
	ProductionBranch *string                                           `json:"productionBranch,omitempty"`
	Slug             *string                                           `json:"slug,omitempty"`
	Sourceless       *bool                                             `json:"sourceless,omitempty"`
	Type             *CreateProject200ApplicationJSONLink3Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                            `json:"updatedAt,omitempty"`
	UUID             *string                                           `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                           `json:"workspaceUuid,omitempty"`
}

func (o *CreateProject200ApplicationJSONLink3) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink3) GetDeployHooks() []CreateProject200ApplicationJSONLink3DeployHooks {
	if o == nil {
		return []CreateProject200ApplicationJSONLink3DeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProject200ApplicationJSONLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProject200ApplicationJSONLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateProject200ApplicationJSONLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProject200ApplicationJSONLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProject200ApplicationJSONLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProject200ApplicationJSONLink3) GetType() *CreateProject200ApplicationJSONLink3Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONLink3) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProject200ApplicationJSONLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *CreateProject200ApplicationJSONLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateProject200ApplicationJSONLink2DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *CreateProject200ApplicationJSONLink2DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink2DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONLink2DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONLink2DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProject200ApplicationJSONLink2DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProject200ApplicationJSONLink2Type string

const (
	CreateProject200ApplicationJSONLink2TypeGitlab CreateProject200ApplicationJSONLink2Type = "gitlab"
)

func (e CreateProject200ApplicationJSONLink2Type) ToPointer() *CreateProject200ApplicationJSONLink2Type {
	return &e
}

func (e *CreateProject200ApplicationJSONLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateProject200ApplicationJSONLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLink2Type: %v", v)
	}
}

type CreateProject200ApplicationJSONLink2 struct {
	CreatedAt                *int64                                            `json:"createdAt,omitempty"`
	DeployHooks              []CreateProject200ApplicationJSONLink2DeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                           `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                           `json:"productionBranch,omitempty"`
	ProjectID                *string                                           `json:"projectId,omitempty"`
	ProjectName              *string                                           `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                           `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                           `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                           `json:"projectUrl,omitempty"`
	Sourceless               *bool                                             `json:"sourceless,omitempty"`
	Type                     *CreateProject200ApplicationJSONLink2Type         `json:"type,omitempty"`
	UpdatedAt                *int64                                            `json:"updatedAt,omitempty"`
}

func (o *CreateProject200ApplicationJSONLink2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink2) GetDeployHooks() []CreateProject200ApplicationJSONLink2DeployHooks {
	if o == nil {
		return []CreateProject200ApplicationJSONLink2DeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProject200ApplicationJSONLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProject200ApplicationJSONLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProject200ApplicationJSONLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProject200ApplicationJSONLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *CreateProject200ApplicationJSONLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *CreateProject200ApplicationJSONLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *CreateProject200ApplicationJSONLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *CreateProject200ApplicationJSONLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProject200ApplicationJSONLink2) GetType() *CreateProject200ApplicationJSONLink2Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONLink2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type CreateProject200ApplicationJSONLink1DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *CreateProject200ApplicationJSONLink1DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink1DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONLink1DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONLink1DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProject200ApplicationJSONLink1DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProject200ApplicationJSONLink1Type string

const (
	CreateProject200ApplicationJSONLink1TypeGithub CreateProject200ApplicationJSONLink1Type = "github"
)

func (e CreateProject200ApplicationJSONLink1Type) ToPointer() *CreateProject200ApplicationJSONLink1Type {
	return &e
}

func (e *CreateProject200ApplicationJSONLink1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateProject200ApplicationJSONLink1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONLink1Type: %v", v)
	}
}

type CreateProject200ApplicationJSONLink1 struct {
	CreatedAt        *int64                                            `json:"createdAt,omitempty"`
	DeployHooks      []CreateProject200ApplicationJSONLink1DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                           `json:"gitCredentialId,omitempty"`
	Org              *string                                           `json:"org,omitempty"`
	ProductionBranch *string                                           `json:"productionBranch,omitempty"`
	Repo             *string                                           `json:"repo,omitempty"`
	RepoID           *int64                                            `json:"repoId,omitempty"`
	Sourceless       *bool                                             `json:"sourceless,omitempty"`
	Type             *CreateProject200ApplicationJSONLink1Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                            `json:"updatedAt,omitempty"`
}

func (o *CreateProject200ApplicationJSONLink1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONLink1) GetDeployHooks() []CreateProject200ApplicationJSONLink1DeployHooks {
	if o == nil {
		return []CreateProject200ApplicationJSONLink1DeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProject200ApplicationJSONLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProject200ApplicationJSONLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProject200ApplicationJSONLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProject200ApplicationJSONLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProject200ApplicationJSONLink1) GetRepoID() *int64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProject200ApplicationJSONLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProject200ApplicationJSONLink1) GetType() *CreateProject200ApplicationJSONLink1Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONLink1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type CreateProject200ApplicationJSONLinkType string

const (
	CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink1 CreateProject200ApplicationJSONLinkType = "createProject_200ApplicationJSON_link_1"
	CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink2 CreateProject200ApplicationJSONLinkType = "createProject_200ApplicationJSON_link_2"
	CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink3 CreateProject200ApplicationJSONLinkType = "createProject_200ApplicationJSON_link_3"
)

type CreateProject200ApplicationJSONLink struct {
	CreateProject200ApplicationJSONLink1 *CreateProject200ApplicationJSONLink1
	CreateProject200ApplicationJSONLink2 *CreateProject200ApplicationJSONLink2
	CreateProject200ApplicationJSONLink3 *CreateProject200ApplicationJSONLink3

	Type CreateProject200ApplicationJSONLinkType
}

func CreateCreateProject200ApplicationJSONLinkCreateProject200ApplicationJSONLink1(createProject200ApplicationJSONLink1 CreateProject200ApplicationJSONLink1) CreateProject200ApplicationJSONLink {
	typ := CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink1

	return CreateProject200ApplicationJSONLink{
		CreateProject200ApplicationJSONLink1: &createProject200ApplicationJSONLink1,
		Type:                                 typ,
	}
}

func CreateCreateProject200ApplicationJSONLinkCreateProject200ApplicationJSONLink2(createProject200ApplicationJSONLink2 CreateProject200ApplicationJSONLink2) CreateProject200ApplicationJSONLink {
	typ := CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink2

	return CreateProject200ApplicationJSONLink{
		CreateProject200ApplicationJSONLink2: &createProject200ApplicationJSONLink2,
		Type:                                 typ,
	}
}

func CreateCreateProject200ApplicationJSONLinkCreateProject200ApplicationJSONLink3(createProject200ApplicationJSONLink3 CreateProject200ApplicationJSONLink3) CreateProject200ApplicationJSONLink {
	typ := CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink3

	return CreateProject200ApplicationJSONLink{
		CreateProject200ApplicationJSONLink3: &createProject200ApplicationJSONLink3,
		Type:                                 typ,
	}
}

func (u *CreateProject200ApplicationJSONLink) UnmarshalJSON(data []byte) error {

	createProject200ApplicationJSONLink1 := new(CreateProject200ApplicationJSONLink1)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONLink1, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONLink1 = createProject200ApplicationJSONLink1
		u.Type = CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink1
		return nil
	}

	createProject200ApplicationJSONLink2 := new(CreateProject200ApplicationJSONLink2)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONLink2, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONLink2 = createProject200ApplicationJSONLink2
		u.Type = CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink2
		return nil
	}

	createProject200ApplicationJSONLink3 := new(CreateProject200ApplicationJSONLink3)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONLink3, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONLink3 = createProject200ApplicationJSONLink3
		u.Type = CreateProject200ApplicationJSONLinkTypeCreateProject200ApplicationJSONLink3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONLink) MarshalJSON() ([]byte, error) {
	if u.CreateProject200ApplicationJSONLink1 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONLink1, "", true)
	}

	if u.CreateProject200ApplicationJSONLink2 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONLink2, "", true)
	}

	if u.CreateProject200ApplicationJSONLink3 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONLink3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONNodeVersion string

const (
	CreateProject200ApplicationJSONNodeVersionEighteenX CreateProject200ApplicationJSONNodeVersion = "18.x"
	CreateProject200ApplicationJSONNodeVersionSixteenX  CreateProject200ApplicationJSONNodeVersion = "16.x"
	CreateProject200ApplicationJSONNodeVersionFourteenX CreateProject200ApplicationJSONNodeVersion = "14.x"
	CreateProject200ApplicationJSONNodeVersionTwelveX   CreateProject200ApplicationJSONNodeVersion = "12.x"
	CreateProject200ApplicationJSONNodeVersionTenX      CreateProject200ApplicationJSONNodeVersion = "10.x"
)

func (e CreateProject200ApplicationJSONNodeVersion) ToPointer() *CreateProject200ApplicationJSONNodeVersion {
	return &e
}

func (e *CreateProject200ApplicationJSONNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = CreateProject200ApplicationJSONNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONNodeVersion: %v", v)
	}
}

type CreateProject200ApplicationJSONPasswordProtection struct {
}

type CreateProject200ApplicationJSONPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *CreateProject200ApplicationJSONPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *CreateProject200ApplicationJSONPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *CreateProject200ApplicationJSONPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *CreateProject200ApplicationJSONPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *CreateProject200ApplicationJSONPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProject200ApplicationJSONPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *CreateProject200ApplicationJSONPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *CreateProject200ApplicationJSONPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *CreateProject200ApplicationJSONPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *CreateProject200ApplicationJSONPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *CreateProject200ApplicationJSONPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *CreateProject200ApplicationJSONPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *CreateProject200ApplicationJSONPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *CreateProject200ApplicationJSONPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *CreateProject200ApplicationJSONPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *CreateProject200ApplicationJSONPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *CreateProject200ApplicationJSONPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *CreateProject200ApplicationJSONPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *CreateProject200ApplicationJSONPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *CreateProject200ApplicationJSONPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *CreateProject200ApplicationJSONPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *CreateProject200ApplicationJSONPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *CreateProject200ApplicationJSONPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *CreateProject200ApplicationJSONPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *CreateProject200ApplicationJSONPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *CreateProject200ApplicationJSONPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateProject200ApplicationJSONPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *CreateProject200ApplicationJSONPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProject200ApplicationJSONPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateProject200ApplicationJSONPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *CreateProject200ApplicationJSONPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *CreateProject200ApplicationJSONPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *CreateProject200ApplicationJSONPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *CreateProject200ApplicationJSONPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *CreateProject200ApplicationJSONPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *CreateProject200ApplicationJSONPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *CreateProject200ApplicationJSONPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *CreateProject200ApplicationJSONPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *CreateProject200ApplicationJSONPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *CreateProject200ApplicationJSONPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *CreateProject200ApplicationJSONPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *CreateProject200ApplicationJSONPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *CreateProject200ApplicationJSONPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *CreateProject200ApplicationJSONPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *CreateProject200ApplicationJSONPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *CreateProject200ApplicationJSONPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProject200ApplicationJSONPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *CreateProject200ApplicationJSONPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *CreateProject200ApplicationJSONPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProject200ApplicationJSONPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *CreateProject200ApplicationJSONPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *CreateProject200ApplicationJSONPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *CreateProject200ApplicationJSONPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *CreateProject200ApplicationJSONPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *CreateProject200ApplicationJSONPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateProject200ApplicationJSONPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateProject200ApplicationJSONPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *CreateProject200ApplicationJSONPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *CreateProject200ApplicationJSONPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *CreateProject200ApplicationJSONPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateProject200ApplicationJSONPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *CreateProject200ApplicationJSONPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *CreateProject200ApplicationJSONPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *CreateProject200ApplicationJSONPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *CreateProject200ApplicationJSONPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *CreateProject200ApplicationJSONPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *CreateProject200ApplicationJSONPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *CreateProject200ApplicationJSONPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *CreateProject200ApplicationJSONPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *CreateProject200ApplicationJSONPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProject200ApplicationJSONPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *CreateProject200ApplicationJSONPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *CreateProject200ApplicationJSONPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *CreateProject200ApplicationJSONPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *CreateProject200ApplicationJSONPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProject200ApplicationJSONPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *CreateProject200ApplicationJSONPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *CreateProject200ApplicationJSONPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type CreateProject200ApplicationJSONProtectionBypass2Access string

const (
	CreateProject200ApplicationJSONProtectionBypass2AccessRequested CreateProject200ApplicationJSONProtectionBypass2Access = "requested"
	CreateProject200ApplicationJSONProtectionBypass2AccessGranted   CreateProject200ApplicationJSONProtectionBypass2Access = "granted"
)

func (e CreateProject200ApplicationJSONProtectionBypass2Access) ToPointer() *CreateProject200ApplicationJSONProtectionBypass2Access {
	return &e
}

func (e *CreateProject200ApplicationJSONProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = CreateProject200ApplicationJSONProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONProtectionBypass2Access: %v", v)
	}
}

type CreateProject200ApplicationJSONProtectionBypass2Scope string

const (
	CreateProject200ApplicationJSONProtectionBypass2ScopeUser CreateProject200ApplicationJSONProtectionBypass2Scope = "user"
)

func (e CreateProject200ApplicationJSONProtectionBypass2Scope) ToPointer() *CreateProject200ApplicationJSONProtectionBypass2Scope {
	return &e
}

func (e *CreateProject200ApplicationJSONProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = CreateProject200ApplicationJSONProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONProtectionBypass2Scope: %v", v)
	}
}

type CreateProject200ApplicationJSONProtectionBypass2 struct {
	Access        CreateProject200ApplicationJSONProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                  `json:"createdAt"`
	LastUpdatedAt int64                                                  `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                 `json:"lastUpdatedBy"`
	Scope         CreateProject200ApplicationJSONProtectionBypass2Scope  `json:"scope"`
}

func (o *CreateProject200ApplicationJSONProtectionBypass2) GetAccess() CreateProject200ApplicationJSONProtectionBypass2Access {
	if o == nil {
		return CreateProject200ApplicationJSONProtectionBypass2Access("")
	}
	return o.Access
}

func (o *CreateProject200ApplicationJSONProtectionBypass2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONProtectionBypass2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *CreateProject200ApplicationJSONProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *CreateProject200ApplicationJSONProtectionBypass2) GetScope() CreateProject200ApplicationJSONProtectionBypass2Scope {
	if o == nil {
		return CreateProject200ApplicationJSONProtectionBypass2Scope("")
	}
	return o.Scope
}

type CreateProject200ApplicationJSONProtectionBypass1Scope string

const (
	CreateProject200ApplicationJSONProtectionBypass1ScopeShareableLink    CreateProject200ApplicationJSONProtectionBypass1Scope = "shareable-link"
	CreateProject200ApplicationJSONProtectionBypass1ScopeAutomationBypass CreateProject200ApplicationJSONProtectionBypass1Scope = "automation-bypass"
)

func (e CreateProject200ApplicationJSONProtectionBypass1Scope) ToPointer() *CreateProject200ApplicationJSONProtectionBypass1Scope {
	return &e
}

func (e *CreateProject200ApplicationJSONProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = CreateProject200ApplicationJSONProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONProtectionBypass1Scope: %v", v)
	}
}

type CreateProject200ApplicationJSONProtectionBypass1 struct {
	CreatedAt int64                                                 `json:"createdAt"`
	CreatedBy string                                                `json:"createdBy"`
	Scope     CreateProject200ApplicationJSONProtectionBypass1Scope `json:"scope"`
}

func (o *CreateProject200ApplicationJSONProtectionBypass1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProject200ApplicationJSONProtectionBypass1) GetScope() CreateProject200ApplicationJSONProtectionBypass1Scope {
	if o == nil {
		return CreateProject200ApplicationJSONProtectionBypass1Scope("")
	}
	return o.Scope
}

type CreateProject200ApplicationJSONProtectionBypassType string

const (
	CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass1 CreateProject200ApplicationJSONProtectionBypassType = "createProject_200ApplicationJSON_protectionBypass_1"
	CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass2 CreateProject200ApplicationJSONProtectionBypassType = "createProject_200ApplicationJSON_protectionBypass_2"
)

type CreateProject200ApplicationJSONProtectionBypass struct {
	CreateProject200ApplicationJSONProtectionBypass1 *CreateProject200ApplicationJSONProtectionBypass1
	CreateProject200ApplicationJSONProtectionBypass2 *CreateProject200ApplicationJSONProtectionBypass2

	Type CreateProject200ApplicationJSONProtectionBypassType
}

func CreateCreateProject200ApplicationJSONProtectionBypassCreateProject200ApplicationJSONProtectionBypass1(createProject200ApplicationJSONProtectionBypass1 CreateProject200ApplicationJSONProtectionBypass1) CreateProject200ApplicationJSONProtectionBypass {
	typ := CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass1

	return CreateProject200ApplicationJSONProtectionBypass{
		CreateProject200ApplicationJSONProtectionBypass1: &createProject200ApplicationJSONProtectionBypass1,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONProtectionBypassCreateProject200ApplicationJSONProtectionBypass2(createProject200ApplicationJSONProtectionBypass2 CreateProject200ApplicationJSONProtectionBypass2) CreateProject200ApplicationJSONProtectionBypass {
	typ := CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass2

	return CreateProject200ApplicationJSONProtectionBypass{
		CreateProject200ApplicationJSONProtectionBypass2: &createProject200ApplicationJSONProtectionBypass2,
		Type: typ,
	}
}

func (u *CreateProject200ApplicationJSONProtectionBypass) UnmarshalJSON(data []byte) error {

	createProject200ApplicationJSONProtectionBypass1 := new(CreateProject200ApplicationJSONProtectionBypass1)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONProtectionBypass1, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONProtectionBypass1 = createProject200ApplicationJSONProtectionBypass1
		u.Type = CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass1
		return nil
	}

	createProject200ApplicationJSONProtectionBypass2 := new(CreateProject200ApplicationJSONProtectionBypass2)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONProtectionBypass2, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONProtectionBypass2 = createProject200ApplicationJSONProtectionBypass2
		u.Type = CreateProject200ApplicationJSONProtectionBypassTypeCreateProject200ApplicationJSONProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.CreateProject200ApplicationJSONProtectionBypass1 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONProtectionBypass1, "", true)
	}

	if u.CreateProject200ApplicationJSONProtectionBypass2 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONProtectionBypass2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONSsoProtectionDeploymentType string

const (
	CreateProject200ApplicationJSONSsoProtectionDeploymentTypeAll                              CreateProject200ApplicationJSONSsoProtectionDeploymentType = "all"
	CreateProject200ApplicationJSONSsoProtectionDeploymentTypePreview                          CreateProject200ApplicationJSONSsoProtectionDeploymentType = "preview"
	CreateProject200ApplicationJSONSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProject200ApplicationJSONSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProject200ApplicationJSONSsoProtectionDeploymentType) ToPointer() *CreateProject200ApplicationJSONSsoProtectionDeploymentType {
	return &e
}

func (e *CreateProject200ApplicationJSONSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProject200ApplicationJSONSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONSsoProtectionDeploymentType: %v", v)
	}
}

type CreateProject200ApplicationJSONSsoProtection struct {
	DeploymentType CreateProject200ApplicationJSONSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *CreateProject200ApplicationJSONSsoProtection) GetDeploymentType() CreateProject200ApplicationJSONSsoProtectionDeploymentType {
	if o == nil {
		return CreateProject200ApplicationJSONSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProject200ApplicationJSONTargetsAliasAssignedType string

const (
	CreateProject200ApplicationJSONTargetsAliasAssignedTypeInteger CreateProject200ApplicationJSONTargetsAliasAssignedType = "integer"
	CreateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean CreateProject200ApplicationJSONTargetsAliasAssignedType = "boolean"
)

type CreateProject200ApplicationJSONTargetsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type CreateProject200ApplicationJSONTargetsAliasAssignedType
}

func CreateCreateProject200ApplicationJSONTargetsAliasAssignedInteger(integer int64) CreateProject200ApplicationJSONTargetsAliasAssigned {
	typ := CreateProject200ApplicationJSONTargetsAliasAssignedTypeInteger

	return CreateProject200ApplicationJSONTargetsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateProject200ApplicationJSONTargetsAliasAssignedBoolean(boolean bool) CreateProject200ApplicationJSONTargetsAliasAssigned {
	typ := CreateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean

	return CreateProject200ApplicationJSONTargetsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProject200ApplicationJSONTargetsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateProject200ApplicationJSONTargetsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = CreateProject200ApplicationJSONTargetsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONTargetsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProject200ApplicationJSONTargetsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProject200ApplicationJSONTargetsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProject200ApplicationJSONTargetsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProject200ApplicationJSONTargetsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *CreateProject200ApplicationJSONTargetsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProject200ApplicationJSONTargetsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProject200ApplicationJSONTargetsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type CreateProject200ApplicationJSONTargetsChecksConclusion string

const (
	CreateProject200ApplicationJSONTargetsChecksConclusionSucceeded CreateProject200ApplicationJSONTargetsChecksConclusion = "succeeded"
	CreateProject200ApplicationJSONTargetsChecksConclusionFailed    CreateProject200ApplicationJSONTargetsChecksConclusion = "failed"
	CreateProject200ApplicationJSONTargetsChecksConclusionSkipped   CreateProject200ApplicationJSONTargetsChecksConclusion = "skipped"
	CreateProject200ApplicationJSONTargetsChecksConclusionCanceled  CreateProject200ApplicationJSONTargetsChecksConclusion = "canceled"
)

func (e CreateProject200ApplicationJSONTargetsChecksConclusion) ToPointer() *CreateProject200ApplicationJSONTargetsChecksConclusion {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProject200ApplicationJSONTargetsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsChecksConclusion: %v", v)
	}
}

type CreateProject200ApplicationJSONTargetsChecksState string

const (
	CreateProject200ApplicationJSONTargetsChecksStateRegistered CreateProject200ApplicationJSONTargetsChecksState = "registered"
	CreateProject200ApplicationJSONTargetsChecksStateRunning    CreateProject200ApplicationJSONTargetsChecksState = "running"
	CreateProject200ApplicationJSONTargetsChecksStateCompleted  CreateProject200ApplicationJSONTargetsChecksState = "completed"
)

func (e CreateProject200ApplicationJSONTargetsChecksState) ToPointer() *CreateProject200ApplicationJSONTargetsChecksState {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProject200ApplicationJSONTargetsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsChecksState: %v", v)
	}
}

type CreateProject200ApplicationJSONTargetsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProject200ApplicationJSONTargetsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProject200ApplicationJSONTargetsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProject200ApplicationJSONTargetsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProject200ApplicationJSONTargetsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProject200ApplicationJSONTargetsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProject200ApplicationJSONTargetsPlan string

const (
	CreateProject200ApplicationJSONTargetsPlanPro        CreateProject200ApplicationJSONTargetsPlan = "pro"
	CreateProject200ApplicationJSONTargetsPlanEnterprise CreateProject200ApplicationJSONTargetsPlan = "enterprise"
	CreateProject200ApplicationJSONTargetsPlanHobby      CreateProject200ApplicationJSONTargetsPlan = "hobby"
	CreateProject200ApplicationJSONTargetsPlanOss        CreateProject200ApplicationJSONTargetsPlan = "oss"
)

func (e CreateProject200ApplicationJSONTargetsPlan) ToPointer() *CreateProject200ApplicationJSONTargetsPlan {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = CreateProject200ApplicationJSONTargetsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsPlan: %v", v)
	}
}

type CreateProject200ApplicationJSONTargetsReadyState string

const (
	CreateProject200ApplicationJSONTargetsReadyStateBuilding     CreateProject200ApplicationJSONTargetsReadyState = "BUILDING"
	CreateProject200ApplicationJSONTargetsReadyStateError        CreateProject200ApplicationJSONTargetsReadyState = "ERROR"
	CreateProject200ApplicationJSONTargetsReadyStateInitializing CreateProject200ApplicationJSONTargetsReadyState = "INITIALIZING"
	CreateProject200ApplicationJSONTargetsReadyStateQueued       CreateProject200ApplicationJSONTargetsReadyState = "QUEUED"
	CreateProject200ApplicationJSONTargetsReadyStateReady        CreateProject200ApplicationJSONTargetsReadyState = "READY"
	CreateProject200ApplicationJSONTargetsReadyStateCanceled     CreateProject200ApplicationJSONTargetsReadyState = "CANCELED"
)

func (e CreateProject200ApplicationJSONTargetsReadyState) ToPointer() *CreateProject200ApplicationJSONTargetsReadyState {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProject200ApplicationJSONTargetsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsReadyState: %v", v)
	}
}

type CreateProject200ApplicationJSONTargetsReadySubstate string

const (
	CreateProject200ApplicationJSONTargetsReadySubstateStaged   CreateProject200ApplicationJSONTargetsReadySubstate = "STAGED"
	CreateProject200ApplicationJSONTargetsReadySubstatePromoted CreateProject200ApplicationJSONTargetsReadySubstate = "PROMOTED"
)

func (e CreateProject200ApplicationJSONTargetsReadySubstate) ToPointer() *CreateProject200ApplicationJSONTargetsReadySubstate {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProject200ApplicationJSONTargetsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsReadySubstate: %v", v)
	}
}

type CreateProject200ApplicationJSONTargetsType string

const (
	CreateProject200ApplicationJSONTargetsTypeLambdas CreateProject200ApplicationJSONTargetsType = "LAMBDAS"
)

func (e CreateProject200ApplicationJSONTargetsType) ToPointer() *CreateProject200ApplicationJSONTargetsType {
	return &e
}

func (e *CreateProject200ApplicationJSONTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProject200ApplicationJSONTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTargetsType: %v", v)
	}
}

type CreateProject200ApplicationJSONTargets struct {
	Alias                  []string                                                `json:"alias,omitempty"`
	AliasAssigned          *CreateProject200ApplicationJSONTargetsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProject200ApplicationJSONTargetsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                 `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                  `json:"buildingAt,omitempty"`
	Builds                 []CreateProject200ApplicationJSONTargetsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *CreateProject200ApplicationJSONTargetsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProject200ApplicationJSONTargetsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                   `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                 `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                   `json:"createdAt"`
	CreatedIn              string                                                  `json:"createdIn"`
	Creator                *CreateProject200ApplicationJSONTargetsCreator          `json:"creator"`
	DeploymentHostname     string                                                  `json:"deploymentHostname"`
	Forced                 *bool                                                   `json:"forced,omitempty"`
	ID                     string                                                  `json:"id"`
	Meta                   map[string]string                                       `json:"meta,omitempty"`
	MonorepoManager        *string                                                 `json:"monorepoManager,omitempty"`
	Name                   string                                                  `json:"name"`
	Plan                   CreateProject200ApplicationJSONTargetsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                 `json:"private"`
	ReadyAt                *int64                                               `json:"readyAt,omitempty"`
	ReadyState             CreateProject200ApplicationJSONTargetsReadyState     `json:"readyState"`
	ReadySubstate          *CreateProject200ApplicationJSONTargetsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                               `json:"requestedAt,omitempty"`
	Target                 *string                                              `json:"target,omitempty"`
	TeamID                 *string                                              `json:"teamId,omitempty"`
	Type                   CreateProject200ApplicationJSONTargetsType           `json:"type"`
	URL                    string                                               `json:"url"`
	UserID                 string                                               `json:"userId"`
	WithCache              *bool                                                `json:"withCache,omitempty"`
}

func (o *CreateProject200ApplicationJSONTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProject200ApplicationJSONTargets) GetAliasAssigned() *CreateProject200ApplicationJSONTargetsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProject200ApplicationJSONTargets) GetAliasError() *CreateProject200ApplicationJSONTargetsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProject200ApplicationJSONTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProject200ApplicationJSONTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProject200ApplicationJSONTargets) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProject200ApplicationJSONTargets) GetBuilds() []CreateProject200ApplicationJSONTargetsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProject200ApplicationJSONTargets) GetChecksConclusion() *CreateProject200ApplicationJSONTargetsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProject200ApplicationJSONTargets) GetChecksState() *CreateProject200ApplicationJSONTargetsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProject200ApplicationJSONTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProject200ApplicationJSONTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProject200ApplicationJSONTargets) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSONTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProject200ApplicationJSONTargets) GetCreator() *CreateProject200ApplicationJSONTargetsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProject200ApplicationJSONTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProject200ApplicationJSONTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProject200ApplicationJSONTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSONTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProject200ApplicationJSONTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProject200ApplicationJSONTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSONTargets) GetPlan() CreateProject200ApplicationJSONTargetsPlan {
	if o == nil {
		return CreateProject200ApplicationJSONTargetsPlan("")
	}
	return o.Plan
}

func (o *CreateProject200ApplicationJSONTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProject200ApplicationJSONTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProject200ApplicationJSONTargets) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProject200ApplicationJSONTargets) GetReadyState() CreateProject200ApplicationJSONTargetsReadyState {
	if o == nil {
		return CreateProject200ApplicationJSONTargetsReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProject200ApplicationJSONTargets) GetReadySubstate() *CreateProject200ApplicationJSONTargetsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProject200ApplicationJSONTargets) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProject200ApplicationJSONTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProject200ApplicationJSONTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProject200ApplicationJSONTargets) GetType() CreateProject200ApplicationJSONTargetsType {
	if o == nil {
		return CreateProject200ApplicationJSONTargetsType("")
	}
	return o.Type
}

func (o *CreateProject200ApplicationJSONTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProject200ApplicationJSONTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProject200ApplicationJSONTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProject200ApplicationJSONTrustedIps2DeploymentType string

const (
	CreateProject200ApplicationJSONTrustedIps2DeploymentTypeAll                              CreateProject200ApplicationJSONTrustedIps2DeploymentType = "all"
	CreateProject200ApplicationJSONTrustedIps2DeploymentTypePreview                          CreateProject200ApplicationJSONTrustedIps2DeploymentType = "preview"
	CreateProject200ApplicationJSONTrustedIps2DeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProject200ApplicationJSONTrustedIps2DeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProject200ApplicationJSONTrustedIps2DeploymentTypeProduction                       CreateProject200ApplicationJSONTrustedIps2DeploymentType = "production"
)

func (e CreateProject200ApplicationJSONTrustedIps2DeploymentType) ToPointer() *CreateProject200ApplicationJSONTrustedIps2DeploymentType {
	return &e
}

func (e *CreateProject200ApplicationJSONTrustedIps2DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProject200ApplicationJSONTrustedIps2DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTrustedIps2DeploymentType: %v", v)
	}
}

type CreateProject200ApplicationJSONTrustedIps2 struct {
	DeploymentType CreateProject200ApplicationJSONTrustedIps2DeploymentType `json:"deploymentType"`
}

func (o *CreateProject200ApplicationJSONTrustedIps2) GetDeploymentType() CreateProject200ApplicationJSONTrustedIps2DeploymentType {
	if o == nil {
		return CreateProject200ApplicationJSONTrustedIps2DeploymentType("")
	}
	return o.DeploymentType
}

type CreateProject200ApplicationJSONTrustedIps1Addresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *CreateProject200ApplicationJSONTrustedIps1Addresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *CreateProject200ApplicationJSONTrustedIps1Addresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProject200ApplicationJSONTrustedIps1DeploymentType string

const (
	CreateProject200ApplicationJSONTrustedIps1DeploymentTypeAll                              CreateProject200ApplicationJSONTrustedIps1DeploymentType = "all"
	CreateProject200ApplicationJSONTrustedIps1DeploymentTypePreview                          CreateProject200ApplicationJSONTrustedIps1DeploymentType = "preview"
	CreateProject200ApplicationJSONTrustedIps1DeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProject200ApplicationJSONTrustedIps1DeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProject200ApplicationJSONTrustedIps1DeploymentTypeProduction                       CreateProject200ApplicationJSONTrustedIps1DeploymentType = "production"
)

func (e CreateProject200ApplicationJSONTrustedIps1DeploymentType) ToPointer() *CreateProject200ApplicationJSONTrustedIps1DeploymentType {
	return &e
}

func (e *CreateProject200ApplicationJSONTrustedIps1DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProject200ApplicationJSONTrustedIps1DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTrustedIps1DeploymentType: %v", v)
	}
}

type CreateProject200ApplicationJSONTrustedIps1ProtectionMode string

const (
	CreateProject200ApplicationJSONTrustedIps1ProtectionModeAdditional CreateProject200ApplicationJSONTrustedIps1ProtectionMode = "additional"
	CreateProject200ApplicationJSONTrustedIps1ProtectionModeExclusive  CreateProject200ApplicationJSONTrustedIps1ProtectionMode = "exclusive"
)

func (e CreateProject200ApplicationJSONTrustedIps1ProtectionMode) ToPointer() *CreateProject200ApplicationJSONTrustedIps1ProtectionMode {
	return &e
}

func (e *CreateProject200ApplicationJSONTrustedIps1ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = CreateProject200ApplicationJSONTrustedIps1ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject200ApplicationJSONTrustedIps1ProtectionMode: %v", v)
	}
}

type CreateProject200ApplicationJSONTrustedIps1 struct {
	Addresses      []CreateProject200ApplicationJSONTrustedIps1Addresses    `json:"addresses"`
	DeploymentType CreateProject200ApplicationJSONTrustedIps1DeploymentType `json:"deploymentType"`
	ProtectionMode CreateProject200ApplicationJSONTrustedIps1ProtectionMode `json:"protectionMode"`
}

func (o *CreateProject200ApplicationJSONTrustedIps1) GetAddresses() []CreateProject200ApplicationJSONTrustedIps1Addresses {
	if o == nil {
		return []CreateProject200ApplicationJSONTrustedIps1Addresses{}
	}
	return o.Addresses
}

func (o *CreateProject200ApplicationJSONTrustedIps1) GetDeploymentType() CreateProject200ApplicationJSONTrustedIps1DeploymentType {
	if o == nil {
		return CreateProject200ApplicationJSONTrustedIps1DeploymentType("")
	}
	return o.DeploymentType
}

func (o *CreateProject200ApplicationJSONTrustedIps1) GetProtectionMode() CreateProject200ApplicationJSONTrustedIps1ProtectionMode {
	if o == nil {
		return CreateProject200ApplicationJSONTrustedIps1ProtectionMode("")
	}
	return o.ProtectionMode
}

type CreateProject200ApplicationJSONTrustedIpsType string

const (
	CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps1 CreateProject200ApplicationJSONTrustedIpsType = "createProject_200ApplicationJSON_trustedIps_1"
	CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps2 CreateProject200ApplicationJSONTrustedIpsType = "createProject_200ApplicationJSON_trustedIps_2"
)

type CreateProject200ApplicationJSONTrustedIps struct {
	CreateProject200ApplicationJSONTrustedIps1 *CreateProject200ApplicationJSONTrustedIps1
	CreateProject200ApplicationJSONTrustedIps2 *CreateProject200ApplicationJSONTrustedIps2

	Type CreateProject200ApplicationJSONTrustedIpsType
}

func CreateCreateProject200ApplicationJSONTrustedIpsCreateProject200ApplicationJSONTrustedIps1(createProject200ApplicationJSONTrustedIps1 CreateProject200ApplicationJSONTrustedIps1) CreateProject200ApplicationJSONTrustedIps {
	typ := CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps1

	return CreateProject200ApplicationJSONTrustedIps{
		CreateProject200ApplicationJSONTrustedIps1: &createProject200ApplicationJSONTrustedIps1,
		Type: typ,
	}
}

func CreateCreateProject200ApplicationJSONTrustedIpsCreateProject200ApplicationJSONTrustedIps2(createProject200ApplicationJSONTrustedIps2 CreateProject200ApplicationJSONTrustedIps2) CreateProject200ApplicationJSONTrustedIps {
	typ := CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps2

	return CreateProject200ApplicationJSONTrustedIps{
		CreateProject200ApplicationJSONTrustedIps2: &createProject200ApplicationJSONTrustedIps2,
		Type: typ,
	}
}

func (u *CreateProject200ApplicationJSONTrustedIps) UnmarshalJSON(data []byte) error {

	createProject200ApplicationJSONTrustedIps2 := new(CreateProject200ApplicationJSONTrustedIps2)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONTrustedIps2, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONTrustedIps2 = createProject200ApplicationJSONTrustedIps2
		u.Type = CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps2
		return nil
	}

	createProject200ApplicationJSONTrustedIps1 := new(CreateProject200ApplicationJSONTrustedIps1)
	if err := utils.UnmarshalJSON(data, &createProject200ApplicationJSONTrustedIps1, "", true, true); err == nil {
		u.CreateProject200ApplicationJSONTrustedIps1 = createProject200ApplicationJSONTrustedIps1
		u.Type = CreateProject200ApplicationJSONTrustedIpsTypeCreateProject200ApplicationJSONTrustedIps1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProject200ApplicationJSONTrustedIps) MarshalJSON() ([]byte, error) {
	if u.CreateProject200ApplicationJSONTrustedIps1 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONTrustedIps1, "", true)
	}

	if u.CreateProject200ApplicationJSONTrustedIps2 != nil {
		return utils.MarshalJSON(u.CreateProject200ApplicationJSONTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateProject200ApplicationJSON - The project was successfuly created
type CreateProject200ApplicationJSON struct {
	AccountID                        string                                                     `json:"accountId"`
	Analytics                        *CreateProject200ApplicationJSONAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                                      `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                                    `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                                      `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                                    `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                                    `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                                      `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                                    `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                                     `json:"createdAt,omitempty"`
	Crons                            *CreateProject200ApplicationJSONCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                                      `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *CreateProject200ApplicationJSONDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                                    `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                                       `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                                      `json:"enablePreviewFeedback,omitempty"`
	Env                              []CreateProject200ApplicationJSONEnv                       `json:"env,omitempty"`
	Framework                        *CreateProject200ApplicationJSONFramework                  `json:"framework,omitempty"`
	GitComments                      *CreateProject200ApplicationJSONGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                                      `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                                      `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                                      `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                                      `json:"hasFloatingAliases,omitempty"`
	ID                               string                                                     `json:"id"`
	InstallCommand                   *string                                                    `json:"installCommand,omitempty"`
	LastAliasRequest                 *CreateProject200ApplicationJSONLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *CreateProject200ApplicationJSONLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []CreateProject200ApplicationJSONLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *CreateProject200ApplicationJSONLink                       `json:"link,omitempty"`
	Live                             *bool                                                      `json:"live,omitempty"`
	Name                             string                                                     `json:"name"`
	NodeVersion                      CreateProject200ApplicationJSONNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                                    `json:"outputDirectory,omitempty"`
	PasswordProtection               *CreateProject200ApplicationJSONPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *CreateProject200ApplicationJSONPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                                      `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]CreateProject200ApplicationJSONProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                                      `json:"publicSource,omitempty"`
	RootDirectory                    *string                                                    `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                                    `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                                      `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                                      `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *CreateProject200ApplicationJSONSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]CreateProject200ApplicationJSONTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                                     `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                                     `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                                    `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                                    `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *CreateProject200ApplicationJSONTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                                     `json:"updatedAt,omitempty"`
}

func (o *CreateProject200ApplicationJSON) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateProject200ApplicationJSON) GetAnalytics() *CreateProject200ApplicationJSONAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProject200ApplicationJSON) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateProject200ApplicationJSON) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *CreateProject200ApplicationJSON) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *CreateProject200ApplicationJSON) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProject200ApplicationJSON) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProject200ApplicationJSON) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProject200ApplicationJSON) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProject200ApplicationJSON) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject200ApplicationJSON) GetCrons() *CreateProject200ApplicationJSONCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateProject200ApplicationJSON) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *CreateProject200ApplicationJSON) GetDataCache() *CreateProject200ApplicationJSONDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *CreateProject200ApplicationJSON) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProject200ApplicationJSON) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *CreateProject200ApplicationJSON) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProject200ApplicationJSON) GetEnv() []CreateProject200ApplicationJSONEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateProject200ApplicationJSON) GetFramework() *CreateProject200ApplicationJSONFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProject200ApplicationJSON) GetGitComments() *CreateProject200ApplicationJSONGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *CreateProject200ApplicationJSON) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *CreateProject200ApplicationJSON) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *CreateProject200ApplicationJSON) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *CreateProject200ApplicationJSON) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *CreateProject200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProject200ApplicationJSON) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProject200ApplicationJSON) GetLastAliasRequest() *CreateProject200ApplicationJSONLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *CreateProject200ApplicationJSON) GetLastRollbackTarget() *CreateProject200ApplicationJSONLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *CreateProject200ApplicationJSON) GetLatestDeployments() []CreateProject200ApplicationJSONLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *CreateProject200ApplicationJSON) GetLink() *CreateProject200ApplicationJSONLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProject200ApplicationJSON) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *CreateProject200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProject200ApplicationJSON) GetNodeVersion() CreateProject200ApplicationJSONNodeVersion {
	if o == nil {
		return CreateProject200ApplicationJSONNodeVersion("")
	}
	return o.NodeVersion
}

func (o *CreateProject200ApplicationJSON) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProject200ApplicationJSON) GetPasswordProtection() *CreateProject200ApplicationJSONPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProject200ApplicationJSON) GetPermissions() *CreateProject200ApplicationJSONPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProject200ApplicationJSON) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *CreateProject200ApplicationJSON) GetProtectionBypass() map[string]CreateProject200ApplicationJSONProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *CreateProject200ApplicationJSON) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProject200ApplicationJSON) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProject200ApplicationJSON) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProject200ApplicationJSON) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProject200ApplicationJSON) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *CreateProject200ApplicationJSON) GetSsoProtection() *CreateProject200ApplicationJSONSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *CreateProject200ApplicationJSON) GetTargets() map[string]CreateProject200ApplicationJSONTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *CreateProject200ApplicationJSON) GetTransferCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *CreateProject200ApplicationJSON) GetTransferStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateProject200ApplicationJSON) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *CreateProject200ApplicationJSON) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *CreateProject200ApplicationJSON) GetTrustedIps() *CreateProject200ApplicationJSONTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProject200ApplicationJSON) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type CreateProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project was successfuly created
	CreateProject200ApplicationJSONObject *CreateProject200ApplicationJSON
}

func (o *CreateProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateProjectResponse) GetCreateProject200ApplicationJSONObject() *CreateProject200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateProject200ApplicationJSONObject
}
