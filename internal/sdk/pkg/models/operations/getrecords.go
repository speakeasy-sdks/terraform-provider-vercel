// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
)

type GetRecordsSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type GetRecordsRequest struct {
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// Maximum number of records to list from a request.
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Get records created after this JavaScript timestamp.
	Since *string `queryParam:"style=form,explode=true,name=since"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Get records created before this JavaScript timestamp.
	Until *string `queryParam:"style=form,explode=true,name=until"`
}

type GetRecords200ApplicationJSON3RecordsType string

const (
	GetRecords200ApplicationJSON3RecordsTypeA     GetRecords200ApplicationJSON3RecordsType = "A"
	GetRecords200ApplicationJSON3RecordsTypeAaaa  GetRecords200ApplicationJSON3RecordsType = "AAAA"
	GetRecords200ApplicationJSON3RecordsTypeAlias GetRecords200ApplicationJSON3RecordsType = "ALIAS"
	GetRecords200ApplicationJSON3RecordsTypeCaa   GetRecords200ApplicationJSON3RecordsType = "CAA"
	GetRecords200ApplicationJSON3RecordsTypeCname GetRecords200ApplicationJSON3RecordsType = "CNAME"
	GetRecords200ApplicationJSON3RecordsTypeMx    GetRecords200ApplicationJSON3RecordsType = "MX"
	GetRecords200ApplicationJSON3RecordsTypeSrv   GetRecords200ApplicationJSON3RecordsType = "SRV"
	GetRecords200ApplicationJSON3RecordsTypeTxt   GetRecords200ApplicationJSON3RecordsType = "TXT"
	GetRecords200ApplicationJSON3RecordsTypeNs    GetRecords200ApplicationJSON3RecordsType = "NS"
)

func (e GetRecords200ApplicationJSON3RecordsType) ToPointer() *GetRecords200ApplicationJSON3RecordsType {
	return &e
}

func (e *GetRecords200ApplicationJSON3RecordsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = GetRecords200ApplicationJSON3RecordsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON3RecordsType: %v", v)
	}
}

type GetRecords200ApplicationJSON3Records struct {
	Created    *int64                                   `json:"created"`
	CreatedAt  *int64                                   `json:"createdAt"`
	Creator    string                                   `json:"creator"`
	ID         string                                   `json:"id"`
	MxPriority *int64                                   `json:"mxPriority,omitempty"`
	Name       string                                   `json:"name"`
	Priority   *int64                                   `json:"priority,omitempty"`
	Slug       string                                   `json:"slug"`
	Type       GetRecords200ApplicationJSON3RecordsType `json:"type"`
	Updated    *int64                                   `json:"updated"`
	UpdatedAt  *int64                                   `json:"updatedAt"`
	Value      string                                   `json:"value"`
}

// GetRecords200ApplicationJSON3 - Successful response retrieving a list of paginated DNS records.
type GetRecords200ApplicationJSON3 struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination                      `json:"pagination"`
	Records    []GetRecords200ApplicationJSON3Records `json:"records"`
}

type GetRecords200ApplicationJSON2RecordsType string

const (
	GetRecords200ApplicationJSON2RecordsTypeA     GetRecords200ApplicationJSON2RecordsType = "A"
	GetRecords200ApplicationJSON2RecordsTypeAaaa  GetRecords200ApplicationJSON2RecordsType = "AAAA"
	GetRecords200ApplicationJSON2RecordsTypeAlias GetRecords200ApplicationJSON2RecordsType = "ALIAS"
	GetRecords200ApplicationJSON2RecordsTypeCaa   GetRecords200ApplicationJSON2RecordsType = "CAA"
	GetRecords200ApplicationJSON2RecordsTypeCname GetRecords200ApplicationJSON2RecordsType = "CNAME"
	GetRecords200ApplicationJSON2RecordsTypeMx    GetRecords200ApplicationJSON2RecordsType = "MX"
	GetRecords200ApplicationJSON2RecordsTypeSrv   GetRecords200ApplicationJSON2RecordsType = "SRV"
	GetRecords200ApplicationJSON2RecordsTypeTxt   GetRecords200ApplicationJSON2RecordsType = "TXT"
	GetRecords200ApplicationJSON2RecordsTypeNs    GetRecords200ApplicationJSON2RecordsType = "NS"
)

func (e GetRecords200ApplicationJSON2RecordsType) ToPointer() *GetRecords200ApplicationJSON2RecordsType {
	return &e
}

func (e *GetRecords200ApplicationJSON2RecordsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = GetRecords200ApplicationJSON2RecordsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON2RecordsType: %v", v)
	}
}

type GetRecords200ApplicationJSON2Records struct {
	Created    *int64                                   `json:"created"`
	CreatedAt  *int64                                   `json:"createdAt"`
	Creator    string                                   `json:"creator"`
	ID         string                                   `json:"id"`
	MxPriority *int64                                   `json:"mxPriority,omitempty"`
	Name       string                                   `json:"name"`
	Priority   *int64                                   `json:"priority,omitempty"`
	Slug       string                                   `json:"slug"`
	Type       GetRecords200ApplicationJSON2RecordsType `json:"type"`
	Updated    *int64                                   `json:"updated"`
	UpdatedAt  *int64                                   `json:"updatedAt"`
	Value      string                                   `json:"value"`
}

type GetRecords200ApplicationJSON2 struct {
	Records []GetRecords200ApplicationJSON2Records `json:"records"`
}

type GetRecords200ApplicationJSONType string

const (
	GetRecords200ApplicationJSONTypeStr                           GetRecords200ApplicationJSONType = "str"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2 GetRecords200ApplicationJSONType = "getRecords_200ApplicationJSON_2"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3 GetRecords200ApplicationJSONType = "getRecords_200ApplicationJSON_3"
)

type GetRecords200ApplicationJSON struct {
	Str                           *string
	GetRecords200ApplicationJSON2 *GetRecords200ApplicationJSON2
	GetRecords200ApplicationJSON3 *GetRecords200ApplicationJSON3

	Type GetRecords200ApplicationJSONType
}

func CreateGetRecords200ApplicationJSONStr(str string) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeStr

	return GetRecords200ApplicationJSON{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON2(getRecords200ApplicationJSON2 GetRecords200ApplicationJSON2) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON2: &getRecords200ApplicationJSON2,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON3(getRecords200ApplicationJSON3 GetRecords200ApplicationJSON3) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON3: &getRecords200ApplicationJSON3,
		Type:                          typ,
	}
}

func (u *GetRecords200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetRecords200ApplicationJSONTypeStr
		return nil
	}

	getRecords200ApplicationJSON2 := new(GetRecords200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON2); err == nil {
		u.GetRecords200ApplicationJSON2 = getRecords200ApplicationJSON2
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2
		return nil
	}

	getRecords200ApplicationJSON3 := new(GetRecords200ApplicationJSON3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON3); err == nil {
		u.GetRecords200ApplicationJSON3 = getRecords200ApplicationJSON3
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRecords200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.GetRecords200ApplicationJSON2 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON2)
	}

	if u.GetRecords200ApplicationJSON3 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON3)
	}

	return nil, nil
}

type GetRecordsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response retrieving a list of paginated DNS records.
	GetRecords200ApplicationJSONOneOf *GetRecords200ApplicationJSON
}
