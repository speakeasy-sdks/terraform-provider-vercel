// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/models/shared"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/utils"
	"net/http"
)

type GetRecordsRequest struct {
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// Maximum number of records to list from a request.
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Get records created after this JavaScript timestamp.
	Since *string `queryParam:"style=form,explode=true,name=since"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Get records created before this JavaScript timestamp.
	Until *string `queryParam:"style=form,explode=true,name=until"`
}

func (o *GetRecordsRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetRecordsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRecordsRequest) GetSince() *string {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetRecordsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetRecordsRequest) GetUntil() *string {
	if o == nil {
		return nil
	}
	return o.Until
}

type GetRecordsDNSType string

const (
	GetRecordsDNSTypeA     GetRecordsDNSType = "A"
	GetRecordsDNSTypeAaaa  GetRecordsDNSType = "AAAA"
	GetRecordsDNSTypeAlias GetRecordsDNSType = "ALIAS"
	GetRecordsDNSTypeCaa   GetRecordsDNSType = "CAA"
	GetRecordsDNSTypeCname GetRecordsDNSType = "CNAME"
	GetRecordsDNSTypeMx    GetRecordsDNSType = "MX"
	GetRecordsDNSTypeSrv   GetRecordsDNSType = "SRV"
	GetRecordsDNSTypeTxt   GetRecordsDNSType = "TXT"
	GetRecordsDNSTypeNs    GetRecordsDNSType = "NS"
)

func (e GetRecordsDNSType) ToPointer() *GetRecordsDNSType {
	return &e
}

func (e *GetRecordsDNSType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = GetRecordsDNSType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsDNSType: %v", v)
	}
}

type GetRecordsRecords struct {
	Created    *int64            `json:"created"`
	CreatedAt  *int64            `json:"createdAt"`
	Creator    string            `json:"creator"`
	ID         string            `json:"id"`
	MxPriority *int64            `json:"mxPriority,omitempty"`
	Name       string            `json:"name"`
	Priority   *int64            `json:"priority,omitempty"`
	Slug       string            `json:"slug"`
	Type       GetRecordsDNSType `json:"type"`
	Updated    *int64            `json:"updated"`
	UpdatedAt  *int64            `json:"updatedAt"`
	Value      string            `json:"value"`
}

func (o *GetRecordsRecords) GetCreated() *int64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *GetRecordsRecords) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRecordsRecords) GetCreator() string {
	if o == nil {
		return ""
	}
	return o.Creator
}

func (o *GetRecordsRecords) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetRecordsRecords) GetMxPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.MxPriority
}

func (o *GetRecordsRecords) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRecordsRecords) GetPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetRecordsRecords) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetRecordsRecords) GetType() GetRecordsDNSType {
	if o == nil {
		return GetRecordsDNSType("")
	}
	return o.Type
}

func (o *GetRecordsRecords) GetUpdated() *int64 {
	if o == nil {
		return nil
	}
	return o.Updated
}

func (o *GetRecordsRecords) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetRecordsRecords) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetRecords3 - Successful response retrieving a list of paginated DNS records.
type GetRecords3 struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination   `json:"pagination"`
	Records    []GetRecordsRecords `json:"records"`
}

func (o *GetRecords3) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

func (o *GetRecords3) GetRecords() []GetRecordsRecords {
	if o == nil {
		return []GetRecordsRecords{}
	}
	return o.Records
}

type GetRecordsType string

const (
	GetRecordsTypeA     GetRecordsType = "A"
	GetRecordsTypeAaaa  GetRecordsType = "AAAA"
	GetRecordsTypeAlias GetRecordsType = "ALIAS"
	GetRecordsTypeCaa   GetRecordsType = "CAA"
	GetRecordsTypeCname GetRecordsType = "CNAME"
	GetRecordsTypeMx    GetRecordsType = "MX"
	GetRecordsTypeSrv   GetRecordsType = "SRV"
	GetRecordsTypeTxt   GetRecordsType = "TXT"
	GetRecordsTypeNs    GetRecordsType = "NS"
)

func (e GetRecordsType) ToPointer() *GetRecordsType {
	return &e
}

func (e *GetRecordsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = GetRecordsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsType: %v", v)
	}
}

type Records struct {
	Created    *int64         `json:"created"`
	CreatedAt  *int64         `json:"createdAt"`
	Creator    string         `json:"creator"`
	ID         string         `json:"id"`
	MxPriority *int64         `json:"mxPriority,omitempty"`
	Name       string         `json:"name"`
	Priority   *int64         `json:"priority,omitempty"`
	Slug       string         `json:"slug"`
	Type       GetRecordsType `json:"type"`
	Updated    *int64         `json:"updated"`
	UpdatedAt  *int64         `json:"updatedAt"`
	Value      string         `json:"value"`
}

func (o *Records) GetCreated() *int64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Records) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Records) GetCreator() string {
	if o == nil {
		return ""
	}
	return o.Creator
}

func (o *Records) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Records) GetMxPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.MxPriority
}

func (o *Records) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Records) GetPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *Records) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Records) GetType() GetRecordsType {
	if o == nil {
		return GetRecordsType("")
	}
	return o.Type
}

func (o *Records) GetUpdated() *int64 {
	if o == nil {
		return nil
	}
	return o.Updated
}

func (o *Records) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Records) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetRecords2 struct {
	Records []Records `json:"records"`
}

func (o *GetRecords2) GetRecords() []Records {
	if o == nil {
		return []Records{}
	}
	return o.Records
}

type GetRecordsResponseBodyType string

const (
	GetRecordsResponseBodyTypeStr         GetRecordsResponseBodyType = "str"
	GetRecordsResponseBodyTypeGetRecords2 GetRecordsResponseBodyType = "getRecords_2"
	GetRecordsResponseBodyTypeGetRecords3 GetRecordsResponseBodyType = "getRecords_3"
)

type GetRecordsResponseBody struct {
	Str         *string
	GetRecords2 *GetRecords2
	GetRecords3 *GetRecords3

	Type GetRecordsResponseBodyType
}

func CreateGetRecordsResponseBodyStr(str string) GetRecordsResponseBody {
	typ := GetRecordsResponseBodyTypeStr

	return GetRecordsResponseBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRecordsResponseBodyGetRecords2(getRecords2 GetRecords2) GetRecordsResponseBody {
	typ := GetRecordsResponseBodyTypeGetRecords2

	return GetRecordsResponseBody{
		GetRecords2: &getRecords2,
		Type:        typ,
	}
}

func CreateGetRecordsResponseBodyGetRecords3(getRecords3 GetRecords3) GetRecordsResponseBody {
	typ := GetRecordsResponseBodyTypeGetRecords3

	return GetRecordsResponseBody{
		GetRecords3: &getRecords3,
		Type:        typ,
	}
}

func (u *GetRecordsResponseBody) UnmarshalJSON(data []byte) error {

	getRecords2 := new(GetRecords2)
	if err := utils.UnmarshalJSON(data, &getRecords2, "", true, true); err == nil {
		u.GetRecords2 = getRecords2
		u.Type = GetRecordsResponseBodyTypeGetRecords2
		return nil
	}

	getRecords3 := new(GetRecords3)
	if err := utils.UnmarshalJSON(data, &getRecords3, "", true, true); err == nil {
		u.GetRecords3 = getRecords3
		u.Type = GetRecordsResponseBodyTypeGetRecords3
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRecordsResponseBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRecordsResponseBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRecords2 != nil {
		return utils.MarshalJSON(u.GetRecords2, "", true)
	}

	if u.GetRecords3 != nil {
		return utils.MarshalJSON(u.GetRecords3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRecordsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response retrieving a list of paginated DNS records.
	OneOf *GetRecordsResponseBody
}

func (o *GetRecordsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRecordsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRecordsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetRecordsResponse) GetOneOf() *GetRecordsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
