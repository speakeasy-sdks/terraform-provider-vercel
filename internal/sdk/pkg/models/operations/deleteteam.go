// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"net/http"
)

// DeleteTeamRequestBodyReasons - An object describing the reason why the team is being deleted.
type DeleteTeamRequestBodyReasons struct {
	// Description of the reason why the team is being deleted.
	Description string `json:"description"`
	// Idenitifier slug of the reason why the team is being deleted.
	Slug string `json:"slug"`

	AdditionalProperties interface{} `json:"-"`
}
type _DeleteTeamRequestBodyReasons DeleteTeamRequestBodyReasons

func (c *DeleteTeamRequestBodyReasons) UnmarshalJSON(bs []byte) error {
	data := _DeleteTeamRequestBodyReasons{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = DeleteTeamRequestBodyReasons(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "description")
	delete(additionalFields, "slug")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c DeleteTeamRequestBodyReasons) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_DeleteTeamRequestBodyReasons(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type DeleteTeamRequestBody struct {
	// Optional array of objects that describe the reason why the team is being deleted.
	Reasons []DeleteTeamRequestBodyReasons `json:"reasons,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _DeleteTeamRequestBody DeleteTeamRequestBody

func (c *DeleteTeamRequestBody) UnmarshalJSON(bs []byte) error {
	data := _DeleteTeamRequestBody{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = DeleteTeamRequestBody(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "reasons")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c DeleteTeamRequestBody) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_DeleteTeamRequestBody(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type DeleteTeamRequest struct {
	RequestBody *DeleteTeamRequestBody `request:"mediaType=application/json"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
}

// DeleteTeam200ApplicationJSON - The Team was successfuly deleted
type DeleteTeam200ApplicationJSON struct {
	// The ID of the deleted Team
	ID string `json:"id"`
}

type DeleteTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The Team was successfuly deleted
	DeleteTeam200ApplicationJSONObject *DeleteTeam200ApplicationJSON
}
