// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetDomainConfigRequest struct {
	// The name of the domain.
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

// GetDomainConfig200ApplicationJSONAcceptedChallenges - Which challenge types the domain can use for issuing certs.
type GetDomainConfig200ApplicationJSONAcceptedChallenges string

const (
	GetDomainConfig200ApplicationJSONAcceptedChallengesDns01  GetDomainConfig200ApplicationJSONAcceptedChallenges = "dns-01"
	GetDomainConfig200ApplicationJSONAcceptedChallengesHttp01 GetDomainConfig200ApplicationJSONAcceptedChallenges = "http-01"
)

func (e GetDomainConfig200ApplicationJSONAcceptedChallenges) ToPointer() *GetDomainConfig200ApplicationJSONAcceptedChallenges {
	return &e
}

func (e *GetDomainConfig200ApplicationJSONAcceptedChallenges) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dns-01":
		fallthrough
	case "http-01":
		*e = GetDomainConfig200ApplicationJSONAcceptedChallenges(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDomainConfig200ApplicationJSONAcceptedChallenges: %v", v)
	}
}

// GetDomainConfig200ApplicationJSONConfiguredBy - How we see the domain's configuration. - `CNAME`: Domain has a CNAME pointing to Vercel. - `A`: Domain's A record is resolving to Vercel. - `http`: Domain is resolving to Vercel but may be behind a Proxy. - `null`: Domain is not resolving to Vercel.
type GetDomainConfig200ApplicationJSONConfiguredBy string

const (
	GetDomainConfig200ApplicationJSONConfiguredByCname GetDomainConfig200ApplicationJSONConfiguredBy = "CNAME"
	GetDomainConfig200ApplicationJSONConfiguredByA     GetDomainConfig200ApplicationJSONConfiguredBy = "A"
	GetDomainConfig200ApplicationJSONConfiguredByHTTP  GetDomainConfig200ApplicationJSONConfiguredBy = "http"
)

func (e GetDomainConfig200ApplicationJSONConfiguredBy) ToPointer() *GetDomainConfig200ApplicationJSONConfiguredBy {
	return &e
}

func (e *GetDomainConfig200ApplicationJSONConfiguredBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CNAME":
		fallthrough
	case "A":
		fallthrough
	case "http":
		*e = GetDomainConfig200ApplicationJSONConfiguredBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDomainConfig200ApplicationJSONConfiguredBy: %v", v)
	}
}

type GetDomainConfig200ApplicationJSON struct {
	// Which challenge types the domain can use for issuing certs.
	AcceptedChallenges []GetDomainConfig200ApplicationJSONAcceptedChallenges `json:"acceptedChallenges,omitempty"`
	// How we see the domain's configuration. - `CNAME`: Domain has a CNAME pointing to Vercel. - `A`: Domain's A record is resolving to Vercel. - `http`: Domain is resolving to Vercel but may be behind a Proxy. - `null`: Domain is not resolving to Vercel.
	ConfiguredBy *GetDomainConfig200ApplicationJSONConfiguredBy `json:"configuredBy,omitempty"`
	// Whether or not the domain is configured AND we can automatically generate a TLS certificate.
	Misconfigured bool `json:"misconfigured"`
}

type GetDomainConfigResponse struct {
	ContentType                             string
	StatusCode                              int
	RawResponse                             *http.Response
	GetDomainConfig200ApplicationJSONObject *GetDomainConfig200ApplicationJSON
}
