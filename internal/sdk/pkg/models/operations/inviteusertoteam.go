// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// InviteUserToTeamRequestBodyProjectsRole - Sets the project roles for the invited user
type InviteUserToTeamRequestBodyProjectsRole string

const (
	InviteUserToTeamRequestBodyProjectsRoleAdmin            InviteUserToTeamRequestBodyProjectsRole = "ADMIN"
	InviteUserToTeamRequestBodyProjectsRoleProjectViewer    InviteUserToTeamRequestBodyProjectsRole = "PROJECT_VIEWER"
	InviteUserToTeamRequestBodyProjectsRoleProjectDeveloper InviteUserToTeamRequestBodyProjectsRole = "PROJECT_DEVELOPER"
)

func (e InviteUserToTeamRequestBodyProjectsRole) ToPointer() *InviteUserToTeamRequestBodyProjectsRole {
	return &e
}

func (e *InviteUserToTeamRequestBodyProjectsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = InviteUserToTeamRequestBodyProjectsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRequestBodyProjectsRole: %v", v)
	}
}

type InviteUserToTeamRequestBodyProjects struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// Sets the project roles for the invited user
	Role InviteUserToTeamRequestBodyProjectsRole `json:"role"`
}

// InviteUserToTeamRequestBodyRole - The role of the user to invite
type InviteUserToTeamRequestBodyRole string

const (
	InviteUserToTeamRequestBodyRoleOwner       InviteUserToTeamRequestBodyRole = "OWNER"
	InviteUserToTeamRequestBodyRoleMember      InviteUserToTeamRequestBodyRole = "MEMBER"
	InviteUserToTeamRequestBodyRoleViewer      InviteUserToTeamRequestBodyRole = "VIEWER"
	InviteUserToTeamRequestBodyRoleDeveloper   InviteUserToTeamRequestBodyRole = "DEVELOPER"
	InviteUserToTeamRequestBodyRoleBilling     InviteUserToTeamRequestBodyRole = "BILLING"
	InviteUserToTeamRequestBodyRoleContributor InviteUserToTeamRequestBodyRole = "CONTRIBUTOR"
)

func (e InviteUserToTeamRequestBodyRole) ToPointer() *InviteUserToTeamRequestBodyRole {
	return &e
}

func (e *InviteUserToTeamRequestBodyRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRequestBodyRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRequestBodyRole: %v", v)
	}
}

type InviteUserToTeamRequestBody struct {
	// The email address of the user to invite
	Email    *string                               `json:"email,omitempty"`
	Projects []InviteUserToTeamRequestBodyProjects `json:"projects,omitempty"`
	// The role of the user to invite
	Role *InviteUserToTeamRequestBodyRole `json:"role,omitempty"`
	// The id of the user to invite
	UID *string `json:"uid,omitempty"`
}

type InviteUserToTeamRequest struct {
	RequestBody *InviteUserToTeamRequestBody `request:"mediaType=application/json"`
	TeamID      string                       `pathParam:"style=simple,explode=false,name=teamId"`
}

type InviteUserToTeam200ApplicationJSON2Role string

const (
	InviteUserToTeam200ApplicationJSON2RoleOwner       InviteUserToTeam200ApplicationJSON2Role = "OWNER"
	InviteUserToTeam200ApplicationJSON2RoleMember      InviteUserToTeam200ApplicationJSON2Role = "MEMBER"
	InviteUserToTeam200ApplicationJSON2RoleViewer      InviteUserToTeam200ApplicationJSON2Role = "VIEWER"
	InviteUserToTeam200ApplicationJSON2RoleDeveloper   InviteUserToTeam200ApplicationJSON2Role = "DEVELOPER"
	InviteUserToTeam200ApplicationJSON2RoleBilling     InviteUserToTeam200ApplicationJSON2Role = "BILLING"
	InviteUserToTeam200ApplicationJSON2RoleContributor InviteUserToTeam200ApplicationJSON2Role = "CONTRIBUTOR"
)

func (e InviteUserToTeam200ApplicationJSON2Role) ToPointer() *InviteUserToTeam200ApplicationJSON2Role {
	return &e
}

func (e *InviteUserToTeam200ApplicationJSON2Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeam200ApplicationJSON2Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeam200ApplicationJSON2Role: %v", v)
	}
}

type InviteUserToTeam200ApplicationJSON2 struct {
	Role     InviteUserToTeam200ApplicationJSON2Role `json:"role"`
	UID      string                                  `json:"uid"`
	Username string                                  `json:"username"`
}

// InviteUserToTeam200ApplicationJSON1Role - The role used for the invitation
type InviteUserToTeam200ApplicationJSON1Role string

const (
	InviteUserToTeam200ApplicationJSON1RoleOwner       InviteUserToTeam200ApplicationJSON1Role = "OWNER"
	InviteUserToTeam200ApplicationJSON1RoleMember      InviteUserToTeam200ApplicationJSON1Role = "MEMBER"
	InviteUserToTeam200ApplicationJSON1RoleViewer      InviteUserToTeam200ApplicationJSON1Role = "VIEWER"
	InviteUserToTeam200ApplicationJSON1RoleDeveloper   InviteUserToTeam200ApplicationJSON1Role = "DEVELOPER"
	InviteUserToTeam200ApplicationJSON1RoleBilling     InviteUserToTeam200ApplicationJSON1Role = "BILLING"
	InviteUserToTeam200ApplicationJSON1RoleContributor InviteUserToTeam200ApplicationJSON1Role = "CONTRIBUTOR"
)

func (e InviteUserToTeam200ApplicationJSON1Role) ToPointer() *InviteUserToTeam200ApplicationJSON1Role {
	return &e
}

func (e *InviteUserToTeam200ApplicationJSON1Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeam200ApplicationJSON1Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeam200ApplicationJSON1Role: %v", v)
	}
}

// InviteUserToTeam200ApplicationJSON1 - The member was successfully added to the team
type InviteUserToTeam200ApplicationJSON1 struct {
	// The email of the invited user. Not included if the user was invited via their UID.
	Email string `json:"email"`
	// The role used for the invitation
	Role InviteUserToTeam200ApplicationJSON1Role `json:"role"`
	// The ID of the invited user
	UID string `json:"uid"`
	// The username of the invited user
	Username string `json:"username"`
}

type InviteUserToTeam200ApplicationJSONType string

const (
	InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON1 InviteUserToTeam200ApplicationJSONType = "inviteUserToTeam_200ApplicationJSON_1"
	InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON2 InviteUserToTeam200ApplicationJSONType = "inviteUserToTeam_200ApplicationJSON_2"
)

type InviteUserToTeam200ApplicationJSON struct {
	InviteUserToTeam200ApplicationJSON1 *InviteUserToTeam200ApplicationJSON1
	InviteUserToTeam200ApplicationJSON2 *InviteUserToTeam200ApplicationJSON2

	Type InviteUserToTeam200ApplicationJSONType
}

func CreateInviteUserToTeam200ApplicationJSONInviteUserToTeam200ApplicationJSON1(inviteUserToTeam200ApplicationJSON1 InviteUserToTeam200ApplicationJSON1) InviteUserToTeam200ApplicationJSON {
	typ := InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON1

	return InviteUserToTeam200ApplicationJSON{
		InviteUserToTeam200ApplicationJSON1: &inviteUserToTeam200ApplicationJSON1,
		Type:                                typ,
	}
}

func CreateInviteUserToTeam200ApplicationJSONInviteUserToTeam200ApplicationJSON2(inviteUserToTeam200ApplicationJSON2 InviteUserToTeam200ApplicationJSON2) InviteUserToTeam200ApplicationJSON {
	typ := InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON2

	return InviteUserToTeam200ApplicationJSON{
		InviteUserToTeam200ApplicationJSON2: &inviteUserToTeam200ApplicationJSON2,
		Type:                                typ,
	}
}

func (u *InviteUserToTeam200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	inviteUserToTeam200ApplicationJSON2 := new(InviteUserToTeam200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inviteUserToTeam200ApplicationJSON2); err == nil {
		u.InviteUserToTeam200ApplicationJSON2 = inviteUserToTeam200ApplicationJSON2
		u.Type = InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON2
		return nil
	}

	inviteUserToTeam200ApplicationJSON1 := new(InviteUserToTeam200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inviteUserToTeam200ApplicationJSON1); err == nil {
		u.InviteUserToTeam200ApplicationJSON1 = inviteUserToTeam200ApplicationJSON1
		u.Type = InviteUserToTeam200ApplicationJSONTypeInviteUserToTeam200ApplicationJSON1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InviteUserToTeam200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.InviteUserToTeam200ApplicationJSON2 != nil {
		return json.Marshal(u.InviteUserToTeam200ApplicationJSON2)
	}

	if u.InviteUserToTeam200ApplicationJSON1 != nil {
		return json.Marshal(u.InviteUserToTeam200ApplicationJSON1)
	}

	return nil, nil
}

type InviteUserToTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The member was successfully added to the team
	InviteUserToTeam200ApplicationJSONOneOf *InviteUserToTeam200ApplicationJSON
}
