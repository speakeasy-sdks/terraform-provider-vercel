// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/utils"
)

type CancelDeploymentRequest struct {
	// The unique identifier of the deployment.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CancelDeploymentRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CancelDeployment200ApplicationJSONAliasAssignedAtType string

const (
	CancelDeployment200ApplicationJSONAliasAssignedAtTypeInteger CancelDeployment200ApplicationJSONAliasAssignedAtType = "integer"
	CancelDeployment200ApplicationJSONAliasAssignedAtTypeBoolean CancelDeployment200ApplicationJSONAliasAssignedAtType = "boolean"
)

type CancelDeployment200ApplicationJSONAliasAssignedAt struct {
	Integer *int64
	Boolean *bool

	Type CancelDeployment200ApplicationJSONAliasAssignedAtType
}

func CreateCancelDeployment200ApplicationJSONAliasAssignedAtInteger(integer int64) CancelDeployment200ApplicationJSONAliasAssignedAt {
	typ := CancelDeployment200ApplicationJSONAliasAssignedAtTypeInteger

	return CancelDeployment200ApplicationJSONAliasAssignedAt{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCancelDeployment200ApplicationJSONAliasAssignedAtBoolean(boolean bool) CancelDeployment200ApplicationJSONAliasAssignedAt {
	typ := CancelDeployment200ApplicationJSONAliasAssignedAtTypeBoolean

	return CancelDeployment200ApplicationJSONAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CancelDeployment200ApplicationJSONAliasAssignedAt) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CancelDeployment200ApplicationJSONAliasAssignedAtTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = CancelDeployment200ApplicationJSONAliasAssignedAtTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CancelDeployment200ApplicationJSONAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type CancelDeployment200ApplicationJSONAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CancelDeployment200ApplicationJSONAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeployment200ApplicationJSONAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CancelDeployment200ApplicationJSONAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *CancelDeployment200ApplicationJSONAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CancelDeployment200ApplicationJSONAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeployment200ApplicationJSONAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CancelDeployment200ApplicationJSONAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CancelDeployment200ApplicationJSONBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *CancelDeployment200ApplicationJSONBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CancelDeployment200ApplicationJSONBuilds struct {
}

type CancelDeployment200ApplicationJSONChecksConclusion string

const (
	CancelDeployment200ApplicationJSONChecksConclusionSucceeded CancelDeployment200ApplicationJSONChecksConclusion = "succeeded"
	CancelDeployment200ApplicationJSONChecksConclusionFailed    CancelDeployment200ApplicationJSONChecksConclusion = "failed"
	CancelDeployment200ApplicationJSONChecksConclusionSkipped   CancelDeployment200ApplicationJSONChecksConclusion = "skipped"
	CancelDeployment200ApplicationJSONChecksConclusionCanceled  CancelDeployment200ApplicationJSONChecksConclusion = "canceled"
)

func (e CancelDeployment200ApplicationJSONChecksConclusion) ToPointer() *CancelDeployment200ApplicationJSONChecksConclusion {
	return &e
}

func (e *CancelDeployment200ApplicationJSONChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CancelDeployment200ApplicationJSONChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONChecksConclusion: %v", v)
	}
}

type CancelDeployment200ApplicationJSONChecksState string

const (
	CancelDeployment200ApplicationJSONChecksStateRegistered CancelDeployment200ApplicationJSONChecksState = "registered"
	CancelDeployment200ApplicationJSONChecksStateRunning    CancelDeployment200ApplicationJSONChecksState = "running"
	CancelDeployment200ApplicationJSONChecksStateCompleted  CancelDeployment200ApplicationJSONChecksState = "completed"
)

func (e CancelDeployment200ApplicationJSONChecksState) ToPointer() *CancelDeployment200ApplicationJSONChecksState {
	return &e
}

func (e *CancelDeployment200ApplicationJSONChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CancelDeployment200ApplicationJSONChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONChecksState: %v", v)
	}
}

// CancelDeployment200ApplicationJSONCreator - Information about the deployment creator
type CancelDeployment200ApplicationJSONCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CancelDeployment200ApplicationJSONCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// CancelDeployment200ApplicationJSONFunctions - An object used to configure your Serverless Functions
type CancelDeployment200ApplicationJSONFunctions struct {
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	IncludeFiles *string `json:"includeFiles,omitempty"`
	MaxDuration  *int64  `json:"maxDuration,omitempty"`
	Memory       *int64  `json:"memory,omitempty"`
	Runtime      *string `json:"runtime,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CancelDeployment200ApplicationJSONFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CancelDeployment200ApplicationJSONFunctions) GetMaxDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CancelDeployment200ApplicationJSONFunctions) GetMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CancelDeployment200ApplicationJSONFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type CancelDeployment200ApplicationJSONGitRepo3OwnerType string

const (
	CancelDeployment200ApplicationJSONGitRepo3OwnerTypeUser CancelDeployment200ApplicationJSONGitRepo3OwnerType = "user"
	CancelDeployment200ApplicationJSONGitRepo3OwnerTypeTeam CancelDeployment200ApplicationJSONGitRepo3OwnerType = "team"
)

func (e CancelDeployment200ApplicationJSONGitRepo3OwnerType) ToPointer() *CancelDeployment200ApplicationJSONGitRepo3OwnerType {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo3OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeployment200ApplicationJSONGitRepo3OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo3OwnerType: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo3Type string

const (
	CancelDeployment200ApplicationJSONGitRepo3TypeBitbucket CancelDeployment200ApplicationJSONGitRepo3Type = "bitbucket"
)

func (e CancelDeployment200ApplicationJSONGitRepo3Type) ToPointer() *CancelDeployment200ApplicationJSONGitRepo3Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeployment200ApplicationJSONGitRepo3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo3Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo3 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Owner         string                                              `json:"owner"`
	OwnerType     CancelDeployment200ApplicationJSONGitRepo3OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	RepoUUID      string                                              `json:"repoUuid"`
	Slug          string                                              `json:"slug"`
	Type          CancelDeployment200ApplicationJSONGitRepo3Type      `json:"type"`
	WorkspaceUUID string                                              `json:"workspaceUuid"`
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetOwnerType() CancelDeployment200ApplicationJSONGitRepo3OwnerType {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo3OwnerType("")
	}
	return o.OwnerType
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetType() CancelDeployment200ApplicationJSONGitRepo3Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo3Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONGitRepo3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CancelDeployment200ApplicationJSONGitRepo2OwnerType string

const (
	CancelDeployment200ApplicationJSONGitRepo2OwnerTypeUser CancelDeployment200ApplicationJSONGitRepo2OwnerType = "user"
	CancelDeployment200ApplicationJSONGitRepo2OwnerTypeTeam CancelDeployment200ApplicationJSONGitRepo2OwnerType = "team"
)

func (e CancelDeployment200ApplicationJSONGitRepo2OwnerType) ToPointer() *CancelDeployment200ApplicationJSONGitRepo2OwnerType {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo2OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeployment200ApplicationJSONGitRepo2OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo2OwnerType: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo2Type string

const (
	CancelDeployment200ApplicationJSONGitRepo2TypeGithub CancelDeployment200ApplicationJSONGitRepo2Type = "github"
)

func (e CancelDeployment200ApplicationJSONGitRepo2Type) ToPointer() *CancelDeployment200ApplicationJSONGitRepo2Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeployment200ApplicationJSONGitRepo2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo2Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo2 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Org           string                                              `json:"org"`
	OwnerType     CancelDeployment200ApplicationJSONGitRepo2OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	Repo          string                                              `json:"repo"`
	RepoID        int64                                               `json:"repoId"`
	RepoOwnerID   string                                              `json:"repoOwnerId"`
	Type          CancelDeployment200ApplicationJSONGitRepo2Type      `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetOwnerType() CancelDeployment200ApplicationJSONGitRepo2OwnerType {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo2OwnerType("")
	}
	return o.OwnerType
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *CancelDeployment200ApplicationJSONGitRepo2) GetType() CancelDeployment200ApplicationJSONGitRepo2Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo2Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitRepo1OwnerType string

const (
	CancelDeployment200ApplicationJSONGitRepo1OwnerTypeUser CancelDeployment200ApplicationJSONGitRepo1OwnerType = "user"
	CancelDeployment200ApplicationJSONGitRepo1OwnerTypeTeam CancelDeployment200ApplicationJSONGitRepo1OwnerType = "team"
)

func (e CancelDeployment200ApplicationJSONGitRepo1OwnerType) ToPointer() *CancelDeployment200ApplicationJSONGitRepo1OwnerType {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo1OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeployment200ApplicationJSONGitRepo1OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo1OwnerType: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo1Type string

const (
	CancelDeployment200ApplicationJSONGitRepo1TypeGitlab CancelDeployment200ApplicationJSONGitRepo1Type = "gitlab"
)

func (e CancelDeployment200ApplicationJSONGitRepo1Type) ToPointer() *CancelDeployment200ApplicationJSONGitRepo1Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitRepo1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeployment200ApplicationJSONGitRepo1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitRepo1Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitRepo1 struct {
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Namespace     string                                              `json:"namespace"`
	OwnerType     CancelDeployment200ApplicationJSONGitRepo1OwnerType `json:"ownerType"`
	Path          string                                              `json:"path"`
	Private       bool                                                `json:"private"`
	ProjectID     int64                                               `json:"projectId"`
	Type          CancelDeployment200ApplicationJSONGitRepo1Type      `json:"type"`
	URL           string                                              `json:"url"`
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetOwnerType() CancelDeployment200ApplicationJSONGitRepo1OwnerType {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo1OwnerType("")
	}
	return o.OwnerType
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetType() CancelDeployment200ApplicationJSONGitRepo1Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitRepo1Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONGitRepo1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CancelDeployment200ApplicationJSONGitRepoType string

const (
	CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo1 CancelDeployment200ApplicationJSONGitRepoType = "cancelDeployment_200ApplicationJSON_gitRepo_1"
	CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo2 CancelDeployment200ApplicationJSONGitRepoType = "cancelDeployment_200ApplicationJSON_gitRepo_2"
	CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo3 CancelDeployment200ApplicationJSONGitRepoType = "cancelDeployment_200ApplicationJSON_gitRepo_3"
)

type CancelDeployment200ApplicationJSONGitRepo struct {
	CancelDeployment200ApplicationJSONGitRepo1 *CancelDeployment200ApplicationJSONGitRepo1
	CancelDeployment200ApplicationJSONGitRepo2 *CancelDeployment200ApplicationJSONGitRepo2
	CancelDeployment200ApplicationJSONGitRepo3 *CancelDeployment200ApplicationJSONGitRepo3

	Type CancelDeployment200ApplicationJSONGitRepoType
}

func CreateCancelDeployment200ApplicationJSONGitRepoCancelDeployment200ApplicationJSONGitRepo1(cancelDeployment200ApplicationJSONGitRepo1 CancelDeployment200ApplicationJSONGitRepo1) CancelDeployment200ApplicationJSONGitRepo {
	typ := CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo1

	return CancelDeployment200ApplicationJSONGitRepo{
		CancelDeployment200ApplicationJSONGitRepo1: &cancelDeployment200ApplicationJSONGitRepo1,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitRepoCancelDeployment200ApplicationJSONGitRepo2(cancelDeployment200ApplicationJSONGitRepo2 CancelDeployment200ApplicationJSONGitRepo2) CancelDeployment200ApplicationJSONGitRepo {
	typ := CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo2

	return CancelDeployment200ApplicationJSONGitRepo{
		CancelDeployment200ApplicationJSONGitRepo2: &cancelDeployment200ApplicationJSONGitRepo2,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitRepoCancelDeployment200ApplicationJSONGitRepo3(cancelDeployment200ApplicationJSONGitRepo3 CancelDeployment200ApplicationJSONGitRepo3) CancelDeployment200ApplicationJSONGitRepo {
	typ := CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo3

	return CancelDeployment200ApplicationJSONGitRepo{
		CancelDeployment200ApplicationJSONGitRepo3: &cancelDeployment200ApplicationJSONGitRepo3,
		Type: typ,
	}
}

func (u *CancelDeployment200ApplicationJSONGitRepo) UnmarshalJSON(data []byte) error {

	cancelDeployment200ApplicationJSONGitRepo1 := new(CancelDeployment200ApplicationJSONGitRepo1)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitRepo1, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitRepo1 = cancelDeployment200ApplicationJSONGitRepo1
		u.Type = CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo1
		return nil
	}

	cancelDeployment200ApplicationJSONGitRepo2 := new(CancelDeployment200ApplicationJSONGitRepo2)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitRepo2, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitRepo2 = cancelDeployment200ApplicationJSONGitRepo2
		u.Type = CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo2
		return nil
	}

	cancelDeployment200ApplicationJSONGitRepo3 := new(CancelDeployment200ApplicationJSONGitRepo3)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitRepo3, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitRepo3 = cancelDeployment200ApplicationJSONGitRepo3
		u.Type = CancelDeployment200ApplicationJSONGitRepoTypeCancelDeployment200ApplicationJSONGitRepo3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONGitRepo) MarshalJSON() ([]byte, error) {
	if u.CancelDeployment200ApplicationJSONGitRepo1 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitRepo1, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitRepo2 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitRepo2, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitRepo3 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitRepo3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CancelDeployment200ApplicationJSONGitSource9Type string

const (
	CancelDeployment200ApplicationJSONGitSource9TypeBitbucket CancelDeployment200ApplicationJSONGitSource9Type = "bitbucket"
)

func (e CancelDeployment200ApplicationJSONGitSource9Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource9Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeployment200ApplicationJSONGitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource9Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource9 struct {
	Owner         *string                                          `json:"owner,omitempty"`
	Ref           string                                           `json:"ref"`
	RepoUUID      string                                           `json:"repoUuid"`
	Sha           string                                           `json:"sha"`
	Slug          *string                                          `json:"slug,omitempty"`
	Type          CancelDeployment200ApplicationJSONGitSource9Type `json:"type"`
	WorkspaceUUID string                                           `json:"workspaceUuid"`
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetType() CancelDeployment200ApplicationJSONGitSource9Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource9Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONGitSource9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CancelDeployment200ApplicationJSONGitSource8Type string

const (
	CancelDeployment200ApplicationJSONGitSource8TypeGitlab CancelDeployment200ApplicationJSONGitSource8Type = "gitlab"
)

func (e CancelDeployment200ApplicationJSONGitSource8Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource8Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeployment200ApplicationJSONGitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource8Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource8 struct {
	ProjectID int64                                            `json:"projectId"`
	Ref       string                                           `json:"ref"`
	Sha       string                                           `json:"sha"`
	Type      CancelDeployment200ApplicationJSONGitSource8Type `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource8) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CancelDeployment200ApplicationJSONGitSource8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource8) GetType() CancelDeployment200ApplicationJSONGitSource8Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource8Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource7Type string

const (
	CancelDeployment200ApplicationJSONGitSource7TypeGithub CancelDeployment200ApplicationJSONGitSource7Type = "github"
)

func (e CancelDeployment200ApplicationJSONGitSource7Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource7Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeployment200ApplicationJSONGitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource7Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource7 struct {
	Org    *string                                          `json:"org,omitempty"`
	Ref    string                                           `json:"ref"`
	Repo   *string                                          `json:"repo,omitempty"`
	RepoID int64                                            `json:"repoId"`
	Sha    string                                           `json:"sha"`
	Type   CancelDeployment200ApplicationJSONGitSource7Type `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource7) GetType() CancelDeployment200ApplicationJSONGitSource7Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource7Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource6Type string

const (
	CancelDeployment200ApplicationJSONGitSource6TypeCustom CancelDeployment200ApplicationJSONGitSource6Type = "custom"
)

func (e CancelDeployment200ApplicationJSONGitSource6Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource6Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CancelDeployment200ApplicationJSONGitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource6Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource6 struct {
	GitURL string                                           `json:"gitUrl"`
	Ref    string                                           `json:"ref"`
	Sha    string                                           `json:"sha"`
	Type   CancelDeployment200ApplicationJSONGitSource6Type `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *CancelDeployment200ApplicationJSONGitSource6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource6) GetType() CancelDeployment200ApplicationJSONGitSource6Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource6Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource5Type string

const (
	CancelDeployment200ApplicationJSONGitSource5TypeBitbucket CancelDeployment200ApplicationJSONGitSource5Type = "bitbucket"
)

func (e CancelDeployment200ApplicationJSONGitSource5Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource5Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeployment200ApplicationJSONGitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource5Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource5 struct {
	Owner string                                           `json:"owner"`
	PrID  *int64                                           `json:"prId,omitempty"`
	Ref   *string                                          `json:"ref,omitempty"`
	Sha   *string                                          `json:"sha,omitempty"`
	Slug  string                                           `json:"slug"`
	Type  CancelDeployment200ApplicationJSONGitSource5Type `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeployment200ApplicationJSONGitSource5) GetType() CancelDeployment200ApplicationJSONGitSource5Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource5Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource4Type string

const (
	CancelDeployment200ApplicationJSONGitSource4TypeBitbucket CancelDeployment200ApplicationJSONGitSource4Type = "bitbucket"
)

func (e CancelDeployment200ApplicationJSONGitSource4Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource4Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeployment200ApplicationJSONGitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource4Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource4 struct {
	PrID          *int64                                           `json:"prId,omitempty"`
	Ref           *string                                          `json:"ref,omitempty"`
	RepoUUID      string                                           `json:"repoUuid"`
	Sha           *string                                          `json:"sha,omitempty"`
	Type          CancelDeployment200ApplicationJSONGitSource4Type `json:"type"`
	WorkspaceUUID *string                                          `json:"workspaceUuid,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetType() CancelDeployment200ApplicationJSONGitSource4Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource4Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CancelDeployment200ApplicationJSONGitSource3ProjectIDType string

const (
	CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeStr     CancelDeployment200ApplicationJSONGitSource3ProjectIDType = "str"
	CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger CancelDeployment200ApplicationJSONGitSource3ProjectIDType = "integer"
)

type CancelDeployment200ApplicationJSONGitSource3ProjectID struct {
	Str     *string
	Integer *int64

	Type CancelDeployment200ApplicationJSONGitSource3ProjectIDType
}

func CreateCancelDeployment200ApplicationJSONGitSource3ProjectIDStr(str string) CancelDeployment200ApplicationJSONGitSource3ProjectID {
	typ := CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeStr

	return CancelDeployment200ApplicationJSONGitSource3ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSource3ProjectIDInteger(integer int64) CancelDeployment200ApplicationJSONGitSource3ProjectID {
	typ := CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger

	return CancelDeployment200ApplicationJSONGitSource3ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CancelDeployment200ApplicationJSONGitSource3ProjectID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CancelDeployment200ApplicationJSONGitSource3ProjectIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONGitSource3ProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CancelDeployment200ApplicationJSONGitSource3Type string

const (
	CancelDeployment200ApplicationJSONGitSource3TypeGitlab CancelDeployment200ApplicationJSONGitSource3Type = "gitlab"
)

func (e CancelDeployment200ApplicationJSONGitSource3Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource3Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeployment200ApplicationJSONGitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource3Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource3 struct {
	PrID      *int64                                                `json:"prId,omitempty"`
	ProjectID CancelDeployment200ApplicationJSONGitSource3ProjectID `json:"projectId"`
	Ref       *string                                               `json:"ref,omitempty"`
	Sha       *string                                               `json:"sha,omitempty"`
	Type      CancelDeployment200ApplicationJSONGitSource3Type      `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource3) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CancelDeployment200ApplicationJSONGitSource3) GetProjectID() CancelDeployment200ApplicationJSONGitSource3ProjectID {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource3ProjectID{}
	}
	return o.ProjectID
}

func (o *CancelDeployment200ApplicationJSONGitSource3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource3) GetType() CancelDeployment200ApplicationJSONGitSource3Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource3Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource2Type string

const (
	CancelDeployment200ApplicationJSONGitSource2TypeGithub CancelDeployment200ApplicationJSONGitSource2Type = "github"
)

func (e CancelDeployment200ApplicationJSONGitSource2Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource2Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeployment200ApplicationJSONGitSource2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource2Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource2 struct {
	Org  string                                           `json:"org"`
	PrID *int64                                           `json:"prId,omitempty"`
	Ref  *string                                          `json:"ref,omitempty"`
	Repo string                                           `json:"repo"`
	Sha  *string                                          `json:"sha,omitempty"`
	Type CancelDeployment200ApplicationJSONGitSource2Type `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource2) GetType() CancelDeployment200ApplicationJSONGitSource2Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource2Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSource1RepoIDType string

const (
	CancelDeployment200ApplicationJSONGitSource1RepoIDTypeStr     CancelDeployment200ApplicationJSONGitSource1RepoIDType = "str"
	CancelDeployment200ApplicationJSONGitSource1RepoIDTypeInteger CancelDeployment200ApplicationJSONGitSource1RepoIDType = "integer"
)

type CancelDeployment200ApplicationJSONGitSource1RepoID struct {
	Str     *string
	Integer *int64

	Type CancelDeployment200ApplicationJSONGitSource1RepoIDType
}

func CreateCancelDeployment200ApplicationJSONGitSource1RepoIDStr(str string) CancelDeployment200ApplicationJSONGitSource1RepoID {
	typ := CancelDeployment200ApplicationJSONGitSource1RepoIDTypeStr

	return CancelDeployment200ApplicationJSONGitSource1RepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSource1RepoIDInteger(integer int64) CancelDeployment200ApplicationJSONGitSource1RepoID {
	typ := CancelDeployment200ApplicationJSONGitSource1RepoIDTypeInteger

	return CancelDeployment200ApplicationJSONGitSource1RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CancelDeployment200ApplicationJSONGitSource1RepoID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CancelDeployment200ApplicationJSONGitSource1RepoIDTypeStr
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CancelDeployment200ApplicationJSONGitSource1RepoIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONGitSource1RepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CancelDeployment200ApplicationJSONGitSource1Type string

const (
	CancelDeployment200ApplicationJSONGitSource1TypeGithub CancelDeployment200ApplicationJSONGitSource1Type = "github"
)

func (e CancelDeployment200ApplicationJSONGitSource1Type) ToPointer() *CancelDeployment200ApplicationJSONGitSource1Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONGitSource1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeployment200ApplicationJSONGitSource1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONGitSource1Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONGitSource1 struct {
	PrID   *int64                                             `json:"prId,omitempty"`
	Ref    *string                                            `json:"ref,omitempty"`
	RepoID CancelDeployment200ApplicationJSONGitSource1RepoID `json:"repoId"`
	Sha    *string                                            `json:"sha,omitempty"`
	Type   CancelDeployment200ApplicationJSONGitSource1Type   `json:"type"`
}

func (o *CancelDeployment200ApplicationJSONGitSource1) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CancelDeployment200ApplicationJSONGitSource1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeployment200ApplicationJSONGitSource1) GetRepoID() CancelDeployment200ApplicationJSONGitSource1RepoID {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource1RepoID{}
	}
	return o.RepoID
}

func (o *CancelDeployment200ApplicationJSONGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeployment200ApplicationJSONGitSource1) GetType() CancelDeployment200ApplicationJSONGitSource1Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONGitSource1Type("")
	}
	return o.Type
}

type CancelDeployment200ApplicationJSONGitSourceType string

const (
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource1 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_1"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource2 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_2"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource3 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_3"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource4 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_4"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource5 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_5"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource6 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_6"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource7 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_7"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource8 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_8"
	CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource9 CancelDeployment200ApplicationJSONGitSourceType = "cancelDeployment_200ApplicationJSON_gitSource_9"
)

type CancelDeployment200ApplicationJSONGitSource struct {
	CancelDeployment200ApplicationJSONGitSource1 *CancelDeployment200ApplicationJSONGitSource1
	CancelDeployment200ApplicationJSONGitSource2 *CancelDeployment200ApplicationJSONGitSource2
	CancelDeployment200ApplicationJSONGitSource3 *CancelDeployment200ApplicationJSONGitSource3
	CancelDeployment200ApplicationJSONGitSource4 *CancelDeployment200ApplicationJSONGitSource4
	CancelDeployment200ApplicationJSONGitSource5 *CancelDeployment200ApplicationJSONGitSource5
	CancelDeployment200ApplicationJSONGitSource6 *CancelDeployment200ApplicationJSONGitSource6
	CancelDeployment200ApplicationJSONGitSource7 *CancelDeployment200ApplicationJSONGitSource7
	CancelDeployment200ApplicationJSONGitSource8 *CancelDeployment200ApplicationJSONGitSource8
	CancelDeployment200ApplicationJSONGitSource9 *CancelDeployment200ApplicationJSONGitSource9

	Type CancelDeployment200ApplicationJSONGitSourceType
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource1(cancelDeployment200ApplicationJSONGitSource1 CancelDeployment200ApplicationJSONGitSource1) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource1

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource1: &cancelDeployment200ApplicationJSONGitSource1,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource2(cancelDeployment200ApplicationJSONGitSource2 CancelDeployment200ApplicationJSONGitSource2) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource2

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource2: &cancelDeployment200ApplicationJSONGitSource2,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource3(cancelDeployment200ApplicationJSONGitSource3 CancelDeployment200ApplicationJSONGitSource3) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource3

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource3: &cancelDeployment200ApplicationJSONGitSource3,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource4(cancelDeployment200ApplicationJSONGitSource4 CancelDeployment200ApplicationJSONGitSource4) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource4

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource4: &cancelDeployment200ApplicationJSONGitSource4,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource5(cancelDeployment200ApplicationJSONGitSource5 CancelDeployment200ApplicationJSONGitSource5) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource5

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource5: &cancelDeployment200ApplicationJSONGitSource5,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource6(cancelDeployment200ApplicationJSONGitSource6 CancelDeployment200ApplicationJSONGitSource6) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource6

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource6: &cancelDeployment200ApplicationJSONGitSource6,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource7(cancelDeployment200ApplicationJSONGitSource7 CancelDeployment200ApplicationJSONGitSource7) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource7

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource7: &cancelDeployment200ApplicationJSONGitSource7,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource8(cancelDeployment200ApplicationJSONGitSource8 CancelDeployment200ApplicationJSONGitSource8) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource8

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource8: &cancelDeployment200ApplicationJSONGitSource8,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONGitSourceCancelDeployment200ApplicationJSONGitSource9(cancelDeployment200ApplicationJSONGitSource9 CancelDeployment200ApplicationJSONGitSource9) CancelDeployment200ApplicationJSONGitSource {
	typ := CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource9

	return CancelDeployment200ApplicationJSONGitSource{
		CancelDeployment200ApplicationJSONGitSource9: &cancelDeployment200ApplicationJSONGitSource9,
		Type: typ,
	}
}

func (u *CancelDeployment200ApplicationJSONGitSource) UnmarshalJSON(data []byte) error {

	cancelDeployment200ApplicationJSONGitSource6 := new(CancelDeployment200ApplicationJSONGitSource6)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource6, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource6 = cancelDeployment200ApplicationJSONGitSource6
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource6
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource8 := new(CancelDeployment200ApplicationJSONGitSource8)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource8, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource8 = cancelDeployment200ApplicationJSONGitSource8
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource8
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource1 := new(CancelDeployment200ApplicationJSONGitSource1)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource1, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource1 = cancelDeployment200ApplicationJSONGitSource1
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource1
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource3 := new(CancelDeployment200ApplicationJSONGitSource3)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource3, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource3 = cancelDeployment200ApplicationJSONGitSource3
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource3
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource2 := new(CancelDeployment200ApplicationJSONGitSource2)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource2, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource2 = cancelDeployment200ApplicationJSONGitSource2
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource2
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource4 := new(CancelDeployment200ApplicationJSONGitSource4)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource4, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource4 = cancelDeployment200ApplicationJSONGitSource4
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource4
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource5 := new(CancelDeployment200ApplicationJSONGitSource5)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource5, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource5 = cancelDeployment200ApplicationJSONGitSource5
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource5
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource7 := new(CancelDeployment200ApplicationJSONGitSource7)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource7, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource7 = cancelDeployment200ApplicationJSONGitSource7
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource7
		return nil
	}

	cancelDeployment200ApplicationJSONGitSource9 := new(CancelDeployment200ApplicationJSONGitSource9)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONGitSource9, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONGitSource9 = cancelDeployment200ApplicationJSONGitSource9
		u.Type = CancelDeployment200ApplicationJSONGitSourceTypeCancelDeployment200ApplicationJSONGitSource9
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONGitSource) MarshalJSON() ([]byte, error) {
	if u.CancelDeployment200ApplicationJSONGitSource1 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource1, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource2 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource2, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource3 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource3, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource4 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource4, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource5 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource5, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource6 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource6, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource7 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource7, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource8 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource8, "", true)
	}

	if u.CancelDeployment200ApplicationJSONGitSource9 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONGitSource9, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CancelDeployment200ApplicationJSONLambdasOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *CancelDeployment200ApplicationJSONLambdasOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *CancelDeployment200ApplicationJSONLambdasOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CancelDeployment200ApplicationJSONLambdasReadyState string

const (
	CancelDeployment200ApplicationJSONLambdasReadyStateInitializing CancelDeployment200ApplicationJSONLambdasReadyState = "INITIALIZING"
	CancelDeployment200ApplicationJSONLambdasReadyStateBuilding     CancelDeployment200ApplicationJSONLambdasReadyState = "BUILDING"
	CancelDeployment200ApplicationJSONLambdasReadyStateReady        CancelDeployment200ApplicationJSONLambdasReadyState = "READY"
	CancelDeployment200ApplicationJSONLambdasReadyStateError        CancelDeployment200ApplicationJSONLambdasReadyState = "ERROR"
)

func (e CancelDeployment200ApplicationJSONLambdasReadyState) ToPointer() *CancelDeployment200ApplicationJSONLambdasReadyState {
	return &e
}

func (e *CancelDeployment200ApplicationJSONLambdasReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "BUILDING":
		fallthrough
	case "READY":
		fallthrough
	case "ERROR":
		*e = CancelDeployment200ApplicationJSONLambdasReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONLambdasReadyState: %v", v)
	}
}

type CancelDeployment200ApplicationJSONLambdas struct {
	CreatedAt    *int64                                               `json:"createdAt,omitempty"`
	Entrypoint   *string                                              `json:"entrypoint,omitempty"`
	ID           string                                               `json:"id"`
	Output       []CancelDeployment200ApplicationJSONLambdasOutput    `json:"output"`
	ReadyState   *CancelDeployment200ApplicationJSONLambdasReadyState `json:"readyState,omitempty"`
	ReadyStateAt *int64                                               `json:"readyStateAt,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetOutput() []CancelDeployment200ApplicationJSONLambdasOutput {
	if o == nil {
		return []CancelDeployment200ApplicationJSONLambdasOutput{}
	}
	return o.Output
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetReadyState() *CancelDeployment200ApplicationJSONLambdasReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CancelDeployment200ApplicationJSONLambdas) GetReadyStateAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// CancelDeployment200ApplicationJSONPlan - The pricing plan the deployment was made under
type CancelDeployment200ApplicationJSONPlan string

const (
	CancelDeployment200ApplicationJSONPlanPro        CancelDeployment200ApplicationJSONPlan = "pro"
	CancelDeployment200ApplicationJSONPlanEnterprise CancelDeployment200ApplicationJSONPlan = "enterprise"
	CancelDeployment200ApplicationJSONPlanHobby      CancelDeployment200ApplicationJSONPlan = "hobby"
	CancelDeployment200ApplicationJSONPlanOss        CancelDeployment200ApplicationJSONPlan = "oss"
)

func (e CancelDeployment200ApplicationJSONPlan) ToPointer() *CancelDeployment200ApplicationJSONPlan {
	return &e
}

func (e *CancelDeployment200ApplicationJSONPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = CancelDeployment200ApplicationJSONPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONPlan: %v", v)
	}
}

// CancelDeployment200ApplicationJSONReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type CancelDeployment200ApplicationJSONReadyState string

const (
	CancelDeployment200ApplicationJSONReadyStateInitializing CancelDeployment200ApplicationJSONReadyState = "INITIALIZING"
	CancelDeployment200ApplicationJSONReadyStateBuilding     CancelDeployment200ApplicationJSONReadyState = "BUILDING"
	CancelDeployment200ApplicationJSONReadyStateReady        CancelDeployment200ApplicationJSONReadyState = "READY"
	CancelDeployment200ApplicationJSONReadyStateError        CancelDeployment200ApplicationJSONReadyState = "ERROR"
	CancelDeployment200ApplicationJSONReadyStateQueued       CancelDeployment200ApplicationJSONReadyState = "QUEUED"
	CancelDeployment200ApplicationJSONReadyStateCanceled     CancelDeployment200ApplicationJSONReadyState = "CANCELED"
)

func (e CancelDeployment200ApplicationJSONReadyState) ToPointer() *CancelDeployment200ApplicationJSONReadyState {
	return &e
}

func (e *CancelDeployment200ApplicationJSONReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "BUILDING":
		fallthrough
	case "READY":
		fallthrough
	case "ERROR":
		fallthrough
	case "QUEUED":
		fallthrough
	case "CANCELED":
		*e = CancelDeployment200ApplicationJSONReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONReadyState: %v", v)
	}
}

// CancelDeployment200ApplicationJSONReadySubstate - The substate of the deployment when the state is "READY"
type CancelDeployment200ApplicationJSONReadySubstate string

const (
	CancelDeployment200ApplicationJSONReadySubstateStaged   CancelDeployment200ApplicationJSONReadySubstate = "STAGED"
	CancelDeployment200ApplicationJSONReadySubstatePromoted CancelDeployment200ApplicationJSONReadySubstate = "PROMOTED"
)

func (e CancelDeployment200ApplicationJSONReadySubstate) ToPointer() *CancelDeployment200ApplicationJSONReadySubstate {
	return &e
}

func (e *CancelDeployment200ApplicationJSONReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CancelDeployment200ApplicationJSONReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONReadySubstate: %v", v)
	}
}

type CancelDeployment200ApplicationJSONRoutes3Middleware int64

const (
	CancelDeployment200ApplicationJSONRoutes3MiddlewareZero CancelDeployment200ApplicationJSONRoutes3Middleware = 0
)

func (e CancelDeployment200ApplicationJSONRoutes3Middleware) ToPointer() *CancelDeployment200ApplicationJSONRoutes3Middleware {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes3Middleware) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		*e = CancelDeployment200ApplicationJSONRoutes3Middleware(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes3Middleware: %v", v)
	}
}

// CancelDeployment200ApplicationJSONRoutes3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeployment200ApplicationJSONRoutes3 struct {
	Continue   bool                                                `json:"continue"`
	Middleware CancelDeployment200ApplicationJSONRoutes3Middleware `json:"middleware"`
	Src        string                                              `json:"src"`
}

func (o *CancelDeployment200ApplicationJSONRoutes3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CancelDeployment200ApplicationJSONRoutes3) GetMiddleware() CancelDeployment200ApplicationJSONRoutes3Middleware {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes3Middleware(0)
	}
	return o.Middleware
}

func (o *CancelDeployment200ApplicationJSONRoutes3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

type CancelDeployment200ApplicationJSONRoutes2Handle string

const (
	CancelDeployment200ApplicationJSONRoutes2HandleError      CancelDeployment200ApplicationJSONRoutes2Handle = "error"
	CancelDeployment200ApplicationJSONRoutes2HandleFilesystem CancelDeployment200ApplicationJSONRoutes2Handle = "filesystem"
	CancelDeployment200ApplicationJSONRoutes2HandleHit        CancelDeployment200ApplicationJSONRoutes2Handle = "hit"
	CancelDeployment200ApplicationJSONRoutes2HandleMiss       CancelDeployment200ApplicationJSONRoutes2Handle = "miss"
	CancelDeployment200ApplicationJSONRoutes2HandleRewrite    CancelDeployment200ApplicationJSONRoutes2Handle = "rewrite"
	CancelDeployment200ApplicationJSONRoutes2HandleResource   CancelDeployment200ApplicationJSONRoutes2Handle = "resource"
)

func (e CancelDeployment200ApplicationJSONRoutes2Handle) ToPointer() *CancelDeployment200ApplicationJSONRoutes2Handle {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes2Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = CancelDeployment200ApplicationJSONRoutes2Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes2Handle: %v", v)
	}
}

// CancelDeployment200ApplicationJSONRoutes2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeployment200ApplicationJSONRoutes2 struct {
	Dest   *string                                         `json:"dest,omitempty"`
	Handle CancelDeployment200ApplicationJSONRoutes2Handle `json:"handle"`
	Src    *string                                         `json:"src,omitempty"`
	Status *int64                                          `json:"status,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONRoutes2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeployment200ApplicationJSONRoutes2) GetHandle() CancelDeployment200ApplicationJSONRoutes2Handle {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes2Handle("")
	}
	return o.Handle
}

func (o *CancelDeployment200ApplicationJSONRoutes2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CancelDeployment200ApplicationJSONRoutes2) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CancelDeployment200ApplicationJSONRoutes1Has2Type string

const (
	CancelDeployment200ApplicationJSONRoutes1Has2TypeHeader CancelDeployment200ApplicationJSONRoutes1Has2Type = "header"
	CancelDeployment200ApplicationJSONRoutes1Has2TypeCookie CancelDeployment200ApplicationJSONRoutes1Has2Type = "cookie"
	CancelDeployment200ApplicationJSONRoutes1Has2TypeQuery  CancelDeployment200ApplicationJSONRoutes1Has2Type = "query"
)

func (e CancelDeployment200ApplicationJSONRoutes1Has2Type) ToPointer() *CancelDeployment200ApplicationJSONRoutes1Has2Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes1Has2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeployment200ApplicationJSONRoutes1Has2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes1Has2Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONRoutes1Has2 struct {
	Key   string                                            `json:"key"`
	Type  CancelDeployment200ApplicationJSONRoutes1Has2Type `json:"type"`
	Value *string                                           `json:"value,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1Has2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeployment200ApplicationJSONRoutes1Has2) GetType() CancelDeployment200ApplicationJSONRoutes1Has2Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes1Has2Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONRoutes1Has2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeployment200ApplicationJSONRoutes1Has1Type string

const (
	CancelDeployment200ApplicationJSONRoutes1Has1TypeHost CancelDeployment200ApplicationJSONRoutes1Has1Type = "host"
)

func (e CancelDeployment200ApplicationJSONRoutes1Has1Type) ToPointer() *CancelDeployment200ApplicationJSONRoutes1Has1Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes1Has1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeployment200ApplicationJSONRoutes1Has1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes1Has1Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONRoutes1Has1 struct {
	Type  CancelDeployment200ApplicationJSONRoutes1Has1Type `json:"type"`
	Value string                                            `json:"value"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1Has1) GetType() CancelDeployment200ApplicationJSONRoutes1Has1Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes1Has1Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONRoutes1Has1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CancelDeployment200ApplicationJSONRoutes1HasType string

const (
	CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has1 CancelDeployment200ApplicationJSONRoutes1HasType = "cancelDeployment_200ApplicationJSON_routes_1_has_1"
	CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has2 CancelDeployment200ApplicationJSONRoutes1HasType = "cancelDeployment_200ApplicationJSON_routes_1_has_2"
)

type CancelDeployment200ApplicationJSONRoutes1Has struct {
	CancelDeployment200ApplicationJSONRoutes1Has1 *CancelDeployment200ApplicationJSONRoutes1Has1
	CancelDeployment200ApplicationJSONRoutes1Has2 *CancelDeployment200ApplicationJSONRoutes1Has2

	Type CancelDeployment200ApplicationJSONRoutes1HasType
}

func CreateCancelDeployment200ApplicationJSONRoutes1HasCancelDeployment200ApplicationJSONRoutes1Has1(cancelDeployment200ApplicationJSONRoutes1Has1 CancelDeployment200ApplicationJSONRoutes1Has1) CancelDeployment200ApplicationJSONRoutes1Has {
	typ := CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has1

	return CancelDeployment200ApplicationJSONRoutes1Has{
		CancelDeployment200ApplicationJSONRoutes1Has1: &cancelDeployment200ApplicationJSONRoutes1Has1,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONRoutes1HasCancelDeployment200ApplicationJSONRoutes1Has2(cancelDeployment200ApplicationJSONRoutes1Has2 CancelDeployment200ApplicationJSONRoutes1Has2) CancelDeployment200ApplicationJSONRoutes1Has {
	typ := CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has2

	return CancelDeployment200ApplicationJSONRoutes1Has{
		CancelDeployment200ApplicationJSONRoutes1Has2: &cancelDeployment200ApplicationJSONRoutes1Has2,
		Type: typ,
	}
}

func (u *CancelDeployment200ApplicationJSONRoutes1Has) UnmarshalJSON(data []byte) error {

	cancelDeployment200ApplicationJSONRoutes1Has1 := new(CancelDeployment200ApplicationJSONRoutes1Has1)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes1Has1, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes1Has1 = cancelDeployment200ApplicationJSONRoutes1Has1
		u.Type = CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has1
		return nil
	}

	cancelDeployment200ApplicationJSONRoutes1Has2 := new(CancelDeployment200ApplicationJSONRoutes1Has2)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes1Has2, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes1Has2 = cancelDeployment200ApplicationJSONRoutes1Has2
		u.Type = CancelDeployment200ApplicationJSONRoutes1HasTypeCancelDeployment200ApplicationJSONRoutes1Has2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONRoutes1Has) MarshalJSON() ([]byte, error) {
	if u.CancelDeployment200ApplicationJSONRoutes1Has1 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes1Has1, "", true)
	}

	if u.CancelDeployment200ApplicationJSONRoutes1Has2 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes1Has2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CancelDeployment200ApplicationJSONRoutes1Locale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1Locale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *CancelDeployment200ApplicationJSONRoutes1Locale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type CancelDeployment200ApplicationJSONRoutes1Missing2Type string

const (
	CancelDeployment200ApplicationJSONRoutes1Missing2TypeHeader CancelDeployment200ApplicationJSONRoutes1Missing2Type = "header"
	CancelDeployment200ApplicationJSONRoutes1Missing2TypeCookie CancelDeployment200ApplicationJSONRoutes1Missing2Type = "cookie"
	CancelDeployment200ApplicationJSONRoutes1Missing2TypeQuery  CancelDeployment200ApplicationJSONRoutes1Missing2Type = "query"
)

func (e CancelDeployment200ApplicationJSONRoutes1Missing2Type) ToPointer() *CancelDeployment200ApplicationJSONRoutes1Missing2Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeployment200ApplicationJSONRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes1Missing2Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONRoutes1Missing2 struct {
	Key   string                                                `json:"key"`
	Type  CancelDeployment200ApplicationJSONRoutes1Missing2Type `json:"type"`
	Value *string                                               `json:"value,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1Missing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeployment200ApplicationJSONRoutes1Missing2) GetType() CancelDeployment200ApplicationJSONRoutes1Missing2Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONRoutes1Missing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeployment200ApplicationJSONRoutes1Missing1Type string

const (
	CancelDeployment200ApplicationJSONRoutes1Missing1TypeHost CancelDeployment200ApplicationJSONRoutes1Missing1Type = "host"
)

func (e CancelDeployment200ApplicationJSONRoutes1Missing1Type) ToPointer() *CancelDeployment200ApplicationJSONRoutes1Missing1Type {
	return &e
}

func (e *CancelDeployment200ApplicationJSONRoutes1Missing1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeployment200ApplicationJSONRoutes1Missing1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONRoutes1Missing1Type: %v", v)
	}
}

type CancelDeployment200ApplicationJSONRoutes1Missing1 struct {
	Type  CancelDeployment200ApplicationJSONRoutes1Missing1Type `json:"type"`
	Value string                                                `json:"value"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1Missing1) GetType() CancelDeployment200ApplicationJSONRoutes1Missing1Type {
	if o == nil {
		return CancelDeployment200ApplicationJSONRoutes1Missing1Type("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSONRoutes1Missing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CancelDeployment200ApplicationJSONRoutes1MissingType string

const (
	CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing1 CancelDeployment200ApplicationJSONRoutes1MissingType = "cancelDeployment_200ApplicationJSON_routes_1_missing_1"
	CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing2 CancelDeployment200ApplicationJSONRoutes1MissingType = "cancelDeployment_200ApplicationJSON_routes_1_missing_2"
)

type CancelDeployment200ApplicationJSONRoutes1Missing struct {
	CancelDeployment200ApplicationJSONRoutes1Missing1 *CancelDeployment200ApplicationJSONRoutes1Missing1
	CancelDeployment200ApplicationJSONRoutes1Missing2 *CancelDeployment200ApplicationJSONRoutes1Missing2

	Type CancelDeployment200ApplicationJSONRoutes1MissingType
}

func CreateCancelDeployment200ApplicationJSONRoutes1MissingCancelDeployment200ApplicationJSONRoutes1Missing1(cancelDeployment200ApplicationJSONRoutes1Missing1 CancelDeployment200ApplicationJSONRoutes1Missing1) CancelDeployment200ApplicationJSONRoutes1Missing {
	typ := CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing1

	return CancelDeployment200ApplicationJSONRoutes1Missing{
		CancelDeployment200ApplicationJSONRoutes1Missing1: &cancelDeployment200ApplicationJSONRoutes1Missing1,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONRoutes1MissingCancelDeployment200ApplicationJSONRoutes1Missing2(cancelDeployment200ApplicationJSONRoutes1Missing2 CancelDeployment200ApplicationJSONRoutes1Missing2) CancelDeployment200ApplicationJSONRoutes1Missing {
	typ := CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing2

	return CancelDeployment200ApplicationJSONRoutes1Missing{
		CancelDeployment200ApplicationJSONRoutes1Missing2: &cancelDeployment200ApplicationJSONRoutes1Missing2,
		Type: typ,
	}
}

func (u *CancelDeployment200ApplicationJSONRoutes1Missing) UnmarshalJSON(data []byte) error {

	cancelDeployment200ApplicationJSONRoutes1Missing1 := new(CancelDeployment200ApplicationJSONRoutes1Missing1)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes1Missing1, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes1Missing1 = cancelDeployment200ApplicationJSONRoutes1Missing1
		u.Type = CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing1
		return nil
	}

	cancelDeployment200ApplicationJSONRoutes1Missing2 := new(CancelDeployment200ApplicationJSONRoutes1Missing2)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes1Missing2, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes1Missing2 = cancelDeployment200ApplicationJSONRoutes1Missing2
		u.Type = CancelDeployment200ApplicationJSONRoutes1MissingTypeCancelDeployment200ApplicationJSONRoutes1Missing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONRoutes1Missing) MarshalJSON() ([]byte, error) {
	if u.CancelDeployment200ApplicationJSONRoutes1Missing1 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes1Missing1, "", true)
	}

	if u.CancelDeployment200ApplicationJSONRoutes1Missing2 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes1Missing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CancelDeployment200ApplicationJSONRoutes1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeployment200ApplicationJSONRoutes1 struct {
	CaseSensitive *bool                                            `json:"caseSensitive,omitempty"`
	Check         *bool                                            `json:"check,omitempty"`
	Continue      *bool                                            `json:"continue,omitempty"`
	Dest          *string                                          `json:"dest,omitempty"`
	Has           []CancelDeployment200ApplicationJSONRoutes1Has   `json:"has,omitempty"`
	Headers       map[string]string                                `json:"headers,omitempty"`
	Important     *bool                                            `json:"important,omitempty"`
	Locale        *CancelDeployment200ApplicationJSONRoutes1Locale `json:"locale,omitempty"`
	Methods       []string                                         `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *int64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string                                           `json:"middlewareRawSrc,omitempty"`
	Missing          []CancelDeployment200ApplicationJSONRoutes1Missing `json:"missing,omitempty"`
	Override         *bool                                              `json:"override,omitempty"`
	Src              string                                             `json:"src"`
	Status           *int64                                             `json:"status,omitempty"`
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetHas() []CancelDeployment200ApplicationJSONRoutes1Has {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetLocale() *CancelDeployment200ApplicationJSONRoutes1Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetMiddleware() *int64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetMissing() []CancelDeployment200ApplicationJSONRoutes1Missing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CancelDeployment200ApplicationJSONRoutes1) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CancelDeployment200ApplicationJSONRoutesType string

const (
	CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes1 CancelDeployment200ApplicationJSONRoutesType = "cancelDeployment_200ApplicationJSON_routes_1"
	CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes2 CancelDeployment200ApplicationJSONRoutesType = "cancelDeployment_200ApplicationJSON_routes_2"
	CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes3 CancelDeployment200ApplicationJSONRoutesType = "cancelDeployment_200ApplicationJSON_routes_3"
)

type CancelDeployment200ApplicationJSONRoutes struct {
	CancelDeployment200ApplicationJSONRoutes1 *CancelDeployment200ApplicationJSONRoutes1
	CancelDeployment200ApplicationJSONRoutes2 *CancelDeployment200ApplicationJSONRoutes2
	CancelDeployment200ApplicationJSONRoutes3 *CancelDeployment200ApplicationJSONRoutes3

	Type CancelDeployment200ApplicationJSONRoutesType
}

func CreateCancelDeployment200ApplicationJSONRoutesCancelDeployment200ApplicationJSONRoutes1(cancelDeployment200ApplicationJSONRoutes1 CancelDeployment200ApplicationJSONRoutes1) CancelDeployment200ApplicationJSONRoutes {
	typ := CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes1

	return CancelDeployment200ApplicationJSONRoutes{
		CancelDeployment200ApplicationJSONRoutes1: &cancelDeployment200ApplicationJSONRoutes1,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONRoutesCancelDeployment200ApplicationJSONRoutes2(cancelDeployment200ApplicationJSONRoutes2 CancelDeployment200ApplicationJSONRoutes2) CancelDeployment200ApplicationJSONRoutes {
	typ := CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes2

	return CancelDeployment200ApplicationJSONRoutes{
		CancelDeployment200ApplicationJSONRoutes2: &cancelDeployment200ApplicationJSONRoutes2,
		Type: typ,
	}
}

func CreateCancelDeployment200ApplicationJSONRoutesCancelDeployment200ApplicationJSONRoutes3(cancelDeployment200ApplicationJSONRoutes3 CancelDeployment200ApplicationJSONRoutes3) CancelDeployment200ApplicationJSONRoutes {
	typ := CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes3

	return CancelDeployment200ApplicationJSONRoutes{
		CancelDeployment200ApplicationJSONRoutes3: &cancelDeployment200ApplicationJSONRoutes3,
		Type: typ,
	}
}

func (u *CancelDeployment200ApplicationJSONRoutes) UnmarshalJSON(data []byte) error {

	cancelDeployment200ApplicationJSONRoutes3 := new(CancelDeployment200ApplicationJSONRoutes3)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes3, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes3 = cancelDeployment200ApplicationJSONRoutes3
		u.Type = CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes3
		return nil
	}

	cancelDeployment200ApplicationJSONRoutes2 := new(CancelDeployment200ApplicationJSONRoutes2)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes2, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes2 = cancelDeployment200ApplicationJSONRoutes2
		u.Type = CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes2
		return nil
	}

	cancelDeployment200ApplicationJSONRoutes1 := new(CancelDeployment200ApplicationJSONRoutes1)
	if err := utils.UnmarshalJSON(data, &cancelDeployment200ApplicationJSONRoutes1, "", true, true); err == nil {
		u.CancelDeployment200ApplicationJSONRoutes1 = cancelDeployment200ApplicationJSONRoutes1
		u.Type = CancelDeployment200ApplicationJSONRoutesTypeCancelDeployment200ApplicationJSONRoutes1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CancelDeployment200ApplicationJSONRoutes) MarshalJSON() ([]byte, error) {
	if u.CancelDeployment200ApplicationJSONRoutes1 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes1, "", true)
	}

	if u.CancelDeployment200ApplicationJSONRoutes2 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes2, "", true)
	}

	if u.CancelDeployment200ApplicationJSONRoutes3 != nil {
		return utils.MarshalJSON(u.CancelDeployment200ApplicationJSONRoutes3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CancelDeployment200ApplicationJSONSource - Where was the deployment created from
type CancelDeployment200ApplicationJSONSource string

const (
	CancelDeployment200ApplicationJSONSourceCli        CancelDeployment200ApplicationJSONSource = "cli"
	CancelDeployment200ApplicationJSONSourceGit        CancelDeployment200ApplicationJSONSource = "git"
	CancelDeployment200ApplicationJSONSourceImport     CancelDeployment200ApplicationJSONSource = "import"
	CancelDeployment200ApplicationJSONSourceImportRepo CancelDeployment200ApplicationJSONSource = "import/repo"
	CancelDeployment200ApplicationJSONSourceCloneRepo  CancelDeployment200ApplicationJSONSource = "clone/repo"
)

func (e CancelDeployment200ApplicationJSONSource) ToPointer() *CancelDeployment200ApplicationJSONSource {
	return &e
}

func (e *CancelDeployment200ApplicationJSONSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		*e = CancelDeployment200ApplicationJSONSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONSource: %v", v)
	}
}

// CancelDeployment200ApplicationJSONTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type CancelDeployment200ApplicationJSONTarget string

const (
	CancelDeployment200ApplicationJSONTargetStaging    CancelDeployment200ApplicationJSONTarget = "staging"
	CancelDeployment200ApplicationJSONTargetProduction CancelDeployment200ApplicationJSONTarget = "production"
)

func (e CancelDeployment200ApplicationJSONTarget) ToPointer() *CancelDeployment200ApplicationJSONTarget {
	return &e
}

func (e *CancelDeployment200ApplicationJSONTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CancelDeployment200ApplicationJSONTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONTarget: %v", v)
	}
}

// CancelDeployment200ApplicationJSONTeam - The team that owns the deployment if any
type CancelDeployment200ApplicationJSONTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *CancelDeployment200ApplicationJSONTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeployment200ApplicationJSONTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeployment200ApplicationJSONTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type CancelDeployment200ApplicationJSONType string

const (
	CancelDeployment200ApplicationJSONTypeLambdas CancelDeployment200ApplicationJSONType = "LAMBDAS"
)

func (e CancelDeployment200ApplicationJSONType) ToPointer() *CancelDeployment200ApplicationJSONType {
	return &e
}

func (e *CancelDeployment200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CancelDeployment200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONType: %v", v)
	}
}

// CancelDeployment200ApplicationJSONVersion - The platform version that was used to create the deployment.
type CancelDeployment200ApplicationJSONVersion int64

const (
	CancelDeployment200ApplicationJSONVersionTwo CancelDeployment200ApplicationJSONVersion = 2
)

func (e CancelDeployment200ApplicationJSONVersion) ToPointer() *CancelDeployment200ApplicationJSONVersion {
	return &e
}

func (e *CancelDeployment200ApplicationJSONVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		*e = CancelDeployment200ApplicationJSONVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeployment200ApplicationJSONVersion: %v", v)
	}
}

type CancelDeployment200ApplicationJSON struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                                               `json:"aliasAssigned"`
	AliasAssignedAt *CancelDeployment200ApplicationJSONAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *CancelDeployment200ApplicationJSONAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                             `json:"aliasFinal,omitempty"`
	AliasWarning            *CancelDeployment200ApplicationJSONAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                               `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                            `json:"automaticAliases,omitempty"`
	BootedAt                int64                                               `json:"bootedAt"`
	Build                   CancelDeployment200ApplicationJSONBuild             `json:"build"`
	BuildErrorAt            *int64                                              `json:"buildErrorAt,omitempty"`
	BuildingAt              int64                                               `json:"buildingAt"`
	Builds                  []CancelDeployment200ApplicationJSONBuilds          `json:"builds,omitempty"`
	CanceledAt              *int64                                              `json:"canceledAt,omitempty"`
	ChecksConclusion        *CancelDeployment200ApplicationJSONChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *CancelDeployment200ApplicationJSONChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt int64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator CancelDeployment200ApplicationJSONCreator `json:"creator"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]CancelDeployment200ApplicationJSONFunctions `json:"functions,omitempty"`
	GitRepo   *CancelDeployment200ApplicationJSONGitRepo             `json:"gitRepo,omitempty"`
	GitSource *CancelDeployment200ApplicationJSONGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                                        `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []CancelDeployment200ApplicationJSONLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The pricing plan the deployment was made under
	Plan CancelDeployment200ApplicationJSONPlan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState CancelDeployment200ApplicationJSONReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *CancelDeployment200ApplicationJSONReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []CancelDeployment200ApplicationJSONRoutes `json:"routes"`
	// Where was the deployment created from
	Source *CancelDeployment200ApplicationJSONSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *CancelDeployment200ApplicationJSONTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *CancelDeployment200ApplicationJSONTeam `json:"team,omitempty"`
	Type CancelDeployment200ApplicationJSONType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version CancelDeployment200ApplicationJSONVersion `json:"version"`
}

func (o *CancelDeployment200ApplicationJSON) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *CancelDeployment200ApplicationJSON) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CancelDeployment200ApplicationJSON) GetAliasAssignedAt() *CancelDeployment200ApplicationJSONAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CancelDeployment200ApplicationJSON) GetAliasError() *CancelDeployment200ApplicationJSONAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CancelDeployment200ApplicationJSON) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CancelDeployment200ApplicationJSON) GetAliasWarning() *CancelDeployment200ApplicationJSONAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CancelDeployment200ApplicationJSON) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CancelDeployment200ApplicationJSON) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CancelDeployment200ApplicationJSON) GetBootedAt() int64 {
	if o == nil {
		return 0
	}
	return o.BootedAt
}

func (o *CancelDeployment200ApplicationJSON) GetBuild() CancelDeployment200ApplicationJSONBuild {
	if o == nil {
		return CancelDeployment200ApplicationJSONBuild{}
	}
	return o.Build
}

func (o *CancelDeployment200ApplicationJSON) GetBuildErrorAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CancelDeployment200ApplicationJSON) GetBuildingAt() int64 {
	if o == nil {
		return 0
	}
	return o.BuildingAt
}

func (o *CancelDeployment200ApplicationJSON) GetBuilds() []CancelDeployment200ApplicationJSONBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CancelDeployment200ApplicationJSON) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelDeployment200ApplicationJSON) GetChecksConclusion() *CancelDeployment200ApplicationJSONChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CancelDeployment200ApplicationJSON) GetChecksState() *CancelDeployment200ApplicationJSONChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CancelDeployment200ApplicationJSON) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CancelDeployment200ApplicationJSON) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CancelDeployment200ApplicationJSON) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CancelDeployment200ApplicationJSON) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CancelDeployment200ApplicationJSON) GetCreator() CancelDeployment200ApplicationJSONCreator {
	if o == nil {
		return CancelDeployment200ApplicationJSONCreator{}
	}
	return o.Creator
}

func (o *CancelDeployment200ApplicationJSON) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CancelDeployment200ApplicationJSON) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CancelDeployment200ApplicationJSON) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CancelDeployment200ApplicationJSON) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CancelDeployment200ApplicationJSON) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CancelDeployment200ApplicationJSON) GetFunctions() map[string]CancelDeployment200ApplicationJSONFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CancelDeployment200ApplicationJSON) GetGitRepo() *CancelDeployment200ApplicationJSONGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CancelDeployment200ApplicationJSON) GetGitSource() *CancelDeployment200ApplicationJSONGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CancelDeployment200ApplicationJSON) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeployment200ApplicationJSON) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CancelDeployment200ApplicationJSON) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CancelDeployment200ApplicationJSON) GetLambdas() []CancelDeployment200ApplicationJSONLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CancelDeployment200ApplicationJSON) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CancelDeployment200ApplicationJSON) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CancelDeployment200ApplicationJSON) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeployment200ApplicationJSON) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CancelDeployment200ApplicationJSON) GetPlan() CancelDeployment200ApplicationJSONPlan {
	if o == nil {
		return CancelDeployment200ApplicationJSONPlan("")
	}
	return o.Plan
}

func (o *CancelDeployment200ApplicationJSON) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CancelDeployment200ApplicationJSON) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CancelDeployment200ApplicationJSON) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CancelDeployment200ApplicationJSON) GetReadyState() CancelDeployment200ApplicationJSONReadyState {
	if o == nil {
		return CancelDeployment200ApplicationJSONReadyState("")
	}
	return o.ReadyState
}

func (o *CancelDeployment200ApplicationJSON) GetReadySubstate() *CancelDeployment200ApplicationJSONReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CancelDeployment200ApplicationJSON) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CancelDeployment200ApplicationJSON) GetRoutes() []CancelDeployment200ApplicationJSONRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CancelDeployment200ApplicationJSON) GetSource() *CancelDeployment200ApplicationJSONSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CancelDeployment200ApplicationJSON) GetTarget() *CancelDeployment200ApplicationJSONTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CancelDeployment200ApplicationJSON) GetTeam() *CancelDeployment200ApplicationJSONTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CancelDeployment200ApplicationJSON) GetType() CancelDeployment200ApplicationJSONType {
	if o == nil {
		return CancelDeployment200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CancelDeployment200ApplicationJSON) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CancelDeployment200ApplicationJSON) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CancelDeployment200ApplicationJSON) GetVersion() CancelDeployment200ApplicationJSONVersion {
	if o == nil {
		return CancelDeployment200ApplicationJSONVersion(0)
	}
	return o.Version
}

type CancelDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                              *http.Response
	CancelDeployment200ApplicationJSONObject *CancelDeployment200ApplicationJSON
}

func (o *CancelDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CancelDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CancelDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CancelDeploymentResponse) GetCancelDeployment200ApplicationJSONObject() *CancelDeployment200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CancelDeployment200ApplicationJSONObject
}
