// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/models/shared"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/utils"
	"net/http"
)

// GitForkProtection - Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
type GitForkProtection string

const (
	GitForkProtectionOne  GitForkProtection = "1"
	GitForkProtectionZero GitForkProtection = "0"
)

func (e GitForkProtection) ToPointer() *GitForkProtection {
	return &e
}

func (e *GitForkProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = GitForkProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitForkProtection: %v", v)
	}
}

type GetProjectsRequest struct {
	// Filter results by connected Edge Config ID
	EdgeConfigID *string `queryParam:"style=form,explode=true,name=edgeConfigId"`
	// Filter results by connected Edge Config Token ID
	EdgeConfigTokenID *string `queryParam:"style=form,explode=true,name=edgeConfigTokenId"`
	// Filter results by excluding those projects that belong to a repo
	ExcludeRepos *string `queryParam:"style=form,explode=true,name=excludeRepos"`
	// Query only projects updated after the given timestamp
	From *string `queryParam:"style=form,explode=true,name=from"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *GitForkProtection `queryParam:"style=form,explode=true,name=gitForkProtection"`
	// Limit the number of projects returned
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Filter results by repo. Also used for project count
	Repo *string `queryParam:"style=form,explode=true,name=repo"`
	// Filter results by Repository ID.
	RepoID *string `queryParam:"style=form,explode=true,name=repoId"`
	// Filter results by Repository URL.
	RepoURL *string `queryParam:"style=form,explode=true,name=repoUrl"`
	// Search projects by the name field
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetProjectsRequest) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectsRequest) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectsRequest) GetExcludeRepos() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeRepos
}

func (o *GetProjectsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetProjectsRequest) GetGitForkProtection() *GitForkProtection {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectsRequest) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectsRequest) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectsRequest) GetRepoURL() *string {
	if o == nil {
		return nil
	}
	return o.RepoURL
}

func (o *GetProjectsRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetProjectsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetProjectsAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

func (o *GetProjectsAnalytics) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectsAnalytics) GetDisabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.DisabledAt
}

func (o *GetProjectsAnalytics) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *GetProjectsAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsAnalytics) GetPaidAt() *int64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetProjectsAnalytics) GetSampleRatePercent() *int64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *GetProjectsAnalytics) GetSpendLimitInDollars() *int64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type GetProjectsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *GetProjectsDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetProjectsDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetProjectsDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type GetProjectsCrons struct {
	Definitions []GetProjectsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

func (o *GetProjectsCrons) GetDefinitions() []GetProjectsDefinitions {
	if o == nil {
		return []GetProjectsDefinitions{}
	}
	return o.Definitions
}

func (o *GetProjectsCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetProjectsCrons) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectsCrons) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *GetProjectsCrons) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type GetProjectsDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

func (o *GetProjectsDataCache) GetStorageSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *GetProjectsDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *GetProjectsDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12TypePostgresDatabase GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type = "postgres-database"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type: %v", v)
	}
}

type GetProjects12 struct {
	StoreID string                                                                                `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type `json:"type"`
}

func (o *GetProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects12) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint12Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11TypePostgresPassword GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type = "postgres-password"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type: %v", v)
	}
}

type GetProjects11 struct {
	StoreID string                                                                                `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type `json:"type"`
}

func (o *GetProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects11) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint11Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10TypePostgresHost GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type = "postgres-host"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type: %v", v)
	}
}

type GetProjects10 struct {
	StoreID string                                                                                `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type `json:"type"`
}

func (o *GetProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects10) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint10Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9TypePostgresUser GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type = "postgres-user"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type: %v", v)
	}
}

type GetProjects9 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type `json:"type"`
}

func (o *GetProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects9) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint9Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8TypePostgresPrismaURL GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type = "postgres-prisma-url"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type: %v", v)
	}
}

type GetProjects8 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type `json:"type"`
}

func (o *GetProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects8) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint8Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7TypePostgresURLNonPooling GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type: %v", v)
	}
}

type GetProjects7 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type `json:"type"`
}

func (o *GetProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects7) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint7Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6TypePostgresURL GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type = "postgres-url"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type: %v", v)
	}
}

type GetProjects6 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type `json:"type"`
}

func (o *GetProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects6) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint6Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5TypeBlobReadWriteToken GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type = "blob-read-write-token"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type: %v", v)
	}
}

type GetProjects5 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type `json:"type"`
}

func (o *GetProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects5) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint5Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4TypeRedisRestAPIReadOnlyToken GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type: %v", v)
	}
}

type GetProjects4 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type `json:"type"`
}

func (o *GetProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects4) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint4Type("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintTypeRedisRestAPIToken GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType = "redis-rest-api-token"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType: %v", v)
	}
}

type GetProjectsProjects3 struct {
	StoreID string                                                                              `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType `json:"type"`
}

func (o *GetProjectsProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectsProjects3) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHintType("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvTypeRedisRestAPIURL GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType = "redis-rest-api-url"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType: %v", v)
	}
}

type GetProjectsProjectsResponse2002 struct {
	StoreID string                                                                   `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType `json:"type"`
}

func (o *GetProjectsProjectsResponse2002) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectsProjectsResponse2002) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType("")
	}
	return o.Type
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1TypeRedisURL GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type = "redis-url"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type: %v", v)
	}
}

type GetProjectsProjectsResponse2001 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type `json:"type"`
}

func (o *GetProjectsProjectsResponse2001) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectsProjectsResponse2001) GetType() GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type {
	if o == nil {
		return GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsEnvContentHint1Type("")
	}
	return o.Type
}

type GetProjectsContentHintType string

const (
	GetProjectsContentHintTypeGetProjectsProjectsResponse2001 GetProjectsContentHintType = "getProjects_projects_response_200_1"
	GetProjectsContentHintTypeGetProjectsProjectsResponse2002 GetProjectsContentHintType = "getProjects_projects_response_200_2"
	GetProjectsContentHintTypeGetProjectsProjects3            GetProjectsContentHintType = "getProjects_projects_3"
	GetProjectsContentHintTypeGetProjects4                    GetProjectsContentHintType = "getProjects_4"
	GetProjectsContentHintTypeGetProjects5                    GetProjectsContentHintType = "getProjects_5"
	GetProjectsContentHintTypeGetProjects6                    GetProjectsContentHintType = "getProjects_6"
	GetProjectsContentHintTypeGetProjects7                    GetProjectsContentHintType = "getProjects_7"
	GetProjectsContentHintTypeGetProjects8                    GetProjectsContentHintType = "getProjects_8"
	GetProjectsContentHintTypeGetProjects9                    GetProjectsContentHintType = "getProjects_9"
	GetProjectsContentHintTypeGetProjects10                   GetProjectsContentHintType = "getProjects_10"
	GetProjectsContentHintTypeGetProjects11                   GetProjectsContentHintType = "getProjects_11"
	GetProjectsContentHintTypeGetProjects12                   GetProjectsContentHintType = "getProjects_12"
)

type GetProjectsContentHint struct {
	GetProjectsProjectsResponse2001 *GetProjectsProjectsResponse2001
	GetProjectsProjectsResponse2002 *GetProjectsProjectsResponse2002
	GetProjectsProjects3            *GetProjectsProjects3
	GetProjects4                    *GetProjects4
	GetProjects5                    *GetProjects5
	GetProjects6                    *GetProjects6
	GetProjects7                    *GetProjects7
	GetProjects8                    *GetProjects8
	GetProjects9                    *GetProjects9
	GetProjects10                   *GetProjects10
	GetProjects11                   *GetProjects11
	GetProjects12                   *GetProjects12

	Type GetProjectsContentHintType
}

func CreateGetProjectsContentHintGetProjectsProjectsResponse2001(getProjectsProjectsResponse2001 GetProjectsProjectsResponse2001) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjectsProjectsResponse2001

	return GetProjectsContentHint{
		GetProjectsProjectsResponse2001: &getProjectsProjectsResponse2001,
		Type:                            typ,
	}
}

func CreateGetProjectsContentHintGetProjectsProjectsResponse2002(getProjectsProjectsResponse2002 GetProjectsProjectsResponse2002) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjectsProjectsResponse2002

	return GetProjectsContentHint{
		GetProjectsProjectsResponse2002: &getProjectsProjectsResponse2002,
		Type:                            typ,
	}
}

func CreateGetProjectsContentHintGetProjectsProjects3(getProjectsProjects3 GetProjectsProjects3) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjectsProjects3

	return GetProjectsContentHint{
		GetProjectsProjects3: &getProjectsProjects3,
		Type:                 typ,
	}
}

func CreateGetProjectsContentHintGetProjects4(getProjects4 GetProjects4) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects4

	return GetProjectsContentHint{
		GetProjects4: &getProjects4,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects5(getProjects5 GetProjects5) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects5

	return GetProjectsContentHint{
		GetProjects5: &getProjects5,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects6(getProjects6 GetProjects6) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects6

	return GetProjectsContentHint{
		GetProjects6: &getProjects6,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects7(getProjects7 GetProjects7) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects7

	return GetProjectsContentHint{
		GetProjects7: &getProjects7,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects8(getProjects8 GetProjects8) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects8

	return GetProjectsContentHint{
		GetProjects8: &getProjects8,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects9(getProjects9 GetProjects9) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects9

	return GetProjectsContentHint{
		GetProjects9: &getProjects9,
		Type:         typ,
	}
}

func CreateGetProjectsContentHintGetProjects10(getProjects10 GetProjects10) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects10

	return GetProjectsContentHint{
		GetProjects10: &getProjects10,
		Type:          typ,
	}
}

func CreateGetProjectsContentHintGetProjects11(getProjects11 GetProjects11) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects11

	return GetProjectsContentHint{
		GetProjects11: &getProjects11,
		Type:          typ,
	}
}

func CreateGetProjectsContentHintGetProjects12(getProjects12 GetProjects12) GetProjectsContentHint {
	typ := GetProjectsContentHintTypeGetProjects12

	return GetProjectsContentHint{
		GetProjects12: &getProjects12,
		Type:          typ,
	}
}

func (u *GetProjectsContentHint) UnmarshalJSON(data []byte) error {

	getProjectsProjectsResponse2001 := new(GetProjectsProjectsResponse2001)
	if err := utils.UnmarshalJSON(data, &getProjectsProjectsResponse2001, "", true, true); err == nil {
		u.GetProjectsProjectsResponse2001 = getProjectsProjectsResponse2001
		u.Type = GetProjectsContentHintTypeGetProjectsProjectsResponse2001
		return nil
	}

	getProjectsProjectsResponse2002 := new(GetProjectsProjectsResponse2002)
	if err := utils.UnmarshalJSON(data, &getProjectsProjectsResponse2002, "", true, true); err == nil {
		u.GetProjectsProjectsResponse2002 = getProjectsProjectsResponse2002
		u.Type = GetProjectsContentHintTypeGetProjectsProjectsResponse2002
		return nil
	}

	getProjectsProjects3 := new(GetProjectsProjects3)
	if err := utils.UnmarshalJSON(data, &getProjectsProjects3, "", true, true); err == nil {
		u.GetProjectsProjects3 = getProjectsProjects3
		u.Type = GetProjectsContentHintTypeGetProjectsProjects3
		return nil
	}

	getProjects4 := new(GetProjects4)
	if err := utils.UnmarshalJSON(data, &getProjects4, "", true, true); err == nil {
		u.GetProjects4 = getProjects4
		u.Type = GetProjectsContentHintTypeGetProjects4
		return nil
	}

	getProjects5 := new(GetProjects5)
	if err := utils.UnmarshalJSON(data, &getProjects5, "", true, true); err == nil {
		u.GetProjects5 = getProjects5
		u.Type = GetProjectsContentHintTypeGetProjects5
		return nil
	}

	getProjects6 := new(GetProjects6)
	if err := utils.UnmarshalJSON(data, &getProjects6, "", true, true); err == nil {
		u.GetProjects6 = getProjects6
		u.Type = GetProjectsContentHintTypeGetProjects6
		return nil
	}

	getProjects7 := new(GetProjects7)
	if err := utils.UnmarshalJSON(data, &getProjects7, "", true, true); err == nil {
		u.GetProjects7 = getProjects7
		u.Type = GetProjectsContentHintTypeGetProjects7
		return nil
	}

	getProjects8 := new(GetProjects8)
	if err := utils.UnmarshalJSON(data, &getProjects8, "", true, true); err == nil {
		u.GetProjects8 = getProjects8
		u.Type = GetProjectsContentHintTypeGetProjects8
		return nil
	}

	getProjects9 := new(GetProjects9)
	if err := utils.UnmarshalJSON(data, &getProjects9, "", true, true); err == nil {
		u.GetProjects9 = getProjects9
		u.Type = GetProjectsContentHintTypeGetProjects9
		return nil
	}

	getProjects10 := new(GetProjects10)
	if err := utils.UnmarshalJSON(data, &getProjects10, "", true, true); err == nil {
		u.GetProjects10 = getProjects10
		u.Type = GetProjectsContentHintTypeGetProjects10
		return nil
	}

	getProjects11 := new(GetProjects11)
	if err := utils.UnmarshalJSON(data, &getProjects11, "", true, true); err == nil {
		u.GetProjects11 = getProjects11
		u.Type = GetProjectsContentHintTypeGetProjects11
		return nil
	}

	getProjects12 := new(GetProjects12)
	if err := utils.UnmarshalJSON(data, &getProjects12, "", true, true); err == nil {
		u.GetProjects12 = getProjects12
		u.Type = GetProjectsContentHintTypeGetProjects12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjectsProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.GetProjectsProjectsResponse2001, "", true)
	}

	if u.GetProjectsProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.GetProjectsProjectsResponse2002, "", true)
	}

	if u.GetProjectsProjects3 != nil {
		return utils.MarshalJSON(u.GetProjectsProjects3, "", true)
	}

	if u.GetProjects4 != nil {
		return utils.MarshalJSON(u.GetProjects4, "", true)
	}

	if u.GetProjects5 != nil {
		return utils.MarshalJSON(u.GetProjects5, "", true)
	}

	if u.GetProjects6 != nil {
		return utils.MarshalJSON(u.GetProjects6, "", true)
	}

	if u.GetProjects7 != nil {
		return utils.MarshalJSON(u.GetProjects7, "", true)
	}

	if u.GetProjects8 != nil {
		return utils.MarshalJSON(u.GetProjects8, "", true)
	}

	if u.GetProjects9 != nil {
		return utils.MarshalJSON(u.GetProjects9, "", true)
	}

	if u.GetProjects10 != nil {
		return utils.MarshalJSON(u.GetProjects10, "", true)
	}

	if u.GetProjects11 != nil {
		return utils.MarshalJSON(u.GetProjects11, "", true)
	}

	if u.GetProjects12 != nil {
		return utils.MarshalJSON(u.GetProjects12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsProjectsResponse200ApplicationJSON2 string

const (
	GetProjectsProjectsResponse200ApplicationJSON2Production  GetProjectsProjectsResponse200ApplicationJSON2 = "production"
	GetProjectsProjectsResponse200ApplicationJSON2Preview     GetProjectsProjectsResponse200ApplicationJSON2 = "preview"
	GetProjectsProjectsResponse200ApplicationJSON2Development GetProjectsProjectsResponse200ApplicationJSON2 = "development"
)

func (e GetProjectsProjectsResponse200ApplicationJSON2) ToPointer() *GetProjectsProjectsResponse200ApplicationJSON2 {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectsProjectsResponse200ApplicationJSON2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSON2: %v", v)
	}
}

type GetProjectsProjectsResponse200ApplicationJSON1 string

const (
	GetProjectsProjectsResponse200ApplicationJSON1Production  GetProjectsProjectsResponse200ApplicationJSON1 = "production"
	GetProjectsProjectsResponse200ApplicationJSON1Preview     GetProjectsProjectsResponse200ApplicationJSON1 = "preview"
	GetProjectsProjectsResponse200ApplicationJSON1Development GetProjectsProjectsResponse200ApplicationJSON1 = "development"
)

func (e GetProjectsProjectsResponse200ApplicationJSON1) ToPointer() *GetProjectsProjectsResponse200ApplicationJSON1 {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectsProjectsResponse200ApplicationJSON1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSON1: %v", v)
	}
}

type GetProjectsTargetType string

const (
	GetProjectsTargetTypeArrayOfgetProjectsProjectsResponse200ApplicationJSON1 GetProjectsTargetType = "arrayOfgetProjects_projects_response_200_ApplicationJSON_1"
	GetProjectsTargetTypeGetProjectsProjectsResponse200ApplicationJSON2        GetProjectsTargetType = "getProjects_projects_response_200_ApplicationJSON_2"
)

type GetProjectsTarget struct {
	ArrayOfgetProjectsProjectsResponse200ApplicationJSON1 []GetProjectsProjectsResponse200ApplicationJSON1
	GetProjectsProjectsResponse200ApplicationJSON2        *GetProjectsProjectsResponse200ApplicationJSON2

	Type GetProjectsTargetType
}

func CreateGetProjectsTargetArrayOfgetProjectsProjectsResponse200ApplicationJSON1(arrayOfgetProjectsProjectsResponse200ApplicationJSON1 []GetProjectsProjectsResponse200ApplicationJSON1) GetProjectsTarget {
	typ := GetProjectsTargetTypeArrayOfgetProjectsProjectsResponse200ApplicationJSON1

	return GetProjectsTarget{
		ArrayOfgetProjectsProjectsResponse200ApplicationJSON1: arrayOfgetProjectsProjectsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateGetProjectsTargetGetProjectsProjectsResponse200ApplicationJSON2(getProjectsProjectsResponse200ApplicationJSON2 GetProjectsProjectsResponse200ApplicationJSON2) GetProjectsTarget {
	typ := GetProjectsTargetTypeGetProjectsProjectsResponse200ApplicationJSON2

	return GetProjectsTarget{
		GetProjectsProjectsResponse200ApplicationJSON2: &getProjectsProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *GetProjectsTarget) UnmarshalJSON(data []byte) error {

	arrayOfgetProjectsProjectsResponse200ApplicationJSON1 := []GetProjectsProjectsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetProjectsProjectsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.ArrayOfgetProjectsProjectsResponse200ApplicationJSON1 = arrayOfgetProjectsProjectsResponse200ApplicationJSON1
		u.Type = GetProjectsTargetTypeArrayOfgetProjectsProjectsResponse200ApplicationJSON1
		return nil
	}

	getProjectsProjectsResponse200ApplicationJSON2 := new(GetProjectsProjectsResponse200ApplicationJSON2)
	if err := utils.UnmarshalJSON(data, &getProjectsProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.GetProjectsProjectsResponse200ApplicationJSON2 = getProjectsProjectsResponse200ApplicationJSON2
		u.Type = GetProjectsTargetTypeGetProjectsProjectsResponse200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfgetProjectsProjectsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.ArrayOfgetProjectsProjectsResponse200ApplicationJSON1, "", true)
	}

	if u.GetProjectsProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.GetProjectsProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsType string

const (
	GetProjectsTypeSecret    GetProjectsType = "secret"
	GetProjectsTypeSystem    GetProjectsType = "system"
	GetProjectsTypeEncrypted GetProjectsType = "encrypted"
	GetProjectsTypePlain     GetProjectsType = "plain"
	GetProjectsTypeSensitive GetProjectsType = "sensitive"
)

func (e GetProjectsType) ToPointer() *GetProjectsType {
	return &e
}

func (e *GetProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsType: %v", v)
	}
}

type GetProjectsEnv struct {
	ConfigurationID *string                 `json:"configurationId,omitempty"`
	ContentHint     *GetProjectsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                  `json:"createdAt,omitempty"`
	CreatedBy       *string                 `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool              `json:"decrypted,omitempty"`
	EdgeConfigID      *string            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string            `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string            `json:"gitBranch,omitempty"`
	ID                *string            `json:"id,omitempty"`
	Key               string             `json:"key"`
	Target            *GetProjectsTarget `json:"target,omitempty"`
	Type              GetProjectsType    `json:"type"`
	UpdatedAt         *int64             `json:"updatedAt,omitempty"`
	UpdatedBy         *string            `json:"updatedBy,omitempty"`
	Value             string             `json:"value"`
}

func (o *GetProjectsEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectsEnv) GetContentHint() *GetProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectsEnv) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectsEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectsEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectsEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectsEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectsEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectsEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectsEnv) GetTarget() *GetProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsEnv) GetType() GetProjectsType {
	if o == nil {
		return GetProjectsType("")
	}
	return o.Type
}

func (o *GetProjectsEnv) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectsEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectsFramework string

const (
	GetProjectsFrameworkBlitzjs        GetProjectsFramework = "blitzjs"
	GetProjectsFrameworkNextjs         GetProjectsFramework = "nextjs"
	GetProjectsFrameworkGatsby         GetProjectsFramework = "gatsby"
	GetProjectsFrameworkRemix          GetProjectsFramework = "remix"
	GetProjectsFrameworkAstro          GetProjectsFramework = "astro"
	GetProjectsFrameworkHexo           GetProjectsFramework = "hexo"
	GetProjectsFrameworkEleventy       GetProjectsFramework = "eleventy"
	GetProjectsFrameworkDocusaurus2    GetProjectsFramework = "docusaurus-2"
	GetProjectsFrameworkDocusaurus     GetProjectsFramework = "docusaurus"
	GetProjectsFrameworkPreact         GetProjectsFramework = "preact"
	GetProjectsFrameworkSolidstart     GetProjectsFramework = "solidstart"
	GetProjectsFrameworkDojo           GetProjectsFramework = "dojo"
	GetProjectsFrameworkEmber          GetProjectsFramework = "ember"
	GetProjectsFrameworkVue            GetProjectsFramework = "vue"
	GetProjectsFrameworkScully         GetProjectsFramework = "scully"
	GetProjectsFrameworkIonicAngular   GetProjectsFramework = "ionic-angular"
	GetProjectsFrameworkAngular        GetProjectsFramework = "angular"
	GetProjectsFrameworkPolymer        GetProjectsFramework = "polymer"
	GetProjectsFrameworkSvelte         GetProjectsFramework = "svelte"
	GetProjectsFrameworkSveltekit      GetProjectsFramework = "sveltekit"
	GetProjectsFrameworkSveltekit1     GetProjectsFramework = "sveltekit-1"
	GetProjectsFrameworkIonicReact     GetProjectsFramework = "ionic-react"
	GetProjectsFrameworkCreateReactApp GetProjectsFramework = "create-react-app"
	GetProjectsFrameworkGridsome       GetProjectsFramework = "gridsome"
	GetProjectsFrameworkUmijs          GetProjectsFramework = "umijs"
	GetProjectsFrameworkSapper         GetProjectsFramework = "sapper"
	GetProjectsFrameworkSaber          GetProjectsFramework = "saber"
	GetProjectsFrameworkStencil        GetProjectsFramework = "stencil"
	GetProjectsFrameworkNuxtjs         GetProjectsFramework = "nuxtjs"
	GetProjectsFrameworkRedwoodjs      GetProjectsFramework = "redwoodjs"
	GetProjectsFrameworkHugo           GetProjectsFramework = "hugo"
	GetProjectsFrameworkJekyll         GetProjectsFramework = "jekyll"
	GetProjectsFrameworkBrunch         GetProjectsFramework = "brunch"
	GetProjectsFrameworkMiddleman      GetProjectsFramework = "middleman"
	GetProjectsFrameworkZola           GetProjectsFramework = "zola"
	GetProjectsFrameworkHydrogen       GetProjectsFramework = "hydrogen"
	GetProjectsFrameworkVite           GetProjectsFramework = "vite"
	GetProjectsFrameworkVitepress      GetProjectsFramework = "vitepress"
	GetProjectsFrameworkVuepress       GetProjectsFramework = "vuepress"
	GetProjectsFrameworkParcel         GetProjectsFramework = "parcel"
	GetProjectsFrameworkSanity         GetProjectsFramework = "sanity"
	GetProjectsFrameworkStorybook      GetProjectsFramework = "storybook"
)

func (e GetProjectsFramework) ToPointer() *GetProjectsFramework {
	return &e
}

func (e *GetProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsFramework: %v", v)
	}
}

type GetProjectsGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *GetProjectsGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *GetProjectsGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type GetProjectsJobStatus string

const (
	GetProjectsJobStatusSucceeded  GetProjectsJobStatus = "succeeded"
	GetProjectsJobStatusFailed     GetProjectsJobStatus = "failed"
	GetProjectsJobStatusSkipped    GetProjectsJobStatus = "skipped"
	GetProjectsJobStatusPending    GetProjectsJobStatus = "pending"
	GetProjectsJobStatusInProgress GetProjectsJobStatus = "in-progress"
)

func (e GetProjectsJobStatus) ToPointer() *GetProjectsJobStatus {
	return &e
}

func (e *GetProjectsJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = GetProjectsJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsJobStatus: %v", v)
	}
}

type GetProjectsProjectsType string

const (
	GetProjectsProjectsTypePromote  GetProjectsProjectsType = "promote"
	GetProjectsProjectsTypeRollback GetProjectsProjectsType = "rollback"
)

func (e GetProjectsProjectsType) ToPointer() *GetProjectsProjectsType {
	return &e
}

func (e *GetProjectsProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = GetProjectsProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsType: %v", v)
	}
}

type GetProjectsLastAliasRequest struct {
	FromDeploymentID string                  `json:"fromDeploymentId"`
	JobStatus        GetProjectsJobStatus    `json:"jobStatus"`
	RequestedAt      int64                   `json:"requestedAt"`
	ToDeploymentID   string                  `json:"toDeploymentId"`
	Type             GetProjectsProjectsType `json:"type"`
}

func (o *GetProjectsLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *GetProjectsLastAliasRequest) GetJobStatus() GetProjectsJobStatus {
	if o == nil {
		return GetProjectsJobStatus("")
	}
	return o.JobStatus
}

func (o *GetProjectsLastAliasRequest) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *GetProjectsLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *GetProjectsLastAliasRequest) GetType() GetProjectsProjectsType {
	if o == nil {
		return GetProjectsProjectsType("")
	}
	return o.Type
}

type GetProjectsLastRollbackTarget struct {
}

type GetProjectsAliasAssignedType string

const (
	GetProjectsAliasAssignedTypeInteger GetProjectsAliasAssignedType = "integer"
	GetProjectsAliasAssignedTypeBoolean GetProjectsAliasAssignedType = "boolean"
)

type GetProjectsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type GetProjectsAliasAssignedType
}

func CreateGetProjectsAliasAssignedInteger(integer int64) GetProjectsAliasAssigned {
	typ := GetProjectsAliasAssignedTypeInteger

	return GetProjectsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetProjectsAliasAssignedBoolean(boolean bool) GetProjectsAliasAssigned {
	typ := GetProjectsAliasAssignedTypeBoolean

	return GetProjectsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjectsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetProjectsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = GetProjectsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetProjectsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *GetProjectsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjectsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type GetProjectsChecksConclusion string

const (
	GetProjectsChecksConclusionSucceeded GetProjectsChecksConclusion = "succeeded"
	GetProjectsChecksConclusionFailed    GetProjectsChecksConclusion = "failed"
	GetProjectsChecksConclusionSkipped   GetProjectsChecksConclusion = "skipped"
	GetProjectsChecksConclusionCanceled  GetProjectsChecksConclusion = "canceled"
)

func (e GetProjectsChecksConclusion) ToPointer() *GetProjectsChecksConclusion {
	return &e
}

func (e *GetProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsChecksConclusion: %v", v)
	}
}

type GetProjectsChecksState string

const (
	GetProjectsChecksStateRegistered GetProjectsChecksState = "registered"
	GetProjectsChecksStateRunning    GetProjectsChecksState = "running"
	GetProjectsChecksStateCompleted  GetProjectsChecksState = "completed"
)

func (e GetProjectsChecksState) ToPointer() *GetProjectsChecksState {
	return &e
}

func (e *GetProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsChecksState: %v", v)
	}
}

type GetProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjectsPlan string

const (
	GetProjectsPlanPro        GetProjectsPlan = "pro"
	GetProjectsPlanEnterprise GetProjectsPlan = "enterprise"
	GetProjectsPlanHobby      GetProjectsPlan = "hobby"
	GetProjectsPlanOss        GetProjectsPlan = "oss"
)

func (e GetProjectsPlan) ToPointer() *GetProjectsPlan {
	return &e
}

func (e *GetProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = GetProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsPlan: %v", v)
	}
}

type GetProjectsReadyState string

const (
	GetProjectsReadyStateBuilding     GetProjectsReadyState = "BUILDING"
	GetProjectsReadyStateError        GetProjectsReadyState = "ERROR"
	GetProjectsReadyStateInitializing GetProjectsReadyState = "INITIALIZING"
	GetProjectsReadyStateQueued       GetProjectsReadyState = "QUEUED"
	GetProjectsReadyStateReady        GetProjectsReadyState = "READY"
	GetProjectsReadyStateCanceled     GetProjectsReadyState = "CANCELED"
)

func (e GetProjectsReadyState) ToPointer() *GetProjectsReadyState {
	return &e
}

func (e *GetProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsReadyState: %v", v)
	}
}

type GetProjectsReadySubstate string

const (
	GetProjectsReadySubstateStaged   GetProjectsReadySubstate = "STAGED"
	GetProjectsReadySubstatePromoted GetProjectsReadySubstate = "PROMOTED"
)

func (e GetProjectsReadySubstate) ToPointer() *GetProjectsReadySubstate {
	return &e
}

func (e *GetProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsReadySubstate: %v", v)
	}
}

type GetProjectsProjectsResponseType string

const (
	GetProjectsProjectsResponseTypeLambdas GetProjectsProjectsResponseType = "LAMBDAS"
)

func (e GetProjectsProjectsResponseType) ToPointer() *GetProjectsProjectsResponseType {
	return &e
}

func (e *GetProjectsProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjectsProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponseType: %v", v)
	}
}

type GetProjectsLatestDeployments struct {
	Alias                  []string                     `json:"alias,omitempty"`
	AliasAssigned          *GetProjectsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjectsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                      `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                     `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                       `json:"buildingAt,omitempty"`
	Builds                 []GetProjectsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *GetProjectsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjectsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                        `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                      `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                        `json:"createdAt"`
	CreatedIn              string                       `json:"createdIn"`
	Creator                *GetProjectsCreator          `json:"creator"`
	DeploymentHostname     string                       `json:"deploymentHostname"`
	Forced                 *bool                        `json:"forced,omitempty"`
	ID                     string                       `json:"id"`
	Meta                   map[string]string            `json:"meta,omitempty"`
	MonorepoManager        *string                      `json:"monorepoManager,omitempty"`
	Name                   string                       `json:"name"`
	Plan                   GetProjectsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                           `json:"previewCommentsEnabled,omitempty"`
	Private                bool                            `json:"private"`
	ReadyAt                *int64                          `json:"readyAt,omitempty"`
	ReadyState             GetProjectsReadyState           `json:"readyState"`
	ReadySubstate          *GetProjectsReadySubstate       `json:"readySubstate,omitempty"`
	RequestedAt            *int64                          `json:"requestedAt,omitempty"`
	Target                 *string                         `json:"target,omitempty"`
	TeamID                 *string                         `json:"teamId,omitempty"`
	Type                   GetProjectsProjectsResponseType `json:"type"`
	URL                    string                          `json:"url"`
	UserID                 string                          `json:"userId"`
	WithCache              *bool                           `json:"withCache,omitempty"`
}

func (o *GetProjectsLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjectsLatestDeployments) GetAliasAssigned() *GetProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjectsLatestDeployments) GetAliasError() *GetProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjectsLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjectsLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjectsLatestDeployments) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjectsLatestDeployments) GetBuilds() []GetProjectsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjectsLatestDeployments) GetChecksConclusion() *GetProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjectsLatestDeployments) GetChecksState() *GetProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjectsLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsLatestDeployments) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjectsLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjectsLatestDeployments) GetCreator() *GetProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjectsLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjectsLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjectsLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjectsLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjectsLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsLatestDeployments) GetPlan() GetProjectsPlan {
	if o == nil {
		return GetProjectsPlan("")
	}
	return o.Plan
}

func (o *GetProjectsLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjectsLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjectsLatestDeployments) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjectsLatestDeployments) GetReadyState() GetProjectsReadyState {
	if o == nil {
		return GetProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjectsLatestDeployments) GetReadySubstate() *GetProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjectsLatestDeployments) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjectsLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectsLatestDeployments) GetType() GetProjectsProjectsResponseType {
	if o == nil {
		return GetProjectsProjectsResponseType("")
	}
	return o.Type
}

func (o *GetProjectsLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjectsLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectsLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjectsProjectsResponseDeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjectsProjectsResponseDeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyType string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyTypeBitbucket GetProjectsProjectsResponse200ApplicationJSONResponseBodyType = "bitbucket"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetProjects3 struct {
	CreatedAt        *int64                                                         `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsProjectsResponseDeployHooks                       `json:"deployHooks"`
	GitCredentialID  *string                                                        `json:"gitCredentialId,omitempty"`
	Name             *string                                                        `json:"name,omitempty"`
	Owner            *string                                                        `json:"owner,omitempty"`
	ProductionBranch *string                                                        `json:"productionBranch,omitempty"`
	Slug             *string                                                        `json:"slug,omitempty"`
	Sourceless       *bool                                                          `json:"sourceless,omitempty"`
	Type             *GetProjectsProjectsResponse200ApplicationJSONResponseBodyType `json:"type,omitempty"`
	UpdatedAt        *int64                                                         `json:"updatedAt,omitempty"`
	UUID             *string                                                        `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                        `json:"workspaceUuid,omitempty"`
}

func (o *GetProjects3) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects3) GetDeployHooks() []GetProjectsProjectsResponseDeployHooks {
	if o == nil {
		return []GetProjectsProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjects3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetProjects3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetProjects3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects3) GetType() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects3) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjects3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *GetProjects3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type GetProjectsProjectsDeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjectsProjectsDeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsProjectsResponse200ApplicationJSONType string

const (
	GetProjectsProjectsResponse200ApplicationJSONTypeGitlab GetProjectsProjectsResponse200ApplicationJSONType = "gitlab"
)

func (e GetProjectsProjectsResponse200ApplicationJSONType) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONType {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetProjectsProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type GetProjects2 struct {
	CreatedAt                *int64                                             `json:"createdAt,omitempty"`
	DeployHooks              []GetProjectsProjectsDeployHooks                   `json:"deployHooks"`
	GitCredentialID          *string                                            `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                            `json:"productionBranch,omitempty"`
	ProjectID                *string                                            `json:"projectId,omitempty"`
	ProjectName              *string                                            `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                            `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                            `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                            `json:"projectUrl,omitempty"`
	Sourceless               *bool                                              `json:"sourceless,omitempty"`
	Type                     *GetProjectsProjectsResponse200ApplicationJSONType `json:"type,omitempty"`
	UpdatedAt                *int64                                             `json:"updatedAt,omitempty"`
}

func (o *GetProjects2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects2) GetDeployHooks() []GetProjectsProjectsDeployHooks {
	if o == nil {
		return []GetProjectsProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjects2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *GetProjects2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *GetProjects2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *GetProjects2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *GetProjects2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects2) GetType() *GetProjectsProjectsResponse200ApplicationJSONType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type GetProjectsDeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjectsDeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType string

const (
	GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsTypeGithub GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType = "github"
)

func (e GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType) ToPointer() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType {
	return &e
}

func (e *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType: %v", v)
	}
}

type GetProjects1 struct {
	CreatedAt        *int64                                                                 `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsDeployHooks                                               `json:"deployHooks"`
	GitCredentialID  *string                                                                `json:"gitCredentialId,omitempty"`
	Org              *string                                                                `json:"org,omitempty"`
	ProductionBranch *string                                                                `json:"productionBranch,omitempty"`
	Repo             *string                                                                `json:"repo,omitempty"`
	RepoID           *int64                                                                 `json:"repoId,omitempty"`
	Sourceless       *bool                                                                  `json:"sourceless,omitempty"`
	Type             *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType `json:"type,omitempty"`
	UpdatedAt        *int64                                                                 `json:"updatedAt,omitempty"`
}

func (o *GetProjects1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects1) GetDeployHooks() []GetProjectsDeployHooks {
	if o == nil {
		return []GetProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetProjects1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjects1) GetRepoID() *int64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjects1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects1) GetType() *GetProjectsProjectsResponse200ApplicationJSONResponseBodyProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type GetProjectsLinkType string

const (
	GetProjectsLinkTypeGetProjects1 GetProjectsLinkType = "getProjects_1"
	GetProjectsLinkTypeGetProjects2 GetProjectsLinkType = "getProjects_2"
	GetProjectsLinkTypeGetProjects3 GetProjectsLinkType = "getProjects_3"
)

type GetProjectsLink struct {
	GetProjects1 *GetProjects1
	GetProjects2 *GetProjects2
	GetProjects3 *GetProjects3

	Type GetProjectsLinkType
}

func CreateGetProjectsLinkGetProjects1(getProjects1 GetProjects1) GetProjectsLink {
	typ := GetProjectsLinkTypeGetProjects1

	return GetProjectsLink{
		GetProjects1: &getProjects1,
		Type:         typ,
	}
}

func CreateGetProjectsLinkGetProjects2(getProjects2 GetProjects2) GetProjectsLink {
	typ := GetProjectsLinkTypeGetProjects2

	return GetProjectsLink{
		GetProjects2: &getProjects2,
		Type:         typ,
	}
}

func CreateGetProjectsLinkGetProjects3(getProjects3 GetProjects3) GetProjectsLink {
	typ := GetProjectsLinkTypeGetProjects3

	return GetProjectsLink{
		GetProjects3: &getProjects3,
		Type:         typ,
	}
}

func (u *GetProjectsLink) UnmarshalJSON(data []byte) error {

	getProjects1 := new(GetProjects1)
	if err := utils.UnmarshalJSON(data, &getProjects1, "", true, true); err == nil {
		u.GetProjects1 = getProjects1
		u.Type = GetProjectsLinkTypeGetProjects1
		return nil
	}

	getProjects2 := new(GetProjects2)
	if err := utils.UnmarshalJSON(data, &getProjects2, "", true, true); err == nil {
		u.GetProjects2 = getProjects2
		u.Type = GetProjectsLinkTypeGetProjects2
		return nil
	}

	getProjects3 := new(GetProjects3)
	if err := utils.UnmarshalJSON(data, &getProjects3, "", true, true); err == nil {
		u.GetProjects3 = getProjects3
		u.Type = GetProjectsLinkTypeGetProjects3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsLink) MarshalJSON() ([]byte, error) {
	if u.GetProjects1 != nil {
		return utils.MarshalJSON(u.GetProjects1, "", true)
	}

	if u.GetProjects2 != nil {
		return utils.MarshalJSON(u.GetProjects2, "", true)
	}

	if u.GetProjects3 != nil {
		return utils.MarshalJSON(u.GetProjects3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsNodeVersion string

const (
	GetProjectsNodeVersionEighteenX GetProjectsNodeVersion = "18.x"
	GetProjectsNodeVersionSixteenX  GetProjectsNodeVersion = "16.x"
	GetProjectsNodeVersionFourteenX GetProjectsNodeVersion = "14.x"
	GetProjectsNodeVersionTwelveX   GetProjectsNodeVersion = "12.x"
	GetProjectsNodeVersionTenX      GetProjectsNodeVersion = "10.x"
)

func (e GetProjectsNodeVersion) ToPointer() *GetProjectsNodeVersion {
	return &e
}

func (e *GetProjectsNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = GetProjectsNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsNodeVersion: %v", v)
	}
}

type GetProjectsPasswordProtection struct {
}

type GetProjectsPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *GetProjectsPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *GetProjectsPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *GetProjectsPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *GetProjectsPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *GetProjectsPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *GetProjectsPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectsPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *GetProjectsPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *GetProjectsPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *GetProjectsPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetProjectsPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *GetProjectsPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *GetProjectsPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *GetProjectsPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *GetProjectsPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *GetProjectsPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *GetProjectsPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *GetProjectsPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *GetProjectsPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *GetProjectsPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *GetProjectsPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *GetProjectsPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *GetProjectsPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *GetProjectsPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *GetProjectsPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *GetProjectsPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *GetProjectsPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *GetProjectsPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetProjectsPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *GetProjectsPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *GetProjectsPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *GetProjectsPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *GetProjectsPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *GetProjectsPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *GetProjectsPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *GetProjectsPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *GetProjectsPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetProjectsPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *GetProjectsPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *GetProjectsPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *GetProjectsPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *GetProjectsPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *GetProjectsPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *GetProjectsPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *GetProjectsPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *GetProjectsPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *GetProjectsPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *GetProjectsPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *GetProjectsPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *GetProjectsPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *GetProjectsPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *GetProjectsPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *GetProjectsPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *GetProjectsPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *GetProjectsPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *GetProjectsPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *GetProjectsPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *GetProjectsPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *GetProjectsPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *GetProjectsPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *GetProjectsPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *GetProjectsPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *GetProjectsPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *GetProjectsPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *GetProjectsPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *GetProjectsPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *GetProjectsPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *GetProjectsPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *GetProjectsPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *GetProjectsPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *GetProjectsPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *GetProjectsPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *GetProjectsPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *GetProjectsPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *GetProjectsPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *GetProjectsPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *GetProjectsPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *GetProjectsPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *GetProjectsPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *GetProjectsPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectsPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *GetProjectsPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *GetProjectsPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectsPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *GetProjectsPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *GetProjectsPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *GetProjectsPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetProjectsPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *GetProjectsPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *GetProjectsPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *GetProjectsPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *GetProjectsPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *GetProjectsPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *GetProjectsPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *GetProjectsPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *GetProjectsPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *GetProjectsPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *GetProjectsPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *GetProjectsPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *GetProjectsPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *GetProjectsPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *GetProjectsPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *GetProjectsPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *GetProjectsPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *GetProjectsPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *GetProjectsPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetProjectsPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *GetProjectsPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *GetProjectsPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *GetProjectsPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *GetProjectsPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *GetProjectsPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *GetProjectsPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *GetProjectsPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *GetProjectsPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *GetProjectsPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *GetProjectsPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *GetProjectsPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *GetProjectsPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetProjectsPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *GetProjectsPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *GetProjectsPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *GetProjectsPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *GetProjectsPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *GetProjectsPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *GetProjectsPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *GetProjectsPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *GetProjectsPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectsPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *GetProjectsPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *GetProjectsPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *GetProjectsPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *GetProjectsPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjectsPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *GetProjectsPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *GetProjectsPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type GetProjectsAccess string

const (
	GetProjectsAccessRequested GetProjectsAccess = "requested"
	GetProjectsAccessGranted   GetProjectsAccess = "granted"
)

func (e GetProjectsAccess) ToPointer() *GetProjectsAccess {
	return &e
}

func (e *GetProjectsAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = GetProjectsAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsAccess: %v", v)
	}
}

type GetProjectsProjectsScope string

const (
	GetProjectsProjectsScopeUser GetProjectsProjectsScope = "user"
)

func (e GetProjectsProjectsScope) ToPointer() *GetProjectsProjectsScope {
	return &e
}

func (e *GetProjectsProjectsScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetProjectsProjectsScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsScope: %v", v)
	}
}

type GetProjectsProjects2 struct {
	Access        GetProjectsAccess        `json:"access"`
	CreatedAt     int64                    `json:"createdAt"`
	LastUpdatedAt int64                    `json:"lastUpdatedAt"`
	LastUpdatedBy string                   `json:"lastUpdatedBy"`
	Scope         GetProjectsProjectsScope `json:"scope"`
}

func (o *GetProjectsProjects2) GetAccess() GetProjectsAccess {
	if o == nil {
		return GetProjectsAccess("")
	}
	return o.Access
}

func (o *GetProjectsProjects2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjectsProjects2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *GetProjectsProjects2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *GetProjectsProjects2) GetScope() GetProjectsProjectsScope {
	if o == nil {
		return GetProjectsProjectsScope("")
	}
	return o.Scope
}

type GetProjectsScope string

const (
	GetProjectsScopeShareableLink    GetProjectsScope = "shareable-link"
	GetProjectsScopeAutomationBypass GetProjectsScope = "automation-bypass"
)

func (e GetProjectsScope) ToPointer() *GetProjectsScope {
	return &e
}

func (e *GetProjectsScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = GetProjectsScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsScope: %v", v)
	}
}

type GetProjectsProjects1 struct {
	CreatedAt int64            `json:"createdAt"`
	CreatedBy string           `json:"createdBy"`
	Scope     GetProjectsScope `json:"scope"`
}

func (o *GetProjectsProjects1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjectsProjects1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetProjectsProjects1) GetScope() GetProjectsScope {
	if o == nil {
		return GetProjectsScope("")
	}
	return o.Scope
}

type GetProjectsProtectionBypassType string

const (
	GetProjectsProtectionBypassTypeGetProjectsProjects1 GetProjectsProtectionBypassType = "getProjects_projects_1"
	GetProjectsProtectionBypassTypeGetProjectsProjects2 GetProjectsProtectionBypassType = "getProjects_projects_2"
)

type GetProjectsProtectionBypass struct {
	GetProjectsProjects1 *GetProjectsProjects1
	GetProjectsProjects2 *GetProjectsProjects2

	Type GetProjectsProtectionBypassType
}

func CreateGetProjectsProtectionBypassGetProjectsProjects1(getProjectsProjects1 GetProjectsProjects1) GetProjectsProtectionBypass {
	typ := GetProjectsProtectionBypassTypeGetProjectsProjects1

	return GetProjectsProtectionBypass{
		GetProjectsProjects1: &getProjectsProjects1,
		Type:                 typ,
	}
}

func CreateGetProjectsProtectionBypassGetProjectsProjects2(getProjectsProjects2 GetProjectsProjects2) GetProjectsProtectionBypass {
	typ := GetProjectsProtectionBypassTypeGetProjectsProjects2

	return GetProjectsProtectionBypass{
		GetProjectsProjects2: &getProjectsProjects2,
		Type:                 typ,
	}
}

func (u *GetProjectsProtectionBypass) UnmarshalJSON(data []byte) error {

	getProjectsProjects1 := new(GetProjectsProjects1)
	if err := utils.UnmarshalJSON(data, &getProjectsProjects1, "", true, true); err == nil {
		u.GetProjectsProjects1 = getProjectsProjects1
		u.Type = GetProjectsProtectionBypassTypeGetProjectsProjects1
		return nil
	}

	getProjectsProjects2 := new(GetProjectsProjects2)
	if err := utils.UnmarshalJSON(data, &getProjectsProjects2, "", true, true); err == nil {
		u.GetProjectsProjects2 = getProjectsProjects2
		u.Type = GetProjectsProtectionBypassTypeGetProjectsProjects2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.GetProjectsProjects1 != nil {
		return utils.MarshalJSON(u.GetProjectsProjects1, "", true)
	}

	if u.GetProjectsProjects2 != nil {
		return utils.MarshalJSON(u.GetProjectsProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsDeploymentType string

const (
	GetProjectsDeploymentTypeAll                              GetProjectsDeploymentType = "all"
	GetProjectsDeploymentTypePreview                          GetProjectsDeploymentType = "preview"
	GetProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e GetProjectsDeploymentType) ToPointer() *GetProjectsDeploymentType {
	return &e
}

func (e *GetProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsDeploymentType: %v", v)
	}
}

type GetProjectsSsoProtection struct {
	DeploymentType GetProjectsDeploymentType `json:"deploymentType"`
}

func (o *GetProjectsSsoProtection) GetDeploymentType() GetProjectsDeploymentType {
	if o == nil {
		return GetProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type GetProjectsProjectsAliasAssignedType string

const (
	GetProjectsProjectsAliasAssignedTypeInteger GetProjectsProjectsAliasAssignedType = "integer"
	GetProjectsProjectsAliasAssignedTypeBoolean GetProjectsProjectsAliasAssignedType = "boolean"
)

type GetProjectsProjectsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type GetProjectsProjectsAliasAssignedType
}

func CreateGetProjectsProjectsAliasAssignedInteger(integer int64) GetProjectsProjectsAliasAssigned {
	typ := GetProjectsProjectsAliasAssignedTypeInteger

	return GetProjectsProjectsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetProjectsProjectsAliasAssignedBoolean(boolean bool) GetProjectsProjectsAliasAssigned {
	typ := GetProjectsProjectsAliasAssignedTypeBoolean

	return GetProjectsProjectsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjectsProjectsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetProjectsProjectsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = GetProjectsProjectsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsProjectsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjectsProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjectsProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetProjectsProjectsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *GetProjectsProjectsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjectsProjectsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectsProjectsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type GetProjectsProjectsChecksConclusion string

const (
	GetProjectsProjectsChecksConclusionSucceeded GetProjectsProjectsChecksConclusion = "succeeded"
	GetProjectsProjectsChecksConclusionFailed    GetProjectsProjectsChecksConclusion = "failed"
	GetProjectsProjectsChecksConclusionSkipped   GetProjectsProjectsChecksConclusion = "skipped"
	GetProjectsProjectsChecksConclusionCanceled  GetProjectsProjectsChecksConclusion = "canceled"
)

func (e GetProjectsProjectsChecksConclusion) ToPointer() *GetProjectsProjectsChecksConclusion {
	return &e
}

func (e *GetProjectsProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjectsProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsChecksConclusion: %v", v)
	}
}

type GetProjectsProjectsChecksState string

const (
	GetProjectsProjectsChecksStateRegistered GetProjectsProjectsChecksState = "registered"
	GetProjectsProjectsChecksStateRunning    GetProjectsProjectsChecksState = "running"
	GetProjectsProjectsChecksStateCompleted  GetProjectsProjectsChecksState = "completed"
)

func (e GetProjectsProjectsChecksState) ToPointer() *GetProjectsProjectsChecksState {
	return &e
}

func (e *GetProjectsProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjectsProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsChecksState: %v", v)
	}
}

type GetProjectsProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjectsProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjectsProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjectsProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjectsProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjectsProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjectsProjectsPlan string

const (
	GetProjectsProjectsPlanPro        GetProjectsProjectsPlan = "pro"
	GetProjectsProjectsPlanEnterprise GetProjectsProjectsPlan = "enterprise"
	GetProjectsProjectsPlanHobby      GetProjectsProjectsPlan = "hobby"
	GetProjectsProjectsPlanOss        GetProjectsProjectsPlan = "oss"
)

func (e GetProjectsProjectsPlan) ToPointer() *GetProjectsProjectsPlan {
	return &e
}

func (e *GetProjectsProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = GetProjectsProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsPlan: %v", v)
	}
}

type GetProjectsProjectsReadyState string

const (
	GetProjectsProjectsReadyStateBuilding     GetProjectsProjectsReadyState = "BUILDING"
	GetProjectsProjectsReadyStateError        GetProjectsProjectsReadyState = "ERROR"
	GetProjectsProjectsReadyStateInitializing GetProjectsProjectsReadyState = "INITIALIZING"
	GetProjectsProjectsReadyStateQueued       GetProjectsProjectsReadyState = "QUEUED"
	GetProjectsProjectsReadyStateReady        GetProjectsProjectsReadyState = "READY"
	GetProjectsProjectsReadyStateCanceled     GetProjectsProjectsReadyState = "CANCELED"
)

func (e GetProjectsProjectsReadyState) ToPointer() *GetProjectsProjectsReadyState {
	return &e
}

func (e *GetProjectsProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjectsProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsReadyState: %v", v)
	}
}

type GetProjectsProjectsReadySubstate string

const (
	GetProjectsProjectsReadySubstateStaged   GetProjectsProjectsReadySubstate = "STAGED"
	GetProjectsProjectsReadySubstatePromoted GetProjectsProjectsReadySubstate = "PROMOTED"
)

func (e GetProjectsProjectsReadySubstate) ToPointer() *GetProjectsProjectsReadySubstate {
	return &e
}

func (e *GetProjectsProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetProjectsProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsReadySubstate: %v", v)
	}
}

type GetProjectsProjectsResponse200Type string

const (
	GetProjectsProjectsResponse200TypeLambdas GetProjectsProjectsResponse200Type = "LAMBDAS"
)

func (e GetProjectsProjectsResponse200Type) ToPointer() *GetProjectsProjectsResponse200Type {
	return &e
}

func (e *GetProjectsProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjectsProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponse200Type: %v", v)
	}
}

type GetProjectsTargets struct {
	Alias                  []string                             `json:"alias,omitempty"`
	AliasAssigned          *GetProjectsProjectsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjectsProjectsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                              `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                             `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                               `json:"buildingAt,omitempty"`
	Builds                 []GetProjectsProjectsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *GetProjectsProjectsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjectsProjectsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                              `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                `json:"createdAt"`
	CreatedIn              string                               `json:"createdIn"`
	Creator                *GetProjectsProjectsCreator          `json:"creator"`
	DeploymentHostname     string                               `json:"deploymentHostname"`
	Forced                 *bool                                `json:"forced,omitempty"`
	ID                     string                               `json:"id"`
	Meta                   map[string]string                    `json:"meta,omitempty"`
	MonorepoManager        *string                              `json:"monorepoManager,omitempty"`
	Name                   string                               `json:"name"`
	Plan                   GetProjectsProjectsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                              `json:"previewCommentsEnabled,omitempty"`
	Private                bool                               `json:"private"`
	ReadyAt                *int64                             `json:"readyAt,omitempty"`
	ReadyState             GetProjectsProjectsReadyState      `json:"readyState"`
	ReadySubstate          *GetProjectsProjectsReadySubstate  `json:"readySubstate,omitempty"`
	RequestedAt            *int64                             `json:"requestedAt,omitempty"`
	Target                 *string                            `json:"target,omitempty"`
	TeamID                 *string                            `json:"teamId,omitempty"`
	Type                   GetProjectsProjectsResponse200Type `json:"type"`
	URL                    string                             `json:"url"`
	UserID                 string                             `json:"userId"`
	WithCache              *bool                              `json:"withCache,omitempty"`
}

func (o *GetProjectsTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjectsTargets) GetAliasAssigned() *GetProjectsProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjectsTargets) GetAliasError() *GetProjectsProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjectsTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjectsTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjectsTargets) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjectsTargets) GetBuilds() []GetProjectsProjectsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjectsTargets) GetChecksConclusion() *GetProjectsProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjectsTargets) GetChecksState() *GetProjectsProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjectsTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsTargets) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjectsTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjectsTargets) GetCreator() *GetProjectsProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjectsTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjectsTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjectsTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjectsTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjectsTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsTargets) GetPlan() GetProjectsProjectsPlan {
	if o == nil {
		return GetProjectsProjectsPlan("")
	}
	return o.Plan
}

func (o *GetProjectsTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjectsTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjectsTargets) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjectsTargets) GetReadyState() GetProjectsProjectsReadyState {
	if o == nil {
		return GetProjectsProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjectsTargets) GetReadySubstate() *GetProjectsProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjectsTargets) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjectsTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectsTargets) GetType() GetProjectsProjectsResponse200Type {
	if o == nil {
		return GetProjectsProjectsResponse200Type("")
	}
	return o.Type
}

func (o *GetProjectsTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjectsTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectsTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjectsProjectsDeploymentType string

const (
	GetProjectsProjectsDeploymentTypeAll                              GetProjectsProjectsDeploymentType = "all"
	GetProjectsProjectsDeploymentTypePreview                          GetProjectsProjectsDeploymentType = "preview"
	GetProjectsProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectsProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
	GetProjectsProjectsDeploymentTypeProduction                       GetProjectsProjectsDeploymentType = "production"
)

func (e GetProjectsProjectsDeploymentType) ToPointer() *GetProjectsProjectsDeploymentType {
	return &e
}

func (e *GetProjectsProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = GetProjectsProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsDeploymentType: %v", v)
	}
}

type GetProjectsProjectsResponse2 struct {
	DeploymentType GetProjectsProjectsDeploymentType `json:"deploymentType"`
}

func (o *GetProjectsProjectsResponse2) GetDeploymentType() GetProjectsProjectsDeploymentType {
	if o == nil {
		return GetProjectsProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type GetProjectsAddresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *GetProjectsAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *GetProjectsAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectsProjectsResponseDeploymentType string

const (
	GetProjectsProjectsResponseDeploymentTypeAll                              GetProjectsProjectsResponseDeploymentType = "all"
	GetProjectsProjectsResponseDeploymentTypePreview                          GetProjectsProjectsResponseDeploymentType = "preview"
	GetProjectsProjectsResponseDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectsProjectsResponseDeploymentType = "prod_deployment_urls_and_all_previews"
	GetProjectsProjectsResponseDeploymentTypeProduction                       GetProjectsProjectsResponseDeploymentType = "production"
)

func (e GetProjectsProjectsResponseDeploymentType) ToPointer() *GetProjectsProjectsResponseDeploymentType {
	return &e
}

func (e *GetProjectsProjectsResponseDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = GetProjectsProjectsResponseDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProjectsResponseDeploymentType: %v", v)
	}
}

type GetProjectsProtectionMode string

const (
	GetProjectsProtectionModeAdditional GetProjectsProtectionMode = "additional"
	GetProjectsProtectionModeExclusive  GetProjectsProtectionMode = "exclusive"
)

func (e GetProjectsProtectionMode) ToPointer() *GetProjectsProtectionMode {
	return &e
}

func (e *GetProjectsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = GetProjectsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProtectionMode: %v", v)
	}
}

type GetProjectsProjectsResponse1 struct {
	Addresses      []GetProjectsAddresses                    `json:"addresses"`
	DeploymentType GetProjectsProjectsResponseDeploymentType `json:"deploymentType"`
	ProtectionMode GetProjectsProtectionMode                 `json:"protectionMode"`
}

func (o *GetProjectsProjectsResponse1) GetAddresses() []GetProjectsAddresses {
	if o == nil {
		return []GetProjectsAddresses{}
	}
	return o.Addresses
}

func (o *GetProjectsProjectsResponse1) GetDeploymentType() GetProjectsProjectsResponseDeploymentType {
	if o == nil {
		return GetProjectsProjectsResponseDeploymentType("")
	}
	return o.DeploymentType
}

func (o *GetProjectsProjectsResponse1) GetProtectionMode() GetProjectsProtectionMode {
	if o == nil {
		return GetProjectsProtectionMode("")
	}
	return o.ProtectionMode
}

type GetProjectsTrustedIpsType string

const (
	GetProjectsTrustedIpsTypeGetProjectsProjectsResponse1 GetProjectsTrustedIpsType = "getProjects_projects_response_1"
	GetProjectsTrustedIpsTypeGetProjectsProjectsResponse2 GetProjectsTrustedIpsType = "getProjects_projects_response_2"
)

type GetProjectsTrustedIps struct {
	GetProjectsProjectsResponse1 *GetProjectsProjectsResponse1
	GetProjectsProjectsResponse2 *GetProjectsProjectsResponse2

	Type GetProjectsTrustedIpsType
}

func CreateGetProjectsTrustedIpsGetProjectsProjectsResponse1(getProjectsProjectsResponse1 GetProjectsProjectsResponse1) GetProjectsTrustedIps {
	typ := GetProjectsTrustedIpsTypeGetProjectsProjectsResponse1

	return GetProjectsTrustedIps{
		GetProjectsProjectsResponse1: &getProjectsProjectsResponse1,
		Type:                         typ,
	}
}

func CreateGetProjectsTrustedIpsGetProjectsProjectsResponse2(getProjectsProjectsResponse2 GetProjectsProjectsResponse2) GetProjectsTrustedIps {
	typ := GetProjectsTrustedIpsTypeGetProjectsProjectsResponse2

	return GetProjectsTrustedIps{
		GetProjectsProjectsResponse2: &getProjectsProjectsResponse2,
		Type:                         typ,
	}
}

func (u *GetProjectsTrustedIps) UnmarshalJSON(data []byte) error {

	getProjectsProjectsResponse2 := new(GetProjectsProjectsResponse2)
	if err := utils.UnmarshalJSON(data, &getProjectsProjectsResponse2, "", true, true); err == nil {
		u.GetProjectsProjectsResponse2 = getProjectsProjectsResponse2
		u.Type = GetProjectsTrustedIpsTypeGetProjectsProjectsResponse2
		return nil
	}

	getProjectsProjectsResponse1 := new(GetProjectsProjectsResponse1)
	if err := utils.UnmarshalJSON(data, &getProjectsProjectsResponse1, "", true, true); err == nil {
		u.GetProjectsProjectsResponse1 = getProjectsProjectsResponse1
		u.Type = GetProjectsTrustedIpsTypeGetProjectsProjectsResponse1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjectsTrustedIps) MarshalJSON() ([]byte, error) {
	if u.GetProjectsProjectsResponse1 != nil {
		return utils.MarshalJSON(u.GetProjectsProjectsResponse1, "", true)
	}

	if u.GetProjectsProjectsResponse2 != nil {
		return utils.MarshalJSON(u.GetProjectsProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjectsProjects struct {
	AccountID                        string                                 `json:"accountId"`
	Analytics                        *GetProjectsAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                  `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                  `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                  `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                 `json:"createdAt,omitempty"`
	Crons                            *GetProjectsCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                  `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *GetProjectsDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                   `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                  `json:"enablePreviewFeedback,omitempty"`
	Env                              []GetProjectsEnv                       `json:"env,omitempty"`
	Framework                        *GetProjectsFramework                  `json:"framework,omitempty"`
	GitComments                      *GetProjectsGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                  `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                  `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                  `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                  `json:"hasFloatingAliases,omitempty"`
	ID                               string                                 `json:"id"`
	InstallCommand                   *string                                `json:"installCommand,omitempty"`
	LastAliasRequest                 *GetProjectsLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *GetProjectsLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []GetProjectsLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *GetProjectsLink                       `json:"link,omitempty"`
	Live                             *bool                                  `json:"live,omitempty"`
	Name                             string                                 `json:"name"`
	NodeVersion                      GetProjectsNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                `json:"outputDirectory,omitempty"`
	PasswordProtection               *GetProjectsPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *GetProjectsPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                  `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]GetProjectsProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                  `json:"publicSource,omitempty"`
	RootDirectory                    *string                                `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                  `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                  `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *GetProjectsSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]GetProjectsTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *GetProjectsTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                 `json:"updatedAt,omitempty"`
}

func (o *GetProjectsProjects) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetProjectsProjects) GetAnalytics() *GetProjectsAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectsProjects) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetProjectsProjects) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *GetProjectsProjects) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *GetProjectsProjects) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *GetProjectsProjects) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *GetProjectsProjects) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsProjects) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsProjects) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsProjects) GetCrons() *GetProjectsCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetProjectsProjects) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *GetProjectsProjects) GetDataCache() *GetProjectsDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *GetProjectsProjects) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *GetProjectsProjects) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *GetProjectsProjects) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *GetProjectsProjects) GetEnv() []GetProjectsEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetProjectsProjects) GetFramework() *GetProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetProjectsProjects) GetGitComments() *GetProjectsGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *GetProjectsProjects) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectsProjects) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *GetProjectsProjects) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *GetProjectsProjects) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *GetProjectsProjects) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsProjects) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *GetProjectsProjects) GetLastAliasRequest() *GetProjectsLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *GetProjectsProjects) GetLastRollbackTarget() *GetProjectsLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *GetProjectsProjects) GetLatestDeployments() []GetProjectsLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *GetProjectsProjects) GetLink() *GetProjectsLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetProjectsProjects) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *GetProjectsProjects) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsProjects) GetNodeVersion() GetProjectsNodeVersion {
	if o == nil {
		return GetProjectsNodeVersion("")
	}
	return o.NodeVersion
}

func (o *GetProjectsProjects) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *GetProjectsProjects) GetPasswordProtection() *GetProjectsPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectsProjects) GetPermissions() *GetProjectsPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectsProjects) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *GetProjectsProjects) GetProtectionBypass() map[string]GetProjectsProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *GetProjectsProjects) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *GetProjectsProjects) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *GetProjectsProjects) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *GetProjectsProjects) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *GetProjectsProjects) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *GetProjectsProjects) GetSsoProtection() *GetProjectsSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *GetProjectsProjects) GetTargets() map[string]GetProjectsTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *GetProjectsProjects) GetTransferCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *GetProjectsProjects) GetTransferStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *GetProjectsProjects) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *GetProjectsProjects) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *GetProjectsProjects) GetTrustedIps() *GetProjectsTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectsProjects) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// GetProjectsResponseBody - The paginated list of projects
type GetProjectsResponseBody struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination     `json:"pagination"`
	Projects   []GetProjectsProjects `json:"projects"`
}

func (o *GetProjectsResponseBody) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

func (o *GetProjectsResponseBody) GetProjects() []GetProjectsProjects {
	if o == nil {
		return []GetProjectsProjects{}
	}
	return o.Projects
}

type GetProjectsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The paginated list of projects
	Object *GetProjectsResponseBody
}

func (o *GetProjectsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectsResponse) GetObject() *GetProjectsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
