// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"vercel/internal/sdk/pkg/models/shared"
	"vercel/internal/sdk/pkg/utils"
)

// GetProjectsGitForkProtection - Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
type GetProjectsGitForkProtection string

const (
	GetProjectsGitForkProtectionOne  GetProjectsGitForkProtection = "1"
	GetProjectsGitForkProtectionZero GetProjectsGitForkProtection = "0"
)

func (e GetProjectsGitForkProtection) ToPointer() *GetProjectsGitForkProtection {
	return &e
}

func (e *GetProjectsGitForkProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = GetProjectsGitForkProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsGitForkProtection: %v", v)
	}
}

type GetProjectsRequest struct {
	// Filter results by connected Edge Config ID
	EdgeConfigID *string `queryParam:"style=form,explode=true,name=edgeConfigId"`
	// Filter results by connected Edge Config Token ID
	EdgeConfigTokenID *string `queryParam:"style=form,explode=true,name=edgeConfigTokenId"`
	// Filter results by excluding those projects that belong to a repo
	ExcludeRepos *string `queryParam:"style=form,explode=true,name=excludeRepos"`
	// Query only projects updated after the given timestamp
	From *string `queryParam:"style=form,explode=true,name=from"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *GetProjectsGitForkProtection `queryParam:"style=form,explode=true,name=gitForkProtection"`
	// Limit the number of projects returned
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Filter results by repo. Also used for project count
	Repo *string `queryParam:"style=form,explode=true,name=repo"`
	// Filter results by Repository ID.
	RepoID *string `queryParam:"style=form,explode=true,name=repoId"`
	// Filter results by Repository URL.
	RepoURL *string `queryParam:"style=form,explode=true,name=repoUrl"`
	// Search projects by the name field
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetProjectsRequest) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectsRequest) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectsRequest) GetExcludeRepos() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeRepos
}

func (o *GetProjectsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetProjectsRequest) GetGitForkProtection() *GetProjectsGitForkProtection {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectsRequest) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectsRequest) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectsRequest) GetRepoURL() *string {
	if o == nil {
		return nil
	}
	return o.RepoURL
}

func (o *GetProjectsRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetProjectsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type GetProjects200ApplicationJSONProjectsAnalytics struct {
	CanceledAt          *int64 `json:"canceledAt"`
	DisabledAt          int64  `json:"disabledAt"`
	EnabledAt           int64  `json:"enabledAt"`
	ID                  string `json:"id"`
	PaidAt              *int64 `json:"paidAt,omitempty"`
	SampleRatePercent   *int64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *int64 `json:"spendLimitInDollars,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetDisabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.DisabledAt
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetPaidAt() *int64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetSampleRatePercent() *int64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *GetProjects200ApplicationJSONProjectsAnalytics) GetSpendLimitInDollars() *int64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type GetProjects200ApplicationJSONProjectsCronsDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *GetProjects200ApplicationJSONProjectsCronsDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetProjects200ApplicationJSONProjectsCronsDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetProjects200ApplicationJSONProjectsCronsDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type GetProjects200ApplicationJSONProjectsCrons struct {
	Definitions []GetProjects200ApplicationJSONProjectsCronsDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *int64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt int64 `json:"enabledAt"`
	UpdatedAt int64 `json:"updatedAt"`
}

func (o *GetProjects200ApplicationJSONProjectsCrons) GetDefinitions() []GetProjects200ApplicationJSONProjectsCronsDefinitions {
	if o == nil {
		return []GetProjects200ApplicationJSONProjectsCronsDefinitions{}
	}
	return o.Definitions
}

func (o *GetProjects200ApplicationJSONProjectsCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetProjects200ApplicationJSONProjectsCrons) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjects200ApplicationJSONProjectsCrons) GetEnabledAt() int64 {
	if o == nil {
		return 0
	}
	return o.EnabledAt
}

func (o *GetProjects200ApplicationJSONProjectsCrons) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type GetProjects200ApplicationJSONProjectsDataCache struct {
	StorageSizeBytes *int64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool  `json:"unlimited,omitempty"`
	UserDisabled     bool   `json:"userDisabled"`
}

func (o *GetProjects200ApplicationJSONProjectsDataCache) GetStorageSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *GetProjects200ApplicationJSONProjectsDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *GetProjects200ApplicationJSONProjectsDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type GetProjects200ApplicationJSONProjectsEnvContentHint12Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint12TypePostgresDatabase GetProjects200ApplicationJSONProjectsEnvContentHint12Type = "postgres-database"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint12Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint12Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint12Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint12 struct {
	StoreID string                                                    `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint12Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint12) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint12Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint12Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint11Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint11TypePostgresPassword GetProjects200ApplicationJSONProjectsEnvContentHint11Type = "postgres-password"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint11Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint11Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint11Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint11 struct {
	StoreID string                                                    `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint11Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint11) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint11Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint11Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint10Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint10TypePostgresHost GetProjects200ApplicationJSONProjectsEnvContentHint10Type = "postgres-host"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint10Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint10Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint10Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint10 struct {
	StoreID string                                                    `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint10Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint10) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint10Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint10Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint9Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint9TypePostgresUser GetProjects200ApplicationJSONProjectsEnvContentHint9Type = "postgres-user"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint9Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint9Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint9Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint9 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint9Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint9) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint9Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint9Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint8Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint8TypePostgresPrismaURL GetProjects200ApplicationJSONProjectsEnvContentHint8Type = "postgres-prisma-url"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint8Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint8Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint8Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint8 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint8Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint8) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint8Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint8Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint7Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint7TypePostgresURLNonPooling GetProjects200ApplicationJSONProjectsEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint7Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint7Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint7Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint7 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint7Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint7) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint7Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint7Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint6Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint6TypePostgresURL GetProjects200ApplicationJSONProjectsEnvContentHint6Type = "postgres-url"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint6Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint6Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint6Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint6 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint6Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint6) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint6Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint6Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint5Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint5TypeBlobReadWriteToken GetProjects200ApplicationJSONProjectsEnvContentHint5Type = "blob-read-write-token"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint5Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint5Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint5Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint5 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint5Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint5) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint5Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint5Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint4Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint4TypeRedisRestAPIReadOnlyToken GetProjects200ApplicationJSONProjectsEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint4Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint4Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint4Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint4 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint4Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint4) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint4Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint4Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint3Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint3TypeRedisRestAPIToken GetProjects200ApplicationJSONProjectsEnvContentHint3Type = "redis-rest-api-token"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint3Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint3Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint3Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint3 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint3Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint3) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint3Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint3Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint2Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint2TypeRedisRestAPIURL GetProjects200ApplicationJSONProjectsEnvContentHint2Type = "redis-rest-api-url"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint2Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint2Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint2Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint2 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint2Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint2) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint2Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint2Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHint1Type string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHint1TypeRedisURL GetProjects200ApplicationJSONProjectsEnvContentHint1Type = "redis-url"
)

func (e GetProjects200ApplicationJSONProjectsEnvContentHint1Type) ToPointer() *GetProjects200ApplicationJSONProjectsEnvContentHint1Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjects200ApplicationJSONProjectsEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvContentHint1Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvContentHint1 struct {
	StoreID string                                                   `json:"storeId"`
	Type    GetProjects200ApplicationJSONProjectsEnvContentHint1Type `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjects200ApplicationJSONProjectsEnvContentHint1) GetType() GetProjects200ApplicationJSONProjectsEnvContentHint1Type {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvContentHint1Type("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsEnvContentHintType string

const (
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint1  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_1"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint2  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_2"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint3  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_3"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint4  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_4"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint5  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_5"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint6  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_6"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint7  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_7"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint8  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_8"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint9  GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_9"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint10 GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_10"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint11 GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_11"
	GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint12 GetProjects200ApplicationJSONProjectsEnvContentHintType = "getProjects_200ApplicationJSON_projects_env_contentHint_12"
)

type GetProjects200ApplicationJSONProjectsEnvContentHint struct {
	GetProjects200ApplicationJSONProjectsEnvContentHint1  *GetProjects200ApplicationJSONProjectsEnvContentHint1
	GetProjects200ApplicationJSONProjectsEnvContentHint2  *GetProjects200ApplicationJSONProjectsEnvContentHint2
	GetProjects200ApplicationJSONProjectsEnvContentHint3  *GetProjects200ApplicationJSONProjectsEnvContentHint3
	GetProjects200ApplicationJSONProjectsEnvContentHint4  *GetProjects200ApplicationJSONProjectsEnvContentHint4
	GetProjects200ApplicationJSONProjectsEnvContentHint5  *GetProjects200ApplicationJSONProjectsEnvContentHint5
	GetProjects200ApplicationJSONProjectsEnvContentHint6  *GetProjects200ApplicationJSONProjectsEnvContentHint6
	GetProjects200ApplicationJSONProjectsEnvContentHint7  *GetProjects200ApplicationJSONProjectsEnvContentHint7
	GetProjects200ApplicationJSONProjectsEnvContentHint8  *GetProjects200ApplicationJSONProjectsEnvContentHint8
	GetProjects200ApplicationJSONProjectsEnvContentHint9  *GetProjects200ApplicationJSONProjectsEnvContentHint9
	GetProjects200ApplicationJSONProjectsEnvContentHint10 *GetProjects200ApplicationJSONProjectsEnvContentHint10
	GetProjects200ApplicationJSONProjectsEnvContentHint11 *GetProjects200ApplicationJSONProjectsEnvContentHint11
	GetProjects200ApplicationJSONProjectsEnvContentHint12 *GetProjects200ApplicationJSONProjectsEnvContentHint12

	Type GetProjects200ApplicationJSONProjectsEnvContentHintType
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint1(getProjects200ApplicationJSONProjectsEnvContentHint1 GetProjects200ApplicationJSONProjectsEnvContentHint1) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint1

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint1: &getProjects200ApplicationJSONProjectsEnvContentHint1,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint2(getProjects200ApplicationJSONProjectsEnvContentHint2 GetProjects200ApplicationJSONProjectsEnvContentHint2) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint2

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint2: &getProjects200ApplicationJSONProjectsEnvContentHint2,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint3(getProjects200ApplicationJSONProjectsEnvContentHint3 GetProjects200ApplicationJSONProjectsEnvContentHint3) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint3

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint3: &getProjects200ApplicationJSONProjectsEnvContentHint3,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint4(getProjects200ApplicationJSONProjectsEnvContentHint4 GetProjects200ApplicationJSONProjectsEnvContentHint4) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint4

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint4: &getProjects200ApplicationJSONProjectsEnvContentHint4,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint5(getProjects200ApplicationJSONProjectsEnvContentHint5 GetProjects200ApplicationJSONProjectsEnvContentHint5) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint5

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint5: &getProjects200ApplicationJSONProjectsEnvContentHint5,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint6(getProjects200ApplicationJSONProjectsEnvContentHint6 GetProjects200ApplicationJSONProjectsEnvContentHint6) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint6

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint6: &getProjects200ApplicationJSONProjectsEnvContentHint6,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint7(getProjects200ApplicationJSONProjectsEnvContentHint7 GetProjects200ApplicationJSONProjectsEnvContentHint7) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint7

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint7: &getProjects200ApplicationJSONProjectsEnvContentHint7,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint8(getProjects200ApplicationJSONProjectsEnvContentHint8 GetProjects200ApplicationJSONProjectsEnvContentHint8) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint8

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint8: &getProjects200ApplicationJSONProjectsEnvContentHint8,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint9(getProjects200ApplicationJSONProjectsEnvContentHint9 GetProjects200ApplicationJSONProjectsEnvContentHint9) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint9

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint9: &getProjects200ApplicationJSONProjectsEnvContentHint9,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint10(getProjects200ApplicationJSONProjectsEnvContentHint10 GetProjects200ApplicationJSONProjectsEnvContentHint10) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint10

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint10: &getProjects200ApplicationJSONProjectsEnvContentHint10,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint11(getProjects200ApplicationJSONProjectsEnvContentHint11 GetProjects200ApplicationJSONProjectsEnvContentHint11) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint11

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint11: &getProjects200ApplicationJSONProjectsEnvContentHint11,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvContentHintGetProjects200ApplicationJSONProjectsEnvContentHint12(getProjects200ApplicationJSONProjectsEnvContentHint12 GetProjects200ApplicationJSONProjectsEnvContentHint12) GetProjects200ApplicationJSONProjectsEnvContentHint {
	typ := GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint12

	return GetProjects200ApplicationJSONProjectsEnvContentHint{
		GetProjects200ApplicationJSONProjectsEnvContentHint12: &getProjects200ApplicationJSONProjectsEnvContentHint12,
		Type: typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsEnvContentHint) UnmarshalJSON(data []byte) error {

	getProjects200ApplicationJSONProjectsEnvContentHint1 := new(GetProjects200ApplicationJSONProjectsEnvContentHint1)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint1, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint1 = getProjects200ApplicationJSONProjectsEnvContentHint1
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint1
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint2 := new(GetProjects200ApplicationJSONProjectsEnvContentHint2)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint2, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint2 = getProjects200ApplicationJSONProjectsEnvContentHint2
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint2
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint3 := new(GetProjects200ApplicationJSONProjectsEnvContentHint3)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint3, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint3 = getProjects200ApplicationJSONProjectsEnvContentHint3
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint3
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint4 := new(GetProjects200ApplicationJSONProjectsEnvContentHint4)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint4, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint4 = getProjects200ApplicationJSONProjectsEnvContentHint4
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint4
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint5 := new(GetProjects200ApplicationJSONProjectsEnvContentHint5)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint5, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint5 = getProjects200ApplicationJSONProjectsEnvContentHint5
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint5
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint6 := new(GetProjects200ApplicationJSONProjectsEnvContentHint6)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint6, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint6 = getProjects200ApplicationJSONProjectsEnvContentHint6
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint6
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint7 := new(GetProjects200ApplicationJSONProjectsEnvContentHint7)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint7, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint7 = getProjects200ApplicationJSONProjectsEnvContentHint7
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint7
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint8 := new(GetProjects200ApplicationJSONProjectsEnvContentHint8)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint8, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint8 = getProjects200ApplicationJSONProjectsEnvContentHint8
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint8
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint9 := new(GetProjects200ApplicationJSONProjectsEnvContentHint9)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint9, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint9 = getProjects200ApplicationJSONProjectsEnvContentHint9
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint9
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint10 := new(GetProjects200ApplicationJSONProjectsEnvContentHint10)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint10, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint10 = getProjects200ApplicationJSONProjectsEnvContentHint10
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint10
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint11 := new(GetProjects200ApplicationJSONProjectsEnvContentHint11)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint11, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint11 = getProjects200ApplicationJSONProjectsEnvContentHint11
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint11
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvContentHint12 := new(GetProjects200ApplicationJSONProjectsEnvContentHint12)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvContentHint12, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvContentHint12 = getProjects200ApplicationJSONProjectsEnvContentHint12
		u.Type = GetProjects200ApplicationJSONProjectsEnvContentHintTypeGetProjects200ApplicationJSONProjectsEnvContentHint12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjects200ApplicationJSONProjectsEnvContentHint1 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint1, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint2 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint2, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint3 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint3, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint4 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint4, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint5 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint5, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint6 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint6, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint7 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint7, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint8 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint8, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint9 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint9, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint10 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint10, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint11 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint11, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvContentHint12 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvContentHint12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsEnvTarget2 string

const (
	GetProjects200ApplicationJSONProjectsEnvTarget2Production  GetProjects200ApplicationJSONProjectsEnvTarget2 = "production"
	GetProjects200ApplicationJSONProjectsEnvTarget2Preview     GetProjects200ApplicationJSONProjectsEnvTarget2 = "preview"
	GetProjects200ApplicationJSONProjectsEnvTarget2Development GetProjects200ApplicationJSONProjectsEnvTarget2 = "development"
)

func (e GetProjects200ApplicationJSONProjectsEnvTarget2) ToPointer() *GetProjects200ApplicationJSONProjectsEnvTarget2 {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjects200ApplicationJSONProjectsEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvTarget2: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvTarget1 string

const (
	GetProjects200ApplicationJSONProjectsEnvTarget1Production  GetProjects200ApplicationJSONProjectsEnvTarget1 = "production"
	GetProjects200ApplicationJSONProjectsEnvTarget1Preview     GetProjects200ApplicationJSONProjectsEnvTarget1 = "preview"
	GetProjects200ApplicationJSONProjectsEnvTarget1Development GetProjects200ApplicationJSONProjectsEnvTarget1 = "development"
)

func (e GetProjects200ApplicationJSONProjectsEnvTarget1) ToPointer() *GetProjects200ApplicationJSONProjectsEnvTarget1 {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjects200ApplicationJSONProjectsEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvTarget1: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnvTargetType string

const (
	GetProjects200ApplicationJSONProjectsEnvTargetTypeArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 GetProjects200ApplicationJSONProjectsEnvTargetType = "arrayOfgetProjects_200ApplicationJSON_projects_env_target_1"
	GetProjects200ApplicationJSONProjectsEnvTargetTypeGetProjects200ApplicationJSONProjectsEnvTarget2        GetProjects200ApplicationJSONProjectsEnvTargetType = "getProjects_200ApplicationJSON_projects_env_target_2"
)

type GetProjects200ApplicationJSONProjectsEnvTarget struct {
	ArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 []GetProjects200ApplicationJSONProjectsEnvTarget1
	GetProjects200ApplicationJSONProjectsEnvTarget2        *GetProjects200ApplicationJSONProjectsEnvTarget2

	Type GetProjects200ApplicationJSONProjectsEnvTargetType
}

func CreateGetProjects200ApplicationJSONProjectsEnvTargetArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1(arrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 []GetProjects200ApplicationJSONProjectsEnvTarget1) GetProjects200ApplicationJSONProjectsEnvTarget {
	typ := GetProjects200ApplicationJSONProjectsEnvTargetTypeArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1

	return GetProjects200ApplicationJSONProjectsEnvTarget{
		ArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1: arrayOfgetProjects200ApplicationJSONProjectsEnvTarget1,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsEnvTargetGetProjects200ApplicationJSONProjectsEnvTarget2(getProjects200ApplicationJSONProjectsEnvTarget2 GetProjects200ApplicationJSONProjectsEnvTarget2) GetProjects200ApplicationJSONProjectsEnvTarget {
	typ := GetProjects200ApplicationJSONProjectsEnvTargetTypeGetProjects200ApplicationJSONProjectsEnvTarget2

	return GetProjects200ApplicationJSONProjectsEnvTarget{
		GetProjects200ApplicationJSONProjectsEnvTarget2: &getProjects200ApplicationJSONProjectsEnvTarget2,
		Type: typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsEnvTarget) UnmarshalJSON(data []byte) error {

	arrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 := []GetProjects200ApplicationJSONProjectsEnvTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetProjects200ApplicationJSONProjectsEnvTarget1, "", true, true); err == nil {
		u.ArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 = arrayOfgetProjects200ApplicationJSONProjectsEnvTarget1
		u.Type = GetProjects200ApplicationJSONProjectsEnvTargetTypeArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1
		return nil
	}

	getProjects200ApplicationJSONProjectsEnvTarget2 := new(GetProjects200ApplicationJSONProjectsEnvTarget2)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsEnvTarget2, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsEnvTarget2 = getProjects200ApplicationJSONProjectsEnvTarget2
		u.Type = GetProjects200ApplicationJSONProjectsEnvTargetTypeGetProjects200ApplicationJSONProjectsEnvTarget2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfgetProjects200ApplicationJSONProjectsEnvTarget1, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsEnvTarget2 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsEnvType string

const (
	GetProjects200ApplicationJSONProjectsEnvTypeSecret    GetProjects200ApplicationJSONProjectsEnvType = "secret"
	GetProjects200ApplicationJSONProjectsEnvTypeSystem    GetProjects200ApplicationJSONProjectsEnvType = "system"
	GetProjects200ApplicationJSONProjectsEnvTypeEncrypted GetProjects200ApplicationJSONProjectsEnvType = "encrypted"
	GetProjects200ApplicationJSONProjectsEnvTypePlain     GetProjects200ApplicationJSONProjectsEnvType = "plain"
	GetProjects200ApplicationJSONProjectsEnvTypeSensitive GetProjects200ApplicationJSONProjectsEnvType = "sensitive"
)

func (e GetProjects200ApplicationJSONProjectsEnvType) ToPointer() *GetProjects200ApplicationJSONProjectsEnvType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjects200ApplicationJSONProjectsEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsEnvType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsEnv struct {
	ConfigurationID *string                                              `json:"configurationId,omitempty"`
	ContentHint     *GetProjects200ApplicationJSONProjectsEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                               `json:"createdAt,omitempty"`
	CreatedBy       *string                                              `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                           `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                         `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                         `json:"gitBranch,omitempty"`
	ID                *string                                         `json:"id,omitempty"`
	Key               string                                          `json:"key"`
	Target            *GetProjects200ApplicationJSONProjectsEnvTarget `json:"target,omitempty"`
	Type              GetProjects200ApplicationJSONProjectsEnvType    `json:"type"`
	UpdatedAt         *int64                                          `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                         `json:"updatedBy,omitempty"`
	Value             string                                          `json:"value"`
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetContentHint() *GetProjects200ApplicationJSONProjectsEnvContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetTarget() *GetProjects200ApplicationJSONProjectsEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetType() GetProjects200ApplicationJSONProjectsEnvType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsEnvType("")
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjects200ApplicationJSONProjectsEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjects200ApplicationJSONProjectsFramework string

const (
	GetProjects200ApplicationJSONProjectsFrameworkBlitzjs        GetProjects200ApplicationJSONProjectsFramework = "blitzjs"
	GetProjects200ApplicationJSONProjectsFrameworkNextjs         GetProjects200ApplicationJSONProjectsFramework = "nextjs"
	GetProjects200ApplicationJSONProjectsFrameworkGatsby         GetProjects200ApplicationJSONProjectsFramework = "gatsby"
	GetProjects200ApplicationJSONProjectsFrameworkRemix          GetProjects200ApplicationJSONProjectsFramework = "remix"
	GetProjects200ApplicationJSONProjectsFrameworkAstro          GetProjects200ApplicationJSONProjectsFramework = "astro"
	GetProjects200ApplicationJSONProjectsFrameworkHexo           GetProjects200ApplicationJSONProjectsFramework = "hexo"
	GetProjects200ApplicationJSONProjectsFrameworkEleventy       GetProjects200ApplicationJSONProjectsFramework = "eleventy"
	GetProjects200ApplicationJSONProjectsFrameworkDocusaurus2    GetProjects200ApplicationJSONProjectsFramework = "docusaurus-2"
	GetProjects200ApplicationJSONProjectsFrameworkDocusaurus     GetProjects200ApplicationJSONProjectsFramework = "docusaurus"
	GetProjects200ApplicationJSONProjectsFrameworkPreact         GetProjects200ApplicationJSONProjectsFramework = "preact"
	GetProjects200ApplicationJSONProjectsFrameworkSolidstart     GetProjects200ApplicationJSONProjectsFramework = "solidstart"
	GetProjects200ApplicationJSONProjectsFrameworkDojo           GetProjects200ApplicationJSONProjectsFramework = "dojo"
	GetProjects200ApplicationJSONProjectsFrameworkEmber          GetProjects200ApplicationJSONProjectsFramework = "ember"
	GetProjects200ApplicationJSONProjectsFrameworkVue            GetProjects200ApplicationJSONProjectsFramework = "vue"
	GetProjects200ApplicationJSONProjectsFrameworkScully         GetProjects200ApplicationJSONProjectsFramework = "scully"
	GetProjects200ApplicationJSONProjectsFrameworkIonicAngular   GetProjects200ApplicationJSONProjectsFramework = "ionic-angular"
	GetProjects200ApplicationJSONProjectsFrameworkAngular        GetProjects200ApplicationJSONProjectsFramework = "angular"
	GetProjects200ApplicationJSONProjectsFrameworkPolymer        GetProjects200ApplicationJSONProjectsFramework = "polymer"
	GetProjects200ApplicationJSONProjectsFrameworkSvelte         GetProjects200ApplicationJSONProjectsFramework = "svelte"
	GetProjects200ApplicationJSONProjectsFrameworkSveltekit      GetProjects200ApplicationJSONProjectsFramework = "sveltekit"
	GetProjects200ApplicationJSONProjectsFrameworkSveltekit1     GetProjects200ApplicationJSONProjectsFramework = "sveltekit-1"
	GetProjects200ApplicationJSONProjectsFrameworkIonicReact     GetProjects200ApplicationJSONProjectsFramework = "ionic-react"
	GetProjects200ApplicationJSONProjectsFrameworkCreateReactApp GetProjects200ApplicationJSONProjectsFramework = "create-react-app"
	GetProjects200ApplicationJSONProjectsFrameworkGridsome       GetProjects200ApplicationJSONProjectsFramework = "gridsome"
	GetProjects200ApplicationJSONProjectsFrameworkUmijs          GetProjects200ApplicationJSONProjectsFramework = "umijs"
	GetProjects200ApplicationJSONProjectsFrameworkSapper         GetProjects200ApplicationJSONProjectsFramework = "sapper"
	GetProjects200ApplicationJSONProjectsFrameworkSaber          GetProjects200ApplicationJSONProjectsFramework = "saber"
	GetProjects200ApplicationJSONProjectsFrameworkStencil        GetProjects200ApplicationJSONProjectsFramework = "stencil"
	GetProjects200ApplicationJSONProjectsFrameworkNuxtjs         GetProjects200ApplicationJSONProjectsFramework = "nuxtjs"
	GetProjects200ApplicationJSONProjectsFrameworkRedwoodjs      GetProjects200ApplicationJSONProjectsFramework = "redwoodjs"
	GetProjects200ApplicationJSONProjectsFrameworkHugo           GetProjects200ApplicationJSONProjectsFramework = "hugo"
	GetProjects200ApplicationJSONProjectsFrameworkJekyll         GetProjects200ApplicationJSONProjectsFramework = "jekyll"
	GetProjects200ApplicationJSONProjectsFrameworkBrunch         GetProjects200ApplicationJSONProjectsFramework = "brunch"
	GetProjects200ApplicationJSONProjectsFrameworkMiddleman      GetProjects200ApplicationJSONProjectsFramework = "middleman"
	GetProjects200ApplicationJSONProjectsFrameworkZola           GetProjects200ApplicationJSONProjectsFramework = "zola"
	GetProjects200ApplicationJSONProjectsFrameworkHydrogen       GetProjects200ApplicationJSONProjectsFramework = "hydrogen"
	GetProjects200ApplicationJSONProjectsFrameworkVite           GetProjects200ApplicationJSONProjectsFramework = "vite"
	GetProjects200ApplicationJSONProjectsFrameworkVitepress      GetProjects200ApplicationJSONProjectsFramework = "vitepress"
	GetProjects200ApplicationJSONProjectsFrameworkVuepress       GetProjects200ApplicationJSONProjectsFramework = "vuepress"
	GetProjects200ApplicationJSONProjectsFrameworkParcel         GetProjects200ApplicationJSONProjectsFramework = "parcel"
	GetProjects200ApplicationJSONProjectsFrameworkSanity         GetProjects200ApplicationJSONProjectsFramework = "sanity"
	GetProjects200ApplicationJSONProjectsFrameworkStorybook      GetProjects200ApplicationJSONProjectsFramework = "storybook"
)

func (e GetProjects200ApplicationJSONProjectsFramework) ToPointer() *GetProjects200ApplicationJSONProjectsFramework {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetProjects200ApplicationJSONProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsFramework: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *GetProjects200ApplicationJSONProjectsGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *GetProjects200ApplicationJSONProjectsGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus string

const (
	GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatusSucceeded  GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus = "succeeded"
	GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatusFailed     GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus = "failed"
	GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatusSkipped    GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus = "skipped"
	GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatusPending    GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus = "pending"
	GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatusInProgress GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus = "in-progress"
)

func (e GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus) ToPointer() *GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLastAliasRequestType string

const (
	GetProjects200ApplicationJSONProjectsLastAliasRequestTypePromote  GetProjects200ApplicationJSONProjectsLastAliasRequestType = "promote"
	GetProjects200ApplicationJSONProjectsLastAliasRequestTypeRollback GetProjects200ApplicationJSONProjectsLastAliasRequestType = "rollback"
)

func (e GetProjects200ApplicationJSONProjectsLastAliasRequestType) ToPointer() *GetProjects200ApplicationJSONProjectsLastAliasRequestType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = GetProjects200ApplicationJSONProjectsLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLastAliasRequestType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLastAliasRequest struct {
	FromDeploymentID string                                                         `json:"fromDeploymentId"`
	JobStatus        GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus `json:"jobStatus"`
	RequestedAt      int64                                                          `json:"requestedAt"`
	ToDeploymentID   string                                                         `json:"toDeploymentId"`
	Type             GetProjects200ApplicationJSONProjectsLastAliasRequestType      `json:"type"`
}

func (o *GetProjects200ApplicationJSONProjectsLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *GetProjects200ApplicationJSONProjectsLastAliasRequest) GetJobStatus() GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsLastAliasRequestJobStatus("")
	}
	return o.JobStatus
}

func (o *GetProjects200ApplicationJSONProjectsLastAliasRequest) GetRequestedAt() int64 {
	if o == nil {
		return 0
	}
	return o.RequestedAt
}

func (o *GetProjects200ApplicationJSONProjectsLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *GetProjects200ApplicationJSONProjectsLastAliasRequest) GetType() GetProjects200ApplicationJSONProjectsLastAliasRequestType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsLastAliasRequestType("")
	}
	return o.Type
}

type GetProjects200ApplicationJSONProjectsLastRollbackTarget struct {
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedType string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeInteger GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedType = "integer"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeBoolean GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedType = "boolean"
)

type GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedType
}

func CreateGetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedInteger(integer int64) GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned {
	typ := GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeInteger

	return GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedBoolean(boolean bool) GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned {
	typ := GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeBoolean

	return GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusionSucceeded GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion = "succeeded"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusionFailed    GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion = "failed"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusionSkipped   GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion = "skipped"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusionCanceled  GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion = "canceled"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksStateRegistered GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState = "registered"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksStateRunning    GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState = "running"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksStateCompleted  GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState = "completed"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsPlanPro        GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan = "pro"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsPlanEnterprise GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan = "enterprise"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsPlanHobby      GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan = "hobby"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsPlanOss        GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan = "oss"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateBuilding     GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "BUILDING"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateError        GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "ERROR"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateInitializing GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "INITIALIZING"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateQueued       GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "QUEUED"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateReady        GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "READY"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyStateCanceled     GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState = "CANCELED"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstateStaged   GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate = "STAGED"
	GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstatePromoted GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate = "PROMOTED"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeploymentsType string

const (
	GetProjects200ApplicationJSONProjectsLatestDeploymentsTypeLambdas GetProjects200ApplicationJSONProjectsLatestDeploymentsType = "LAMBDAS"
)

func (e GetProjects200ApplicationJSONProjectsLatestDeploymentsType) ToPointer() *GetProjects200ApplicationJSONProjectsLatestDeploymentsType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjects200ApplicationJSONProjectsLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLatestDeploymentsType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLatestDeployments struct {
	Alias                  []string                                                                `json:"alias,omitempty"`
	AliasAssigned          *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                                 `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                                `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                                  `json:"buildingAt,omitempty"`
	Builds                 []GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                                   `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                                 `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                                   `json:"createdAt"`
	CreatedIn              string                                                                  `json:"createdIn"`
	Creator                *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator          `json:"creator"`
	DeploymentHostname     string                                                                  `json:"deploymentHostname"`
	Forced                 *bool                                                                   `json:"forced,omitempty"`
	ID                     string                                                                  `json:"id"`
	Meta                   map[string]string                                                       `json:"meta,omitempty"`
	MonorepoManager        *string                                                                 `json:"monorepoManager,omitempty"`
	Name                   string                                                                  `json:"name"`
	Plan                   GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                                 `json:"private"`
	ReadyAt                *int64                                                               `json:"readyAt,omitempty"`
	ReadyState             GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState     `json:"readyState"`
	ReadySubstate          *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                               `json:"requestedAt,omitempty"`
	Target                 *string                                                              `json:"target,omitempty"`
	TeamID                 *string                                                              `json:"teamId,omitempty"`
	Type                   GetProjects200ApplicationJSONProjectsLatestDeploymentsType           `json:"type"`
	URL                    string                                                               `json:"url"`
	UserID                 string                                                               `json:"userId"`
	WithCache              *bool                                                                `json:"withCache,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetAliasAssigned() *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetAliasError() *GetProjects200ApplicationJSONProjectsLatestDeploymentsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetBuilds() []GetProjects200ApplicationJSONProjectsLatestDeploymentsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetChecksConclusion() *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetChecksState() *GetProjects200ApplicationJSONProjectsLatestDeploymentsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetCreator() *GetProjects200ApplicationJSONProjectsLatestDeploymentsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetPlan() GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsLatestDeploymentsPlan("")
	}
	return o.Plan
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetReadyState() GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsLatestDeploymentsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetReadySubstate() *GetProjects200ApplicationJSONProjectsLatestDeploymentsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetType() GetProjects200ApplicationJSONProjectsLatestDeploymentsType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsLatestDeploymentsType("")
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjects200ApplicationJSONProjectsLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjects200ApplicationJSONProjectsLink3DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjects200ApplicationJSONProjectsLink3DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink3DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsLink3DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsLink3DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjects200ApplicationJSONProjectsLink3DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjects200ApplicationJSONProjectsLink3Type string

const (
	GetProjects200ApplicationJSONProjectsLink3TypeBitbucket GetProjects200ApplicationJSONProjectsLink3Type = "bitbucket"
)

func (e GetProjects200ApplicationJSONProjectsLink3Type) ToPointer() *GetProjects200ApplicationJSONProjectsLink3Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetProjects200ApplicationJSONProjectsLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLink3Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLink3 struct {
	CreatedAt        *int64                                                  `json:"createdAt,omitempty"`
	DeployHooks      []GetProjects200ApplicationJSONProjectsLink3DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                 `json:"gitCredentialId,omitempty"`
	Name             *string                                                 `json:"name,omitempty"`
	Owner            *string                                                 `json:"owner,omitempty"`
	ProductionBranch *string                                                 `json:"productionBranch,omitempty"`
	Slug             *string                                                 `json:"slug,omitempty"`
	Sourceless       *bool                                                   `json:"sourceless,omitempty"`
	Type             *GetProjects200ApplicationJSONProjectsLink3Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                  `json:"updatedAt,omitempty"`
	UUID             *string                                                 `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                 `json:"workspaceUuid,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetDeployHooks() []GetProjects200ApplicationJSONProjectsLink3DeployHooks {
	if o == nil {
		return []GetProjects200ApplicationJSONProjectsLink3DeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetType() *GetProjects200ApplicationJSONProjectsLink3Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *GetProjects200ApplicationJSONProjectsLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type GetProjects200ApplicationJSONProjectsLink2DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjects200ApplicationJSONProjectsLink2DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink2DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsLink2DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsLink2DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjects200ApplicationJSONProjectsLink2DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjects200ApplicationJSONProjectsLink2Type string

const (
	GetProjects200ApplicationJSONProjectsLink2TypeGitlab GetProjects200ApplicationJSONProjectsLink2Type = "gitlab"
)

func (e GetProjects200ApplicationJSONProjectsLink2Type) ToPointer() *GetProjects200ApplicationJSONProjectsLink2Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetProjects200ApplicationJSONProjectsLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLink2Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLink2 struct {
	CreatedAt                *int64                                                  `json:"createdAt,omitempty"`
	DeployHooks              []GetProjects200ApplicationJSONProjectsLink2DeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                                 `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                 `json:"productionBranch,omitempty"`
	ProjectID                *string                                                 `json:"projectId,omitempty"`
	ProjectName              *string                                                 `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                 `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                 `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                 `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                   `json:"sourceless,omitempty"`
	Type                     *GetProjects200ApplicationJSONProjectsLink2Type         `json:"type,omitempty"`
	UpdatedAt                *int64                                                  `json:"updatedAt,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetDeployHooks() []GetProjects200ApplicationJSONProjectsLink2DeployHooks {
	if o == nil {
		return []GetProjects200ApplicationJSONProjectsLink2DeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetType() *GetProjects200ApplicationJSONProjectsLink2Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsLink2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type GetProjects200ApplicationJSONProjectsLink1DeployHooks struct {
	CreatedAt *int64 `json:"createdAt,omitempty"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Ref       string `json:"ref"`
	URL       string `json:"url"`
}

func (o *GetProjects200ApplicationJSONProjectsLink1DeployHooks) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink1DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsLink1DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsLink1DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjects200ApplicationJSONProjectsLink1DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjects200ApplicationJSONProjectsLink1Type string

const (
	GetProjects200ApplicationJSONProjectsLink1TypeGithub GetProjects200ApplicationJSONProjectsLink1Type = "github"
)

func (e GetProjects200ApplicationJSONProjectsLink1Type) ToPointer() *GetProjects200ApplicationJSONProjectsLink1Type {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsLink1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetProjects200ApplicationJSONProjectsLink1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsLink1Type: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsLink1 struct {
	CreatedAt        *int64                                                  `json:"createdAt,omitempty"`
	DeployHooks      []GetProjects200ApplicationJSONProjectsLink1DeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                                 `json:"gitCredentialId,omitempty"`
	Org              *string                                                 `json:"org,omitempty"`
	ProductionBranch *string                                                 `json:"productionBranch,omitempty"`
	Repo             *string                                                 `json:"repo,omitempty"`
	RepoID           *int64                                                  `json:"repoId,omitempty"`
	Sourceless       *bool                                                   `json:"sourceless,omitempty"`
	Type             *GetProjects200ApplicationJSONProjectsLink1Type         `json:"type,omitempty"`
	UpdatedAt        *int64                                                  `json:"updatedAt,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetDeployHooks() []GetProjects200ApplicationJSONProjectsLink1DeployHooks {
	if o == nil {
		return []GetProjects200ApplicationJSONProjectsLink1DeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetRepoID() *int64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetType() *GetProjects200ApplicationJSONProjectsLink1Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsLink1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type GetProjects200ApplicationJSONProjectsLinkType string

const (
	GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink1 GetProjects200ApplicationJSONProjectsLinkType = "getProjects_200ApplicationJSON_projects_link_1"
	GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink2 GetProjects200ApplicationJSONProjectsLinkType = "getProjects_200ApplicationJSON_projects_link_2"
	GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink3 GetProjects200ApplicationJSONProjectsLinkType = "getProjects_200ApplicationJSON_projects_link_3"
)

type GetProjects200ApplicationJSONProjectsLink struct {
	GetProjects200ApplicationJSONProjectsLink1 *GetProjects200ApplicationJSONProjectsLink1
	GetProjects200ApplicationJSONProjectsLink2 *GetProjects200ApplicationJSONProjectsLink2
	GetProjects200ApplicationJSONProjectsLink3 *GetProjects200ApplicationJSONProjectsLink3

	Type GetProjects200ApplicationJSONProjectsLinkType
}

func CreateGetProjects200ApplicationJSONProjectsLinkGetProjects200ApplicationJSONProjectsLink1(getProjects200ApplicationJSONProjectsLink1 GetProjects200ApplicationJSONProjectsLink1) GetProjects200ApplicationJSONProjectsLink {
	typ := GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink1

	return GetProjects200ApplicationJSONProjectsLink{
		GetProjects200ApplicationJSONProjectsLink1: &getProjects200ApplicationJSONProjectsLink1,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsLinkGetProjects200ApplicationJSONProjectsLink2(getProjects200ApplicationJSONProjectsLink2 GetProjects200ApplicationJSONProjectsLink2) GetProjects200ApplicationJSONProjectsLink {
	typ := GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink2

	return GetProjects200ApplicationJSONProjectsLink{
		GetProjects200ApplicationJSONProjectsLink2: &getProjects200ApplicationJSONProjectsLink2,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsLinkGetProjects200ApplicationJSONProjectsLink3(getProjects200ApplicationJSONProjectsLink3 GetProjects200ApplicationJSONProjectsLink3) GetProjects200ApplicationJSONProjectsLink {
	typ := GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink3

	return GetProjects200ApplicationJSONProjectsLink{
		GetProjects200ApplicationJSONProjectsLink3: &getProjects200ApplicationJSONProjectsLink3,
		Type: typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsLink) UnmarshalJSON(data []byte) error {

	getProjects200ApplicationJSONProjectsLink1 := new(GetProjects200ApplicationJSONProjectsLink1)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsLink1, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsLink1 = getProjects200ApplicationJSONProjectsLink1
		u.Type = GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink1
		return nil
	}

	getProjects200ApplicationJSONProjectsLink2 := new(GetProjects200ApplicationJSONProjectsLink2)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsLink2, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsLink2 = getProjects200ApplicationJSONProjectsLink2
		u.Type = GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink2
		return nil
	}

	getProjects200ApplicationJSONProjectsLink3 := new(GetProjects200ApplicationJSONProjectsLink3)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsLink3, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsLink3 = getProjects200ApplicationJSONProjectsLink3
		u.Type = GetProjects200ApplicationJSONProjectsLinkTypeGetProjects200ApplicationJSONProjectsLink3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsLink) MarshalJSON() ([]byte, error) {
	if u.GetProjects200ApplicationJSONProjectsLink1 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsLink1, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsLink2 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsLink2, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsLink3 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsLink3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsNodeVersion string

const (
	GetProjects200ApplicationJSONProjectsNodeVersionEighteenX GetProjects200ApplicationJSONProjectsNodeVersion = "18.x"
	GetProjects200ApplicationJSONProjectsNodeVersionSixteenX  GetProjects200ApplicationJSONProjectsNodeVersion = "16.x"
	GetProjects200ApplicationJSONProjectsNodeVersionFourteenX GetProjects200ApplicationJSONProjectsNodeVersion = "14.x"
	GetProjects200ApplicationJSONProjectsNodeVersionTwelveX   GetProjects200ApplicationJSONProjectsNodeVersion = "12.x"
	GetProjects200ApplicationJSONProjectsNodeVersionTenX      GetProjects200ApplicationJSONProjectsNodeVersion = "10.x"
)

func (e GetProjects200ApplicationJSONProjectsNodeVersion) ToPointer() *GetProjects200ApplicationJSONProjectsNodeVersion {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = GetProjects200ApplicationJSONProjectsNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsNodeVersion: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsPasswordProtection struct {
}

type GetProjects200ApplicationJSONProjectsPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *GetProjects200ApplicationJSONProjectsPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type GetProjects200ApplicationJSONProjectsProtectionBypass2Access string

const (
	GetProjects200ApplicationJSONProjectsProtectionBypass2AccessRequested GetProjects200ApplicationJSONProjectsProtectionBypass2Access = "requested"
	GetProjects200ApplicationJSONProjectsProtectionBypass2AccessGranted   GetProjects200ApplicationJSONProjectsProtectionBypass2Access = "granted"
)

func (e GetProjects200ApplicationJSONProjectsProtectionBypass2Access) ToPointer() *GetProjects200ApplicationJSONProjectsProtectionBypass2Access {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsProtectionBypass2Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = GetProjects200ApplicationJSONProjectsProtectionBypass2Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsProtectionBypass2Access: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsProtectionBypass2Scope string

const (
	GetProjects200ApplicationJSONProjectsProtectionBypass2ScopeUser GetProjects200ApplicationJSONProjectsProtectionBypass2Scope = "user"
)

func (e GetProjects200ApplicationJSONProjectsProtectionBypass2Scope) ToPointer() *GetProjects200ApplicationJSONProjectsProtectionBypass2Scope {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsProtectionBypass2Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetProjects200ApplicationJSONProjectsProtectionBypass2Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsProtectionBypass2Scope: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsProtectionBypass2 struct {
	Access        GetProjects200ApplicationJSONProjectsProtectionBypass2Access `json:"access"`
	CreatedAt     int64                                                        `json:"createdAt"`
	LastUpdatedAt int64                                                        `json:"lastUpdatedAt"`
	LastUpdatedBy string                                                       `json:"lastUpdatedBy"`
	Scope         GetProjects200ApplicationJSONProjectsProtectionBypass2Scope  `json:"scope"`
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass2) GetAccess() GetProjects200ApplicationJSONProjectsProtectionBypass2Access {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsProtectionBypass2Access("")
	}
	return o.Access
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass2) GetScope() GetProjects200ApplicationJSONProjectsProtectionBypass2Scope {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsProtectionBypass2Scope("")
	}
	return o.Scope
}

type GetProjects200ApplicationJSONProjectsProtectionBypass1Scope string

const (
	GetProjects200ApplicationJSONProjectsProtectionBypass1ScopeShareableLink    GetProjects200ApplicationJSONProjectsProtectionBypass1Scope = "shareable-link"
	GetProjects200ApplicationJSONProjectsProtectionBypass1ScopeAutomationBypass GetProjects200ApplicationJSONProjectsProtectionBypass1Scope = "automation-bypass"
)

func (e GetProjects200ApplicationJSONProjectsProtectionBypass1Scope) ToPointer() *GetProjects200ApplicationJSONProjectsProtectionBypass1Scope {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsProtectionBypass1Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = GetProjects200ApplicationJSONProjectsProtectionBypass1Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsProtectionBypass1Scope: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsProtectionBypass1 struct {
	CreatedAt int64                                                       `json:"createdAt"`
	CreatedBy string                                                      `json:"createdBy"`
	Scope     GetProjects200ApplicationJSONProjectsProtectionBypass1Scope `json:"scope"`
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetProjects200ApplicationJSONProjectsProtectionBypass1) GetScope() GetProjects200ApplicationJSONProjectsProtectionBypass1Scope {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsProtectionBypass1Scope("")
	}
	return o.Scope
}

type GetProjects200ApplicationJSONProjectsProtectionBypassType string

const (
	GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass1 GetProjects200ApplicationJSONProjectsProtectionBypassType = "getProjects_200ApplicationJSON_projects_protectionBypass_1"
	GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass2 GetProjects200ApplicationJSONProjectsProtectionBypassType = "getProjects_200ApplicationJSON_projects_protectionBypass_2"
)

type GetProjects200ApplicationJSONProjectsProtectionBypass struct {
	GetProjects200ApplicationJSONProjectsProtectionBypass1 *GetProjects200ApplicationJSONProjectsProtectionBypass1
	GetProjects200ApplicationJSONProjectsProtectionBypass2 *GetProjects200ApplicationJSONProjectsProtectionBypass2

	Type GetProjects200ApplicationJSONProjectsProtectionBypassType
}

func CreateGetProjects200ApplicationJSONProjectsProtectionBypassGetProjects200ApplicationJSONProjectsProtectionBypass1(getProjects200ApplicationJSONProjectsProtectionBypass1 GetProjects200ApplicationJSONProjectsProtectionBypass1) GetProjects200ApplicationJSONProjectsProtectionBypass {
	typ := GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass1

	return GetProjects200ApplicationJSONProjectsProtectionBypass{
		GetProjects200ApplicationJSONProjectsProtectionBypass1: &getProjects200ApplicationJSONProjectsProtectionBypass1,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsProtectionBypassGetProjects200ApplicationJSONProjectsProtectionBypass2(getProjects200ApplicationJSONProjectsProtectionBypass2 GetProjects200ApplicationJSONProjectsProtectionBypass2) GetProjects200ApplicationJSONProjectsProtectionBypass {
	typ := GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass2

	return GetProjects200ApplicationJSONProjectsProtectionBypass{
		GetProjects200ApplicationJSONProjectsProtectionBypass2: &getProjects200ApplicationJSONProjectsProtectionBypass2,
		Type: typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsProtectionBypass) UnmarshalJSON(data []byte) error {

	getProjects200ApplicationJSONProjectsProtectionBypass1 := new(GetProjects200ApplicationJSONProjectsProtectionBypass1)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsProtectionBypass1, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsProtectionBypass1 = getProjects200ApplicationJSONProjectsProtectionBypass1
		u.Type = GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass1
		return nil
	}

	getProjects200ApplicationJSONProjectsProtectionBypass2 := new(GetProjects200ApplicationJSONProjectsProtectionBypass2)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsProtectionBypass2, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsProtectionBypass2 = getProjects200ApplicationJSONProjectsProtectionBypass2
		u.Type = GetProjects200ApplicationJSONProjectsProtectionBypassTypeGetProjects200ApplicationJSONProjectsProtectionBypass2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.GetProjects200ApplicationJSONProjectsProtectionBypass1 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsProtectionBypass1, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsProtectionBypass2 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsProtectionBypass2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType string

const (
	GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentTypeAll                              GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType = "all"
	GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentTypePreview                          GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType = "preview"
	GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType) ToPointer() *GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsSsoProtection struct {
	DeploymentType GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *GetProjects200ApplicationJSONProjectsSsoProtection) GetDeploymentType() GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type GetProjects200ApplicationJSONProjectsTargetsAliasAssignedType string

const (
	GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeInteger GetProjects200ApplicationJSONProjectsTargetsAliasAssignedType = "integer"
	GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeBoolean GetProjects200ApplicationJSONProjectsTargetsAliasAssignedType = "boolean"
)

type GetProjects200ApplicationJSONProjectsTargetsAliasAssigned struct {
	Integer *int64
	Boolean *bool

	Type GetProjects200ApplicationJSONProjectsTargetsAliasAssignedType
}

func CreateGetProjects200ApplicationJSONProjectsTargetsAliasAssignedInteger(integer int64) GetProjects200ApplicationJSONProjectsTargetsAliasAssigned {
	typ := GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeInteger

	return GetProjects200ApplicationJSONProjectsTargetsAliasAssigned{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsTargetsAliasAssignedBoolean(boolean bool) GetProjects200ApplicationJSONProjectsTargetsAliasAssigned {
	typ := GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeBoolean

	return GetProjects200ApplicationJSONProjectsTargetsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsTargetsAliasAssigned) UnmarshalJSON(data []byte) error {

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeInteger
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = GetProjects200ApplicationJSONProjectsTargetsAliasAssignedTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsTargetsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjectsTargetsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjects200ApplicationJSONProjectsTargetsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjects200ApplicationJSONProjectsTargetsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetProjects200ApplicationJSONProjectsTargetsBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *GetProjects200ApplicationJSONProjectsTargetsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjects200ApplicationJSONProjectsTargetsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjects200ApplicationJSONProjectsTargetsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type GetProjects200ApplicationJSONProjectsTargetsChecksConclusion string

const (
	GetProjects200ApplicationJSONProjectsTargetsChecksConclusionSucceeded GetProjects200ApplicationJSONProjectsTargetsChecksConclusion = "succeeded"
	GetProjects200ApplicationJSONProjectsTargetsChecksConclusionFailed    GetProjects200ApplicationJSONProjectsTargetsChecksConclusion = "failed"
	GetProjects200ApplicationJSONProjectsTargetsChecksConclusionSkipped   GetProjects200ApplicationJSONProjectsTargetsChecksConclusion = "skipped"
	GetProjects200ApplicationJSONProjectsTargetsChecksConclusionCanceled  GetProjects200ApplicationJSONProjectsTargetsChecksConclusion = "canceled"
)

func (e GetProjects200ApplicationJSONProjectsTargetsChecksConclusion) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsChecksConclusion {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjects200ApplicationJSONProjectsTargetsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsChecksConclusion: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargetsChecksState string

const (
	GetProjects200ApplicationJSONProjectsTargetsChecksStateRegistered GetProjects200ApplicationJSONProjectsTargetsChecksState = "registered"
	GetProjects200ApplicationJSONProjectsTargetsChecksStateRunning    GetProjects200ApplicationJSONProjectsTargetsChecksState = "running"
	GetProjects200ApplicationJSONProjectsTargetsChecksStateCompleted  GetProjects200ApplicationJSONProjectsTargetsChecksState = "completed"
)

func (e GetProjects200ApplicationJSONProjectsTargetsChecksState) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsChecksState {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjects200ApplicationJSONProjectsTargetsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsChecksState: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargetsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjects200ApplicationJSONProjectsTargetsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjects200ApplicationJSONProjectsTargetsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjects200ApplicationJSONProjectsTargetsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjects200ApplicationJSONProjectsTargetsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjects200ApplicationJSONProjectsTargetsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjects200ApplicationJSONProjectsTargetsPlan string

const (
	GetProjects200ApplicationJSONProjectsTargetsPlanPro        GetProjects200ApplicationJSONProjectsTargetsPlan = "pro"
	GetProjects200ApplicationJSONProjectsTargetsPlanEnterprise GetProjects200ApplicationJSONProjectsTargetsPlan = "enterprise"
	GetProjects200ApplicationJSONProjectsTargetsPlanHobby      GetProjects200ApplicationJSONProjectsTargetsPlan = "hobby"
	GetProjects200ApplicationJSONProjectsTargetsPlanOss        GetProjects200ApplicationJSONProjectsTargetsPlan = "oss"
)

func (e GetProjects200ApplicationJSONProjectsTargetsPlan) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsPlan {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = GetProjects200ApplicationJSONProjectsTargetsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsPlan: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargetsReadyState string

const (
	GetProjects200ApplicationJSONProjectsTargetsReadyStateBuilding     GetProjects200ApplicationJSONProjectsTargetsReadyState = "BUILDING"
	GetProjects200ApplicationJSONProjectsTargetsReadyStateError        GetProjects200ApplicationJSONProjectsTargetsReadyState = "ERROR"
	GetProjects200ApplicationJSONProjectsTargetsReadyStateInitializing GetProjects200ApplicationJSONProjectsTargetsReadyState = "INITIALIZING"
	GetProjects200ApplicationJSONProjectsTargetsReadyStateQueued       GetProjects200ApplicationJSONProjectsTargetsReadyState = "QUEUED"
	GetProjects200ApplicationJSONProjectsTargetsReadyStateReady        GetProjects200ApplicationJSONProjectsTargetsReadyState = "READY"
	GetProjects200ApplicationJSONProjectsTargetsReadyStateCanceled     GetProjects200ApplicationJSONProjectsTargetsReadyState = "CANCELED"
)

func (e GetProjects200ApplicationJSONProjectsTargetsReadyState) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsReadyState {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjects200ApplicationJSONProjectsTargetsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsReadyState: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargetsReadySubstate string

const (
	GetProjects200ApplicationJSONProjectsTargetsReadySubstateStaged   GetProjects200ApplicationJSONProjectsTargetsReadySubstate = "STAGED"
	GetProjects200ApplicationJSONProjectsTargetsReadySubstatePromoted GetProjects200ApplicationJSONProjectsTargetsReadySubstate = "PROMOTED"
)

func (e GetProjects200ApplicationJSONProjectsTargetsReadySubstate) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsReadySubstate {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetProjects200ApplicationJSONProjectsTargetsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsReadySubstate: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargetsType string

const (
	GetProjects200ApplicationJSONProjectsTargetsTypeLambdas GetProjects200ApplicationJSONProjectsTargetsType = "LAMBDAS"
)

func (e GetProjects200ApplicationJSONProjectsTargetsType) ToPointer() *GetProjects200ApplicationJSONProjectsTargetsType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjects200ApplicationJSONProjectsTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTargetsType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTargets struct {
	Alias                  []string                                                      `json:"alias,omitempty"`
	AliasAssigned          *GetProjects200ApplicationJSONProjectsTargetsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjects200ApplicationJSONProjectsTargetsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                                       `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                                      `json:"automaticAliases,omitempty"`
	BuildingAt             *int64                                                        `json:"buildingAt,omitempty"`
	Builds                 []GetProjects200ApplicationJSONProjectsTargetsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *GetProjects200ApplicationJSONProjectsTargetsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjects200ApplicationJSONProjectsTargetsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                                         `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                                       `json:"connectConfigurationId,omitempty"`
	CreatedAt              int64                                                         `json:"createdAt"`
	CreatedIn              string                                                        `json:"createdIn"`
	Creator                *GetProjects200ApplicationJSONProjectsTargetsCreator          `json:"creator"`
	DeploymentHostname     string                                                        `json:"deploymentHostname"`
	Forced                 *bool                                                         `json:"forced,omitempty"`
	ID                     string                                                        `json:"id"`
	Meta                   map[string]string                                             `json:"meta,omitempty"`
	MonorepoManager        *string                                                       `json:"monorepoManager,omitempty"`
	Name                   string                                                        `json:"name"`
	Plan                   GetProjects200ApplicationJSONProjectsTargetsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                                      `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                       `json:"private"`
	ReadyAt                *int64                                                     `json:"readyAt,omitempty"`
	ReadyState             GetProjects200ApplicationJSONProjectsTargetsReadyState     `json:"readyState"`
	ReadySubstate          *GetProjects200ApplicationJSONProjectsTargetsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *int64                                                     `json:"requestedAt,omitempty"`
	Target                 *string                                                    `json:"target,omitempty"`
	TeamID                 *string                                                    `json:"teamId,omitempty"`
	Type                   GetProjects200ApplicationJSONProjectsTargetsType           `json:"type"`
	URL                    string                                                     `json:"url"`
	UserID                 string                                                     `json:"userId"`
	WithCache              *bool                                                      `json:"withCache,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetAliasAssigned() *GetProjects200ApplicationJSONProjectsTargetsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetAliasError() *GetProjects200ApplicationJSONProjectsTargetsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetBuildingAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetBuilds() []GetProjects200ApplicationJSONProjectsTargetsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetChecksConclusion() *GetProjects200ApplicationJSONProjectsTargetsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetChecksState() *GetProjects200ApplicationJSONProjectsTargetsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetCreator() *GetProjects200ApplicationJSONProjectsTargetsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetPlan() GetProjects200ApplicationJSONProjectsTargetsPlan {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTargetsPlan("")
	}
	return o.Plan
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetReadyAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetReadyState() GetProjects200ApplicationJSONProjectsTargetsReadyState {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTargetsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetReadySubstate() *GetProjects200ApplicationJSONProjectsTargetsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetRequestedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetType() GetProjects200ApplicationJSONProjectsTargetsType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTargetsType("")
	}
	return o.Type
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjects200ApplicationJSONProjectsTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType string

const (
	GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentTypeAll                              GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType = "all"
	GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentTypePreview                          GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType = "preview"
	GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType = "prod_deployment_urls_and_all_previews"
	GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentTypeProduction                       GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType = "production"
)

func (e GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType) ToPointer() *GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTrustedIps2 struct {
	DeploymentType GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType `json:"deploymentType"`
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps2) GetDeploymentType() GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTrustedIps2DeploymentType("")
	}
	return o.DeploymentType
}

type GetProjects200ApplicationJSONProjectsTrustedIps1Addresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps1Addresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps1Addresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType string

const (
	GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentTypeAll                              GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType = "all"
	GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentTypePreview                          GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType = "preview"
	GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType = "prod_deployment_urls_and_all_previews"
	GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentTypeProduction                       GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType = "production"
)

func (e GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType) ToPointer() *GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode string

const (
	GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionModeAdditional GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode = "additional"
	GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionModeExclusive  GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode = "exclusive"
)

func (e GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode) ToPointer() *GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode {
	return &e
}

func (e *GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode: %v", v)
	}
}

type GetProjects200ApplicationJSONProjectsTrustedIps1 struct {
	Addresses      []GetProjects200ApplicationJSONProjectsTrustedIps1Addresses    `json:"addresses"`
	DeploymentType GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType `json:"deploymentType"`
	ProtectionMode GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode `json:"protectionMode"`
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps1) GetAddresses() []GetProjects200ApplicationJSONProjectsTrustedIps1Addresses {
	if o == nil {
		return []GetProjects200ApplicationJSONProjectsTrustedIps1Addresses{}
	}
	return o.Addresses
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps1) GetDeploymentType() GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTrustedIps1DeploymentType("")
	}
	return o.DeploymentType
}

func (o *GetProjects200ApplicationJSONProjectsTrustedIps1) GetProtectionMode() GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsTrustedIps1ProtectionMode("")
	}
	return o.ProtectionMode
}

type GetProjects200ApplicationJSONProjectsTrustedIpsType string

const (
	GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps1 GetProjects200ApplicationJSONProjectsTrustedIpsType = "getProjects_200ApplicationJSON_projects_trustedIps_1"
	GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps2 GetProjects200ApplicationJSONProjectsTrustedIpsType = "getProjects_200ApplicationJSON_projects_trustedIps_2"
)

type GetProjects200ApplicationJSONProjectsTrustedIps struct {
	GetProjects200ApplicationJSONProjectsTrustedIps1 *GetProjects200ApplicationJSONProjectsTrustedIps1
	GetProjects200ApplicationJSONProjectsTrustedIps2 *GetProjects200ApplicationJSONProjectsTrustedIps2

	Type GetProjects200ApplicationJSONProjectsTrustedIpsType
}

func CreateGetProjects200ApplicationJSONProjectsTrustedIpsGetProjects200ApplicationJSONProjectsTrustedIps1(getProjects200ApplicationJSONProjectsTrustedIps1 GetProjects200ApplicationJSONProjectsTrustedIps1) GetProjects200ApplicationJSONProjectsTrustedIps {
	typ := GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps1

	return GetProjects200ApplicationJSONProjectsTrustedIps{
		GetProjects200ApplicationJSONProjectsTrustedIps1: &getProjects200ApplicationJSONProjectsTrustedIps1,
		Type: typ,
	}
}

func CreateGetProjects200ApplicationJSONProjectsTrustedIpsGetProjects200ApplicationJSONProjectsTrustedIps2(getProjects200ApplicationJSONProjectsTrustedIps2 GetProjects200ApplicationJSONProjectsTrustedIps2) GetProjects200ApplicationJSONProjectsTrustedIps {
	typ := GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps2

	return GetProjects200ApplicationJSONProjectsTrustedIps{
		GetProjects200ApplicationJSONProjectsTrustedIps2: &getProjects200ApplicationJSONProjectsTrustedIps2,
		Type: typ,
	}
}

func (u *GetProjects200ApplicationJSONProjectsTrustedIps) UnmarshalJSON(data []byte) error {

	getProjects200ApplicationJSONProjectsTrustedIps2 := new(GetProjects200ApplicationJSONProjectsTrustedIps2)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsTrustedIps2, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsTrustedIps2 = getProjects200ApplicationJSONProjectsTrustedIps2
		u.Type = GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps2
		return nil
	}

	getProjects200ApplicationJSONProjectsTrustedIps1 := new(GetProjects200ApplicationJSONProjectsTrustedIps1)
	if err := utils.UnmarshalJSON(data, &getProjects200ApplicationJSONProjectsTrustedIps1, "", true, true); err == nil {
		u.GetProjects200ApplicationJSONProjectsTrustedIps1 = getProjects200ApplicationJSONProjectsTrustedIps1
		u.Type = GetProjects200ApplicationJSONProjectsTrustedIpsTypeGetProjects200ApplicationJSONProjectsTrustedIps1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetProjects200ApplicationJSONProjectsTrustedIps) MarshalJSON() ([]byte, error) {
	if u.GetProjects200ApplicationJSONProjectsTrustedIps1 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsTrustedIps1, "", true)
	}

	if u.GetProjects200ApplicationJSONProjectsTrustedIps2 != nil {
		return utils.MarshalJSON(u.GetProjects200ApplicationJSONProjectsTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetProjects200ApplicationJSONProjects struct {
	AccountID                        string                                                           `json:"accountId"`
	Analytics                        *GetProjects200ApplicationJSONProjectsAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains          *bool                                                            `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                                          `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool                                                            `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                     *string                                                          `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                                          `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectBuildsEnabled             *bool                                                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID           *string                                                          `json:"connectConfigurationId,omitempty"`
	CreatedAt                        *int64                                                           `json:"createdAt,omitempty"`
	Crons                            *GetProjects200ApplicationJSONProjectsCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility    *bool                                                            `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                        *GetProjects200ApplicationJSONProjectsDataCache                  `json:"dataCache,omitempty"`
	DevCommand                       *string                                                          `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                                             `json:"directoryListing"`
	EnablePreviewFeedback            *bool                                                            `json:"enablePreviewFeedback,omitempty"`
	Env                              []GetProjects200ApplicationJSONProjectsEnv                       `json:"env,omitempty"`
	Framework                        *GetProjects200ApplicationJSONProjectsFramework                  `json:"framework,omitempty"`
	GitComments                      *GetProjects200ApplicationJSONProjectsGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                *bool                                                            `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                                            `json:"gitLFS,omitempty"`
	HasActiveBranches                *bool                                                            `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases               *bool                                                            `json:"hasFloatingAliases,omitempty"`
	ID                               string                                                           `json:"id"`
	InstallCommand                   *string                                                          `json:"installCommand,omitempty"`
	LastAliasRequest                 *GetProjects200ApplicationJSONProjectsLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget               *GetProjects200ApplicationJSONProjectsLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                []GetProjects200ApplicationJSONProjectsLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                             *GetProjects200ApplicationJSONProjectsLink                       `json:"link,omitempty"`
	Live                             *bool                                                            `json:"live,omitempty"`
	Name                             string                                                           `json:"name"`
	NodeVersion                      GetProjects200ApplicationJSONProjectsNodeVersion                 `json:"nodeVersion"`
	OutputDirectory                  *string                                                          `json:"outputDirectory,omitempty"`
	PasswordProtection               *GetProjects200ApplicationJSONProjectsPasswordProtection         `json:"passwordProtection,omitempty"`
	Permissions                      *GetProjects200ApplicationJSONProjectsPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane    *bool                                                            `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                 map[string]GetProjects200ApplicationJSONProjectsProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                     *bool                                                            `json:"publicSource,omitempty"`
	RootDirectory                    *string                                                          `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion         *string                                                          `json:"serverlessFunctionRegion,omitempty"`
	SkipGitConnectDuringLink         *bool                                                            `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory  *bool                                                            `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                    *GetProjects200ApplicationJSONProjectsSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                          map[string]GetProjects200ApplicationJSONProjectsTargets          `json:"targets,omitempty"`
	TransferCompletedAt              *int64                                                           `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                *int64                                                           `json:"transferStartedAt,omitempty"`
	TransferToAccountID              *string                                                          `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID         *string                                                          `json:"transferredFromAccountId,omitempty"`
	TrustedIps                       *GetProjects200ApplicationJSONProjectsTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                        *int64                                                           `json:"updatedAt,omitempty"`
}

func (o *GetProjects200ApplicationJSONProjects) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetProjects200ApplicationJSONProjects) GetAnalytics() *GetProjects200ApplicationJSONProjectsAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjects200ApplicationJSONProjects) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetProjects200ApplicationJSONProjects) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *GetProjects200ApplicationJSONProjects) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *GetProjects200ApplicationJSONProjects) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *GetProjects200ApplicationJSONProjects) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *GetProjects200ApplicationJSONProjects) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjects200ApplicationJSONProjects) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjects200ApplicationJSONProjects) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjects200ApplicationJSONProjects) GetCrons() *GetProjects200ApplicationJSONProjectsCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetProjects200ApplicationJSONProjects) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *GetProjects200ApplicationJSONProjects) GetDataCache() *GetProjects200ApplicationJSONProjectsDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *GetProjects200ApplicationJSONProjects) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *GetProjects200ApplicationJSONProjects) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *GetProjects200ApplicationJSONProjects) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *GetProjects200ApplicationJSONProjects) GetEnv() []GetProjects200ApplicationJSONProjectsEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetProjects200ApplicationJSONProjects) GetFramework() *GetProjects200ApplicationJSONProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetProjects200ApplicationJSONProjects) GetGitComments() *GetProjects200ApplicationJSONProjectsGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *GetProjects200ApplicationJSONProjects) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjects200ApplicationJSONProjects) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *GetProjects200ApplicationJSONProjects) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *GetProjects200ApplicationJSONProjects) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *GetProjects200ApplicationJSONProjects) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjects200ApplicationJSONProjects) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *GetProjects200ApplicationJSONProjects) GetLastAliasRequest() *GetProjects200ApplicationJSONProjectsLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *GetProjects200ApplicationJSONProjects) GetLastRollbackTarget() *GetProjects200ApplicationJSONProjectsLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *GetProjects200ApplicationJSONProjects) GetLatestDeployments() []GetProjects200ApplicationJSONProjectsLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *GetProjects200ApplicationJSONProjects) GetLink() *GetProjects200ApplicationJSONProjectsLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetProjects200ApplicationJSONProjects) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *GetProjects200ApplicationJSONProjects) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjects200ApplicationJSONProjects) GetNodeVersion() GetProjects200ApplicationJSONProjectsNodeVersion {
	if o == nil {
		return GetProjects200ApplicationJSONProjectsNodeVersion("")
	}
	return o.NodeVersion
}

func (o *GetProjects200ApplicationJSONProjects) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *GetProjects200ApplicationJSONProjects) GetPasswordProtection() *GetProjects200ApplicationJSONProjectsPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjects200ApplicationJSONProjects) GetPermissions() *GetProjects200ApplicationJSONProjectsPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjects200ApplicationJSONProjects) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *GetProjects200ApplicationJSONProjects) GetProtectionBypass() map[string]GetProjects200ApplicationJSONProjectsProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *GetProjects200ApplicationJSONProjects) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *GetProjects200ApplicationJSONProjects) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *GetProjects200ApplicationJSONProjects) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *GetProjects200ApplicationJSONProjects) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *GetProjects200ApplicationJSONProjects) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *GetProjects200ApplicationJSONProjects) GetSsoProtection() *GetProjects200ApplicationJSONProjectsSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *GetProjects200ApplicationJSONProjects) GetTargets() map[string]GetProjects200ApplicationJSONProjectsTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *GetProjects200ApplicationJSONProjects) GetTransferCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *GetProjects200ApplicationJSONProjects) GetTransferStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *GetProjects200ApplicationJSONProjects) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *GetProjects200ApplicationJSONProjects) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *GetProjects200ApplicationJSONProjects) GetTrustedIps() *GetProjects200ApplicationJSONProjectsTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjects200ApplicationJSONProjects) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// GetProjects200ApplicationJSON - The paginated list of projects
type GetProjects200ApplicationJSON struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination                       `json:"pagination"`
	Projects   []GetProjects200ApplicationJSONProjects `json:"projects"`
}

func (o *GetProjects200ApplicationJSON) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

func (o *GetProjects200ApplicationJSON) GetProjects() []GetProjects200ApplicationJSONProjects {
	if o == nil {
		return []GetProjects200ApplicationJSONProjects{}
	}
	return o.Projects
}

type GetProjectsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The paginated list of projects
	GetProjects200ApplicationJSONObject *GetProjects200ApplicationJSON
}

func (o *GetProjectsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectsResponse) GetGetProjects200ApplicationJSONObject() *GetProjects200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.GetProjects200ApplicationJSONObject
}
