// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/pkg/utils"
	"net/http"
)

type CreateProjectEnvProjectsTarget string

const (
	CreateProjectEnvProjectsTargetProduction  CreateProjectEnvProjectsTarget = "production"
	CreateProjectEnvProjectsTargetPreview     CreateProjectEnvProjectsTarget = "preview"
	CreateProjectEnvProjectsTargetDevelopment CreateProjectEnvProjectsTarget = "development"
)

func (e CreateProjectEnvProjectsTarget) ToPointer() *CreateProjectEnvProjectsTarget {
	return &e
}

func (e *CreateProjectEnvProjectsTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsTarget: %v", v)
	}
}

// CreateProjectEnvProjectsType - The type of environment variable
type CreateProjectEnvProjectsType string

const (
	CreateProjectEnvProjectsTypeSystem    CreateProjectEnvProjectsType = "system"
	CreateProjectEnvProjectsTypeSecret    CreateProjectEnvProjectsType = "secret"
	CreateProjectEnvProjectsTypeEncrypted CreateProjectEnvProjectsType = "encrypted"
	CreateProjectEnvProjectsTypePlain     CreateProjectEnvProjectsType = "plain"
	CreateProjectEnvProjectsTypeSensitive CreateProjectEnvProjectsType = "sensitive"
)

func (e CreateProjectEnvProjectsType) ToPointer() *CreateProjectEnvProjectsType {
	return &e
}

func (e *CreateProjectEnvProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsType: %v", v)
	}
}

type CreateProjectEnv2 struct {
	// The git branch of the environment variable
	GitBranch *string `json:"gitBranch,omitempty"`
	// The name of the environment variable
	Key string `json:"key"`
	// The target environment of the environment variable
	Target []CreateProjectEnvProjectsTarget `json:"target"`
	// The type of environment variable
	Type CreateProjectEnvProjectsType `json:"type"`
	// The value of the environment variable
	Value string `json:"value"`
}

func (o *CreateProjectEnv2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv2) GetTarget() []CreateProjectEnvProjectsTarget {
	if o == nil {
		return []CreateProjectEnvProjectsTarget{}
	}
	return o.Target
}

func (o *CreateProjectEnv2) GetType() CreateProjectEnvProjectsType {
	if o == nil {
		return CreateProjectEnvProjectsType("")
	}
	return o.Type
}

func (o *CreateProjectEnv2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectEnvTarget string

const (
	CreateProjectEnvTargetProduction  CreateProjectEnvTarget = "production"
	CreateProjectEnvTargetPreview     CreateProjectEnvTarget = "preview"
	CreateProjectEnvTargetDevelopment CreateProjectEnvTarget = "development"
)

func (e CreateProjectEnvTarget) ToPointer() *CreateProjectEnvTarget {
	return &e
}

func (e *CreateProjectEnvTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTarget: %v", v)
	}
}

// CreateProjectEnvType - The type of environment variable
type CreateProjectEnvType string

const (
	CreateProjectEnvTypeSystem    CreateProjectEnvType = "system"
	CreateProjectEnvTypeSecret    CreateProjectEnvType = "secret"
	CreateProjectEnvTypeEncrypted CreateProjectEnvType = "encrypted"
	CreateProjectEnvTypePlain     CreateProjectEnvType = "plain"
	CreateProjectEnvTypeSensitive CreateProjectEnvType = "sensitive"
)

func (e CreateProjectEnvType) ToPointer() *CreateProjectEnvType {
	return &e
}

func (e *CreateProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvType: %v", v)
	}
}

type CreateProjectEnv1 struct {
	// The git branch of the environment variable
	GitBranch *string `json:"gitBranch,omitempty"`
	// The name of the environment variable
	Key string `json:"key"`
	// The target environment of the environment variable
	Target []CreateProjectEnvTarget `json:"target"`
	// The type of environment variable
	Type CreateProjectEnvType `json:"type"`
	// The value of the environment variable
	Value string `json:"value"`
}

func (o *CreateProjectEnv1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv1) GetTarget() []CreateProjectEnvTarget {
	if o == nil {
		return []CreateProjectEnvTarget{}
	}
	return o.Target
}

func (o *CreateProjectEnv1) GetType() CreateProjectEnvType {
	if o == nil {
		return CreateProjectEnvType("")
	}
	return o.Type
}

func (o *CreateProjectEnv1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectEnvRequestBodyType string

const (
	CreateProjectEnvRequestBodyTypeCreateProjectEnv1        CreateProjectEnvRequestBodyType = "createProjectEnv_1"
	CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnv2 CreateProjectEnvRequestBodyType = "array_Of_createProjectEnv_2"
)

type CreateProjectEnvRequestBody struct {
	CreateProjectEnv1        *CreateProjectEnv1
	ArrayOfCreateProjectEnv2 []CreateProjectEnv2

	Type CreateProjectEnvRequestBodyType
}

func CreateCreateProjectEnvRequestBodyCreateProjectEnv1(createProjectEnv1 CreateProjectEnv1) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeCreateProjectEnv1

	return CreateProjectEnvRequestBody{
		CreateProjectEnv1: &createProjectEnv1,
		Type:              typ,
	}
}

func CreateCreateProjectEnvRequestBodyArrayOfCreateProjectEnv2(arrayOfCreateProjectEnv2 []CreateProjectEnv2) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnv2

	return CreateProjectEnvRequestBody{
		ArrayOfCreateProjectEnv2: arrayOfCreateProjectEnv2,
		Type:                     typ,
	}
}

func (u *CreateProjectEnvRequestBody) UnmarshalJSON(data []byte) error {

	createProjectEnv1 := new(CreateProjectEnv1)
	if err := utils.UnmarshalJSON(data, &createProjectEnv1, "", true, true); err == nil {
		u.CreateProjectEnv1 = createProjectEnv1
		u.Type = CreateProjectEnvRequestBodyTypeCreateProjectEnv1
		return nil
	}

	arrayOfCreateProjectEnv2 := []CreateProjectEnv2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnv2, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnv2 = arrayOfCreateProjectEnv2
		u.Type = CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnv2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnv1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv1, "", true)
	}

	if u.ArrayOfCreateProjectEnv2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnv2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvRequest struct {
	RequestBody *CreateProjectEnvRequestBody `request:"mediaType=application/json"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Allow override of environment variable if it already exists
	Upsert *string `queryParam:"style=form,explode=true,name=upsert"`
}

func (o *CreateProjectEnvRequest) GetRequestBody() *CreateProjectEnvRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *CreateProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectEnvRequest) GetUpsert() *string {
	if o == nil {
		return nil
	}
	return o.Upsert
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12TypePostgresDatabase CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type = "postgres-database"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type: %v", v)
	}
}

type CreateProjectEnvProjects12 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type `json:"type"`
}

func (o *CreateProjectEnvProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects12) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint12Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintTypePostgresPassword CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType = "postgres-password"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType: %v", v)
	}
}

type CreateProjectEnvProjects11 struct {
	StoreID string                                                                                `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType `json:"type"`
}

func (o *CreateProjectEnvProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects11) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHintType("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2TypePostgresHost CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type = "postgres-host"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type: %v", v)
	}
}

type CreateProjectEnvProjects10 struct {
	StoreID string                                                                     `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type `json:"type"`
}

func (o *CreateProjectEnvProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects10) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9TypePostgresUser CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type = "postgres-user"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type: %v", v)
	}
}

type CreateProjectEnvProjects9 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type `json:"type"`
}

func (o *CreateProjectEnvProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects9) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint9Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8TypePostgresPrismaURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type = "postgres-prisma-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type: %v", v)
	}
}

type CreateProjectEnvProjects8 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type `json:"type"`
}

func (o *CreateProjectEnvProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects8) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint8Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7TypePostgresURLNonPooling CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type = "postgres-url-non-pooling"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type: %v", v)
	}
}

type CreateProjectEnvProjects7 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type `json:"type"`
}

func (o *CreateProjectEnvProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects7) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint7Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6TypePostgresURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type = "postgres-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type: %v", v)
	}
}

type CreateProjectEnvProjects6 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type `json:"type"`
}

func (o *CreateProjectEnvProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects6) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint6Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5TypeBlobReadWriteToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type = "blob-read-write-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type: %v", v)
	}
}

type CreateProjectEnvProjects5 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type `json:"type"`
}

func (o *CreateProjectEnvProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects5) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint5Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4TypeRedisRestAPIReadOnlyToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type: %v", v)
	}
}

type CreateProjectEnvProjects4 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type `json:"type"`
}

func (o *CreateProjectEnvProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects4) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint4Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3TypeRedisRestAPIToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type = "redis-rest-api-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type: %v", v)
	}
}

type CreateProjectEnvProjects3 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type `json:"type"`
}

func (o *CreateProjectEnvProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjects3) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint3Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2TypeRedisRestAPIURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type = "redis-rest-api-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201ApplicationJSON2 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type `json:"type"`
}

func (o *CreateProjectEnvProjectsResponse201ApplicationJSON2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjectsResponse201ApplicationJSON2) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint2Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1TypeRedisURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type = "redis-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201ApplicationJSON1 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type `json:"type"`
}

func (o *CreateProjectEnvProjectsResponse201ApplicationJSON1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjectsResponse201ApplicationJSON1) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated2ContentHint1Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsContentHintType string

const (
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON1 CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_response_201_ApplicationJSON_1"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON2 CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_response_201_ApplicationJSON_2"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects3                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_3"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects4                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_4"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects5                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_5"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects6                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_6"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects7                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_7"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects8                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_8"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects9                           CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_9"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects10                          CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_10"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects11                          CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_11"
	CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects12                          CreateProjectEnvProjectsContentHintType = "createProjectEnv_projects_12"
)

type CreateProjectEnvProjectsContentHint struct {
	CreateProjectEnvProjectsResponse201ApplicationJSON1 *CreateProjectEnvProjectsResponse201ApplicationJSON1
	CreateProjectEnvProjectsResponse201ApplicationJSON2 *CreateProjectEnvProjectsResponse201ApplicationJSON2
	CreateProjectEnvProjects3                           *CreateProjectEnvProjects3
	CreateProjectEnvProjects4                           *CreateProjectEnvProjects4
	CreateProjectEnvProjects5                           *CreateProjectEnvProjects5
	CreateProjectEnvProjects6                           *CreateProjectEnvProjects6
	CreateProjectEnvProjects7                           *CreateProjectEnvProjects7
	CreateProjectEnvProjects8                           *CreateProjectEnvProjects8
	CreateProjectEnvProjects9                           *CreateProjectEnvProjects9
	CreateProjectEnvProjects10                          *CreateProjectEnvProjects10
	CreateProjectEnvProjects11                          *CreateProjectEnvProjects11
	CreateProjectEnvProjects12                          *CreateProjectEnvProjects12

	Type CreateProjectEnvProjectsContentHintType
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjectsResponse201ApplicationJSON1(createProjectEnvProjectsResponse201ApplicationJSON1 CreateProjectEnvProjectsResponse201ApplicationJSON1) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON1

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjectsResponse201ApplicationJSON1: &createProjectEnvProjectsResponse201ApplicationJSON1,
		Type: typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjectsResponse201ApplicationJSON2(createProjectEnvProjectsResponse201ApplicationJSON2 CreateProjectEnvProjectsResponse201ApplicationJSON2) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON2

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjectsResponse201ApplicationJSON2: &createProjectEnvProjectsResponse201ApplicationJSON2,
		Type: typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects3(createProjectEnvProjects3 CreateProjectEnvProjects3) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects3

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects3: &createProjectEnvProjects3,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects4(createProjectEnvProjects4 CreateProjectEnvProjects4) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects4

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects4: &createProjectEnvProjects4,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects5(createProjectEnvProjects5 CreateProjectEnvProjects5) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects5

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects5: &createProjectEnvProjects5,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects6(createProjectEnvProjects6 CreateProjectEnvProjects6) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects6

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects6: &createProjectEnvProjects6,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects7(createProjectEnvProjects7 CreateProjectEnvProjects7) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects7

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects7: &createProjectEnvProjects7,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects8(createProjectEnvProjects8 CreateProjectEnvProjects8) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects8

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects8: &createProjectEnvProjects8,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects9(createProjectEnvProjects9 CreateProjectEnvProjects9) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects9

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects9: &createProjectEnvProjects9,
		Type:                      typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects10(createProjectEnvProjects10 CreateProjectEnvProjects10) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects10

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects10: &createProjectEnvProjects10,
		Type:                       typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects11(createProjectEnvProjects11 CreateProjectEnvProjects11) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects11

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects11: &createProjectEnvProjects11,
		Type:                       typ,
	}
}

func CreateCreateProjectEnvProjectsContentHintCreateProjectEnvProjects12(createProjectEnvProjects12 CreateProjectEnvProjects12) CreateProjectEnvProjectsContentHint {
	typ := CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects12

	return CreateProjectEnvProjectsContentHint{
		CreateProjectEnvProjects12: &createProjectEnvProjects12,
		Type:                       typ,
	}
}

func (u *CreateProjectEnvProjectsContentHint) UnmarshalJSON(data []byte) error {

	createProjectEnvProjectsResponse201ApplicationJSON1 := new(CreateProjectEnvProjectsResponse201ApplicationJSON1)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse201ApplicationJSON1, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse201ApplicationJSON1 = createProjectEnvProjectsResponse201ApplicationJSON1
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON1
		return nil
	}

	createProjectEnvProjectsResponse201ApplicationJSON2 := new(CreateProjectEnvProjectsResponse201ApplicationJSON2)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse201ApplicationJSON2, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse201ApplicationJSON2 = createProjectEnvProjectsResponse201ApplicationJSON2
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjectsResponse201ApplicationJSON2
		return nil
	}

	createProjectEnvProjects3 := new(CreateProjectEnvProjects3)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects3, "", true, true); err == nil {
		u.CreateProjectEnvProjects3 = createProjectEnvProjects3
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects3
		return nil
	}

	createProjectEnvProjects4 := new(CreateProjectEnvProjects4)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects4, "", true, true); err == nil {
		u.CreateProjectEnvProjects4 = createProjectEnvProjects4
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects4
		return nil
	}

	createProjectEnvProjects5 := new(CreateProjectEnvProjects5)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects5, "", true, true); err == nil {
		u.CreateProjectEnvProjects5 = createProjectEnvProjects5
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects5
		return nil
	}

	createProjectEnvProjects6 := new(CreateProjectEnvProjects6)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects6, "", true, true); err == nil {
		u.CreateProjectEnvProjects6 = createProjectEnvProjects6
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects6
		return nil
	}

	createProjectEnvProjects7 := new(CreateProjectEnvProjects7)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects7, "", true, true); err == nil {
		u.CreateProjectEnvProjects7 = createProjectEnvProjects7
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects7
		return nil
	}

	createProjectEnvProjects8 := new(CreateProjectEnvProjects8)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects8, "", true, true); err == nil {
		u.CreateProjectEnvProjects8 = createProjectEnvProjects8
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects8
		return nil
	}

	createProjectEnvProjects9 := new(CreateProjectEnvProjects9)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects9, "", true, true); err == nil {
		u.CreateProjectEnvProjects9 = createProjectEnvProjects9
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects9
		return nil
	}

	createProjectEnvProjects10 := new(CreateProjectEnvProjects10)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects10, "", true, true); err == nil {
		u.CreateProjectEnvProjects10 = createProjectEnvProjects10
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects10
		return nil
	}

	createProjectEnvProjects11 := new(CreateProjectEnvProjects11)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects11, "", true, true); err == nil {
		u.CreateProjectEnvProjects11 = createProjectEnvProjects11
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects11
		return nil
	}

	createProjectEnvProjects12 := new(CreateProjectEnvProjects12)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects12, "", true, true); err == nil {
		u.CreateProjectEnvProjects12 = createProjectEnvProjects12
		u.Type = CreateProjectEnvProjectsContentHintTypeCreateProjectEnvProjects12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvProjectsResponse201ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse201ApplicationJSON1, "", true)
	}

	if u.CreateProjectEnvProjectsResponse201ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse201ApplicationJSON2, "", true)
	}

	if u.CreateProjectEnvProjects3 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects3, "", true)
	}

	if u.CreateProjectEnvProjects4 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects4, "", true)
	}

	if u.CreateProjectEnvProjects5 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects5, "", true)
	}

	if u.CreateProjectEnvProjects6 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects6, "", true)
	}

	if u.CreateProjectEnvProjects7 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects7, "", true)
	}

	if u.CreateProjectEnvProjects8 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects8, "", true)
	}

	if u.CreateProjectEnvProjects9 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects9, "", true)
	}

	if u.CreateProjectEnvProjects10 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects10, "", true)
	}

	if u.CreateProjectEnvProjects11 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects11, "", true)
	}

	if u.CreateProjectEnvProjects12 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2Production  CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 = "production"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2Preview     CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 = "preview"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2Development CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 = "development"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1Production  CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 = "production"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1Preview     CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 = "preview"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1Development CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 = "development"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201TargetType string

const (
	CreateProjectEnvProjectsResponse201TargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 CreateProjectEnvProjectsResponse201TargetType = "array_Of_createProjectEnv_projects_response_201_ApplicationJSON_responseBody_1"
	CreateProjectEnvProjectsResponse201TargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2        CreateProjectEnvProjectsResponse201TargetType = "createProjectEnv_projects_response_201_ApplicationJSON_responseBody_2"
)

type CreateProjectEnvProjectsResponse201Target struct {
	ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2        *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2

	Type CreateProjectEnvProjectsResponse201TargetType
}

func CreateCreateProjectEnvProjectsResponse201TargetArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1(arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1) CreateProjectEnvProjectsResponse201Target {
	typ := CreateProjectEnvProjectsResponse201TargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1

	return CreateProjectEnvProjectsResponse201Target{
		ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1: arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateCreateProjectEnvProjectsResponse201TargetCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2(createProjectEnvProjectsResponse201ApplicationJSONResponseBody2 CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2) CreateProjectEnvProjectsResponse201Target {
	typ := CreateProjectEnvProjectsResponse201TargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2

	return CreateProjectEnvProjectsResponse201Target{
		CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2: &createProjectEnvProjectsResponse201ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *CreateProjectEnvProjectsResponse201Target) UnmarshalJSON(data []byte) error {

	arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 := []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 = arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1
		u.Type = CreateProjectEnvProjectsResponse201TargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1
		return nil
	}

	createProjectEnvProjectsResponse201ApplicationJSONResponseBody2 := new(CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse201ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 = createProjectEnvProjectsResponse201ApplicationJSONResponseBody2
		u.Type = CreateProjectEnvProjectsResponse201TargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvProjectsResponse201Target) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBody1, "", true)
	}

	if u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponse201Type string

const (
	CreateProjectEnvProjectsResponse201TypeSystem    CreateProjectEnvProjectsResponse201Type = "system"
	CreateProjectEnvProjectsResponse201TypeSecret    CreateProjectEnvProjectsResponse201Type = "secret"
	CreateProjectEnvProjectsResponse201TypeEncrypted CreateProjectEnvProjectsResponse201Type = "encrypted"
	CreateProjectEnvProjectsResponse201TypePlain     CreateProjectEnvProjectsResponse201Type = "plain"
	CreateProjectEnvProjectsResponse201TypeSensitive CreateProjectEnvProjectsResponse201Type = "sensitive"
)

func (e CreateProjectEnvProjectsResponse201Type) ToPointer() *CreateProjectEnvProjectsResponse201Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvProjectsResponse201Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201Type: %v", v)
	}
}

type CreateProjectEnvProjects2 struct {
	ConfigurationID *string                              `json:"configurationId,omitempty"`
	ContentHint     *CreateProjectEnvProjectsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                               `json:"createdAt,omitempty"`
	CreatedBy       *string                              `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                      `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                    `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                    `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                    `json:"gitBranch,omitempty"`
	ID                *string                                    `json:"id,omitempty"`
	Key               *string                                    `json:"key,omitempty"`
	System            *bool                                      `json:"system,omitempty"`
	Target            *CreateProjectEnvProjectsResponse201Target `json:"target,omitempty"`
	Type              *CreateProjectEnvProjectsResponse201Type   `json:"type,omitempty"`
	UpdatedAt         *int64                                     `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                    `json:"updatedBy,omitempty"`
	Value             *string                                    `json:"value,omitempty"`
}

func (o *CreateProjectEnvProjects2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProjectEnvProjects2) GetContentHint() *CreateProjectEnvProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProjectEnvProjects2) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectEnvProjects2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProjectEnvProjects2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProjectEnvProjects2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProjectEnvProjects2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProjectEnvProjects2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvProjects2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProjectEnvProjects2) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectEnvProjects2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *CreateProjectEnvProjects2) GetTarget() *CreateProjectEnvProjectsResponse201Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvProjects2) GetType() *CreateProjectEnvProjectsResponse201Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectEnvProjects2) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectEnvProjects2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProjectEnvProjects2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectEnvProjectsResponse201ApplicationJSONType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONTypePostgresDatabase CreateProjectEnvProjectsResponse201ApplicationJSONType = "postgres-database"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONType) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONType {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONType: %v", v)
	}
}

type CreateProjectEnv12 struct {
	StoreID string                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONType `json:"type"`
}

func (o *CreateProjectEnv12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv12) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONType {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONType("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11TypePostgresPassword CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type = "postgres-password"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type: %v", v)
	}
}

type CreateProjectEnv11 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type `json:"type"`
}

func (o *CreateProjectEnv11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv11) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint11Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10TypePostgresHost CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type = "postgres-host"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type: %v", v)
	}
}

type CreateProjectEnv10 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type `json:"type"`
}

func (o *CreateProjectEnv10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv10) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint10Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9TypePostgresUser CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type = "postgres-user"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type: %v", v)
	}
}

type CreateProjectEnv9 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type `json:"type"`
}

func (o *CreateProjectEnv9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv9) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint9Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8TypePostgresPrismaURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type = "postgres-prisma-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type: %v", v)
	}
}

type CreateProjectEnv8 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type `json:"type"`
}

func (o *CreateProjectEnv8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv8) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint8Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7TypePostgresURLNonPooling CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type = "postgres-url-non-pooling"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type: %v", v)
	}
}

type CreateProjectEnv7 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type `json:"type"`
}

func (o *CreateProjectEnv7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv7) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint7Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6TypePostgresURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type = "postgres-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type: %v", v)
	}
}

type CreateProjectEnv6 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type `json:"type"`
}

func (o *CreateProjectEnv6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv6) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint6Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5TypeBlobReadWriteToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type = "blob-read-write-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type: %v", v)
	}
}

type CreateProjectEnv5 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type `json:"type"`
}

func (o *CreateProjectEnv5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv5) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHint5Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintTypeRedisRestAPIReadOnlyToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType = "redis-rest-api-read-only-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType: %v", v)
	}
}

type CreateProjectEnv4 struct {
	StoreID string                                                                                `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType `json:"type"`
}

func (o *CreateProjectEnv4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv4) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1ContentHintType("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1TypeRedisRestAPIToken CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type = "redis-rest-api-token"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type: %v", v)
	}
}

type CreateProjectEnv3 struct {
	StoreID string                                                                     `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type `json:"type"`
}

func (o *CreateProjectEnv3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnv3) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreated1Type("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedTypeRedisRestAPIURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType = "redis-rest-api-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType: %v", v)
	}
}

type CreateProjectEnvProjectsResponse2 struct {
	StoreID string                                                                    `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType `json:"type"`
}

func (o *CreateProjectEnvProjectsResponse2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjectsResponse2) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyCreatedType("")
	}
	return o.Type
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyTypeRedisURL CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType = "redis-url"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateProjectEnvProjectsResponse1 struct {
	StoreID string                                                             `json:"storeId"`
	Type    CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType `json:"type"`
}

func (o *CreateProjectEnvProjectsResponse1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvProjectsResponse1) GetType() CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type CreateProjectEnvContentHintType string

const (
	CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse1 CreateProjectEnvContentHintType = "createProjectEnv_projects_response_1"
	CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse2 CreateProjectEnvContentHintType = "createProjectEnv_projects_response_2"
	CreateProjectEnvContentHintTypeCreateProjectEnv3                 CreateProjectEnvContentHintType = "createProjectEnv_3"
	CreateProjectEnvContentHintTypeCreateProjectEnv4                 CreateProjectEnvContentHintType = "createProjectEnv_4"
	CreateProjectEnvContentHintTypeCreateProjectEnv5                 CreateProjectEnvContentHintType = "createProjectEnv_5"
	CreateProjectEnvContentHintTypeCreateProjectEnv6                 CreateProjectEnvContentHintType = "createProjectEnv_6"
	CreateProjectEnvContentHintTypeCreateProjectEnv7                 CreateProjectEnvContentHintType = "createProjectEnv_7"
	CreateProjectEnvContentHintTypeCreateProjectEnv8                 CreateProjectEnvContentHintType = "createProjectEnv_8"
	CreateProjectEnvContentHintTypeCreateProjectEnv9                 CreateProjectEnvContentHintType = "createProjectEnv_9"
	CreateProjectEnvContentHintTypeCreateProjectEnv10                CreateProjectEnvContentHintType = "createProjectEnv_10"
	CreateProjectEnvContentHintTypeCreateProjectEnv11                CreateProjectEnvContentHintType = "createProjectEnv_11"
	CreateProjectEnvContentHintTypeCreateProjectEnv12                CreateProjectEnvContentHintType = "createProjectEnv_12"
)

type CreateProjectEnvContentHint struct {
	CreateProjectEnvProjectsResponse1 *CreateProjectEnvProjectsResponse1
	CreateProjectEnvProjectsResponse2 *CreateProjectEnvProjectsResponse2
	CreateProjectEnv3                 *CreateProjectEnv3
	CreateProjectEnv4                 *CreateProjectEnv4
	CreateProjectEnv5                 *CreateProjectEnv5
	CreateProjectEnv6                 *CreateProjectEnv6
	CreateProjectEnv7                 *CreateProjectEnv7
	CreateProjectEnv8                 *CreateProjectEnv8
	CreateProjectEnv9                 *CreateProjectEnv9
	CreateProjectEnv10                *CreateProjectEnv10
	CreateProjectEnv11                *CreateProjectEnv11
	CreateProjectEnv12                *CreateProjectEnv12

	Type CreateProjectEnvContentHintType
}

func CreateCreateProjectEnvContentHintCreateProjectEnvProjectsResponse1(createProjectEnvProjectsResponse1 CreateProjectEnvProjectsResponse1) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse1

	return CreateProjectEnvContentHint{
		CreateProjectEnvProjectsResponse1: &createProjectEnvProjectsResponse1,
		Type:                              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnvProjectsResponse2(createProjectEnvProjectsResponse2 CreateProjectEnvProjectsResponse2) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse2

	return CreateProjectEnvContentHint{
		CreateProjectEnvProjectsResponse2: &createProjectEnvProjectsResponse2,
		Type:                              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv3(createProjectEnv3 CreateProjectEnv3) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv3

	return CreateProjectEnvContentHint{
		CreateProjectEnv3: &createProjectEnv3,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv4(createProjectEnv4 CreateProjectEnv4) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv4

	return CreateProjectEnvContentHint{
		CreateProjectEnv4: &createProjectEnv4,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv5(createProjectEnv5 CreateProjectEnv5) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv5

	return CreateProjectEnvContentHint{
		CreateProjectEnv5: &createProjectEnv5,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv6(createProjectEnv6 CreateProjectEnv6) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv6

	return CreateProjectEnvContentHint{
		CreateProjectEnv6: &createProjectEnv6,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv7(createProjectEnv7 CreateProjectEnv7) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv7

	return CreateProjectEnvContentHint{
		CreateProjectEnv7: &createProjectEnv7,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv8(createProjectEnv8 CreateProjectEnv8) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv8

	return CreateProjectEnvContentHint{
		CreateProjectEnv8: &createProjectEnv8,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv9(createProjectEnv9 CreateProjectEnv9) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv9

	return CreateProjectEnvContentHint{
		CreateProjectEnv9: &createProjectEnv9,
		Type:              typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv10(createProjectEnv10 CreateProjectEnv10) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv10

	return CreateProjectEnvContentHint{
		CreateProjectEnv10: &createProjectEnv10,
		Type:               typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv11(createProjectEnv11 CreateProjectEnv11) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv11

	return CreateProjectEnvContentHint{
		CreateProjectEnv11: &createProjectEnv11,
		Type:               typ,
	}
}

func CreateCreateProjectEnvContentHintCreateProjectEnv12(createProjectEnv12 CreateProjectEnv12) CreateProjectEnvContentHint {
	typ := CreateProjectEnvContentHintTypeCreateProjectEnv12

	return CreateProjectEnvContentHint{
		CreateProjectEnv12: &createProjectEnv12,
		Type:               typ,
	}
}

func (u *CreateProjectEnvContentHint) UnmarshalJSON(data []byte) error {

	createProjectEnvProjectsResponse1 := new(CreateProjectEnvProjectsResponse1)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse1, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse1 = createProjectEnvProjectsResponse1
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse1
		return nil
	}

	createProjectEnvProjectsResponse2 := new(CreateProjectEnvProjectsResponse2)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse2, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse2 = createProjectEnvProjectsResponse2
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnvProjectsResponse2
		return nil
	}

	createProjectEnv3 := new(CreateProjectEnv3)
	if err := utils.UnmarshalJSON(data, &createProjectEnv3, "", true, true); err == nil {
		u.CreateProjectEnv3 = createProjectEnv3
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv3
		return nil
	}

	createProjectEnv4 := new(CreateProjectEnv4)
	if err := utils.UnmarshalJSON(data, &createProjectEnv4, "", true, true); err == nil {
		u.CreateProjectEnv4 = createProjectEnv4
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv4
		return nil
	}

	createProjectEnv5 := new(CreateProjectEnv5)
	if err := utils.UnmarshalJSON(data, &createProjectEnv5, "", true, true); err == nil {
		u.CreateProjectEnv5 = createProjectEnv5
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv5
		return nil
	}

	createProjectEnv6 := new(CreateProjectEnv6)
	if err := utils.UnmarshalJSON(data, &createProjectEnv6, "", true, true); err == nil {
		u.CreateProjectEnv6 = createProjectEnv6
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv6
		return nil
	}

	createProjectEnv7 := new(CreateProjectEnv7)
	if err := utils.UnmarshalJSON(data, &createProjectEnv7, "", true, true); err == nil {
		u.CreateProjectEnv7 = createProjectEnv7
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv7
		return nil
	}

	createProjectEnv8 := new(CreateProjectEnv8)
	if err := utils.UnmarshalJSON(data, &createProjectEnv8, "", true, true); err == nil {
		u.CreateProjectEnv8 = createProjectEnv8
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv8
		return nil
	}

	createProjectEnv9 := new(CreateProjectEnv9)
	if err := utils.UnmarshalJSON(data, &createProjectEnv9, "", true, true); err == nil {
		u.CreateProjectEnv9 = createProjectEnv9
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv9
		return nil
	}

	createProjectEnv10 := new(CreateProjectEnv10)
	if err := utils.UnmarshalJSON(data, &createProjectEnv10, "", true, true); err == nil {
		u.CreateProjectEnv10 = createProjectEnv10
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv10
		return nil
	}

	createProjectEnv11 := new(CreateProjectEnv11)
	if err := utils.UnmarshalJSON(data, &createProjectEnv11, "", true, true); err == nil {
		u.CreateProjectEnv11 = createProjectEnv11
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv11
		return nil
	}

	createProjectEnv12 := new(CreateProjectEnv12)
	if err := utils.UnmarshalJSON(data, &createProjectEnv12, "", true, true); err == nil {
		u.CreateProjectEnv12 = createProjectEnv12
		u.Type = CreateProjectEnvContentHintTypeCreateProjectEnv12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvProjectsResponse1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse1, "", true)
	}

	if u.CreateProjectEnvProjectsResponse2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse2, "", true)
	}

	if u.CreateProjectEnv3 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv3, "", true)
	}

	if u.CreateProjectEnv4 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv4, "", true)
	}

	if u.CreateProjectEnv5 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv5, "", true)
	}

	if u.CreateProjectEnv6 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv6, "", true)
	}

	if u.CreateProjectEnv7 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv7, "", true)
	}

	if u.CreateProjectEnv8 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv8, "", true)
	}

	if u.CreateProjectEnv9 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv9, "", true)
	}

	if u.CreateProjectEnv10 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv10, "", true)
	}

	if u.CreateProjectEnv11 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv11, "", true)
	}

	if u.CreateProjectEnv12 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponse2012 string

const (
	CreateProjectEnvProjectsResponse2012Production  CreateProjectEnvProjectsResponse2012 = "production"
	CreateProjectEnvProjectsResponse2012Preview     CreateProjectEnvProjectsResponse2012 = "preview"
	CreateProjectEnvProjectsResponse2012Development CreateProjectEnvProjectsResponse2012 = "development"
)

func (e CreateProjectEnvProjectsResponse2012) ToPointer() *CreateProjectEnvProjectsResponse2012 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse2012) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse2012(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse2012: %v", v)
	}
}

type CreateProjectEnvProjectsResponse2011 string

const (
	CreateProjectEnvProjectsResponse2011Production  CreateProjectEnvProjectsResponse2011 = "production"
	CreateProjectEnvProjectsResponse2011Preview     CreateProjectEnvProjectsResponse2011 = "preview"
	CreateProjectEnvProjectsResponse2011Development CreateProjectEnvProjectsResponse2011 = "development"
)

func (e CreateProjectEnvProjectsResponse2011) ToPointer() *CreateProjectEnvProjectsResponse2011 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse2011) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse2011(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse2011: %v", v)
	}
}

type CreateProjectEnvProjectsResponseTargetType string

const (
	CreateProjectEnvProjectsResponseTargetTypeArrayOfCreateProjectEnvProjectsResponse2011 CreateProjectEnvProjectsResponseTargetType = "array_Of_createProjectEnv_projects_response_201_1"
	CreateProjectEnvProjectsResponseTargetTypeCreateProjectEnvProjectsResponse2012        CreateProjectEnvProjectsResponseTargetType = "createProjectEnv_projects_response_201_2"
)

type CreateProjectEnvProjectsResponseTarget struct {
	ArrayOfCreateProjectEnvProjectsResponse2011 []CreateProjectEnvProjectsResponse2011
	CreateProjectEnvProjectsResponse2012        *CreateProjectEnvProjectsResponse2012

	Type CreateProjectEnvProjectsResponseTargetType
}

func CreateCreateProjectEnvProjectsResponseTargetArrayOfCreateProjectEnvProjectsResponse2011(arrayOfCreateProjectEnvProjectsResponse2011 []CreateProjectEnvProjectsResponse2011) CreateProjectEnvProjectsResponseTarget {
	typ := CreateProjectEnvProjectsResponseTargetTypeArrayOfCreateProjectEnvProjectsResponse2011

	return CreateProjectEnvProjectsResponseTarget{
		ArrayOfCreateProjectEnvProjectsResponse2011: arrayOfCreateProjectEnvProjectsResponse2011,
		Type: typ,
	}
}

func CreateCreateProjectEnvProjectsResponseTargetCreateProjectEnvProjectsResponse2012(createProjectEnvProjectsResponse2012 CreateProjectEnvProjectsResponse2012) CreateProjectEnvProjectsResponseTarget {
	typ := CreateProjectEnvProjectsResponseTargetTypeCreateProjectEnvProjectsResponse2012

	return CreateProjectEnvProjectsResponseTarget{
		CreateProjectEnvProjectsResponse2012: &createProjectEnvProjectsResponse2012,
		Type:                                 typ,
	}
}

func (u *CreateProjectEnvProjectsResponseTarget) UnmarshalJSON(data []byte) error {

	arrayOfCreateProjectEnvProjectsResponse2011 := []CreateProjectEnvProjectsResponse2011{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvProjectsResponse2011, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvProjectsResponse2011 = arrayOfCreateProjectEnvProjectsResponse2011
		u.Type = CreateProjectEnvProjectsResponseTargetTypeArrayOfCreateProjectEnvProjectsResponse2011
		return nil
	}

	createProjectEnvProjectsResponse2012 := new(CreateProjectEnvProjectsResponse2012)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse2012, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse2012 = createProjectEnvProjectsResponse2012
		u.Type = CreateProjectEnvProjectsResponseTargetTypeCreateProjectEnvProjectsResponse2012
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvProjectsResponseTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectEnvProjectsResponse2011 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvProjectsResponse2011, "", true)
	}

	if u.CreateProjectEnvProjectsResponse2012 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse2012, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponseType string

const (
	CreateProjectEnvProjectsResponseTypeSystem    CreateProjectEnvProjectsResponseType = "system"
	CreateProjectEnvProjectsResponseTypeSecret    CreateProjectEnvProjectsResponseType = "secret"
	CreateProjectEnvProjectsResponseTypeEncrypted CreateProjectEnvProjectsResponseType = "encrypted"
	CreateProjectEnvProjectsResponseTypePlain     CreateProjectEnvProjectsResponseType = "plain"
	CreateProjectEnvProjectsResponseTypeSensitive CreateProjectEnvProjectsResponseType = "sensitive"
)

func (e CreateProjectEnvProjectsResponseType) ToPointer() *CreateProjectEnvProjectsResponseType {
	return &e
}

func (e *CreateProjectEnvProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponseType: %v", v)
	}
}

type CreateProjectEnvProjects1 struct {
	ConfigurationID *string                      `json:"configurationId,omitempty"`
	ContentHint     *CreateProjectEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                       `json:"createdAt,omitempty"`
	CreatedBy       *string                      `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                   `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                 `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                 `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                 `json:"gitBranch,omitempty"`
	ID                *string                                 `json:"id,omitempty"`
	Key               *string                                 `json:"key,omitempty"`
	System            *bool                                   `json:"system,omitempty"`
	Target            *CreateProjectEnvProjectsResponseTarget `json:"target,omitempty"`
	Type              *CreateProjectEnvProjectsResponseType   `json:"type,omitempty"`
	UpdatedAt         *int64                                  `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                 `json:"updatedBy,omitempty"`
	Value             *string                                 `json:"value,omitempty"`
}

func (o *CreateProjectEnvProjects1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProjectEnvProjects1) GetContentHint() *CreateProjectEnvContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProjectEnvProjects1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectEnvProjects1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProjectEnvProjects1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProjectEnvProjects1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProjectEnvProjects1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProjectEnvProjects1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvProjects1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProjectEnvProjects1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectEnvProjects1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *CreateProjectEnvProjects1) GetTarget() *CreateProjectEnvProjectsResponseTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvProjects1) GetType() *CreateProjectEnvProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectEnvProjects1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectEnvProjects1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProjectEnvProjects1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreatedType string

const (
	CreatedTypeCreateProjectEnvProjects1        CreatedType = "createProjectEnv_projects_1"
	CreatedTypeArrayOfCreateProjectEnvProjects2 CreatedType = "array_Of_createProjectEnv_projects_2"
)

type Created struct {
	CreateProjectEnvProjects1        *CreateProjectEnvProjects1
	ArrayOfCreateProjectEnvProjects2 []CreateProjectEnvProjects2

	Type CreatedType
}

func CreateCreatedCreateProjectEnvProjects1(createProjectEnvProjects1 CreateProjectEnvProjects1) Created {
	typ := CreatedTypeCreateProjectEnvProjects1

	return Created{
		CreateProjectEnvProjects1: &createProjectEnvProjects1,
		Type:                      typ,
	}
}

func CreateCreatedArrayOfCreateProjectEnvProjects2(arrayOfCreateProjectEnvProjects2 []CreateProjectEnvProjects2) Created {
	typ := CreatedTypeArrayOfCreateProjectEnvProjects2

	return Created{
		ArrayOfCreateProjectEnvProjects2: arrayOfCreateProjectEnvProjects2,
		Type:                             typ,
	}
}

func (u *Created) UnmarshalJSON(data []byte) error {

	createProjectEnvProjects1 := new(CreateProjectEnvProjects1)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjects1, "", true, true); err == nil {
		u.CreateProjectEnvProjects1 = createProjectEnvProjects1
		u.Type = CreatedTypeCreateProjectEnvProjects1
		return nil
	}

	arrayOfCreateProjectEnvProjects2 := []CreateProjectEnvProjects2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvProjects2, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvProjects2 = arrayOfCreateProjectEnvProjects2
		u.Type = CreatedTypeArrayOfCreateProjectEnvProjects2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Created) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvProjects1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjects1, "", true)
	}

	if u.ArrayOfCreateProjectEnvProjects2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2Production  CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 = "production"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2Preview     CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 = "preview"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2Development CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 = "development"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1Production  CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 = "production"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1Preview     CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 = "preview"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1Development CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 = "development"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1: %v", v)
	}
}

type CreateProjectEnvProjectsResponse201ApplicationJSONTargetType string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 CreateProjectEnvProjectsResponse201ApplicationJSONTargetType = "array_Of_createProjectEnv_projects_response_201_ApplicationJSON_responseBody_failed_1"
	CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2        CreateProjectEnvProjectsResponse201ApplicationJSONTargetType = "createProjectEnv_projects_response_201_ApplicationJSON_responseBody_failed_2"
)

type CreateProjectEnvProjectsResponse201ApplicationJSONTarget struct {
	ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2        *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2

	Type CreateProjectEnvProjectsResponse201ApplicationJSONTargetType
}

func CreateCreateProjectEnvProjectsResponse201ApplicationJSONTargetArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1(arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1) CreateProjectEnvProjectsResponse201ApplicationJSONTarget {
	typ := CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1

	return CreateProjectEnvProjectsResponse201ApplicationJSONTarget{
		ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1: arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1,
		Type: typ,
	}
}

func CreateCreateProjectEnvProjectsResponse201ApplicationJSONTargetCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2(createProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2) CreateProjectEnvProjectsResponse201ApplicationJSONTarget {
	typ := CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2

	return CreateProjectEnvProjectsResponse201ApplicationJSONTarget{
		CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2: &createProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2,
		Type: typ,
	}
}

func (u *CreateProjectEnvProjectsResponse201ApplicationJSONTarget) UnmarshalJSON(data []byte) error {

	arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 := []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 = arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1
		u.Type = CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1
		return nil
	}

	createProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 := new(CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2)
	if err := utils.UnmarshalJSON(data, &createProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2, "", true, true); err == nil {
		u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 = createProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2
		u.Type = CreateProjectEnvProjectsResponse201ApplicationJSONTargetTypeCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateProjectEnvProjectsResponse201ApplicationJSONTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed1, "", true)
	}

	if u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailed2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 string

const (
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2Production  CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 = "production"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2Preview     CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 = "preview"
	CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2Development CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 = "development"
)

func (e CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2) ToPointer() *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 {
	return &e
}

func (e *CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2: %v", v)
	}
}

type ValueType string

const (
	ValueTypeStr                                                                               ValueType = "str"
	ValueTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 ValueType = "array_Of_createProjectEnv_projects_response_201_ApplicationJSON_responseBody_failed_error_2"
)

type Value struct {
	Str                                                                               *string
	ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2

	Type ValueType
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2(arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2) Value {
	typ := ValueTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2

	return Value{
		ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2: arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2,
		Type: typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ValueTypeStr
		return nil
	}

	arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 := []CreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 = arrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2
		u.Type = ValueTypeArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvProjectsResponse201ApplicationJSONResponseBodyFailedError2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateProjectEnvError struct {
	Action    *string                                                   `json:"action,omitempty"`
	Code      string                                                    `json:"code"`
	EnvVarID  *string                                                   `json:"envVarId,omitempty"`
	EnvVarKey *string                                                   `json:"envVarKey,omitempty"`
	GitBranch *string                                                   `json:"gitBranch,omitempty"`
	Key       *string                                                   `json:"key,omitempty"`
	Link      *string                                                   `json:"link,omitempty"`
	Message   string                                                    `json:"message"`
	Project   *string                                                   `json:"project,omitempty"`
	Target    *CreateProjectEnvProjectsResponse201ApplicationJSONTarget `json:"target,omitempty"`
	Value     *Value                                                    `json:"value,omitempty"`
}

func (o *CreateProjectEnvError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateProjectEnvError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectEnvError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *CreateProjectEnvError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *CreateProjectEnvError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectEnvError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectEnvError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateProjectEnvError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateProjectEnvError) GetTarget() *CreateProjectEnvProjectsResponse201ApplicationJSONTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvError) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type Failed struct {
	Error CreateProjectEnvError `json:"error"`
}

func (o *Failed) GetError() CreateProjectEnvError {
	if o == nil {
		return CreateProjectEnvError{}
	}
	return o.Error
}

// CreateProjectEnvResponseBody - The environment variable was created successfully
type CreateProjectEnvResponseBody struct {
	Created Created  `json:"created"`
	Failed  []Failed `json:"failed"`
}

func (o *CreateProjectEnvResponseBody) GetCreated() Created {
	if o == nil {
		return Created{}
	}
	return o.Created
}

func (o *CreateProjectEnvResponseBody) GetFailed() []Failed {
	if o == nil {
		return []Failed{}
	}
	return o.Failed
}

type CreateProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was created successfully
	Object *CreateProjectEnvResponseBody
}

func (o *CreateProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateProjectEnvResponse) GetObject() *CreateProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
