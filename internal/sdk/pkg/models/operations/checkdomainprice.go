// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CheckDomainPriceSecurity struct {
	BearerToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// CheckDomainPriceType - In which status of the domain the price needs to be checked.
type CheckDomainPriceType string

const (
	CheckDomainPriceTypeNew     CheckDomainPriceType = "new"
	CheckDomainPriceTypeRenewal CheckDomainPriceType = "renewal"
)

func (e CheckDomainPriceType) ToPointer() *CheckDomainPriceType {
	return &e
}

func (e *CheckDomainPriceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "renewal":
		*e = CheckDomainPriceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDomainPriceType: %v", v)
	}
}

type CheckDomainPriceRequest struct {
	// The name of the domain for which the price needs to be checked.
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// In which status of the domain the price needs to be checked.
	Type *CheckDomainPriceType `queryParam:"style=form,explode=true,name=type"`
}

// CheckDomainPrice200ApplicationJSON - Successful response which returns the price of the domain and the period.
type CheckDomainPrice200ApplicationJSON struct {
	// The number of years the domain could be held before paying again.
	Period int64 `json:"period"`
	// The domain price in USD.
	Price int64 `json:"price"`
}

type CheckDomainPriceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response which returns the price of the domain and the period.
	CheckDomainPrice200ApplicationJSONObject *CheckDomainPrice200ApplicationJSON
}
