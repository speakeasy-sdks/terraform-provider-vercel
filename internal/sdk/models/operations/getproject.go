// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

type GetProjectRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *GetProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *GetProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *GetProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *GetProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type GetProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *GetProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *GetProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type GetProjectDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *GetProjectDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetProjectDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetProjectDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type GetProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                 `json:"deploymentId"`
	Definitions  []GetProjectDefinitions `json:"definitions"`
}

func (o *GetProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *GetProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetProjectCrons) GetDefinitions() []GetProjectDefinitions {
	if o == nil {
		return []GetProjectDefinitions{}
	}
	return o.Definitions
}

type GetProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *GetProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *GetProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *GetProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type GetProjectTarget string

const (
	GetProjectTargetProduction  GetProjectTarget = "production"
	GetProjectTargetPreview     GetProjectTarget = "preview"
	GetProjectTargetDevelopment GetProjectTarget = "development"
)

func (e GetProjectTarget) ToPointer() *GetProjectTarget {
	return &e
}
func (e *GetProjectTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectTarget: %v", v)
	}
}

type GetProjectType string

const (
	GetProjectTypeSecret    GetProjectType = "secret"
	GetProjectTypeSystem    GetProjectType = "system"
	GetProjectTypeEncrypted GetProjectType = "encrypted"
	GetProjectTypePlain     GetProjectType = "plain"
	GetProjectTypeSensitive GetProjectType = "sensitive"
)

func (e GetProjectType) ToPointer() *GetProjectType {
	return &e
}
func (e *GetProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectType: %v", v)
	}
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14TypeIntegrationStoreSecret GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = "integration-store-secret"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: %v", v)
	}
}

type GetProjectContentHint14 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectContentHint14) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13TypePostgresURLNoSsl GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = "postgres-url-no-ssl"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: %v", v)
	}
}

type GetProjectContentHint13 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectContentHint13) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12TypePostgresDatabase GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = "postgres-database"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: %v", v)
	}
}

type GetProjectContentHint12 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectContentHint12) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11TypePostgresPassword GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = "postgres-password"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: %v", v)
	}
}

type GetProjectContentHint11 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectContentHint11) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10TypePostgresHost GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = "postgres-host"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: %v", v)
	}
}

type GetProjectContentHint10 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectContentHint10) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9TypePostgresUser GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = "postgres-user"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: %v", v)
	}
}

type GetProjectContentHint9 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *GetProjectContentHint9) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8TypePostgresPrismaURL GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = "postgres-prisma-url"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: %v", v)
	}
}

type GetProjectContentHint8 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *GetProjectContentHint8) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNonPooling GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-non-pooling"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type GetProjectContentHint7 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	StoreID string                                                                     `json:"storeId"`
}

func (o *GetProjectContentHint7) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *GetProjectContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetProjectContentHint6 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                  `json:"storeId"`
}

func (o *GetProjectContentHint6) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetProjectContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200ApplicationJSONType string

const (
	GetProjectContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken GetProjectContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e GetProjectContentHintProjectsResponse200ApplicationJSONType) ToPointer() *GetProjectContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type GetProjectContentHint5 struct {
	Type    GetProjectContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                      `json:"storeId"`
}

func (o *GetProjectContentHint5) GetType() GetProjectContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return GetProjectContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetProjectContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponse200Type string

const (
	GetProjectContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken GetProjectContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e GetProjectContentHintProjectsResponse200Type) ToPointer() *GetProjectContentHintProjectsResponse200Type {
	return &e
}
func (e *GetProjectContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponse200Type: %v", v)
	}
}

type GetProjectContentHint4 struct {
	Type    GetProjectContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *GetProjectContentHint4) GetType() GetProjectContentHintProjectsResponse200Type {
	if o == nil {
		return GetProjectContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *GetProjectContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsResponseType string

const (
	GetProjectContentHintProjectsResponseTypeRedisRestAPIToken GetProjectContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e GetProjectContentHintProjectsResponseType) ToPointer() *GetProjectContentHintProjectsResponseType {
	return &e
}
func (e *GetProjectContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsResponseType: %v", v)
	}
}

type GetProjectContentHint3 struct {
	Type    GetProjectContentHintProjectsResponseType `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *GetProjectContentHint3) GetType() GetProjectContentHintProjectsResponseType {
	if o == nil {
		return GetProjectContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *GetProjectContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintProjectsType string

const (
	GetProjectContentHintProjectsTypeRedisRestAPIURL GetProjectContentHintProjectsType = "redis-rest-api-url"
)

func (e GetProjectContentHintProjectsType) ToPointer() *GetProjectContentHintProjectsType {
	return &e
}
func (e *GetProjectContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintProjectsType: %v", v)
	}
}

type GetProjectContentHint2 struct {
	Type    GetProjectContentHintProjectsType `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *GetProjectContentHint2) GetType() GetProjectContentHintProjectsType {
	if o == nil {
		return GetProjectContentHintProjectsType("")
	}
	return o.Type
}

func (o *GetProjectContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintType string

const (
	GetProjectContentHintTypeRedisURL GetProjectContentHintType = "redis-url"
)

func (e GetProjectContentHintType) ToPointer() *GetProjectContentHintType {
	return &e
}
func (e *GetProjectContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectContentHintType: %v", v)
	}
}

type GetProjectContentHint1 struct {
	Type    GetProjectContentHintType `json:"type"`
	StoreID string                    `json:"storeId"`
}

func (o *GetProjectContentHint1) GetType() GetProjectContentHintType {
	if o == nil {
		return GetProjectContentHintType("")
	}
	return o.Type
}

func (o *GetProjectContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectContentHintUnionType string

const (
	GetProjectContentHintUnionTypeGetProjectContentHint1  GetProjectContentHintUnionType = "getProject_contentHint_1"
	GetProjectContentHintUnionTypeGetProjectContentHint2  GetProjectContentHintUnionType = "getProject_contentHint_2"
	GetProjectContentHintUnionTypeGetProjectContentHint3  GetProjectContentHintUnionType = "getProject_contentHint_3"
	GetProjectContentHintUnionTypeGetProjectContentHint4  GetProjectContentHintUnionType = "getProject_contentHint_4"
	GetProjectContentHintUnionTypeGetProjectContentHint5  GetProjectContentHintUnionType = "getProject_contentHint_5"
	GetProjectContentHintUnionTypeGetProjectContentHint6  GetProjectContentHintUnionType = "getProject_contentHint_6"
	GetProjectContentHintUnionTypeGetProjectContentHint7  GetProjectContentHintUnionType = "getProject_contentHint_7"
	GetProjectContentHintUnionTypeGetProjectContentHint8  GetProjectContentHintUnionType = "getProject_contentHint_8"
	GetProjectContentHintUnionTypeGetProjectContentHint9  GetProjectContentHintUnionType = "getProject_contentHint_9"
	GetProjectContentHintUnionTypeGetProjectContentHint10 GetProjectContentHintUnionType = "getProject_contentHint_10"
	GetProjectContentHintUnionTypeGetProjectContentHint11 GetProjectContentHintUnionType = "getProject_contentHint_11"
	GetProjectContentHintUnionTypeGetProjectContentHint12 GetProjectContentHintUnionType = "getProject_contentHint_12"
	GetProjectContentHintUnionTypeGetProjectContentHint13 GetProjectContentHintUnionType = "getProject_contentHint_13"
	GetProjectContentHintUnionTypeGetProjectContentHint14 GetProjectContentHintUnionType = "getProject_contentHint_14"
)

type GetProjectContentHint struct {
	GetProjectContentHint1  *GetProjectContentHint1
	GetProjectContentHint2  *GetProjectContentHint2
	GetProjectContentHint3  *GetProjectContentHint3
	GetProjectContentHint4  *GetProjectContentHint4
	GetProjectContentHint5  *GetProjectContentHint5
	GetProjectContentHint6  *GetProjectContentHint6
	GetProjectContentHint7  *GetProjectContentHint7
	GetProjectContentHint8  *GetProjectContentHint8
	GetProjectContentHint9  *GetProjectContentHint9
	GetProjectContentHint10 *GetProjectContentHint10
	GetProjectContentHint11 *GetProjectContentHint11
	GetProjectContentHint12 *GetProjectContentHint12
	GetProjectContentHint13 *GetProjectContentHint13
	GetProjectContentHint14 *GetProjectContentHint14

	Type GetProjectContentHintUnionType
}

func CreateGetProjectContentHintGetProjectContentHint1(getProjectContentHint1 GetProjectContentHint1) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint1

	return GetProjectContentHint{
		GetProjectContentHint1: &getProjectContentHint1,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint2(getProjectContentHint2 GetProjectContentHint2) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint2

	return GetProjectContentHint{
		GetProjectContentHint2: &getProjectContentHint2,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint3(getProjectContentHint3 GetProjectContentHint3) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint3

	return GetProjectContentHint{
		GetProjectContentHint3: &getProjectContentHint3,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint4(getProjectContentHint4 GetProjectContentHint4) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint4

	return GetProjectContentHint{
		GetProjectContentHint4: &getProjectContentHint4,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint5(getProjectContentHint5 GetProjectContentHint5) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint5

	return GetProjectContentHint{
		GetProjectContentHint5: &getProjectContentHint5,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint6(getProjectContentHint6 GetProjectContentHint6) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint6

	return GetProjectContentHint{
		GetProjectContentHint6: &getProjectContentHint6,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint7(getProjectContentHint7 GetProjectContentHint7) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint7

	return GetProjectContentHint{
		GetProjectContentHint7: &getProjectContentHint7,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint8(getProjectContentHint8 GetProjectContentHint8) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint8

	return GetProjectContentHint{
		GetProjectContentHint8: &getProjectContentHint8,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint9(getProjectContentHint9 GetProjectContentHint9) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint9

	return GetProjectContentHint{
		GetProjectContentHint9: &getProjectContentHint9,
		Type:                   typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint10(getProjectContentHint10 GetProjectContentHint10) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint10

	return GetProjectContentHint{
		GetProjectContentHint10: &getProjectContentHint10,
		Type:                    typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint11(getProjectContentHint11 GetProjectContentHint11) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint11

	return GetProjectContentHint{
		GetProjectContentHint11: &getProjectContentHint11,
		Type:                    typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint12(getProjectContentHint12 GetProjectContentHint12) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint12

	return GetProjectContentHint{
		GetProjectContentHint12: &getProjectContentHint12,
		Type:                    typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint13(getProjectContentHint13 GetProjectContentHint13) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint13

	return GetProjectContentHint{
		GetProjectContentHint13: &getProjectContentHint13,
		Type:                    typ,
	}
}

func CreateGetProjectContentHintGetProjectContentHint14(getProjectContentHint14 GetProjectContentHint14) GetProjectContentHint {
	typ := GetProjectContentHintUnionTypeGetProjectContentHint14

	return GetProjectContentHint{
		GetProjectContentHint14: &getProjectContentHint14,
		Type:                    typ,
	}
}

func (u *GetProjectContentHint) UnmarshalJSON(data []byte) error {

	var getProjectContentHint1 GetProjectContentHint1 = GetProjectContentHint1{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint1, "", true, true); err == nil {
		u.GetProjectContentHint1 = &getProjectContentHint1
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint1
		return nil
	}

	var getProjectContentHint2 GetProjectContentHint2 = GetProjectContentHint2{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint2, "", true, true); err == nil {
		u.GetProjectContentHint2 = &getProjectContentHint2
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint2
		return nil
	}

	var getProjectContentHint3 GetProjectContentHint3 = GetProjectContentHint3{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint3, "", true, true); err == nil {
		u.GetProjectContentHint3 = &getProjectContentHint3
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint3
		return nil
	}

	var getProjectContentHint4 GetProjectContentHint4 = GetProjectContentHint4{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint4, "", true, true); err == nil {
		u.GetProjectContentHint4 = &getProjectContentHint4
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint4
		return nil
	}

	var getProjectContentHint5 GetProjectContentHint5 = GetProjectContentHint5{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint5, "", true, true); err == nil {
		u.GetProjectContentHint5 = &getProjectContentHint5
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint5
		return nil
	}

	var getProjectContentHint6 GetProjectContentHint6 = GetProjectContentHint6{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint6, "", true, true); err == nil {
		u.GetProjectContentHint6 = &getProjectContentHint6
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint6
		return nil
	}

	var getProjectContentHint7 GetProjectContentHint7 = GetProjectContentHint7{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint7, "", true, true); err == nil {
		u.GetProjectContentHint7 = &getProjectContentHint7
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint7
		return nil
	}

	var getProjectContentHint8 GetProjectContentHint8 = GetProjectContentHint8{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint8, "", true, true); err == nil {
		u.GetProjectContentHint8 = &getProjectContentHint8
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint8
		return nil
	}

	var getProjectContentHint9 GetProjectContentHint9 = GetProjectContentHint9{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint9, "", true, true); err == nil {
		u.GetProjectContentHint9 = &getProjectContentHint9
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint9
		return nil
	}

	var getProjectContentHint10 GetProjectContentHint10 = GetProjectContentHint10{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint10, "", true, true); err == nil {
		u.GetProjectContentHint10 = &getProjectContentHint10
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint10
		return nil
	}

	var getProjectContentHint11 GetProjectContentHint11 = GetProjectContentHint11{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint11, "", true, true); err == nil {
		u.GetProjectContentHint11 = &getProjectContentHint11
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint11
		return nil
	}

	var getProjectContentHint12 GetProjectContentHint12 = GetProjectContentHint12{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint12, "", true, true); err == nil {
		u.GetProjectContentHint12 = &getProjectContentHint12
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint12
		return nil
	}

	var getProjectContentHint13 GetProjectContentHint13 = GetProjectContentHint13{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint13, "", true, true); err == nil {
		u.GetProjectContentHint13 = &getProjectContentHint13
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint13
		return nil
	}

	var getProjectContentHint14 GetProjectContentHint14 = GetProjectContentHint14{}
	if err := utils.UnmarshalJSON(data, &getProjectContentHint14, "", true, true); err == nil {
		u.GetProjectContentHint14 = &getProjectContentHint14
		u.Type = GetProjectContentHintUnionTypeGetProjectContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectContentHint", string(data))
}

func (u GetProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjectContentHint1 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint1, "", true)
	}

	if u.GetProjectContentHint2 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint2, "", true)
	}

	if u.GetProjectContentHint3 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint3, "", true)
	}

	if u.GetProjectContentHint4 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint4, "", true)
	}

	if u.GetProjectContentHint5 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint5, "", true)
	}

	if u.GetProjectContentHint6 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint6, "", true)
	}

	if u.GetProjectContentHint7 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint7, "", true)
	}

	if u.GetProjectContentHint8 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint8, "", true)
	}

	if u.GetProjectContentHint9 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint9, "", true)
	}

	if u.GetProjectContentHint10 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint10, "", true)
	}

	if u.GetProjectContentHint11 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint11, "", true)
	}

	if u.GetProjectContentHint12 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint12, "", true)
	}

	if u.GetProjectContentHint13 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint13, "", true)
	}

	if u.GetProjectContentHint14 != nil {
		return utils.MarshalJSON(u.GetProjectContentHint14, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectContentHint: all fields are null")
}

type GetProjectProjectsResponse200Type string

const (
	GetProjectProjectsResponse200TypeFlagsSecret GetProjectProjectsResponse200Type = "flags-secret"
)

func (e GetProjectProjectsResponse200Type) ToPointer() *GetProjectProjectsResponse200Type {
	return &e
}
func (e *GetProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsResponse200Type: %v", v)
	}
}

// GetProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectInternalContentHint struct {
	Type GetProjectProjectsResponse200Type `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectInternalContentHint) GetType() GetProjectProjectsResponse200Type {
	if o == nil {
		return GetProjectProjectsResponse200Type("")
	}
	return o.Type
}

func (o *GetProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnv struct {
	Target            []GetProjectTarget     `json:"target,omitempty"`
	Type              GetProjectType         `json:"type"`
	ID                *string                `json:"id,omitempty"`
	Key               string                 `json:"key"`
	Value             string                 `json:"value"`
	ConfigurationID   *string                `json:"configurationId,omitempty"`
	CreatedAt         *float64               `json:"createdAt,omitempty"`
	UpdatedAt         *float64               `json:"updatedAt,omitempty"`
	CreatedBy         *string                `json:"createdBy,omitempty"`
	UpdatedBy         *string                `json:"updatedBy,omitempty"`
	GitBranch         *string                `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *GetProjectInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` is decrypted.
	Decrypted           *bool   `json:"decrypted,omitempty"`
	Comment             *string `json:"comment,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
}

func (o *GetProjectEnv) GetTarget() []GetProjectTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnv) GetType() GetProjectType {
	if o == nil {
		return GetProjectType("")
	}
	return o.Type
}

func (o *GetProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnv) GetContentHint() *GetProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnv) GetInternalContentHint() *GetProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnv) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

type GetProjectFramework string

const (
	GetProjectFrameworkBlitzjs        GetProjectFramework = "blitzjs"
	GetProjectFrameworkNextjs         GetProjectFramework = "nextjs"
	GetProjectFrameworkGatsby         GetProjectFramework = "gatsby"
	GetProjectFrameworkRemix          GetProjectFramework = "remix"
	GetProjectFrameworkAstro          GetProjectFramework = "astro"
	GetProjectFrameworkHexo           GetProjectFramework = "hexo"
	GetProjectFrameworkEleventy       GetProjectFramework = "eleventy"
	GetProjectFrameworkDocusaurus2    GetProjectFramework = "docusaurus-2"
	GetProjectFrameworkDocusaurus     GetProjectFramework = "docusaurus"
	GetProjectFrameworkPreact         GetProjectFramework = "preact"
	GetProjectFrameworkSolidstart1    GetProjectFramework = "solidstart-1"
	GetProjectFrameworkSolidstart     GetProjectFramework = "solidstart"
	GetProjectFrameworkDojo           GetProjectFramework = "dojo"
	GetProjectFrameworkEmber          GetProjectFramework = "ember"
	GetProjectFrameworkVue            GetProjectFramework = "vue"
	GetProjectFrameworkScully         GetProjectFramework = "scully"
	GetProjectFrameworkIonicAngular   GetProjectFramework = "ionic-angular"
	GetProjectFrameworkAngular        GetProjectFramework = "angular"
	GetProjectFrameworkPolymer        GetProjectFramework = "polymer"
	GetProjectFrameworkSvelte         GetProjectFramework = "svelte"
	GetProjectFrameworkSveltekit      GetProjectFramework = "sveltekit"
	GetProjectFrameworkSveltekit1     GetProjectFramework = "sveltekit-1"
	GetProjectFrameworkIonicReact     GetProjectFramework = "ionic-react"
	GetProjectFrameworkCreateReactApp GetProjectFramework = "create-react-app"
	GetProjectFrameworkGridsome       GetProjectFramework = "gridsome"
	GetProjectFrameworkUmijs          GetProjectFramework = "umijs"
	GetProjectFrameworkSapper         GetProjectFramework = "sapper"
	GetProjectFrameworkSaber          GetProjectFramework = "saber"
	GetProjectFrameworkStencil        GetProjectFramework = "stencil"
	GetProjectFrameworkNuxtjs         GetProjectFramework = "nuxtjs"
	GetProjectFrameworkRedwoodjs      GetProjectFramework = "redwoodjs"
	GetProjectFrameworkHugo           GetProjectFramework = "hugo"
	GetProjectFrameworkJekyll         GetProjectFramework = "jekyll"
	GetProjectFrameworkBrunch         GetProjectFramework = "brunch"
	GetProjectFrameworkMiddleman      GetProjectFramework = "middleman"
	GetProjectFrameworkZola           GetProjectFramework = "zola"
	GetProjectFrameworkHydrogen       GetProjectFramework = "hydrogen"
	GetProjectFrameworkVite           GetProjectFramework = "vite"
	GetProjectFrameworkVitepress      GetProjectFramework = "vitepress"
	GetProjectFrameworkVuepress       GetProjectFramework = "vuepress"
	GetProjectFrameworkParcel         GetProjectFramework = "parcel"
	GetProjectFrameworkSanity         GetProjectFramework = "sanity"
	GetProjectFrameworkStorybook      GetProjectFramework = "storybook"
)

func (e GetProjectFramework) ToPointer() *GetProjectFramework {
	return &e
}
func (e *GetProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectFramework: %v", v)
	}
}

type GetProjectAliasAssignedType string

const (
	GetProjectAliasAssignedTypeNumber  GetProjectAliasAssignedType = "number"
	GetProjectAliasAssignedTypeBoolean GetProjectAliasAssignedType = "boolean"
)

type GetProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type GetProjectAliasAssignedType
}

func CreateGetProjectAliasAssignedNumber(number float64) GetProjectAliasAssigned {
	typ := GetProjectAliasAssignedTypeNumber

	return GetProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetProjectAliasAssignedBoolean(boolean bool) GetProjectAliasAssigned {
	typ := GetProjectAliasAssignedTypeBoolean

	return GetProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectAliasAssigned", string(data))
}

func (u GetProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectAliasAssigned: all fields are null")
}

type GetProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetProjectBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *GetProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *GetProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type GetProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjectPlan string

const (
	GetProjectPlanPro        GetProjectPlan = "pro"
	GetProjectPlanEnterprise GetProjectPlan = "enterprise"
	GetProjectPlanHobby      GetProjectPlan = "hobby"
)

func (e GetProjectPlan) ToPointer() *GetProjectPlan {
	return &e
}
func (e *GetProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = GetProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectPlan: %v", v)
	}
}

type GetProjectReadyState string

const (
	GetProjectReadyStateBuilding     GetProjectReadyState = "BUILDING"
	GetProjectReadyStateError        GetProjectReadyState = "ERROR"
	GetProjectReadyStateInitializing GetProjectReadyState = "INITIALIZING"
	GetProjectReadyStateQueued       GetProjectReadyState = "QUEUED"
	GetProjectReadyStateReady        GetProjectReadyState = "READY"
	GetProjectReadyStateCanceled     GetProjectReadyState = "CANCELED"
)

func (e GetProjectReadyState) ToPointer() *GetProjectReadyState {
	return &e
}
func (e *GetProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectReadyState: %v", v)
	}
}

type GetProjectReadySubstate string

const (
	GetProjectReadySubstateStaged   GetProjectReadySubstate = "STAGED"
	GetProjectReadySubstatePromoted GetProjectReadySubstate = "PROMOTED"
)

func (e GetProjectReadySubstate) ToPointer() *GetProjectReadySubstate {
	return &e
}
func (e *GetProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectReadySubstate: %v", v)
	}
}

type GetProjectProjectsType string

const (
	GetProjectProjectsTypeLambdas GetProjectProjectsType = "LAMBDAS"
)

func (e GetProjectProjectsType) ToPointer() *GetProjectProjectsType {
	return &e
}
func (e *GetProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsType: %v", v)
	}
}

type GetProjectChecksConclusion string

const (
	GetProjectChecksConclusionSucceeded GetProjectChecksConclusion = "succeeded"
	GetProjectChecksConclusionFailed    GetProjectChecksConclusion = "failed"
	GetProjectChecksConclusionSkipped   GetProjectChecksConclusion = "skipped"
	GetProjectChecksConclusionCanceled  GetProjectChecksConclusion = "canceled"
)

func (e GetProjectChecksConclusion) ToPointer() *GetProjectChecksConclusion {
	return &e
}
func (e *GetProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectChecksConclusion: %v", v)
	}
}

type GetProjectChecksState string

const (
	GetProjectChecksStateRegistered GetProjectChecksState = "registered"
	GetProjectChecksStateRunning    GetProjectChecksState = "running"
	GetProjectChecksStateCompleted  GetProjectChecksState = "completed"
)

func (e GetProjectChecksState) ToPointer() *GetProjectChecksState {
	return &e
}
func (e *GetProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectChecksState: %v", v)
	}
}

type GetProjectOidcTokenClaimsType string

const (
	GetProjectOidcTokenClaimsTypeStr        GetProjectOidcTokenClaimsType = "str"
	GetProjectOidcTokenClaimsTypeArrayOfStr GetProjectOidcTokenClaimsType = "arrayOfStr"
)

type GetProjectOidcTokenClaims struct {
	Str        *string
	ArrayOfStr []string

	Type GetProjectOidcTokenClaimsType
}

func CreateGetProjectOidcTokenClaimsStr(str string) GetProjectOidcTokenClaims {
	typ := GetProjectOidcTokenClaimsTypeStr

	return GetProjectOidcTokenClaims{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectOidcTokenClaimsArrayOfStr(arrayOfStr []string) GetProjectOidcTokenClaims {
	typ := GetProjectOidcTokenClaimsTypeArrayOfStr

	return GetProjectOidcTokenClaims{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetProjectOidcTokenClaims) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectOidcTokenClaimsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetProjectOidcTokenClaimsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectOidcTokenClaims", string(data))
}

func (u GetProjectOidcTokenClaims) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectOidcTokenClaims: all fields are null")
}

type GetProjectLatestDeployments struct {
	Alias                  []string                    `json:"alias,omitempty"`
	AliasAssigned          *GetProjectAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjectAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                     `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                    `json:"automaticAliases,omitempty"`
	Builds                 []GetProjectBuilds          `json:"builds,omitempty"`
	ConnectBuildsEnabled   *bool                       `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                     `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                     `json:"createdAt"`
	CreatedIn              string                      `json:"createdIn"`
	Creator                *GetProjectCreator          `json:"creator"`
	DeploymentHostname     string                      `json:"deploymentHostname"`
	Name                   string                      `json:"name"`
	Forced                 *bool                       `json:"forced,omitempty"`
	ID                     string                      `json:"id"`
	Meta                   map[string]string           `json:"meta,omitempty"`
	MonorepoManager        *string                     `json:"monorepoManager,omitempty"`
	Plan                   GetProjectPlan              `json:"plan"`
	Private                bool                        `json:"private"`
	ReadyState             GetProjectReadyState        `json:"readyState"`
	ReadySubstate          *GetProjectReadySubstate    `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   GetProjectProjectsType      `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
	ChecksConclusion       *GetProjectChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjectChecksState      `json:"checksState,omitempty"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	BuildingAt             *float64                    `json:"buildingAt,omitempty"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                `json:"previewCommentsEnabled,omitempty"`
	OidcTokenClaims        map[string]GetProjectOidcTokenClaims `json:"oidcTokenClaims,omitempty"`
}

func (o *GetProjectLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjectLatestDeployments) GetAliasAssigned() *GetProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjectLatestDeployments) GetAliasError() *GetProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjectLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjectLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjectLatestDeployments) GetBuilds() []GetProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjectLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjectLatestDeployments) GetCreator() *GetProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjectLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjectLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjectLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjectLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjectLatestDeployments) GetPlan() GetProjectPlan {
	if o == nil {
		return GetProjectPlan("")
	}
	return o.Plan
}

func (o *GetProjectLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjectLatestDeployments) GetReadyState() GetProjectReadyState {
	if o == nil {
		return GetProjectReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjectLatestDeployments) GetReadySubstate() *GetProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjectLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjectLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectLatestDeployments) GetType() GetProjectProjectsType {
	if o == nil {
		return GetProjectProjectsType("")
	}
	return o.Type
}

func (o *GetProjectLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjectLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

func (o *GetProjectLatestDeployments) GetChecksConclusion() *GetProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjectLatestDeployments) GetChecksState() *GetProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjectLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjectLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjectLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjectLatestDeployments) GetOidcTokenClaims() map[string]GetProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

type GetProjectLinkProjectsResponseType string

const (
	GetProjectLinkProjectsResponseTypeBitbucket GetProjectLinkProjectsResponseType = "bitbucket"
)

func (e GetProjectLinkProjectsResponseType) ToPointer() *GetProjectLinkProjectsResponseType {
	return &e
}
func (e *GetProjectLinkProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetProjectLinkProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectLinkProjectsResponseType: %v", v)
	}
}

type GetProjectLinkProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectLinkProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLinkProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectLinkProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectLinkProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectLinkProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectLink3 struct {
	Name             *string                                     `json:"name,omitempty"`
	Slug             *string                                     `json:"slug,omitempty"`
	Owner            *string                                     `json:"owner,omitempty"`
	Type             *GetProjectLinkProjectsResponseType         `json:"type,omitempty"`
	UUID             *string                                     `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                     `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                                    `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectLinkProjectsResponseDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                     `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                    `json:"updatedAt,omitempty"`
	Sourceless       *bool                                       `json:"sourceless,omitempty"`
	ProductionBranch *string                                     `json:"productionBranch,omitempty"`
}

func (o *GetProjectLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjectLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetProjectLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetProjectLink3) GetType() *GetProjectLinkProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *GetProjectLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetProjectLink3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLink3) GetDeployHooks() []GetProjectLinkProjectsResponseDeployHooks {
	if o == nil {
		return []GetProjectLinkProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjectLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectLink3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectLinkProjectsType string

const (
	GetProjectLinkProjectsTypeGitlab GetProjectLinkProjectsType = "gitlab"
)

func (e GetProjectLinkProjectsType) ToPointer() *GetProjectLinkProjectsType {
	return &e
}
func (e *GetProjectLinkProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetProjectLinkProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectLinkProjectsType: %v", v)
	}
}

type GetProjectLinkProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectLinkProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLinkProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectLinkProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectLinkProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectLinkProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectLink2 struct {
	ProjectID                *string                             `json:"projectId,omitempty"`
	ProjectName              *string                             `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                             `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                             `json:"projectNamespace,omitempty"`
	ProjectURL               *string                             `json:"projectUrl,omitempty"`
	Type                     *GetProjectLinkProjectsType         `json:"type,omitempty"`
	CreatedAt                *float64                            `json:"createdAt,omitempty"`
	DeployHooks              []GetProjectLinkProjectsDeployHooks `json:"deployHooks"`
	GitCredentialID          *string                             `json:"gitCredentialId,omitempty"`
	UpdatedAt                *float64                            `json:"updatedAt,omitempty"`
	Sourceless               *bool                               `json:"sourceless,omitempty"`
	ProductionBranch         *string                             `json:"productionBranch,omitempty"`
}

func (o *GetProjectLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjectLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *GetProjectLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *GetProjectLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *GetProjectLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *GetProjectLink2) GetType() *GetProjectLinkProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectLink2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLink2) GetDeployHooks() []GetProjectLinkProjectsDeployHooks {
	if o == nil {
		return []GetProjectLinkProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjectLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectLink2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectLinkType string

const (
	GetProjectLinkTypeGithub GetProjectLinkType = "github"
)

func (e GetProjectLinkType) ToPointer() *GetProjectLinkType {
	return &e
}
func (e *GetProjectLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetProjectLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectLinkType: %v", v)
	}
}

type GetProjectLinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectLinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectLinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectLinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectLinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectLink1 struct {
	Org              *string                     `json:"org,omitempty"`
	Repo             *string                     `json:"repo,omitempty"`
	RepoID           *float64                    `json:"repoId,omitempty"`
	Type             *GetProjectLinkType         `json:"type,omitempty"`
	CreatedAt        *float64                    `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectLinkDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                     `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                    `json:"updatedAt,omitempty"`
	Sourceless       *bool                       `json:"sourceless,omitempty"`
	ProductionBranch *string                     `json:"productionBranch,omitempty"`
}

func (o *GetProjectLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetProjectLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectLink1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectLink1) GetType() *GetProjectLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectLink1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectLink1) GetDeployHooks() []GetProjectLinkDeployHooks {
	if o == nil {
		return []GetProjectLinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *GetProjectLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectLink1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectLinkUnionType string

const (
	GetProjectLinkUnionTypeGetProjectLink1 GetProjectLinkUnionType = "getProject_link_1"
	GetProjectLinkUnionTypeGetProjectLink2 GetProjectLinkUnionType = "getProject_link_2"
	GetProjectLinkUnionTypeGetProjectLink3 GetProjectLinkUnionType = "getProject_link_3"
)

type GetProjectLink struct {
	GetProjectLink1 *GetProjectLink1
	GetProjectLink2 *GetProjectLink2
	GetProjectLink3 *GetProjectLink3

	Type GetProjectLinkUnionType
}

func CreateGetProjectLinkGetProjectLink1(getProjectLink1 GetProjectLink1) GetProjectLink {
	typ := GetProjectLinkUnionTypeGetProjectLink1

	return GetProjectLink{
		GetProjectLink1: &getProjectLink1,
		Type:            typ,
	}
}

func CreateGetProjectLinkGetProjectLink2(getProjectLink2 GetProjectLink2) GetProjectLink {
	typ := GetProjectLinkUnionTypeGetProjectLink2

	return GetProjectLink{
		GetProjectLink2: &getProjectLink2,
		Type:            typ,
	}
}

func CreateGetProjectLinkGetProjectLink3(getProjectLink3 GetProjectLink3) GetProjectLink {
	typ := GetProjectLinkUnionTypeGetProjectLink3

	return GetProjectLink{
		GetProjectLink3: &getProjectLink3,
		Type:            typ,
	}
}

func (u *GetProjectLink) UnmarshalJSON(data []byte) error {

	var getProjectLink1 GetProjectLink1 = GetProjectLink1{}
	if err := utils.UnmarshalJSON(data, &getProjectLink1, "", true, true); err == nil {
		u.GetProjectLink1 = &getProjectLink1
		u.Type = GetProjectLinkUnionTypeGetProjectLink1
		return nil
	}

	var getProjectLink2 GetProjectLink2 = GetProjectLink2{}
	if err := utils.UnmarshalJSON(data, &getProjectLink2, "", true, true); err == nil {
		u.GetProjectLink2 = &getProjectLink2
		u.Type = GetProjectLinkUnionTypeGetProjectLink2
		return nil
	}

	var getProjectLink3 GetProjectLink3 = GetProjectLink3{}
	if err := utils.UnmarshalJSON(data, &getProjectLink3, "", true, true); err == nil {
		u.GetProjectLink3 = &getProjectLink3
		u.Type = GetProjectLinkUnionTypeGetProjectLink3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectLink", string(data))
}

func (u GetProjectLink) MarshalJSON() ([]byte, error) {
	if u.GetProjectLink1 != nil {
		return utils.MarshalJSON(u.GetProjectLink1, "", true)
	}

	if u.GetProjectLink2 != nil {
		return utils.MarshalJSON(u.GetProjectLink2, "", true)
	}

	if u.GetProjectLink3 != nil {
		return utils.MarshalJSON(u.GetProjectLink3, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectLink: all fields are null")
}

type GetProjectNodeVersion string

const (
	GetProjectNodeVersionTwentyX   GetProjectNodeVersion = "20.x"
	GetProjectNodeVersionEighteenX GetProjectNodeVersion = "18.x"
	GetProjectNodeVersionSixteenX  GetProjectNodeVersion = "16.x"
	GetProjectNodeVersionFourteenX GetProjectNodeVersion = "14.x"
	GetProjectNodeVersionTwelveX   GetProjectNodeVersion = "12.x"
	GetProjectNodeVersionTenX      GetProjectNodeVersion = "10.x"
	GetProjectNodeVersionEight10X  GetProjectNodeVersion = "8.10.x"
)

func (e GetProjectNodeVersion) ToPointer() *GetProjectNodeVersion {
	return &e
}
func (e *GetProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = GetProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectNodeVersion: %v", v)
	}
}

type GetProjectPaths struct {
	Value string `json:"value"`
}

func (o *GetProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectOptionsAllowlist struct {
	Paths []GetProjectPaths `json:"paths"`
}

func (o *GetProjectOptionsAllowlist) GetPaths() []GetProjectPaths {
	if o == nil {
		return []GetProjectPaths{}
	}
	return o.Paths
}

type GetProjectPasswordProtection struct {
}

type GetProjectDeploymentType string

const (
	GetProjectDeploymentTypeAll                              GetProjectDeploymentType = "all"
	GetProjectDeploymentTypePreview                          GetProjectDeploymentType = "preview"
	GetProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e GetProjectDeploymentType) ToPointer() *GetProjectDeploymentType {
	return &e
}
func (e *GetProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectDeploymentType: %v", v)
	}
}

type GetProjectSsoProtection struct {
	DeploymentType GetProjectDeploymentType `json:"deploymentType"`
}

func (o *GetProjectSsoProtection) GetDeploymentType() GetProjectDeploymentType {
	if o == nil {
		return GetProjectDeploymentType("")
	}
	return o.DeploymentType
}

type GetProjectTargetsType string

const (
	GetProjectTargetsTypeStr        GetProjectTargetsType = "str"
	GetProjectTargetsTypeArrayOfStr GetProjectTargetsType = "arrayOfStr"
)

type GetProjectTargets struct {
	Str        *string
	ArrayOfStr []string

	Type GetProjectTargetsType
}

func CreateGetProjectTargetsStr(str string) GetProjectTargets {
	typ := GetProjectTargetsTypeStr

	return GetProjectTargets{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectTargetsArrayOfStr(arrayOfStr []string) GetProjectTargets {
	typ := GetProjectTargetsTypeArrayOfStr

	return GetProjectTargets{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetProjectTargets) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectTargetsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetProjectTargetsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectTargets", string(data))
}

func (u GetProjectTargets) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectTargets: all fields are null")
}

type GetProjectPermissions struct {
	AccessGroup                              []shared.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []shared.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationStore                         []shared.ACLAction `json:"integrationStore,omitempty"`
	IntegrationEvent                         []shared.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []shared.ACLAction `json:"integrationResourceSecrets,omitempty"`
	MarketplaceBillingData                   []shared.ACLAction `json:"marketplaceBillingData,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []shared.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []shared.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	Oauth2Connection                         []shared.ACLAction `json:"oauth2Connection,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	Repository                               []shared.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []shared.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []shared.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []shared.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []shared.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	WebAuthn                                 []shared.ACLAction `json:"webAuthn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []shared.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []shared.ACLAction `json:"oauth2Application,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	ProductionAliasProtectionBypass          []shared.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Environments                             []shared.ACLAction `json:"environments,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []shared.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAccessGroup                       []shared.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []shared.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectID                                []shared.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []shared.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []shared.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []shared.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []shared.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	SkewProtection                           []shared.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []shared.ACLAction `json:"sharedEnvVarConnection,omitempty"`
}

func (o *GetProjectPermissions) GetAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *GetProjectPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *GetProjectPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *GetProjectPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *GetProjectPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *GetProjectPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetProjectPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *GetProjectPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *GetProjectPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *GetProjectPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *GetProjectPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *GetProjectPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *GetProjectPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *GetProjectPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *GetProjectPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *GetProjectPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *GetProjectPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *GetProjectPermissions) GetCodeChecks() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *GetProjectPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *GetProjectPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *GetProjectPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *GetProjectPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetProjectPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *GetProjectPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *GetProjectPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *GetProjectPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *GetProjectPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *GetProjectPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *GetProjectPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *GetProjectPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *GetProjectPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *GetProjectPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *GetProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *GetProjectPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *GetProjectPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *GetProjectPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *GetProjectPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *GetProjectPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *GetProjectPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *GetProjectPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *GetProjectPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *GetProjectPermissions) GetIntegrationStore() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStore
}

func (o *GetProjectPermissions) GetIntegrationEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *GetProjectPermissions) GetIntegrationResourceSecrets() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *GetProjectPermissions) GetMarketplaceBillingData() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *GetProjectPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *GetProjectPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *GetProjectPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *GetProjectPermissions) GetMonitoringSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *GetProjectPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *GetProjectPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *GetProjectPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *GetProjectPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *GetProjectPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *GetProjectPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *GetProjectPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *GetProjectPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *GetProjectPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *GetProjectPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *GetProjectPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *GetProjectPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *GetProjectPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *GetProjectPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *GetProjectPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *GetProjectPermissions) GetNotificationStatementOfReasons() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *GetProjectPermissions) GetOauth2Connection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *GetProjectPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *GetProjectPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *GetProjectPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *GetProjectPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *GetProjectPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *GetProjectPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *GetProjectPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *GetProjectPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *GetProjectPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *GetProjectPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *GetProjectPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *GetProjectPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetProjectPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *GetProjectPermissions) GetRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *GetProjectPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *GetProjectPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *GetProjectPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *GetProjectPermissions) GetRedisStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *GetProjectPermissions) GetBlobStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *GetProjectPermissions) GetPostgresStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *GetProjectPermissions) GetIntegrationStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *GetProjectPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *GetProjectPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *GetProjectPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *GetProjectPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetProjectPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *GetProjectPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *GetProjectPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *GetProjectPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *GetProjectPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *GetProjectPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *GetProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *GetProjectPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *GetProjectPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *GetProjectPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *GetProjectPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *GetProjectPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *GetProjectPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *GetProjectPermissions) GetWebAuthn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *GetProjectPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *GetProjectPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *GetProjectPermissions) GetEdgeConfigSchema() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *GetProjectPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *GetProjectPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *GetProjectPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *GetProjectPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *GetProjectPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *GetProjectPermissions) GetOauth2Application() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *GetProjectPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *GetProjectPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *GetProjectPermissions) GetProductionAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *GetProjectPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *GetProjectPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *GetProjectPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetProjectPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *GetProjectPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *GetProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *GetProjectPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *GetProjectPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *GetProjectPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *GetProjectPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *GetProjectPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *GetProjectPermissions) GetEnvironments() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetProjectPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *GetProjectPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *GetProjectPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectPermissions) GetOptionsAllowlist() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *GetProjectPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *GetProjectPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetProjectPermissions) GetProjectAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *GetProjectPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *GetProjectPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *GetProjectPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *GetProjectPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *GetProjectPermissions) GetProjectDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *GetProjectPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *GetProjectPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *GetProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *GetProjectPermissions) GetProjectID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjectPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *GetProjectPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *GetProjectPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *GetProjectPermissions) GetProjectMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *GetProjectPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *GetProjectPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *GetProjectPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *GetProjectPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *GetProjectPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *GetProjectPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *GetProjectPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *GetProjectPermissions) GetProjectSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *GetProjectPermissions) GetProjectSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *GetProjectPermissions) GetProjectDeploymentExpiration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *GetProjectPermissions) GetSkewProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *GetProjectPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjectPermissions) GetSharedEnvVarConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

type GetProjectLastRollbackTarget struct {
}

type GetProjectJobStatus string

const (
	GetProjectJobStatusSucceeded  GetProjectJobStatus = "succeeded"
	GetProjectJobStatusFailed     GetProjectJobStatus = "failed"
	GetProjectJobStatusSkipped    GetProjectJobStatus = "skipped"
	GetProjectJobStatusPending    GetProjectJobStatus = "pending"
	GetProjectJobStatusInProgress GetProjectJobStatus = "in-progress"
)

func (e GetProjectJobStatus) ToPointer() *GetProjectJobStatus {
	return &e
}
func (e *GetProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = GetProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectJobStatus: %v", v)
	}
}

type GetProjectProjectsResponseType string

const (
	GetProjectProjectsResponseTypePromote  GetProjectProjectsResponseType = "promote"
	GetProjectProjectsResponseTypeRollback GetProjectProjectsResponseType = "rollback"
)

func (e GetProjectProjectsResponseType) ToPointer() *GetProjectProjectsResponseType {
	return &e
}
func (e *GetProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = GetProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsResponseType: %v", v)
	}
}

type GetProjectLastAliasRequest struct {
	FromDeploymentID string                         `json:"fromDeploymentId"`
	ToDeploymentID   string                         `json:"toDeploymentId"`
	JobStatus        GetProjectJobStatus            `json:"jobStatus"`
	RequestedAt      float64                        `json:"requestedAt"`
	Type             GetProjectProjectsResponseType `json:"type"`
}

func (o *GetProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *GetProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *GetProjectLastAliasRequest) GetJobStatus() GetProjectJobStatus {
	if o == nil {
		return GetProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *GetProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *GetProjectLastAliasRequest) GetType() GetProjectProjectsResponseType {
	if o == nil {
		return GetProjectProjectsResponseType("")
	}
	return o.Type
}

type GetProjectScope string

const (
	GetProjectScopeAutomationBypass GetProjectScope = "automation-bypass"
)

func (e GetProjectScope) ToPointer() *GetProjectScope {
	return &e
}
func (e *GetProjectScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = GetProjectScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectScope: %v", v)
	}
}

type GetProjectProtectionBypass struct {
	CreatedAt float64         `json:"createdAt"`
	CreatedBy string          `json:"createdBy"`
	Scope     GetProjectScope `json:"scope"`
}

func (o *GetProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetProjectProtectionBypass) GetScope() GetProjectScope {
	if o == nil {
		return GetProjectScope("")
	}
	return o.Scope
}

type GetProjectProjectsDeploymentType string

const (
	GetProjectProjectsDeploymentTypeAll                              GetProjectProjectsDeploymentType = "all"
	GetProjectProjectsDeploymentTypePreview                          GetProjectProjectsDeploymentType = "preview"
	GetProjectProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
	GetProjectProjectsDeploymentTypeProduction                       GetProjectProjectsDeploymentType = "production"
)

func (e GetProjectProjectsDeploymentType) ToPointer() *GetProjectProjectsDeploymentType {
	return &e
}
func (e *GetProjectProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = GetProjectProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsDeploymentType: %v", v)
	}
}

type GetProjectAddresses struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *GetProjectAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type GetProjectProtectionMode string

const (
	GetProjectProtectionModeAdditional GetProjectProtectionMode = "additional"
	GetProjectProtectionModeExclusive  GetProjectProtectionMode = "exclusive"
)

func (e GetProjectProtectionMode) ToPointer() *GetProjectProtectionMode {
	return &e
}
func (e *GetProjectProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = GetProjectProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProtectionMode: %v", v)
	}
}

type GetProjectTrustedIps struct {
	DeploymentType GetProjectProjectsDeploymentType `json:"deploymentType"`
	Addresses      []GetProjectAddresses            `json:"addresses"`
	ProtectionMode GetProjectProtectionMode         `json:"protectionMode"`
}

func (o *GetProjectTrustedIps) GetDeploymentType() GetProjectProjectsDeploymentType {
	if o == nil {
		return GetProjectProjectsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *GetProjectTrustedIps) GetAddresses() []GetProjectAddresses {
	if o == nil {
		return []GetProjectAddresses{}
	}
	return o.Addresses
}

func (o *GetProjectTrustedIps) GetProtectionMode() GetProjectProtectionMode {
	if o == nil {
		return GetProjectProtectionMode("")
	}
	return o.ProtectionMode
}

type GetProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *GetProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *GetProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

type GetProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *GetProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type GetProjectSrc2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectSrc2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectSrc2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectSrc2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectSrc2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectSrc2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectSrc2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectSrc2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectSrc2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectSrc2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectSrc2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectSrc2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectSrcType string

const (
	GetProjectSrcTypeStr            GetProjectSrcType = "str"
	GetProjectSrcTypeGetProjectSrc2 GetProjectSrcType = "getProject_src_2"
)

type GetProjectSrc struct {
	Str            *string
	GetProjectSrc2 *GetProjectSrc2

	Type GetProjectSrcType
}

func CreateGetProjectSrcStr(str string) GetProjectSrc {
	typ := GetProjectSrcTypeStr

	return GetProjectSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectSrcGetProjectSrc2(getProjectSrc2 GetProjectSrc2) GetProjectSrc {
	typ := GetProjectSrcTypeGetProjectSrc2

	return GetProjectSrc{
		GetProjectSrc2: &getProjectSrc2,
		Type:           typ,
	}
}

func (u *GetProjectSrc) UnmarshalJSON(data []byte) error {

	var getProjectSrc2 GetProjectSrc2 = GetProjectSrc2{}
	if err := utils.UnmarshalJSON(data, &getProjectSrc2, "", true, true); err == nil {
		u.GetProjectSrc2 = &getProjectSrc2
		u.Type = GetProjectSrcTypeGetProjectSrc2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectSrc", string(data))
}

func (u GetProjectSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectSrc2 != nil {
		return utils.MarshalJSON(u.GetProjectSrc2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectSrc: all fields are null")
}

type GetProjectProjectsResponse200ApplicationJSONType string

const (
	GetProjectProjectsResponse200ApplicationJSONTypeHost      GetProjectProjectsResponse200ApplicationJSONType = "host"
	GetProjectProjectsResponse200ApplicationJSONTypeMethod    GetProjectProjectsResponse200ApplicationJSONType = "method"
	GetProjectProjectsResponse200ApplicationJSONTypePath      GetProjectProjectsResponse200ApplicationJSONType = "path"
	GetProjectProjectsResponse200ApplicationJSONTypeHeader    GetProjectProjectsResponse200ApplicationJSONType = "header"
	GetProjectProjectsResponse200ApplicationJSONTypeCookie    GetProjectProjectsResponse200ApplicationJSONType = "cookie"
	GetProjectProjectsResponse200ApplicationJSONTypeQuery     GetProjectProjectsResponse200ApplicationJSONType = "query"
	GetProjectProjectsResponse200ApplicationJSONTypeIPAddress GetProjectProjectsResponse200ApplicationJSONType = "ip_address"
	GetProjectProjectsResponse200ApplicationJSONTypeProtocol  GetProjectProjectsResponse200ApplicationJSONType = "protocol"
	GetProjectProjectsResponse200ApplicationJSONTypeScheme    GetProjectProjectsResponse200ApplicationJSONType = "scheme"
	GetProjectProjectsResponse200ApplicationJSONTypeRegion    GetProjectProjectsResponse200ApplicationJSONType = "region"
)

func (e GetProjectProjectsResponse200ApplicationJSONType) ToPointer() *GetProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *GetProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = GetProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type GetProjectValue2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectValue2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectValueType string

const (
	GetProjectValueTypeStr              GetProjectValueType = "str"
	GetProjectValueTypeGetProjectValue2 GetProjectValueType = "getProject_value_2"
)

type GetProjectValue struct {
	Str              *string
	GetProjectValue2 *GetProjectValue2

	Type GetProjectValueType
}

func CreateGetProjectValueStr(str string) GetProjectValue {
	typ := GetProjectValueTypeStr

	return GetProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectValueGetProjectValue2(getProjectValue2 GetProjectValue2) GetProjectValue {
	typ := GetProjectValueTypeGetProjectValue2

	return GetProjectValue{
		GetProjectValue2: &getProjectValue2,
		Type:             typ,
	}
}

func (u *GetProjectValue) UnmarshalJSON(data []byte) error {

	var getProjectValue2 GetProjectValue2 = GetProjectValue2{}
	if err := utils.UnmarshalJSON(data, &getProjectValue2, "", true, true); err == nil {
		u.GetProjectValue2 = &getProjectValue2
		u.Type = GetProjectValueTypeGetProjectValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectValue", string(data))
}

func (u GetProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectValue2 != nil {
		return utils.MarshalJSON(u.GetProjectValue2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectValue: all fields are null")
}

type GetProjectHas struct {
	Type  GetProjectProjectsResponse200ApplicationJSONType `json:"type"`
	Key   *string                                          `json:"key,omitempty"`
	Value *GetProjectValue                                 `json:"value,omitempty"`
}

func (o *GetProjectHas) GetType() GetProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return GetProjectProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetProjectHas) GetValue() *GetProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeHost      GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "host"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeMethod    GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "method"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypePath      GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "path"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeHeader    GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "header"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeCookie    GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "cookie"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeQuery     GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "query"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeIPAddress GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "ip_address"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeProtocol  GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "protocol"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeScheme    GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "scheme"
	GetProjectProjectsResponse200ApplicationJSONResponseBodyTypeRegion    GetProjectProjectsResponse200ApplicationJSONResponseBodyType = "region"
)

func (e GetProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = GetProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetProjectValueProjects2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectValueProjects2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectValueProjects2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectValueProjects2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectValueProjects2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectValueProjects2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectValueProjects2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectValueProjects2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectValueProjects2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectValueProjects2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectValueProjects2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectValueProjects2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectProjectsValueType string

const (
	GetProjectProjectsValueTypeStr                      GetProjectProjectsValueType = "str"
	GetProjectProjectsValueTypeGetProjectValueProjects2 GetProjectProjectsValueType = "getProject_value_projects_2"
)

type GetProjectProjectsValue struct {
	Str                      *string
	GetProjectValueProjects2 *GetProjectValueProjects2

	Type GetProjectProjectsValueType
}

func CreateGetProjectProjectsValueStr(str string) GetProjectProjectsValue {
	typ := GetProjectProjectsValueTypeStr

	return GetProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectProjectsValueGetProjectValueProjects2(getProjectValueProjects2 GetProjectValueProjects2) GetProjectProjectsValue {
	typ := GetProjectProjectsValueTypeGetProjectValueProjects2

	return GetProjectProjectsValue{
		GetProjectValueProjects2: &getProjectValueProjects2,
		Type:                     typ,
	}
}

func (u *GetProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var getProjectValueProjects2 GetProjectValueProjects2 = GetProjectValueProjects2{}
	if err := utils.UnmarshalJSON(data, &getProjectValueProjects2, "", true, true); err == nil {
		u.GetProjectValueProjects2 = &getProjectValueProjects2
		u.Type = GetProjectProjectsValueTypeGetProjectValueProjects2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectProjectsValue", string(data))
}

func (u GetProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectValueProjects2 != nil {
		return utils.MarshalJSON(u.GetProjectValueProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectProjectsValue: all fields are null")
}

type GetProjectMissing struct {
	Type  GetProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Key   *string                                                      `json:"key,omitempty"`
	Value *GetProjectProjectsValue                                     `json:"value,omitempty"`
}

func (o *GetProjectMissing) GetType() GetProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetProjectProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetProjectMissing) GetValue() *GetProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetProjectHandle string

const (
	GetProjectHandleInit     GetProjectHandle = "init"
	GetProjectHandleFinalize GetProjectHandle = "finalize"
)

func (e GetProjectHandle) ToPointer() *GetProjectHandle {
	return &e
}
func (e *GetProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = GetProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectHandle: %v", v)
	}
}

type GetProjectAction string

const (
	GetProjectActionDeny      GetProjectAction = "deny"
	GetProjectActionChallenge GetProjectAction = "challenge"
	GetProjectActionLog       GetProjectAction = "log"
	GetProjectActionBypass    GetProjectAction = "bypass"
	GetProjectActionRateLimit GetProjectAction = "rate_limit"
)

func (e GetProjectAction) ToPointer() *GetProjectAction {
	return &e
}
func (e *GetProjectAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = GetProjectAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectAction: %v", v)
	}
}

type GetProjectAlgo string

const (
	GetProjectAlgoFixedWindow GetProjectAlgo = "fixed_window"
	GetProjectAlgoTokenBucket GetProjectAlgo = "token_bucket"
)

func (e GetProjectAlgo) ToPointer() *GetProjectAlgo {
	return &e
}
func (e *GetProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = GetProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectAlgo: %v", v)
	}
}

type GetProjectErl struct {
	Algo   GetProjectAlgo `json:"algo"`
	Window float64        `json:"window"`
	Limit  float64        `json:"limit"`
	Keys   []string       `json:"keys"`
}

func (o *GetProjectErl) GetAlgo() GetProjectAlgo {
	if o == nil {
		return GetProjectAlgo("")
	}
	return o.Algo
}

func (o *GetProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *GetProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *GetProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type GetProjectMitigate struct {
	Action GetProjectAction `json:"action"`
	RuleID string           `json:"rule_id"`
	Erl    *GetProjectErl   `json:"erl,omitempty"`
}

func (o *GetProjectMitigate) GetAction() GetProjectAction {
	if o == nil {
		return GetProjectAction("")
	}
	return o.Action
}

func (o *GetProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *GetProjectMitigate) GetErl() *GetProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type GetProjectFirewallRoutes struct {
	Src      *GetProjectSrc      `json:"src,omitempty"`
	Has      []GetProjectHas     `json:"has,omitempty"`
	Missing  []GetProjectMissing `json:"missing,omitempty"`
	Dest     *string             `json:"dest,omitempty"`
	Status   *float64            `json:"status,omitempty"`
	Handle   *GetProjectHandle   `json:"handle,omitempty"`
	Mitigate *GetProjectMitigate `json:"mitigate,omitempty"`
}

func (o *GetProjectFirewallRoutes) GetSrc() *GetProjectSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectFirewallRoutes) GetHas() []GetProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetProjectFirewallRoutes) GetMissing() []GetProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetProjectFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjectFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetProjectFirewallRoutes) GetHandle() *GetProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *GetProjectFirewallRoutes) GetMitigate() *GetProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type GetProjectSecurity struct {
	AttackModeEnabled      *bool                      `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                   `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                      `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                   `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                   `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                   `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []GetProjectFirewallRoutes `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                      `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                      `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                      `json:"ja4Enabled,omitempty"`
}

func (o *GetProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *GetProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *GetProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *GetProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *GetProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *GetProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *GetProjectSecurity) GetFirewallRoutes() []GetProjectFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *GetProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *GetProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *GetProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

type GetProjectOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
}

func (o *GetProjectOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

// GetProjectResponseBody - The project information
type GetProjectResponseBody struct {
	AccountID                            string                                `json:"accountId"`
	Analytics                            *GetProjectAnalytics                  `json:"analytics,omitempty"`
	SpeedInsights                        *GetProjectSpeedInsights              `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs                 *bool                                 `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains              *bool                                 `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                               `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                         *string                               `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                               `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurationID               *string                               `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled                 *bool                                 `json:"connectBuildsEnabled,omitempty"`
	CreatedAt                            *float64                              `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility        *bool                                 `json:"customerSupportCodeVisibility,omitempty"`
	Crons                                *GetProjectCrons                      `json:"crons,omitempty"`
	DataCache                            *GetProjectDataCache                  `json:"dataCache,omitempty"`
	DevCommand                           *string                               `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                  `json:"directoryListing"`
	InstallCommand                       *string                               `json:"installCommand,omitempty"`
	Env                                  []GetProjectEnv                       `json:"env,omitempty"`
	Framework                            *GetProjectFramework                  `json:"framework,omitempty"`
	GitForkProtection                    *bool                                 `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                 `json:"gitLFS,omitempty"`
	ID                                   string                                `json:"id"`
	LatestDeployments                    []GetProjectLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *GetProjectLink                       `json:"link,omitempty"`
	Name                                 string                                `json:"name"`
	NodeVersion                          GetProjectNodeVersion                 `json:"nodeVersion"`
	OptionsAllowlist                     *GetProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                               `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                               `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *GetProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane        *bool                                 `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                         *bool                                 `json:"publicSource,omitempty"`
	RootDirectory                        *string                               `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                               `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                 `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *int64                                `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *int64                                `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                 `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                 `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                        *GetProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]GetProjectTargets          `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                              `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                              `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                               `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                               `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                              `json:"updatedAt,omitempty"`
	Live                                 *bool                                 `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                 `json:"enablePreviewFeedback,omitempty"`
	Permissions                          *GetProjectPermissions                `json:"permissions,omitempty"`
	LastRollbackTarget                   *GetProjectLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *GetProjectLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	HasFloatingAliases                   *bool                                 `json:"hasFloatingAliases,omitempty"`
	ProtectionBypass                     map[string]GetProjectProtectionBypass `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                 `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *GetProjectTrustedIps                 `json:"trustedIps,omitempty"`
	GitComments                          *GetProjectGitComments                `json:"gitComments,omitempty"`
	Paused                               *bool                                 `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                               `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *GetProjectWebAnalytics               `json:"webAnalytics,omitempty"`
	Security                             *GetProjectSecurity                   `json:"security,omitempty"`
	OidcTokenConfig                      *GetProjectOidcTokenConfig            `json:"oidcTokenConfig,omitempty"`
}

func (o *GetProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetProjectResponseBody) GetAnalytics() *GetProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectResponseBody) GetSpeedInsights() *GetProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *GetProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *GetProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *GetProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *GetProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *GetProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *GetProjectResponseBody) GetCrons() *GetProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetProjectResponseBody) GetDataCache() *GetProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *GetProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *GetProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *GetProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *GetProjectResponseBody) GetEnv() []GetProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetProjectResponseBody) GetFramework() *GetProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *GetProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectResponseBody) GetLatestDeployments() []GetProjectLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *GetProjectResponseBody) GetLink() *GetProjectLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectResponseBody) GetNodeVersion() GetProjectNodeVersion {
	if o == nil {
		return GetProjectNodeVersion("")
	}
	return o.NodeVersion
}

func (o *GetProjectResponseBody) GetOptionsAllowlist() *GetProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *GetProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *GetProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *GetProjectResponseBody) GetPasswordProtection() *GetProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *GetProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *GetProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *GetProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *GetProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *GetProjectResponseBody) GetSkewProtectionBoundaryAt() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *GetProjectResponseBody) GetSkewProtectionMaxAge() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *GetProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *GetProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *GetProjectResponseBody) GetSsoProtection() *GetProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *GetProjectResponseBody) GetTargets() map[string]GetProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *GetProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *GetProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *GetProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *GetProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *GetProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *GetProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *GetProjectResponseBody) GetPermissions() *GetProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectResponseBody) GetLastRollbackTarget() *GetProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *GetProjectResponseBody) GetLastAliasRequest() *GetProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *GetProjectResponseBody) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *GetProjectResponseBody) GetProtectionBypass() map[string]GetProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *GetProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *GetProjectResponseBody) GetTrustedIps() *GetProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectResponseBody) GetGitComments() *GetProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *GetProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *GetProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *GetProjectResponseBody) GetWebAnalytics() *GetProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjectResponseBody) GetSecurity() *GetProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *GetProjectResponseBody) GetOidcTokenConfig() *GetProjectOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

type GetProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project information
	Object *GetProjectResponseBody
}

func (o *GetProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectResponse) GetObject() *GetProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
