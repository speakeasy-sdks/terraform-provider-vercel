// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

// Role - The role of the user to invite
type Role string

const (
	RoleOwner       Role = "OWNER"
	RoleMember      Role = "MEMBER"
	RoleDeveloper   Role = "DEVELOPER"
	RoleBilling     Role = "BILLING"
	RoleViewer      Role = "VIEWER"
	RoleContributor Role = "CONTRIBUTOR"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

// InviteUserToTeamRole - Sets the project roles for the invited user
type InviteUserToTeamRole string

const (
	InviteUserToTeamRoleAdmin            InviteUserToTeamRole = "ADMIN"
	InviteUserToTeamRoleProjectViewer    InviteUserToTeamRole = "PROJECT_VIEWER"
	InviteUserToTeamRoleProjectDeveloper InviteUserToTeamRole = "PROJECT_DEVELOPER"
)

func (e InviteUserToTeamRole) ToPointer() *InviteUserToTeamRole {
	return &e
}
func (e *InviteUserToTeamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = InviteUserToTeamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRole: %v", v)
	}
}

type Projects struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// Sets the project roles for the invited user
	Role InviteUserToTeamRole `json:"role"`
}

func (o *Projects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Projects) GetRole() InviteUserToTeamRole {
	if o == nil {
		return InviteUserToTeamRole("")
	}
	return o.Role
}

type InviteUserToTeamRequestBody struct {
	// The id of the user to invite
	UID *string `json:"uid,omitempty"`
	// The email address of the user to invite
	Email *string `json:"email,omitempty"`
	// The role of the user to invite
	Role     *Role      `default:"MEMBER" json:"role"`
	Projects []Projects `json:"projects,omitempty"`
}

func (i InviteUserToTeamRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InviteUserToTeamRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InviteUserToTeamRequestBody) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *InviteUserToTeamRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InviteUserToTeamRequestBody) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *InviteUserToTeamRequestBody) GetProjects() []Projects {
	if o == nil {
		return nil
	}
	return o.Projects
}

type InviteUserToTeamRequest struct {
	TeamID      string                       `pathParam:"style=simple,explode=false,name=teamId"`
	RequestBody *InviteUserToTeamRequestBody `request:"mediaType=application/json"`
}

func (o *InviteUserToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *InviteUserToTeamRequest) GetRequestBody() *InviteUserToTeamRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type InviteUserToTeamResponseBodyRole string

const (
	InviteUserToTeamResponseBodyRoleOwner       InviteUserToTeamResponseBodyRole = "OWNER"
	InviteUserToTeamResponseBodyRoleMember      InviteUserToTeamResponseBodyRole = "MEMBER"
	InviteUserToTeamResponseBodyRoleDeveloper   InviteUserToTeamResponseBodyRole = "DEVELOPER"
	InviteUserToTeamResponseBodyRoleBilling     InviteUserToTeamResponseBodyRole = "BILLING"
	InviteUserToTeamResponseBodyRoleViewer      InviteUserToTeamResponseBodyRole = "VIEWER"
	InviteUserToTeamResponseBodyRoleContributor InviteUserToTeamResponseBodyRole = "CONTRIBUTOR"
)

func (e InviteUserToTeamResponseBodyRole) ToPointer() *InviteUserToTeamResponseBodyRole {
	return &e
}
func (e *InviteUserToTeamResponseBodyRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamResponseBodyRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamResponseBodyRole: %v", v)
	}
}

type InviteUserToTeamResponseBody2 struct {
	UID      string                           `json:"uid"`
	Username string                           `json:"username"`
	Role     InviteUserToTeamResponseBodyRole `json:"role"`
}

func (o *InviteUserToTeamResponseBody2) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeamResponseBody2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InviteUserToTeamResponseBody2) GetRole() InviteUserToTeamResponseBodyRole {
	if o == nil {
		return InviteUserToTeamResponseBodyRole("")
	}
	return o.Role
}

// ResponseBodyRole - The role used for the invitation
type ResponseBodyRole string

const (
	ResponseBodyRoleOwner       ResponseBodyRole = "OWNER"
	ResponseBodyRoleMember      ResponseBodyRole = "MEMBER"
	ResponseBodyRoleDeveloper   ResponseBodyRole = "DEVELOPER"
	ResponseBodyRoleBilling     ResponseBodyRole = "BILLING"
	ResponseBodyRoleViewer      ResponseBodyRole = "VIEWER"
	ResponseBodyRoleContributor ResponseBodyRole = "CONTRIBUTOR"
)

func (e ResponseBodyRole) ToPointer() *ResponseBodyRole {
	return &e
}
func (e *ResponseBodyRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = ResponseBodyRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyRole: %v", v)
	}
}

// InviteUserToTeamResponseBody1 - The member was successfully added to the team
type InviteUserToTeamResponseBody1 struct {
	// The ID of the invited user
	UID string `json:"uid"`
	// The username of the invited user
	Username string `json:"username"`
	// The email of the invited user. Not included if the user was invited via their UID.
	Email *string `json:"email,omitempty"`
	// The role used for the invitation
	Role ResponseBodyRole `json:"role"`
}

func (o *InviteUserToTeamResponseBody1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeamResponseBody1) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InviteUserToTeamResponseBody1) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InviteUserToTeamResponseBody1) GetRole() ResponseBodyRole {
	if o == nil {
		return ResponseBodyRole("")
	}
	return o.Role
}

type InviteUserToTeamResponseBodyType string

const (
	InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1 InviteUserToTeamResponseBodyType = "inviteUserToTeam_responseBody_1"
	InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2 InviteUserToTeamResponseBodyType = "inviteUserToTeam_responseBody_2"
)

// InviteUserToTeamResponseBody - The member was successfully added to the team
type InviteUserToTeamResponseBody struct {
	InviteUserToTeamResponseBody1 *InviteUserToTeamResponseBody1
	InviteUserToTeamResponseBody2 *InviteUserToTeamResponseBody2

	Type InviteUserToTeamResponseBodyType
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeamResponseBody1(inviteUserToTeamResponseBody1 InviteUserToTeamResponseBody1) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1

	return InviteUserToTeamResponseBody{
		InviteUserToTeamResponseBody1: &inviteUserToTeamResponseBody1,
		Type:                          typ,
	}
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeamResponseBody2(inviteUserToTeamResponseBody2 InviteUserToTeamResponseBody2) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2

	return InviteUserToTeamResponseBody{
		InviteUserToTeamResponseBody2: &inviteUserToTeamResponseBody2,
		Type:                          typ,
	}
}

func (u *InviteUserToTeamResponseBody) UnmarshalJSON(data []byte) error {

	var inviteUserToTeamResponseBody2 InviteUserToTeamResponseBody2 = InviteUserToTeamResponseBody2{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeamResponseBody2, "", true, true); err == nil {
		u.InviteUserToTeamResponseBody2 = &inviteUserToTeamResponseBody2
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2
		return nil
	}

	var inviteUserToTeamResponseBody1 InviteUserToTeamResponseBody1 = InviteUserToTeamResponseBody1{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeamResponseBody1, "", true, true); err == nil {
		u.InviteUserToTeamResponseBody1 = &inviteUserToTeamResponseBody1
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InviteUserToTeamResponseBody", string(data))
}

func (u InviteUserToTeamResponseBody) MarshalJSON() ([]byte, error) {
	if u.InviteUserToTeamResponseBody1 != nil {
		return utils.MarshalJSON(u.InviteUserToTeamResponseBody1, "", true)
	}

	if u.InviteUserToTeamResponseBody2 != nil {
		return utils.MarshalJSON(u.InviteUserToTeamResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type InviteUserToTeamResponseBody: all fields are null")
}

type InviteUserToTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The member was successfully added to the team
	OneOf *InviteUserToTeamResponseBody
}

func (o *InviteUserToTeamResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *InviteUserToTeamResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *InviteUserToTeamResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *InviteUserToTeamResponse) GetOneOf() *InviteUserToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
