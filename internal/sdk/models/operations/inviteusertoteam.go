// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

// InviteUserToTeamRole - Sets the project roles for the invited user
type InviteUserToTeamRole string

const (
	InviteUserToTeamRoleAdmin            InviteUserToTeamRole = "ADMIN"
	InviteUserToTeamRoleProjectViewer    InviteUserToTeamRole = "PROJECT_VIEWER"
	InviteUserToTeamRoleProjectDeveloper InviteUserToTeamRole = "PROJECT_DEVELOPER"
)

func (e InviteUserToTeamRole) ToPointer() *InviteUserToTeamRole {
	return &e
}

func (e *InviteUserToTeamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = InviteUserToTeamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRole: %v", v)
	}
}

type InviteUserToTeamProjects struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// Sets the project roles for the invited user
	Role InviteUserToTeamRole `json:"role"`
}

func (o *InviteUserToTeamProjects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *InviteUserToTeamProjects) GetRole() InviteUserToTeamRole {
	if o == nil {
		return InviteUserToTeamRole("")
	}
	return o.Role
}

// InviteUserToTeamTeamsRole - The role of the user to invite
type InviteUserToTeamTeamsRole string

const (
	InviteUserToTeamTeamsRoleOwner       InviteUserToTeamTeamsRole = "OWNER"
	InviteUserToTeamTeamsRoleMember      InviteUserToTeamTeamsRole = "MEMBER"
	InviteUserToTeamTeamsRoleViewer      InviteUserToTeamTeamsRole = "VIEWER"
	InviteUserToTeamTeamsRoleDeveloper   InviteUserToTeamTeamsRole = "DEVELOPER"
	InviteUserToTeamTeamsRoleBilling     InviteUserToTeamTeamsRole = "BILLING"
	InviteUserToTeamTeamsRoleContributor InviteUserToTeamTeamsRole = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamsRole) ToPointer() *InviteUserToTeamTeamsRole {
	return &e
}

func (e *InviteUserToTeamTeamsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamsRole: %v", v)
	}
}

type InviteUserToTeamRequestBody struct {
	// The email address of the user to invite
	Email    *string                    `json:"email,omitempty"`
	Projects []InviteUserToTeamProjects `json:"projects,omitempty"`
	// The role of the user to invite
	Role *InviteUserToTeamTeamsRole `default:"[MEMBER VIEWER]" json:"role"`
	// The id of the user to invite
	UID *string `json:"uid,omitempty"`
}

func (i InviteUserToTeamRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InviteUserToTeamRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InviteUserToTeamRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InviteUserToTeamRequestBody) GetProjects() []InviteUserToTeamProjects {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *InviteUserToTeamRequestBody) GetRole() *InviteUserToTeamTeamsRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *InviteUserToTeamRequestBody) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

type InviteUserToTeamRequest struct {
	RequestBody *InviteUserToTeamRequestBody `request:"mediaType=application/json"`
	TeamID      string                       `pathParam:"style=simple,explode=false,name=teamId"`
}

func (o *InviteUserToTeamRequest) GetRequestBody() *InviteUserToTeamRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *InviteUserToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

type InviteUserToTeamTeamsResponse200Role string

const (
	InviteUserToTeamTeamsResponse200RoleOwner       InviteUserToTeamTeamsResponse200Role = "OWNER"
	InviteUserToTeamTeamsResponse200RoleMember      InviteUserToTeamTeamsResponse200Role = "MEMBER"
	InviteUserToTeamTeamsResponse200RoleViewer      InviteUserToTeamTeamsResponse200Role = "VIEWER"
	InviteUserToTeamTeamsResponse200RoleDeveloper   InviteUserToTeamTeamsResponse200Role = "DEVELOPER"
	InviteUserToTeamTeamsResponse200RoleBilling     InviteUserToTeamTeamsResponse200Role = "BILLING"
	InviteUserToTeamTeamsResponse200RoleContributor InviteUserToTeamTeamsResponse200Role = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamsResponse200Role) ToPointer() *InviteUserToTeamTeamsResponse200Role {
	return &e
}

func (e *InviteUserToTeamTeamsResponse200Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamsResponse200Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamsResponse200Role: %v", v)
	}
}

type InviteUserToTeam2 struct {
	Role     InviteUserToTeamTeamsResponse200Role `json:"role"`
	UID      string                               `json:"uid"`
	Username string                               `json:"username"`
}

func (o *InviteUserToTeam2) GetRole() InviteUserToTeamTeamsResponse200Role {
	if o == nil {
		return InviteUserToTeamTeamsResponse200Role("")
	}
	return o.Role
}

func (o *InviteUserToTeam2) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeam2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// InviteUserToTeamTeamsResponseRole - The role used for the invitation
type InviteUserToTeamTeamsResponseRole string

const (
	InviteUserToTeamTeamsResponseRoleOwner       InviteUserToTeamTeamsResponseRole = "OWNER"
	InviteUserToTeamTeamsResponseRoleMember      InviteUserToTeamTeamsResponseRole = "MEMBER"
	InviteUserToTeamTeamsResponseRoleViewer      InviteUserToTeamTeamsResponseRole = "VIEWER"
	InviteUserToTeamTeamsResponseRoleDeveloper   InviteUserToTeamTeamsResponseRole = "DEVELOPER"
	InviteUserToTeamTeamsResponseRoleBilling     InviteUserToTeamTeamsResponseRole = "BILLING"
	InviteUserToTeamTeamsResponseRoleContributor InviteUserToTeamTeamsResponseRole = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamsResponseRole) ToPointer() *InviteUserToTeamTeamsResponseRole {
	return &e
}

func (e *InviteUserToTeamTeamsResponseRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamsResponseRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamsResponseRole: %v", v)
	}
}

// InviteUserToTeam1 - The member was successfully added to the team
type InviteUserToTeam1 struct {
	// The email of the invited user. Not included if the user was invited via their UID.
	Email string `json:"email"`
	// The role used for the invitation
	Role InviteUserToTeamTeamsResponseRole `json:"role"`
	// The ID of the invited user
	UID string `json:"uid"`
	// The username of the invited user
	Username string `json:"username"`
}

func (o *InviteUserToTeam1) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *InviteUserToTeam1) GetRole() InviteUserToTeamTeamsResponseRole {
	if o == nil {
		return InviteUserToTeamTeamsResponseRole("")
	}
	return o.Role
}

func (o *InviteUserToTeam1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeam1) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type InviteUserToTeamResponseBodyType string

const (
	InviteUserToTeamResponseBodyTypeInviteUserToTeam1 InviteUserToTeamResponseBodyType = "inviteUserToTeam_1"
	InviteUserToTeamResponseBodyTypeInviteUserToTeam2 InviteUserToTeamResponseBodyType = "inviteUserToTeam_2"
)

// InviteUserToTeamResponseBody - The member was successfully added to the team
type InviteUserToTeamResponseBody struct {
	InviteUserToTeam1 *InviteUserToTeam1
	InviteUserToTeam2 *InviteUserToTeam2

	Type InviteUserToTeamResponseBodyType
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeam1(inviteUserToTeam1 InviteUserToTeam1) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeam1

	return InviteUserToTeamResponseBody{
		InviteUserToTeam1: &inviteUserToTeam1,
		Type:              typ,
	}
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeam2(inviteUserToTeam2 InviteUserToTeam2) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeam2

	return InviteUserToTeamResponseBody{
		InviteUserToTeam2: &inviteUserToTeam2,
		Type:              typ,
	}
}

func (u *InviteUserToTeamResponseBody) UnmarshalJSON(data []byte) error {

	inviteUserToTeam2 := InviteUserToTeam2{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeam2, "", true, true); err == nil {
		u.InviteUserToTeam2 = &inviteUserToTeam2
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeam2
		return nil
	}

	inviteUserToTeam1 := InviteUserToTeam1{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeam1, "", true, true); err == nil {
		u.InviteUserToTeam1 = &inviteUserToTeam1
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeam1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u InviteUserToTeamResponseBody) MarshalJSON() ([]byte, error) {
	if u.InviteUserToTeam1 != nil {
		return utils.MarshalJSON(u.InviteUserToTeam1, "", true)
	}

	if u.InviteUserToTeam2 != nil {
		return utils.MarshalJSON(u.InviteUserToTeam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type InviteUserToTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The member was successfully added to the team
	OneOf *InviteUserToTeamResponseBody
}

func (o *InviteUserToTeamResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *InviteUserToTeamResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *InviteUserToTeamResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *InviteUserToTeamResponse) GetOneOf() *InviteUserToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
