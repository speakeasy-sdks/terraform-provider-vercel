// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

type UpdateProjectDataCacheRequestBody struct {
	// Enable or disable data cache for the project - default: false
	Disabled *bool `json:"disabled,omitempty"`
}

func (o *UpdateProjectDataCacheRequestBody) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type UpdateProjectDataCacheRequest struct {
	RequestBody *UpdateProjectDataCacheRequestBody `request:"mediaType=application/json"`
	// The unique project identifier
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *UpdateProjectDataCacheRequest) GetRequestBody() *UpdateProjectDataCacheRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateProjectDataCacheRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCacheRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type UpdateProjectDataCacheAnalytics struct {
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	ID                  string   `json:"id"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectDataCacheAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectDataCacheAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectDataCacheAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectDataCacheDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDataCacheDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDataCacheDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDataCacheDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectDataCacheCrons struct {
	Definitions []UpdateProjectDataCacheDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *UpdateProjectDataCacheCrons) GetDefinitions() []UpdateProjectDataCacheDefinitions {
	if o == nil {
		return []UpdateProjectDataCacheDefinitions{}
	}
	return o.Definitions
}

func (o *UpdateProjectDataCacheCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectDataCacheCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheDataCache struct {
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
	UserDisabled     bool     `json:"userDisabled"`
}

func (o *UpdateProjectDataCacheDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCacheDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *UpdateProjectDataCacheDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintTypeIntegrationStoreSecret UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType = "integration-store-secret"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType: %v", v)
	}
}

type UpdateProjectDataCache14 struct {
	StoreID string                                                                                 `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType `json:"type"`
}

func (o *UpdateProjectDataCache14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache14) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNoSsl UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-no-ssl"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type UpdateProjectDataCache13 struct {
	StoreID string                                                                      `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
}

func (o *UpdateProjectDataCache13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache13) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12TypePostgresDatabase UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type = "postgres-database"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type: %v", v)
	}
}

type UpdateProjectDataCache12 struct {
	StoreID string                                                                                   `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type `json:"type"`
}

func (o *UpdateProjectDataCache12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache12) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11TypePostgresPassword UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type = "postgres-password"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type: %v", v)
	}
}

type UpdateProjectDataCache11 struct {
	StoreID string                                                                                   `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type `json:"type"`
}

func (o *UpdateProjectDataCache11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache11) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10TypePostgresHost UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type = "postgres-host"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type: %v", v)
	}
}

type UpdateProjectDataCache10 struct {
	StoreID string                                                                                   `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type `json:"type"`
}

func (o *UpdateProjectDataCache10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache10) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9TypePostgresUser UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type = "postgres-user"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type: %v", v)
	}
}

type UpdateProjectDataCache9 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type `json:"type"`
}

func (o *UpdateProjectDataCache9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache9) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8TypePostgresPrismaURL UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type = "postgres-prisma-url"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type: %v", v)
	}
}

type UpdateProjectDataCache8 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type `json:"type"`
}

func (o *UpdateProjectDataCache8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache8) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7TypePostgresURLNonPooling UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type: %v", v)
	}
}

type UpdateProjectDataCache7 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type `json:"type"`
}

func (o *UpdateProjectDataCache7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache7) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6TypePostgresURL UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type = "postgres-url"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type: %v", v)
	}
}

type UpdateProjectDataCache6 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type `json:"type"`
}

func (o *UpdateProjectDataCache6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache6) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5TypeBlobReadWriteToken UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type = "blob-read-write-token"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type: %v", v)
	}
}

type UpdateProjectDataCache5 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type `json:"type"`
}

func (o *UpdateProjectDataCache5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache5) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4TypeRedisRestAPIReadOnlyToken UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type: %v", v)
	}
}

type UpdateProjectDataCache4 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type `json:"type"`
}

func (o *UpdateProjectDataCache4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCache4) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3TypeRedisRestAPIToken UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type = "redis-rest-api-token"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type: %v", v)
	}
}

type UpdateProjectDataCacheProjects3 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type `json:"type"`
}

func (o *UpdateProjectDataCacheProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCacheProjects3) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2TypeRedisRestAPIURL UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type = "redis-rest-api-url"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse2 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type `json:"type"`
}

func (o *UpdateProjectDataCacheProjectsResponse2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCacheProjectsResponse2) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1TypeRedisURL UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type = "redis-url"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse1 struct {
	StoreID string                                                                                  `json:"storeId"`
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type `json:"type"`
}

func (o *UpdateProjectDataCacheProjectsResponse1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCacheProjectsResponse1) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheContentHintType string

const (
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse1 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_projects_response_1"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse2 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_projects_response_2"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjects3         UpdateProjectDataCacheContentHintType = "updateProjectDataCache_projects_3"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache4                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_4"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache5                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_5"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache6                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_6"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache7                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_7"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache8                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_8"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache9                 UpdateProjectDataCacheContentHintType = "updateProjectDataCache_9"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache10                UpdateProjectDataCacheContentHintType = "updateProjectDataCache_10"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache11                UpdateProjectDataCacheContentHintType = "updateProjectDataCache_11"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache12                UpdateProjectDataCacheContentHintType = "updateProjectDataCache_12"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache13                UpdateProjectDataCacheContentHintType = "updateProjectDataCache_13"
	UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache14                UpdateProjectDataCacheContentHintType = "updateProjectDataCache_14"
)

type UpdateProjectDataCacheContentHint struct {
	UpdateProjectDataCacheProjectsResponse1 *UpdateProjectDataCacheProjectsResponse1
	UpdateProjectDataCacheProjectsResponse2 *UpdateProjectDataCacheProjectsResponse2
	UpdateProjectDataCacheProjects3         *UpdateProjectDataCacheProjects3
	UpdateProjectDataCache4                 *UpdateProjectDataCache4
	UpdateProjectDataCache5                 *UpdateProjectDataCache5
	UpdateProjectDataCache6                 *UpdateProjectDataCache6
	UpdateProjectDataCache7                 *UpdateProjectDataCache7
	UpdateProjectDataCache8                 *UpdateProjectDataCache8
	UpdateProjectDataCache9                 *UpdateProjectDataCache9
	UpdateProjectDataCache10                *UpdateProjectDataCache10
	UpdateProjectDataCache11                *UpdateProjectDataCache11
	UpdateProjectDataCache12                *UpdateProjectDataCache12
	UpdateProjectDataCache13                *UpdateProjectDataCache13
	UpdateProjectDataCache14                *UpdateProjectDataCache14

	Type UpdateProjectDataCacheContentHintType
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCacheProjectsResponse1(updateProjectDataCacheProjectsResponse1 UpdateProjectDataCacheProjectsResponse1) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse1

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCacheProjectsResponse1: &updateProjectDataCacheProjectsResponse1,
		Type:                                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCacheProjectsResponse2(updateProjectDataCacheProjectsResponse2 UpdateProjectDataCacheProjectsResponse2) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse2

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCacheProjectsResponse2: &updateProjectDataCacheProjectsResponse2,
		Type:                                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCacheProjects3(updateProjectDataCacheProjects3 UpdateProjectDataCacheProjects3) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjects3

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCacheProjects3: &updateProjectDataCacheProjects3,
		Type:                            typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache4(updateProjectDataCache4 UpdateProjectDataCache4) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache4

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache4: &updateProjectDataCache4,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache5(updateProjectDataCache5 UpdateProjectDataCache5) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache5

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache5: &updateProjectDataCache5,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache6(updateProjectDataCache6 UpdateProjectDataCache6) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache6

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache6: &updateProjectDataCache6,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache7(updateProjectDataCache7 UpdateProjectDataCache7) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache7

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache7: &updateProjectDataCache7,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache8(updateProjectDataCache8 UpdateProjectDataCache8) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache8

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache8: &updateProjectDataCache8,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache9(updateProjectDataCache9 UpdateProjectDataCache9) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache9

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache9: &updateProjectDataCache9,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache10(updateProjectDataCache10 UpdateProjectDataCache10) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache10

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache10: &updateProjectDataCache10,
		Type:                     typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache11(updateProjectDataCache11 UpdateProjectDataCache11) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache11

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache11: &updateProjectDataCache11,
		Type:                     typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache12(updateProjectDataCache12 UpdateProjectDataCache12) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache12

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache12: &updateProjectDataCache12,
		Type:                     typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache13(updateProjectDataCache13 UpdateProjectDataCache13) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache13

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache13: &updateProjectDataCache13,
		Type:                     typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUpdateProjectDataCache14(updateProjectDataCache14 UpdateProjectDataCache14) UpdateProjectDataCacheContentHint {
	typ := UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache14

	return UpdateProjectDataCacheContentHint{
		UpdateProjectDataCache14: &updateProjectDataCache14,
		Type:                     typ,
	}
}

func (u *UpdateProjectDataCacheContentHint) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProjectsResponse1 UpdateProjectDataCacheProjectsResponse1 = UpdateProjectDataCacheProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse1, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse1 = &updateProjectDataCacheProjectsResponse1
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse1
		return nil
	}

	var updateProjectDataCacheProjectsResponse2 UpdateProjectDataCacheProjectsResponse2 = UpdateProjectDataCacheProjectsResponse2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse2, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse2 = &updateProjectDataCacheProjectsResponse2
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjectsResponse2
		return nil
	}

	var updateProjectDataCacheProjects3 UpdateProjectDataCacheProjects3 = UpdateProjectDataCacheProjects3{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjects3, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjects3 = &updateProjectDataCacheProjects3
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCacheProjects3
		return nil
	}

	var updateProjectDataCache4 UpdateProjectDataCache4 = UpdateProjectDataCache4{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache4, "", true, true); err == nil {
		u.UpdateProjectDataCache4 = &updateProjectDataCache4
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache4
		return nil
	}

	var updateProjectDataCache5 UpdateProjectDataCache5 = UpdateProjectDataCache5{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache5, "", true, true); err == nil {
		u.UpdateProjectDataCache5 = &updateProjectDataCache5
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache5
		return nil
	}

	var updateProjectDataCache6 UpdateProjectDataCache6 = UpdateProjectDataCache6{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache6, "", true, true); err == nil {
		u.UpdateProjectDataCache6 = &updateProjectDataCache6
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache6
		return nil
	}

	var updateProjectDataCache7 UpdateProjectDataCache7 = UpdateProjectDataCache7{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache7, "", true, true); err == nil {
		u.UpdateProjectDataCache7 = &updateProjectDataCache7
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache7
		return nil
	}

	var updateProjectDataCache8 UpdateProjectDataCache8 = UpdateProjectDataCache8{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache8, "", true, true); err == nil {
		u.UpdateProjectDataCache8 = &updateProjectDataCache8
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache8
		return nil
	}

	var updateProjectDataCache9 UpdateProjectDataCache9 = UpdateProjectDataCache9{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache9, "", true, true); err == nil {
		u.UpdateProjectDataCache9 = &updateProjectDataCache9
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache9
		return nil
	}

	var updateProjectDataCache10 UpdateProjectDataCache10 = UpdateProjectDataCache10{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache10, "", true, true); err == nil {
		u.UpdateProjectDataCache10 = &updateProjectDataCache10
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache10
		return nil
	}

	var updateProjectDataCache11 UpdateProjectDataCache11 = UpdateProjectDataCache11{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache11, "", true, true); err == nil {
		u.UpdateProjectDataCache11 = &updateProjectDataCache11
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache11
		return nil
	}

	var updateProjectDataCache12 UpdateProjectDataCache12 = UpdateProjectDataCache12{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache12, "", true, true); err == nil {
		u.UpdateProjectDataCache12 = &updateProjectDataCache12
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache12
		return nil
	}

	var updateProjectDataCache13 UpdateProjectDataCache13 = UpdateProjectDataCache13{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache13, "", true, true); err == nil {
		u.UpdateProjectDataCache13 = &updateProjectDataCache13
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache13
		return nil
	}

	var updateProjectDataCache14 UpdateProjectDataCache14 = UpdateProjectDataCache14{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache14, "", true, true); err == nil {
		u.UpdateProjectDataCache14 = &updateProjectDataCache14
		u.Type = UpdateProjectDataCacheContentHintTypeUpdateProjectDataCache14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheContentHint", string(data))
}

func (u UpdateProjectDataCacheContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheProjectsResponse1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse1, "", true)
	}

	if u.UpdateProjectDataCacheProjectsResponse2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse2, "", true)
	}

	if u.UpdateProjectDataCacheProjects3 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjects3, "", true)
	}

	if u.UpdateProjectDataCache4 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache4, "", true)
	}

	if u.UpdateProjectDataCache5 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache5, "", true)
	}

	if u.UpdateProjectDataCache6 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache6, "", true)
	}

	if u.UpdateProjectDataCache7 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache7, "", true)
	}

	if u.UpdateProjectDataCache8 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache8, "", true)
	}

	if u.UpdateProjectDataCache9 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache9, "", true)
	}

	if u.UpdateProjectDataCache10 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache10, "", true)
	}

	if u.UpdateProjectDataCache11 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache11, "", true)
	}

	if u.UpdateProjectDataCache12 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache12, "", true)
	}

	if u.UpdateProjectDataCache13 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache13, "", true)
	}

	if u.UpdateProjectDataCache14 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache14, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheContentHint: all fields are null")
}

type UpdateProjectDataCacheProjectsResponse200Type string

const (
	UpdateProjectDataCacheProjectsResponse200TypeFlagsSecret UpdateProjectDataCacheProjectsResponse200Type = "flags-secret"
)

func (e UpdateProjectDataCacheProjectsResponse200Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectDataCacheProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200Type: %v", v)
	}
}

// UpdateProjectDataCacheInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type UpdateProjectDataCacheInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                                        `json:"encryptedValue"`
	Type           UpdateProjectDataCacheProjectsResponse200Type `json:"type"`
}

func (o *UpdateProjectDataCacheInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *UpdateProjectDataCacheInternalContentHint) GetType() UpdateProjectDataCacheProjectsResponse200Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200Type("")
	}
	return o.Type
}

type UpdateProjectDataCacheProjectsResponse2002 string

const (
	UpdateProjectDataCacheProjectsResponse2002Production  UpdateProjectDataCacheProjectsResponse2002 = "production"
	UpdateProjectDataCacheProjectsResponse2002Preview     UpdateProjectDataCacheProjectsResponse2002 = "preview"
	UpdateProjectDataCacheProjectsResponse2002Development UpdateProjectDataCacheProjectsResponse2002 = "development"
)

func (e UpdateProjectDataCacheProjectsResponse2002) ToPointer() *UpdateProjectDataCacheProjectsResponse2002 {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse2002) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheProjectsResponse2002(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse2002: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse2001 string

const (
	UpdateProjectDataCacheProjectsResponse2001Production  UpdateProjectDataCacheProjectsResponse2001 = "production"
	UpdateProjectDataCacheProjectsResponse2001Preview     UpdateProjectDataCacheProjectsResponse2001 = "preview"
	UpdateProjectDataCacheProjectsResponse2001Development UpdateProjectDataCacheProjectsResponse2001 = "development"
)

func (e UpdateProjectDataCacheProjectsResponse2001) ToPointer() *UpdateProjectDataCacheProjectsResponse2001 {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse2001) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheProjectsResponse2001(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse2001: %v", v)
	}
}

type UpdateProjectDataCacheTargetType string

const (
	UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheProjectsResponse2001 UpdateProjectDataCacheTargetType = "arrayOfUpdateProjectDataCacheProjectsResponse2001"
	UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheProjectsResponse2002        UpdateProjectDataCacheTargetType = "updateProjectDataCache_projects_response_200_2"
)

type UpdateProjectDataCacheTarget struct {
	ArrayOfUpdateProjectDataCacheProjectsResponse2001 []UpdateProjectDataCacheProjectsResponse2001
	UpdateProjectDataCacheProjectsResponse2002        *UpdateProjectDataCacheProjectsResponse2002

	Type UpdateProjectDataCacheTargetType
}

func CreateUpdateProjectDataCacheTargetArrayOfUpdateProjectDataCacheProjectsResponse2001(arrayOfUpdateProjectDataCacheProjectsResponse2001 []UpdateProjectDataCacheProjectsResponse2001) UpdateProjectDataCacheTarget {
	typ := UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheProjectsResponse2001

	return UpdateProjectDataCacheTarget{
		ArrayOfUpdateProjectDataCacheProjectsResponse2001: arrayOfUpdateProjectDataCacheProjectsResponse2001,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheTargetUpdateProjectDataCacheProjectsResponse2002(updateProjectDataCacheProjectsResponse2002 UpdateProjectDataCacheProjectsResponse2002) UpdateProjectDataCacheTarget {
	typ := UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheProjectsResponse2002

	return UpdateProjectDataCacheTarget{
		UpdateProjectDataCacheProjectsResponse2002: &updateProjectDataCacheProjectsResponse2002,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheTarget) UnmarshalJSON(data []byte) error {

	var arrayOfUpdateProjectDataCacheProjectsResponse2001 []UpdateProjectDataCacheProjectsResponse2001 = []UpdateProjectDataCacheProjectsResponse2001{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateProjectDataCacheProjectsResponse2001, "", true, true); err == nil {
		u.ArrayOfUpdateProjectDataCacheProjectsResponse2001 = arrayOfUpdateProjectDataCacheProjectsResponse2001
		u.Type = UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheProjectsResponse2001
		return nil
	}

	var updateProjectDataCacheProjectsResponse2002 UpdateProjectDataCacheProjectsResponse2002 = UpdateProjectDataCacheProjectsResponse2002("")
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse2002, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse2002 = &updateProjectDataCacheProjectsResponse2002
		u.Type = UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheProjectsResponse2002
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTarget", string(data))
}

func (u UpdateProjectDataCacheTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfUpdateProjectDataCacheProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateProjectDataCacheProjectsResponse2001, "", true)
	}

	if u.UpdateProjectDataCacheProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse2002, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTarget: all fields are null")
}

type UpdateProjectDataCacheType string

const (
	UpdateProjectDataCacheTypeSecret    UpdateProjectDataCacheType = "secret"
	UpdateProjectDataCacheTypeSystem    UpdateProjectDataCacheType = "system"
	UpdateProjectDataCacheTypeEncrypted UpdateProjectDataCacheType = "encrypted"
	UpdateProjectDataCacheTypePlain     UpdateProjectDataCacheType = "plain"
	UpdateProjectDataCacheTypeSensitive UpdateProjectDataCacheType = "sensitive"
)

func (e UpdateProjectDataCacheType) ToPointer() *UpdateProjectDataCacheType {
	return &e
}
func (e *UpdateProjectDataCacheType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectDataCacheType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheType: %v", v)
	}
}

type UpdateProjectDataCacheEnv struct {
	Comment             *string                            `json:"comment,omitempty"`
	ConfigurationID     *string                            `json:"configurationId,omitempty"`
	ContentHint         *UpdateProjectDataCacheContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                           `json:"createdAt,omitempty"`
	CreatedBy           *string                            `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                            `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *UpdateProjectDataCacheInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                                     `json:"key"`
	Target              *UpdateProjectDataCacheTarget              `json:"target,omitempty"`
	Type                UpdateProjectDataCacheType                 `json:"type"`
	UpdatedAt           *float64                                   `json:"updatedAt,omitempty"`
	UpdatedBy           *string                                    `json:"updatedBy,omitempty"`
	Value               string                                     `json:"value"`
}

func (o *UpdateProjectDataCacheEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateProjectDataCacheEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectDataCacheEnv) GetContentHint() *UpdateProjectDataCacheContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectDataCacheEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCacheEnv) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *UpdateProjectDataCacheEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectDataCacheEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectDataCacheEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectDataCacheEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectDataCacheEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectDataCacheEnv) GetInternalContentHint() *UpdateProjectDataCacheInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *UpdateProjectDataCacheEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectDataCacheEnv) GetTarget() *UpdateProjectDataCacheTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCacheEnv) GetType() UpdateProjectDataCacheType {
	if o == nil {
		return UpdateProjectDataCacheType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectDataCacheEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCacheFramework string

const (
	UpdateProjectDataCacheFrameworkBlitzjs        UpdateProjectDataCacheFramework = "blitzjs"
	UpdateProjectDataCacheFrameworkNextjs         UpdateProjectDataCacheFramework = "nextjs"
	UpdateProjectDataCacheFrameworkGatsby         UpdateProjectDataCacheFramework = "gatsby"
	UpdateProjectDataCacheFrameworkRemix          UpdateProjectDataCacheFramework = "remix"
	UpdateProjectDataCacheFrameworkAstro          UpdateProjectDataCacheFramework = "astro"
	UpdateProjectDataCacheFrameworkHexo           UpdateProjectDataCacheFramework = "hexo"
	UpdateProjectDataCacheFrameworkEleventy       UpdateProjectDataCacheFramework = "eleventy"
	UpdateProjectDataCacheFrameworkDocusaurus2    UpdateProjectDataCacheFramework = "docusaurus-2"
	UpdateProjectDataCacheFrameworkDocusaurus     UpdateProjectDataCacheFramework = "docusaurus"
	UpdateProjectDataCacheFrameworkPreact         UpdateProjectDataCacheFramework = "preact"
	UpdateProjectDataCacheFrameworkSolidstart1    UpdateProjectDataCacheFramework = "solidstart-1"
	UpdateProjectDataCacheFrameworkSolidstart     UpdateProjectDataCacheFramework = "solidstart"
	UpdateProjectDataCacheFrameworkDojo           UpdateProjectDataCacheFramework = "dojo"
	UpdateProjectDataCacheFrameworkEmber          UpdateProjectDataCacheFramework = "ember"
	UpdateProjectDataCacheFrameworkVue            UpdateProjectDataCacheFramework = "vue"
	UpdateProjectDataCacheFrameworkScully         UpdateProjectDataCacheFramework = "scully"
	UpdateProjectDataCacheFrameworkIonicAngular   UpdateProjectDataCacheFramework = "ionic-angular"
	UpdateProjectDataCacheFrameworkAngular        UpdateProjectDataCacheFramework = "angular"
	UpdateProjectDataCacheFrameworkPolymer        UpdateProjectDataCacheFramework = "polymer"
	UpdateProjectDataCacheFrameworkSvelte         UpdateProjectDataCacheFramework = "svelte"
	UpdateProjectDataCacheFrameworkSveltekit      UpdateProjectDataCacheFramework = "sveltekit"
	UpdateProjectDataCacheFrameworkSveltekit1     UpdateProjectDataCacheFramework = "sveltekit-1"
	UpdateProjectDataCacheFrameworkIonicReact     UpdateProjectDataCacheFramework = "ionic-react"
	UpdateProjectDataCacheFrameworkCreateReactApp UpdateProjectDataCacheFramework = "create-react-app"
	UpdateProjectDataCacheFrameworkGridsome       UpdateProjectDataCacheFramework = "gridsome"
	UpdateProjectDataCacheFrameworkUmijs          UpdateProjectDataCacheFramework = "umijs"
	UpdateProjectDataCacheFrameworkSapper         UpdateProjectDataCacheFramework = "sapper"
	UpdateProjectDataCacheFrameworkSaber          UpdateProjectDataCacheFramework = "saber"
	UpdateProjectDataCacheFrameworkStencil        UpdateProjectDataCacheFramework = "stencil"
	UpdateProjectDataCacheFrameworkNuxtjs         UpdateProjectDataCacheFramework = "nuxtjs"
	UpdateProjectDataCacheFrameworkRedwoodjs      UpdateProjectDataCacheFramework = "redwoodjs"
	UpdateProjectDataCacheFrameworkHugo           UpdateProjectDataCacheFramework = "hugo"
	UpdateProjectDataCacheFrameworkJekyll         UpdateProjectDataCacheFramework = "jekyll"
	UpdateProjectDataCacheFrameworkBrunch         UpdateProjectDataCacheFramework = "brunch"
	UpdateProjectDataCacheFrameworkMiddleman      UpdateProjectDataCacheFramework = "middleman"
	UpdateProjectDataCacheFrameworkZola           UpdateProjectDataCacheFramework = "zola"
	UpdateProjectDataCacheFrameworkHydrogen       UpdateProjectDataCacheFramework = "hydrogen"
	UpdateProjectDataCacheFrameworkVite           UpdateProjectDataCacheFramework = "vite"
	UpdateProjectDataCacheFrameworkVitepress      UpdateProjectDataCacheFramework = "vitepress"
	UpdateProjectDataCacheFrameworkVuepress       UpdateProjectDataCacheFramework = "vuepress"
	UpdateProjectDataCacheFrameworkParcel         UpdateProjectDataCacheFramework = "parcel"
	UpdateProjectDataCacheFrameworkSanity         UpdateProjectDataCacheFramework = "sanity"
	UpdateProjectDataCacheFrameworkStorybook      UpdateProjectDataCacheFramework = "storybook"
)

func (e UpdateProjectDataCacheFramework) ToPointer() *UpdateProjectDataCacheFramework {
	return &e
}
func (e *UpdateProjectDataCacheFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectDataCacheFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheFramework: %v", v)
	}
}

type UpdateProjectDataCacheGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *UpdateProjectDataCacheGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *UpdateProjectDataCacheGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type UpdateProjectDataCacheJobStatus string

const (
	UpdateProjectDataCacheJobStatusSucceeded  UpdateProjectDataCacheJobStatus = "succeeded"
	UpdateProjectDataCacheJobStatusFailed     UpdateProjectDataCacheJobStatus = "failed"
	UpdateProjectDataCacheJobStatusSkipped    UpdateProjectDataCacheJobStatus = "skipped"
	UpdateProjectDataCacheJobStatusPending    UpdateProjectDataCacheJobStatus = "pending"
	UpdateProjectDataCacheJobStatusInProgress UpdateProjectDataCacheJobStatus = "in-progress"
)

func (e UpdateProjectDataCacheJobStatus) ToPointer() *UpdateProjectDataCacheJobStatus {
	return &e
}
func (e *UpdateProjectDataCacheJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectDataCacheJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheJobStatus: %v", v)
	}
}

type UpdateProjectDataCacheProjectsType string

const (
	UpdateProjectDataCacheProjectsTypePromote  UpdateProjectDataCacheProjectsType = "promote"
	UpdateProjectDataCacheProjectsTypeRollback UpdateProjectDataCacheProjectsType = "rollback"
)

func (e UpdateProjectDataCacheProjectsType) ToPointer() *UpdateProjectDataCacheProjectsType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectDataCacheProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsType: %v", v)
	}
}

type UpdateProjectDataCacheLastAliasRequest struct {
	FromDeploymentID string                             `json:"fromDeploymentId"`
	JobStatus        UpdateProjectDataCacheJobStatus    `json:"jobStatus"`
	RequestedAt      float64                            `json:"requestedAt"`
	ToDeploymentID   string                             `json:"toDeploymentId"`
	Type             UpdateProjectDataCacheProjectsType `json:"type"`
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetJobStatus() UpdateProjectDataCacheJobStatus {
	if o == nil {
		return UpdateProjectDataCacheJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetType() UpdateProjectDataCacheProjectsType {
	if o == nil {
		return UpdateProjectDataCacheProjectsType("")
	}
	return o.Type
}

type UpdateProjectDataCacheLastRollbackTarget struct {
}

type UpdateProjectDataCacheAliasAssignedType string

const (
	UpdateProjectDataCacheAliasAssignedTypeNumber  UpdateProjectDataCacheAliasAssignedType = "number"
	UpdateProjectDataCacheAliasAssignedTypeBoolean UpdateProjectDataCacheAliasAssignedType = "boolean"
)

type UpdateProjectDataCacheAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type UpdateProjectDataCacheAliasAssignedType
}

func CreateUpdateProjectDataCacheAliasAssignedNumber(number float64) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeNumber

	return UpdateProjectDataCacheAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectDataCacheAliasAssignedBoolean(boolean bool) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeBoolean

	return UpdateProjectDataCacheAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCacheAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectDataCacheAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectDataCacheAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheAliasAssigned", string(data))
}

func (u UpdateProjectDataCacheAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheAliasAssigned: all fields are null")
}

type UpdateProjectDataCacheAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCacheAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCacheAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectDataCacheBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *UpdateProjectDataCacheBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectDataCacheBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type UpdateProjectDataCacheChecksConclusion string

const (
	UpdateProjectDataCacheChecksConclusionSucceeded UpdateProjectDataCacheChecksConclusion = "succeeded"
	UpdateProjectDataCacheChecksConclusionFailed    UpdateProjectDataCacheChecksConclusion = "failed"
	UpdateProjectDataCacheChecksConclusionSkipped   UpdateProjectDataCacheChecksConclusion = "skipped"
	UpdateProjectDataCacheChecksConclusionCanceled  UpdateProjectDataCacheChecksConclusion = "canceled"
)

func (e UpdateProjectDataCacheChecksConclusion) ToPointer() *UpdateProjectDataCacheChecksConclusion {
	return &e
}
func (e *UpdateProjectDataCacheChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCacheChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCacheChecksState string

const (
	UpdateProjectDataCacheChecksStateRegistered UpdateProjectDataCacheChecksState = "registered"
	UpdateProjectDataCacheChecksStateRunning    UpdateProjectDataCacheChecksState = "running"
	UpdateProjectDataCacheChecksStateCompleted  UpdateProjectDataCacheChecksState = "completed"
)

func (e UpdateProjectDataCacheChecksState) ToPointer() *UpdateProjectDataCacheChecksState {
	return &e
}
func (e *UpdateProjectDataCacheChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCacheChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksState: %v", v)
	}
}

type UpdateProjectDataCacheCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCacheCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCacheCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCacheCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCacheCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCacheCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCacheOidcTokenClaimsType string

const (
	UpdateProjectDataCacheOidcTokenClaimsTypeStr        UpdateProjectDataCacheOidcTokenClaimsType = "str"
	UpdateProjectDataCacheOidcTokenClaimsTypeArrayOfStr UpdateProjectDataCacheOidcTokenClaimsType = "arrayOfStr"
)

type UpdateProjectDataCacheOidcTokenClaims struct {
	Str        *string
	ArrayOfStr []string

	Type UpdateProjectDataCacheOidcTokenClaimsType
}

func CreateUpdateProjectDataCacheOidcTokenClaimsStr(str string) UpdateProjectDataCacheOidcTokenClaims {
	typ := UpdateProjectDataCacheOidcTokenClaimsTypeStr

	return UpdateProjectDataCacheOidcTokenClaims{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheOidcTokenClaimsArrayOfStr(arrayOfStr []string) UpdateProjectDataCacheOidcTokenClaims {
	typ := UpdateProjectDataCacheOidcTokenClaimsTypeArrayOfStr

	return UpdateProjectDataCacheOidcTokenClaims{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateProjectDataCacheOidcTokenClaims) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheOidcTokenClaimsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectDataCacheOidcTokenClaimsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheOidcTokenClaims", string(data))
}

func (u UpdateProjectDataCacheOidcTokenClaims) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheOidcTokenClaims: all fields are null")
}

type UpdateProjectDataCachePlan string

const (
	UpdateProjectDataCachePlanPro        UpdateProjectDataCachePlan = "pro"
	UpdateProjectDataCachePlanEnterprise UpdateProjectDataCachePlan = "enterprise"
	UpdateProjectDataCachePlanHobby      UpdateProjectDataCachePlan = "hobby"
)

func (e UpdateProjectDataCachePlan) ToPointer() *UpdateProjectDataCachePlan {
	return &e
}
func (e *UpdateProjectDataCachePlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectDataCachePlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCachePlan: %v", v)
	}
}

type UpdateProjectDataCacheReadyState string

const (
	UpdateProjectDataCacheReadyStateBuilding     UpdateProjectDataCacheReadyState = "BUILDING"
	UpdateProjectDataCacheReadyStateError        UpdateProjectDataCacheReadyState = "ERROR"
	UpdateProjectDataCacheReadyStateInitializing UpdateProjectDataCacheReadyState = "INITIALIZING"
	UpdateProjectDataCacheReadyStateQueued       UpdateProjectDataCacheReadyState = "QUEUED"
	UpdateProjectDataCacheReadyStateReady        UpdateProjectDataCacheReadyState = "READY"
	UpdateProjectDataCacheReadyStateCanceled     UpdateProjectDataCacheReadyState = "CANCELED"
)

func (e UpdateProjectDataCacheReadyState) ToPointer() *UpdateProjectDataCacheReadyState {
	return &e
}
func (e *UpdateProjectDataCacheReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCacheReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadyState: %v", v)
	}
}

type UpdateProjectDataCacheReadySubstate string

const (
	UpdateProjectDataCacheReadySubstateStaged   UpdateProjectDataCacheReadySubstate = "STAGED"
	UpdateProjectDataCacheReadySubstatePromoted UpdateProjectDataCacheReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCacheReadySubstate) ToPointer() *UpdateProjectDataCacheReadySubstate {
	return &e
}
func (e *UpdateProjectDataCacheReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCacheReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadySubstate: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponseType string

const (
	UpdateProjectDataCacheProjectsResponseTypeLambdas UpdateProjectDataCacheProjectsResponseType = "LAMBDAS"
)

func (e UpdateProjectDataCacheProjectsResponseType) ToPointer() *UpdateProjectDataCacheProjectsResponseType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCacheProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponseType: %v", v)
	}
}

type UpdateProjectDataCacheLatestDeployments struct {
	Alias                  []string                                         `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCacheAliasAssigned             `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCacheAliasError                `json:"aliasError,omitempty"`
	AliasFinal             *string                                          `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                         `json:"automaticAliases,omitempty"`
	BuildingAt             *float64                                         `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCacheBuilds                   `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCacheChecksConclusion          `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCacheChecksState               `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                          `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                          `json:"createdAt"`
	CreatedIn              string                                           `json:"createdIn"`
	Creator                *UpdateProjectDataCacheCreator                   `json:"creator"`
	DeploymentHostname     string                                           `json:"deploymentHostname"`
	Forced                 *bool                                            `json:"forced,omitempty"`
	ID                     string                                           `json:"id"`
	Meta                   map[string]string                                `json:"meta,omitempty"`
	MonorepoManager        *string                                          `json:"monorepoManager,omitempty"`
	Name                   string                                           `json:"name"`
	OidcTokenClaims        map[string]UpdateProjectDataCacheOidcTokenClaims `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectDataCachePlan                       `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                      `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                       `json:"private"`
	ReadyAt                *float64                                   `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCacheReadyState           `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCacheReadySubstate       `json:"readySubstate,omitempty"`
	RequestedAt            *float64                                   `json:"requestedAt,omitempty"`
	Target                 *string                                    `json:"target,omitempty"`
	TeamID                 *string                                    `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCacheProjectsResponseType `json:"type"`
	URL                    string                                     `json:"url"`
	UserID                 string                                     `json:"userId"`
	WithCache              *bool                                      `json:"withCache,omitempty"`
}

func (o *UpdateProjectDataCacheLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectDataCacheLatestDeployments) GetAliasAssigned() *UpdateProjectDataCacheAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectDataCacheLatestDeployments) GetAliasError() *UpdateProjectDataCacheAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectDataCacheLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectDataCacheLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectDataCacheLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectDataCacheLatestDeployments) GetBuilds() []UpdateProjectDataCacheBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectDataCacheLatestDeployments) GetChecksConclusion() *UpdateProjectDataCacheChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectDataCacheLatestDeployments) GetChecksState() *UpdateProjectDataCacheChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectDataCacheLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectDataCacheLatestDeployments) GetCreator() *UpdateProjectDataCacheCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectDataCacheLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectDataCacheLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectDataCacheLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectDataCacheLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectDataCacheLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheLatestDeployments) GetOidcTokenClaims() map[string]UpdateProjectDataCacheOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectDataCacheLatestDeployments) GetPlan() UpdateProjectDataCachePlan {
	if o == nil {
		return UpdateProjectDataCachePlan("")
	}
	return o.Plan
}

func (o *UpdateProjectDataCacheLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectDataCacheLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectDataCacheLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectDataCacheLatestDeployments) GetReadyState() UpdateProjectDataCacheReadyState {
	if o == nil {
		return UpdateProjectDataCacheReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectDataCacheLatestDeployments) GetReadySubstate() *UpdateProjectDataCacheReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectDataCacheLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCacheLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCacheLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCacheLatestDeployments) GetType() UpdateProjectDataCacheProjectsResponseType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponseType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectDataCacheLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCacheLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCacheProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkTypeBitbucket UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType = "bitbucket"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType: %v", v)
	}
}

type UpdateProjectDataCache3 struct {
	CreatedAt        *float64                                                                      `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheProjectsResponseDeployHooks                           `json:"deployHooks"`
	GitCredentialID  *string                                                                       `json:"gitCredentialId,omitempty"`
	Name             *string                                                                       `json:"name,omitempty"`
	Owner            *string                                                                       `json:"owner,omitempty"`
	ProductionBranch *string                                                                       `json:"productionBranch,omitempty"`
	Slug             *string                                                                       `json:"slug,omitempty"`
	Sourceless       *bool                                                                         `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType `json:"type,omitempty"`
	UpdatedAt        *float64                                                                      `json:"updatedAt,omitempty"`
	UUID             *string                                                                       `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                                       `json:"workspaceUuid,omitempty"`
}

func (o *UpdateProjectDataCache3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache3) GetDeployHooks() []UpdateProjectDataCacheProjectsResponseDeployHooks {
	if o == nil {
		return []UpdateProjectDataCacheProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectDataCache3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProjectDataCache3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCache3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache3) GetType() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCache3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProjectDataCache3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type UpdateProjectDataCacheProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTypeGitlab UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType = "gitlab"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type UpdateProjectDataCache2 struct {
	CreatedAt                *float64                                                                  `json:"createdAt,omitempty"`
	DeployHooks              []UpdateProjectDataCacheProjectsDeployHooks                               `json:"deployHooks"`
	GitCredentialID          *string                                                                   `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                                   `json:"productionBranch,omitempty"`
	ProjectID                *string                                                                   `json:"projectId,omitempty"`
	ProjectName              *string                                                                   `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                                   `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                                   `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                                   `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                                     `json:"sourceless,omitempty"`
	Type                     *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType `json:"type,omitempty"`
	UpdatedAt                *float64                                                                  `json:"updatedAt,omitempty"`
}

func (o *UpdateProjectDataCache2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache2) GetDeployHooks() []UpdateProjectDataCacheProjectsDeployHooks {
	if o == nil {
		return []UpdateProjectDataCacheProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCache2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProjectDataCache2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProjectDataCache2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProjectDataCache2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProjectDataCache2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache2) GetType() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONTypeGithub UpdateProjectDataCacheProjectsResponse200ApplicationJSONType = "github"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type UpdateProjectDataCache1 struct {
	CreatedAt        *float64                                                      `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheDeployHooks                           `json:"deployHooks"`
	GitCredentialID  *string                                                       `json:"gitCredentialId,omitempty"`
	Org              *string                                                       `json:"org,omitempty"`
	ProductionBranch *string                                                       `json:"productionBranch,omitempty"`
	Repo             *string                                                       `json:"repo,omitempty"`
	RepoID           *float64                                                      `json:"repoId,omitempty"`
	Sourceless       *bool                                                         `json:"sourceless,omitempty"`
	Type             *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType `json:"type,omitempty"`
	UpdatedAt        *float64                                                      `json:"updatedAt,omitempty"`
}

func (o *UpdateProjectDataCache1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCache1) GetDeployHooks() []UpdateProjectDataCacheDeployHooks {
	if o == nil {
		return []UpdateProjectDataCacheDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCache1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCache1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectDataCache1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProjectDataCache1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectDataCache1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectDataCache1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCache1) GetType() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCache1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheLinkType string

const (
	UpdateProjectDataCacheLinkTypeUpdateProjectDataCache1 UpdateProjectDataCacheLinkType = "updateProjectDataCache_1"
	UpdateProjectDataCacheLinkTypeUpdateProjectDataCache2 UpdateProjectDataCacheLinkType = "updateProjectDataCache_2"
	UpdateProjectDataCacheLinkTypeUpdateProjectDataCache3 UpdateProjectDataCacheLinkType = "updateProjectDataCache_3"
)

type UpdateProjectDataCacheLink struct {
	UpdateProjectDataCache1 *UpdateProjectDataCache1
	UpdateProjectDataCache2 *UpdateProjectDataCache2
	UpdateProjectDataCache3 *UpdateProjectDataCache3

	Type UpdateProjectDataCacheLinkType
}

func CreateUpdateProjectDataCacheLinkUpdateProjectDataCache1(updateProjectDataCache1 UpdateProjectDataCache1) UpdateProjectDataCacheLink {
	typ := UpdateProjectDataCacheLinkTypeUpdateProjectDataCache1

	return UpdateProjectDataCacheLink{
		UpdateProjectDataCache1: &updateProjectDataCache1,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheLinkUpdateProjectDataCache2(updateProjectDataCache2 UpdateProjectDataCache2) UpdateProjectDataCacheLink {
	typ := UpdateProjectDataCacheLinkTypeUpdateProjectDataCache2

	return UpdateProjectDataCacheLink{
		UpdateProjectDataCache2: &updateProjectDataCache2,
		Type:                    typ,
	}
}

func CreateUpdateProjectDataCacheLinkUpdateProjectDataCache3(updateProjectDataCache3 UpdateProjectDataCache3) UpdateProjectDataCacheLink {
	typ := UpdateProjectDataCacheLinkTypeUpdateProjectDataCache3

	return UpdateProjectDataCacheLink{
		UpdateProjectDataCache3: &updateProjectDataCache3,
		Type:                    typ,
	}
}

func (u *UpdateProjectDataCacheLink) UnmarshalJSON(data []byte) error {

	var updateProjectDataCache1 UpdateProjectDataCache1 = UpdateProjectDataCache1{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache1, "", true, true); err == nil {
		u.UpdateProjectDataCache1 = &updateProjectDataCache1
		u.Type = UpdateProjectDataCacheLinkTypeUpdateProjectDataCache1
		return nil
	}

	var updateProjectDataCache2 UpdateProjectDataCache2 = UpdateProjectDataCache2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache2, "", true, true); err == nil {
		u.UpdateProjectDataCache2 = &updateProjectDataCache2
		u.Type = UpdateProjectDataCacheLinkTypeUpdateProjectDataCache2
		return nil
	}

	var updateProjectDataCache3 UpdateProjectDataCache3 = UpdateProjectDataCache3{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCache3, "", true, true); err == nil {
		u.UpdateProjectDataCache3 = &updateProjectDataCache3
		u.Type = UpdateProjectDataCacheLinkTypeUpdateProjectDataCache3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheLink", string(data))
}

func (u UpdateProjectDataCacheLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCache1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache1, "", true)
	}

	if u.UpdateProjectDataCache2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache2, "", true)
	}

	if u.UpdateProjectDataCache3 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCache3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheLink: all fields are null")
}

type UpdateProjectDataCacheNodeVersion string

const (
	UpdateProjectDataCacheNodeVersionTwentyX   UpdateProjectDataCacheNodeVersion = "20.x"
	UpdateProjectDataCacheNodeVersionEighteenX UpdateProjectDataCacheNodeVersion = "18.x"
	UpdateProjectDataCacheNodeVersionSixteenX  UpdateProjectDataCacheNodeVersion = "16.x"
	UpdateProjectDataCacheNodeVersionFourteenX UpdateProjectDataCacheNodeVersion = "14.x"
	UpdateProjectDataCacheNodeVersionTwelveX   UpdateProjectDataCacheNodeVersion = "12.x"
	UpdateProjectDataCacheNodeVersionTenX      UpdateProjectDataCacheNodeVersion = "10.x"
	UpdateProjectDataCacheNodeVersionEight10X  UpdateProjectDataCacheNodeVersion = "8.10.x"
)

func (e UpdateProjectDataCacheNodeVersion) ToPointer() *UpdateProjectDataCacheNodeVersion {
	return &e
}
func (e *UpdateProjectDataCacheNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectDataCacheNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheNodeVersion: %v", v)
	}
}

type UpdateProjectDataCacheOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
}

func (o *UpdateProjectDataCacheOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type UpdateProjectDataCachePaths struct {
	Value string `json:"value"`
}

func (o *UpdateProjectDataCachePaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCacheOptionsAllowlist struct {
	Paths []UpdateProjectDataCachePaths `json:"paths"`
}

func (o *UpdateProjectDataCacheOptionsAllowlist) GetPaths() []UpdateProjectDataCachePaths {
	if o == nil {
		return []UpdateProjectDataCachePaths{}
	}
	return o.Paths
}

type UpdateProjectDataCachePasswordProtection struct {
}

type UpdateProjectDataCachePermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AccessGroup                              []shared.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	BlobStoreTokenSet                        []shared.ACLAction `json:"blobStoreTokenSet,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []shared.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []shared.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Environments                             []shared.ACLAction `json:"environments,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationEvent                         []shared.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []shared.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationStore                         []shared.ACLAction `json:"integrationStore,omitempty"`
	IntegrationStoreTokenSet                 []shared.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MarketplaceBillingData                   []shared.ACLAction `json:"marketplaceBillingData,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringSettings                       []shared.ACLAction `json:"monitoringSettings,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationStatementOfReasons           []shared.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	Oauth2Application                        []shared.ACLAction `json:"oauth2Application,omitempty"`
	Oauth2Connection                         []shared.ACLAction `json:"oauth2Connection,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OptionsAllowlist                         []shared.ACLAction `json:"optionsAllowlist,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PostgresStoreTokenSet                    []shared.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	ProductionAliasProtectionBypass          []shared.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAccessGroup                       []shared.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentExpiration              []shared.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainCheckConfig                 []shared.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectID                                []shared.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []shared.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectSupportCase                       []shared.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []shared.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RedisStoreTokenSet                       []shared.ACLAction `json:"redisStoreTokenSet,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	Repository                               []shared.ACLAction `json:"repository,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVarConnection                   []shared.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	SkewProtection                           []shared.ACLAction `json:"skewProtection,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	WebAuthn                                 []shared.ACLAction `json:"webAuthn,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *UpdateProjectDataCachePermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectDataCachePermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectDataCachePermissions) GetAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *UpdateProjectDataCachePermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectDataCachePermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectDataCachePermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCachePermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectDataCachePermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectDataCachePermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectDataCachePermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectDataCachePermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectDataCachePermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectDataCachePermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectDataCachePermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectDataCachePermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectDataCachePermissions) GetBlobStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectDataCachePermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectDataCachePermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectDataCachePermissions) GetCodeChecks() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *UpdateProjectDataCachePermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectDataCachePermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectDataCachePermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectDataCachePermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectDataCachePermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectDataCachePermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectDataCachePermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectDataCachePermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectDataCachePermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectDataCachePermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectDataCachePermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectDataCachePermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectDataCachePermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectDataCachePermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectDataCachePermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigSchema() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectDataCachePermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectDataCachePermissions) GetEnvironments() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateProjectDataCachePermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectDataCachePermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectDataCachePermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectDataCachePermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationResourceSecrets() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationStore() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStore
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectDataCachePermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectDataCachePermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectDataCachePermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectDataCachePermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectDataCachePermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectDataCachePermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceBillingData() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *UpdateProjectDataCachePermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectDataCachePermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectDataCachePermissions) GetNotificationStatementOfReasons() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *UpdateProjectDataCachePermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectDataCachePermissions) GetOauth2Application() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *UpdateProjectDataCachePermissions) GetOauth2Connection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *UpdateProjectDataCachePermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectDataCachePermissions) GetOptionsAllowlist() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectDataCachePermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectDataCachePermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCachePermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectDataCachePermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectDataCachePermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCachePermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectDataCachePermissions) GetPostgresStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectDataCachePermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectDataCachePermissions) GetProductionAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectDataCachePermissions) GetProjectAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *UpdateProjectDataCachePermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectDataCachePermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectDataCachePermissions) GetProjectDeploymentExpiration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *UpdateProjectDataCachePermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectDataCachePermissions) GetProjectID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCachePermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectDataCachePermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectDataCachePermissions) GetProjectMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *UpdateProjectDataCachePermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectDataCachePermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectDataCachePermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetProjectSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *UpdateProjectDataCachePermissions) GetProjectSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectDataCachePermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectDataCachePermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectDataCachePermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectDataCachePermissions) GetRedisStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectDataCachePermissions) GetRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *UpdateProjectDataCachePermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectDataCachePermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectDataCachePermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectDataCachePermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVarConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectDataCachePermissions) GetSkewProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *UpdateProjectDataCachePermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectDataCachePermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectDataCachePermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectDataCachePermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectDataCachePermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectDataCachePermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectDataCachePermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectDataCachePermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectDataCachePermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectDataCachePermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectDataCachePermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectDataCachePermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectDataCachePermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectDataCachePermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCachePermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectDataCachePermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectDataCachePermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectDataCachePermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectDataCachePermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectDataCachePermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectDataCachePermissions) GetWebAuthn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *UpdateProjectDataCachePermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectDataCachePermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type UpdateProjectDataCacheScope string

const (
	UpdateProjectDataCacheScopeAutomationBypass UpdateProjectDataCacheScope = "automation-bypass"
)

func (e UpdateProjectDataCacheScope) ToPointer() *UpdateProjectDataCacheScope {
	return &e
}
func (e *UpdateProjectDataCacheScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectDataCacheScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheScope: %v", v)
	}
}

type UpdateProjectDataCacheProtectionBypass struct {
	CreatedAt float64                     `json:"createdAt"`
	CreatedBy string                      `json:"createdBy"`
	Scope     UpdateProjectDataCacheScope `json:"scope"`
}

func (o *UpdateProjectDataCacheProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCacheProtectionBypass) GetScope() UpdateProjectDataCacheScope {
	if o == nil {
		return UpdateProjectDataCacheScope("")
	}
	return o.Scope
}

type UpdateProjectDataCacheHandle string

const (
	UpdateProjectDataCacheHandleInit     UpdateProjectDataCacheHandle = "init"
	UpdateProjectDataCacheHandleFinalize UpdateProjectDataCacheHandle = "finalize"
)

func (e UpdateProjectDataCacheHandle) ToPointer() *UpdateProjectDataCacheHandle {
	return &e
}
func (e *UpdateProjectDataCacheHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = UpdateProjectDataCacheHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheHandle: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost      UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypePath      UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery     UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectDataCacheValueType string

const (
	UpdateProjectDataCacheValueTypeStr                                                                   UpdateProjectDataCacheValueType = "str"
	UpdateProjectDataCacheValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectDataCacheValueType = "updateProjectDataCache_projects_response_200_ApplicationJSON_responseBody_2"
)

type UpdateProjectDataCacheValue struct {
	Str                                                                   *string
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2

	Type UpdateProjectDataCacheValueType
}

func CreateUpdateProjectDataCacheValueStr(str string) UpdateProjectDataCacheValue {
	typ := UpdateProjectDataCacheValueTypeStr

	return UpdateProjectDataCacheValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheValueUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2(updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2) UpdateProjectDataCacheValue {
	typ := UpdateProjectDataCacheValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2

	return UpdateProjectDataCacheValue{
		UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2: &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheValue) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 = &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2
		u.Type = UpdateProjectDataCacheValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheValue", string(data))
}

func (u UpdateProjectDataCacheValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheValue: all fields are null")
}

type UpdateProjectDataCacheHas struct {
	Key   *string                                                                          `json:"key,omitempty"`
	Type  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Value *UpdateProjectDataCacheValue                                                     `json:"value,omitempty"`
}

func (o *UpdateProjectDataCacheHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectDataCacheHas) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheHas) GetValue() *UpdateProjectDataCacheValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost      UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath      UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery     UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectDataCacheProjectsValueType string

const (
	UpdateProjectDataCacheProjectsValueTypeStr                                                                           UpdateProjectDataCacheProjectsValueType = "str"
	UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectDataCacheProjectsValueType = "updateProjectDataCache_projects_response_200_ApplicationJSON_responseBody_security_2"
)

type UpdateProjectDataCacheProjectsValue struct {
	Str                                                                           *string
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2

	Type UpdateProjectDataCacheProjectsValueType
}

func CreateUpdateProjectDataCacheProjectsValueStr(str string) UpdateProjectDataCacheProjectsValue {
	typ := UpdateProjectDataCacheProjectsValueTypeStr

	return UpdateProjectDataCacheProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheProjectsValueUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2(updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2) UpdateProjectDataCacheProjectsValue {
	typ := UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2

	return UpdateProjectDataCacheProjectsValue{
		UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2: &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheProjectsValue) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 = &updateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2
		u.Type = UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheProjectsValue", string(data))
}

func (u UpdateProjectDataCacheProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheProjectsValue: all fields are null")
}

type UpdateProjectDataCacheMissing struct {
	Key   *string                                                                                        `json:"key,omitempty"`
	Type  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Value *UpdateProjectDataCacheProjectsValue                                                           `json:"value,omitempty"`
}

func (o *UpdateProjectDataCacheMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectDataCacheMissing) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheMissing) GetValue() *UpdateProjectDataCacheProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectDataCacheAction string

const (
	UpdateProjectDataCacheActionDeny      UpdateProjectDataCacheAction = "deny"
	UpdateProjectDataCacheActionChallenge UpdateProjectDataCacheAction = "challenge"
	UpdateProjectDataCacheActionLog       UpdateProjectDataCacheAction = "log"
	UpdateProjectDataCacheActionBypass    UpdateProjectDataCacheAction = "bypass"
	UpdateProjectDataCacheActionRateLimit UpdateProjectDataCacheAction = "rate_limit"
)

func (e UpdateProjectDataCacheAction) ToPointer() *UpdateProjectDataCacheAction {
	return &e
}
func (e *UpdateProjectDataCacheAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = UpdateProjectDataCacheAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheAction: %v", v)
	}
}

type UpdateProjectDataCacheAlgo string

const (
	UpdateProjectDataCacheAlgoFixedWindow UpdateProjectDataCacheAlgo = "fixed_window"
	UpdateProjectDataCacheAlgoTokenBucket UpdateProjectDataCacheAlgo = "token_bucket"
)

func (e UpdateProjectDataCacheAlgo) ToPointer() *UpdateProjectDataCacheAlgo {
	return &e
}
func (e *UpdateProjectDataCacheAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateProjectDataCacheAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheAlgo: %v", v)
	}
}

type UpdateProjectDataCacheErl struct {
	Algo   UpdateProjectDataCacheAlgo `json:"algo"`
	Keys   []string                   `json:"keys"`
	Limit  float64                    `json:"limit"`
	Window float64                    `json:"window"`
}

func (o *UpdateProjectDataCacheErl) GetAlgo() UpdateProjectDataCacheAlgo {
	if o == nil {
		return UpdateProjectDataCacheAlgo("")
	}
	return o.Algo
}

func (o *UpdateProjectDataCacheErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *UpdateProjectDataCacheErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateProjectDataCacheErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

type UpdateProjectDataCacheMitigate struct {
	Action UpdateProjectDataCacheAction `json:"action"`
	Erl    *UpdateProjectDataCacheErl   `json:"erl,omitempty"`
	RuleID string                       `json:"rule_id"`
}

func (o *UpdateProjectDataCacheMitigate) GetAction() UpdateProjectDataCacheAction {
	if o == nil {
		return UpdateProjectDataCacheAction("")
	}
	return o.Action
}

func (o *UpdateProjectDataCacheMitigate) GetErl() *UpdateProjectDataCacheErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

func (o *UpdateProjectDataCacheMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSON2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectDataCacheSrcType string

const (
	UpdateProjectDataCacheSrcTypeStr                                                       UpdateProjectDataCacheSrcType = "str"
	UpdateProjectDataCacheSrcTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSON2 UpdateProjectDataCacheSrcType = "updateProjectDataCache_projects_response_200_ApplicationJSON_2"
)

type UpdateProjectDataCacheSrc struct {
	Str                                                       *string
	UpdateProjectDataCacheProjectsResponse200ApplicationJSON2 *UpdateProjectDataCacheProjectsResponse200ApplicationJSON2

	Type UpdateProjectDataCacheSrcType
}

func CreateUpdateProjectDataCacheSrcStr(str string) UpdateProjectDataCacheSrc {
	typ := UpdateProjectDataCacheSrcTypeStr

	return UpdateProjectDataCacheSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheSrcUpdateProjectDataCacheProjectsResponse200ApplicationJSON2(updateProjectDataCacheProjectsResponse200ApplicationJSON2 UpdateProjectDataCacheProjectsResponse200ApplicationJSON2) UpdateProjectDataCacheSrc {
	typ := UpdateProjectDataCacheSrcTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSON2

	return UpdateProjectDataCacheSrc{
		UpdateProjectDataCacheProjectsResponse200ApplicationJSON2: &updateProjectDataCacheProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheSrc) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProjectsResponse200ApplicationJSON2 UpdateProjectDataCacheProjectsResponse200ApplicationJSON2 = UpdateProjectDataCacheProjectsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjectsResponse200ApplicationJSON2 = &updateProjectDataCacheProjectsResponse200ApplicationJSON2
		u.Type = UpdateProjectDataCacheSrcTypeUpdateProjectDataCacheProjectsResponse200ApplicationJSON2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheSrc", string(data))
}

func (u UpdateProjectDataCacheSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheSrc: all fields are null")
}

type UpdateProjectDataCacheFirewallRoutes struct {
	Dest     *string                         `json:"dest,omitempty"`
	Handle   *UpdateProjectDataCacheHandle   `json:"handle,omitempty"`
	Has      []UpdateProjectDataCacheHas     `json:"has,omitempty"`
	Missing  []UpdateProjectDataCacheMissing `json:"missing,omitempty"`
	Mitigate *UpdateProjectDataCacheMitigate `json:"mitigate,omitempty"`
	Src      *UpdateProjectDataCacheSrc      `json:"src,omitempty"`
	Status   *float64                        `json:"status,omitempty"`
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetHandle() *UpdateProjectDataCacheHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetHas() []UpdateProjectDataCacheHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetMissing() []UpdateProjectDataCacheMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetMitigate() *UpdateProjectDataCacheMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetSrc() *UpdateProjectDataCacheSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateProjectDataCacheSecurity struct {
	AttackModeActiveUntil  *float64                               `json:"attackModeActiveUntil,omitempty"`
	AttackModeEnabled      *bool                                  `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                               `json:"attackModeUpdatedAt,omitempty"`
	FirewallConfigVersion  *float64                               `json:"firewallConfigVersion,omitempty"`
	FirewallEnabled        *bool                                  `json:"firewallEnabled,omitempty"`
	FirewallRoutes         []UpdateProjectDataCacheFirewallRoutes `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                                  `json:"firewallSeawallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                               `json:"firewallUpdatedAt,omitempty"`
	Ja3Enabled             *bool                                  `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                                  `json:"ja4Enabled,omitempty"`
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallRoutes() []UpdateProjectDataCacheFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *UpdateProjectDataCacheSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *UpdateProjectDataCacheSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

type UpdateProjectDataCacheSpeedInsights struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *UpdateProjectDataCacheSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectDataCacheSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type UpdateProjectDataCacheDeploymentType string

const (
	UpdateProjectDataCacheDeploymentTypeAll                              UpdateProjectDataCacheDeploymentType = "all"
	UpdateProjectDataCacheDeploymentTypePreview                          UpdateProjectDataCacheDeploymentType = "preview"
	UpdateProjectDataCacheDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheDeploymentType) ToPointer() *UpdateProjectDataCacheDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheSsoProtection struct {
	DeploymentType UpdateProjectDataCacheDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCacheSsoProtection) GetDeploymentType() UpdateProjectDataCacheDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCacheTargetsType string

const (
	UpdateProjectDataCacheTargetsTypeStr        UpdateProjectDataCacheTargetsType = "str"
	UpdateProjectDataCacheTargetsTypeArrayOfStr UpdateProjectDataCacheTargetsType = "arrayOfStr"
)

type UpdateProjectDataCacheTargets struct {
	Str        *string
	ArrayOfStr []string

	Type UpdateProjectDataCacheTargetsType
}

func CreateUpdateProjectDataCacheTargetsStr(str string) UpdateProjectDataCacheTargets {
	typ := UpdateProjectDataCacheTargetsTypeStr

	return UpdateProjectDataCacheTargets{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheTargetsArrayOfStr(arrayOfStr []string) UpdateProjectDataCacheTargets {
	typ := UpdateProjectDataCacheTargetsTypeArrayOfStr

	return UpdateProjectDataCacheTargets{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateProjectDataCacheTargets) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheTargetsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectDataCacheTargetsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTargets", string(data))
}

func (u UpdateProjectDataCacheTargets) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTargets: all fields are null")
}

type UpdateProjectDataCacheProjectsDeploymentType string

const (
	UpdateProjectDataCacheProjectsDeploymentTypeAll                              UpdateProjectDataCacheProjectsDeploymentType = "all"
	UpdateProjectDataCacheProjectsDeploymentTypePreview                          UpdateProjectDataCacheProjectsDeploymentType = "preview"
	UpdateProjectDataCacheProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProjectDataCacheProjectsDeploymentTypeProduction                       UpdateProjectDataCacheProjectsDeploymentType = "production"
)

func (e UpdateProjectDataCacheProjectsDeploymentType) ToPointer() *UpdateProjectDataCacheProjectsDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProjectDataCacheProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheProjects2 struct {
	DeploymentType UpdateProjectDataCacheProjectsDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCacheProjects2) GetDeploymentType() UpdateProjectDataCacheProjectsDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCacheAddresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *UpdateProjectDataCacheAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *UpdateProjectDataCacheAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCacheProjectsResponseDeploymentType string

const (
	UpdateProjectDataCacheProjectsResponseDeploymentTypeAll                              UpdateProjectDataCacheProjectsResponseDeploymentType = "all"
	UpdateProjectDataCacheProjectsResponseDeploymentTypePreview                          UpdateProjectDataCacheProjectsResponseDeploymentType = "preview"
	UpdateProjectDataCacheProjectsResponseDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheProjectsResponseDeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProjectDataCacheProjectsResponseDeploymentTypeProduction                       UpdateProjectDataCacheProjectsResponseDeploymentType = "production"
)

func (e UpdateProjectDataCacheProjectsResponseDeploymentType) ToPointer() *UpdateProjectDataCacheProjectsResponseDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponseDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProjectDataCacheProjectsResponseDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponseDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheProtectionMode string

const (
	UpdateProjectDataCacheProtectionModeAdditional UpdateProjectDataCacheProtectionMode = "additional"
	UpdateProjectDataCacheProtectionModeExclusive  UpdateProjectDataCacheProtectionMode = "exclusive"
)

func (e UpdateProjectDataCacheProtectionMode) ToPointer() *UpdateProjectDataCacheProtectionMode {
	return &e
}
func (e *UpdateProjectDataCacheProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectDataCacheProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProtectionMode: %v", v)
	}
}

type UpdateProjectDataCacheProjects1 struct {
	Addresses      []UpdateProjectDataCacheAddresses                    `json:"addresses"`
	DeploymentType UpdateProjectDataCacheProjectsResponseDeploymentType `json:"deploymentType"`
	ProtectionMode UpdateProjectDataCacheProtectionMode                 `json:"protectionMode"`
}

func (o *UpdateProjectDataCacheProjects1) GetAddresses() []UpdateProjectDataCacheAddresses {
	if o == nil {
		return []UpdateProjectDataCacheAddresses{}
	}
	return o.Addresses
}

func (o *UpdateProjectDataCacheProjects1) GetDeploymentType() UpdateProjectDataCacheProjectsResponseDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponseDeploymentType("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectDataCacheProjects1) GetProtectionMode() UpdateProjectDataCacheProtectionMode {
	if o == nil {
		return UpdateProjectDataCacheProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectDataCacheTrustedIpsType string

const (
	UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects1 UpdateProjectDataCacheTrustedIpsType = "updateProjectDataCache_projects_1"
	UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects2 UpdateProjectDataCacheTrustedIpsType = "updateProjectDataCache_projects_2"
)

type UpdateProjectDataCacheTrustedIps struct {
	UpdateProjectDataCacheProjects1 *UpdateProjectDataCacheProjects1
	UpdateProjectDataCacheProjects2 *UpdateProjectDataCacheProjects2

	Type UpdateProjectDataCacheTrustedIpsType
}

func CreateUpdateProjectDataCacheTrustedIpsUpdateProjectDataCacheProjects1(updateProjectDataCacheProjects1 UpdateProjectDataCacheProjects1) UpdateProjectDataCacheTrustedIps {
	typ := UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects1

	return UpdateProjectDataCacheTrustedIps{
		UpdateProjectDataCacheProjects1: &updateProjectDataCacheProjects1,
		Type:                            typ,
	}
}

func CreateUpdateProjectDataCacheTrustedIpsUpdateProjectDataCacheProjects2(updateProjectDataCacheProjects2 UpdateProjectDataCacheProjects2) UpdateProjectDataCacheTrustedIps {
	typ := UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects2

	return UpdateProjectDataCacheTrustedIps{
		UpdateProjectDataCacheProjects2: &updateProjectDataCacheProjects2,
		Type:                            typ,
	}
}

func (u *UpdateProjectDataCacheTrustedIps) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProjects2 UpdateProjectDataCacheProjects2 = UpdateProjectDataCacheProjects2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjects2, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjects2 = &updateProjectDataCacheProjects2
		u.Type = UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects2
		return nil
	}

	var updateProjectDataCacheProjects1 UpdateProjectDataCacheProjects1 = UpdateProjectDataCacheProjects1{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProjects1, "", true, true); err == nil {
		u.UpdateProjectDataCacheProjects1 = &updateProjectDataCacheProjects1
		u.Type = UpdateProjectDataCacheTrustedIpsTypeUpdateProjectDataCacheProjects1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTrustedIps", string(data))
}

func (u UpdateProjectDataCacheTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheProjects1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjects1, "", true)
	}

	if u.UpdateProjectDataCacheProjects2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTrustedIps: all fields are null")
}

type UpdateProjectDataCacheWebAnalytics struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
}

func (o *UpdateProjectDataCacheWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectDataCacheWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateProjectDataCacheResponseBody struct {
	AccountID                            string                                            `json:"accountId"`
	Analytics                            *UpdateProjectDataCacheAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains              *bool                                             `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                           `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs                 *bool                                             `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                         *string                                           `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                           `json:"commandForIgnoringBuildStep,omitempty"`
	ConcurrencyBucketName                *string                                           `json:"concurrencyBucketName,omitempty"`
	ConnectBuildsEnabled                 *bool                                             `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID               *string                                           `json:"connectConfigurationId,omitempty"`
	CreatedAt                            *float64                                          `json:"createdAt,omitempty"`
	Crons                                *UpdateProjectDataCacheCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility        *bool                                             `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                            *UpdateProjectDataCacheDataCache                  `json:"dataCache,omitempty"`
	DevCommand                           *string                                           `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                              `json:"directoryListing"`
	EnablePreviewFeedback                *bool                                             `json:"enablePreviewFeedback,omitempty"`
	Env                                  []UpdateProjectDataCacheEnv                       `json:"env,omitempty"`
	Framework                            *UpdateProjectDataCacheFramework                  `json:"framework,omitempty"`
	GitComments                          *UpdateProjectDataCacheGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                    *bool                                             `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                             `json:"gitLFS,omitempty"`
	HasActiveBranches                    *bool                                             `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases                   *bool                                             `json:"hasFloatingAliases,omitempty"`
	ID                                   string                                            `json:"id"`
	InstallCommand                       *string                                           `json:"installCommand,omitempty"`
	LastAliasRequest                     *UpdateProjectDataCacheLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget                   *UpdateProjectDataCacheLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                    []UpdateProjectDataCacheLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *UpdateProjectDataCacheLink                       `json:"link,omitempty"`
	Live                                 *bool                                             `json:"live,omitempty"`
	Name                                 string                                            `json:"name"`
	NodeVersion                          UpdateProjectDataCacheNodeVersion                 `json:"nodeVersion"`
	OidcTokenConfig                      *UpdateProjectDataCacheOidcTokenConfig            `json:"oidcTokenConfig,omitempty"`
	OptionsAllowlist                     *UpdateProjectDataCacheOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                           `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                           `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *UpdateProjectDataCachePasswordProtection         `json:"passwordProtection,omitempty"`
	Paused                               *bool                                             `json:"paused,omitempty"`
	Permissions                          *UpdateProjectDataCachePermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane        *bool                                             `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                     map[string]UpdateProjectDataCacheProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                         *bool                                             `json:"publicSource,omitempty"`
	RootDirectory                        *string                                           `json:"rootDirectory,omitempty"`
	Security                             *UpdateProjectDataCacheSecurity                   `json:"security,omitempty"`
	ServerlessFunctionRegion             *string                                           `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                             `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                          `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                          `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                             `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                             `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SpeedInsights                        *UpdateProjectDataCacheSpeedInsights              `json:"speedInsights,omitempty"`
	SsoProtection                        *UpdateProjectDataCacheSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]UpdateProjectDataCacheTargets          `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                          `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                          `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                           `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                           `json:"transferredFromAccountId,omitempty"`
	TrustedIps                           *UpdateProjectDataCacheTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                            *float64                                          `json:"updatedAt,omitempty"`
	WebAnalytics                         *UpdateProjectDataCacheWebAnalytics               `json:"webAnalytics,omitempty"`
}

func (o *UpdateProjectDataCacheResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetAnalytics() *UpdateProjectDataCacheAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectDataCacheResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectDataCacheResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetCrons() *UpdateProjectDataCacheCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectDataCacheResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectDataCacheResponseBody) GetDataCache() *UpdateProjectDataCacheDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectDataCacheResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectDataCacheResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectDataCacheResponseBody) GetEnv() []UpdateProjectDataCacheEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectDataCacheResponseBody) GetFramework() *UpdateProjectDataCacheFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectDataCacheResponseBody) GetGitComments() *UpdateProjectDataCacheGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectDataCacheResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectDataCacheResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectDataCacheResponseBody) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *UpdateProjectDataCacheResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetLastAliasRequest() *UpdateProjectDataCacheLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectDataCacheResponseBody) GetLastRollbackTarget() *UpdateProjectDataCacheLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectDataCacheResponseBody) GetLatestDeployments() []UpdateProjectDataCacheLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectDataCacheResponseBody) GetLink() *UpdateProjectDataCacheLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectDataCacheResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectDataCacheResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheResponseBody) GetNodeVersion() UpdateProjectDataCacheNodeVersion {
	if o == nil {
		return UpdateProjectDataCacheNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectDataCacheResponseBody) GetOidcTokenConfig() *UpdateProjectDataCacheOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetOptionsAllowlist() *UpdateProjectDataCacheOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectDataCacheResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetPasswordProtection() *UpdateProjectDataCachePasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectDataCacheResponseBody) GetPermissions() *UpdateProjectDataCachePermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCacheResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectDataCacheResponseBody) GetProtectionBypass() map[string]UpdateProjectDataCacheProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectDataCacheResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectDataCacheResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetSecurity() *UpdateProjectDataCacheSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectDataCacheResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectDataCacheResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetSpeedInsights() *UpdateProjectDataCacheSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectDataCacheResponseBody) GetSsoProtection() *UpdateProjectDataCacheSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetTargets() map[string]UpdateProjectDataCacheTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetTrustedIps() *UpdateProjectDataCacheTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCacheResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetWebAnalytics() *UpdateProjectDataCacheWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type UpdateProjectDataCacheResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *UpdateProjectDataCacheResponseBody
}

func (o *UpdateProjectDataCacheResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateProjectDataCacheResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateProjectDataCacheResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateProjectDataCacheResponse) GetObject() *UpdateProjectDataCacheResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
