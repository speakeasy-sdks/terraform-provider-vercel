// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

type GetTeamsRequest struct {
	// Maximum number of Teams which may be returned.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp (in milliseconds) to only include Teams created since then.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp (in milliseconds) to only include Teams created until then.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
}

func (o *GetTeamsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTeamsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetTeamsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

type TeamsType string

const (
	TeamsTypeTeam        TeamsType = "Team"
	TeamsTypeTeamLimited TeamsType = "TeamLimited"
)

type Teams struct {
	Team        *shared.Team
	TeamLimited *shared.TeamLimited

	Type TeamsType
}

func CreateTeamsTeam(team shared.Team) Teams {
	typ := TeamsTypeTeam

	return Teams{
		Team: &team,
		Type: typ,
	}
}

func CreateTeamsTeamLimited(teamLimited shared.TeamLimited) Teams {
	typ := TeamsTypeTeamLimited

	return Teams{
		TeamLimited: &teamLimited,
		Type:        typ,
	}
}

func (u *Teams) UnmarshalJSON(data []byte) error {

	var team shared.Team = shared.Team{}
	if err := utils.UnmarshalJSON(data, &team, "", true, true); err == nil {
		u.Team = &team
		u.Type = TeamsTypeTeam
		return nil
	}

	var teamLimited shared.TeamLimited = shared.TeamLimited{}
	if err := utils.UnmarshalJSON(data, &teamLimited, "", true, true); err == nil {
		u.TeamLimited = &teamLimited
		u.Type = TeamsTypeTeamLimited
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Teams", string(data))
}

func (u Teams) MarshalJSON() ([]byte, error) {
	if u.Team != nil {
		return utils.MarshalJSON(u.Team, "", true)
	}

	if u.TeamLimited != nil {
		return utils.MarshalJSON(u.TeamLimited, "", true)
	}

	return nil, errors.New("could not marshal union type Teams: all fields are null")
}

// GetTeamsResponseBody - A paginated list of teams.
type GetTeamsResponseBody struct {
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination `json:"pagination"`
	Teams      []Teams           `json:"teams"`
}

func (o *GetTeamsResponseBody) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

func (o *GetTeamsResponseBody) GetTeams() []Teams {
	if o == nil {
		return []Teams{}
	}
	return o.Teams
}

type GetTeamsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A paginated list of teams.
	Object *GetTeamsResponseBody
}

func (o *GetTeamsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetTeamsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetTeamsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetTeamsResponse) GetObject() *GetTeamsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
