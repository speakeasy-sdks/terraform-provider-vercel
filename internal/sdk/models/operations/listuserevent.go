// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/vercel/terraform-provider-terraform/internal/sdk/models/shared"
	"net/http"
)

type ListUserEventRequest struct {
	// Maximum number of items which may be returned.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp to only include items created since then.
	Since *string `queryParam:"style=form,explode=true,name=since"`
	// Timestamp to only include items created until then.
	Until *string `queryParam:"style=form,explode=true,name=until"`
	// Comma-delimited list of event \"types\" to filter the results by.
	Types *string `queryParam:"style=form,explode=true,name=types"`
	// When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListUserEventRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListUserEventRequest) GetSince() *string {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *ListUserEventRequest) GetUntil() *string {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *ListUserEventRequest) GetTypes() *string {
	if o == nil {
		return nil
	}
	return o.Types
}

func (o *ListUserEventRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListUserEventRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListUserEventRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// ListUserEventResponseBody - Successful response.
type ListUserEventResponseBody struct {
	// Array of events generated by the User.
	Events []shared.UserEvent `json:"events"`
}

func (o *ListUserEventResponseBody) GetEvents() []shared.UserEvent {
	if o == nil {
		return []shared.UserEvent{}
	}
	return o.Events
}

type ListUserEventResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response.
	Object *ListUserEventResponseBody
}

func (o *ListUserEventResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserEventResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserEventResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListUserEventResponse) GetObject() *ListUserEventResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
