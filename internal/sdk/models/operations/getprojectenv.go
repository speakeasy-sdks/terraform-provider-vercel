// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type GetProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique ID for the environment variable to get the decrypted value.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetProjectEnvResponseBodyProjectsTarget string

const (
	GetProjectEnvResponseBodyProjectsTargetProduction  GetProjectEnvResponseBodyProjectsTarget = "production"
	GetProjectEnvResponseBodyProjectsTargetPreview     GetProjectEnvResponseBodyProjectsTarget = "preview"
	GetProjectEnvResponseBodyProjectsTargetDevelopment GetProjectEnvResponseBodyProjectsTarget = "development"
)

func (e GetProjectEnvResponseBodyProjectsTarget) ToPointer() *GetProjectEnvResponseBodyProjectsTarget {
	return &e
}
func (e *GetProjectEnvResponseBodyProjectsTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvResponseBodyProjectsTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyProjectsTarget: %v", v)
	}
}

type GetProjectEnvResponseBodyProjectsType string

const (
	GetProjectEnvResponseBodyProjectsTypeSecret    GetProjectEnvResponseBodyProjectsType = "secret"
	GetProjectEnvResponseBodyProjectsTypeSystem    GetProjectEnvResponseBodyProjectsType = "system"
	GetProjectEnvResponseBodyProjectsTypeEncrypted GetProjectEnvResponseBodyProjectsType = "encrypted"
	GetProjectEnvResponseBodyProjectsTypePlain     GetProjectEnvResponseBodyProjectsType = "plain"
	GetProjectEnvResponseBodyProjectsTypeSensitive GetProjectEnvResponseBodyProjectsType = "sensitive"
)

func (e GetProjectEnvResponseBodyProjectsType) ToPointer() *GetProjectEnvResponseBodyProjectsType {
	return &e
}
func (e *GetProjectEnvResponseBodyProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjectEnvResponseBodyProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyProjectsType: %v", v)
	}
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214TypeIntegrationStoreSecret GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type = "integration-store-secret"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects14 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects14) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213TypePostgresURLNoSsl GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type = "postgres-url-no-ssl"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects13 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects13) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212TypePostgresDatabase GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type = "postgres-database"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects12 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects12) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211TypePostgresPassword GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type = "postgres-password"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects11 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects11) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210TypePostgresHost GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type = "postgres-host"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects10 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects10) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29TypePostgresUser GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type = "postgres-user"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects9 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects9) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28TypePostgresPrismaURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type = "postgres-prisma-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects8 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects8) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27TypePostgresURLNonPooling GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type = "postgres-url-non-pooling"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects7 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects7) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26TypePostgresURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type = "postgres-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects6 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects6) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25TypeBlobReadWriteToken GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type = "blob-read-write-token"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects5 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects5) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24TypeRedisRestAPIReadOnlyToken GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type = "redis-rest-api-read-only-token"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects4 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects4) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23TypeRedisRestAPIToken GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type = "redis-rest-api-token"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects3 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects3) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22TypeRedisRestAPIURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type = "redis-rest-api-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects2 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects2) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2TypeRedisURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type = "redis-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type GetProjectEnvContentHintProjects1 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *GetProjectEnvContentHintProjects1) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintProjects1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvResponseBodyProjectsContentHintType string

const (
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects1  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_1"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects2  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_2"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects3  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_3"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects4  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_4"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects5  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_5"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects6  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_6"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects7  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_7"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects8  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_8"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects9  GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_9"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects10 GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_10"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects11 GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_11"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects12 GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_12"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects13 GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_13"
	GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects14 GetProjectEnvResponseBodyProjectsContentHintType = "getProjectEnv_contentHint_projects_14"
)

type GetProjectEnvResponseBodyProjectsContentHint struct {
	GetProjectEnvContentHintProjects1  *GetProjectEnvContentHintProjects1
	GetProjectEnvContentHintProjects2  *GetProjectEnvContentHintProjects2
	GetProjectEnvContentHintProjects3  *GetProjectEnvContentHintProjects3
	GetProjectEnvContentHintProjects4  *GetProjectEnvContentHintProjects4
	GetProjectEnvContentHintProjects5  *GetProjectEnvContentHintProjects5
	GetProjectEnvContentHintProjects6  *GetProjectEnvContentHintProjects6
	GetProjectEnvContentHintProjects7  *GetProjectEnvContentHintProjects7
	GetProjectEnvContentHintProjects8  *GetProjectEnvContentHintProjects8
	GetProjectEnvContentHintProjects9  *GetProjectEnvContentHintProjects9
	GetProjectEnvContentHintProjects10 *GetProjectEnvContentHintProjects10
	GetProjectEnvContentHintProjects11 *GetProjectEnvContentHintProjects11
	GetProjectEnvContentHintProjects12 *GetProjectEnvContentHintProjects12
	GetProjectEnvContentHintProjects13 *GetProjectEnvContentHintProjects13
	GetProjectEnvContentHintProjects14 *GetProjectEnvContentHintProjects14

	Type GetProjectEnvResponseBodyProjectsContentHintType
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects1(getProjectEnvContentHintProjects1 GetProjectEnvContentHintProjects1) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects1

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects1: &getProjectEnvContentHintProjects1,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects2(getProjectEnvContentHintProjects2 GetProjectEnvContentHintProjects2) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects2

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects2: &getProjectEnvContentHintProjects2,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects3(getProjectEnvContentHintProjects3 GetProjectEnvContentHintProjects3) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects3

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects3: &getProjectEnvContentHintProjects3,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects4(getProjectEnvContentHintProjects4 GetProjectEnvContentHintProjects4) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects4

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects4: &getProjectEnvContentHintProjects4,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects5(getProjectEnvContentHintProjects5 GetProjectEnvContentHintProjects5) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects5

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects5: &getProjectEnvContentHintProjects5,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects6(getProjectEnvContentHintProjects6 GetProjectEnvContentHintProjects6) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects6

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects6: &getProjectEnvContentHintProjects6,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects7(getProjectEnvContentHintProjects7 GetProjectEnvContentHintProjects7) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects7

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects7: &getProjectEnvContentHintProjects7,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects8(getProjectEnvContentHintProjects8 GetProjectEnvContentHintProjects8) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects8

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects8: &getProjectEnvContentHintProjects8,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects9(getProjectEnvContentHintProjects9 GetProjectEnvContentHintProjects9) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects9

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects9: &getProjectEnvContentHintProjects9,
		Type:                              typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects10(getProjectEnvContentHintProjects10 GetProjectEnvContentHintProjects10) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects10

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects10: &getProjectEnvContentHintProjects10,
		Type:                               typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects11(getProjectEnvContentHintProjects11 GetProjectEnvContentHintProjects11) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects11

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects11: &getProjectEnvContentHintProjects11,
		Type:                               typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects12(getProjectEnvContentHintProjects12 GetProjectEnvContentHintProjects12) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects12

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects12: &getProjectEnvContentHintProjects12,
		Type:                               typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects13(getProjectEnvContentHintProjects13 GetProjectEnvContentHintProjects13) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects13

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects13: &getProjectEnvContentHintProjects13,
		Type:                               typ,
	}
}

func CreateGetProjectEnvResponseBodyProjectsContentHintGetProjectEnvContentHintProjects14(getProjectEnvContentHintProjects14 GetProjectEnvContentHintProjects14) GetProjectEnvResponseBodyProjectsContentHint {
	typ := GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects14

	return GetProjectEnvResponseBodyProjectsContentHint{
		GetProjectEnvContentHintProjects14: &getProjectEnvContentHintProjects14,
		Type:                               typ,
	}
}

func (u *GetProjectEnvResponseBodyProjectsContentHint) UnmarshalJSON(data []byte) error {

	var getProjectEnvContentHintProjects1 GetProjectEnvContentHintProjects1 = GetProjectEnvContentHintProjects1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects1, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects1 = &getProjectEnvContentHintProjects1
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects1
		return nil
	}

	var getProjectEnvContentHintProjects2 GetProjectEnvContentHintProjects2 = GetProjectEnvContentHintProjects2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects2, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects2 = &getProjectEnvContentHintProjects2
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects2
		return nil
	}

	var getProjectEnvContentHintProjects3 GetProjectEnvContentHintProjects3 = GetProjectEnvContentHintProjects3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects3, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects3 = &getProjectEnvContentHintProjects3
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects3
		return nil
	}

	var getProjectEnvContentHintProjects4 GetProjectEnvContentHintProjects4 = GetProjectEnvContentHintProjects4{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects4, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects4 = &getProjectEnvContentHintProjects4
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects4
		return nil
	}

	var getProjectEnvContentHintProjects5 GetProjectEnvContentHintProjects5 = GetProjectEnvContentHintProjects5{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects5, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects5 = &getProjectEnvContentHintProjects5
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects5
		return nil
	}

	var getProjectEnvContentHintProjects6 GetProjectEnvContentHintProjects6 = GetProjectEnvContentHintProjects6{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects6, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects6 = &getProjectEnvContentHintProjects6
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects6
		return nil
	}

	var getProjectEnvContentHintProjects7 GetProjectEnvContentHintProjects7 = GetProjectEnvContentHintProjects7{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects7, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects7 = &getProjectEnvContentHintProjects7
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects7
		return nil
	}

	var getProjectEnvContentHintProjects8 GetProjectEnvContentHintProjects8 = GetProjectEnvContentHintProjects8{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects8, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects8 = &getProjectEnvContentHintProjects8
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects8
		return nil
	}

	var getProjectEnvContentHintProjects9 GetProjectEnvContentHintProjects9 = GetProjectEnvContentHintProjects9{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects9, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects9 = &getProjectEnvContentHintProjects9
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects9
		return nil
	}

	var getProjectEnvContentHintProjects10 GetProjectEnvContentHintProjects10 = GetProjectEnvContentHintProjects10{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects10, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects10 = &getProjectEnvContentHintProjects10
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects10
		return nil
	}

	var getProjectEnvContentHintProjects11 GetProjectEnvContentHintProjects11 = GetProjectEnvContentHintProjects11{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects11, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects11 = &getProjectEnvContentHintProjects11
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects11
		return nil
	}

	var getProjectEnvContentHintProjects12 GetProjectEnvContentHintProjects12 = GetProjectEnvContentHintProjects12{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects12, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects12 = &getProjectEnvContentHintProjects12
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects12
		return nil
	}

	var getProjectEnvContentHintProjects13 GetProjectEnvContentHintProjects13 = GetProjectEnvContentHintProjects13{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects13, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects13 = &getProjectEnvContentHintProjects13
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects13
		return nil
	}

	var getProjectEnvContentHintProjects14 GetProjectEnvContentHintProjects14 = GetProjectEnvContentHintProjects14{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintProjects14, "", true, true); err == nil {
		u.GetProjectEnvContentHintProjects14 = &getProjectEnvContentHintProjects14
		u.Type = GetProjectEnvResponseBodyProjectsContentHintTypeGetProjectEnvContentHintProjects14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvResponseBodyProjectsContentHint", string(data))
}

func (u GetProjectEnvResponseBodyProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvContentHintProjects1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects1, "", true)
	}

	if u.GetProjectEnvContentHintProjects2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects2, "", true)
	}

	if u.GetProjectEnvContentHintProjects3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects3, "", true)
	}

	if u.GetProjectEnvContentHintProjects4 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects4, "", true)
	}

	if u.GetProjectEnvContentHintProjects5 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects5, "", true)
	}

	if u.GetProjectEnvContentHintProjects6 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects6, "", true)
	}

	if u.GetProjectEnvContentHintProjects7 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects7, "", true)
	}

	if u.GetProjectEnvContentHintProjects8 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects8, "", true)
	}

	if u.GetProjectEnvContentHintProjects9 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects9, "", true)
	}

	if u.GetProjectEnvContentHintProjects10 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects10, "", true)
	}

	if u.GetProjectEnvContentHintProjects11 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects11, "", true)
	}

	if u.GetProjectEnvContentHintProjects12 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects12, "", true)
	}

	if u.GetProjectEnvContentHintProjects13 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects13, "", true)
	}

	if u.GetProjectEnvContentHintProjects14 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintProjects14, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvResponseBodyProjectsContentHint: all fields are null")
}

type GetProjectEnvResponseBodyProjectsResponse200Type string

const (
	GetProjectEnvResponseBodyProjectsResponse200TypeFlagsSecret GetProjectEnvResponseBodyProjectsResponse200Type = "flags-secret"
)

func (e GetProjectEnvResponseBodyProjectsResponse200Type) ToPointer() *GetProjectEnvResponseBodyProjectsResponse200Type {
	return &e
}
func (e *GetProjectEnvResponseBodyProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectEnvResponseBodyProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyProjectsResponse200Type: %v", v)
	}
}

// GetProjectEnvResponseBodyProjectsInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectEnvResponseBodyProjectsInternalContentHint struct {
	Type GetProjectEnvResponseBodyProjectsResponse200Type `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectEnvResponseBodyProjectsInternalContentHint) GetType() GetProjectEnvResponseBodyProjectsResponse200Type {
	if o == nil {
		return GetProjectEnvResponseBodyProjectsResponse200Type("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBodyProjectsInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnvResponseBody2 struct {
	Target            []GetProjectEnvResponseBodyProjectsTarget     `json:"target,omitempty"`
	Type              GetProjectEnvResponseBodyProjectsType         `json:"type"`
	ID                *string                                       `json:"id,omitempty"`
	Key               string                                        `json:"key"`
	Value             string                                        `json:"value"`
	ConfigurationID   *string                                       `json:"configurationId,omitempty"`
	CreatedAt         *float64                                      `json:"createdAt,omitempty"`
	UpdatedAt         *float64                                      `json:"updatedAt,omitempty"`
	CreatedBy         *string                                       `json:"createdBy,omitempty"`
	UpdatedBy         *string                                       `json:"updatedBy,omitempty"`
	GitBranch         *string                                       `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                       `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                       `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectEnvResponseBodyProjectsContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *GetProjectEnvResponseBodyProjectsInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` is decrypted.
	Decrypted           *bool   `json:"decrypted,omitempty"`
	Comment             *string `json:"comment,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
}

func (o *GetProjectEnvResponseBody2) GetTarget() []GetProjectEnvResponseBodyProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnvResponseBody2) GetType() GetProjectEnvResponseBodyProjectsType {
	if o == nil {
		return GetProjectEnvResponseBodyProjectsType("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBody2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnvResponseBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnvResponseBody2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectEnvResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnvResponseBody2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnvResponseBody2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnvResponseBody2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnvResponseBody2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnvResponseBody2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnvResponseBody2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnvResponseBody2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnvResponseBody2) GetContentHint() *GetProjectEnvResponseBodyProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnvResponseBody2) GetInternalContentHint() *GetProjectEnvResponseBodyProjectsInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnvResponseBody2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectEnvResponseBody2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnvResponseBody2) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

type GetProjectEnvResponseBodyTarget string

const (
	GetProjectEnvResponseBodyTargetProduction  GetProjectEnvResponseBodyTarget = "production"
	GetProjectEnvResponseBodyTargetPreview     GetProjectEnvResponseBodyTarget = "preview"
	GetProjectEnvResponseBodyTargetDevelopment GetProjectEnvResponseBodyTarget = "development"
)

func (e GetProjectEnvResponseBodyTarget) ToPointer() *GetProjectEnvResponseBodyTarget {
	return &e
}
func (e *GetProjectEnvResponseBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvResponseBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyTarget: %v", v)
	}
}

type GetProjectEnvResponseBodyType string

const (
	GetProjectEnvResponseBodyTypeSecret    GetProjectEnvResponseBodyType = "secret"
	GetProjectEnvResponseBodyTypeSystem    GetProjectEnvResponseBodyType = "system"
	GetProjectEnvResponseBodyTypeEncrypted GetProjectEnvResponseBodyType = "encrypted"
	GetProjectEnvResponseBodyTypePlain     GetProjectEnvResponseBodyType = "plain"
	GetProjectEnvResponseBodyTypeSensitive GetProjectEnvResponseBodyType = "sensitive"
)

func (e GetProjectEnvResponseBodyType) ToPointer() *GetProjectEnvResponseBodyType {
	return &e
}
func (e *GetProjectEnvResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = GetProjectEnvResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyType: %v", v)
	}
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114TypeIntegrationStoreSecret GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type = "integration-store-secret"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type: %v", v)
	}
}

type GetProjectEnvContentHint14 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHint14) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113TypePostgresURLNoSsl GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type = "postgres-url-no-ssl"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type: %v", v)
	}
}

type GetProjectEnvContentHint13 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHint13) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112TypePostgresDatabase GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type = "postgres-database"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type: %v", v)
	}
}

type GetProjectEnvContentHint12 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHint12) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111TypePostgresPassword GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type = "postgres-password"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type: %v", v)
	}
}

type GetProjectEnvContentHint11 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHint11) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110TypePostgresHost GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type = "postgres-host"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type: %v", v)
	}
}

type GetProjectEnvContentHint10 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *GetProjectEnvContentHint10) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19TypePostgresUser GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type = "postgres-user"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type: %v", v)
	}
}

type GetProjectEnvContentHint9 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHint9) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18TypePostgresPrismaURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type = "postgres-prisma-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type: %v", v)
	}
}

type GetProjectEnvContentHint8 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHint8) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1TypePostgresURLNonPooling GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type = "postgres-url-non-pooling"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type GetProjectEnvContentHint7 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *GetProjectEnvContentHint7) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetProjectEnvContentHint6 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                     `json:"storeId"`
}

func (o *GetProjectEnvContentHint6) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200ApplicationJSONType string

const (
	GetProjectEnvContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken GetProjectEnvContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e GetProjectEnvContentHintProjectsResponse200ApplicationJSONType) ToPointer() *GetProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnvContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type GetProjectEnvContentHint5 struct {
	Type    GetProjectEnvContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                         `json:"storeId"`
}

func (o *GetProjectEnvContentHint5) GetType() GetProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponse200Type string

const (
	GetProjectEnvContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken GetProjectEnvContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e GetProjectEnvContentHintProjectsResponse200Type) ToPointer() *GetProjectEnvContentHintProjectsResponse200Type {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnvContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponse200Type: %v", v)
	}
}

type GetProjectEnvContentHint4 struct {
	Type    GetProjectEnvContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *GetProjectEnvContentHint4) GetType() GetProjectEnvContentHintProjectsResponse200Type {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsResponseType string

const (
	GetProjectEnvContentHintProjectsResponseTypeRedisRestAPIToken GetProjectEnvContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e GetProjectEnvContentHintProjectsResponseType) ToPointer() *GetProjectEnvContentHintProjectsResponseType {
	return &e
}
func (e *GetProjectEnvContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnvContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsResponseType: %v", v)
	}
}

type GetProjectEnvContentHint3 struct {
	Type    GetProjectEnvContentHintProjectsResponseType `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *GetProjectEnvContentHint3) GetType() GetProjectEnvContentHintProjectsResponseType {
	if o == nil {
		return GetProjectEnvContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintProjectsType string

const (
	GetProjectEnvContentHintProjectsTypeRedisRestAPIURL GetProjectEnvContentHintProjectsType = "redis-rest-api-url"
)

func (e GetProjectEnvContentHintProjectsType) ToPointer() *GetProjectEnvContentHintProjectsType {
	return &e
}
func (e *GetProjectEnvContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnvContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintProjectsType: %v", v)
	}
}

type GetProjectEnvContentHint2 struct {
	Type    GetProjectEnvContentHintProjectsType `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *GetProjectEnvContentHint2) GetType() GetProjectEnvContentHintProjectsType {
	if o == nil {
		return GetProjectEnvContentHintProjectsType("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintType string

const (
	GetProjectEnvContentHintTypeRedisURL GetProjectEnvContentHintType = "redis-url"
)

func (e GetProjectEnvContentHintType) ToPointer() *GetProjectEnvContentHintType {
	return &e
}
func (e *GetProjectEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvContentHintType: %v", v)
	}
}

type GetProjectEnvContentHint1 struct {
	Type    GetProjectEnvContentHintType `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *GetProjectEnvContentHint1) GetType() GetProjectEnvContentHintType {
	if o == nil {
		return GetProjectEnvContentHintType("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvResponseBodyContentHintType string

const (
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint1  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_1"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint2  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_2"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint3  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_3"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint4  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_4"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint5  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_5"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint6  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_6"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint7  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_7"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint8  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_8"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint9  GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_9"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint10 GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_10"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint11 GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_11"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint12 GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_12"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint13 GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_13"
	GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint14 GetProjectEnvResponseBodyContentHintType = "getProjectEnv_contentHint_14"
)

type GetProjectEnvResponseBodyContentHint struct {
	GetProjectEnvContentHint1  *GetProjectEnvContentHint1
	GetProjectEnvContentHint2  *GetProjectEnvContentHint2
	GetProjectEnvContentHint3  *GetProjectEnvContentHint3
	GetProjectEnvContentHint4  *GetProjectEnvContentHint4
	GetProjectEnvContentHint5  *GetProjectEnvContentHint5
	GetProjectEnvContentHint6  *GetProjectEnvContentHint6
	GetProjectEnvContentHint7  *GetProjectEnvContentHint7
	GetProjectEnvContentHint8  *GetProjectEnvContentHint8
	GetProjectEnvContentHint9  *GetProjectEnvContentHint9
	GetProjectEnvContentHint10 *GetProjectEnvContentHint10
	GetProjectEnvContentHint11 *GetProjectEnvContentHint11
	GetProjectEnvContentHint12 *GetProjectEnvContentHint12
	GetProjectEnvContentHint13 *GetProjectEnvContentHint13
	GetProjectEnvContentHint14 *GetProjectEnvContentHint14

	Type GetProjectEnvResponseBodyContentHintType
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint1(getProjectEnvContentHint1 GetProjectEnvContentHint1) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint1

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint1: &getProjectEnvContentHint1,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint2(getProjectEnvContentHint2 GetProjectEnvContentHint2) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint2

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint2: &getProjectEnvContentHint2,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint3(getProjectEnvContentHint3 GetProjectEnvContentHint3) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint3

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint3: &getProjectEnvContentHint3,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint4(getProjectEnvContentHint4 GetProjectEnvContentHint4) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint4

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint4: &getProjectEnvContentHint4,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint5(getProjectEnvContentHint5 GetProjectEnvContentHint5) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint5

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint5: &getProjectEnvContentHint5,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint6(getProjectEnvContentHint6 GetProjectEnvContentHint6) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint6

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint6: &getProjectEnvContentHint6,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint7(getProjectEnvContentHint7 GetProjectEnvContentHint7) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint7

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint7: &getProjectEnvContentHint7,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint8(getProjectEnvContentHint8 GetProjectEnvContentHint8) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint8

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint8: &getProjectEnvContentHint8,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint9(getProjectEnvContentHint9 GetProjectEnvContentHint9) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint9

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint9: &getProjectEnvContentHint9,
		Type:                      typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint10(getProjectEnvContentHint10 GetProjectEnvContentHint10) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint10

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint10: &getProjectEnvContentHint10,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint11(getProjectEnvContentHint11 GetProjectEnvContentHint11) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint11

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint11: &getProjectEnvContentHint11,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint12(getProjectEnvContentHint12 GetProjectEnvContentHint12) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint12

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint12: &getProjectEnvContentHint12,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint13(getProjectEnvContentHint13 GetProjectEnvContentHint13) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint13

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint13: &getProjectEnvContentHint13,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyContentHintGetProjectEnvContentHint14(getProjectEnvContentHint14 GetProjectEnvContentHint14) GetProjectEnvResponseBodyContentHint {
	typ := GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint14

	return GetProjectEnvResponseBodyContentHint{
		GetProjectEnvContentHint14: &getProjectEnvContentHint14,
		Type:                       typ,
	}
}

func (u *GetProjectEnvResponseBodyContentHint) UnmarshalJSON(data []byte) error {

	var getProjectEnvContentHint1 GetProjectEnvContentHint1 = GetProjectEnvContentHint1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint1, "", true, true); err == nil {
		u.GetProjectEnvContentHint1 = &getProjectEnvContentHint1
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint1
		return nil
	}

	var getProjectEnvContentHint2 GetProjectEnvContentHint2 = GetProjectEnvContentHint2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint2, "", true, true); err == nil {
		u.GetProjectEnvContentHint2 = &getProjectEnvContentHint2
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint2
		return nil
	}

	var getProjectEnvContentHint3 GetProjectEnvContentHint3 = GetProjectEnvContentHint3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint3, "", true, true); err == nil {
		u.GetProjectEnvContentHint3 = &getProjectEnvContentHint3
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint3
		return nil
	}

	var getProjectEnvContentHint4 GetProjectEnvContentHint4 = GetProjectEnvContentHint4{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint4, "", true, true); err == nil {
		u.GetProjectEnvContentHint4 = &getProjectEnvContentHint4
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint4
		return nil
	}

	var getProjectEnvContentHint5 GetProjectEnvContentHint5 = GetProjectEnvContentHint5{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint5, "", true, true); err == nil {
		u.GetProjectEnvContentHint5 = &getProjectEnvContentHint5
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint5
		return nil
	}

	var getProjectEnvContentHint6 GetProjectEnvContentHint6 = GetProjectEnvContentHint6{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint6, "", true, true); err == nil {
		u.GetProjectEnvContentHint6 = &getProjectEnvContentHint6
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint6
		return nil
	}

	var getProjectEnvContentHint7 GetProjectEnvContentHint7 = GetProjectEnvContentHint7{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint7, "", true, true); err == nil {
		u.GetProjectEnvContentHint7 = &getProjectEnvContentHint7
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint7
		return nil
	}

	var getProjectEnvContentHint8 GetProjectEnvContentHint8 = GetProjectEnvContentHint8{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint8, "", true, true); err == nil {
		u.GetProjectEnvContentHint8 = &getProjectEnvContentHint8
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint8
		return nil
	}

	var getProjectEnvContentHint9 GetProjectEnvContentHint9 = GetProjectEnvContentHint9{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint9, "", true, true); err == nil {
		u.GetProjectEnvContentHint9 = &getProjectEnvContentHint9
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint9
		return nil
	}

	var getProjectEnvContentHint10 GetProjectEnvContentHint10 = GetProjectEnvContentHint10{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint10, "", true, true); err == nil {
		u.GetProjectEnvContentHint10 = &getProjectEnvContentHint10
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint10
		return nil
	}

	var getProjectEnvContentHint11 GetProjectEnvContentHint11 = GetProjectEnvContentHint11{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint11, "", true, true); err == nil {
		u.GetProjectEnvContentHint11 = &getProjectEnvContentHint11
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint11
		return nil
	}

	var getProjectEnvContentHint12 GetProjectEnvContentHint12 = GetProjectEnvContentHint12{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint12, "", true, true); err == nil {
		u.GetProjectEnvContentHint12 = &getProjectEnvContentHint12
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint12
		return nil
	}

	var getProjectEnvContentHint13 GetProjectEnvContentHint13 = GetProjectEnvContentHint13{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint13, "", true, true); err == nil {
		u.GetProjectEnvContentHint13 = &getProjectEnvContentHint13
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint13
		return nil
	}

	var getProjectEnvContentHint14 GetProjectEnvContentHint14 = GetProjectEnvContentHint14{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHint14, "", true, true); err == nil {
		u.GetProjectEnvContentHint14 = &getProjectEnvContentHint14
		u.Type = GetProjectEnvResponseBodyContentHintTypeGetProjectEnvContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvResponseBodyContentHint", string(data))
}

func (u GetProjectEnvResponseBodyContentHint) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvContentHint1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint1, "", true)
	}

	if u.GetProjectEnvContentHint2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint2, "", true)
	}

	if u.GetProjectEnvContentHint3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint3, "", true)
	}

	if u.GetProjectEnvContentHint4 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint4, "", true)
	}

	if u.GetProjectEnvContentHint5 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint5, "", true)
	}

	if u.GetProjectEnvContentHint6 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint6, "", true)
	}

	if u.GetProjectEnvContentHint7 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint7, "", true)
	}

	if u.GetProjectEnvContentHint8 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint8, "", true)
	}

	if u.GetProjectEnvContentHint9 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint9, "", true)
	}

	if u.GetProjectEnvContentHint10 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint10, "", true)
	}

	if u.GetProjectEnvContentHint11 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint11, "", true)
	}

	if u.GetProjectEnvContentHint12 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint12, "", true)
	}

	if u.GetProjectEnvContentHint13 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint13, "", true)
	}

	if u.GetProjectEnvContentHint14 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHint14, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvResponseBodyContentHint: all fields are null")
}

type GetProjectEnvResponseBodyProjectsResponseType string

const (
	GetProjectEnvResponseBodyProjectsResponseTypeFlagsSecret GetProjectEnvResponseBodyProjectsResponseType = "flags-secret"
)

func (e GetProjectEnvResponseBodyProjectsResponseType) ToPointer() *GetProjectEnvResponseBodyProjectsResponseType {
	return &e
}
func (e *GetProjectEnvResponseBodyProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectEnvResponseBodyProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvResponseBodyProjectsResponseType: %v", v)
	}
}

// GetProjectEnvResponseBodyInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectEnvResponseBodyInternalContentHint struct {
	Type GetProjectEnvResponseBodyProjectsResponseType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectEnvResponseBodyInternalContentHint) GetType() GetProjectEnvResponseBodyProjectsResponseType {
	if o == nil {
		return GetProjectEnvResponseBodyProjectsResponseType("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBodyInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnvResponseBody1 struct {
	Decrypted         bool                                  `json:"decrypted"`
	Target            []GetProjectEnvResponseBodyTarget     `json:"target,omitempty"`
	Type              GetProjectEnvResponseBodyType         `json:"type"`
	ID                *string                               `json:"id,omitempty"`
	Key               string                                `json:"key"`
	ConfigurationID   *string                               `json:"configurationId,omitempty"`
	CreatedAt         *float64                              `json:"createdAt,omitempty"`
	UpdatedAt         *float64                              `json:"updatedAt,omitempty"`
	CreatedBy         *string                               `json:"createdBy,omitempty"`
	UpdatedBy         *string                               `json:"updatedBy,omitempty"`
	GitBranch         *string                               `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                               `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                               `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectEnvResponseBodyContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *GetProjectEnvResponseBodyInternalContentHint `json:"internalContentHint,omitempty"`
	Comment             *string                                       `json:"comment,omitempty"`
	CustomEnvironmentID *string                                       `json:"customEnvironmentId,omitempty"`
}

func (o *GetProjectEnvResponseBody1) GetDecrypted() bool {
	if o == nil {
		return false
	}
	return o.Decrypted
}

func (o *GetProjectEnvResponseBody1) GetTarget() []GetProjectEnvResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnvResponseBody1) GetType() GetProjectEnvResponseBodyType {
	if o == nil {
		return GetProjectEnvResponseBodyType("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnvResponseBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnvResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnvResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnvResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnvResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnvResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnvResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnvResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnvResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnvResponseBody1) GetContentHint() *GetProjectEnvResponseBodyContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnvResponseBody1) GetInternalContentHint() *GetProjectEnvResponseBodyInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnvResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnvResponseBody1) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

type GetProjectEnvResponseBodyUnionType string

const (
	GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody1 GetProjectEnvResponseBodyUnionType = "getProjectEnv_responseBody_1"
	GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody2 GetProjectEnvResponseBodyUnionType = "getProjectEnv_responseBody_2"
)

type GetProjectEnvResponseBody struct {
	GetProjectEnvResponseBody1 *GetProjectEnvResponseBody1
	GetProjectEnvResponseBody2 *GetProjectEnvResponseBody2

	Type GetProjectEnvResponseBodyUnionType
}

func CreateGetProjectEnvResponseBodyGetProjectEnvResponseBody1(getProjectEnvResponseBody1 GetProjectEnvResponseBody1) GetProjectEnvResponseBody {
	typ := GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody1

	return GetProjectEnvResponseBody{
		GetProjectEnvResponseBody1: &getProjectEnvResponseBody1,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyGetProjectEnvResponseBody2(getProjectEnvResponseBody2 GetProjectEnvResponseBody2) GetProjectEnvResponseBody {
	typ := GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody2

	return GetProjectEnvResponseBody{
		GetProjectEnvResponseBody2: &getProjectEnvResponseBody2,
		Type:                       typ,
	}
}

func (u *GetProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var getProjectEnvResponseBody1 GetProjectEnvResponseBody1 = GetProjectEnvResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvResponseBody1, "", true, true); err == nil {
		u.GetProjectEnvResponseBody1 = &getProjectEnvResponseBody1
		u.Type = GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody1
		return nil
	}

	var getProjectEnvResponseBody2 GetProjectEnvResponseBody2 = GetProjectEnvResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvResponseBody2, "", true, true); err == nil {
		u.GetProjectEnvResponseBody2 = &getProjectEnvResponseBody2
		u.Type = GetProjectEnvResponseBodyUnionTypeGetProjectEnvResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvResponseBody", string(data))
}

func (u GetProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvResponseBody1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvResponseBody1, "", true)
	}

	if u.GetProjectEnvResponseBody2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvResponseBody: all fields are null")
}

type GetProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	OneOf       *GetProjectEnvResponseBody
}

func (o *GetProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProjectEnvResponse) GetOneOf() *GetProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
