// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

type CreateProject2 string

const (
	CreateProject2Production  CreateProject2 = "production"
	CreateProject2Preview     CreateProject2 = "preview"
	CreateProject2Development CreateProject2 = "development"
)

func (e CreateProject2) ToPointer() *CreateProject2 {
	return &e
}
func (e *CreateProject2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProject2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject2: %v", v)
	}
}

type CreateProject1 string

const (
	CreateProject1Production  CreateProject1 = "production"
	CreateProject1Preview     CreateProject1 = "preview"
	CreateProject1Development CreateProject1 = "development"
)

func (e CreateProject1) ToPointer() *CreateProject1 {
	return &e
}
func (e *CreateProject1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProject1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProject1: %v", v)
	}
}

type CreateProjectTargetType string

const (
	CreateProjectTargetTypeCreateProject1        CreateProjectTargetType = "createProject_1"
	CreateProjectTargetTypeArrayOfCreateProject2 CreateProjectTargetType = "arrayOfCreateProject2"
)

// CreateProjectTarget - Deployment Target or Targets in which the ENV variable will be used
type CreateProjectTarget struct {
	CreateProject1        *CreateProject1
	ArrayOfCreateProject2 []CreateProject2

	Type CreateProjectTargetType
}

func CreateCreateProjectTargetCreateProject1(createProject1 CreateProject1) CreateProjectTarget {
	typ := CreateProjectTargetTypeCreateProject1

	return CreateProjectTarget{
		CreateProject1: &createProject1,
		Type:           typ,
	}
}

func CreateCreateProjectTargetArrayOfCreateProject2(arrayOfCreateProject2 []CreateProject2) CreateProjectTarget {
	typ := CreateProjectTargetTypeArrayOfCreateProject2

	return CreateProjectTarget{
		ArrayOfCreateProject2: arrayOfCreateProject2,
		Type:                  typ,
	}
}

func (u *CreateProjectTarget) UnmarshalJSON(data []byte) error {

	var createProject1 CreateProject1 = CreateProject1("")
	if err := utils.UnmarshalJSON(data, &createProject1, "", true, true); err == nil {
		u.CreateProject1 = &createProject1
		u.Type = CreateProjectTargetTypeCreateProject1
		return nil
	}

	var arrayOfCreateProject2 []CreateProject2 = []CreateProject2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProject2, "", true, true); err == nil {
		u.ArrayOfCreateProject2 = arrayOfCreateProject2
		u.Type = CreateProjectTargetTypeArrayOfCreateProject2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTarget", string(data))
}

func (u CreateProjectTarget) MarshalJSON() ([]byte, error) {
	if u.CreateProject1 != nil {
		return utils.MarshalJSON(u.CreateProject1, "", true)
	}

	if u.ArrayOfCreateProject2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProject2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTarget: all fields are null")
}

// CreateProjectType - Type of the ENV variable
type CreateProjectType string

const (
	CreateProjectTypeSystem    CreateProjectType = "system"
	CreateProjectTypeSecret    CreateProjectType = "secret"
	CreateProjectTypeEncrypted CreateProjectType = "encrypted"
	CreateProjectTypePlain     CreateProjectType = "plain"
	CreateProjectTypeSensitive CreateProjectType = "sensitive"
)

func (e CreateProjectType) ToPointer() *CreateProjectType {
	return &e
}
func (e *CreateProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectType: %v", v)
	}
}

type EnvironmentVariables struct {
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// Name of the ENV variable
	Key string `json:"key"`
	// Deployment Target or Targets in which the ENV variable will be used
	Target CreateProjectTarget `json:"target"`
	// Type of the ENV variable
	Type *CreateProjectType `json:"type,omitempty"`
	// Value for the ENV variable
	Value string `json:"value"`
}

func (o *EnvironmentVariables) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EnvironmentVariables) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EnvironmentVariables) GetTarget() CreateProjectTarget {
	if o == nil {
		return CreateProjectTarget{}
	}
	return o.Target
}

func (o *EnvironmentVariables) GetType() *CreateProjectType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EnvironmentVariables) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateProjectFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateProjectFramework string

const (
	CreateProjectFrameworkBlitzjs        CreateProjectFramework = "blitzjs"
	CreateProjectFrameworkNextjs         CreateProjectFramework = "nextjs"
	CreateProjectFrameworkGatsby         CreateProjectFramework = "gatsby"
	CreateProjectFrameworkRemix          CreateProjectFramework = "remix"
	CreateProjectFrameworkAstro          CreateProjectFramework = "astro"
	CreateProjectFrameworkHexo           CreateProjectFramework = "hexo"
	CreateProjectFrameworkEleventy       CreateProjectFramework = "eleventy"
	CreateProjectFrameworkDocusaurus2    CreateProjectFramework = "docusaurus-2"
	CreateProjectFrameworkDocusaurus     CreateProjectFramework = "docusaurus"
	CreateProjectFrameworkPreact         CreateProjectFramework = "preact"
	CreateProjectFrameworkSolidstart1    CreateProjectFramework = "solidstart-1"
	CreateProjectFrameworkSolidstart     CreateProjectFramework = "solidstart"
	CreateProjectFrameworkDojo           CreateProjectFramework = "dojo"
	CreateProjectFrameworkEmber          CreateProjectFramework = "ember"
	CreateProjectFrameworkVue            CreateProjectFramework = "vue"
	CreateProjectFrameworkScully         CreateProjectFramework = "scully"
	CreateProjectFrameworkIonicAngular   CreateProjectFramework = "ionic-angular"
	CreateProjectFrameworkAngular        CreateProjectFramework = "angular"
	CreateProjectFrameworkPolymer        CreateProjectFramework = "polymer"
	CreateProjectFrameworkSvelte         CreateProjectFramework = "svelte"
	CreateProjectFrameworkSveltekit      CreateProjectFramework = "sveltekit"
	CreateProjectFrameworkSveltekit1     CreateProjectFramework = "sveltekit-1"
	CreateProjectFrameworkIonicReact     CreateProjectFramework = "ionic-react"
	CreateProjectFrameworkCreateReactApp CreateProjectFramework = "create-react-app"
	CreateProjectFrameworkGridsome       CreateProjectFramework = "gridsome"
	CreateProjectFrameworkUmijs          CreateProjectFramework = "umijs"
	CreateProjectFrameworkSapper         CreateProjectFramework = "sapper"
	CreateProjectFrameworkSaber          CreateProjectFramework = "saber"
	CreateProjectFrameworkStencil        CreateProjectFramework = "stencil"
	CreateProjectFrameworkNuxtjs         CreateProjectFramework = "nuxtjs"
	CreateProjectFrameworkRedwoodjs      CreateProjectFramework = "redwoodjs"
	CreateProjectFrameworkHugo           CreateProjectFramework = "hugo"
	CreateProjectFrameworkJekyll         CreateProjectFramework = "jekyll"
	CreateProjectFrameworkBrunch         CreateProjectFramework = "brunch"
	CreateProjectFrameworkMiddleman      CreateProjectFramework = "middleman"
	CreateProjectFrameworkZola           CreateProjectFramework = "zola"
	CreateProjectFrameworkHydrogen       CreateProjectFramework = "hydrogen"
	CreateProjectFrameworkVite           CreateProjectFramework = "vite"
	CreateProjectFrameworkVitepress      CreateProjectFramework = "vitepress"
	CreateProjectFrameworkVuepress       CreateProjectFramework = "vuepress"
	CreateProjectFrameworkParcel         CreateProjectFramework = "parcel"
	CreateProjectFrameworkSanity         CreateProjectFramework = "sanity"
	CreateProjectFrameworkStorybook      CreateProjectFramework = "storybook"
)

func (e CreateProjectFramework) ToPointer() *CreateProjectFramework {
	return &e
}
func (e *CreateProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFramework: %v", v)
	}
}

// CreateProjectProjectsType - The Git Provider of the repository
type CreateProjectProjectsType string

const (
	CreateProjectProjectsTypeGithub    CreateProjectProjectsType = "github"
	CreateProjectProjectsTypeGitlab    CreateProjectProjectsType = "gitlab"
	CreateProjectProjectsTypeBitbucket CreateProjectProjectsType = "bitbucket"
)

func (e CreateProjectProjectsType) ToPointer() *CreateProjectProjectsType {
	return &e
}
func (e *CreateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = CreateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsType: %v", v)
	}
}

// GitRepository - The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
type GitRepository struct {
	// The name of the git repository. For example: \"vercel/next.js\"
	Repo string `json:"repo"`
	// The Git Provider of the repository
	Type CreateProjectProjectsType `json:"type"`
}

func (o *GitRepository) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GitRepository) GetType() CreateProjectProjectsType {
	if o == nil {
		return CreateProjectProjectsType("")
	}
	return o.Type
}

type CreateProjectRequestBody struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// Collection of ENV Variables the Project will use
	EnvironmentVariables []EnvironmentVariables `json:"environmentVariables,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateProjectFramework `json:"framework,omitempty"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
	GitRepository *GitRepository `json:"gitRepository,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name string `json:"name"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
}

func (o *CreateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectRequestBody) GetEnvironmentVariables() []EnvironmentVariables {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateProjectRequestBody) GetFramework() *CreateProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectRequestBody) GetGitRepository() *GitRepository {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

type CreateProjectRequest struct {
	RequestBody *CreateProjectRequestBody `request:"mediaType=application/json"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateProjectRequest) GetRequestBody() *CreateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type Analytics struct {
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	ID                  string   `json:"id"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *Analytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *Analytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *Analytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *Analytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Analytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *Analytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *Analytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type Definitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *Definitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Definitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Definitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateProjectCrons struct {
	Definitions []Definitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *CreateProjectCrons) GetDefinitions() []Definitions {
	if o == nil {
		return []Definitions{}
	}
	return o.Definitions
}

func (o *CreateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type DataCache struct {
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
	UserDisabled     bool     `json:"userDisabled"`
}

func (o *DataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *DataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *DataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14TypeIntegrationStoreSecret CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type = "integration-store-secret"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type: %v", v)
	}
}

type CreateProject14 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type `json:"type"`
}

func (o *CreateProject14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject14) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint14Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13TypePostgresURLNoSsl CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type = "postgres-url-no-ssl"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type: %v", v)
	}
}

type CreateProject13 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type `json:"type"`
}

func (o *CreateProject13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject13) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint13Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintTypePostgresDatabase CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType = "postgres-database"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType: %v", v)
	}
}

type CreateProject12 struct {
	StoreID string                                                                        `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType `json:"type"`
}

func (o *CreateProject12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject12) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresPassword CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-password"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type CreateProject11 struct {
	StoreID string                                                             `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
}

func (o *CreateProject11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject11) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10TypePostgresHost CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type = "postgres-host"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type: %v", v)
	}
}

type CreateProject10 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type `json:"type"`
}

func (o *CreateProject10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject10) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9TypePostgresUser CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type = "postgres-user"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type: %v", v)
	}
}

type CreateProject9 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type `json:"type"`
}

func (o *CreateProject9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject9) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8TypePostgresPrismaURL CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type = "postgres-prisma-url"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type: %v", v)
	}
}

type CreateProject8 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type `json:"type"`
}

func (o *CreateProject8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject8) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7TypePostgresURLNonPooling CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type: %v", v)
	}
}

type CreateProject7 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type `json:"type"`
}

func (o *CreateProject7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject7) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6TypePostgresURL CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type = "postgres-url"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type: %v", v)
	}
}

type CreateProject6 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type `json:"type"`
}

func (o *CreateProject6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject6) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5TypeBlobReadWriteToken CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type = "blob-read-write-token"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type: %v", v)
	}
}

type CreateProject5 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type `json:"type"`
}

func (o *CreateProject5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject5) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4TypeRedisRestAPIReadOnlyToken CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type: %v", v)
	}
}

type CreateProject4 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type `json:"type"`
}

func (o *CreateProject4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProject4) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3TypeRedisRestAPIToken CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type = "redis-rest-api-token"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type: %v", v)
	}
}

type CreateProjectProjects3 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type `json:"type"`
}

func (o *CreateProjectProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectProjects3) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2TypeRedisRestAPIURL CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type = "redis-rest-api-url"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type: %v", v)
	}
}

type CreateProjectProjectsResponse2002 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type `json:"type"`
}

func (o *CreateProjectProjectsResponse2002) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectProjectsResponse2002) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1TypeRedisURL CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type = "redis-url"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type: %v", v)
	}
}

type CreateProjectProjectsResponse2001 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type `json:"type"`
}

func (o *CreateProjectProjectsResponse2001) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectProjectsResponse2001) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type("")
	}
	return o.Type
}

type CreateProjectContentHintType string

const (
	CreateProjectContentHintTypeCreateProjectProjectsResponse2001 CreateProjectContentHintType = "createProject_projects_response_200_1"
	CreateProjectContentHintTypeCreateProjectProjectsResponse2002 CreateProjectContentHintType = "createProject_projects_response_200_2"
	CreateProjectContentHintTypeCreateProjectProjects3            CreateProjectContentHintType = "createProject_projects_3"
	CreateProjectContentHintTypeCreateProject4                    CreateProjectContentHintType = "createProject_4"
	CreateProjectContentHintTypeCreateProject5                    CreateProjectContentHintType = "createProject_5"
	CreateProjectContentHintTypeCreateProject6                    CreateProjectContentHintType = "createProject_6"
	CreateProjectContentHintTypeCreateProject7                    CreateProjectContentHintType = "createProject_7"
	CreateProjectContentHintTypeCreateProject8                    CreateProjectContentHintType = "createProject_8"
	CreateProjectContentHintTypeCreateProject9                    CreateProjectContentHintType = "createProject_9"
	CreateProjectContentHintTypeCreateProject10                   CreateProjectContentHintType = "createProject_10"
	CreateProjectContentHintTypeCreateProject11                   CreateProjectContentHintType = "createProject_11"
	CreateProjectContentHintTypeCreateProject12                   CreateProjectContentHintType = "createProject_12"
	CreateProjectContentHintTypeCreateProject13                   CreateProjectContentHintType = "createProject_13"
	CreateProjectContentHintTypeCreateProject14                   CreateProjectContentHintType = "createProject_14"
)

type CreateProjectContentHint struct {
	CreateProjectProjectsResponse2001 *CreateProjectProjectsResponse2001
	CreateProjectProjectsResponse2002 *CreateProjectProjectsResponse2002
	CreateProjectProjects3            *CreateProjectProjects3
	CreateProject4                    *CreateProject4
	CreateProject5                    *CreateProject5
	CreateProject6                    *CreateProject6
	CreateProject7                    *CreateProject7
	CreateProject8                    *CreateProject8
	CreateProject9                    *CreateProject9
	CreateProject10                   *CreateProject10
	CreateProject11                   *CreateProject11
	CreateProject12                   *CreateProject12
	CreateProject13                   *CreateProject13
	CreateProject14                   *CreateProject14

	Type CreateProjectContentHintType
}

func CreateCreateProjectContentHintCreateProjectProjectsResponse2001(createProjectProjectsResponse2001 CreateProjectProjectsResponse2001) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProjectProjectsResponse2001

	return CreateProjectContentHint{
		CreateProjectProjectsResponse2001: &createProjectProjectsResponse2001,
		Type:                              typ,
	}
}

func CreateCreateProjectContentHintCreateProjectProjectsResponse2002(createProjectProjectsResponse2002 CreateProjectProjectsResponse2002) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProjectProjectsResponse2002

	return CreateProjectContentHint{
		CreateProjectProjectsResponse2002: &createProjectProjectsResponse2002,
		Type:                              typ,
	}
}

func CreateCreateProjectContentHintCreateProjectProjects3(createProjectProjects3 CreateProjectProjects3) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProjectProjects3

	return CreateProjectContentHint{
		CreateProjectProjects3: &createProjectProjects3,
		Type:                   typ,
	}
}

func CreateCreateProjectContentHintCreateProject4(createProject4 CreateProject4) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject4

	return CreateProjectContentHint{
		CreateProject4: &createProject4,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject5(createProject5 CreateProject5) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject5

	return CreateProjectContentHint{
		CreateProject5: &createProject5,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject6(createProject6 CreateProject6) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject6

	return CreateProjectContentHint{
		CreateProject6: &createProject6,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject7(createProject7 CreateProject7) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject7

	return CreateProjectContentHint{
		CreateProject7: &createProject7,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject8(createProject8 CreateProject8) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject8

	return CreateProjectContentHint{
		CreateProject8: &createProject8,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject9(createProject9 CreateProject9) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject9

	return CreateProjectContentHint{
		CreateProject9: &createProject9,
		Type:           typ,
	}
}

func CreateCreateProjectContentHintCreateProject10(createProject10 CreateProject10) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject10

	return CreateProjectContentHint{
		CreateProject10: &createProject10,
		Type:            typ,
	}
}

func CreateCreateProjectContentHintCreateProject11(createProject11 CreateProject11) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject11

	return CreateProjectContentHint{
		CreateProject11: &createProject11,
		Type:            typ,
	}
}

func CreateCreateProjectContentHintCreateProject12(createProject12 CreateProject12) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject12

	return CreateProjectContentHint{
		CreateProject12: &createProject12,
		Type:            typ,
	}
}

func CreateCreateProjectContentHintCreateProject13(createProject13 CreateProject13) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject13

	return CreateProjectContentHint{
		CreateProject13: &createProject13,
		Type:            typ,
	}
}

func CreateCreateProjectContentHintCreateProject14(createProject14 CreateProject14) CreateProjectContentHint {
	typ := CreateProjectContentHintTypeCreateProject14

	return CreateProjectContentHint{
		CreateProject14: &createProject14,
		Type:            typ,
	}
}

func (u *CreateProjectContentHint) UnmarshalJSON(data []byte) error {

	var createProjectProjectsResponse2001 CreateProjectProjectsResponse2001 = CreateProjectProjectsResponse2001{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse2001, "", true, true); err == nil {
		u.CreateProjectProjectsResponse2001 = &createProjectProjectsResponse2001
		u.Type = CreateProjectContentHintTypeCreateProjectProjectsResponse2001
		return nil
	}

	var createProjectProjectsResponse2002 CreateProjectProjectsResponse2002 = CreateProjectProjectsResponse2002{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse2002, "", true, true); err == nil {
		u.CreateProjectProjectsResponse2002 = &createProjectProjectsResponse2002
		u.Type = CreateProjectContentHintTypeCreateProjectProjectsResponse2002
		return nil
	}

	var createProjectProjects3 CreateProjectProjects3 = CreateProjectProjects3{}
	if err := utils.UnmarshalJSON(data, &createProjectProjects3, "", true, true); err == nil {
		u.CreateProjectProjects3 = &createProjectProjects3
		u.Type = CreateProjectContentHintTypeCreateProjectProjects3
		return nil
	}

	var createProject4 CreateProject4 = CreateProject4{}
	if err := utils.UnmarshalJSON(data, &createProject4, "", true, true); err == nil {
		u.CreateProject4 = &createProject4
		u.Type = CreateProjectContentHintTypeCreateProject4
		return nil
	}

	var createProject5 CreateProject5 = CreateProject5{}
	if err := utils.UnmarshalJSON(data, &createProject5, "", true, true); err == nil {
		u.CreateProject5 = &createProject5
		u.Type = CreateProjectContentHintTypeCreateProject5
		return nil
	}

	var createProject6 CreateProject6 = CreateProject6{}
	if err := utils.UnmarshalJSON(data, &createProject6, "", true, true); err == nil {
		u.CreateProject6 = &createProject6
		u.Type = CreateProjectContentHintTypeCreateProject6
		return nil
	}

	var createProject7 CreateProject7 = CreateProject7{}
	if err := utils.UnmarshalJSON(data, &createProject7, "", true, true); err == nil {
		u.CreateProject7 = &createProject7
		u.Type = CreateProjectContentHintTypeCreateProject7
		return nil
	}

	var createProject8 CreateProject8 = CreateProject8{}
	if err := utils.UnmarshalJSON(data, &createProject8, "", true, true); err == nil {
		u.CreateProject8 = &createProject8
		u.Type = CreateProjectContentHintTypeCreateProject8
		return nil
	}

	var createProject9 CreateProject9 = CreateProject9{}
	if err := utils.UnmarshalJSON(data, &createProject9, "", true, true); err == nil {
		u.CreateProject9 = &createProject9
		u.Type = CreateProjectContentHintTypeCreateProject9
		return nil
	}

	var createProject10 CreateProject10 = CreateProject10{}
	if err := utils.UnmarshalJSON(data, &createProject10, "", true, true); err == nil {
		u.CreateProject10 = &createProject10
		u.Type = CreateProjectContentHintTypeCreateProject10
		return nil
	}

	var createProject11 CreateProject11 = CreateProject11{}
	if err := utils.UnmarshalJSON(data, &createProject11, "", true, true); err == nil {
		u.CreateProject11 = &createProject11
		u.Type = CreateProjectContentHintTypeCreateProject11
		return nil
	}

	var createProject12 CreateProject12 = CreateProject12{}
	if err := utils.UnmarshalJSON(data, &createProject12, "", true, true); err == nil {
		u.CreateProject12 = &createProject12
		u.Type = CreateProjectContentHintTypeCreateProject12
		return nil
	}

	var createProject13 CreateProject13 = CreateProject13{}
	if err := utils.UnmarshalJSON(data, &createProject13, "", true, true); err == nil {
		u.CreateProject13 = &createProject13
		u.Type = CreateProjectContentHintTypeCreateProject13
		return nil
	}

	var createProject14 CreateProject14 = CreateProject14{}
	if err := utils.UnmarshalJSON(data, &createProject14, "", true, true); err == nil {
		u.CreateProject14 = &createProject14
		u.Type = CreateProjectContentHintTypeCreateProject14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectContentHint", string(data))
}

func (u CreateProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse2001, "", true)
	}

	if u.CreateProjectProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse2002, "", true)
	}

	if u.CreateProjectProjects3 != nil {
		return utils.MarshalJSON(u.CreateProjectProjects3, "", true)
	}

	if u.CreateProject4 != nil {
		return utils.MarshalJSON(u.CreateProject4, "", true)
	}

	if u.CreateProject5 != nil {
		return utils.MarshalJSON(u.CreateProject5, "", true)
	}

	if u.CreateProject6 != nil {
		return utils.MarshalJSON(u.CreateProject6, "", true)
	}

	if u.CreateProject7 != nil {
		return utils.MarshalJSON(u.CreateProject7, "", true)
	}

	if u.CreateProject8 != nil {
		return utils.MarshalJSON(u.CreateProject8, "", true)
	}

	if u.CreateProject9 != nil {
		return utils.MarshalJSON(u.CreateProject9, "", true)
	}

	if u.CreateProject10 != nil {
		return utils.MarshalJSON(u.CreateProject10, "", true)
	}

	if u.CreateProject11 != nil {
		return utils.MarshalJSON(u.CreateProject11, "", true)
	}

	if u.CreateProject12 != nil {
		return utils.MarshalJSON(u.CreateProject12, "", true)
	}

	if u.CreateProject13 != nil {
		return utils.MarshalJSON(u.CreateProject13, "", true)
	}

	if u.CreateProject14 != nil {
		return utils.MarshalJSON(u.CreateProject14, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectContentHint: all fields are null")
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTypeFlagsSecret CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = "flags-secret"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

// CreateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                                                          `json:"encryptedValue"`
	Type           CreateProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *CreateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *CreateProjectInternalContentHint) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type CreateProjectProjectsResponse200ApplicationJSON2 string

const (
	CreateProjectProjectsResponse200ApplicationJSON2Production  CreateProjectProjectsResponse200ApplicationJSON2 = "production"
	CreateProjectProjectsResponse200ApplicationJSON2Preview     CreateProjectProjectsResponse200ApplicationJSON2 = "preview"
	CreateProjectProjectsResponse200ApplicationJSON2Development CreateProjectProjectsResponse200ApplicationJSON2 = "development"
)

func (e CreateProjectProjectsResponse200ApplicationJSON2) ToPointer() *CreateProjectProjectsResponse200ApplicationJSON2 {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectProjectsResponse200ApplicationJSON2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSON2: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSON1 string

const (
	CreateProjectProjectsResponse200ApplicationJSON1Production  CreateProjectProjectsResponse200ApplicationJSON1 = "production"
	CreateProjectProjectsResponse200ApplicationJSON1Preview     CreateProjectProjectsResponse200ApplicationJSON1 = "preview"
	CreateProjectProjectsResponse200ApplicationJSON1Development CreateProjectProjectsResponse200ApplicationJSON1 = "development"
)

func (e CreateProjectProjectsResponse200ApplicationJSON1) ToPointer() *CreateProjectProjectsResponse200ApplicationJSON1 {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectProjectsResponse200ApplicationJSON1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSON1: %v", v)
	}
}

type CreateProjectProjectsTargetType string

const (
	CreateProjectProjectsTargetTypeArrayOfCreateProjectProjectsResponse200ApplicationJson1 CreateProjectProjectsTargetType = "arrayOfCreateProjectProjectsResponse200ApplicationJSON1"
	CreateProjectProjectsTargetTypeCreateProjectProjectsResponse200ApplicationJSON2        CreateProjectProjectsTargetType = "createProject_projects_response_200_ApplicationJSON_2"
)

type CreateProjectProjectsTarget struct {
	ArrayOfCreateProjectProjectsResponse200ApplicationJson1 []CreateProjectProjectsResponse200ApplicationJSON1
	CreateProjectProjectsResponse200ApplicationJSON2        *CreateProjectProjectsResponse200ApplicationJSON2

	Type CreateProjectProjectsTargetType
}

func CreateCreateProjectProjectsTargetArrayOfCreateProjectProjectsResponse200ApplicationJson1(arrayOfCreateProjectProjectsResponse200ApplicationJson1 []CreateProjectProjectsResponse200ApplicationJSON1) CreateProjectProjectsTarget {
	typ := CreateProjectProjectsTargetTypeArrayOfCreateProjectProjectsResponse200ApplicationJson1

	return CreateProjectProjectsTarget{
		ArrayOfCreateProjectProjectsResponse200ApplicationJson1: arrayOfCreateProjectProjectsResponse200ApplicationJson1,
		Type: typ,
	}
}

func CreateCreateProjectProjectsTargetCreateProjectProjectsResponse200ApplicationJSON2(createProjectProjectsResponse200ApplicationJSON2 CreateProjectProjectsResponse200ApplicationJSON2) CreateProjectProjectsTarget {
	typ := CreateProjectProjectsTargetTypeCreateProjectProjectsResponse200ApplicationJSON2

	return CreateProjectProjectsTarget{
		CreateProjectProjectsResponse200ApplicationJSON2: &createProjectProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *CreateProjectProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectProjectsResponse200ApplicationJson1 []CreateProjectProjectsResponse200ApplicationJSON1 = []CreateProjectProjectsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectProjectsResponse200ApplicationJson1, "", true, true); err == nil {
		u.ArrayOfCreateProjectProjectsResponse200ApplicationJson1 = arrayOfCreateProjectProjectsResponse200ApplicationJson1
		u.Type = CreateProjectProjectsTargetTypeArrayOfCreateProjectProjectsResponse200ApplicationJson1
		return nil
	}

	var createProjectProjectsResponse200ApplicationJSON2 CreateProjectProjectsResponse200ApplicationJSON2 = CreateProjectProjectsResponse200ApplicationJSON2("")
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.CreateProjectProjectsResponse200ApplicationJSON2 = &createProjectProjectsResponse200ApplicationJSON2
		u.Type = CreateProjectProjectsTargetTypeCreateProjectProjectsResponse200ApplicationJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsTarget", string(data))
}

func (u CreateProjectProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectProjectsResponse200ApplicationJson1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectProjectsResponse200ApplicationJson1, "", true)
	}

	if u.CreateProjectProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsTarget: all fields are null")
}

type CreateProjectProjectsResponseType string

const (
	CreateProjectProjectsResponseTypeSystem    CreateProjectProjectsResponseType = "system"
	CreateProjectProjectsResponseTypeSecret    CreateProjectProjectsResponseType = "secret"
	CreateProjectProjectsResponseTypeEncrypted CreateProjectProjectsResponseType = "encrypted"
	CreateProjectProjectsResponseTypePlain     CreateProjectProjectsResponseType = "plain"
	CreateProjectProjectsResponseTypeSensitive CreateProjectProjectsResponseType = "sensitive"
)

func (e CreateProjectProjectsResponseType) ToPointer() *CreateProjectProjectsResponseType {
	return &e
}
func (e *CreateProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponseType: %v", v)
	}
}

type Env struct {
	Comment             *string                   `json:"comment,omitempty"`
	ConfigurationID     *string                   `json:"configurationId,omitempty"`
	ContentHint         *CreateProjectContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                  `json:"createdAt,omitempty"`
	CreatedBy           *string                   `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                   `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *CreateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                            `json:"key"`
	Target              *CreateProjectProjectsTarget      `json:"target,omitempty"`
	Type                CreateProjectProjectsResponseType `json:"type"`
	UpdatedAt           *float64                          `json:"updatedAt,omitempty"`
	UpdatedBy           *string                           `json:"updatedBy,omitempty"`
	Value               string                            `json:"value"`
}

func (o *Env) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Env) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Env) GetContentHint() *CreateProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Env) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Env) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Env) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *Env) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Env) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Env) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Env) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Env) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Env) GetInternalContentHint() *CreateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Env) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Env) GetTarget() *CreateProjectProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Env) GetType() CreateProjectProjectsResponseType {
	if o == nil {
		return CreateProjectProjectsResponseType("")
	}
	return o.Type
}

func (o *Env) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Env) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Env) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectProjectsFramework string

const (
	CreateProjectProjectsFrameworkBlitzjs        CreateProjectProjectsFramework = "blitzjs"
	CreateProjectProjectsFrameworkNextjs         CreateProjectProjectsFramework = "nextjs"
	CreateProjectProjectsFrameworkGatsby         CreateProjectProjectsFramework = "gatsby"
	CreateProjectProjectsFrameworkRemix          CreateProjectProjectsFramework = "remix"
	CreateProjectProjectsFrameworkAstro          CreateProjectProjectsFramework = "astro"
	CreateProjectProjectsFrameworkHexo           CreateProjectProjectsFramework = "hexo"
	CreateProjectProjectsFrameworkEleventy       CreateProjectProjectsFramework = "eleventy"
	CreateProjectProjectsFrameworkDocusaurus2    CreateProjectProjectsFramework = "docusaurus-2"
	CreateProjectProjectsFrameworkDocusaurus     CreateProjectProjectsFramework = "docusaurus"
	CreateProjectProjectsFrameworkPreact         CreateProjectProjectsFramework = "preact"
	CreateProjectProjectsFrameworkSolidstart1    CreateProjectProjectsFramework = "solidstart-1"
	CreateProjectProjectsFrameworkSolidstart     CreateProjectProjectsFramework = "solidstart"
	CreateProjectProjectsFrameworkDojo           CreateProjectProjectsFramework = "dojo"
	CreateProjectProjectsFrameworkEmber          CreateProjectProjectsFramework = "ember"
	CreateProjectProjectsFrameworkVue            CreateProjectProjectsFramework = "vue"
	CreateProjectProjectsFrameworkScully         CreateProjectProjectsFramework = "scully"
	CreateProjectProjectsFrameworkIonicAngular   CreateProjectProjectsFramework = "ionic-angular"
	CreateProjectProjectsFrameworkAngular        CreateProjectProjectsFramework = "angular"
	CreateProjectProjectsFrameworkPolymer        CreateProjectProjectsFramework = "polymer"
	CreateProjectProjectsFrameworkSvelte         CreateProjectProjectsFramework = "svelte"
	CreateProjectProjectsFrameworkSveltekit      CreateProjectProjectsFramework = "sveltekit"
	CreateProjectProjectsFrameworkSveltekit1     CreateProjectProjectsFramework = "sveltekit-1"
	CreateProjectProjectsFrameworkIonicReact     CreateProjectProjectsFramework = "ionic-react"
	CreateProjectProjectsFrameworkCreateReactApp CreateProjectProjectsFramework = "create-react-app"
	CreateProjectProjectsFrameworkGridsome       CreateProjectProjectsFramework = "gridsome"
	CreateProjectProjectsFrameworkUmijs          CreateProjectProjectsFramework = "umijs"
	CreateProjectProjectsFrameworkSapper         CreateProjectProjectsFramework = "sapper"
	CreateProjectProjectsFrameworkSaber          CreateProjectProjectsFramework = "saber"
	CreateProjectProjectsFrameworkStencil        CreateProjectProjectsFramework = "stencil"
	CreateProjectProjectsFrameworkNuxtjs         CreateProjectProjectsFramework = "nuxtjs"
	CreateProjectProjectsFrameworkRedwoodjs      CreateProjectProjectsFramework = "redwoodjs"
	CreateProjectProjectsFrameworkHugo           CreateProjectProjectsFramework = "hugo"
	CreateProjectProjectsFrameworkJekyll         CreateProjectProjectsFramework = "jekyll"
	CreateProjectProjectsFrameworkBrunch         CreateProjectProjectsFramework = "brunch"
	CreateProjectProjectsFrameworkMiddleman      CreateProjectProjectsFramework = "middleman"
	CreateProjectProjectsFrameworkZola           CreateProjectProjectsFramework = "zola"
	CreateProjectProjectsFrameworkHydrogen       CreateProjectProjectsFramework = "hydrogen"
	CreateProjectProjectsFrameworkVite           CreateProjectProjectsFramework = "vite"
	CreateProjectProjectsFrameworkVitepress      CreateProjectProjectsFramework = "vitepress"
	CreateProjectProjectsFrameworkVuepress       CreateProjectProjectsFramework = "vuepress"
	CreateProjectProjectsFrameworkParcel         CreateProjectProjectsFramework = "parcel"
	CreateProjectProjectsFrameworkSanity         CreateProjectProjectsFramework = "sanity"
	CreateProjectProjectsFrameworkStorybook      CreateProjectProjectsFramework = "storybook"
)

func (e CreateProjectProjectsFramework) ToPointer() *CreateProjectProjectsFramework {
	return &e
}
func (e *CreateProjectProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsFramework: %v", v)
	}
}

type GitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *GitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *GitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type JobStatus string

const (
	JobStatusSucceeded  JobStatus = "succeeded"
	JobStatusFailed     JobStatus = "failed"
	JobStatusSkipped    JobStatus = "skipped"
	JobStatusPending    JobStatus = "pending"
	JobStatusInProgress JobStatus = "in-progress"
)

func (e JobStatus) ToPointer() *JobStatus {
	return &e
}
func (e *JobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = JobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatus: %v", v)
	}
}

type CreateProjectProjectsResponse200Type string

const (
	CreateProjectProjectsResponse200TypePromote  CreateProjectProjectsResponse200Type = "promote"
	CreateProjectProjectsResponse200TypeRollback CreateProjectProjectsResponse200Type = "rollback"
)

func (e CreateProjectProjectsResponse200Type) ToPointer() *CreateProjectProjectsResponse200Type {
	return &e
}
func (e *CreateProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = CreateProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200Type: %v", v)
	}
}

type LastAliasRequest struct {
	FromDeploymentID string                               `json:"fromDeploymentId"`
	JobStatus        JobStatus                            `json:"jobStatus"`
	RequestedAt      float64                              `json:"requestedAt"`
	ToDeploymentID   string                               `json:"toDeploymentId"`
	Type             CreateProjectProjectsResponse200Type `json:"type"`
}

func (o *LastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *LastAliasRequest) GetJobStatus() JobStatus {
	if o == nil {
		return JobStatus("")
	}
	return o.JobStatus
}

func (o *LastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *LastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *LastAliasRequest) GetType() CreateProjectProjectsResponse200Type {
	if o == nil {
		return CreateProjectProjectsResponse200Type("")
	}
	return o.Type
}

type LastRollbackTarget struct {
}

type CreateProjectAliasAssignedType string

const (
	CreateProjectAliasAssignedTypeNumber  CreateProjectAliasAssignedType = "number"
	CreateProjectAliasAssignedTypeBoolean CreateProjectAliasAssignedType = "boolean"
)

type CreateProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type CreateProjectAliasAssignedType
}

func CreateCreateProjectAliasAssignedNumber(number float64) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeNumber

	return CreateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateProjectAliasAssignedBoolean(boolean bool) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeBoolean

	return CreateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectAliasAssigned", string(data))
}

func (u CreateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectAliasAssigned: all fields are null")
}

type CreateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProjectBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *CreateProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type CreateProjectChecksConclusion string

const (
	CreateProjectChecksConclusionSucceeded CreateProjectChecksConclusion = "succeeded"
	CreateProjectChecksConclusionFailed    CreateProjectChecksConclusion = "failed"
	CreateProjectChecksConclusionSkipped   CreateProjectChecksConclusion = "skipped"
	CreateProjectChecksConclusionCanceled  CreateProjectChecksConclusion = "canceled"
)

func (e CreateProjectChecksConclusion) ToPointer() *CreateProjectChecksConclusion {
	return &e
}
func (e *CreateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksConclusion: %v", v)
	}
}

type CreateProjectChecksState string

const (
	CreateProjectChecksStateRegistered CreateProjectChecksState = "registered"
	CreateProjectChecksStateRunning    CreateProjectChecksState = "running"
	CreateProjectChecksStateCompleted  CreateProjectChecksState = "completed"
)

func (e CreateProjectChecksState) ToPointer() *CreateProjectChecksState {
	return &e
}
func (e *CreateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksState: %v", v)
	}
}

type CreateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type OidcTokenClaimsType string

const (
	OidcTokenClaimsTypeStr        OidcTokenClaimsType = "str"
	OidcTokenClaimsTypeArrayOfStr OidcTokenClaimsType = "arrayOfStr"
)

type OidcTokenClaims struct {
	Str        *string
	ArrayOfStr []string

	Type OidcTokenClaimsType
}

func CreateOidcTokenClaimsStr(str string) OidcTokenClaims {
	typ := OidcTokenClaimsTypeStr

	return OidcTokenClaims{
		Str:  &str,
		Type: typ,
	}
}

func CreateOidcTokenClaimsArrayOfStr(arrayOfStr []string) OidcTokenClaims {
	typ := OidcTokenClaimsTypeArrayOfStr

	return OidcTokenClaims{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *OidcTokenClaims) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OidcTokenClaimsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = OidcTokenClaimsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OidcTokenClaims", string(data))
}

func (u OidcTokenClaims) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type OidcTokenClaims: all fields are null")
}

type CreateProjectPlan string

const (
	CreateProjectPlanPro        CreateProjectPlan = "pro"
	CreateProjectPlanEnterprise CreateProjectPlan = "enterprise"
	CreateProjectPlanHobby      CreateProjectPlan = "hobby"
)

func (e CreateProjectPlan) ToPointer() *CreateProjectPlan {
	return &e
}
func (e *CreateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectPlan: %v", v)
	}
}

type CreateProjectReadyState string

const (
	CreateProjectReadyStateBuilding     CreateProjectReadyState = "BUILDING"
	CreateProjectReadyStateError        CreateProjectReadyState = "ERROR"
	CreateProjectReadyStateInitializing CreateProjectReadyState = "INITIALIZING"
	CreateProjectReadyStateQueued       CreateProjectReadyState = "QUEUED"
	CreateProjectReadyStateReady        CreateProjectReadyState = "READY"
	CreateProjectReadyStateCanceled     CreateProjectReadyState = "CANCELED"
)

func (e CreateProjectReadyState) ToPointer() *CreateProjectReadyState {
	return &e
}
func (e *CreateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadyState: %v", v)
	}
}

type CreateProjectReadySubstate string

const (
	CreateProjectReadySubstateStaged   CreateProjectReadySubstate = "STAGED"
	CreateProjectReadySubstatePromoted CreateProjectReadySubstate = "PROMOTED"
)

func (e CreateProjectReadySubstate) ToPointer() *CreateProjectReadySubstate {
	return &e
}
func (e *CreateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadySubstate: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONType string

const (
	CreateProjectProjectsResponse200ApplicationJSONTypeLambdas CreateProjectProjectsResponse200ApplicationJSONType = "LAMBDAS"
)

func (e CreateProjectProjectsResponse200ApplicationJSONType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type LatestDeployments struct {
	Alias                  []string                       `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                        `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                       `json:"automaticAliases,omitempty"`
	BuildingAt             *float64                       `json:"buildingAt,omitempty"`
	Builds                 []CreateProjectBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *CreateProjectChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                          `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                        `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                        `json:"createdAt"`
	CreatedIn              string                         `json:"createdIn"`
	Creator                *CreateProjectCreator          `json:"creator"`
	DeploymentHostname     string                         `json:"deploymentHostname"`
	Forced                 *bool                          `json:"forced,omitempty"`
	ID                     string                         `json:"id"`
	Meta                   map[string]string              `json:"meta,omitempty"`
	MonorepoManager        *string                        `json:"monorepoManager,omitempty"`
	Name                   string                         `json:"name"`
	OidcTokenClaims        map[string]OidcTokenClaims     `json:"oidcTokenClaims,omitempty"`
	Plan                   CreateProjectPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                               `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                `json:"private"`
	ReadyAt                *float64                                            `json:"readyAt,omitempty"`
	ReadyState             CreateProjectReadyState                             `json:"readyState"`
	ReadySubstate          *CreateProjectReadySubstate                         `json:"readySubstate,omitempty"`
	RequestedAt            *float64                                            `json:"requestedAt,omitempty"`
	Target                 *string                                             `json:"target,omitempty"`
	TeamID                 *string                                             `json:"teamId,omitempty"`
	Type                   CreateProjectProjectsResponse200ApplicationJSONType `json:"type"`
	URL                    string                                              `json:"url"`
	UserID                 string                                              `json:"userId"`
	WithCache              *bool                                               `json:"withCache,omitempty"`
}

func (o *LatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *LatestDeployments) GetAliasAssigned() *CreateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *LatestDeployments) GetAliasError() *CreateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *LatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *LatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *LatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *LatestDeployments) GetBuilds() []CreateProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *LatestDeployments) GetChecksConclusion() *CreateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *LatestDeployments) GetChecksState() *CreateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *LatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *LatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *LatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *LatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *LatestDeployments) GetCreator() *CreateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *LatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *LatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *LatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *LatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *LatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LatestDeployments) GetOidcTokenClaims() map[string]OidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *LatestDeployments) GetPlan() CreateProjectPlan {
	if o == nil {
		return CreateProjectPlan("")
	}
	return o.Plan
}

func (o *LatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *LatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *LatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *LatestDeployments) GetReadyState() CreateProjectReadyState {
	if o == nil {
		return CreateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *LatestDeployments) GetReadySubstate() *CreateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *LatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *LatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *LatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *LatestDeployments) GetType() CreateProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *LatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *LatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *LatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProjectProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3TypeBitbucket CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type = "bitbucket"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type: %v", v)
	}
}

type CreateProject3 struct {
	CreatedAt        *float64                                                              `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectProjectsDeployHooks                                    `json:"deployHooks"`
	GitCredentialID  *string                                                               `json:"gitCredentialId,omitempty"`
	Name             *string                                                               `json:"name,omitempty"`
	Owner            *string                                                               `json:"owner,omitempty"`
	ProductionBranch *string                                                               `json:"productionBranch,omitempty"`
	Slug             *string                                                               `json:"slug,omitempty"`
	Sourceless       *bool                                                                 `json:"sourceless,omitempty"`
	Type             *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type `json:"type,omitempty"`
	UpdatedAt        *float64                                                              `json:"updatedAt,omitempty"`
	UUID             *string                                                               `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                               `json:"workspaceUuid,omitempty"`
}

func (o *CreateProject3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProject3) GetDeployHooks() []CreateProjectProjectsDeployHooks {
	if o == nil {
		return []CreateProjectProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProject3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProject3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateProject3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateProject3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProject3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProject3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProject3) GetType() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink3Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProject3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProject3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *CreateProject3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateProjectDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2TypeGitlab CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type = "gitlab"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type: %v", v)
	}
}

type CreateProjectProjects2 struct {
	CreatedAt                *float64                                                              `json:"createdAt,omitempty"`
	DeployHooks              []CreateProjectDeployHooks                                            `json:"deployHooks"`
	GitCredentialID          *string                                                               `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                               `json:"productionBranch,omitempty"`
	ProjectID                *string                                                               `json:"projectId,omitempty"`
	ProjectName              *string                                                               `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                               `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                               `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                               `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                                 `json:"sourceless,omitempty"`
	Type                     *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type `json:"type,omitempty"`
	UpdatedAt                *float64                                                              `json:"updatedAt,omitempty"`
}

func (o *CreateProjectProjects2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectProjects2) GetDeployHooks() []CreateProjectDeployHooks {
	if o == nil {
		return []CreateProjectDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectProjects2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectProjects2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProjectProjects2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectProjects2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *CreateProjectProjects2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *CreateProjectProjects2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *CreateProjectProjects2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *CreateProjectProjects2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectProjects2) GetType() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLink2Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectProjects2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type DeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *DeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkTypeGithub CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType = "github"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType: %v", v)
	}
}

type CreateProjectProjects1 struct {
	CreatedAt        *float64                                                             `json:"createdAt,omitempty"`
	DeployHooks      []DeployHooks                                                        `json:"deployHooks"`
	GitCredentialID  *string                                                              `json:"gitCredentialId,omitempty"`
	Org              *string                                                              `json:"org,omitempty"`
	ProductionBranch *string                                                              `json:"productionBranch,omitempty"`
	Repo             *string                                                              `json:"repo,omitempty"`
	RepoID           *float64                                                             `json:"repoId,omitempty"`
	Sourceless       *bool                                                                `json:"sourceless,omitempty"`
	Type             *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType `json:"type,omitempty"`
	UpdatedAt        *float64                                                             `json:"updatedAt,omitempty"`
}

func (o *CreateProjectProjects1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectProjects1) GetDeployHooks() []DeployHooks {
	if o == nil {
		return []DeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectProjects1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectProjects1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProjectProjects1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *CreateProjectProjects1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProjectProjects1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProjectProjects1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectProjects1) GetType() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectProjects1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type LinkType string

const (
	LinkTypeCreateProjectProjects1 LinkType = "createProject_projects_1"
	LinkTypeCreateProjectProjects2 LinkType = "createProject_projects_2"
	LinkTypeCreateProject3         LinkType = "createProject_3"
)

type Link struct {
	CreateProjectProjects1 *CreateProjectProjects1
	CreateProjectProjects2 *CreateProjectProjects2
	CreateProject3         *CreateProject3

	Type LinkType
}

func CreateLinkCreateProjectProjects1(createProjectProjects1 CreateProjectProjects1) Link {
	typ := LinkTypeCreateProjectProjects1

	return Link{
		CreateProjectProjects1: &createProjectProjects1,
		Type:                   typ,
	}
}

func CreateLinkCreateProjectProjects2(createProjectProjects2 CreateProjectProjects2) Link {
	typ := LinkTypeCreateProjectProjects2

	return Link{
		CreateProjectProjects2: &createProjectProjects2,
		Type:                   typ,
	}
}

func CreateLinkCreateProject3(createProject3 CreateProject3) Link {
	typ := LinkTypeCreateProject3

	return Link{
		CreateProject3: &createProject3,
		Type:           typ,
	}
}

func (u *Link) UnmarshalJSON(data []byte) error {

	var createProjectProjects1 CreateProjectProjects1 = CreateProjectProjects1{}
	if err := utils.UnmarshalJSON(data, &createProjectProjects1, "", true, true); err == nil {
		u.CreateProjectProjects1 = &createProjectProjects1
		u.Type = LinkTypeCreateProjectProjects1
		return nil
	}

	var createProjectProjects2 CreateProjectProjects2 = CreateProjectProjects2{}
	if err := utils.UnmarshalJSON(data, &createProjectProjects2, "", true, true); err == nil {
		u.CreateProjectProjects2 = &createProjectProjects2
		u.Type = LinkTypeCreateProjectProjects2
		return nil
	}

	var createProject3 CreateProject3 = CreateProject3{}
	if err := utils.UnmarshalJSON(data, &createProject3, "", true, true); err == nil {
		u.CreateProject3 = &createProject3
		u.Type = LinkTypeCreateProject3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Link", string(data))
}

func (u Link) MarshalJSON() ([]byte, error) {
	if u.CreateProjectProjects1 != nil {
		return utils.MarshalJSON(u.CreateProjectProjects1, "", true)
	}

	if u.CreateProjectProjects2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjects2, "", true)
	}

	if u.CreateProject3 != nil {
		return utils.MarshalJSON(u.CreateProject3, "", true)
	}

	return nil, errors.New("could not marshal union type Link: all fields are null")
}

type CreateProjectNodeVersion string

const (
	CreateProjectNodeVersionTwentyX   CreateProjectNodeVersion = "20.x"
	CreateProjectNodeVersionEighteenX CreateProjectNodeVersion = "18.x"
	CreateProjectNodeVersionSixteenX  CreateProjectNodeVersion = "16.x"
	CreateProjectNodeVersionFourteenX CreateProjectNodeVersion = "14.x"
	CreateProjectNodeVersionTwelveX   CreateProjectNodeVersion = "12.x"
	CreateProjectNodeVersionTenX      CreateProjectNodeVersion = "10.x"
	CreateProjectNodeVersionEight10X  CreateProjectNodeVersion = "8.10.x"
)

func (e CreateProjectNodeVersion) ToPointer() *CreateProjectNodeVersion {
	return &e
}
func (e *CreateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = CreateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectNodeVersion: %v", v)
	}
}

type OidcTokenConfig struct {
	Enabled bool `json:"enabled"`
}

func (o *OidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type CreateProjectPaths struct {
	Value string `json:"value"`
}

func (o *CreateProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectOptionsAllowlist struct {
	Paths []CreateProjectPaths `json:"paths"`
}

func (o *CreateProjectOptionsAllowlist) GetPaths() []CreateProjectPaths {
	if o == nil {
		return []CreateProjectPaths{}
	}
	return o.Paths
}

type CreateProjectPasswordProtection struct {
}

type Permissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AccessGroup                              []shared.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	BlobStoreTokenSet                        []shared.ACLAction `json:"blobStoreTokenSet,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []shared.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []shared.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Environments                             []shared.ACLAction `json:"environments,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationEvent                         []shared.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []shared.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationStore                         []shared.ACLAction `json:"integrationStore,omitempty"`
	IntegrationStoreTokenSet                 []shared.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MarketplaceBillingData                   []shared.ACLAction `json:"marketplaceBillingData,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringSettings                       []shared.ACLAction `json:"monitoringSettings,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationStatementOfReasons           []shared.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	Oauth2Application                        []shared.ACLAction `json:"oauth2Application,omitempty"`
	Oauth2Connection                         []shared.ACLAction `json:"oauth2Connection,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OptionsAllowlist                         []shared.ACLAction `json:"optionsAllowlist,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PostgresStoreTokenSet                    []shared.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	ProductionAliasProtectionBypass          []shared.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAccessGroup                       []shared.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentExpiration              []shared.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainCheckConfig                 []shared.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectID                                []shared.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []shared.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectSupportCase                       []shared.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []shared.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RedisStoreTokenSet                       []shared.ACLAction `json:"redisStoreTokenSet,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	Repository                               []shared.ACLAction `json:"repository,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVarConnection                   []shared.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	SkewProtection                           []shared.ACLAction `json:"skewProtection,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	WebAuthn                                 []shared.ACLAction `json:"webAuthn,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *Permissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *Permissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *Permissions) GetAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *Permissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *Permissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *Permissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *Permissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *Permissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *Permissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *Permissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *Permissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Permissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *Permissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *Permissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *Permissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *Permissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *Permissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *Permissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *Permissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *Permissions) GetBlobStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *Permissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *Permissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *Permissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *Permissions) GetCodeChecks() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *Permissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *Permissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *Permissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *Permissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *Permissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *Permissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *Permissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *Permissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *Permissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *Permissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *Permissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *Permissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *Permissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *Permissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *Permissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *Permissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *Permissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *Permissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *Permissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *Permissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *Permissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *Permissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *Permissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *Permissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *Permissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *Permissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *Permissions) GetEdgeConfigSchema() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *Permissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *Permissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *Permissions) GetEnvironments() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *Permissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *Permissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *Permissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *Permissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *Permissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *Permissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *Permissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *Permissions) GetIntegrationEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *Permissions) GetIntegrationResourceSecrets() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *Permissions) GetIntegrationStore() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStore
}

func (o *Permissions) GetIntegrationStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *Permissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *Permissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *Permissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *Permissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *Permissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *Permissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *Permissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *Permissions) GetMarketplaceBillingData() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *Permissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *Permissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *Permissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *Permissions) GetMonitoringSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *Permissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *Permissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *Permissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *Permissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *Permissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *Permissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *Permissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *Permissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *Permissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *Permissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *Permissions) GetNotificationStatementOfReasons() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *Permissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *Permissions) GetOauth2Application() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *Permissions) GetOauth2Connection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *Permissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *Permissions) GetOptionsAllowlist() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *Permissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *Permissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *Permissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *Permissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *Permissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *Permissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *Permissions) GetPostgresStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *Permissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *Permissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *Permissions) GetProductionAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *Permissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *Permissions) GetProjectAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *Permissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *Permissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *Permissions) GetProjectDeploymentExpiration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *Permissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *Permissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *Permissions) GetProjectDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *Permissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *Permissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *Permissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *Permissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *Permissions) GetProjectID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Permissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *Permissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *Permissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *Permissions) GetProjectMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *Permissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *Permissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *Permissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *Permissions) GetProjectSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *Permissions) GetProjectSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *Permissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *Permissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *Permissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *Permissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *Permissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *Permissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *Permissions) GetRedisStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *Permissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *Permissions) GetRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *Permissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *Permissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *Permissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *Permissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *Permissions) GetSharedEnvVarConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *Permissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *Permissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *Permissions) GetSkewProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *Permissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *Permissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *Permissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *Permissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *Permissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *Permissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *Permissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *Permissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *Permissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *Permissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *Permissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *Permissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *Permissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *Permissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *Permissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *Permissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *Permissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *Permissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *Permissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *Permissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *Permissions) GetWebAuthn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *Permissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *Permissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type Scope string

const (
	ScopeAutomationBypass Scope = "automation-bypass"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

type CreateProjectProtectionBypass struct {
	CreatedAt float64 `json:"createdAt"`
	CreatedBy string  `json:"createdBy"`
	Scope     Scope   `json:"scope"`
}

func (o *CreateProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProjectProtectionBypass) GetScope() Scope {
	if o == nil {
		return Scope("")
	}
	return o.Scope
}

type CreateProjectHandle string

const (
	CreateProjectHandleInit     CreateProjectHandle = "init"
	CreateProjectHandleFinalize CreateProjectHandle = "finalize"
)

func (e CreateProjectHandle) ToPointer() *CreateProjectHandle {
	return &e
}
func (e *CreateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = CreateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectHandle: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypePath      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery     CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type CreateProjectProjectsValueType string

const (
	CreateProjectProjectsValueTypeStr                                                                  CreateProjectProjectsValueType = "str"
	CreateProjectProjectsValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 CreateProjectProjectsValueType = "createProject_projects_response_200_ApplicationJSON_responseBody_security_2"
)

type CreateProjectProjectsValue struct {
	Str                                                                  *string
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2

	Type CreateProjectProjectsValueType
}

func CreateCreateProjectProjectsValueStr(str string) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeStr

	return CreateProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectProjectsValueCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2(createProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2

	return CreateProjectProjectsValue{
		CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2: &createProjectProjectsResponse200ApplicationJSONResponseBodySecurity2,
		Type: typ,
	}
}

func (u *CreateProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var createProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true, true); err == nil {
		u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 = &createProjectProjectsResponse200ApplicationJSONResponseBodySecurity2
		u.Type = CreateProjectProjectsValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsValue", string(data))
}

func (u CreateProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsValue: all fields are null")
}

type CreateProjectHas struct {
	Key   *string                                                                 `json:"key,omitempty"`
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Value *CreateProjectProjectsValue                                             `json:"value,omitempty"`
}

func (o *CreateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectHas) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *CreateProjectHas) GetValue() *CreateProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery     CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type CreateProjectValueType string

const (
	CreateProjectValueTypeStr                                                                                CreateProjectValueType = "str"
	CreateProjectValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 CreateProjectValueType = "createProject_projects_response_200_ApplicationJSON_responseBody_security_firewallRoutes_2"
)

type CreateProjectValue struct {
	Str                                                                                *string
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2

	Type CreateProjectValueType
}

func CreateCreateProjectValueStr(str string) CreateProjectValue {
	typ := CreateProjectValueTypeStr

	return CreateProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectValueCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2(createProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2) CreateProjectValue {
	typ := CreateProjectValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2

	return CreateProjectValue{
		CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2: &createProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2,
		Type: typ,
	}
}

func (u *CreateProjectValue) UnmarshalJSON(data []byte) error {

	var createProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2, "", true, true); err == nil {
		u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 = &createProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2
		u.Type = CreateProjectValueTypeCreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectValue", string(data))
}

func (u CreateProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutes2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectValue: all fields are null")
}

type CreateProjectMissing struct {
	Key   *string                                                                               `json:"key,omitempty"`
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Value *CreateProjectValue                                                                   `json:"value,omitempty"`
}

func (o *CreateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectMissing) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *CreateProjectMissing) GetValue() *CreateProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type Action string

const (
	ActionDeny      Action = "deny"
	ActionChallenge Action = "challenge"
	ActionLog       Action = "log"
	ActionBypass    Action = "bypass"
	ActionRateLimit Action = "rate_limit"
)

func (e Action) ToPointer() *Action {
	return &e
}
func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

type Algo string

const (
	AlgoFixedWindow Algo = "fixed_window"
	AlgoTokenBucket Algo = "token_bucket"
)

func (e Algo) ToPointer() *Algo {
	return &e
}
func (e *Algo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = Algo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Algo: %v", v)
	}
}

type Erl struct {
	Algo   Algo     `json:"algo"`
	Keys   []string `json:"keys"`
	Limit  float64  `json:"limit"`
	Window float64  `json:"window"`
}

func (o *Erl) GetAlgo() Algo {
	if o == nil {
		return Algo("")
	}
	return o.Algo
}

func (o *Erl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *Erl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *Erl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

type Mitigate struct {
	Action Action `json:"action"`
	Erl    *Erl   `json:"erl,omitempty"`
	RuleID string `json:"rule_id"`
}

func (o *Mitigate) GetAction() Action {
	if o == nil {
		return Action("")
	}
	return o.Action
}

func (o *Mitigate) GetErl() *Erl {
	if o == nil {
		return nil
	}
	return o.Erl
}

func (o *Mitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBody2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectProjectsResponse200ApplicationJSONResponseBody2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type SrcType string

const (
	SrcTypeStr                                                          SrcType = "str"
	SrcTypeCreateProjectProjectsResponse200ApplicationJSONResponseBody2 SrcType = "createProject_projects_response_200_ApplicationJSON_responseBody_2"
)

type Src struct {
	Str                                                          *string
	CreateProjectProjectsResponse200ApplicationJSONResponseBody2 *CreateProjectProjectsResponse200ApplicationJSONResponseBody2

	Type SrcType
}

func CreateSrcStr(str string) Src {
	typ := SrcTypeStr

	return Src{
		Str:  &str,
		Type: typ,
	}
}

func CreateSrcCreateProjectProjectsResponse200ApplicationJSONResponseBody2(createProjectProjectsResponse200ApplicationJSONResponseBody2 CreateProjectProjectsResponse200ApplicationJSONResponseBody2) Src {
	typ := SrcTypeCreateProjectProjectsResponse200ApplicationJSONResponseBody2

	return Src{
		CreateProjectProjectsResponse200ApplicationJSONResponseBody2: &createProjectProjectsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *Src) UnmarshalJSON(data []byte) error {

	var createProjectProjectsResponse200ApplicationJSONResponseBody2 CreateProjectProjectsResponse200ApplicationJSONResponseBody2 = CreateProjectProjectsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.CreateProjectProjectsResponse200ApplicationJSONResponseBody2 = &createProjectProjectsResponse200ApplicationJSONResponseBody2
		u.Type = SrcTypeCreateProjectProjectsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Src", string(data))
}

func (u Src) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectProjectsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse200ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type Src: all fields are null")
}

type FirewallRoutes struct {
	Dest     *string                `json:"dest,omitempty"`
	Handle   *CreateProjectHandle   `json:"handle,omitempty"`
	Has      []CreateProjectHas     `json:"has,omitempty"`
	Missing  []CreateProjectMissing `json:"missing,omitempty"`
	Mitigate *Mitigate              `json:"mitigate,omitempty"`
	Src      *Src                   `json:"src,omitempty"`
	Status   *float64               `json:"status,omitempty"`
}

func (o *FirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *FirewallRoutes) GetHandle() *CreateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *FirewallRoutes) GetHas() []CreateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *FirewallRoutes) GetMissing() []CreateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *FirewallRoutes) GetMitigate() *Mitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

func (o *FirewallRoutes) GetSrc() *Src {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *FirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type Security struct {
	AttackModeActiveUntil  *float64         `json:"attackModeActiveUntil,omitempty"`
	AttackModeEnabled      *bool            `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64         `json:"attackModeUpdatedAt,omitempty"`
	FirewallConfigVersion  *float64         `json:"firewallConfigVersion,omitempty"`
	FirewallEnabled        *bool            `json:"firewallEnabled,omitempty"`
	FirewallRoutes         []FirewallRoutes `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool            `json:"firewallSeawallEnabled,omitempty"`
	FirewallUpdatedAt      *float64         `json:"firewallUpdatedAt,omitempty"`
	Ja3Enabled             *bool            `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool            `json:"ja4Enabled,omitempty"`
}

func (o *Security) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *Security) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *Security) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *Security) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *Security) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *Security) GetFirewallRoutes() []FirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *Security) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *Security) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *Security) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *Security) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

type SpeedInsights struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *SpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *SpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *SpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *SpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *SpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type CreateProjectDeploymentType string

const (
	CreateProjectDeploymentTypeAll                              CreateProjectDeploymentType = "all"
	CreateProjectDeploymentTypePreview                          CreateProjectDeploymentType = "preview"
	CreateProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectDeploymentType) ToPointer() *CreateProjectDeploymentType {
	return &e
}
func (e *CreateProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectDeploymentType: %v", v)
	}
}

type CreateProjectSsoProtection struct {
	DeploymentType CreateProjectDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectSsoProtection) GetDeploymentType() CreateProjectDeploymentType {
	if o == nil {
		return CreateProjectDeploymentType("")
	}
	return o.DeploymentType
}

type TargetsType string

const (
	TargetsTypeStr        TargetsType = "str"
	TargetsTypeArrayOfStr TargetsType = "arrayOfStr"
)

type Targets struct {
	Str        *string
	ArrayOfStr []string

	Type TargetsType
}

func CreateTargetsStr(str string) Targets {
	typ := TargetsTypeStr

	return Targets{
		Str:  &str,
		Type: typ,
	}
}

func CreateTargetsArrayOfStr(arrayOfStr []string) Targets {
	typ := TargetsTypeArrayOfStr

	return Targets{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Targets) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TargetsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TargetsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Targets", string(data))
}

func (u Targets) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Targets: all fields are null")
}

type CreateProjectProjectsResponseDeploymentType string

const (
	CreateProjectProjectsResponseDeploymentTypeAll                              CreateProjectProjectsResponseDeploymentType = "all"
	CreateProjectProjectsResponseDeploymentTypePreview                          CreateProjectProjectsResponseDeploymentType = "preview"
	CreateProjectProjectsResponseDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectProjectsResponseDeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProjectProjectsResponseDeploymentTypeProduction                       CreateProjectProjectsResponseDeploymentType = "production"
)

func (e CreateProjectProjectsResponseDeploymentType) ToPointer() *CreateProjectProjectsResponseDeploymentType {
	return &e
}
func (e *CreateProjectProjectsResponseDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProjectProjectsResponseDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponseDeploymentType: %v", v)
	}
}

type CreateProjectProjectsResponse2 struct {
	DeploymentType CreateProjectProjectsResponseDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectProjectsResponse2) GetDeploymentType() CreateProjectProjectsResponseDeploymentType {
	if o == nil {
		return CreateProjectProjectsResponseDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectAddresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *CreateProjectAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *CreateProjectAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectProjectsDeploymentType string

const (
	CreateProjectProjectsDeploymentTypeAll                              CreateProjectProjectsDeploymentType = "all"
	CreateProjectProjectsDeploymentTypePreview                          CreateProjectProjectsDeploymentType = "preview"
	CreateProjectProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProjectProjectsDeploymentTypeProduction                       CreateProjectProjectsDeploymentType = "production"
)

func (e CreateProjectProjectsDeploymentType) ToPointer() *CreateProjectProjectsDeploymentType {
	return &e
}
func (e *CreateProjectProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProjectProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsDeploymentType: %v", v)
	}
}

type CreateProjectProtectionMode string

const (
	CreateProjectProtectionModeAdditional CreateProjectProtectionMode = "additional"
	CreateProjectProtectionModeExclusive  CreateProjectProtectionMode = "exclusive"
)

func (e CreateProjectProtectionMode) ToPointer() *CreateProjectProtectionMode {
	return &e
}
func (e *CreateProjectProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = CreateProjectProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProtectionMode: %v", v)
	}
}

type CreateProjectProjectsResponse1 struct {
	Addresses      []CreateProjectAddresses            `json:"addresses"`
	DeploymentType CreateProjectProjectsDeploymentType `json:"deploymentType"`
	ProtectionMode CreateProjectProtectionMode         `json:"protectionMode"`
}

func (o *CreateProjectProjectsResponse1) GetAddresses() []CreateProjectAddresses {
	if o == nil {
		return []CreateProjectAddresses{}
	}
	return o.Addresses
}

func (o *CreateProjectProjectsResponse1) GetDeploymentType() CreateProjectProjectsDeploymentType {
	if o == nil {
		return CreateProjectProjectsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *CreateProjectProjectsResponse1) GetProtectionMode() CreateProjectProtectionMode {
	if o == nil {
		return CreateProjectProtectionMode("")
	}
	return o.ProtectionMode
}

type CreateProjectTrustedIpsType string

const (
	CreateProjectTrustedIpsTypeCreateProjectProjectsResponse1 CreateProjectTrustedIpsType = "createProject_projects_response_1"
	CreateProjectTrustedIpsTypeCreateProjectProjectsResponse2 CreateProjectTrustedIpsType = "createProject_projects_response_2"
)

type CreateProjectTrustedIps struct {
	CreateProjectProjectsResponse1 *CreateProjectProjectsResponse1
	CreateProjectProjectsResponse2 *CreateProjectProjectsResponse2

	Type CreateProjectTrustedIpsType
}

func CreateCreateProjectTrustedIpsCreateProjectProjectsResponse1(createProjectProjectsResponse1 CreateProjectProjectsResponse1) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectProjectsResponse1

	return CreateProjectTrustedIps{
		CreateProjectProjectsResponse1: &createProjectProjectsResponse1,
		Type:                           typ,
	}
}

func CreateCreateProjectTrustedIpsCreateProjectProjectsResponse2(createProjectProjectsResponse2 CreateProjectProjectsResponse2) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectProjectsResponse2

	return CreateProjectTrustedIps{
		CreateProjectProjectsResponse2: &createProjectProjectsResponse2,
		Type:                           typ,
	}
}

func (u *CreateProjectTrustedIps) UnmarshalJSON(data []byte) error {

	var createProjectProjectsResponse2 CreateProjectProjectsResponse2 = CreateProjectProjectsResponse2{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse2, "", true, true); err == nil {
		u.CreateProjectProjectsResponse2 = &createProjectProjectsResponse2
		u.Type = CreateProjectTrustedIpsTypeCreateProjectProjectsResponse2
		return nil
	}

	var createProjectProjectsResponse1 CreateProjectProjectsResponse1 = CreateProjectProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &createProjectProjectsResponse1, "", true, true); err == nil {
		u.CreateProjectProjectsResponse1 = &createProjectProjectsResponse1
		u.Type = CreateProjectTrustedIpsTypeCreateProjectProjectsResponse1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTrustedIps", string(data))
}

func (u CreateProjectTrustedIps) MarshalJSON() ([]byte, error) {
	if u.CreateProjectProjectsResponse1 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse1, "", true)
	}

	if u.CreateProjectProjectsResponse2 != nil {
		return utils.MarshalJSON(u.CreateProjectProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTrustedIps: all fields are null")
}

type WebAnalytics struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
}

func (o *WebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *WebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *WebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *WebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *WebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateProjectResponseBody - The project was successfuly created
type CreateProjectResponseBody struct {
	AccountID                            string                                   `json:"accountId"`
	Analytics                            *Analytics                               `json:"analytics,omitempty"`
	AutoAssignCustomDomains              *bool                                    `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                  `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs                 *bool                                    `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                         *string                                  `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                  `json:"commandForIgnoringBuildStep,omitempty"`
	ConcurrencyBucketName                *string                                  `json:"concurrencyBucketName,omitempty"`
	ConnectBuildsEnabled                 *bool                                    `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID               *string                                  `json:"connectConfigurationId,omitempty"`
	CreatedAt                            *float64                                 `json:"createdAt,omitempty"`
	Crons                                *CreateProjectCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility        *bool                                    `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                            *DataCache                               `json:"dataCache,omitempty"`
	DevCommand                           *string                                  `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                     `json:"directoryListing"`
	EnablePreviewFeedback                *bool                                    `json:"enablePreviewFeedback,omitempty"`
	Env                                  []Env                                    `json:"env,omitempty"`
	Framework                            *CreateProjectProjectsFramework          `json:"framework,omitempty"`
	GitComments                          *GitComments                             `json:"gitComments,omitempty"`
	GitForkProtection                    *bool                                    `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                    `json:"gitLFS,omitempty"`
	HasActiveBranches                    *bool                                    `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases                   *bool                                    `json:"hasFloatingAliases,omitempty"`
	ID                                   string                                   `json:"id"`
	InstallCommand                       *string                                  `json:"installCommand,omitempty"`
	LastAliasRequest                     *LastAliasRequest                        `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget                   *LastRollbackTarget                      `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                    []LatestDeployments                      `json:"latestDeployments,omitempty"`
	Link                                 *Link                                    `json:"link,omitempty"`
	Live                                 *bool                                    `json:"live,omitempty"`
	Name                                 string                                   `json:"name"`
	NodeVersion                          CreateProjectNodeVersion                 `json:"nodeVersion"`
	OidcTokenConfig                      *OidcTokenConfig                         `json:"oidcTokenConfig,omitempty"`
	OptionsAllowlist                     *CreateProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                  `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                  `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *CreateProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	Paused                               *bool                                    `json:"paused,omitempty"`
	Permissions                          *Permissions                             `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane        *bool                                    `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                     map[string]CreateProjectProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                         *bool                                    `json:"publicSource,omitempty"`
	RootDirectory                        *string                                  `json:"rootDirectory,omitempty"`
	Security                             *Security                                `json:"security,omitempty"`
	ServerlessFunctionRegion             *string                                  `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                    `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                 `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                 `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                    `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                    `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SpeedInsights                        *SpeedInsights                           `json:"speedInsights,omitempty"`
	SsoProtection                        *CreateProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]Targets                       `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                  `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                  `json:"transferredFromAccountId,omitempty"`
	TrustedIps                           *CreateProjectTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                            *float64                                 `json:"updatedAt,omitempty"`
	WebAnalytics                         *WebAnalytics                            `json:"webAnalytics,omitempty"`
}

func (o *CreateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateProjectResponseBody) GetAnalytics() *Analytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *CreateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *CreateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *CreateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectResponseBody) GetCrons() *CreateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *CreateProjectResponseBody) GetDataCache() *DataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *CreateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *CreateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProjectResponseBody) GetEnv() []Env {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateProjectResponseBody) GetFramework() *CreateProjectProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectResponseBody) GetGitComments() *GitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *CreateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *CreateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *CreateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *CreateProjectResponseBody) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *CreateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectResponseBody) GetLastAliasRequest() *LastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *CreateProjectResponseBody) GetLastRollbackTarget() *LastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *CreateProjectResponseBody) GetLatestDeployments() []LatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *CreateProjectResponseBody) GetLink() *Link {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *CreateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectResponseBody) GetNodeVersion() CreateProjectNodeVersion {
	if o == nil {
		return CreateProjectNodeVersion("")
	}
	return o.NodeVersion
}

func (o *CreateProjectResponseBody) GetOidcTokenConfig() *OidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *CreateProjectResponseBody) GetOptionsAllowlist() *CreateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetPasswordProtection() *CreateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *CreateProjectResponseBody) GetPermissions() *Permissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *CreateProjectResponseBody) GetProtectionBypass() map[string]CreateProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *CreateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectResponseBody) GetSecurity() *Security {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *CreateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *CreateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *CreateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *CreateProjectResponseBody) GetSpeedInsights() *SpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *CreateProjectResponseBody) GetSsoProtection() *CreateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *CreateProjectResponseBody) GetTargets() map[string]Targets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *CreateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *CreateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *CreateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *CreateProjectResponseBody) GetTrustedIps() *CreateProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectResponseBody) GetWebAnalytics() *WebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type CreateProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project was successfuly created
	Object *CreateProjectResponseBody
}

func (o *CreateProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateProjectResponse) GetObject() *CreateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
