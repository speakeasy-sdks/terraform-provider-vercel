// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/shared"
	"net/http"
)

type Target2 string

const (
	Target2Production  Target2 = "production"
	Target2Preview     Target2 = "preview"
	Target2Development Target2 = "development"
)

func (e Target2) ToPointer() *Target2 {
	return &e
}
func (e *Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target2: %v", v)
	}
}

type Target1 string

const (
	Target1Production  Target1 = "production"
	Target1Preview     Target1 = "preview"
	Target1Development Target1 = "development"
)

func (e Target1) ToPointer() *Target1 {
	return &e
}
func (e *Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target1: %v", v)
	}
}

type CreateProjectTargetType string

const (
	CreateProjectTargetTypeTarget1        CreateProjectTargetType = "target_1"
	CreateProjectTargetTypeArrayOfTarget2 CreateProjectTargetType = "arrayOfTarget2"
)

// CreateProjectTarget - Deployment Target or Targets in which the ENV variable will be used
type CreateProjectTarget struct {
	Target1        *Target1
	ArrayOfTarget2 []Target2

	Type CreateProjectTargetType
}

func CreateCreateProjectTargetTarget1(target1 Target1) CreateProjectTarget {
	typ := CreateProjectTargetTypeTarget1

	return CreateProjectTarget{
		Target1: &target1,
		Type:    typ,
	}
}

func CreateCreateProjectTargetArrayOfTarget2(arrayOfTarget2 []Target2) CreateProjectTarget {
	typ := CreateProjectTargetTypeArrayOfTarget2

	return CreateProjectTarget{
		ArrayOfTarget2: arrayOfTarget2,
		Type:           typ,
	}
}

func (u *CreateProjectTarget) UnmarshalJSON(data []byte) error {

	var target1 Target1 = Target1("")
	if err := utils.UnmarshalJSON(data, &target1, "", true, true); err == nil {
		u.Target1 = &target1
		u.Type = CreateProjectTargetTypeTarget1
		return nil
	}

	var arrayOfTarget2 []Target2 = []Target2{}
	if err := utils.UnmarshalJSON(data, &arrayOfTarget2, "", true, true); err == nil {
		u.ArrayOfTarget2 = arrayOfTarget2
		u.Type = CreateProjectTargetTypeArrayOfTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTarget", string(data))
}

func (u CreateProjectTarget) MarshalJSON() ([]byte, error) {
	if u.Target1 != nil {
		return utils.MarshalJSON(u.Target1, "", true)
	}

	if u.ArrayOfTarget2 != nil {
		return utils.MarshalJSON(u.ArrayOfTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTarget: all fields are null")
}

// CreateProjectType - Type of the ENV variable
type CreateProjectType string

const (
	CreateProjectTypeSystem    CreateProjectType = "system"
	CreateProjectTypeSecret    CreateProjectType = "secret"
	CreateProjectTypeEncrypted CreateProjectType = "encrypted"
	CreateProjectTypePlain     CreateProjectType = "plain"
	CreateProjectTypeSensitive CreateProjectType = "sensitive"
)

func (e CreateProjectType) ToPointer() *CreateProjectType {
	return &e
}
func (e *CreateProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectType: %v", v)
	}
}

type EnvironmentVariables struct {
	// Name of the ENV variable
	Key string `json:"key"`
	// Deployment Target or Targets in which the ENV variable will be used
	Target CreateProjectTarget `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// Type of the ENV variable
	Type *CreateProjectType `json:"type,omitempty"`
	// Value for the ENV variable
	Value string `json:"value"`
}

func (o *EnvironmentVariables) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EnvironmentVariables) GetTarget() CreateProjectTarget {
	if o == nil {
		return CreateProjectTarget{}
	}
	return o.Target
}

func (o *EnvironmentVariables) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EnvironmentVariables) GetType() *CreateProjectType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EnvironmentVariables) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateProjectFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateProjectFramework string

const (
	CreateProjectFrameworkBlitzjs        CreateProjectFramework = "blitzjs"
	CreateProjectFrameworkNextjs         CreateProjectFramework = "nextjs"
	CreateProjectFrameworkGatsby         CreateProjectFramework = "gatsby"
	CreateProjectFrameworkRemix          CreateProjectFramework = "remix"
	CreateProjectFrameworkAstro          CreateProjectFramework = "astro"
	CreateProjectFrameworkHexo           CreateProjectFramework = "hexo"
	CreateProjectFrameworkEleventy       CreateProjectFramework = "eleventy"
	CreateProjectFrameworkDocusaurus2    CreateProjectFramework = "docusaurus-2"
	CreateProjectFrameworkDocusaurus     CreateProjectFramework = "docusaurus"
	CreateProjectFrameworkPreact         CreateProjectFramework = "preact"
	CreateProjectFrameworkSolidstart1    CreateProjectFramework = "solidstart-1"
	CreateProjectFrameworkSolidstart     CreateProjectFramework = "solidstart"
	CreateProjectFrameworkDojo           CreateProjectFramework = "dojo"
	CreateProjectFrameworkEmber          CreateProjectFramework = "ember"
	CreateProjectFrameworkVue            CreateProjectFramework = "vue"
	CreateProjectFrameworkScully         CreateProjectFramework = "scully"
	CreateProjectFrameworkIonicAngular   CreateProjectFramework = "ionic-angular"
	CreateProjectFrameworkAngular        CreateProjectFramework = "angular"
	CreateProjectFrameworkPolymer        CreateProjectFramework = "polymer"
	CreateProjectFrameworkSvelte         CreateProjectFramework = "svelte"
	CreateProjectFrameworkSveltekit      CreateProjectFramework = "sveltekit"
	CreateProjectFrameworkSveltekit1     CreateProjectFramework = "sveltekit-1"
	CreateProjectFrameworkIonicReact     CreateProjectFramework = "ionic-react"
	CreateProjectFrameworkCreateReactApp CreateProjectFramework = "create-react-app"
	CreateProjectFrameworkGridsome       CreateProjectFramework = "gridsome"
	CreateProjectFrameworkUmijs          CreateProjectFramework = "umijs"
	CreateProjectFrameworkSapper         CreateProjectFramework = "sapper"
	CreateProjectFrameworkSaber          CreateProjectFramework = "saber"
	CreateProjectFrameworkStencil        CreateProjectFramework = "stencil"
	CreateProjectFrameworkNuxtjs         CreateProjectFramework = "nuxtjs"
	CreateProjectFrameworkRedwoodjs      CreateProjectFramework = "redwoodjs"
	CreateProjectFrameworkHugo           CreateProjectFramework = "hugo"
	CreateProjectFrameworkJekyll         CreateProjectFramework = "jekyll"
	CreateProjectFrameworkBrunch         CreateProjectFramework = "brunch"
	CreateProjectFrameworkMiddleman      CreateProjectFramework = "middleman"
	CreateProjectFrameworkZola           CreateProjectFramework = "zola"
	CreateProjectFrameworkHydrogen       CreateProjectFramework = "hydrogen"
	CreateProjectFrameworkVite           CreateProjectFramework = "vite"
	CreateProjectFrameworkVitepress      CreateProjectFramework = "vitepress"
	CreateProjectFrameworkVuepress       CreateProjectFramework = "vuepress"
	CreateProjectFrameworkParcel         CreateProjectFramework = "parcel"
	CreateProjectFrameworkSanity         CreateProjectFramework = "sanity"
	CreateProjectFrameworkStorybook      CreateProjectFramework = "storybook"
)

func (e CreateProjectFramework) ToPointer() *CreateProjectFramework {
	return &e
}
func (e *CreateProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFramework: %v", v)
	}
}

// CreateProjectProjectsType - The Git Provider of the repository
type CreateProjectProjectsType string

const (
	CreateProjectProjectsTypeGithub    CreateProjectProjectsType = "github"
	CreateProjectProjectsTypeGitlab    CreateProjectProjectsType = "gitlab"
	CreateProjectProjectsTypeBitbucket CreateProjectProjectsType = "bitbucket"
)

func (e CreateProjectProjectsType) ToPointer() *CreateProjectProjectsType {
	return &e
}
func (e *CreateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = CreateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsType: %v", v)
	}
}

// GitRepository - The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
type GitRepository struct {
	// The name of the git repository. For example: \"vercel/next.js\"
	Repo string `json:"repo"`
	// The Git Provider of the repository
	Type CreateProjectProjectsType `json:"type"`
}

func (o *GitRepository) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GitRepository) GetType() CreateProjectProjectsType {
	if o == nil {
		return CreateProjectProjectsType("")
	}
	return o.Type
}

type CreateProjectRequestBody struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// Collection of ENV Variables the Project will use
	EnvironmentVariables []EnvironmentVariables `json:"environmentVariables,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateProjectFramework `json:"framework,omitempty"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
	GitRepository *GitRepository `json:"gitRepository,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name string `json:"name"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
}

func (o *CreateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectRequestBody) GetEnvironmentVariables() []EnvironmentVariables {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateProjectRequestBody) GetFramework() *CreateProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectRequestBody) GetGitRepository() *GitRepository {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

type CreateProjectRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *CreateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectRequest) GetRequestBody() *CreateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *CreateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *CreateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *CreateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type CreateProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *CreateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *CreateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type CreateProjectDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *CreateProjectDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateProjectDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateProjectDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                    `json:"deploymentId"`
	Definitions  []CreateProjectDefinitions `json:"definitions"`
}

func (o *CreateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateProjectCrons) GetDefinitions() []CreateProjectDefinitions {
	if o == nil {
		return []CreateProjectDefinitions{}
	}
	return o.Definitions
}

type CreateProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *CreateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *CreateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *CreateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type CreateProjectTarget2 string

const (
	CreateProjectTarget2Production  CreateProjectTarget2 = "production"
	CreateProjectTarget2Preview     CreateProjectTarget2 = "preview"
	CreateProjectTarget2Development CreateProjectTarget2 = "development"
)

func (e CreateProjectTarget2) ToPointer() *CreateProjectTarget2 {
	return &e
}
func (e *CreateProjectTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTarget2: %v", v)
	}
}

type CreateProjectTarget1 string

const (
	CreateProjectTarget1Production  CreateProjectTarget1 = "production"
	CreateProjectTarget1Preview     CreateProjectTarget1 = "preview"
	CreateProjectTarget1Development CreateProjectTarget1 = "development"
)

func (e CreateProjectTarget1) ToPointer() *CreateProjectTarget1 {
	return &e
}
func (e *CreateProjectTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTarget1: %v", v)
	}
}

type CreateProjectProjectsTargetType string

const (
	CreateProjectProjectsTargetTypeArrayOfCreateProjectTarget1 CreateProjectProjectsTargetType = "arrayOfCreateProjectTarget1"
	CreateProjectProjectsTargetTypeCreateProjectTarget2        CreateProjectProjectsTargetType = "createProject_target_2"
)

type CreateProjectProjectsTarget struct {
	ArrayOfCreateProjectTarget1 []CreateProjectTarget1
	CreateProjectTarget2        *CreateProjectTarget2

	Type CreateProjectProjectsTargetType
}

func CreateCreateProjectProjectsTargetArrayOfCreateProjectTarget1(arrayOfCreateProjectTarget1 []CreateProjectTarget1) CreateProjectProjectsTarget {
	typ := CreateProjectProjectsTargetTypeArrayOfCreateProjectTarget1

	return CreateProjectProjectsTarget{
		ArrayOfCreateProjectTarget1: arrayOfCreateProjectTarget1,
		Type:                        typ,
	}
}

func CreateCreateProjectProjectsTargetCreateProjectTarget2(createProjectTarget2 CreateProjectTarget2) CreateProjectProjectsTarget {
	typ := CreateProjectProjectsTargetTypeCreateProjectTarget2

	return CreateProjectProjectsTarget{
		CreateProjectTarget2: &createProjectTarget2,
		Type:                 typ,
	}
}

func (u *CreateProjectProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectTarget1 []CreateProjectTarget1 = []CreateProjectTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectTarget1, "", true, true); err == nil {
		u.ArrayOfCreateProjectTarget1 = arrayOfCreateProjectTarget1
		u.Type = CreateProjectProjectsTargetTypeArrayOfCreateProjectTarget1
		return nil
	}

	var createProjectTarget2 CreateProjectTarget2 = CreateProjectTarget2("")
	if err := utils.UnmarshalJSON(data, &createProjectTarget2, "", true, true); err == nil {
		u.CreateProjectTarget2 = &createProjectTarget2
		u.Type = CreateProjectProjectsTargetTypeCreateProjectTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsTarget", string(data))
}

func (u CreateProjectProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectTarget1, "", true)
	}

	if u.CreateProjectTarget2 != nil {
		return utils.MarshalJSON(u.CreateProjectTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsTarget: all fields are null")
}

type CreateProjectProjectsResponseType string

const (
	CreateProjectProjectsResponseTypeSystem    CreateProjectProjectsResponseType = "system"
	CreateProjectProjectsResponseTypeSecret    CreateProjectProjectsResponseType = "secret"
	CreateProjectProjectsResponseTypeEncrypted CreateProjectProjectsResponseType = "encrypted"
	CreateProjectProjectsResponseTypePlain     CreateProjectProjectsResponseType = "plain"
	CreateProjectProjectsResponseTypeSensitive CreateProjectProjectsResponseType = "sensitive"
)

func (e CreateProjectProjectsResponseType) ToPointer() *CreateProjectProjectsResponseType {
	return &e
}
func (e *CreateProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponseType: %v", v)
	}
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14TypeIntegrationStoreSecret CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = "integration-store-secret"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: %v", v)
	}
}

type ContentHint14 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint14) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type("")
	}
	return o.Type
}

func (o *ContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13TypePostgresURLNoSsl CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = "postgres-url-no-ssl"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: %v", v)
	}
}

type ContentHint13 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint13) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type("")
	}
	return o.Type
}

func (o *ContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12TypePostgresDatabase CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = "postgres-database"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: %v", v)
	}
}

type ContentHint12 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint12) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type("")
	}
	return o.Type
}

func (o *ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11TypePostgresPassword CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = "postgres-password"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: %v", v)
	}
}

type ContentHint11 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint11) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type("")
	}
	return o.Type
}

func (o *ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10TypePostgresHost CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = "postgres-host"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: %v", v)
	}
}

type CreateProjectContentHint10 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *CreateProjectContentHint10) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9TypePostgresUser CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = "postgres-user"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: %v", v)
	}
}

type CreateProjectContentHint9 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint9) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8TypePostgresPrismaURL CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = "postgres-prisma-url"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: %v", v)
	}
}

type CreateProjectContentHint8 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint8) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNonPooling CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-non-pooling"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type CreateProjectContentHint7 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *CreateProjectContentHint7) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateProjectContentHint6 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                     `json:"storeId"`
}

func (o *CreateProjectContentHint6) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken CreateProjectContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateProjectContentHint5 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint5) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200Type string

const (
	CreateProjectContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken CreateProjectContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectContentHintProjectsResponse200Type) ToPointer() *CreateProjectContentHintProjectsResponse200Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200Type: %v", v)
	}
}

type CreateProjectContentHint4 struct {
	Type    CreateProjectContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *CreateProjectContentHint4) GetType() CreateProjectContentHintProjectsResponse200Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponseType string

const (
	CreateProjectContentHintProjectsResponseTypeRedisRestAPIToken CreateProjectContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e CreateProjectContentHintProjectsResponseType) ToPointer() *CreateProjectContentHintProjectsResponseType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponseType: %v", v)
	}
}

type CreateProjectContentHint3 struct {
	Type    CreateProjectContentHintProjectsResponseType `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *CreateProjectContentHint3) GetType() CreateProjectContentHintProjectsResponseType {
	if o == nil {
		return CreateProjectContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsType string

const (
	CreateProjectContentHintProjectsTypeRedisRestAPIURL CreateProjectContentHintProjectsType = "redis-rest-api-url"
)

func (e CreateProjectContentHintProjectsType) ToPointer() *CreateProjectContentHintProjectsType {
	return &e
}
func (e *CreateProjectContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsType: %v", v)
	}
}

type CreateProjectContentHint2 struct {
	Type    CreateProjectContentHintProjectsType `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *CreateProjectContentHint2) GetType() CreateProjectContentHintProjectsType {
	if o == nil {
		return CreateProjectContentHintProjectsType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintType string

const (
	CreateProjectContentHintTypeRedisURL CreateProjectContentHintType = "redis-url"
)

func (e CreateProjectContentHintType) ToPointer() *CreateProjectContentHintType {
	return &e
}
func (e *CreateProjectContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintType: %v", v)
	}
}

type CreateProjectContentHint1 struct {
	Type    CreateProjectContentHintType `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectContentHint1) GetType() CreateProjectContentHintType {
	if o == nil {
		return CreateProjectContentHintType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintUnionType string

const (
	CreateProjectContentHintUnionTypeCreateProjectContentHint1  CreateProjectContentHintUnionType = "createProject_contentHint_1"
	CreateProjectContentHintUnionTypeCreateProjectContentHint2  CreateProjectContentHintUnionType = "createProject_contentHint_2"
	CreateProjectContentHintUnionTypeCreateProjectContentHint3  CreateProjectContentHintUnionType = "createProject_contentHint_3"
	CreateProjectContentHintUnionTypeCreateProjectContentHint4  CreateProjectContentHintUnionType = "createProject_contentHint_4"
	CreateProjectContentHintUnionTypeCreateProjectContentHint5  CreateProjectContentHintUnionType = "createProject_contentHint_5"
	CreateProjectContentHintUnionTypeCreateProjectContentHint6  CreateProjectContentHintUnionType = "createProject_contentHint_6"
	CreateProjectContentHintUnionTypeCreateProjectContentHint7  CreateProjectContentHintUnionType = "createProject_contentHint_7"
	CreateProjectContentHintUnionTypeCreateProjectContentHint8  CreateProjectContentHintUnionType = "createProject_contentHint_8"
	CreateProjectContentHintUnionTypeCreateProjectContentHint9  CreateProjectContentHintUnionType = "createProject_contentHint_9"
	CreateProjectContentHintUnionTypeCreateProjectContentHint10 CreateProjectContentHintUnionType = "createProject_contentHint_10"
	CreateProjectContentHintUnionTypeContentHint11              CreateProjectContentHintUnionType = "contentHint_11"
	CreateProjectContentHintUnionTypeContentHint12              CreateProjectContentHintUnionType = "contentHint_12"
	CreateProjectContentHintUnionTypeContentHint13              CreateProjectContentHintUnionType = "contentHint_13"
	CreateProjectContentHintUnionTypeContentHint14              CreateProjectContentHintUnionType = "contentHint_14"
)

type CreateProjectContentHint struct {
	CreateProjectContentHint1  *CreateProjectContentHint1
	CreateProjectContentHint2  *CreateProjectContentHint2
	CreateProjectContentHint3  *CreateProjectContentHint3
	CreateProjectContentHint4  *CreateProjectContentHint4
	CreateProjectContentHint5  *CreateProjectContentHint5
	CreateProjectContentHint6  *CreateProjectContentHint6
	CreateProjectContentHint7  *CreateProjectContentHint7
	CreateProjectContentHint8  *CreateProjectContentHint8
	CreateProjectContentHint9  *CreateProjectContentHint9
	CreateProjectContentHint10 *CreateProjectContentHint10
	ContentHint11              *ContentHint11
	ContentHint12              *ContentHint12
	ContentHint13              *ContentHint13
	ContentHint14              *ContentHint14

	Type CreateProjectContentHintUnionType
}

func CreateCreateProjectContentHintCreateProjectContentHint1(createProjectContentHint1 CreateProjectContentHint1) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint1

	return CreateProjectContentHint{
		CreateProjectContentHint1: &createProjectContentHint1,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint2(createProjectContentHint2 CreateProjectContentHint2) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint2

	return CreateProjectContentHint{
		CreateProjectContentHint2: &createProjectContentHint2,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint3(createProjectContentHint3 CreateProjectContentHint3) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint3

	return CreateProjectContentHint{
		CreateProjectContentHint3: &createProjectContentHint3,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint4(createProjectContentHint4 CreateProjectContentHint4) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint4

	return CreateProjectContentHint{
		CreateProjectContentHint4: &createProjectContentHint4,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint5(createProjectContentHint5 CreateProjectContentHint5) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint5

	return CreateProjectContentHint{
		CreateProjectContentHint5: &createProjectContentHint5,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint6(createProjectContentHint6 CreateProjectContentHint6) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint6

	return CreateProjectContentHint{
		CreateProjectContentHint6: &createProjectContentHint6,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint7(createProjectContentHint7 CreateProjectContentHint7) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint7

	return CreateProjectContentHint{
		CreateProjectContentHint7: &createProjectContentHint7,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint8(createProjectContentHint8 CreateProjectContentHint8) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint8

	return CreateProjectContentHint{
		CreateProjectContentHint8: &createProjectContentHint8,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint9(createProjectContentHint9 CreateProjectContentHint9) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint9

	return CreateProjectContentHint{
		CreateProjectContentHint9: &createProjectContentHint9,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint10(createProjectContentHint10 CreateProjectContentHint10) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint10

	return CreateProjectContentHint{
		CreateProjectContentHint10: &createProjectContentHint10,
		Type:                       typ,
	}
}

func CreateCreateProjectContentHintContentHint11(contentHint11 ContentHint11) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint11

	return CreateProjectContentHint{
		ContentHint11: &contentHint11,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint12(contentHint12 ContentHint12) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint12

	return CreateProjectContentHint{
		ContentHint12: &contentHint12,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint13(contentHint13 ContentHint13) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint13

	return CreateProjectContentHint{
		ContentHint13: &contentHint13,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint14(contentHint14 ContentHint14) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint14

	return CreateProjectContentHint{
		ContentHint14: &contentHint14,
		Type:          typ,
	}
}

func (u *CreateProjectContentHint) UnmarshalJSON(data []byte) error {

	var createProjectContentHint1 CreateProjectContentHint1 = CreateProjectContentHint1{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint1, "", true, true); err == nil {
		u.CreateProjectContentHint1 = &createProjectContentHint1
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint1
		return nil
	}

	var createProjectContentHint2 CreateProjectContentHint2 = CreateProjectContentHint2{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint2, "", true, true); err == nil {
		u.CreateProjectContentHint2 = &createProjectContentHint2
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint2
		return nil
	}

	var createProjectContentHint3 CreateProjectContentHint3 = CreateProjectContentHint3{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint3, "", true, true); err == nil {
		u.CreateProjectContentHint3 = &createProjectContentHint3
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint3
		return nil
	}

	var createProjectContentHint4 CreateProjectContentHint4 = CreateProjectContentHint4{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint4, "", true, true); err == nil {
		u.CreateProjectContentHint4 = &createProjectContentHint4
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint4
		return nil
	}

	var createProjectContentHint5 CreateProjectContentHint5 = CreateProjectContentHint5{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint5, "", true, true); err == nil {
		u.CreateProjectContentHint5 = &createProjectContentHint5
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint5
		return nil
	}

	var createProjectContentHint6 CreateProjectContentHint6 = CreateProjectContentHint6{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint6, "", true, true); err == nil {
		u.CreateProjectContentHint6 = &createProjectContentHint6
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint6
		return nil
	}

	var createProjectContentHint7 CreateProjectContentHint7 = CreateProjectContentHint7{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint7, "", true, true); err == nil {
		u.CreateProjectContentHint7 = &createProjectContentHint7
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint7
		return nil
	}

	var createProjectContentHint8 CreateProjectContentHint8 = CreateProjectContentHint8{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint8, "", true, true); err == nil {
		u.CreateProjectContentHint8 = &createProjectContentHint8
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint8
		return nil
	}

	var createProjectContentHint9 CreateProjectContentHint9 = CreateProjectContentHint9{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint9, "", true, true); err == nil {
		u.CreateProjectContentHint9 = &createProjectContentHint9
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint9
		return nil
	}

	var createProjectContentHint10 CreateProjectContentHint10 = CreateProjectContentHint10{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint10, "", true, true); err == nil {
		u.CreateProjectContentHint10 = &createProjectContentHint10
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint10
		return nil
	}

	var contentHint11 ContentHint11 = ContentHint11{}
	if err := utils.UnmarshalJSON(data, &contentHint11, "", true, true); err == nil {
		u.ContentHint11 = &contentHint11
		u.Type = CreateProjectContentHintUnionTypeContentHint11
		return nil
	}

	var contentHint12 ContentHint12 = ContentHint12{}
	if err := utils.UnmarshalJSON(data, &contentHint12, "", true, true); err == nil {
		u.ContentHint12 = &contentHint12
		u.Type = CreateProjectContentHintUnionTypeContentHint12
		return nil
	}

	var contentHint13 ContentHint13 = ContentHint13{}
	if err := utils.UnmarshalJSON(data, &contentHint13, "", true, true); err == nil {
		u.ContentHint13 = &contentHint13
		u.Type = CreateProjectContentHintUnionTypeContentHint13
		return nil
	}

	var contentHint14 ContentHint14 = ContentHint14{}
	if err := utils.UnmarshalJSON(data, &contentHint14, "", true, true); err == nil {
		u.ContentHint14 = &contentHint14
		u.Type = CreateProjectContentHintUnionTypeContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectContentHint", string(data))
}

func (u CreateProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectContentHint1 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint1, "", true)
	}

	if u.CreateProjectContentHint2 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint2, "", true)
	}

	if u.CreateProjectContentHint3 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint3, "", true)
	}

	if u.CreateProjectContentHint4 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint4, "", true)
	}

	if u.CreateProjectContentHint5 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint5, "", true)
	}

	if u.CreateProjectContentHint6 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint6, "", true)
	}

	if u.CreateProjectContentHint7 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint7, "", true)
	}

	if u.CreateProjectContentHint8 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint8, "", true)
	}

	if u.CreateProjectContentHint9 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint9, "", true)
	}

	if u.CreateProjectContentHint10 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint10, "", true)
	}

	if u.ContentHint11 != nil {
		return utils.MarshalJSON(u.ContentHint11, "", true)
	}

	if u.ContentHint12 != nil {
		return utils.MarshalJSON(u.ContentHint12, "", true)
	}

	if u.ContentHint13 != nil {
		return utils.MarshalJSON(u.ContentHint13, "", true)
	}

	if u.ContentHint14 != nil {
		return utils.MarshalJSON(u.ContentHint14, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectContentHint: all fields are null")
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTypeFlagsSecret CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = "flags-secret"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

// CreateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectInternalContentHint struct {
	Type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectInternalContentHint) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *CreateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type CreateProjectEnv struct {
	Target            *CreateProjectProjectsTarget      `json:"target,omitempty"`
	Type              CreateProjectProjectsResponseType `json:"type"`
	ID                *string                           `json:"id,omitempty"`
	Key               string                            `json:"key"`
	Value             string                            `json:"value"`
	ConfigurationID   *string                           `json:"configurationId,omitempty"`
	CreatedAt         *float64                          `json:"createdAt,omitempty"`
	UpdatedAt         *float64                          `json:"updatedAt,omitempty"`
	CreatedBy         *string                           `json:"createdBy,omitempty"`
	UpdatedBy         *string                           `json:"updatedBy,omitempty"`
	GitBranch         *string                           `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                           `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                           `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectContentHint         `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *CreateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` is decrypted.
	Decrypted           *bool   `json:"decrypted,omitempty"`
	Comment             *string `json:"comment,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
}

func (o *CreateProjectEnv) GetTarget() *CreateProjectProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnv) GetType() CreateProjectProjectsResponseType {
	if o == nil {
		return CreateProjectProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProjectEnv) GetContentHint() *CreateProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProjectEnv) GetInternalContentHint() *CreateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *CreateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnv) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

type CreateProjectProjectsFramework string

const (
	CreateProjectProjectsFrameworkBlitzjs        CreateProjectProjectsFramework = "blitzjs"
	CreateProjectProjectsFrameworkNextjs         CreateProjectProjectsFramework = "nextjs"
	CreateProjectProjectsFrameworkGatsby         CreateProjectProjectsFramework = "gatsby"
	CreateProjectProjectsFrameworkRemix          CreateProjectProjectsFramework = "remix"
	CreateProjectProjectsFrameworkAstro          CreateProjectProjectsFramework = "astro"
	CreateProjectProjectsFrameworkHexo           CreateProjectProjectsFramework = "hexo"
	CreateProjectProjectsFrameworkEleventy       CreateProjectProjectsFramework = "eleventy"
	CreateProjectProjectsFrameworkDocusaurus2    CreateProjectProjectsFramework = "docusaurus-2"
	CreateProjectProjectsFrameworkDocusaurus     CreateProjectProjectsFramework = "docusaurus"
	CreateProjectProjectsFrameworkPreact         CreateProjectProjectsFramework = "preact"
	CreateProjectProjectsFrameworkSolidstart1    CreateProjectProjectsFramework = "solidstart-1"
	CreateProjectProjectsFrameworkSolidstart     CreateProjectProjectsFramework = "solidstart"
	CreateProjectProjectsFrameworkDojo           CreateProjectProjectsFramework = "dojo"
	CreateProjectProjectsFrameworkEmber          CreateProjectProjectsFramework = "ember"
	CreateProjectProjectsFrameworkVue            CreateProjectProjectsFramework = "vue"
	CreateProjectProjectsFrameworkScully         CreateProjectProjectsFramework = "scully"
	CreateProjectProjectsFrameworkIonicAngular   CreateProjectProjectsFramework = "ionic-angular"
	CreateProjectProjectsFrameworkAngular        CreateProjectProjectsFramework = "angular"
	CreateProjectProjectsFrameworkPolymer        CreateProjectProjectsFramework = "polymer"
	CreateProjectProjectsFrameworkSvelte         CreateProjectProjectsFramework = "svelte"
	CreateProjectProjectsFrameworkSveltekit      CreateProjectProjectsFramework = "sveltekit"
	CreateProjectProjectsFrameworkSveltekit1     CreateProjectProjectsFramework = "sveltekit-1"
	CreateProjectProjectsFrameworkIonicReact     CreateProjectProjectsFramework = "ionic-react"
	CreateProjectProjectsFrameworkCreateReactApp CreateProjectProjectsFramework = "create-react-app"
	CreateProjectProjectsFrameworkGridsome       CreateProjectProjectsFramework = "gridsome"
	CreateProjectProjectsFrameworkUmijs          CreateProjectProjectsFramework = "umijs"
	CreateProjectProjectsFrameworkSapper         CreateProjectProjectsFramework = "sapper"
	CreateProjectProjectsFrameworkSaber          CreateProjectProjectsFramework = "saber"
	CreateProjectProjectsFrameworkStencil        CreateProjectProjectsFramework = "stencil"
	CreateProjectProjectsFrameworkNuxtjs         CreateProjectProjectsFramework = "nuxtjs"
	CreateProjectProjectsFrameworkRedwoodjs      CreateProjectProjectsFramework = "redwoodjs"
	CreateProjectProjectsFrameworkHugo           CreateProjectProjectsFramework = "hugo"
	CreateProjectProjectsFrameworkJekyll         CreateProjectProjectsFramework = "jekyll"
	CreateProjectProjectsFrameworkBrunch         CreateProjectProjectsFramework = "brunch"
	CreateProjectProjectsFrameworkMiddleman      CreateProjectProjectsFramework = "middleman"
	CreateProjectProjectsFrameworkZola           CreateProjectProjectsFramework = "zola"
	CreateProjectProjectsFrameworkHydrogen       CreateProjectProjectsFramework = "hydrogen"
	CreateProjectProjectsFrameworkVite           CreateProjectProjectsFramework = "vite"
	CreateProjectProjectsFrameworkVitepress      CreateProjectProjectsFramework = "vitepress"
	CreateProjectProjectsFrameworkVuepress       CreateProjectProjectsFramework = "vuepress"
	CreateProjectProjectsFrameworkParcel         CreateProjectProjectsFramework = "parcel"
	CreateProjectProjectsFrameworkSanity         CreateProjectProjectsFramework = "sanity"
	CreateProjectProjectsFrameworkStorybook      CreateProjectProjectsFramework = "storybook"
)

func (e CreateProjectProjectsFramework) ToPointer() *CreateProjectProjectsFramework {
	return &e
}
func (e *CreateProjectProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsFramework: %v", v)
	}
}

type CreateProjectAliasAssignedType string

const (
	CreateProjectAliasAssignedTypeNumber  CreateProjectAliasAssignedType = "number"
	CreateProjectAliasAssignedTypeBoolean CreateProjectAliasAssignedType = "boolean"
)

type CreateProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type CreateProjectAliasAssignedType
}

func CreateCreateProjectAliasAssignedNumber(number float64) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeNumber

	return CreateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateProjectAliasAssignedBoolean(boolean bool) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeBoolean

	return CreateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectAliasAssigned", string(data))
}

func (u CreateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectAliasAssigned: all fields are null")
}

type CreateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProjectBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *CreateProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *CreateProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type CreateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProjectPlan string

const (
	CreateProjectPlanPro        CreateProjectPlan = "pro"
	CreateProjectPlanEnterprise CreateProjectPlan = "enterprise"
	CreateProjectPlanHobby      CreateProjectPlan = "hobby"
)

func (e CreateProjectPlan) ToPointer() *CreateProjectPlan {
	return &e
}
func (e *CreateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectPlan: %v", v)
	}
}

type CreateProjectReadyState string

const (
	CreateProjectReadyStateBuilding     CreateProjectReadyState = "BUILDING"
	CreateProjectReadyStateError        CreateProjectReadyState = "ERROR"
	CreateProjectReadyStateInitializing CreateProjectReadyState = "INITIALIZING"
	CreateProjectReadyStateQueued       CreateProjectReadyState = "QUEUED"
	CreateProjectReadyStateReady        CreateProjectReadyState = "READY"
	CreateProjectReadyStateCanceled     CreateProjectReadyState = "CANCELED"
)

func (e CreateProjectReadyState) ToPointer() *CreateProjectReadyState {
	return &e
}
func (e *CreateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadyState: %v", v)
	}
}

type CreateProjectReadySubstate string

const (
	CreateProjectReadySubstateStaged   CreateProjectReadySubstate = "STAGED"
	CreateProjectReadySubstatePromoted CreateProjectReadySubstate = "PROMOTED"
)

func (e CreateProjectReadySubstate) ToPointer() *CreateProjectReadySubstate {
	return &e
}
func (e *CreateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadySubstate: %v", v)
	}
}

type CreateProjectProjectsResponse200Type string

const (
	CreateProjectProjectsResponse200TypeLambdas CreateProjectProjectsResponse200Type = "LAMBDAS"
)

func (e CreateProjectProjectsResponse200Type) ToPointer() *CreateProjectProjectsResponse200Type {
	return &e
}
func (e *CreateProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200Type: %v", v)
	}
}

type CreateProjectChecksConclusion string

const (
	CreateProjectChecksConclusionSucceeded CreateProjectChecksConclusion = "succeeded"
	CreateProjectChecksConclusionFailed    CreateProjectChecksConclusion = "failed"
	CreateProjectChecksConclusionSkipped   CreateProjectChecksConclusion = "skipped"
	CreateProjectChecksConclusionCanceled  CreateProjectChecksConclusion = "canceled"
)

func (e CreateProjectChecksConclusion) ToPointer() *CreateProjectChecksConclusion {
	return &e
}
func (e *CreateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksConclusion: %v", v)
	}
}

type CreateProjectChecksState string

const (
	CreateProjectChecksStateRegistered CreateProjectChecksState = "registered"
	CreateProjectChecksStateRunning    CreateProjectChecksState = "running"
	CreateProjectChecksStateCompleted  CreateProjectChecksState = "completed"
)

func (e CreateProjectChecksState) ToPointer() *CreateProjectChecksState {
	return &e
}
func (e *CreateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksState: %v", v)
	}
}

type CreateProjectOidcTokenClaimsType string

const (
	CreateProjectOidcTokenClaimsTypeStr        CreateProjectOidcTokenClaimsType = "str"
	CreateProjectOidcTokenClaimsTypeArrayOfStr CreateProjectOidcTokenClaimsType = "arrayOfStr"
)

type CreateProjectOidcTokenClaims struct {
	Str        *string
	ArrayOfStr []string

	Type CreateProjectOidcTokenClaimsType
}

func CreateCreateProjectOidcTokenClaimsStr(str string) CreateProjectOidcTokenClaims {
	typ := CreateProjectOidcTokenClaimsTypeStr

	return CreateProjectOidcTokenClaims{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectOidcTokenClaimsArrayOfStr(arrayOfStr []string) CreateProjectOidcTokenClaims {
	typ := CreateProjectOidcTokenClaimsTypeArrayOfStr

	return CreateProjectOidcTokenClaims{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateProjectOidcTokenClaims) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectOidcTokenClaimsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateProjectOidcTokenClaimsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectOidcTokenClaims", string(data))
}

func (u CreateProjectOidcTokenClaims) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectOidcTokenClaims: all fields are null")
}

type CreateProjectLatestDeployments struct {
	Alias                  []string                             `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectAliasAssigned          `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectAliasError             `json:"aliasError,omitempty"`
	AliasFinal             *string                              `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                             `json:"automaticAliases,omitempty"`
	Builds                 []CreateProjectBuilds                `json:"builds,omitempty"`
	ConnectBuildsEnabled   *bool                                `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                              `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                              `json:"createdAt"`
	CreatedIn              string                               `json:"createdIn"`
	Creator                *CreateProjectCreator                `json:"creator"`
	DeploymentHostname     string                               `json:"deploymentHostname"`
	Name                   string                               `json:"name"`
	Forced                 *bool                                `json:"forced,omitempty"`
	ID                     string                               `json:"id"`
	Meta                   map[string]string                    `json:"meta,omitempty"`
	MonorepoManager        *string                              `json:"monorepoManager,omitempty"`
	Plan                   CreateProjectPlan                    `json:"plan"`
	Private                bool                                 `json:"private"`
	ReadyState             CreateProjectReadyState              `json:"readyState"`
	ReadySubstate          *CreateProjectReadySubstate          `json:"readySubstate,omitempty"`
	RequestedAt            *float64                             `json:"requestedAt,omitempty"`
	Target                 *string                              `json:"target,omitempty"`
	TeamID                 *string                              `json:"teamId,omitempty"`
	Type                   CreateProjectProjectsResponse200Type `json:"type"`
	URL                    string                               `json:"url"`
	UserID                 string                               `json:"userId"`
	WithCache              *bool                                `json:"withCache,omitempty"`
	ChecksConclusion       *CreateProjectChecksConclusion       `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectChecksState            `json:"checksState,omitempty"`
	ReadyAt                *float64                             `json:"readyAt,omitempty"`
	BuildingAt             *float64                             `json:"buildingAt,omitempty"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                   `json:"previewCommentsEnabled,omitempty"`
	OidcTokenClaims        map[string]CreateProjectOidcTokenClaims `json:"oidcTokenClaims,omitempty"`
}

func (o *CreateProjectLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProjectLatestDeployments) GetAliasAssigned() *CreateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProjectLatestDeployments) GetAliasError() *CreateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProjectLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProjectLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProjectLatestDeployments) GetBuilds() []CreateProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProjectLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProjectLatestDeployments) GetCreator() *CreateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProjectLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProjectLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProjectLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProjectLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProjectLatestDeployments) GetPlan() CreateProjectPlan {
	if o == nil {
		return CreateProjectPlan("")
	}
	return o.Plan
}

func (o *CreateProjectLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProjectLatestDeployments) GetReadyState() CreateProjectReadyState {
	if o == nil {
		return CreateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProjectLatestDeployments) GetReadySubstate() *CreateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProjectLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProjectLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectLatestDeployments) GetType() CreateProjectProjectsResponse200Type {
	if o == nil {
		return CreateProjectProjectsResponse200Type("")
	}
	return o.Type
}

func (o *CreateProjectLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProjectLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

func (o *CreateProjectLatestDeployments) GetChecksConclusion() *CreateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProjectLatestDeployments) GetChecksState() *CreateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProjectLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProjectLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProjectLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProjectLatestDeployments) GetOidcTokenClaims() map[string]CreateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

type CreateProjectLinkProjectsResponseType string

const (
	CreateProjectLinkProjectsResponseTypeBitbucket CreateProjectLinkProjectsResponseType = "bitbucket"
)

func (e CreateProjectLinkProjectsResponseType) ToPointer() *CreateProjectLinkProjectsResponseType {
	return &e
}
func (e *CreateProjectLinkProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateProjectLinkProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkProjectsResponseType: %v", v)
	}
}

type CreateProjectLinkProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink3 struct {
	Name             *string                                        `json:"name,omitempty"`
	Slug             *string                                        `json:"slug,omitempty"`
	Owner            *string                                        `json:"owner,omitempty"`
	Type             *CreateProjectLinkProjectsResponseType         `json:"type,omitempty"`
	UUID             *string                                        `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                        `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                                       `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectLinkProjectsResponseDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                                          `json:"sourceless,omitempty"`
	ProductionBranch *string                                        `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateProjectLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateProjectLink3) GetType() *CreateProjectLinkProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *CreateProjectLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *CreateProjectLink3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink3) GetDeployHooks() []CreateProjectLinkProjectsResponseDeployHooks {
	if o == nil {
		return []CreateProjectLinkProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkProjectsType string

const (
	CreateProjectLinkProjectsTypeGitlab CreateProjectLinkProjectsType = "gitlab"
)

func (e CreateProjectLinkProjectsType) ToPointer() *CreateProjectLinkProjectsType {
	return &e
}
func (e *CreateProjectLinkProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateProjectLinkProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkProjectsType: %v", v)
	}
}

type CreateProjectLinkProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink2 struct {
	ProjectID                *string                                `json:"projectId,omitempty"`
	ProjectName              *string                                `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                `json:"projectUrl,omitempty"`
	Type                     *CreateProjectLinkProjectsType         `json:"type,omitempty"`
	CreatedAt                *float64                               `json:"createdAt,omitempty"`
	DeployHooks              []CreateProjectLinkProjectsDeployHooks `json:"deployHooks"`
	GitCredentialID          *string                                `json:"gitCredentialId,omitempty"`
	UpdatedAt                *float64                               `json:"updatedAt,omitempty"`
	Sourceless               *bool                                  `json:"sourceless,omitempty"`
	ProductionBranch         *string                                `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *CreateProjectLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *CreateProjectLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *CreateProjectLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *CreateProjectLink2) GetType() *CreateProjectLinkProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink2) GetDeployHooks() []CreateProjectLinkProjectsDeployHooks {
	if o == nil {
		return []CreateProjectLinkProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkType string

const (
	CreateProjectLinkTypeGithub CreateProjectLinkType = "github"
)

func (e CreateProjectLinkType) ToPointer() *CreateProjectLinkType {
	return &e
}
func (e *CreateProjectLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateProjectLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkType: %v", v)
	}
}

type CreateProjectLinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink1 struct {
	Org              *string                        `json:"org,omitempty"`
	Repo             *string                        `json:"repo,omitempty"`
	RepoID           *float64                       `json:"repoId,omitempty"`
	Type             *CreateProjectLinkType         `json:"type,omitempty"`
	CreatedAt        *float64                       `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectLinkDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                          `json:"sourceless,omitempty"`
	ProductionBranch *string                        `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProjectLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProjectLink1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProjectLink1) GetType() *CreateProjectLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink1) GetDeployHooks() []CreateProjectLinkDeployHooks {
	if o == nil {
		return []CreateProjectLinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkUnionType string

const (
	CreateProjectLinkUnionTypeCreateProjectLink1 CreateProjectLinkUnionType = "createProject_link_1"
	CreateProjectLinkUnionTypeCreateProjectLink2 CreateProjectLinkUnionType = "createProject_link_2"
	CreateProjectLinkUnionTypeCreateProjectLink3 CreateProjectLinkUnionType = "createProject_link_3"
)

type CreateProjectLink struct {
	CreateProjectLink1 *CreateProjectLink1
	CreateProjectLink2 *CreateProjectLink2
	CreateProjectLink3 *CreateProjectLink3

	Type CreateProjectLinkUnionType
}

func CreateCreateProjectLinkCreateProjectLink1(createProjectLink1 CreateProjectLink1) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink1

	return CreateProjectLink{
		CreateProjectLink1: &createProjectLink1,
		Type:               typ,
	}
}

func CreateCreateProjectLinkCreateProjectLink2(createProjectLink2 CreateProjectLink2) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink2

	return CreateProjectLink{
		CreateProjectLink2: &createProjectLink2,
		Type:               typ,
	}
}

func CreateCreateProjectLinkCreateProjectLink3(createProjectLink3 CreateProjectLink3) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink3

	return CreateProjectLink{
		CreateProjectLink3: &createProjectLink3,
		Type:               typ,
	}
}

func (u *CreateProjectLink) UnmarshalJSON(data []byte) error {

	var createProjectLink1 CreateProjectLink1 = CreateProjectLink1{}
	if err := utils.UnmarshalJSON(data, &createProjectLink1, "", true, true); err == nil {
		u.CreateProjectLink1 = &createProjectLink1
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink1
		return nil
	}

	var createProjectLink2 CreateProjectLink2 = CreateProjectLink2{}
	if err := utils.UnmarshalJSON(data, &createProjectLink2, "", true, true); err == nil {
		u.CreateProjectLink2 = &createProjectLink2
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink2
		return nil
	}

	var createProjectLink3 CreateProjectLink3 = CreateProjectLink3{}
	if err := utils.UnmarshalJSON(data, &createProjectLink3, "", true, true); err == nil {
		u.CreateProjectLink3 = &createProjectLink3
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectLink", string(data))
}

func (u CreateProjectLink) MarshalJSON() ([]byte, error) {
	if u.CreateProjectLink1 != nil {
		return utils.MarshalJSON(u.CreateProjectLink1, "", true)
	}

	if u.CreateProjectLink2 != nil {
		return utils.MarshalJSON(u.CreateProjectLink2, "", true)
	}

	if u.CreateProjectLink3 != nil {
		return utils.MarshalJSON(u.CreateProjectLink3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectLink: all fields are null")
}

type CreateProjectNodeVersion string

const (
	CreateProjectNodeVersionTwentyX   CreateProjectNodeVersion = "20.x"
	CreateProjectNodeVersionEighteenX CreateProjectNodeVersion = "18.x"
	CreateProjectNodeVersionSixteenX  CreateProjectNodeVersion = "16.x"
	CreateProjectNodeVersionFourteenX CreateProjectNodeVersion = "14.x"
	CreateProjectNodeVersionTwelveX   CreateProjectNodeVersion = "12.x"
	CreateProjectNodeVersionTenX      CreateProjectNodeVersion = "10.x"
	CreateProjectNodeVersionEight10X  CreateProjectNodeVersion = "8.10.x"
)

func (e CreateProjectNodeVersion) ToPointer() *CreateProjectNodeVersion {
	return &e
}
func (e *CreateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = CreateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectNodeVersion: %v", v)
	}
}

type CreateProjectPaths struct {
	Value string `json:"value"`
}

func (o *CreateProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectOptionsAllowlist struct {
	Paths []CreateProjectPaths `json:"paths"`
}

func (o *CreateProjectOptionsAllowlist) GetPaths() []CreateProjectPaths {
	if o == nil {
		return []CreateProjectPaths{}
	}
	return o.Paths
}

type CreateProjectPasswordProtection struct {
}

type CreateProjectDeploymentType string

const (
	CreateProjectDeploymentTypeAll                              CreateProjectDeploymentType = "all"
	CreateProjectDeploymentTypePreview                          CreateProjectDeploymentType = "preview"
	CreateProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectDeploymentType) ToPointer() *CreateProjectDeploymentType {
	return &e
}
func (e *CreateProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectDeploymentType: %v", v)
	}
}

type CreateProjectSsoProtection struct {
	DeploymentType CreateProjectDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectSsoProtection) GetDeploymentType() CreateProjectDeploymentType {
	if o == nil {
		return CreateProjectDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectTargetsType string

const (
	CreateProjectTargetsTypeStr        CreateProjectTargetsType = "str"
	CreateProjectTargetsTypeArrayOfStr CreateProjectTargetsType = "arrayOfStr"
)

type CreateProjectTargets struct {
	Str        *string
	ArrayOfStr []string

	Type CreateProjectTargetsType
}

func CreateCreateProjectTargetsStr(str string) CreateProjectTargets {
	typ := CreateProjectTargetsTypeStr

	return CreateProjectTargets{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectTargetsArrayOfStr(arrayOfStr []string) CreateProjectTargets {
	typ := CreateProjectTargetsTypeArrayOfStr

	return CreateProjectTargets{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CreateProjectTargets) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectTargetsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateProjectTargetsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTargets", string(data))
}

func (u CreateProjectTargets) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTargets: all fields are null")
}

type CreateProjectPermissions struct {
	AccessGroup                              []shared.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []shared.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationStore                         []shared.ACLAction `json:"integrationStore,omitempty"`
	IntegrationEvent                         []shared.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []shared.ACLAction `json:"integrationResourceSecrets,omitempty"`
	MarketplaceBillingData                   []shared.ACLAction `json:"marketplaceBillingData,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []shared.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []shared.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	Oauth2Connection                         []shared.ACLAction `json:"oauth2Connection,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	Repository                               []shared.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []shared.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []shared.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []shared.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []shared.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	WebAuthn                                 []shared.ACLAction `json:"webAuthn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []shared.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []shared.ACLAction `json:"oauth2Application,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	ProductionAliasProtectionBypass          []shared.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Environments                             []shared.ACLAction `json:"environments,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []shared.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAccessGroup                       []shared.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []shared.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectID                                []shared.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []shared.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []shared.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []shared.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []shared.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	SkewProtection                           []shared.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []shared.ACLAction `json:"sharedEnvVarConnection,omitempty"`
}

func (o *CreateProjectPermissions) GetAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *CreateProjectPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *CreateProjectPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *CreateProjectPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *CreateProjectPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *CreateProjectPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreateProjectPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *CreateProjectPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *CreateProjectPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *CreateProjectPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *CreateProjectPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *CreateProjectPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *CreateProjectPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *CreateProjectPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *CreateProjectPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *CreateProjectPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *CreateProjectPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *CreateProjectPermissions) GetCodeChecks() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *CreateProjectPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *CreateProjectPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *CreateProjectPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *CreateProjectPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *CreateProjectPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *CreateProjectPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *CreateProjectPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *CreateProjectPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *CreateProjectPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *CreateProjectPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *CreateProjectPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *CreateProjectPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *CreateProjectPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateProjectPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *CreateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *CreateProjectPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *CreateProjectPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *CreateProjectPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateProjectPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *CreateProjectPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *CreateProjectPermissions) GetIntegrationStore() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStore
}

func (o *CreateProjectPermissions) GetIntegrationEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *CreateProjectPermissions) GetIntegrationResourceSecrets() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *CreateProjectPermissions) GetMarketplaceBillingData() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *CreateProjectPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *CreateProjectPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *CreateProjectPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *CreateProjectPermissions) GetMonitoringSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *CreateProjectPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *CreateProjectPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *CreateProjectPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *CreateProjectPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *CreateProjectPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *CreateProjectPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *CreateProjectPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *CreateProjectPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *CreateProjectPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *CreateProjectPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *CreateProjectPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *CreateProjectPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *CreateProjectPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *CreateProjectPermissions) GetNotificationStatementOfReasons() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *CreateProjectPermissions) GetOauth2Connection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *CreateProjectPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *CreateProjectPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *CreateProjectPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *CreateProjectPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *CreateProjectPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *CreateProjectPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *CreateProjectPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *CreateProjectPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *CreateProjectPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *CreateProjectPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *CreateProjectPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *CreateProjectPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateProjectPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateProjectPermissions) GetRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *CreateProjectPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *CreateProjectPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *CreateProjectPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateProjectPermissions) GetRedisStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *CreateProjectPermissions) GetBlobStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *CreateProjectPermissions) GetPostgresStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *CreateProjectPermissions) GetIntegrationStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *CreateProjectPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *CreateProjectPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *CreateProjectPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *CreateProjectPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateProjectPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *CreateProjectPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *CreateProjectPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *CreateProjectPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *CreateProjectPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *CreateProjectPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *CreateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *CreateProjectPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *CreateProjectPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *CreateProjectPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *CreateProjectPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *CreateProjectPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *CreateProjectPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *CreateProjectPermissions) GetWebAuthn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *CreateProjectPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *CreateProjectPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *CreateProjectPermissions) GetEdgeConfigSchema() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *CreateProjectPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *CreateProjectPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *CreateProjectPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *CreateProjectPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *CreateProjectPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *CreateProjectPermissions) GetOauth2Application() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *CreateProjectPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *CreateProjectPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *CreateProjectPermissions) GetProductionAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *CreateProjectPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *CreateProjectPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *CreateProjectPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *CreateProjectPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *CreateProjectPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *CreateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *CreateProjectPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *CreateProjectPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *CreateProjectPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *CreateProjectPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *CreateProjectPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *CreateProjectPermissions) GetEnvironments() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateProjectPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *CreateProjectPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *CreateProjectPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectPermissions) GetOptionsAllowlist() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *CreateProjectPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateProjectPermissions) GetProjectAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *CreateProjectPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *CreateProjectPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *CreateProjectPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *CreateProjectPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *CreateProjectPermissions) GetProjectDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *CreateProjectPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *CreateProjectPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *CreateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *CreateProjectPermissions) GetProjectID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *CreateProjectPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *CreateProjectPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *CreateProjectPermissions) GetProjectMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *CreateProjectPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *CreateProjectPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *CreateProjectPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *CreateProjectPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *CreateProjectPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *CreateProjectPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *CreateProjectPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *CreateProjectPermissions) GetProjectSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *CreateProjectPermissions) GetProjectSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *CreateProjectPermissions) GetProjectDeploymentExpiration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *CreateProjectPermissions) GetSkewProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *CreateProjectPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectPermissions) GetSharedEnvVarConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

type CreateProjectLastRollbackTarget struct {
}

type CreateProjectJobStatus string

const (
	CreateProjectJobStatusSucceeded  CreateProjectJobStatus = "succeeded"
	CreateProjectJobStatusFailed     CreateProjectJobStatus = "failed"
	CreateProjectJobStatusSkipped    CreateProjectJobStatus = "skipped"
	CreateProjectJobStatusPending    CreateProjectJobStatus = "pending"
	CreateProjectJobStatusInProgress CreateProjectJobStatus = "in-progress"
)

func (e CreateProjectJobStatus) ToPointer() *CreateProjectJobStatus {
	return &e
}
func (e *CreateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = CreateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectJobStatus: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONType string

const (
	CreateProjectProjectsResponse200ApplicationJSONTypePromote  CreateProjectProjectsResponse200ApplicationJSONType = "promote"
	CreateProjectProjectsResponse200ApplicationJSONTypeRollback CreateProjectProjectsResponse200ApplicationJSONType = "rollback"
)

func (e CreateProjectProjectsResponse200ApplicationJSONType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = CreateProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateProjectLastAliasRequest struct {
	FromDeploymentID string                                              `json:"fromDeploymentId"`
	ToDeploymentID   string                                              `json:"toDeploymentId"`
	JobStatus        CreateProjectJobStatus                              `json:"jobStatus"`
	RequestedAt      float64                                             `json:"requestedAt"`
	Type             CreateProjectProjectsResponse200ApplicationJSONType `json:"type"`
}

func (o *CreateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetJobStatus() CreateProjectJobStatus {
	if o == nil {
		return CreateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *CreateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *CreateProjectLastAliasRequest) GetType() CreateProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

type CreateProjectScope string

const (
	CreateProjectScopeAutomationBypass CreateProjectScope = "automation-bypass"
)

func (e CreateProjectScope) ToPointer() *CreateProjectScope {
	return &e
}
func (e *CreateProjectScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = CreateProjectScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectScope: %v", v)
	}
}

type CreateProjectProtectionBypass struct {
	CreatedAt float64            `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
	Scope     CreateProjectScope `json:"scope"`
}

func (o *CreateProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProjectProtectionBypass) GetScope() CreateProjectScope {
	if o == nil {
		return CreateProjectScope("")
	}
	return o.Scope
}

type CreateProjectTrustedIpsProjectsDeploymentType string

const (
	CreateProjectTrustedIpsProjectsDeploymentTypeAll                              CreateProjectTrustedIpsProjectsDeploymentType = "all"
	CreateProjectTrustedIpsProjectsDeploymentTypePreview                          CreateProjectTrustedIpsProjectsDeploymentType = "preview"
	CreateProjectTrustedIpsProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProjectTrustedIpsProjectsDeploymentTypeProduction                       CreateProjectTrustedIpsProjectsDeploymentType = "production"
)

func (e CreateProjectTrustedIpsProjectsDeploymentType) ToPointer() *CreateProjectTrustedIpsProjectsDeploymentType {
	return &e
}
func (e *CreateProjectTrustedIpsProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProjectTrustedIpsProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsProjectsDeploymentType: %v", v)
	}
}

type CreateProjectTrustedIps2 struct {
	DeploymentType CreateProjectTrustedIpsProjectsDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectTrustedIps2) GetDeploymentType() CreateProjectTrustedIpsProjectsDeploymentType {
	if o == nil {
		return CreateProjectTrustedIpsProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectTrustedIpsDeploymentType string

const (
	CreateProjectTrustedIpsDeploymentTypeAll                              CreateProjectTrustedIpsDeploymentType = "all"
	CreateProjectTrustedIpsDeploymentTypePreview                          CreateProjectTrustedIpsDeploymentType = "preview"
	CreateProjectTrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
	CreateProjectTrustedIpsDeploymentTypeProduction                       CreateProjectTrustedIpsDeploymentType = "production"
)

func (e CreateProjectTrustedIpsDeploymentType) ToPointer() *CreateProjectTrustedIpsDeploymentType {
	return &e
}
func (e *CreateProjectTrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = CreateProjectTrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsDeploymentType: %v", v)
	}
}

type TrustedIpsAddresses struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *TrustedIpsAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *TrustedIpsAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type TrustedIpsProtectionMode string

const (
	TrustedIpsProtectionModeAdditional TrustedIpsProtectionMode = "additional"
	TrustedIpsProtectionModeExclusive  TrustedIpsProtectionMode = "exclusive"
)

func (e TrustedIpsProtectionMode) ToPointer() *TrustedIpsProtectionMode {
	return &e
}
func (e *TrustedIpsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = TrustedIpsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustedIpsProtectionMode: %v", v)
	}
}

type CreateProjectTrustedIps1 struct {
	DeploymentType CreateProjectTrustedIpsDeploymentType `json:"deploymentType"`
	Addresses      []TrustedIpsAddresses                 `json:"addresses"`
	ProtectionMode TrustedIpsProtectionMode              `json:"protectionMode"`
}

func (o *CreateProjectTrustedIps1) GetDeploymentType() CreateProjectTrustedIpsDeploymentType {
	if o == nil {
		return CreateProjectTrustedIpsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *CreateProjectTrustedIps1) GetAddresses() []TrustedIpsAddresses {
	if o == nil {
		return []TrustedIpsAddresses{}
	}
	return o.Addresses
}

func (o *CreateProjectTrustedIps1) GetProtectionMode() TrustedIpsProtectionMode {
	if o == nil {
		return TrustedIpsProtectionMode("")
	}
	return o.ProtectionMode
}

type CreateProjectTrustedIpsType string

const (
	CreateProjectTrustedIpsTypeCreateProjectTrustedIps1 CreateProjectTrustedIpsType = "createProject_trustedIps_1"
	CreateProjectTrustedIpsTypeCreateProjectTrustedIps2 CreateProjectTrustedIpsType = "createProject_trustedIps_2"
)

type CreateProjectTrustedIps struct {
	CreateProjectTrustedIps1 *CreateProjectTrustedIps1
	CreateProjectTrustedIps2 *CreateProjectTrustedIps2

	Type CreateProjectTrustedIpsType
}

func CreateCreateProjectTrustedIpsCreateProjectTrustedIps1(createProjectTrustedIps1 CreateProjectTrustedIps1) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectTrustedIps1

	return CreateProjectTrustedIps{
		CreateProjectTrustedIps1: &createProjectTrustedIps1,
		Type:                     typ,
	}
}

func CreateCreateProjectTrustedIpsCreateProjectTrustedIps2(createProjectTrustedIps2 CreateProjectTrustedIps2) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectTrustedIps2

	return CreateProjectTrustedIps{
		CreateProjectTrustedIps2: &createProjectTrustedIps2,
		Type:                     typ,
	}
}

func (u *CreateProjectTrustedIps) UnmarshalJSON(data []byte) error {

	var createProjectTrustedIps2 CreateProjectTrustedIps2 = CreateProjectTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps2, "", true, true); err == nil {
		u.CreateProjectTrustedIps2 = &createProjectTrustedIps2
		u.Type = CreateProjectTrustedIpsTypeCreateProjectTrustedIps2
		return nil
	}

	var createProjectTrustedIps1 CreateProjectTrustedIps1 = CreateProjectTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps1, "", true, true); err == nil {
		u.CreateProjectTrustedIps1 = &createProjectTrustedIps1
		u.Type = CreateProjectTrustedIpsTypeCreateProjectTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTrustedIps", string(data))
}

func (u CreateProjectTrustedIps) MarshalJSON() ([]byte, error) {
	if u.CreateProjectTrustedIps1 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps1, "", true)
	}

	if u.CreateProjectTrustedIps2 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTrustedIps: all fields are null")
}

type CreateProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *CreateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *CreateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

type CreateProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *CreateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type CreateProjectSrc2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectSrc2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectSrc2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectSrc2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectSrc2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectSrc2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectSrc2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectSrc2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectSrc2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectSrc2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectSrc2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectSrc2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectSrcType string

const (
	CreateProjectSrcTypeStr               CreateProjectSrcType = "str"
	CreateProjectSrcTypeCreateProjectSrc2 CreateProjectSrcType = "createProject_src_2"
)

type CreateProjectSrc struct {
	Str               *string
	CreateProjectSrc2 *CreateProjectSrc2

	Type CreateProjectSrcType
}

func CreateCreateProjectSrcStr(str string) CreateProjectSrc {
	typ := CreateProjectSrcTypeStr

	return CreateProjectSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectSrcCreateProjectSrc2(createProjectSrc2 CreateProjectSrc2) CreateProjectSrc {
	typ := CreateProjectSrcTypeCreateProjectSrc2

	return CreateProjectSrc{
		CreateProjectSrc2: &createProjectSrc2,
		Type:              typ,
	}
}

func (u *CreateProjectSrc) UnmarshalJSON(data []byte) error {

	var createProjectSrc2 CreateProjectSrc2 = CreateProjectSrc2{}
	if err := utils.UnmarshalJSON(data, &createProjectSrc2, "", true, true); err == nil {
		u.CreateProjectSrc2 = &createProjectSrc2
		u.Type = CreateProjectSrcTypeCreateProjectSrc2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectSrc", string(data))
}

func (u CreateProjectSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectSrc2 != nil {
		return utils.MarshalJSON(u.CreateProjectSrc2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectSrc: all fields are null")
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypePath      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery     CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type CreateProjectValue2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValue2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectValueType string

const (
	CreateProjectValueTypeStr                 CreateProjectValueType = "str"
	CreateProjectValueTypeCreateProjectValue2 CreateProjectValueType = "createProject_value_2"
)

type CreateProjectValue struct {
	Str                 *string
	CreateProjectValue2 *CreateProjectValue2

	Type CreateProjectValueType
}

func CreateCreateProjectValueStr(str string) CreateProjectValue {
	typ := CreateProjectValueTypeStr

	return CreateProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectValueCreateProjectValue2(createProjectValue2 CreateProjectValue2) CreateProjectValue {
	typ := CreateProjectValueTypeCreateProjectValue2

	return CreateProjectValue{
		CreateProjectValue2: &createProjectValue2,
		Type:                typ,
	}
}

func (u *CreateProjectValue) UnmarshalJSON(data []byte) error {

	var createProjectValue2 CreateProjectValue2 = CreateProjectValue2{}
	if err := utils.UnmarshalJSON(data, &createProjectValue2, "", true, true); err == nil {
		u.CreateProjectValue2 = &createProjectValue2
		u.Type = CreateProjectValueTypeCreateProjectValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectValue", string(data))
}

func (u CreateProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValue2 != nil {
		return utils.MarshalJSON(u.CreateProjectValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectValue: all fields are null")
}

type CreateProjectHas struct {
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Key   *string                                                                 `json:"key,omitempty"`
	Value *CreateProjectValue                                                     `json:"value,omitempty"`
}

func (o *CreateProjectHas) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *CreateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectHas) GetValue() *CreateProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath      CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery     CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion    CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type CreateProjectValueProjects2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValueProjects2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValueProjects2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValueProjects2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValueProjects2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValueProjects2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValueProjects2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValueProjects2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValueProjects2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValueProjects2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValueProjects2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValueProjects2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectProjectsValueType string

const (
	CreateProjectProjectsValueTypeStr                         CreateProjectProjectsValueType = "str"
	CreateProjectProjectsValueTypeCreateProjectValueProjects2 CreateProjectProjectsValueType = "createProject_value_projects_2"
)

type CreateProjectProjectsValue struct {
	Str                         *string
	CreateProjectValueProjects2 *CreateProjectValueProjects2

	Type CreateProjectProjectsValueType
}

func CreateCreateProjectProjectsValueStr(str string) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeStr

	return CreateProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectProjectsValueCreateProjectValueProjects2(createProjectValueProjects2 CreateProjectValueProjects2) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeCreateProjectValueProjects2

	return CreateProjectProjectsValue{
		CreateProjectValueProjects2: &createProjectValueProjects2,
		Type:                        typ,
	}
}

func (u *CreateProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var createProjectValueProjects2 CreateProjectValueProjects2 = CreateProjectValueProjects2{}
	if err := utils.UnmarshalJSON(data, &createProjectValueProjects2, "", true, true); err == nil {
		u.CreateProjectValueProjects2 = &createProjectValueProjects2
		u.Type = CreateProjectProjectsValueTypeCreateProjectValueProjects2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsValue", string(data))
}

func (u CreateProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValueProjects2 != nil {
		return utils.MarshalJSON(u.CreateProjectValueProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsValue: all fields are null")
}

type CreateProjectMissing struct {
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Key   *string                                                                               `json:"key,omitempty"`
	Value *CreateProjectProjectsValue                                                           `json:"value,omitempty"`
}

func (o *CreateProjectMissing) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *CreateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectMissing) GetValue() *CreateProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectHandle string

const (
	CreateProjectHandleInit     CreateProjectHandle = "init"
	CreateProjectHandleFinalize CreateProjectHandle = "finalize"
)

func (e CreateProjectHandle) ToPointer() *CreateProjectHandle {
	return &e
}
func (e *CreateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = CreateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectHandle: %v", v)
	}
}

type CreateProjectAction string

const (
	CreateProjectActionDeny      CreateProjectAction = "deny"
	CreateProjectActionChallenge CreateProjectAction = "challenge"
	CreateProjectActionLog       CreateProjectAction = "log"
	CreateProjectActionBypass    CreateProjectAction = "bypass"
	CreateProjectActionRateLimit CreateProjectAction = "rate_limit"
)

func (e CreateProjectAction) ToPointer() *CreateProjectAction {
	return &e
}
func (e *CreateProjectAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = CreateProjectAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAction: %v", v)
	}
}

type CreateProjectAlgo string

const (
	CreateProjectAlgoFixedWindow CreateProjectAlgo = "fixed_window"
	CreateProjectAlgoTokenBucket CreateProjectAlgo = "token_bucket"
)

func (e CreateProjectAlgo) ToPointer() *CreateProjectAlgo {
	return &e
}
func (e *CreateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = CreateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAlgo: %v", v)
	}
}

type CreateProjectErl struct {
	Algo   CreateProjectAlgo `json:"algo"`
	Window float64           `json:"window"`
	Limit  float64           `json:"limit"`
	Keys   []string          `json:"keys"`
}

func (o *CreateProjectErl) GetAlgo() CreateProjectAlgo {
	if o == nil {
		return CreateProjectAlgo("")
	}
	return o.Algo
}

func (o *CreateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *CreateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *CreateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type CreateProjectMitigate struct {
	Action CreateProjectAction `json:"action"`
	RuleID string              `json:"rule_id"`
	Erl    *CreateProjectErl   `json:"erl,omitempty"`
}

func (o *CreateProjectMitigate) GetAction() CreateProjectAction {
	if o == nil {
		return CreateProjectAction("")
	}
	return o.Action
}

func (o *CreateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *CreateProjectMitigate) GetErl() *CreateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type CreateProjectFirewallRoutes struct {
	Src      *CreateProjectSrc      `json:"src,omitempty"`
	Has      []CreateProjectHas     `json:"has,omitempty"`
	Missing  []CreateProjectMissing `json:"missing,omitempty"`
	Dest     *string                `json:"dest,omitempty"`
	Status   *float64               `json:"status,omitempty"`
	Handle   *CreateProjectHandle   `json:"handle,omitempty"`
	Mitigate *CreateProjectMitigate `json:"mitigate,omitempty"`
}

func (o *CreateProjectFirewallRoutes) GetSrc() *CreateProjectSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectFirewallRoutes) GetHas() []CreateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateProjectFirewallRoutes) GetMissing() []CreateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateProjectFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProjectFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateProjectFirewallRoutes) GetHandle() *CreateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *CreateProjectFirewallRoutes) GetMitigate() *CreateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type CreateProjectSecurity struct {
	AttackModeEnabled      *bool                         `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                      `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                         `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                      `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                      `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                      `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []CreateProjectFirewallRoutes `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                         `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                         `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                         `json:"ja4Enabled,omitempty"`
}

func (o *CreateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *CreateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *CreateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *CreateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *CreateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *CreateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *CreateProjectSecurity) GetFirewallRoutes() []CreateProjectFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *CreateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *CreateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *CreateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

type CreateProjectOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
}

func (o *CreateProjectOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

// CreateProjectResponseBody - The project was successfuly created
type CreateProjectResponseBody struct {
	AccountID                            string                                   `json:"accountId"`
	Analytics                            *CreateProjectAnalytics                  `json:"analytics,omitempty"`
	SpeedInsights                        *CreateProjectSpeedInsights              `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs                 *bool                                    `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains              *bool                                    `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                  `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                         *string                                  `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                  `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurationID               *string                                  `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled                 *bool                                    `json:"connectBuildsEnabled,omitempty"`
	CreatedAt                            *float64                                 `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility        *bool                                    `json:"customerSupportCodeVisibility,omitempty"`
	Crons                                *CreateProjectCrons                      `json:"crons,omitempty"`
	DataCache                            *CreateProjectDataCache                  `json:"dataCache,omitempty"`
	DevCommand                           *string                                  `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                     `json:"directoryListing"`
	InstallCommand                       *string                                  `json:"installCommand,omitempty"`
	Env                                  []CreateProjectEnv                       `json:"env,omitempty"`
	Framework                            *CreateProjectProjectsFramework          `json:"framework,omitempty"`
	GitForkProtection                    *bool                                    `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                    `json:"gitLFS,omitempty"`
	ID                                   string                                   `json:"id"`
	LatestDeployments                    []CreateProjectLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *CreateProjectLink                       `json:"link,omitempty"`
	Name                                 string                                   `json:"name"`
	NodeVersion                          CreateProjectNodeVersion                 `json:"nodeVersion"`
	OptionsAllowlist                     *CreateProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                  `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                  `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *CreateProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane        *bool                                    `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                         *bool                                    `json:"publicSource,omitempty"`
	RootDirectory                        *string                                  `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                  `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                    `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                 `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                 `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                    `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                    `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SsoProtection                        *CreateProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]CreateProjectTargets          `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                  `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                  `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                 `json:"updatedAt,omitempty"`
	Live                                 *bool                                    `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                    `json:"enablePreviewFeedback,omitempty"`
	Permissions                          *CreateProjectPermissions                `json:"permissions,omitempty"`
	LastRollbackTarget                   *CreateProjectLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *CreateProjectLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	HasFloatingAliases                   *bool                                    `json:"hasFloatingAliases,omitempty"`
	ProtectionBypass                     map[string]CreateProjectProtectionBypass `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                    `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *CreateProjectTrustedIps                 `json:"trustedIps,omitempty"`
	GitComments                          *CreateProjectGitComments                `json:"gitComments,omitempty"`
	Paused                               *bool                                    `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                  `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *CreateProjectWebAnalytics               `json:"webAnalytics,omitempty"`
	Security                             *CreateProjectSecurity                   `json:"security,omitempty"`
	OidcTokenConfig                      *CreateProjectOidcTokenConfig            `json:"oidcTokenConfig,omitempty"`
}

func (o *CreateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateProjectResponseBody) GetAnalytics() *CreateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectResponseBody) GetSpeedInsights() *CreateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *CreateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *CreateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *CreateProjectResponseBody) GetCrons() *CreateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateProjectResponseBody) GetDataCache() *CreateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *CreateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *CreateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectResponseBody) GetEnv() []CreateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateProjectResponseBody) GetFramework() *CreateProjectProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *CreateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *CreateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectResponseBody) GetLatestDeployments() []CreateProjectLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *CreateProjectResponseBody) GetLink() *CreateProjectLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectResponseBody) GetNodeVersion() CreateProjectNodeVersion {
	if o == nil {
		return CreateProjectNodeVersion("")
	}
	return o.NodeVersion
}

func (o *CreateProjectResponseBody) GetOptionsAllowlist() *CreateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetPasswordProtection() *CreateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *CreateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *CreateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *CreateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *CreateProjectResponseBody) GetSsoProtection() *CreateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *CreateProjectResponseBody) GetTargets() map[string]CreateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *CreateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *CreateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *CreateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *CreateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *CreateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProjectResponseBody) GetPermissions() *CreateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectResponseBody) GetLastRollbackTarget() *CreateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *CreateProjectResponseBody) GetLastAliasRequest() *CreateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *CreateProjectResponseBody) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *CreateProjectResponseBody) GetProtectionBypass() map[string]CreateProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *CreateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *CreateProjectResponseBody) GetTrustedIps() *CreateProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectResponseBody) GetGitComments() *CreateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *CreateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *CreateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *CreateProjectResponseBody) GetWebAnalytics() *CreateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectResponseBody) GetSecurity() *CreateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *CreateProjectResponseBody) GetOidcTokenConfig() *CreateProjectOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

type CreateProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project was successfuly created
	Object *CreateProjectResponseBody
}

func (o *CreateProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateProjectResponse) GetObject() *CreateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
