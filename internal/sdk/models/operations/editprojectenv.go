// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type EditProjectEnvTarget string

const (
	EditProjectEnvTargetProduction  EditProjectEnvTarget = "production"
	EditProjectEnvTargetPreview     EditProjectEnvTarget = "preview"
	EditProjectEnvTargetDevelopment EditProjectEnvTarget = "development"
)

func (e EditProjectEnvTarget) ToPointer() *EditProjectEnvTarget {
	return &e
}
func (e *EditProjectEnvTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget: %v", v)
	}
}

// EditProjectEnvType - The type of environment variable
type EditProjectEnvType string

const (
	EditProjectEnvTypeSystem    EditProjectEnvType = "system"
	EditProjectEnvTypeSecret    EditProjectEnvType = "secret"
	EditProjectEnvTypeEncrypted EditProjectEnvType = "encrypted"
	EditProjectEnvTypePlain     EditProjectEnvType = "plain"
	EditProjectEnvTypeSensitive EditProjectEnvType = "sensitive"
)

func (e EditProjectEnvType) ToPointer() *EditProjectEnvType {
	return &e
}
func (e *EditProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EditProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvType: %v", v)
	}
}

type EditProjectEnvRequestBody struct {
	// A comment to add context on what this env var is for
	Comment             *string `json:"comment,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// The name of the environment variable
	Key *string `json:"key,omitempty"`
	// The target environment of the environment variable
	Target []EditProjectEnvTarget `json:"target,omitempty"`
	// The type of environment variable
	Type *EditProjectEnvType `json:"type,omitempty"`
	// The value of the environment variable
	Value *string `json:"value,omitempty"`
}

func (o *EditProjectEnvRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EditProjectEnvRequestBody) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *EditProjectEnvRequestBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvRequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *EditProjectEnvRequestBody) GetTarget() []EditProjectEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvRequestBody) GetType() *EditProjectEnvType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EditProjectEnvRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type EditProjectEnvRequest struct {
	RequestBody *EditProjectEnvRequestBody `request:"mediaType=application/json"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *EditProjectEnvRequest) GetRequestBody() *EditProjectEnvRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *EditProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EditProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *EditProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EditProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyTypeIntegrationStoreSecret EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType = "integration-store-secret"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type Fourteen struct {
	StoreID string                                                           `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *Fourteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *Fourteen) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONType string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONTypePostgresURLNoSsl EditProjectEnvProjectsResponse200ApplicationJSONType = "postgres-url-no-ssl"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONType) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type Thirteen struct {
	StoreID string                                               `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONType `json:"type"`
}

func (o *Thirteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *Thirteen) GetType() EditProjectEnvProjectsResponse200ApplicationJSONType {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200Type string

const (
	EditProjectEnvProjectsResponse200TypePostgresDatabase EditProjectEnvProjectsResponse200Type = "postgres-database"
)

func (e EditProjectEnvProjectsResponse200Type) ToPointer() *EditProjectEnvProjectsResponse200Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = EditProjectEnvProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200Type: %v", v)
	}
}

type Twelve struct {
	StoreID string                                `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200Type `json:"type"`
}

func (o *Twelve) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *Twelve) GetType() EditProjectEnvProjectsResponse200Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11TypePostgresPassword EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type = "postgres-password"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type: %v", v)
	}
}

type Eleven struct {
	StoreID string                                                                        `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type `json:"type"`
}

func (o *Eleven) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *Eleven) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint11Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10TypePostgresHost EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type = "postgres-host"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type: %v", v)
	}
}

type EditProjectEnv10 struct {
	StoreID string                                                                        `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type `json:"type"`
}

func (o *EditProjectEnv10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv10) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint10Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9TypePostgresUser EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type = "postgres-user"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type: %v", v)
	}
}

type EditProjectEnv9 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type `json:"type"`
}

func (o *EditProjectEnv9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv9) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint9Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8TypePostgresPrismaURL EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type = "postgres-prisma-url"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type: %v", v)
	}
}

type EditProjectEnv8 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type `json:"type"`
}

func (o *EditProjectEnv8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv8) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint8Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7TypePostgresURLNonPooling EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type = "postgres-url-non-pooling"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type: %v", v)
	}
}

type EditProjectEnv7 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type `json:"type"`
}

func (o *EditProjectEnv7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv7) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint7Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6TypePostgresURL EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type = "postgres-url"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type: %v", v)
	}
}

type EditProjectEnv6 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type `json:"type"`
}

func (o *EditProjectEnv6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv6) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint6Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5TypeBlobReadWriteToken EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type = "blob-read-write-token"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type: %v", v)
	}
}

type EditProjectEnv5 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type `json:"type"`
}

func (o *EditProjectEnv5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv5) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint5Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4TypeRedisRestAPIReadOnlyToken EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type = "redis-rest-api-read-only-token"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type: %v", v)
	}
}

type EditProjectEnv4 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type `json:"type"`
}

func (o *EditProjectEnv4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv4) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint4Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3TypeRedisRestAPIToken EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type = "redis-rest-api-token"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type: %v", v)
	}
}

type EditProjectEnv3 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type `json:"type"`
}

func (o *EditProjectEnv3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv3) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint3Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2TypeRedisRestAPIURL EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type = "redis-rest-api-url"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type: %v", v)
	}
}

type EditProjectEnv2 struct {
	StoreID string                                                                       `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type `json:"type"`
}

func (o *EditProjectEnv2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv2) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHint2Type("")
	}
	return o.Type
}

type EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType string

const (
	EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintTypeRedisURL EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType = "redis-url"
)

func (e EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType) ToPointer() *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType {
	return &e
}
func (e *EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType: %v", v)
	}
}

type EditProjectEnv1 struct {
	StoreID string                                                                      `json:"storeId"`
	Type    EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType `json:"type"`
}

func (o *EditProjectEnv1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnv1) GetType() EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType {
	if o == nil {
		return EditProjectEnvProjectsResponse200ApplicationJSONResponseBodyContentHintType("")
	}
	return o.Type
}

type ContentHintType string

const (
	ContentHintTypeEditProjectEnv1  ContentHintType = "editProjectEnv_1"
	ContentHintTypeEditProjectEnv2  ContentHintType = "editProjectEnv_2"
	ContentHintTypeEditProjectEnv3  ContentHintType = "editProjectEnv_3"
	ContentHintTypeEditProjectEnv4  ContentHintType = "editProjectEnv_4"
	ContentHintTypeEditProjectEnv5  ContentHintType = "editProjectEnv_5"
	ContentHintTypeEditProjectEnv6  ContentHintType = "editProjectEnv_6"
	ContentHintTypeEditProjectEnv7  ContentHintType = "editProjectEnv_7"
	ContentHintTypeEditProjectEnv8  ContentHintType = "editProjectEnv_8"
	ContentHintTypeEditProjectEnv9  ContentHintType = "editProjectEnv_9"
	ContentHintTypeEditProjectEnv10 ContentHintType = "editProjectEnv_10"
	ContentHintTypeEleven           ContentHintType = "11"
	ContentHintTypeTwelve           ContentHintType = "12"
	ContentHintTypeThirteen         ContentHintType = "13"
	ContentHintTypeFourteen         ContentHintType = "14"
)

type ContentHint struct {
	EditProjectEnv1  *EditProjectEnv1
	EditProjectEnv2  *EditProjectEnv2
	EditProjectEnv3  *EditProjectEnv3
	EditProjectEnv4  *EditProjectEnv4
	EditProjectEnv5  *EditProjectEnv5
	EditProjectEnv6  *EditProjectEnv6
	EditProjectEnv7  *EditProjectEnv7
	EditProjectEnv8  *EditProjectEnv8
	EditProjectEnv9  *EditProjectEnv9
	EditProjectEnv10 *EditProjectEnv10
	Eleven           *Eleven
	Twelve           *Twelve
	Thirteen         *Thirteen
	Fourteen         *Fourteen

	Type ContentHintType
}

func CreateContentHintEditProjectEnv1(editProjectEnv1 EditProjectEnv1) ContentHint {
	typ := ContentHintTypeEditProjectEnv1

	return ContentHint{
		EditProjectEnv1: &editProjectEnv1,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv2(editProjectEnv2 EditProjectEnv2) ContentHint {
	typ := ContentHintTypeEditProjectEnv2

	return ContentHint{
		EditProjectEnv2: &editProjectEnv2,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv3(editProjectEnv3 EditProjectEnv3) ContentHint {
	typ := ContentHintTypeEditProjectEnv3

	return ContentHint{
		EditProjectEnv3: &editProjectEnv3,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv4(editProjectEnv4 EditProjectEnv4) ContentHint {
	typ := ContentHintTypeEditProjectEnv4

	return ContentHint{
		EditProjectEnv4: &editProjectEnv4,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv5(editProjectEnv5 EditProjectEnv5) ContentHint {
	typ := ContentHintTypeEditProjectEnv5

	return ContentHint{
		EditProjectEnv5: &editProjectEnv5,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv6(editProjectEnv6 EditProjectEnv6) ContentHint {
	typ := ContentHintTypeEditProjectEnv6

	return ContentHint{
		EditProjectEnv6: &editProjectEnv6,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv7(editProjectEnv7 EditProjectEnv7) ContentHint {
	typ := ContentHintTypeEditProjectEnv7

	return ContentHint{
		EditProjectEnv7: &editProjectEnv7,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv8(editProjectEnv8 EditProjectEnv8) ContentHint {
	typ := ContentHintTypeEditProjectEnv8

	return ContentHint{
		EditProjectEnv8: &editProjectEnv8,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv9(editProjectEnv9 EditProjectEnv9) ContentHint {
	typ := ContentHintTypeEditProjectEnv9

	return ContentHint{
		EditProjectEnv9: &editProjectEnv9,
		Type:            typ,
	}
}

func CreateContentHintEditProjectEnv10(editProjectEnv10 EditProjectEnv10) ContentHint {
	typ := ContentHintTypeEditProjectEnv10

	return ContentHint{
		EditProjectEnv10: &editProjectEnv10,
		Type:             typ,
	}
}

func CreateContentHintEleven(eleven Eleven) ContentHint {
	typ := ContentHintTypeEleven

	return ContentHint{
		Eleven: &eleven,
		Type:   typ,
	}
}

func CreateContentHintTwelve(twelve Twelve) ContentHint {
	typ := ContentHintTypeTwelve

	return ContentHint{
		Twelve: &twelve,
		Type:   typ,
	}
}

func CreateContentHintThirteen(thirteen Thirteen) ContentHint {
	typ := ContentHintTypeThirteen

	return ContentHint{
		Thirteen: &thirteen,
		Type:     typ,
	}
}

func CreateContentHintFourteen(fourteen Fourteen) ContentHint {
	typ := ContentHintTypeFourteen

	return ContentHint{
		Fourteen: &fourteen,
		Type:     typ,
	}
}

func (u *ContentHint) UnmarshalJSON(data []byte) error {

	var editProjectEnv1 EditProjectEnv1 = EditProjectEnv1{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv1, "", true, true); err == nil {
		u.EditProjectEnv1 = &editProjectEnv1
		u.Type = ContentHintTypeEditProjectEnv1
		return nil
	}

	var editProjectEnv2 EditProjectEnv2 = EditProjectEnv2{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv2, "", true, true); err == nil {
		u.EditProjectEnv2 = &editProjectEnv2
		u.Type = ContentHintTypeEditProjectEnv2
		return nil
	}

	var editProjectEnv3 EditProjectEnv3 = EditProjectEnv3{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv3, "", true, true); err == nil {
		u.EditProjectEnv3 = &editProjectEnv3
		u.Type = ContentHintTypeEditProjectEnv3
		return nil
	}

	var editProjectEnv4 EditProjectEnv4 = EditProjectEnv4{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv4, "", true, true); err == nil {
		u.EditProjectEnv4 = &editProjectEnv4
		u.Type = ContentHintTypeEditProjectEnv4
		return nil
	}

	var editProjectEnv5 EditProjectEnv5 = EditProjectEnv5{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv5, "", true, true); err == nil {
		u.EditProjectEnv5 = &editProjectEnv5
		u.Type = ContentHintTypeEditProjectEnv5
		return nil
	}

	var editProjectEnv6 EditProjectEnv6 = EditProjectEnv6{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv6, "", true, true); err == nil {
		u.EditProjectEnv6 = &editProjectEnv6
		u.Type = ContentHintTypeEditProjectEnv6
		return nil
	}

	var editProjectEnv7 EditProjectEnv7 = EditProjectEnv7{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv7, "", true, true); err == nil {
		u.EditProjectEnv7 = &editProjectEnv7
		u.Type = ContentHintTypeEditProjectEnv7
		return nil
	}

	var editProjectEnv8 EditProjectEnv8 = EditProjectEnv8{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv8, "", true, true); err == nil {
		u.EditProjectEnv8 = &editProjectEnv8
		u.Type = ContentHintTypeEditProjectEnv8
		return nil
	}

	var editProjectEnv9 EditProjectEnv9 = EditProjectEnv9{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv9, "", true, true); err == nil {
		u.EditProjectEnv9 = &editProjectEnv9
		u.Type = ContentHintTypeEditProjectEnv9
		return nil
	}

	var editProjectEnv10 EditProjectEnv10 = EditProjectEnv10{}
	if err := utils.UnmarshalJSON(data, &editProjectEnv10, "", true, true); err == nil {
		u.EditProjectEnv10 = &editProjectEnv10
		u.Type = ContentHintTypeEditProjectEnv10
		return nil
	}

	var eleven Eleven = Eleven{}
	if err := utils.UnmarshalJSON(data, &eleven, "", true, true); err == nil {
		u.Eleven = &eleven
		u.Type = ContentHintTypeEleven
		return nil
	}

	var twelve Twelve = Twelve{}
	if err := utils.UnmarshalJSON(data, &twelve, "", true, true); err == nil {
		u.Twelve = &twelve
		u.Type = ContentHintTypeTwelve
		return nil
	}

	var thirteen Thirteen = Thirteen{}
	if err := utils.UnmarshalJSON(data, &thirteen, "", true, true); err == nil {
		u.Thirteen = &thirteen
		u.Type = ContentHintTypeThirteen
		return nil
	}

	var fourteen Fourteen = Fourteen{}
	if err := utils.UnmarshalJSON(data, &fourteen, "", true, true); err == nil {
		u.Fourteen = &fourteen
		u.Type = ContentHintTypeFourteen
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ContentHint", string(data))
}

func (u ContentHint) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnv1 != nil {
		return utils.MarshalJSON(u.EditProjectEnv1, "", true)
	}

	if u.EditProjectEnv2 != nil {
		return utils.MarshalJSON(u.EditProjectEnv2, "", true)
	}

	if u.EditProjectEnv3 != nil {
		return utils.MarshalJSON(u.EditProjectEnv3, "", true)
	}

	if u.EditProjectEnv4 != nil {
		return utils.MarshalJSON(u.EditProjectEnv4, "", true)
	}

	if u.EditProjectEnv5 != nil {
		return utils.MarshalJSON(u.EditProjectEnv5, "", true)
	}

	if u.EditProjectEnv6 != nil {
		return utils.MarshalJSON(u.EditProjectEnv6, "", true)
	}

	if u.EditProjectEnv7 != nil {
		return utils.MarshalJSON(u.EditProjectEnv7, "", true)
	}

	if u.EditProjectEnv8 != nil {
		return utils.MarshalJSON(u.EditProjectEnv8, "", true)
	}

	if u.EditProjectEnv9 != nil {
		return utils.MarshalJSON(u.EditProjectEnv9, "", true)
	}

	if u.EditProjectEnv10 != nil {
		return utils.MarshalJSON(u.EditProjectEnv10, "", true)
	}

	if u.Eleven != nil {
		return utils.MarshalJSON(u.Eleven, "", true)
	}

	if u.Twelve != nil {
		return utils.MarshalJSON(u.Twelve, "", true)
	}

	if u.Thirteen != nil {
		return utils.MarshalJSON(u.Thirteen, "", true)
	}

	if u.Fourteen != nil {
		return utils.MarshalJSON(u.Fourteen, "", true)
	}

	return nil, errors.New("could not marshal union type ContentHint: all fields are null")
}

type EditProjectEnvProjectsResponseType string

const (
	EditProjectEnvProjectsResponseTypeFlagsSecret EditProjectEnvProjectsResponseType = "flags-secret"
)

func (e EditProjectEnvProjectsResponseType) ToPointer() *EditProjectEnvProjectsResponseType {
	return &e
}
func (e *EditProjectEnvProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = EditProjectEnvProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponseType: %v", v)
	}
}

// InternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type InternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                             `json:"encryptedValue"`
	Type           EditProjectEnvProjectsResponseType `json:"type"`
}

func (o *InternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *InternalContentHint) GetType() EditProjectEnvProjectsResponseType {
	if o == nil {
		return EditProjectEnvProjectsResponseType("")
	}
	return o.Type
}

type EditProjectEnvProjects2 string

const (
	EditProjectEnvProjects2Production  EditProjectEnvProjects2 = "production"
	EditProjectEnvProjects2Preview     EditProjectEnvProjects2 = "preview"
	EditProjectEnvProjects2Development EditProjectEnvProjects2 = "development"
)

func (e EditProjectEnvProjects2) ToPointer() *EditProjectEnvProjects2 {
	return &e
}
func (e *EditProjectEnvProjects2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvProjects2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjects2: %v", v)
	}
}

type EditProjectEnvProjects1 string

const (
	EditProjectEnvProjects1Production  EditProjectEnvProjects1 = "production"
	EditProjectEnvProjects1Preview     EditProjectEnvProjects1 = "preview"
	EditProjectEnvProjects1Development EditProjectEnvProjects1 = "development"
)

func (e EditProjectEnvProjects1) ToPointer() *EditProjectEnvProjects1 {
	return &e
}
func (e *EditProjectEnvProjects1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvProjects1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjects1: %v", v)
	}
}

type EditProjectEnvProjectsTargetType string

const (
	EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvProjects1 EditProjectEnvProjectsTargetType = "arrayOfEditProjectEnvProjects1"
	EditProjectEnvProjectsTargetTypeEditProjectEnvProjects2        EditProjectEnvProjectsTargetType = "editProjectEnv_projects_2"
)

type EditProjectEnvProjectsTarget struct {
	ArrayOfEditProjectEnvProjects1 []EditProjectEnvProjects1
	EditProjectEnvProjects2        *EditProjectEnvProjects2

	Type EditProjectEnvProjectsTargetType
}

func CreateEditProjectEnvProjectsTargetArrayOfEditProjectEnvProjects1(arrayOfEditProjectEnvProjects1 []EditProjectEnvProjects1) EditProjectEnvProjectsTarget {
	typ := EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvProjects1

	return EditProjectEnvProjectsTarget{
		ArrayOfEditProjectEnvProjects1: arrayOfEditProjectEnvProjects1,
		Type:                           typ,
	}
}

func CreateEditProjectEnvProjectsTargetEditProjectEnvProjects2(editProjectEnvProjects2 EditProjectEnvProjects2) EditProjectEnvProjectsTarget {
	typ := EditProjectEnvProjectsTargetTypeEditProjectEnvProjects2

	return EditProjectEnvProjectsTarget{
		EditProjectEnvProjects2: &editProjectEnvProjects2,
		Type:                    typ,
	}
}

func (u *EditProjectEnvProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfEditProjectEnvProjects1 []EditProjectEnvProjects1 = []EditProjectEnvProjects1{}
	if err := utils.UnmarshalJSON(data, &arrayOfEditProjectEnvProjects1, "", true, true); err == nil {
		u.ArrayOfEditProjectEnvProjects1 = arrayOfEditProjectEnvProjects1
		u.Type = EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvProjects1
		return nil
	}

	var editProjectEnvProjects2 EditProjectEnvProjects2 = EditProjectEnvProjects2("")
	if err := utils.UnmarshalJSON(data, &editProjectEnvProjects2, "", true, true); err == nil {
		u.EditProjectEnvProjects2 = &editProjectEnvProjects2
		u.Type = EditProjectEnvProjectsTargetTypeEditProjectEnvProjects2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvProjectsTarget", string(data))
}

func (u EditProjectEnvProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfEditProjectEnvProjects1 != nil {
		return utils.MarshalJSON(u.ArrayOfEditProjectEnvProjects1, "", true)
	}

	if u.EditProjectEnvProjects2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvProjectsTarget: all fields are null")
}

type EditProjectEnvProjectsType string

const (
	EditProjectEnvProjectsTypeSystem    EditProjectEnvProjectsType = "system"
	EditProjectEnvProjectsTypeEncrypted EditProjectEnvProjectsType = "encrypted"
	EditProjectEnvProjectsTypePlain     EditProjectEnvProjectsType = "plain"
	EditProjectEnvProjectsTypeSensitive EditProjectEnvProjectsType = "sensitive"
	EditProjectEnvProjectsTypeSecret    EditProjectEnvProjectsType = "secret"
)

func (e EditProjectEnvProjectsType) ToPointer() *EditProjectEnvProjectsType {
	return &e
}
func (e *EditProjectEnvProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = EditProjectEnvProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsType: %v", v)
	}
}

// EditProjectEnvResponseBody - The environment variable was successfully edited
type EditProjectEnvResponseBody struct {
	Comment             *string      `json:"comment,omitempty"`
	ConfigurationID     *string      `json:"configurationId,omitempty"`
	ContentHint         *ContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64     `json:"createdAt,omitempty"`
	CreatedBy           *string      `json:"createdBy,omitempty"`
	CustomEnvironmentID *string      `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *InternalContentHint          `json:"internalContentHint,omitempty"`
	Key                 string                        `json:"key"`
	Target              *EditProjectEnvProjectsTarget `json:"target,omitempty"`
	Type                EditProjectEnvProjectsType    `json:"type"`
	UpdatedAt           *float64                      `json:"updatedAt,omitempty"`
	UpdatedBy           *string                       `json:"updatedBy,omitempty"`
	Value               string                        `json:"value"`
}

func (o *EditProjectEnvResponseBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EditProjectEnvResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *EditProjectEnvResponseBody) GetContentHint() *ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *EditProjectEnvResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EditProjectEnvResponseBody) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *EditProjectEnvResponseBody) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *EditProjectEnvResponseBody) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *EditProjectEnvResponseBody) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *EditProjectEnvResponseBody) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *EditProjectEnvResponseBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EditProjectEnvResponseBody) GetInternalContentHint() *InternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *EditProjectEnvResponseBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EditProjectEnvResponseBody) GetTarget() *EditProjectEnvProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvResponseBody) GetType() EditProjectEnvProjectsType {
	if o == nil {
		return EditProjectEnvProjectsType("")
	}
	return o.Type
}

func (o *EditProjectEnvResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *EditProjectEnvResponseBody) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *EditProjectEnvResponseBody) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type EditProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was successfully edited
	Object *EditProjectEnvResponseBody
}

func (o *EditProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EditProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EditProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *EditProjectEnvResponse) GetObject() *EditProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
