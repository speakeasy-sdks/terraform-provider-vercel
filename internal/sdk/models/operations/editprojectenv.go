// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

type EditProjectEnvTarget string

const (
	EditProjectEnvTargetProduction  EditProjectEnvTarget = "production"
	EditProjectEnvTargetPreview     EditProjectEnvTarget = "preview"
	EditProjectEnvTargetDevelopment EditProjectEnvTarget = "development"
)

func (e EditProjectEnvTarget) ToPointer() *EditProjectEnvTarget {
	return &e
}
func (e *EditProjectEnvTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget: %v", v)
	}
}

// EditProjectEnvType - The type of environment variable
type EditProjectEnvType string

const (
	EditProjectEnvTypeSystem    EditProjectEnvType = "system"
	EditProjectEnvTypeSecret    EditProjectEnvType = "secret"
	EditProjectEnvTypeEncrypted EditProjectEnvType = "encrypted"
	EditProjectEnvTypePlain     EditProjectEnvType = "plain"
	EditProjectEnvTypeSensitive EditProjectEnvType = "sensitive"
)

func (e EditProjectEnvType) ToPointer() *EditProjectEnvType {
	return &e
}
func (e *EditProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EditProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvType: %v", v)
	}
}

type EditProjectEnvRequestBody struct {
	// The name of the environment variable
	Key *string `json:"key,omitempty"`
	// The target environment of the environment variable
	Target []EditProjectEnvTarget `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// The type of environment variable
	Type *EditProjectEnvType `json:"type,omitempty"`
	// The value of the environment variable
	Value               *string `json:"value,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
	// A comment to add context on what this env var is for
	Comment *string `json:"comment,omitempty"`
}

func (o *EditProjectEnvRequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *EditProjectEnvRequestBody) GetTarget() []EditProjectEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvRequestBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvRequestBody) GetType() *EditProjectEnvType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EditProjectEnvRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *EditProjectEnvRequestBody) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *EditProjectEnvRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type EditProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                    `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *EditProjectEnvRequestBody `request:"mediaType=application/json"`
}

func (o *EditProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *EditProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EditProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *EditProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EditProjectEnvRequest) GetRequestBody() *EditProjectEnvRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type EditProjectEnvTarget2 string

const (
	EditProjectEnvTarget2Production  EditProjectEnvTarget2 = "production"
	EditProjectEnvTarget2Preview     EditProjectEnvTarget2 = "preview"
	EditProjectEnvTarget2Development EditProjectEnvTarget2 = "development"
)

func (e EditProjectEnvTarget2) ToPointer() *EditProjectEnvTarget2 {
	return &e
}
func (e *EditProjectEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget2: %v", v)
	}
}

type EditProjectEnvTarget1 string

const (
	EditProjectEnvTarget1Production  EditProjectEnvTarget1 = "production"
	EditProjectEnvTarget1Preview     EditProjectEnvTarget1 = "preview"
	EditProjectEnvTarget1Development EditProjectEnvTarget1 = "development"
)

func (e EditProjectEnvTarget1) ToPointer() *EditProjectEnvTarget1 {
	return &e
}
func (e *EditProjectEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget1: %v", v)
	}
}

type EditProjectEnvProjectsTargetType string

const (
	EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvTarget1 EditProjectEnvProjectsTargetType = "arrayOfEditProjectEnvTarget1"
	EditProjectEnvProjectsTargetTypeEditProjectEnvTarget2        EditProjectEnvProjectsTargetType = "editProjectEnv_target_2"
)

type EditProjectEnvProjectsTarget struct {
	ArrayOfEditProjectEnvTarget1 []EditProjectEnvTarget1
	EditProjectEnvTarget2        *EditProjectEnvTarget2

	Type EditProjectEnvProjectsTargetType
}

func CreateEditProjectEnvProjectsTargetArrayOfEditProjectEnvTarget1(arrayOfEditProjectEnvTarget1 []EditProjectEnvTarget1) EditProjectEnvProjectsTarget {
	typ := EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvTarget1

	return EditProjectEnvProjectsTarget{
		ArrayOfEditProjectEnvTarget1: arrayOfEditProjectEnvTarget1,
		Type:                         typ,
	}
}

func CreateEditProjectEnvProjectsTargetEditProjectEnvTarget2(editProjectEnvTarget2 EditProjectEnvTarget2) EditProjectEnvProjectsTarget {
	typ := EditProjectEnvProjectsTargetTypeEditProjectEnvTarget2

	return EditProjectEnvProjectsTarget{
		EditProjectEnvTarget2: &editProjectEnvTarget2,
		Type:                  typ,
	}
}

func (u *EditProjectEnvProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfEditProjectEnvTarget1 []EditProjectEnvTarget1 = []EditProjectEnvTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfEditProjectEnvTarget1, "", true, true); err == nil {
		u.ArrayOfEditProjectEnvTarget1 = arrayOfEditProjectEnvTarget1
		u.Type = EditProjectEnvProjectsTargetTypeArrayOfEditProjectEnvTarget1
		return nil
	}

	var editProjectEnvTarget2 EditProjectEnvTarget2 = EditProjectEnvTarget2("")
	if err := utils.UnmarshalJSON(data, &editProjectEnvTarget2, "", true, true); err == nil {
		u.EditProjectEnvTarget2 = &editProjectEnvTarget2
		u.Type = EditProjectEnvProjectsTargetTypeEditProjectEnvTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvProjectsTarget", string(data))
}

func (u EditProjectEnvProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfEditProjectEnvTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfEditProjectEnvTarget1, "", true)
	}

	if u.EditProjectEnvTarget2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvProjectsTarget: all fields are null")
}

type EditProjectEnvProjectsType string

const (
	EditProjectEnvProjectsTypeSystem    EditProjectEnvProjectsType = "system"
	EditProjectEnvProjectsTypeEncrypted EditProjectEnvProjectsType = "encrypted"
	EditProjectEnvProjectsTypePlain     EditProjectEnvProjectsType = "plain"
	EditProjectEnvProjectsTypeSensitive EditProjectEnvProjectsType = "sensitive"
	EditProjectEnvProjectsTypeSecret    EditProjectEnvProjectsType = "secret"
)

func (e EditProjectEnvProjectsType) ToPointer() *EditProjectEnvProjectsType {
	return &e
}
func (e *EditProjectEnvProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = EditProjectEnvProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsType: %v", v)
	}
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14TypeIntegrationStoreSecret EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type = "integration-store-secret"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type: %v", v)
	}
}

type Fourteen struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *Fourteen) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type("")
	}
	return o.Type
}

func (o *Fourteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13TypePostgresURLNoSsl EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type = "postgres-url-no-ssl"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type: %v", v)
	}
}

type Thirteen struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *Thirteen) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type("")
	}
	return o.Type
}

func (o *Thirteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12TypePostgresDatabase EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type = "postgres-database"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type: %v", v)
	}
}

type Twelve struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *Twelve) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type("")
	}
	return o.Type
}

func (o *Twelve) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11TypePostgresPassword EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type = "postgres-password"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type: %v", v)
	}
}

type Eleven struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *Eleven) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type("")
	}
	return o.Type
}

func (o *Eleven) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10TypePostgresHost EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type = "postgres-host"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type: %v", v)
	}
}

type ContentHint10 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *ContentHint10) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type("")
	}
	return o.Type
}

func (o *ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9TypePostgresUser EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type = "postgres-user"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type ContentHint9 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *ContentHint9) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8TypePostgresPrismaURL EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type = "postgres-prisma-url"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type ContentHint8 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *ContentHint8) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURLNonPooling EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url-non-pooling"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type ContentHint7 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *ContentHint7) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONType string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONTypePostgresURL EditProjectEnvContentHintProjectsResponse200ApplicationJSONType = "postgres-url"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONType) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type ContentHint6 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                          `json:"storeId"`
}

func (o *ContentHint6) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200Type string

const (
	EditProjectEnvContentHintProjectsResponse200TypeBlobReadWriteToken EditProjectEnvContentHintProjectsResponse200Type = "blob-read-write-token"
)

func (e EditProjectEnvContentHintProjectsResponse200Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = EditProjectEnvContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200Type: %v", v)
	}
}

type ContentHint5 struct {
	Type    EditProjectEnvContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                           `json:"storeId"`
}

func (o *ContentHint5) GetType() EditProjectEnvContentHintProjectsResponse200Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponseType string

const (
	EditProjectEnvContentHintProjectsResponseTypeRedisRestAPIReadOnlyToken EditProjectEnvContentHintProjectsResponseType = "redis-rest-api-read-only-token"
)

func (e EditProjectEnvContentHintProjectsResponseType) ToPointer() *EditProjectEnvContentHintProjectsResponseType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = EditProjectEnvContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponseType: %v", v)
	}
}

type ContentHint4 struct {
	Type    EditProjectEnvContentHintProjectsResponseType `json:"type"`
	StoreID string                                        `json:"storeId"`
}

func (o *ContentHint4) GetType() EditProjectEnvContentHintProjectsResponseType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsType string

const (
	EditProjectEnvContentHintProjectsTypeRedisRestAPIToken EditProjectEnvContentHintProjectsType = "redis-rest-api-token"
)

func (e EditProjectEnvContentHintProjectsType) ToPointer() *EditProjectEnvContentHintProjectsType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = EditProjectEnvContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsType: %v", v)
	}
}

type ContentHint3 struct {
	Type    EditProjectEnvContentHintProjectsType `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *ContentHint3) GetType() EditProjectEnvContentHintProjectsType {
	if o == nil {
		return EditProjectEnvContentHintProjectsType("")
	}
	return o.Type
}

func (o *ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintType string

const (
	EditProjectEnvContentHintTypeRedisRestAPIURL EditProjectEnvContentHintType = "redis-rest-api-url"
)

func (e EditProjectEnvContentHintType) ToPointer() *EditProjectEnvContentHintType {
	return &e
}
func (e *EditProjectEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = EditProjectEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintType: %v", v)
	}
}

type ContentHint2 struct {
	Type    EditProjectEnvContentHintType `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *ContentHint2) GetType() EditProjectEnvContentHintType {
	if o == nil {
		return EditProjectEnvContentHintType("")
	}
	return o.Type
}

func (o *ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type ContentHintType string

const (
	ContentHintTypeRedisURL ContentHintType = "redis-url"
)

func (e ContentHintType) ToPointer() *ContentHintType {
	return &e
}
func (e *ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentHintType: %v", v)
	}
}

type ContentHint1 struct {
	Type    ContentHintType `json:"type"`
	StoreID string          `json:"storeId"`
}

func (o *ContentHint1) GetType() ContentHintType {
	if o == nil {
		return ContentHintType("")
	}
	return o.Type
}

func (o *ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type ContentHintUnionType string

const (
	ContentHintUnionTypeContentHint1  ContentHintUnionType = "contentHint_1"
	ContentHintUnionTypeContentHint2  ContentHintUnionType = "contentHint_2"
	ContentHintUnionTypeContentHint3  ContentHintUnionType = "contentHint_3"
	ContentHintUnionTypeContentHint4  ContentHintUnionType = "contentHint_4"
	ContentHintUnionTypeContentHint5  ContentHintUnionType = "contentHint_5"
	ContentHintUnionTypeContentHint6  ContentHintUnionType = "contentHint_6"
	ContentHintUnionTypeContentHint7  ContentHintUnionType = "contentHint_7"
	ContentHintUnionTypeContentHint8  ContentHintUnionType = "contentHint_8"
	ContentHintUnionTypeContentHint9  ContentHintUnionType = "contentHint_9"
	ContentHintUnionTypeContentHint10 ContentHintUnionType = "contentHint_10"
	ContentHintUnionTypeEleven        ContentHintUnionType = "11"
	ContentHintUnionTypeTwelve        ContentHintUnionType = "12"
	ContentHintUnionTypeThirteen      ContentHintUnionType = "13"
	ContentHintUnionTypeFourteen      ContentHintUnionType = "14"
)

type ContentHint struct {
	ContentHint1  *ContentHint1
	ContentHint2  *ContentHint2
	ContentHint3  *ContentHint3
	ContentHint4  *ContentHint4
	ContentHint5  *ContentHint5
	ContentHint6  *ContentHint6
	ContentHint7  *ContentHint7
	ContentHint8  *ContentHint8
	ContentHint9  *ContentHint9
	ContentHint10 *ContentHint10
	Eleven        *Eleven
	Twelve        *Twelve
	Thirteen      *Thirteen
	Fourteen      *Fourteen

	Type ContentHintUnionType
}

func CreateContentHintContentHint1(contentHint1 ContentHint1) ContentHint {
	typ := ContentHintUnionTypeContentHint1

	return ContentHint{
		ContentHint1: &contentHint1,
		Type:         typ,
	}
}

func CreateContentHintContentHint2(contentHint2 ContentHint2) ContentHint {
	typ := ContentHintUnionTypeContentHint2

	return ContentHint{
		ContentHint2: &contentHint2,
		Type:         typ,
	}
}

func CreateContentHintContentHint3(contentHint3 ContentHint3) ContentHint {
	typ := ContentHintUnionTypeContentHint3

	return ContentHint{
		ContentHint3: &contentHint3,
		Type:         typ,
	}
}

func CreateContentHintContentHint4(contentHint4 ContentHint4) ContentHint {
	typ := ContentHintUnionTypeContentHint4

	return ContentHint{
		ContentHint4: &contentHint4,
		Type:         typ,
	}
}

func CreateContentHintContentHint5(contentHint5 ContentHint5) ContentHint {
	typ := ContentHintUnionTypeContentHint5

	return ContentHint{
		ContentHint5: &contentHint5,
		Type:         typ,
	}
}

func CreateContentHintContentHint6(contentHint6 ContentHint6) ContentHint {
	typ := ContentHintUnionTypeContentHint6

	return ContentHint{
		ContentHint6: &contentHint6,
		Type:         typ,
	}
}

func CreateContentHintContentHint7(contentHint7 ContentHint7) ContentHint {
	typ := ContentHintUnionTypeContentHint7

	return ContentHint{
		ContentHint7: &contentHint7,
		Type:         typ,
	}
}

func CreateContentHintContentHint8(contentHint8 ContentHint8) ContentHint {
	typ := ContentHintUnionTypeContentHint8

	return ContentHint{
		ContentHint8: &contentHint8,
		Type:         typ,
	}
}

func CreateContentHintContentHint9(contentHint9 ContentHint9) ContentHint {
	typ := ContentHintUnionTypeContentHint9

	return ContentHint{
		ContentHint9: &contentHint9,
		Type:         typ,
	}
}

func CreateContentHintContentHint10(contentHint10 ContentHint10) ContentHint {
	typ := ContentHintUnionTypeContentHint10

	return ContentHint{
		ContentHint10: &contentHint10,
		Type:          typ,
	}
}

func CreateContentHintEleven(eleven Eleven) ContentHint {
	typ := ContentHintUnionTypeEleven

	return ContentHint{
		Eleven: &eleven,
		Type:   typ,
	}
}

func CreateContentHintTwelve(twelve Twelve) ContentHint {
	typ := ContentHintUnionTypeTwelve

	return ContentHint{
		Twelve: &twelve,
		Type:   typ,
	}
}

func CreateContentHintThirteen(thirteen Thirteen) ContentHint {
	typ := ContentHintUnionTypeThirteen

	return ContentHint{
		Thirteen: &thirteen,
		Type:     typ,
	}
}

func CreateContentHintFourteen(fourteen Fourteen) ContentHint {
	typ := ContentHintUnionTypeFourteen

	return ContentHint{
		Fourteen: &fourteen,
		Type:     typ,
	}
}

func (u *ContentHint) UnmarshalJSON(data []byte) error {

	var contentHint1 ContentHint1 = ContentHint1{}
	if err := utils.UnmarshalJSON(data, &contentHint1, "", true, true); err == nil {
		u.ContentHint1 = &contentHint1
		u.Type = ContentHintUnionTypeContentHint1
		return nil
	}

	var contentHint2 ContentHint2 = ContentHint2{}
	if err := utils.UnmarshalJSON(data, &contentHint2, "", true, true); err == nil {
		u.ContentHint2 = &contentHint2
		u.Type = ContentHintUnionTypeContentHint2
		return nil
	}

	var contentHint3 ContentHint3 = ContentHint3{}
	if err := utils.UnmarshalJSON(data, &contentHint3, "", true, true); err == nil {
		u.ContentHint3 = &contentHint3
		u.Type = ContentHintUnionTypeContentHint3
		return nil
	}

	var contentHint4 ContentHint4 = ContentHint4{}
	if err := utils.UnmarshalJSON(data, &contentHint4, "", true, true); err == nil {
		u.ContentHint4 = &contentHint4
		u.Type = ContentHintUnionTypeContentHint4
		return nil
	}

	var contentHint5 ContentHint5 = ContentHint5{}
	if err := utils.UnmarshalJSON(data, &contentHint5, "", true, true); err == nil {
		u.ContentHint5 = &contentHint5
		u.Type = ContentHintUnionTypeContentHint5
		return nil
	}

	var contentHint6 ContentHint6 = ContentHint6{}
	if err := utils.UnmarshalJSON(data, &contentHint6, "", true, true); err == nil {
		u.ContentHint6 = &contentHint6
		u.Type = ContentHintUnionTypeContentHint6
		return nil
	}

	var contentHint7 ContentHint7 = ContentHint7{}
	if err := utils.UnmarshalJSON(data, &contentHint7, "", true, true); err == nil {
		u.ContentHint7 = &contentHint7
		u.Type = ContentHintUnionTypeContentHint7
		return nil
	}

	var contentHint8 ContentHint8 = ContentHint8{}
	if err := utils.UnmarshalJSON(data, &contentHint8, "", true, true); err == nil {
		u.ContentHint8 = &contentHint8
		u.Type = ContentHintUnionTypeContentHint8
		return nil
	}

	var contentHint9 ContentHint9 = ContentHint9{}
	if err := utils.UnmarshalJSON(data, &contentHint9, "", true, true); err == nil {
		u.ContentHint9 = &contentHint9
		u.Type = ContentHintUnionTypeContentHint9
		return nil
	}

	var contentHint10 ContentHint10 = ContentHint10{}
	if err := utils.UnmarshalJSON(data, &contentHint10, "", true, true); err == nil {
		u.ContentHint10 = &contentHint10
		u.Type = ContentHintUnionTypeContentHint10
		return nil
	}

	var eleven Eleven = Eleven{}
	if err := utils.UnmarshalJSON(data, &eleven, "", true, true); err == nil {
		u.Eleven = &eleven
		u.Type = ContentHintUnionTypeEleven
		return nil
	}

	var twelve Twelve = Twelve{}
	if err := utils.UnmarshalJSON(data, &twelve, "", true, true); err == nil {
		u.Twelve = &twelve
		u.Type = ContentHintUnionTypeTwelve
		return nil
	}

	var thirteen Thirteen = Thirteen{}
	if err := utils.UnmarshalJSON(data, &thirteen, "", true, true); err == nil {
		u.Thirteen = &thirteen
		u.Type = ContentHintUnionTypeThirteen
		return nil
	}

	var fourteen Fourteen = Fourteen{}
	if err := utils.UnmarshalJSON(data, &fourteen, "", true, true); err == nil {
		u.Fourteen = &fourteen
		u.Type = ContentHintUnionTypeFourteen
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ContentHint", string(data))
}

func (u ContentHint) MarshalJSON() ([]byte, error) {
	if u.ContentHint1 != nil {
		return utils.MarshalJSON(u.ContentHint1, "", true)
	}

	if u.ContentHint2 != nil {
		return utils.MarshalJSON(u.ContentHint2, "", true)
	}

	if u.ContentHint3 != nil {
		return utils.MarshalJSON(u.ContentHint3, "", true)
	}

	if u.ContentHint4 != nil {
		return utils.MarshalJSON(u.ContentHint4, "", true)
	}

	if u.ContentHint5 != nil {
		return utils.MarshalJSON(u.ContentHint5, "", true)
	}

	if u.ContentHint6 != nil {
		return utils.MarshalJSON(u.ContentHint6, "", true)
	}

	if u.ContentHint7 != nil {
		return utils.MarshalJSON(u.ContentHint7, "", true)
	}

	if u.ContentHint8 != nil {
		return utils.MarshalJSON(u.ContentHint8, "", true)
	}

	if u.ContentHint9 != nil {
		return utils.MarshalJSON(u.ContentHint9, "", true)
	}

	if u.ContentHint10 != nil {
		return utils.MarshalJSON(u.ContentHint10, "", true)
	}

	if u.Eleven != nil {
		return utils.MarshalJSON(u.Eleven, "", true)
	}

	if u.Twelve != nil {
		return utils.MarshalJSON(u.Twelve, "", true)
	}

	if u.Thirteen != nil {
		return utils.MarshalJSON(u.Thirteen, "", true)
	}

	if u.Fourteen != nil {
		return utils.MarshalJSON(u.Fourteen, "", true)
	}

	return nil, errors.New("could not marshal union type ContentHint: all fields are null")
}

type EditProjectEnvProjectsResponseType string

const (
	EditProjectEnvProjectsResponseTypeFlagsSecret EditProjectEnvProjectsResponseType = "flags-secret"
)

func (e EditProjectEnvProjectsResponseType) ToPointer() *EditProjectEnvProjectsResponseType {
	return &e
}
func (e *EditProjectEnvProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = EditProjectEnvProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvProjectsResponseType: %v", v)
	}
}

// InternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type InternalContentHint struct {
	Type EditProjectEnvProjectsResponseType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *InternalContentHint) GetType() EditProjectEnvProjectsResponseType {
	if o == nil {
		return EditProjectEnvProjectsResponseType("")
	}
	return o.Type
}

func (o *InternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

// EditProjectEnvResponseBody - The environment variable was successfully edited
type EditProjectEnvResponseBody struct {
	Target            *EditProjectEnvProjectsTarget `json:"target,omitempty"`
	Type              EditProjectEnvProjectsType    `json:"type"`
	ID                *string                       `json:"id,omitempty"`
	Key               string                        `json:"key"`
	Value             string                        `json:"value"`
	ConfigurationID   *string                       `json:"configurationId,omitempty"`
	CreatedAt         *float64                      `json:"createdAt,omitempty"`
	UpdatedAt         *float64                      `json:"updatedAt,omitempty"`
	CreatedBy         *string                       `json:"createdBy,omitempty"`
	UpdatedBy         *string                       `json:"updatedBy,omitempty"`
	GitBranch         *string                       `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                       `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                       `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *ContentHint                  `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *InternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` is decrypted.
	Decrypted           *bool   `json:"decrypted,omitempty"`
	Comment             *string `json:"comment,omitempty"`
	CustomEnvironmentID *string `json:"customEnvironmentId,omitempty"`
}

func (o *EditProjectEnvResponseBody) GetTarget() *EditProjectEnvProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvResponseBody) GetType() EditProjectEnvProjectsType {
	if o == nil {
		return EditProjectEnvProjectsType("")
	}
	return o.Type
}

func (o *EditProjectEnvResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EditProjectEnvResponseBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EditProjectEnvResponseBody) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *EditProjectEnvResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *EditProjectEnvResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EditProjectEnvResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *EditProjectEnvResponseBody) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *EditProjectEnvResponseBody) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *EditProjectEnvResponseBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvResponseBody) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *EditProjectEnvResponseBody) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *EditProjectEnvResponseBody) GetContentHint() *ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *EditProjectEnvResponseBody) GetInternalContentHint() *InternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *EditProjectEnvResponseBody) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *EditProjectEnvResponseBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EditProjectEnvResponseBody) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

type EditProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was successfully edited
	Object *EditProjectEnvResponseBody
}

func (o *EditProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *EditProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *EditProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *EditProjectEnvResponse) GetObject() *EditProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
