// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
	"time"
)

type GetAliasRequest struct {
	// Get the alias only if it was created after the provided timestamp
	From *int64 `queryParam:"style=form,explode=true,name=from"`
	// The alias or alias ID to be retrieved
	IDOrAlias string `pathParam:"style=simple,explode=false,name=idOrAlias"`
	// Get the alias only if it is assigned to the provided project ID
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Get the alias only if it was created after this JavaScript timestamp
	Since *int64 `queryParam:"style=form,explode=true,name=since"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Get the alias only if it was created before this JavaScript timestamp
	Until *int64 `queryParam:"style=form,explode=true,name=until"`
}

func (o *GetAliasRequest) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetAliasRequest) GetIDOrAlias() string {
	if o == nil {
		return ""
	}
	return o.IDOrAlias
}

func (o *GetAliasRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetAliasRequest) GetSince() *int64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetAliasRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetAliasRequest) GetUntil() *int64 {
	if o == nil {
		return nil
	}
	return o.Until
}

// Creator - Information of the user who created the alias
type Creator struct {
	// Email of the user who created the alias
	Email string `json:"email"`
	// ID of the user who created the alias
	UID string `json:"uid"`
	// Username of the user who created the alias
	Username string `json:"username"`
}

func (o *Creator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Creator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *Creator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// Deployment - A map with the deployment ID, URL and metadata
type Deployment struct {
	// The deployment unique identifier
	ID string `json:"id"`
	// The deployment metadata
	Meta *string `json:"meta,omitempty"`
	// The deployment unique URL
	URL string `json:"url"`
}

func (o *Deployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Deployment) GetMeta() *string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *Deployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type Access string

const (
	AccessRequested Access = "requested"
	AccessGranted   Access = "granted"
)

func (e Access) ToPointer() *Access {
	return &e
}

func (e *Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Access: %v", v)
	}
}

type GetAliasScope string

const (
	GetAliasScopeUser GetAliasScope = "user"
)

func (e GetAliasScope) ToPointer() *GetAliasScope {
	return &e
}

func (e *GetAliasScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetAliasScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasScope: %v", v)
	}
}

// GetAlias2 - The protection bypass for the alias
type GetAlias2 struct {
	Access        Access        `json:"access"`
	CreatedAt     int64         `json:"createdAt"`
	LastUpdatedAt int64         `json:"lastUpdatedAt"`
	LastUpdatedBy string        `json:"lastUpdatedBy"`
	Scope         GetAliasScope `json:"scope"`
}

func (o *GetAlias2) GetAccess() Access {
	if o == nil {
		return Access("")
	}
	return o.Access
}

func (o *GetAlias2) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetAlias2) GetLastUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.LastUpdatedAt
}

func (o *GetAlias2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *GetAlias2) GetScope() GetAliasScope {
	if o == nil {
		return GetAliasScope("")
	}
	return o.Scope
}

type Scope string

const (
	ScopeShareableLink    Scope = "shareable-link"
	ScopeAutomationBypass Scope = "automation-bypass"
)

func (e Scope) ToPointer() *Scope {
	return &e
}

func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		fallthrough
	case "automation-bypass":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

// GetAlias1 - The protection bypass for the alias
type GetAlias1 struct {
	CreatedAt int64  `json:"createdAt"`
	CreatedBy string `json:"createdBy"`
	Scope     Scope  `json:"scope"`
}

func (o *GetAlias1) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *GetAlias1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetAlias1) GetScope() Scope {
	if o == nil {
		return Scope("")
	}
	return o.Scope
}

type ProtectionBypassType string

const (
	ProtectionBypassTypeGetAlias1 ProtectionBypassType = "getAlias_1"
	ProtectionBypassTypeGetAlias2 ProtectionBypassType = "getAlias_2"
)

type ProtectionBypass struct {
	GetAlias1 *GetAlias1
	GetAlias2 *GetAlias2

	Type ProtectionBypassType
}

func CreateProtectionBypassGetAlias1(getAlias1 GetAlias1) ProtectionBypass {
	typ := ProtectionBypassTypeGetAlias1

	return ProtectionBypass{
		GetAlias1: &getAlias1,
		Type:      typ,
	}
}

func CreateProtectionBypassGetAlias2(getAlias2 GetAlias2) ProtectionBypass {
	typ := ProtectionBypassTypeGetAlias2

	return ProtectionBypass{
		GetAlias2: &getAlias2,
		Type:      typ,
	}
}

func (u *ProtectionBypass) UnmarshalJSON(data []byte) error {

	getAlias1 := GetAlias1{}
	if err := utils.UnmarshalJSON(data, &getAlias1, "", true, true); err == nil {
		u.GetAlias1 = &getAlias1
		u.Type = ProtectionBypassTypeGetAlias1
		return nil
	}

	getAlias2 := GetAlias2{}
	if err := utils.UnmarshalJSON(data, &getAlias2, "", true, true); err == nil {
		u.GetAlias2 = &getAlias2
		u.Type = ProtectionBypassTypeGetAlias2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.GetAlias1 != nil {
		return utils.MarshalJSON(u.GetAlias1, "", true)
	}

	if u.GetAlias2 != nil {
		return utils.MarshalJSON(u.GetAlias2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetAliasRedirectStatusCode - Status code to be used on redirect
type GetAliasRedirectStatusCode int64

const (
	GetAliasRedirectStatusCodeThreeHundredAndOne   GetAliasRedirectStatusCode = 301
	GetAliasRedirectStatusCodeThreeHundredAndTwo   GetAliasRedirectStatusCode = 302
	GetAliasRedirectStatusCodeThreeHundredAndSeven GetAliasRedirectStatusCode = 307
	GetAliasRedirectStatusCodeThreeHundredAndEight GetAliasRedirectStatusCode = 308
)

func (e GetAliasRedirectStatusCode) ToPointer() *GetAliasRedirectStatusCode {
	return &e
}

func (e *GetAliasRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 307:
		fallthrough
	case 308:
		*e = GetAliasRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasRedirectStatusCode: %v", v)
	}
}

// GetAliasResponseBody - The alias information
type GetAliasResponseBody struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The date when the alias was created in milliseconds since the UNIX epoch
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// Information of the user who created the alias
	Creator *Creator `json:"creator,omitempty"`
	// The date when the alias was deleted in milliseconds since the UNIX epoch
	DeletedAt *int64 `json:"deletedAt,omitempty"`
	// A map with the deployment ID, URL and metadata
	Deployment *Deployment `json:"deployment,omitempty"`
	// The deployment ID
	DeploymentID *string `json:"deploymentId"`
	// The unique identifier of the project
	ProjectID *string `json:"projectId"`
	// The protection bypass for the alias
	ProtectionBypass map[string]ProtectionBypass `json:"protectionBypass,omitempty"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// Status code to be used on redirect
	RedirectStatusCode *GetAliasRedirectStatusCode `json:"redirectStatusCode,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
	// The date when the alias was updated in milliseconds since the UNIX epoch
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
}

func (g GetAliasResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAliasResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAliasResponseBody) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *GetAliasResponseBody) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *GetAliasResponseBody) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetAliasResponseBody) GetCreator() *Creator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetAliasResponseBody) GetDeletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetAliasResponseBody) GetDeployment() *Deployment {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetAliasResponseBody) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetAliasResponseBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetAliasResponseBody) GetProtectionBypass() map[string]ProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *GetAliasResponseBody) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetAliasResponseBody) GetRedirectStatusCode() *GetAliasRedirectStatusCode {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetAliasResponseBody) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetAliasResponseBody) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type GetAliasResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The alias information
	Object *GetAliasResponseBody
}

func (o *GetAliasResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAliasResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAliasResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAliasResponse) GetObject() *GetAliasResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
