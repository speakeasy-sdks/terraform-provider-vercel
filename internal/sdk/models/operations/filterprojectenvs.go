// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

// Decrypt - If true, the environment variable value will be decrypted
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type Decrypt string

const (
	DecryptTrue  Decrypt = "true"
	DecryptFalse Decrypt = "false"
)

func (e Decrypt) ToPointer() *Decrypt {
	return &e
}

func (e *Decrypt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Decrypt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Decrypt: %v", v)
	}
}

type FilterProjectEnvsRequest struct {
	// If true, the environment variable value will be decrypted
	Decrypt *Decrypt `queryParam:"style=form,explode=true,name=decrypt"`
	// If defined, the git branch of the environment variable to filter the results
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The source that is calling the endpoint.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *FilterProjectEnvsRequest) GetDecrypt() *Decrypt {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *FilterProjectEnvsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *FilterProjectEnvsRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *FilterProjectEnvsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintTypePostgresDatabase FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType = "postgres-database"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse12 struct {
	StoreID string                                                                              `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse12) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHintType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsTypePostgresPassword FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType = "postgres-password"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse11 struct {
	StoreID string                                                                   `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse11) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3TypePostgresHost FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type = "postgres-host"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse10 struct {
	StoreID string                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse10) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9TypePostgresUser FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse9 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse9) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8TypePostgresPrismaURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse8 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse8) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7TypePostgresURLNonPooling FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse7 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse7) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6TypePostgresURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse6 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse6) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5TypeBlobReadWriteToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type = "blob-read-write-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse5 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse5) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint5Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4TypeRedisRestAPIReadOnlyToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse4 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse4) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint4Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3TypeRedisRestAPIToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse2003 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse2003) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse2003) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint3Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2TypeRedisRestAPIURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type = "redis-rest-api-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint2Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1TypeRedisURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type = "redis-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody3EnvsContentHint1Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponseContentHintType string

const (
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_200_ApplicationJSON_responseBody_1"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_200_ApplicationJSON_responseBody_2"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse2003                            FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_200_3"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse4                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_4"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse5                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_5"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse6                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_6"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse7                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_7"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse8                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_8"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse9                               FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_9"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse10                              FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_10"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse11                              FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_11"
	FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse12                              FilterProjectEnvsProjectsResponseContentHintType = "filterProjectEnvs_projects_response_12"
)

type FilterProjectEnvsProjectsResponseContentHint struct {
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2
	FilterProjectEnvsProjectsResponse2003                            *FilterProjectEnvsProjectsResponse2003
	FilterProjectEnvsProjectsResponse4                               *FilterProjectEnvsProjectsResponse4
	FilterProjectEnvsProjectsResponse5                               *FilterProjectEnvsProjectsResponse5
	FilterProjectEnvsProjectsResponse6                               *FilterProjectEnvsProjectsResponse6
	FilterProjectEnvsProjectsResponse7                               *FilterProjectEnvsProjectsResponse7
	FilterProjectEnvsProjectsResponse8                               *FilterProjectEnvsProjectsResponse8
	FilterProjectEnvsProjectsResponse9                               *FilterProjectEnvsProjectsResponse9
	FilterProjectEnvsProjectsResponse10                              *FilterProjectEnvsProjectsResponse10
	FilterProjectEnvsProjectsResponse11                              *FilterProjectEnvsProjectsResponse11
	FilterProjectEnvsProjectsResponse12                              *FilterProjectEnvsProjectsResponse12

	Type FilterProjectEnvsProjectsResponseContentHintType
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1(filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1: &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2(filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2: &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse2003(filterProjectEnvsProjectsResponse2003 FilterProjectEnvsProjectsResponse2003) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse2003

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse2003: &filterProjectEnvsProjectsResponse2003,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse4(filterProjectEnvsProjectsResponse4 FilterProjectEnvsProjectsResponse4) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse4

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse4: &filterProjectEnvsProjectsResponse4,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse5(filterProjectEnvsProjectsResponse5 FilterProjectEnvsProjectsResponse5) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse5

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse5: &filterProjectEnvsProjectsResponse5,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse6(filterProjectEnvsProjectsResponse6 FilterProjectEnvsProjectsResponse6) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse6

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse6: &filterProjectEnvsProjectsResponse6,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse7(filterProjectEnvsProjectsResponse7 FilterProjectEnvsProjectsResponse7) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse7

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse7: &filterProjectEnvsProjectsResponse7,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse8(filterProjectEnvsProjectsResponse8 FilterProjectEnvsProjectsResponse8) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse8

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse8: &filterProjectEnvsProjectsResponse8,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse9(filterProjectEnvsProjectsResponse9 FilterProjectEnvsProjectsResponse9) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse9

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse9: &filterProjectEnvsProjectsResponse9,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse10(filterProjectEnvsProjectsResponse10 FilterProjectEnvsProjectsResponse10) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse10

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse10: &filterProjectEnvsProjectsResponse10,
		Type:                                typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse11(filterProjectEnvsProjectsResponse11 FilterProjectEnvsProjectsResponse11) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse11

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse11: &filterProjectEnvsProjectsResponse11,
		Type:                                typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseContentHintFilterProjectEnvsProjectsResponse12(filterProjectEnvsProjectsResponse12 FilterProjectEnvsProjectsResponse12) FilterProjectEnvsProjectsResponseContentHint {
	typ := FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse12

	return FilterProjectEnvsProjectsResponseContentHint{
		FilterProjectEnvsProjectsResponse12: &filterProjectEnvsProjectsResponse12,
		Type:                                typ,
	}
}

func (u *FilterProjectEnvsProjectsResponseContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 := FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 = &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1
		return nil
	}

	filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 := FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 = &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2
		return nil
	}

	filterProjectEnvsProjectsResponse2003 := FilterProjectEnvsProjectsResponse2003{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse2003, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse2003 = &filterProjectEnvsProjectsResponse2003
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse2003
		return nil
	}

	filterProjectEnvsProjectsResponse4 := FilterProjectEnvsProjectsResponse4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse4, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse4 = &filterProjectEnvsProjectsResponse4
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse4
		return nil
	}

	filterProjectEnvsProjectsResponse5 := FilterProjectEnvsProjectsResponse5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse5, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse5 = &filterProjectEnvsProjectsResponse5
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse5
		return nil
	}

	filterProjectEnvsProjectsResponse6 := FilterProjectEnvsProjectsResponse6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse6, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse6 = &filterProjectEnvsProjectsResponse6
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse6
		return nil
	}

	filterProjectEnvsProjectsResponse7 := FilterProjectEnvsProjectsResponse7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse7, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse7 = &filterProjectEnvsProjectsResponse7
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse7
		return nil
	}

	filterProjectEnvsProjectsResponse8 := FilterProjectEnvsProjectsResponse8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse8, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse8 = &filterProjectEnvsProjectsResponse8
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse8
		return nil
	}

	filterProjectEnvsProjectsResponse9 := FilterProjectEnvsProjectsResponse9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse9, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse9 = &filterProjectEnvsProjectsResponse9
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse9
		return nil
	}

	filterProjectEnvsProjectsResponse10 := FilterProjectEnvsProjectsResponse10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse10, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse10 = &filterProjectEnvsProjectsResponse10
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse10
		return nil
	}

	filterProjectEnvsProjectsResponse11 := FilterProjectEnvsProjectsResponse11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse11, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse11 = &filterProjectEnvsProjectsResponse11
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse11
		return nil
	}

	filterProjectEnvsProjectsResponse12 := FilterProjectEnvsProjectsResponse12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse12, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse12 = &filterProjectEnvsProjectsResponse12
		u.Type = FilterProjectEnvsProjectsResponseContentHintTypeFilterProjectEnvsProjectsResponse12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsProjectsResponseContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse2003 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse2003, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse4, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse5, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse6, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse7, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse8, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse9, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse10, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse11, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32Production  FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 = "production"
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32Preview     FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 = "preview"
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32Development FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 = "development"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31Production  FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 = "production"
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31Preview     FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 = "preview"
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31Development FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 = "development"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31: %v", v)
	}
}

type FilterProjectEnvsProjectsResponseTargetType string

const (
	FilterProjectEnvsProjectsResponseTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 FilterProjectEnvsProjectsResponseTargetType = "arrayOffilterProjectEnvs_projects_response_200_ApplicationJSON_responseBody_3_1"
	FilterProjectEnvsProjectsResponseTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32        FilterProjectEnvsProjectsResponseTargetType = "filterProjectEnvs_projects_response_200_ApplicationJSON_responseBody_3_2"
)

type FilterProjectEnvsProjectsResponseTarget struct {
	ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 []FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32        *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32

	Type FilterProjectEnvsProjectsResponseTargetType
}

func CreateFilterProjectEnvsProjectsResponseTargetArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31(arrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 []FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31) FilterProjectEnvsProjectsResponseTarget {
	typ := FilterProjectEnvsProjectsResponseTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31

	return FilterProjectEnvsProjectsResponseTarget{
		ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31: arrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31,
		Type: typ,
	}
}

func CreateFilterProjectEnvsProjectsResponseTargetFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32(filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32) FilterProjectEnvsProjectsResponseTarget {
	typ := FilterProjectEnvsProjectsResponseTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32

	return FilterProjectEnvsProjectsResponseTarget{
		FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32: &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32,
		Type: typ,
	}
}

func (u *FilterProjectEnvsProjectsResponseTarget) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 := []FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 = arrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31
		u.Type = FilterProjectEnvsProjectsResponseTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31
		return nil
	}

	filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 := FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 = &filterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32
		u.Type = FilterProjectEnvsProjectsResponseTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsProjectsResponseTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody31, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody32, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsProjectsResponseType string

const (
	FilterProjectEnvsProjectsResponseTypeSecret    FilterProjectEnvsProjectsResponseType = "secret"
	FilterProjectEnvsProjectsResponseTypeSystem    FilterProjectEnvsProjectsResponseType = "system"
	FilterProjectEnvsProjectsResponseTypeEncrypted FilterProjectEnvsProjectsResponseType = "encrypted"
	FilterProjectEnvsProjectsResponseTypePlain     FilterProjectEnvsProjectsResponseType = "plain"
	FilterProjectEnvsProjectsResponseTypeSensitive FilterProjectEnvsProjectsResponseType = "sensitive"
)

func (e FilterProjectEnvsProjectsResponseType) ToPointer() *FilterProjectEnvsProjectsResponseType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvsProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponseType: %v", v)
	}
}

type FilterProjectEnvsEnvs struct {
	ConfigurationID *string                                       `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvsProjectsResponseContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                        `json:"createdAt,omitempty"`
	CreatedBy       *string                                       `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                                    `json:"decrypted,omitempty"`
	EdgeConfigID      *string                                  `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                  `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                                  `json:"gitBranch,omitempty"`
	ID                *string                                  `json:"id,omitempty"`
	Key               *string                                  `json:"key,omitempty"`
	System            *bool                                    `json:"system,omitempty"`
	Target            *FilterProjectEnvsProjectsResponseTarget `json:"target,omitempty"`
	Type              *FilterProjectEnvsProjectsResponseType   `json:"type,omitempty"`
	UpdatedAt         *int64                                   `json:"updatedAt,omitempty"`
	UpdatedBy         *string                                  `json:"updatedBy,omitempty"`
	Value             *string                                  `json:"value,omitempty"`
}

func (o *FilterProjectEnvsEnvs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvsEnvs) GetContentHint() *FilterProjectEnvsProjectsResponseContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvsEnvs) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvsEnvs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvsEnvs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvsEnvs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvsEnvs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvsEnvs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsEnvs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvsEnvs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvsEnvs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *FilterProjectEnvsEnvs) GetTarget() *FilterProjectEnvsProjectsResponseTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvsEnvs) GetType() *FilterProjectEnvsProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvsEnvs) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvsEnvs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvsEnvs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// FilterProjectEnvs3 - The list of environment variables for the given project
type FilterProjectEnvs3 struct {
	Envs []FilterProjectEnvsEnvs `json:"envs"`
}

func (o *FilterProjectEnvs3) GetEnvs() []FilterProjectEnvsEnvs {
	if o == nil {
		return []FilterProjectEnvsEnvs{}
	}
	return o.Envs
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintTypePostgresDatabase FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType = "postgres-database"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType: %v", v)
	}
}

type FilterProjectEnvsProjects12 struct {
	StoreID string                                                                              `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType `json:"type"`
}

func (o *FilterProjectEnvsProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects12) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHintType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsTypePostgresPassword FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType = "postgres-password"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType: %v", v)
	}
}

type FilterProjectEnvsProjects11 struct {
	StoreID string                                                                   `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType `json:"type"`
}

func (o *FilterProjectEnvsProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects11) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2TypePostgresHost FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type = "postgres-host"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type FilterProjectEnvsProjects10 struct {
	StoreID string                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type `json:"type"`
}

func (o *FilterProjectEnvsProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects10) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9TypePostgresUser FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type: %v", v)
	}
}

type FilterProjectEnvsProjects9 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvsProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects9) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8TypePostgresPrismaURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type: %v", v)
	}
}

type FilterProjectEnvsProjects8 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvsProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects8) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7TypePostgresURLNonPooling FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type: %v", v)
	}
}

type FilterProjectEnvsProjects7 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvsProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects7) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6TypePostgresURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type: %v", v)
	}
}

type FilterProjectEnvsProjects6 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvsProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects6) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5TypeBlobReadWriteToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type = "blob-read-write-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type: %v", v)
	}
}

type FilterProjectEnvsProjects5 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type `json:"type"`
}

func (o *FilterProjectEnvsProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects5) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint5Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4TypeRedisRestAPIReadOnlyToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type: %v", v)
	}
}

type FilterProjectEnvsProjects4 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type `json:"type"`
}

func (o *FilterProjectEnvsProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects4) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint4Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3TypeRedisRestAPIToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse3 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse3) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint3Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2TypeRedisRestAPIURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type = "redis-rest-api-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse2002 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse2002) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse2002) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint2Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1TypeRedisURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type = "redis-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse2001 struct {
	StoreID string                                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type `json:"type"`
}

func (o *FilterProjectEnvsProjectsResponse2001) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjectsResponse2001) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody2EnvsContentHint1Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsContentHintType string

const (
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2001 FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_response_200_1"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2002 FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_response_200_2"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse3    FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_response_3"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects4            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_4"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects5            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_5"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects6            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_6"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects7            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_7"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects8            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_8"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects9            FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_9"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects10           FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_10"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects11           FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_11"
	FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects12           FilterProjectEnvsProjectsContentHintType = "filterProjectEnvs_projects_12"
)

type FilterProjectEnvsProjectsContentHint struct {
	FilterProjectEnvsProjectsResponse2001 *FilterProjectEnvsProjectsResponse2001
	FilterProjectEnvsProjectsResponse2002 *FilterProjectEnvsProjectsResponse2002
	FilterProjectEnvsProjectsResponse3    *FilterProjectEnvsProjectsResponse3
	FilterProjectEnvsProjects4            *FilterProjectEnvsProjects4
	FilterProjectEnvsProjects5            *FilterProjectEnvsProjects5
	FilterProjectEnvsProjects6            *FilterProjectEnvsProjects6
	FilterProjectEnvsProjects7            *FilterProjectEnvsProjects7
	FilterProjectEnvsProjects8            *FilterProjectEnvsProjects8
	FilterProjectEnvsProjects9            *FilterProjectEnvsProjects9
	FilterProjectEnvsProjects10           *FilterProjectEnvsProjects10
	FilterProjectEnvsProjects11           *FilterProjectEnvsProjects11
	FilterProjectEnvsProjects12           *FilterProjectEnvsProjects12

	Type FilterProjectEnvsProjectsContentHintType
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjectsResponse2001(filterProjectEnvsProjectsResponse2001 FilterProjectEnvsProjectsResponse2001) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2001

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjectsResponse2001: &filterProjectEnvsProjectsResponse2001,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjectsResponse2002(filterProjectEnvsProjectsResponse2002 FilterProjectEnvsProjectsResponse2002) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2002

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjectsResponse2002: &filterProjectEnvsProjectsResponse2002,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjectsResponse3(filterProjectEnvsProjectsResponse3 FilterProjectEnvsProjectsResponse3) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse3

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjectsResponse3: &filterProjectEnvsProjectsResponse3,
		Type:                               typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects4(filterProjectEnvsProjects4 FilterProjectEnvsProjects4) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects4

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects4: &filterProjectEnvsProjects4,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects5(filterProjectEnvsProjects5 FilterProjectEnvsProjects5) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects5

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects5: &filterProjectEnvsProjects5,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects6(filterProjectEnvsProjects6 FilterProjectEnvsProjects6) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects6

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects6: &filterProjectEnvsProjects6,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects7(filterProjectEnvsProjects7 FilterProjectEnvsProjects7) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects7

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects7: &filterProjectEnvsProjects7,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects8(filterProjectEnvsProjects8 FilterProjectEnvsProjects8) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects8

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects8: &filterProjectEnvsProjects8,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects9(filterProjectEnvsProjects9 FilterProjectEnvsProjects9) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects9

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects9: &filterProjectEnvsProjects9,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects10(filterProjectEnvsProjects10 FilterProjectEnvsProjects10) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects10

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects10: &filterProjectEnvsProjects10,
		Type:                        typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects11(filterProjectEnvsProjects11 FilterProjectEnvsProjects11) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects11

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects11: &filterProjectEnvsProjects11,
		Type:                        typ,
	}
}

func CreateFilterProjectEnvsProjectsContentHintFilterProjectEnvsProjects12(filterProjectEnvsProjects12 FilterProjectEnvsProjects12) FilterProjectEnvsProjectsContentHint {
	typ := FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects12

	return FilterProjectEnvsProjectsContentHint{
		FilterProjectEnvsProjects12: &filterProjectEnvsProjects12,
		Type:                        typ,
	}
}

func (u *FilterProjectEnvsProjectsContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvsProjectsResponse2001 := FilterProjectEnvsProjectsResponse2001{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse2001, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse2001 = &filterProjectEnvsProjectsResponse2001
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2001
		return nil
	}

	filterProjectEnvsProjectsResponse2002 := FilterProjectEnvsProjectsResponse2002{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse2002, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse2002 = &filterProjectEnvsProjectsResponse2002
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse2002
		return nil
	}

	filterProjectEnvsProjectsResponse3 := FilterProjectEnvsProjectsResponse3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse3, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse3 = &filterProjectEnvsProjectsResponse3
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjectsResponse3
		return nil
	}

	filterProjectEnvsProjects4 := FilterProjectEnvsProjects4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects4, "", true, true); err == nil {
		u.FilterProjectEnvsProjects4 = &filterProjectEnvsProjects4
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects4
		return nil
	}

	filterProjectEnvsProjects5 := FilterProjectEnvsProjects5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects5, "", true, true); err == nil {
		u.FilterProjectEnvsProjects5 = &filterProjectEnvsProjects5
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects5
		return nil
	}

	filterProjectEnvsProjects6 := FilterProjectEnvsProjects6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects6, "", true, true); err == nil {
		u.FilterProjectEnvsProjects6 = &filterProjectEnvsProjects6
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects6
		return nil
	}

	filterProjectEnvsProjects7 := FilterProjectEnvsProjects7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects7, "", true, true); err == nil {
		u.FilterProjectEnvsProjects7 = &filterProjectEnvsProjects7
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects7
		return nil
	}

	filterProjectEnvsProjects8 := FilterProjectEnvsProjects8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects8, "", true, true); err == nil {
		u.FilterProjectEnvsProjects8 = &filterProjectEnvsProjects8
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects8
		return nil
	}

	filterProjectEnvsProjects9 := FilterProjectEnvsProjects9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects9, "", true, true); err == nil {
		u.FilterProjectEnvsProjects9 = &filterProjectEnvsProjects9
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects9
		return nil
	}

	filterProjectEnvsProjects10 := FilterProjectEnvsProjects10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects10, "", true, true); err == nil {
		u.FilterProjectEnvsProjects10 = &filterProjectEnvsProjects10
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects10
		return nil
	}

	filterProjectEnvsProjects11 := FilterProjectEnvsProjects11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects11, "", true, true); err == nil {
		u.FilterProjectEnvsProjects11 = &filterProjectEnvsProjects11
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects11
		return nil
	}

	filterProjectEnvsProjects12 := FilterProjectEnvsProjects12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects12, "", true, true); err == nil {
		u.FilterProjectEnvsProjects12 = &filterProjectEnvsProjects12
		u.Type = FilterProjectEnvsProjectsContentHintTypeFilterProjectEnvsProjects12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse2001, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse2002, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse3, "", true)
	}

	if u.FilterProjectEnvsProjects4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects4, "", true)
	}

	if u.FilterProjectEnvsProjects5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects5, "", true)
	}

	if u.FilterProjectEnvsProjects6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects6, "", true)
	}

	if u.FilterProjectEnvsProjects7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects7, "", true)
	}

	if u.FilterProjectEnvsProjects8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects8, "", true)
	}

	if u.FilterProjectEnvsProjects9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects9, "", true)
	}

	if u.FilterProjectEnvsProjects10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects10, "", true)
	}

	if u.FilterProjectEnvsProjects11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects11, "", true)
	}

	if u.FilterProjectEnvsProjects12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsProjectsResponse200ApplicationJSON2 string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSON2Production  FilterProjectEnvsProjectsResponse200ApplicationJSON2 = "production"
	FilterProjectEnvsProjectsResponse200ApplicationJSON2Preview     FilterProjectEnvsProjectsResponse200ApplicationJSON2 = "preview"
	FilterProjectEnvsProjectsResponse200ApplicationJSON2Development FilterProjectEnvsProjectsResponse200ApplicationJSON2 = "development"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSON2) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSON2 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSON2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSON2: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse200ApplicationJSON1 string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSON1Production  FilterProjectEnvsProjectsResponse200ApplicationJSON1 = "production"
	FilterProjectEnvsProjectsResponse200ApplicationJSON1Preview     FilterProjectEnvsProjectsResponse200ApplicationJSON1 = "preview"
	FilterProjectEnvsProjectsResponse200ApplicationJSON1Development FilterProjectEnvsProjectsResponse200ApplicationJSON1 = "development"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSON1) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSON1 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSON1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSON1: %v", v)
	}
}

type FilterProjectEnvsProjectsTargetType string

const (
	FilterProjectEnvsProjectsTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 FilterProjectEnvsProjectsTargetType = "arrayOffilterProjectEnvs_projects_response_200_ApplicationJSON_1"
	FilterProjectEnvsProjectsTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSON2        FilterProjectEnvsProjectsTargetType = "filterProjectEnvs_projects_response_200_ApplicationJSON_2"
)

type FilterProjectEnvsProjectsTarget struct {
	ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 []FilterProjectEnvsProjectsResponse200ApplicationJSON1
	FilterProjectEnvsProjectsResponse200ApplicationJSON2        *FilterProjectEnvsProjectsResponse200ApplicationJSON2

	Type FilterProjectEnvsProjectsTargetType
}

func CreateFilterProjectEnvsProjectsTargetArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1(arrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 []FilterProjectEnvsProjectsResponse200ApplicationJSON1) FilterProjectEnvsProjectsTarget {
	typ := FilterProjectEnvsProjectsTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1

	return FilterProjectEnvsProjectsTarget{
		ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1: arrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsProjectsTargetFilterProjectEnvsProjectsResponse200ApplicationJSON2(filterProjectEnvsProjectsResponse200ApplicationJSON2 FilterProjectEnvsProjectsResponse200ApplicationJSON2) FilterProjectEnvsProjectsTarget {
	typ := FilterProjectEnvsProjectsTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSON2

	return FilterProjectEnvsProjectsTarget{
		FilterProjectEnvsProjectsResponse200ApplicationJSON2: &filterProjectEnvsProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *FilterProjectEnvsProjectsTarget) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 := []FilterProjectEnvsProjectsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 = arrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1
		u.Type = FilterProjectEnvsProjectsTargetTypeArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1
		return nil
	}

	filterProjectEnvsProjectsResponse200ApplicationJSON2 := FilterProjectEnvsProjectsResponse200ApplicationJSON2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse200ApplicationJSON2 = &filterProjectEnvsProjectsResponse200ApplicationJSON2
		u.Type = FilterProjectEnvsProjectsTargetTypeFilterProjectEnvsProjectsResponse200ApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvsProjectsResponse200ApplicationJSON1, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsProjectsType string

const (
	FilterProjectEnvsProjectsTypeSecret    FilterProjectEnvsProjectsType = "secret"
	FilterProjectEnvsProjectsTypeSystem    FilterProjectEnvsProjectsType = "system"
	FilterProjectEnvsProjectsTypeEncrypted FilterProjectEnvsProjectsType = "encrypted"
	FilterProjectEnvsProjectsTypePlain     FilterProjectEnvsProjectsType = "plain"
	FilterProjectEnvsProjectsTypeSensitive FilterProjectEnvsProjectsType = "sensitive"
)

func (e FilterProjectEnvsProjectsType) ToPointer() *FilterProjectEnvsProjectsType {
	return &e
}

func (e *FilterProjectEnvsProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvsProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsType: %v", v)
	}
}

type Envs struct {
	ConfigurationID *string                               `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvsProjectsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                                `json:"createdAt,omitempty"`
	CreatedBy       *string                               `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                            `json:"decrypted,omitempty"`
	EdgeConfigID      *string                          `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                          `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                          `json:"gitBranch,omitempty"`
	ID                *string                          `json:"id,omitempty"`
	Key               *string                          `json:"key,omitempty"`
	System            *bool                            `json:"system,omitempty"`
	Target            *FilterProjectEnvsProjectsTarget `json:"target,omitempty"`
	Type              *FilterProjectEnvsProjectsType   `json:"type,omitempty"`
	UpdatedAt         *int64                           `json:"updatedAt,omitempty"`
	UpdatedBy         *string                          `json:"updatedBy,omitempty"`
	Value             *string                          `json:"value,omitempty"`
}

func (o *Envs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Envs) GetContentHint() *FilterProjectEnvsProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Envs) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Envs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Envs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Envs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Envs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Envs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Envs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Envs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Envs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *Envs) GetTarget() *FilterProjectEnvsProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Envs) GetType() *FilterProjectEnvsProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Envs) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Envs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Envs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type FilterProjectEnvs2 struct {
	Envs []Envs `json:"envs"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination `json:"pagination"`
}

func (o *FilterProjectEnvs2) GetEnvs() []Envs {
	if o == nil {
		return []Envs{}
	}
	return o.Envs
}

func (o *FilterProjectEnvs2) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12TypePostgresDatabase FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type = "postgres-database"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type: %v", v)
	}
}

type FilterProjectEnvs12 struct {
	StoreID string                                                                            `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type `json:"type"`
}

func (o *FilterProjectEnvs12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs12) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11TypePostgresPassword FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type = "postgres-password"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type: %v", v)
	}
}

type FilterProjectEnvs11 struct {
	StoreID string                                                                            `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type `json:"type"`
}

func (o *FilterProjectEnvs11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs11) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10TypePostgresHost FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type = "postgres-host"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type: %v", v)
	}
}

type FilterProjectEnvs10 struct {
	StoreID string                                                                            `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type `json:"type"`
}

func (o *FilterProjectEnvs10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs10) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9TypePostgresUser FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type = "postgres-user"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type: %v", v)
	}
}

type FilterProjectEnvs9 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type `json:"type"`
}

func (o *FilterProjectEnvs9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs9) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8TypePostgresPrismaURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type: %v", v)
	}
}

type FilterProjectEnvs8 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type `json:"type"`
}

func (o *FilterProjectEnvs8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs8) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7TypePostgresURLNonPooling FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type: %v", v)
	}
}

type FilterProjectEnvs7 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type `json:"type"`
}

func (o *FilterProjectEnvs7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs7) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6TypePostgresURL FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type = "postgres-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type: %v", v)
	}
}

type FilterProjectEnvs6 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type `json:"type"`
}

func (o *FilterProjectEnvs6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs6) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintTypeBlobReadWriteToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType = "blob-read-write-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType: %v", v)
	}
}

type FilterProjectEnvs5 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType `json:"type"`
}

func (o *FilterProjectEnvs5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs5) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1ContentHintType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1TypeRedisRestAPIReadOnlyToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type FilterProjectEnvs4 struct {
	StoreID string                                                               `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type `json:"type"`
}

func (o *FilterProjectEnvs4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvs4) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyTypeRedisRestAPIToken FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType = "redis-rest-api-token"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FilterProjectEnvsProjects3 struct {
	StoreID string                                                              `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *FilterProjectEnvsProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects3) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200ApplicationJSONType string

const (
	FilterProjectEnvsProjectsResponse200ApplicationJSONTypeRedisRestAPIURL FilterProjectEnvsProjectsResponse200ApplicationJSONType = "redis-rest-api-url"
)

func (e FilterProjectEnvsProjectsResponse200ApplicationJSONType) ToPointer() *FilterProjectEnvsProjectsResponse200ApplicationJSONType {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type FilterProjectEnvsProjects2 struct {
	StoreID string                                                  `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200ApplicationJSONType `json:"type"`
}

func (o *FilterProjectEnvsProjects2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects2) GetType() FilterProjectEnvsProjectsResponse200ApplicationJSONType {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

type FilterProjectEnvsProjectsResponse200Type string

const (
	FilterProjectEnvsProjectsResponse200TypeRedisURL FilterProjectEnvsProjectsResponse200Type = "redis-url"
)

func (e FilterProjectEnvsProjectsResponse200Type) ToPointer() *FilterProjectEnvsProjectsResponse200Type {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse200Type: %v", v)
	}
}

type FilterProjectEnvsProjects1 struct {
	StoreID string                                   `json:"storeId"`
	Type    FilterProjectEnvsProjectsResponse200Type `json:"type"`
}

func (o *FilterProjectEnvsProjects1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsProjects1) GetType() FilterProjectEnvsProjectsResponse200Type {
	if o == nil {
		return FilterProjectEnvsProjectsResponse200Type("")
	}
	return o.Type
}

type FilterProjectEnvsContentHintType string

const (
	FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects1 FilterProjectEnvsContentHintType = "filterProjectEnvs_projects_1"
	FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects2 FilterProjectEnvsContentHintType = "filterProjectEnvs_projects_2"
	FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects3 FilterProjectEnvsContentHintType = "filterProjectEnvs_projects_3"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs4         FilterProjectEnvsContentHintType = "filterProjectEnvs_4"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs5         FilterProjectEnvsContentHintType = "filterProjectEnvs_5"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs6         FilterProjectEnvsContentHintType = "filterProjectEnvs_6"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs7         FilterProjectEnvsContentHintType = "filterProjectEnvs_7"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs8         FilterProjectEnvsContentHintType = "filterProjectEnvs_8"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs9         FilterProjectEnvsContentHintType = "filterProjectEnvs_9"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs10        FilterProjectEnvsContentHintType = "filterProjectEnvs_10"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs11        FilterProjectEnvsContentHintType = "filterProjectEnvs_11"
	FilterProjectEnvsContentHintTypeFilterProjectEnvs12        FilterProjectEnvsContentHintType = "filterProjectEnvs_12"
)

type FilterProjectEnvsContentHint struct {
	FilterProjectEnvsProjects1 *FilterProjectEnvsProjects1
	FilterProjectEnvsProjects2 *FilterProjectEnvsProjects2
	FilterProjectEnvsProjects3 *FilterProjectEnvsProjects3
	FilterProjectEnvs4         *FilterProjectEnvs4
	FilterProjectEnvs5         *FilterProjectEnvs5
	FilterProjectEnvs6         *FilterProjectEnvs6
	FilterProjectEnvs7         *FilterProjectEnvs7
	FilterProjectEnvs8         *FilterProjectEnvs8
	FilterProjectEnvs9         *FilterProjectEnvs9
	FilterProjectEnvs10        *FilterProjectEnvs10
	FilterProjectEnvs11        *FilterProjectEnvs11
	FilterProjectEnvs12        *FilterProjectEnvs12

	Type FilterProjectEnvsContentHintType
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvsProjects1(filterProjectEnvsProjects1 FilterProjectEnvsProjects1) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects1

	return FilterProjectEnvsContentHint{
		FilterProjectEnvsProjects1: &filterProjectEnvsProjects1,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvsProjects2(filterProjectEnvsProjects2 FilterProjectEnvsProjects2) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects2

	return FilterProjectEnvsContentHint{
		FilterProjectEnvsProjects2: &filterProjectEnvsProjects2,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvsProjects3(filterProjectEnvsProjects3 FilterProjectEnvsProjects3) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects3

	return FilterProjectEnvsContentHint{
		FilterProjectEnvsProjects3: &filterProjectEnvsProjects3,
		Type:                       typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs4(filterProjectEnvs4 FilterProjectEnvs4) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs4

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs4: &filterProjectEnvs4,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs5(filterProjectEnvs5 FilterProjectEnvs5) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs5

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs5: &filterProjectEnvs5,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs6(filterProjectEnvs6 FilterProjectEnvs6) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs6

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs6: &filterProjectEnvs6,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs7(filterProjectEnvs7 FilterProjectEnvs7) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs7

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs7: &filterProjectEnvs7,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs8(filterProjectEnvs8 FilterProjectEnvs8) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs8

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs8: &filterProjectEnvs8,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs9(filterProjectEnvs9 FilterProjectEnvs9) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs9

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs9: &filterProjectEnvs9,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs10(filterProjectEnvs10 FilterProjectEnvs10) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs10

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs10: &filterProjectEnvs10,
		Type:                typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs11(filterProjectEnvs11 FilterProjectEnvs11) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs11

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs11: &filterProjectEnvs11,
		Type:                typ,
	}
}

func CreateFilterProjectEnvsContentHintFilterProjectEnvs12(filterProjectEnvs12 FilterProjectEnvs12) FilterProjectEnvsContentHint {
	typ := FilterProjectEnvsContentHintTypeFilterProjectEnvs12

	return FilterProjectEnvsContentHint{
		FilterProjectEnvs12: &filterProjectEnvs12,
		Type:                typ,
	}
}

func (u *FilterProjectEnvsContentHint) UnmarshalJSON(data []byte) error {

	filterProjectEnvsProjects1 := FilterProjectEnvsProjects1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects1, "", true, true); err == nil {
		u.FilterProjectEnvsProjects1 = &filterProjectEnvsProjects1
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects1
		return nil
	}

	filterProjectEnvsProjects2 := FilterProjectEnvsProjects2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects2, "", true, true); err == nil {
		u.FilterProjectEnvsProjects2 = &filterProjectEnvsProjects2
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects2
		return nil
	}

	filterProjectEnvsProjects3 := FilterProjectEnvsProjects3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjects3, "", true, true); err == nil {
		u.FilterProjectEnvsProjects3 = &filterProjectEnvsProjects3
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvsProjects3
		return nil
	}

	filterProjectEnvs4 := FilterProjectEnvs4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs4, "", true, true); err == nil {
		u.FilterProjectEnvs4 = &filterProjectEnvs4
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs4
		return nil
	}

	filterProjectEnvs5 := FilterProjectEnvs5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs5, "", true, true); err == nil {
		u.FilterProjectEnvs5 = &filterProjectEnvs5
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs5
		return nil
	}

	filterProjectEnvs6 := FilterProjectEnvs6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs6, "", true, true); err == nil {
		u.FilterProjectEnvs6 = &filterProjectEnvs6
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs6
		return nil
	}

	filterProjectEnvs7 := FilterProjectEnvs7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs7, "", true, true); err == nil {
		u.FilterProjectEnvs7 = &filterProjectEnvs7
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs7
		return nil
	}

	filterProjectEnvs8 := FilterProjectEnvs8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs8, "", true, true); err == nil {
		u.FilterProjectEnvs8 = &filterProjectEnvs8
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs8
		return nil
	}

	filterProjectEnvs9 := FilterProjectEnvs9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs9, "", true, true); err == nil {
		u.FilterProjectEnvs9 = &filterProjectEnvs9
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs9
		return nil
	}

	filterProjectEnvs10 := FilterProjectEnvs10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs10, "", true, true); err == nil {
		u.FilterProjectEnvs10 = &filterProjectEnvs10
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs10
		return nil
	}

	filterProjectEnvs11 := FilterProjectEnvs11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs11, "", true, true); err == nil {
		u.FilterProjectEnvs11 = &filterProjectEnvs11
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs11
		return nil
	}

	filterProjectEnvs12 := FilterProjectEnvs12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs12, "", true, true); err == nil {
		u.FilterProjectEnvs12 = &filterProjectEnvs12
		u.Type = FilterProjectEnvsContentHintTypeFilterProjectEnvs12
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsProjects1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects1, "", true)
	}

	if u.FilterProjectEnvsProjects2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects2, "", true)
	}

	if u.FilterProjectEnvsProjects3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjects3, "", true)
	}

	if u.FilterProjectEnvs4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs4, "", true)
	}

	if u.FilterProjectEnvs5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs5, "", true)
	}

	if u.FilterProjectEnvs6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs6, "", true)
	}

	if u.FilterProjectEnvs7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs7, "", true)
	}

	if u.FilterProjectEnvs8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs8, "", true)
	}

	if u.FilterProjectEnvs9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs9, "", true)
	}

	if u.FilterProjectEnvs10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs10, "", true)
	}

	if u.FilterProjectEnvs11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs11, "", true)
	}

	if u.FilterProjectEnvs12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs12, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsProjectsResponse2 string

const (
	FilterProjectEnvsProjectsResponse2Production  FilterProjectEnvsProjectsResponse2 = "production"
	FilterProjectEnvsProjectsResponse2Preview     FilterProjectEnvsProjectsResponse2 = "preview"
	FilterProjectEnvsProjectsResponse2Development FilterProjectEnvsProjectsResponse2 = "development"
)

func (e FilterProjectEnvsProjectsResponse2) ToPointer() *FilterProjectEnvsProjectsResponse2 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse2: %v", v)
	}
}

type FilterProjectEnvsProjectsResponse1 string

const (
	FilterProjectEnvsProjectsResponse1Production  FilterProjectEnvsProjectsResponse1 = "production"
	FilterProjectEnvsProjectsResponse1Preview     FilterProjectEnvsProjectsResponse1 = "preview"
	FilterProjectEnvsProjectsResponse1Development FilterProjectEnvsProjectsResponse1 = "development"
)

func (e FilterProjectEnvsProjectsResponse1) ToPointer() *FilterProjectEnvsProjectsResponse1 {
	return &e
}

func (e *FilterProjectEnvsProjectsResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsProjectsResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsProjectsResponse1: %v", v)
	}
}

type FilterProjectEnvsTargetType string

const (
	FilterProjectEnvsTargetTypeArrayOffilterProjectEnvsProjectsResponse1 FilterProjectEnvsTargetType = "arrayOffilterProjectEnvs_projects_response_1"
	FilterProjectEnvsTargetTypeFilterProjectEnvsProjectsResponse2        FilterProjectEnvsTargetType = "filterProjectEnvs_projects_response_2"
)

type FilterProjectEnvsTarget struct {
	ArrayOffilterProjectEnvsProjectsResponse1 []FilterProjectEnvsProjectsResponse1
	FilterProjectEnvsProjectsResponse2        *FilterProjectEnvsProjectsResponse2

	Type FilterProjectEnvsTargetType
}

func CreateFilterProjectEnvsTargetArrayOffilterProjectEnvsProjectsResponse1(arrayOffilterProjectEnvsProjectsResponse1 []FilterProjectEnvsProjectsResponse1) FilterProjectEnvsTarget {
	typ := FilterProjectEnvsTargetTypeArrayOffilterProjectEnvsProjectsResponse1

	return FilterProjectEnvsTarget{
		ArrayOffilterProjectEnvsProjectsResponse1: arrayOffilterProjectEnvsProjectsResponse1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsTargetFilterProjectEnvsProjectsResponse2(filterProjectEnvsProjectsResponse2 FilterProjectEnvsProjectsResponse2) FilterProjectEnvsTarget {
	typ := FilterProjectEnvsTargetTypeFilterProjectEnvsProjectsResponse2

	return FilterProjectEnvsTarget{
		FilterProjectEnvsProjectsResponse2: &filterProjectEnvsProjectsResponse2,
		Type:                               typ,
	}
}

func (u *FilterProjectEnvsTarget) UnmarshalJSON(data []byte) error {

	arrayOffilterProjectEnvsProjectsResponse1 := []FilterProjectEnvsProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &arrayOffilterProjectEnvsProjectsResponse1, "", true, true); err == nil {
		u.ArrayOffilterProjectEnvsProjectsResponse1 = arrayOffilterProjectEnvsProjectsResponse1
		u.Type = FilterProjectEnvsTargetTypeArrayOffilterProjectEnvsProjectsResponse1
		return nil
	}

	filterProjectEnvsProjectsResponse2 := FilterProjectEnvsProjectsResponse2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsProjectsResponse2, "", true, true); err == nil {
		u.FilterProjectEnvsProjectsResponse2 = &filterProjectEnvsProjectsResponse2
		u.Type = FilterProjectEnvsTargetTypeFilterProjectEnvsProjectsResponse2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOffilterProjectEnvsProjectsResponse1 != nil {
		return utils.MarshalJSON(u.ArrayOffilterProjectEnvsProjectsResponse1, "", true)
	}

	if u.FilterProjectEnvsProjectsResponse2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsType string

const (
	FilterProjectEnvsTypeSecret    FilterProjectEnvsType = "secret"
	FilterProjectEnvsTypeSystem    FilterProjectEnvsType = "system"
	FilterProjectEnvsTypeEncrypted FilterProjectEnvsType = "encrypted"
	FilterProjectEnvsTypePlain     FilterProjectEnvsType = "plain"
	FilterProjectEnvsTypeSensitive FilterProjectEnvsType = "sensitive"
)

func (e FilterProjectEnvsType) ToPointer() *FilterProjectEnvsType {
	return &e
}

func (e *FilterProjectEnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = FilterProjectEnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsType: %v", v)
	}
}

type FilterProjectEnvs1 struct {
	ConfigurationID *string                       `json:"configurationId,omitempty"`
	ContentHint     *FilterProjectEnvsContentHint `json:"contentHint,omitempty"`
	CreatedAt       *int64                        `json:"createdAt,omitempty"`
	CreatedBy       *string                       `json:"createdBy,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool                    `json:"decrypted,omitempty"`
	EdgeConfigID      *string                  `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                  `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string                  `json:"gitBranch,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Key               *string                  `json:"key,omitempty"`
	System            *bool                    `json:"system,omitempty"`
	Target            *FilterProjectEnvsTarget `json:"target,omitempty"`
	Type              *FilterProjectEnvsType   `json:"type,omitempty"`
	UpdatedAt         *int64                   `json:"updatedAt,omitempty"`
	UpdatedBy         *string                  `json:"updatedBy,omitempty"`
	Value             *string                  `json:"value,omitempty"`
}

func (o *FilterProjectEnvs1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvs1) GetContentHint() *FilterProjectEnvsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvs1) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvs1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvs1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvs1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvs1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvs1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvs1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvs1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvs1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *FilterProjectEnvs1) GetTarget() *FilterProjectEnvsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvs1) GetType() *FilterProjectEnvsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvs1) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvs1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvs1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type FilterProjectEnvsResponseBodyType string

const (
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvs1 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_1"
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvs2 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_2"
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvs3 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_3"
)

// FilterProjectEnvsResponseBody - The list of environment variables for the given project
type FilterProjectEnvsResponseBody struct {
	FilterProjectEnvs1 *FilterProjectEnvs1
	FilterProjectEnvs2 *FilterProjectEnvs2
	FilterProjectEnvs3 *FilterProjectEnvs3

	Type FilterProjectEnvsResponseBodyType
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvs1(filterProjectEnvs1 FilterProjectEnvs1) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvs1

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvs1: &filterProjectEnvs1,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvs2(filterProjectEnvs2 FilterProjectEnvs2) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvs2

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvs2: &filterProjectEnvs2,
		Type:               typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvs3(filterProjectEnvs3 FilterProjectEnvs3) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvs3

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvs3: &filterProjectEnvs3,
		Type:               typ,
	}
}

func (u *FilterProjectEnvsResponseBody) UnmarshalJSON(data []byte) error {

	filterProjectEnvs3 := FilterProjectEnvs3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs3, "", true, true); err == nil {
		u.FilterProjectEnvs3 = &filterProjectEnvs3
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvs3
		return nil
	}

	filterProjectEnvs2 := FilterProjectEnvs2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs2, "", true, true); err == nil {
		u.FilterProjectEnvs2 = &filterProjectEnvs2
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvs2
		return nil
	}

	filterProjectEnvs1 := FilterProjectEnvs1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvs1, "", true, true); err == nil {
		u.FilterProjectEnvs1 = &filterProjectEnvs1
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvs1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FilterProjectEnvsResponseBody) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvs1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs1, "", true)
	}

	if u.FilterProjectEnvs2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs2, "", true)
	}

	if u.FilterProjectEnvs3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvs3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type FilterProjectEnvsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The list of environment variables for the given project
	OneOf *FilterProjectEnvsResponseBody
}

func (o *FilterProjectEnvsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FilterProjectEnvsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FilterProjectEnvsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *FilterProjectEnvsResponse) GetOneOf() *FilterProjectEnvsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
