// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/shared"
	"net/http"
)

type CreateAuthTokenRequestBodyType string

const (
	CreateAuthTokenRequestBodyTypeOauth2Token CreateAuthTokenRequestBodyType = "oauth2-token"
)

func (e CreateAuthTokenRequestBodyType) ToPointer() *CreateAuthTokenRequestBodyType {
	return &e
}
func (e *CreateAuthTokenRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2-token":
		*e = CreateAuthTokenRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAuthTokenRequestBodyType: %v", v)
	}
}

type CreateAuthTokenRequestBody2 struct {
	Type           CreateAuthTokenRequestBodyType `json:"type"`
	Name           string                         `json:"name"`
	ClientID       *string                        `json:"clientId,omitempty"`
	InstallationID *string                        `json:"installationId,omitempty"`
	ExpiresAt      *float64                       `json:"expiresAt,omitempty"`
}

func (o *CreateAuthTokenRequestBody2) GetType() CreateAuthTokenRequestBodyType {
	if o == nil {
		return CreateAuthTokenRequestBodyType("")
	}
	return o.Type
}

func (o *CreateAuthTokenRequestBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAuthTokenRequestBody2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateAuthTokenRequestBody2) GetInstallationID() *string {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *CreateAuthTokenRequestBody2) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

type CreateAuthTokenRequestBody1 struct {
	Name      string   `json:"name"`
	ExpiresAt *float64 `json:"expiresAt,omitempty"`
}

func (o *CreateAuthTokenRequestBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAuthTokenRequestBody1) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

type CreateAuthTokenRequestBodyUnionType string

const (
	CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody1 CreateAuthTokenRequestBodyUnionType = "createAuthToken_requestBody_1"
	CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody2 CreateAuthTokenRequestBodyUnionType = "createAuthToken_requestBody_2"
)

type CreateAuthTokenRequestBody struct {
	CreateAuthTokenRequestBody1 *CreateAuthTokenRequestBody1
	CreateAuthTokenRequestBody2 *CreateAuthTokenRequestBody2

	Type CreateAuthTokenRequestBodyUnionType
}

func CreateCreateAuthTokenRequestBodyCreateAuthTokenRequestBody1(createAuthTokenRequestBody1 CreateAuthTokenRequestBody1) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody1

	return CreateAuthTokenRequestBody{
		CreateAuthTokenRequestBody1: &createAuthTokenRequestBody1,
		Type:                        typ,
	}
}

func CreateCreateAuthTokenRequestBodyCreateAuthTokenRequestBody2(createAuthTokenRequestBody2 CreateAuthTokenRequestBody2) CreateAuthTokenRequestBody {
	typ := CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody2

	return CreateAuthTokenRequestBody{
		CreateAuthTokenRequestBody2: &createAuthTokenRequestBody2,
		Type:                        typ,
	}
}

func (u *CreateAuthTokenRequestBody) UnmarshalJSON(data []byte) error {

	var createAuthTokenRequestBody1 CreateAuthTokenRequestBody1 = CreateAuthTokenRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createAuthTokenRequestBody1, "", true, true); err == nil {
		u.CreateAuthTokenRequestBody1 = &createAuthTokenRequestBody1
		u.Type = CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody1
		return nil
	}

	var createAuthTokenRequestBody2 CreateAuthTokenRequestBody2 = CreateAuthTokenRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createAuthTokenRequestBody2, "", true, true); err == nil {
		u.CreateAuthTokenRequestBody2 = &createAuthTokenRequestBody2
		u.Type = CreateAuthTokenRequestBodyUnionTypeCreateAuthTokenRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateAuthTokenRequestBody", string(data))
}

func (u CreateAuthTokenRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateAuthTokenRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateAuthTokenRequestBody1, "", true)
	}

	if u.CreateAuthTokenRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateAuthTokenRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateAuthTokenRequestBody: all fields are null")
}

type CreateAuthTokenRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateAuthTokenRequestBody `request:"mediaType=application/json"`
}

func (o *CreateAuthTokenRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateAuthTokenRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateAuthTokenRequest) GetRequestBody() *CreateAuthTokenRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateAuthTokenResponseBody - Successful response.
type CreateAuthTokenResponseBody struct {
	// Authentication token metadata.
	Token shared.AuthToken `json:"token"`
	// The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!
	BearerToken string `json:"bearerToken"`
}

func (o *CreateAuthTokenResponseBody) GetToken() shared.AuthToken {
	if o == nil {
		return shared.AuthToken{}
	}
	return o.Token
}

func (o *CreateAuthTokenResponseBody) GetBearerToken() string {
	if o == nil {
		return ""
	}
	return o.BearerToken
}

type CreateAuthTokenResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response.
	Object *CreateAuthTokenResponseBody
}

func (o *CreateAuthTokenResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateAuthTokenResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateAuthTokenResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateAuthTokenResponse) GetObject() *CreateAuthTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
