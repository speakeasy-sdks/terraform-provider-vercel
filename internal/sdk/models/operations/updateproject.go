// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
)

// UpdateProjectFramework - The framework that is being used for this project. When `null` is used no framework is selected
type UpdateProjectFramework string

const (
	UpdateProjectFrameworkBlitzjs        UpdateProjectFramework = "blitzjs"
	UpdateProjectFrameworkNextjs         UpdateProjectFramework = "nextjs"
	UpdateProjectFrameworkGatsby         UpdateProjectFramework = "gatsby"
	UpdateProjectFrameworkRemix          UpdateProjectFramework = "remix"
	UpdateProjectFrameworkAstro          UpdateProjectFramework = "astro"
	UpdateProjectFrameworkHexo           UpdateProjectFramework = "hexo"
	UpdateProjectFrameworkEleventy       UpdateProjectFramework = "eleventy"
	UpdateProjectFrameworkDocusaurus2    UpdateProjectFramework = "docusaurus-2"
	UpdateProjectFrameworkDocusaurus     UpdateProjectFramework = "docusaurus"
	UpdateProjectFrameworkPreact         UpdateProjectFramework = "preact"
	UpdateProjectFrameworkSolidstart1    UpdateProjectFramework = "solidstart-1"
	UpdateProjectFrameworkSolidstart     UpdateProjectFramework = "solidstart"
	UpdateProjectFrameworkDojo           UpdateProjectFramework = "dojo"
	UpdateProjectFrameworkEmber          UpdateProjectFramework = "ember"
	UpdateProjectFrameworkVue            UpdateProjectFramework = "vue"
	UpdateProjectFrameworkScully         UpdateProjectFramework = "scully"
	UpdateProjectFrameworkIonicAngular   UpdateProjectFramework = "ionic-angular"
	UpdateProjectFrameworkAngular        UpdateProjectFramework = "angular"
	UpdateProjectFrameworkPolymer        UpdateProjectFramework = "polymer"
	UpdateProjectFrameworkSvelte         UpdateProjectFramework = "svelte"
	UpdateProjectFrameworkSveltekit      UpdateProjectFramework = "sveltekit"
	UpdateProjectFrameworkSveltekit1     UpdateProjectFramework = "sveltekit-1"
	UpdateProjectFrameworkIonicReact     UpdateProjectFramework = "ionic-react"
	UpdateProjectFrameworkCreateReactApp UpdateProjectFramework = "create-react-app"
	UpdateProjectFrameworkGridsome       UpdateProjectFramework = "gridsome"
	UpdateProjectFrameworkUmijs          UpdateProjectFramework = "umijs"
	UpdateProjectFrameworkSapper         UpdateProjectFramework = "sapper"
	UpdateProjectFrameworkSaber          UpdateProjectFramework = "saber"
	UpdateProjectFrameworkStencil        UpdateProjectFramework = "stencil"
	UpdateProjectFrameworkNuxtjs         UpdateProjectFramework = "nuxtjs"
	UpdateProjectFrameworkRedwoodjs      UpdateProjectFramework = "redwoodjs"
	UpdateProjectFrameworkHugo           UpdateProjectFramework = "hugo"
	UpdateProjectFrameworkJekyll         UpdateProjectFramework = "jekyll"
	UpdateProjectFrameworkBrunch         UpdateProjectFramework = "brunch"
	UpdateProjectFrameworkMiddleman      UpdateProjectFramework = "middleman"
	UpdateProjectFrameworkZola           UpdateProjectFramework = "zola"
	UpdateProjectFrameworkHydrogen       UpdateProjectFramework = "hydrogen"
	UpdateProjectFrameworkVite           UpdateProjectFramework = "vite"
	UpdateProjectFrameworkVitepress      UpdateProjectFramework = "vitepress"
	UpdateProjectFrameworkVuepress       UpdateProjectFramework = "vuepress"
	UpdateProjectFrameworkParcel         UpdateProjectFramework = "parcel"
	UpdateProjectFrameworkSanity         UpdateProjectFramework = "sanity"
	UpdateProjectFrameworkStorybook      UpdateProjectFramework = "storybook"
)

func (e UpdateProjectFramework) ToPointer() *UpdateProjectFramework {
	return &e
}
func (e *UpdateProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFramework: %v", v)
	}
}

type UpdateProjectNodeVersion string

const (
	UpdateProjectNodeVersionTwentyX   UpdateProjectNodeVersion = "20.x"
	UpdateProjectNodeVersionEighteenX UpdateProjectNodeVersion = "18.x"
	UpdateProjectNodeVersionSixteenX  UpdateProjectNodeVersion = "16.x"
	UpdateProjectNodeVersionFourteenX UpdateProjectNodeVersion = "14.x"
	UpdateProjectNodeVersionTwelveX   UpdateProjectNodeVersion = "12.x"
	UpdateProjectNodeVersionTenX      UpdateProjectNodeVersion = "10.x"
)

func (e UpdateProjectNodeVersion) ToPointer() *UpdateProjectNodeVersion {
	return &e
}
func (e *UpdateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectNodeVersion: %v", v)
	}
}

type Paths struct {
	// The regex path that should not be protected by Deployment Protection
	Value string `json:"value"`
}

func (o *Paths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OptionsAllowlist - Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
type OptionsAllowlist struct {
	Paths []Paths `json:"paths"`
}

func (o *OptionsAllowlist) GetPaths() []Paths {
	if o == nil {
		return []Paths{}
	}
	return o.Paths
}

// DeploymentType - Specify if the password will apply to every Deployment Target or just Preview
type DeploymentType string

const (
	DeploymentTypeAll                              DeploymentType = "all"
	DeploymentTypePreview                          DeploymentType = "preview"
	DeploymentTypeProdDeploymentUrlsAndAllPreviews DeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e DeploymentType) ToPointer() *DeploymentType {
	return &e
}
func (e *DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentType: %v", v)
	}
}

// PasswordProtection - Allows to protect project deployments with a password
type PasswordProtection struct {
	// Specify if the password will apply to every Deployment Target or just Preview
	DeploymentType DeploymentType `json:"deploymentType"`
	// The password that will be used to protect Project Deployments
	Password *string `json:"password,omitempty"`
}

func (o *PasswordProtection) GetDeploymentType() DeploymentType {
	if o == nil {
		return DeploymentType("")
	}
	return o.DeploymentType
}

func (o *PasswordProtection) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

// UpdateProjectDeploymentType - Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
type UpdateProjectDeploymentType string

const (
	UpdateProjectDeploymentTypeAll                              UpdateProjectDeploymentType = "all"
	UpdateProjectDeploymentTypePreview                          UpdateProjectDeploymentType = "preview"
	UpdateProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDeploymentType) ToPointer() *UpdateProjectDeploymentType {
	return &e
}
func (e *UpdateProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDeploymentType: %v", v)
	}
}

// SsoProtection - Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
type SsoProtection struct {
	// Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
	DeploymentType *UpdateProjectDeploymentType `default:"preview" json:"deploymentType"`
}

func (s SsoProtection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SsoProtection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SsoProtection) GetDeploymentType() *UpdateProjectDeploymentType {
	if o == nil {
		return nil
	}
	return o.DeploymentType
}

type Addresses struct {
	// An optional note explaining what the IP address or subnet is used for
	Note *string `json:"note,omitempty"`
	// The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported
	Value string `json:"value"`
}

func (o *Addresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *Addresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// UpdateProjectProjectsDeploymentType - Specify if the Trusted IPs will apply to every Deployment Target or just Preview
type UpdateProjectProjectsDeploymentType string

const (
	UpdateProjectProjectsDeploymentTypeAll                              UpdateProjectProjectsDeploymentType = "all"
	UpdateProjectProjectsDeploymentTypePreview                          UpdateProjectProjectsDeploymentType = "preview"
	UpdateProjectProjectsDeploymentTypeProduction                       UpdateProjectProjectsDeploymentType = "production"
	UpdateProjectProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectProjectsDeploymentType) ToPointer() *UpdateProjectProjectsDeploymentType {
	return &e
}
func (e *UpdateProjectProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "production":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsDeploymentType: %v", v)
	}
}

// ProtectionMode - exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
type ProtectionMode string

const (
	ProtectionModeExclusive  ProtectionMode = "exclusive"
	ProtectionModeAdditional ProtectionMode = "additional"
)

func (e ProtectionMode) ToPointer() *ProtectionMode {
	return &e
}
func (e *ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionMode: %v", v)
	}
}

// TrustedIps - Restricts access to deployments based on the incoming request IP address
type TrustedIps struct {
	Addresses []Addresses `json:"addresses"`
	// Specify if the Trusted IPs will apply to every Deployment Target or just Preview
	DeploymentType UpdateProjectProjectsDeploymentType `json:"deploymentType"`
	// exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
	ProtectionMode ProtectionMode `json:"protectionMode"`
}

func (o *TrustedIps) GetAddresses() []Addresses {
	if o == nil {
		return []Addresses{}
	}
	return o.Addresses
}

func (o *TrustedIps) GetDeploymentType() UpdateProjectProjectsDeploymentType {
	if o == nil {
		return UpdateProjectProjectsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *TrustedIps) GetProtectionMode() ProtectionMode {
	if o == nil {
		return ProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectRequestBody struct {
	AutoAssignCustomDomains          *bool   `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs             *bool   `json:"autoExposeSystemEnvs,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// Specifies whether customer support can see git source for a deployment
	CustomerSupportCodeVisibility *bool `json:"customerSupportCodeVisibility,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand       *string `json:"devCommand,omitempty"`
	DirectoryListing *bool   `json:"directoryListing,omitempty"`
	// Opt-in to Preview comments on the project level
	EnablePreviewFeedback *bool `json:"enablePreviewFeedback,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *UpdateProjectFramework `json:"framework,omitempty"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *bool `json:"gitForkProtection,omitempty"`
	// Specifies whether Git LFS is enabled for this project.
	GitLFS *bool `json:"gitLFS,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name        *string                   `json:"name,omitempty"`
	NodeVersion *UpdateProjectNodeVersion `json:"nodeVersion,omitempty"`
	// Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
	OptionsAllowlist *OptionsAllowlist `json:"optionsAllowlist,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Allows to protect project deployments with a password
	PasswordProtection *PasswordProtection `json:"passwordProtection,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \"createdAt\" fields.
	SkewProtectionBoundaryAt *int64 `json:"skewProtectionBoundaryAt,omitempty"`
	// Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \"revalidate\" fields.
	SkewProtectionMaxAge *int64 `json:"skewProtectionMaxAge,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
	SsoProtection *SsoProtection `json:"ssoProtection,omitempty"`
	// Restricts access to deployments based on the incoming request IP address
	TrustedIps *TrustedIps `json:"trustedIps,omitempty"`
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectRequestBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectRequestBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectRequestBody) GetDirectoryListing() *bool {
	if o == nil {
		return nil
	}
	return o.DirectoryListing
}

func (o *UpdateProjectRequestBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectRequestBody) GetFramework() *UpdateProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectRequestBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectRequestBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectRequestBody) GetNodeVersion() *UpdateProjectNodeVersion {
	if o == nil {
		return nil
	}
	return o.NodeVersion
}

func (o *UpdateProjectRequestBody) GetOptionsAllowlist() *OptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectRequestBody) GetPasswordProtection() *PasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectRequestBody) GetSkewProtectionBoundaryAt() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectRequestBody) GetSkewProtectionMaxAge() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectRequestBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectRequestBody) GetSsoProtection() *SsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectRequestBody) GetTrustedIps() *TrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

type UpdateProjectRequest struct {
	RequestBody *UpdateProjectRequestBody `request:"mediaType=application/json"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *UpdateProjectRequest) GetRequestBody() *UpdateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateProjectRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type UpdateProjectAnalytics struct {
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	ID                  string   `json:"id"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *UpdateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectCrons struct {
	Definitions []UpdateProjectDefinitions `json:"definitions"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string `json:"deploymentId"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *UpdateProjectCrons) GetDefinitions() []UpdateProjectDefinitions {
	if o == nil {
		return []UpdateProjectDefinitions{}
	}
	return o.Definitions
}

func (o *UpdateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectDataCache struct {
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
	UserDisabled     bool     `json:"userDisabled"`
}

func (o *UpdateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

func (o *UpdateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintTypeIntegrationStoreSecret UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType = "integration-store-secret"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType: %v", v)
	}
}

type UpdateProject14 struct {
	StoreID string                                                                        `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType `json:"type"`
}

func (o *UpdateProject14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject14) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHintType("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNoSsl UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-no-ssl"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type UpdateProject13 struct {
	StoreID string                                                             `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
}

func (o *UpdateProject13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject13) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12TypePostgresDatabase UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type = "postgres-database"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type: %v", v)
	}
}

type UpdateProject12 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type `json:"type"`
}

func (o *UpdateProject12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject12) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint12Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11TypePostgresPassword UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type = "postgres-password"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type: %v", v)
	}
}

type UpdateProject11 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type `json:"type"`
}

func (o *UpdateProject11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject11) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint11Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10TypePostgresHost UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type = "postgres-host"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type: %v", v)
	}
}

type UpdateProject10 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type `json:"type"`
}

func (o *UpdateProject10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject10) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint10Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9TypePostgresUser UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type = "postgres-user"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type: %v", v)
	}
}

type UpdateProject9 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type `json:"type"`
}

func (o *UpdateProject9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject9) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint9Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8TypePostgresPrismaURL UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type = "postgres-prisma-url"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type: %v", v)
	}
}

type UpdateProject8 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type `json:"type"`
}

func (o *UpdateProject8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject8) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint8Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7TypePostgresURLNonPooling UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type = "postgres-url-non-pooling"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type: %v", v)
	}
}

type UpdateProject7 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type `json:"type"`
}

func (o *UpdateProject7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject7) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint7Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6TypePostgresURL UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type = "postgres-url"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type: %v", v)
	}
}

type UpdateProject6 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type `json:"type"`
}

func (o *UpdateProject6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject6) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint6Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5TypeBlobReadWriteToken UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type = "blob-read-write-token"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type: %v", v)
	}
}

type UpdateProject5 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type `json:"type"`
}

func (o *UpdateProject5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject5) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint5Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4TypeRedisRestAPIReadOnlyToken UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type = "redis-rest-api-read-only-token"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type: %v", v)
	}
}

type UpdateProject4 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type `json:"type"`
}

func (o *UpdateProject4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProject4) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint4Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3TypeRedisRestAPIToken UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type = "redis-rest-api-token"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type: %v", v)
	}
}

type UpdateProjectProjects3 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type `json:"type"`
}

func (o *UpdateProjectProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectProjects3) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint3Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2TypeRedisRestAPIURL UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type = "redis-rest-api-url"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type: %v", v)
	}
}

type UpdateProjectProjectsResponse2 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type `json:"type"`
}

func (o *UpdateProjectProjectsResponse2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectProjectsResponse2) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint2Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1TypeRedisURL UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type = "redis-url"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type: %v", v)
	}
}

type UpdateProjectProjectsResponse1 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type `json:"type"`
}

func (o *UpdateProjectProjectsResponse1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectProjectsResponse1) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvContentHint1Type("")
	}
	return o.Type
}

type UpdateProjectContentHintType string

const (
	UpdateProjectContentHintTypeUpdateProjectProjectsResponse1 UpdateProjectContentHintType = "updateProject_projects_response_1"
	UpdateProjectContentHintTypeUpdateProjectProjectsResponse2 UpdateProjectContentHintType = "updateProject_projects_response_2"
	UpdateProjectContentHintTypeUpdateProjectProjects3         UpdateProjectContentHintType = "updateProject_projects_3"
	UpdateProjectContentHintTypeUpdateProject4                 UpdateProjectContentHintType = "updateProject_4"
	UpdateProjectContentHintTypeUpdateProject5                 UpdateProjectContentHintType = "updateProject_5"
	UpdateProjectContentHintTypeUpdateProject6                 UpdateProjectContentHintType = "updateProject_6"
	UpdateProjectContentHintTypeUpdateProject7                 UpdateProjectContentHintType = "updateProject_7"
	UpdateProjectContentHintTypeUpdateProject8                 UpdateProjectContentHintType = "updateProject_8"
	UpdateProjectContentHintTypeUpdateProject9                 UpdateProjectContentHintType = "updateProject_9"
	UpdateProjectContentHintTypeUpdateProject10                UpdateProjectContentHintType = "updateProject_10"
	UpdateProjectContentHintTypeUpdateProject11                UpdateProjectContentHintType = "updateProject_11"
	UpdateProjectContentHintTypeUpdateProject12                UpdateProjectContentHintType = "updateProject_12"
	UpdateProjectContentHintTypeUpdateProject13                UpdateProjectContentHintType = "updateProject_13"
	UpdateProjectContentHintTypeUpdateProject14                UpdateProjectContentHintType = "updateProject_14"
)

type UpdateProjectContentHint struct {
	UpdateProjectProjectsResponse1 *UpdateProjectProjectsResponse1
	UpdateProjectProjectsResponse2 *UpdateProjectProjectsResponse2
	UpdateProjectProjects3         *UpdateProjectProjects3
	UpdateProject4                 *UpdateProject4
	UpdateProject5                 *UpdateProject5
	UpdateProject6                 *UpdateProject6
	UpdateProject7                 *UpdateProject7
	UpdateProject8                 *UpdateProject8
	UpdateProject9                 *UpdateProject9
	UpdateProject10                *UpdateProject10
	UpdateProject11                *UpdateProject11
	UpdateProject12                *UpdateProject12
	UpdateProject13                *UpdateProject13
	UpdateProject14                *UpdateProject14

	Type UpdateProjectContentHintType
}

func CreateUpdateProjectContentHintUpdateProjectProjectsResponse1(updateProjectProjectsResponse1 UpdateProjectProjectsResponse1) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProjectProjectsResponse1

	return UpdateProjectContentHint{
		UpdateProjectProjectsResponse1: &updateProjectProjectsResponse1,
		Type:                           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectProjectsResponse2(updateProjectProjectsResponse2 UpdateProjectProjectsResponse2) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProjectProjectsResponse2

	return UpdateProjectContentHint{
		UpdateProjectProjectsResponse2: &updateProjectProjectsResponse2,
		Type:                           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectProjects3(updateProjectProjects3 UpdateProjectProjects3) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProjectProjects3

	return UpdateProjectContentHint{
		UpdateProjectProjects3: &updateProjectProjects3,
		Type:                   typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject4(updateProject4 UpdateProject4) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject4

	return UpdateProjectContentHint{
		UpdateProject4: &updateProject4,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject5(updateProject5 UpdateProject5) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject5

	return UpdateProjectContentHint{
		UpdateProject5: &updateProject5,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject6(updateProject6 UpdateProject6) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject6

	return UpdateProjectContentHint{
		UpdateProject6: &updateProject6,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject7(updateProject7 UpdateProject7) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject7

	return UpdateProjectContentHint{
		UpdateProject7: &updateProject7,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject8(updateProject8 UpdateProject8) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject8

	return UpdateProjectContentHint{
		UpdateProject8: &updateProject8,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject9(updateProject9 UpdateProject9) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject9

	return UpdateProjectContentHint{
		UpdateProject9: &updateProject9,
		Type:           typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject10(updateProject10 UpdateProject10) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject10

	return UpdateProjectContentHint{
		UpdateProject10: &updateProject10,
		Type:            typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject11(updateProject11 UpdateProject11) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject11

	return UpdateProjectContentHint{
		UpdateProject11: &updateProject11,
		Type:            typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject12(updateProject12 UpdateProject12) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject12

	return UpdateProjectContentHint{
		UpdateProject12: &updateProject12,
		Type:            typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject13(updateProject13 UpdateProject13) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject13

	return UpdateProjectContentHint{
		UpdateProject13: &updateProject13,
		Type:            typ,
	}
}

func CreateUpdateProjectContentHintUpdateProject14(updateProject14 UpdateProject14) UpdateProjectContentHint {
	typ := UpdateProjectContentHintTypeUpdateProject14

	return UpdateProjectContentHint{
		UpdateProject14: &updateProject14,
		Type:            typ,
	}
}

func (u *UpdateProjectContentHint) UnmarshalJSON(data []byte) error {

	var updateProjectProjectsResponse1 UpdateProjectProjectsResponse1 = UpdateProjectProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse1, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse1 = &updateProjectProjectsResponse1
		u.Type = UpdateProjectContentHintTypeUpdateProjectProjectsResponse1
		return nil
	}

	var updateProjectProjectsResponse2 UpdateProjectProjectsResponse2 = UpdateProjectProjectsResponse2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse2, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse2 = &updateProjectProjectsResponse2
		u.Type = UpdateProjectContentHintTypeUpdateProjectProjectsResponse2
		return nil
	}

	var updateProjectProjects3 UpdateProjectProjects3 = UpdateProjectProjects3{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjects3, "", true, true); err == nil {
		u.UpdateProjectProjects3 = &updateProjectProjects3
		u.Type = UpdateProjectContentHintTypeUpdateProjectProjects3
		return nil
	}

	var updateProject4 UpdateProject4 = UpdateProject4{}
	if err := utils.UnmarshalJSON(data, &updateProject4, "", true, true); err == nil {
		u.UpdateProject4 = &updateProject4
		u.Type = UpdateProjectContentHintTypeUpdateProject4
		return nil
	}

	var updateProject5 UpdateProject5 = UpdateProject5{}
	if err := utils.UnmarshalJSON(data, &updateProject5, "", true, true); err == nil {
		u.UpdateProject5 = &updateProject5
		u.Type = UpdateProjectContentHintTypeUpdateProject5
		return nil
	}

	var updateProject6 UpdateProject6 = UpdateProject6{}
	if err := utils.UnmarshalJSON(data, &updateProject6, "", true, true); err == nil {
		u.UpdateProject6 = &updateProject6
		u.Type = UpdateProjectContentHintTypeUpdateProject6
		return nil
	}

	var updateProject7 UpdateProject7 = UpdateProject7{}
	if err := utils.UnmarshalJSON(data, &updateProject7, "", true, true); err == nil {
		u.UpdateProject7 = &updateProject7
		u.Type = UpdateProjectContentHintTypeUpdateProject7
		return nil
	}

	var updateProject8 UpdateProject8 = UpdateProject8{}
	if err := utils.UnmarshalJSON(data, &updateProject8, "", true, true); err == nil {
		u.UpdateProject8 = &updateProject8
		u.Type = UpdateProjectContentHintTypeUpdateProject8
		return nil
	}

	var updateProject9 UpdateProject9 = UpdateProject9{}
	if err := utils.UnmarshalJSON(data, &updateProject9, "", true, true); err == nil {
		u.UpdateProject9 = &updateProject9
		u.Type = UpdateProjectContentHintTypeUpdateProject9
		return nil
	}

	var updateProject10 UpdateProject10 = UpdateProject10{}
	if err := utils.UnmarshalJSON(data, &updateProject10, "", true, true); err == nil {
		u.UpdateProject10 = &updateProject10
		u.Type = UpdateProjectContentHintTypeUpdateProject10
		return nil
	}

	var updateProject11 UpdateProject11 = UpdateProject11{}
	if err := utils.UnmarshalJSON(data, &updateProject11, "", true, true); err == nil {
		u.UpdateProject11 = &updateProject11
		u.Type = UpdateProjectContentHintTypeUpdateProject11
		return nil
	}

	var updateProject12 UpdateProject12 = UpdateProject12{}
	if err := utils.UnmarshalJSON(data, &updateProject12, "", true, true); err == nil {
		u.UpdateProject12 = &updateProject12
		u.Type = UpdateProjectContentHintTypeUpdateProject12
		return nil
	}

	var updateProject13 UpdateProject13 = UpdateProject13{}
	if err := utils.UnmarshalJSON(data, &updateProject13, "", true, true); err == nil {
		u.UpdateProject13 = &updateProject13
		u.Type = UpdateProjectContentHintTypeUpdateProject13
		return nil
	}

	var updateProject14 UpdateProject14 = UpdateProject14{}
	if err := utils.UnmarshalJSON(data, &updateProject14, "", true, true); err == nil {
		u.UpdateProject14 = &updateProject14
		u.Type = UpdateProjectContentHintTypeUpdateProject14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectContentHint", string(data))
}

func (u UpdateProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectProjectsResponse1 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse1, "", true)
	}

	if u.UpdateProjectProjectsResponse2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse2, "", true)
	}

	if u.UpdateProjectProjects3 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjects3, "", true)
	}

	if u.UpdateProject4 != nil {
		return utils.MarshalJSON(u.UpdateProject4, "", true)
	}

	if u.UpdateProject5 != nil {
		return utils.MarshalJSON(u.UpdateProject5, "", true)
	}

	if u.UpdateProject6 != nil {
		return utils.MarshalJSON(u.UpdateProject6, "", true)
	}

	if u.UpdateProject7 != nil {
		return utils.MarshalJSON(u.UpdateProject7, "", true)
	}

	if u.UpdateProject8 != nil {
		return utils.MarshalJSON(u.UpdateProject8, "", true)
	}

	if u.UpdateProject9 != nil {
		return utils.MarshalJSON(u.UpdateProject9, "", true)
	}

	if u.UpdateProject10 != nil {
		return utils.MarshalJSON(u.UpdateProject10, "", true)
	}

	if u.UpdateProject11 != nil {
		return utils.MarshalJSON(u.UpdateProject11, "", true)
	}

	if u.UpdateProject12 != nil {
		return utils.MarshalJSON(u.UpdateProject12, "", true)
	}

	if u.UpdateProject13 != nil {
		return utils.MarshalJSON(u.UpdateProject13, "", true)
	}

	if u.UpdateProject14 != nil {
		return utils.MarshalJSON(u.UpdateProject14, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectContentHint: all fields are null")
}

type UpdateProjectProjectsResponse200Type string

const (
	UpdateProjectProjectsResponse200TypeFlagsSecret UpdateProjectProjectsResponse200Type = "flags-secret"
)

func (e UpdateProjectProjectsResponse200Type) ToPointer() *UpdateProjectProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200Type: %v", v)
	}
}

// UpdateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type UpdateProjectInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                               `json:"encryptedValue"`
	Type           UpdateProjectProjectsResponse200Type `json:"type"`
}

func (o *UpdateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *UpdateProjectInternalContentHint) GetType() UpdateProjectProjectsResponse200Type {
	if o == nil {
		return UpdateProjectProjectsResponse200Type("")
	}
	return o.Type
}

type UpdateProjectProjectsResponse2002 string

const (
	UpdateProjectProjectsResponse2002Production  UpdateProjectProjectsResponse2002 = "production"
	UpdateProjectProjectsResponse2002Preview     UpdateProjectProjectsResponse2002 = "preview"
	UpdateProjectProjectsResponse2002Development UpdateProjectProjectsResponse2002 = "development"
)

func (e UpdateProjectProjectsResponse2002) ToPointer() *UpdateProjectProjectsResponse2002 {
	return &e
}
func (e *UpdateProjectProjectsResponse2002) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectProjectsResponse2002(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse2002: %v", v)
	}
}

type UpdateProjectProjectsResponse2001 string

const (
	UpdateProjectProjectsResponse2001Production  UpdateProjectProjectsResponse2001 = "production"
	UpdateProjectProjectsResponse2001Preview     UpdateProjectProjectsResponse2001 = "preview"
	UpdateProjectProjectsResponse2001Development UpdateProjectProjectsResponse2001 = "development"
)

func (e UpdateProjectProjectsResponse2001) ToPointer() *UpdateProjectProjectsResponse2001 {
	return &e
}
func (e *UpdateProjectProjectsResponse2001) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectProjectsResponse2001(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse2001: %v", v)
	}
}

type UpdateProjectTargetType string

const (
	UpdateProjectTargetTypeArrayOfUpdateProjectProjectsResponse2001 UpdateProjectTargetType = "arrayOfUpdateProjectProjectsResponse2001"
	UpdateProjectTargetTypeUpdateProjectProjectsResponse2002        UpdateProjectTargetType = "updateProject_projects_response_200_2"
)

type UpdateProjectTarget struct {
	ArrayOfUpdateProjectProjectsResponse2001 []UpdateProjectProjectsResponse2001
	UpdateProjectProjectsResponse2002        *UpdateProjectProjectsResponse2002

	Type UpdateProjectTargetType
}

func CreateUpdateProjectTargetArrayOfUpdateProjectProjectsResponse2001(arrayOfUpdateProjectProjectsResponse2001 []UpdateProjectProjectsResponse2001) UpdateProjectTarget {
	typ := UpdateProjectTargetTypeArrayOfUpdateProjectProjectsResponse2001

	return UpdateProjectTarget{
		ArrayOfUpdateProjectProjectsResponse2001: arrayOfUpdateProjectProjectsResponse2001,
		Type:                                     typ,
	}
}

func CreateUpdateProjectTargetUpdateProjectProjectsResponse2002(updateProjectProjectsResponse2002 UpdateProjectProjectsResponse2002) UpdateProjectTarget {
	typ := UpdateProjectTargetTypeUpdateProjectProjectsResponse2002

	return UpdateProjectTarget{
		UpdateProjectProjectsResponse2002: &updateProjectProjectsResponse2002,
		Type:                              typ,
	}
}

func (u *UpdateProjectTarget) UnmarshalJSON(data []byte) error {

	var arrayOfUpdateProjectProjectsResponse2001 []UpdateProjectProjectsResponse2001 = []UpdateProjectProjectsResponse2001{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateProjectProjectsResponse2001, "", true, true); err == nil {
		u.ArrayOfUpdateProjectProjectsResponse2001 = arrayOfUpdateProjectProjectsResponse2001
		u.Type = UpdateProjectTargetTypeArrayOfUpdateProjectProjectsResponse2001
		return nil
	}

	var updateProjectProjectsResponse2002 UpdateProjectProjectsResponse2002 = UpdateProjectProjectsResponse2002("")
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse2002, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse2002 = &updateProjectProjectsResponse2002
		u.Type = UpdateProjectTargetTypeUpdateProjectProjectsResponse2002
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTarget", string(data))
}

func (u UpdateProjectTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfUpdateProjectProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateProjectProjectsResponse2001, "", true)
	}

	if u.UpdateProjectProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse2002, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTarget: all fields are null")
}

type UpdateProjectType string

const (
	UpdateProjectTypeSecret    UpdateProjectType = "secret"
	UpdateProjectTypeSystem    UpdateProjectType = "system"
	UpdateProjectTypeEncrypted UpdateProjectType = "encrypted"
	UpdateProjectTypePlain     UpdateProjectType = "plain"
	UpdateProjectTypeSensitive UpdateProjectType = "sensitive"
)

func (e UpdateProjectType) ToPointer() *UpdateProjectType {
	return &e
}
func (e *UpdateProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectType: %v", v)
	}
}

type UpdateProjectEnv struct {
	Comment             *string                   `json:"comment,omitempty"`
	ConfigurationID     *string                   `json:"configurationId,omitempty"`
	ContentHint         *UpdateProjectContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                  `json:"createdAt,omitempty"`
	CreatedBy           *string                   `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                   `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *UpdateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                            `json:"key"`
	Target              *UpdateProjectTarget              `json:"target,omitempty"`
	Type                UpdateProjectType                 `json:"type"`
	UpdatedAt           *float64                          `json:"updatedAt,omitempty"`
	UpdatedBy           *string                           `json:"updatedBy,omitempty"`
	Value               string                            `json:"value"`
}

func (o *UpdateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectEnv) GetContentHint() *UpdateProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectEnv) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *UpdateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectEnv) GetInternalContentHint() *UpdateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *UpdateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectEnv) GetTarget() *UpdateProjectTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectEnv) GetType() UpdateProjectType {
	if o == nil {
		return UpdateProjectType("")
	}
	return o.Type
}

func (o *UpdateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectProjectsFramework string

const (
	UpdateProjectProjectsFrameworkBlitzjs        UpdateProjectProjectsFramework = "blitzjs"
	UpdateProjectProjectsFrameworkNextjs         UpdateProjectProjectsFramework = "nextjs"
	UpdateProjectProjectsFrameworkGatsby         UpdateProjectProjectsFramework = "gatsby"
	UpdateProjectProjectsFrameworkRemix          UpdateProjectProjectsFramework = "remix"
	UpdateProjectProjectsFrameworkAstro          UpdateProjectProjectsFramework = "astro"
	UpdateProjectProjectsFrameworkHexo           UpdateProjectProjectsFramework = "hexo"
	UpdateProjectProjectsFrameworkEleventy       UpdateProjectProjectsFramework = "eleventy"
	UpdateProjectProjectsFrameworkDocusaurus2    UpdateProjectProjectsFramework = "docusaurus-2"
	UpdateProjectProjectsFrameworkDocusaurus     UpdateProjectProjectsFramework = "docusaurus"
	UpdateProjectProjectsFrameworkPreact         UpdateProjectProjectsFramework = "preact"
	UpdateProjectProjectsFrameworkSolidstart1    UpdateProjectProjectsFramework = "solidstart-1"
	UpdateProjectProjectsFrameworkSolidstart     UpdateProjectProjectsFramework = "solidstart"
	UpdateProjectProjectsFrameworkDojo           UpdateProjectProjectsFramework = "dojo"
	UpdateProjectProjectsFrameworkEmber          UpdateProjectProjectsFramework = "ember"
	UpdateProjectProjectsFrameworkVue            UpdateProjectProjectsFramework = "vue"
	UpdateProjectProjectsFrameworkScully         UpdateProjectProjectsFramework = "scully"
	UpdateProjectProjectsFrameworkIonicAngular   UpdateProjectProjectsFramework = "ionic-angular"
	UpdateProjectProjectsFrameworkAngular        UpdateProjectProjectsFramework = "angular"
	UpdateProjectProjectsFrameworkPolymer        UpdateProjectProjectsFramework = "polymer"
	UpdateProjectProjectsFrameworkSvelte         UpdateProjectProjectsFramework = "svelte"
	UpdateProjectProjectsFrameworkSveltekit      UpdateProjectProjectsFramework = "sveltekit"
	UpdateProjectProjectsFrameworkSveltekit1     UpdateProjectProjectsFramework = "sveltekit-1"
	UpdateProjectProjectsFrameworkIonicReact     UpdateProjectProjectsFramework = "ionic-react"
	UpdateProjectProjectsFrameworkCreateReactApp UpdateProjectProjectsFramework = "create-react-app"
	UpdateProjectProjectsFrameworkGridsome       UpdateProjectProjectsFramework = "gridsome"
	UpdateProjectProjectsFrameworkUmijs          UpdateProjectProjectsFramework = "umijs"
	UpdateProjectProjectsFrameworkSapper         UpdateProjectProjectsFramework = "sapper"
	UpdateProjectProjectsFrameworkSaber          UpdateProjectProjectsFramework = "saber"
	UpdateProjectProjectsFrameworkStencil        UpdateProjectProjectsFramework = "stencil"
	UpdateProjectProjectsFrameworkNuxtjs         UpdateProjectProjectsFramework = "nuxtjs"
	UpdateProjectProjectsFrameworkRedwoodjs      UpdateProjectProjectsFramework = "redwoodjs"
	UpdateProjectProjectsFrameworkHugo           UpdateProjectProjectsFramework = "hugo"
	UpdateProjectProjectsFrameworkJekyll         UpdateProjectProjectsFramework = "jekyll"
	UpdateProjectProjectsFrameworkBrunch         UpdateProjectProjectsFramework = "brunch"
	UpdateProjectProjectsFrameworkMiddleman      UpdateProjectProjectsFramework = "middleman"
	UpdateProjectProjectsFrameworkZola           UpdateProjectProjectsFramework = "zola"
	UpdateProjectProjectsFrameworkHydrogen       UpdateProjectProjectsFramework = "hydrogen"
	UpdateProjectProjectsFrameworkVite           UpdateProjectProjectsFramework = "vite"
	UpdateProjectProjectsFrameworkVitepress      UpdateProjectProjectsFramework = "vitepress"
	UpdateProjectProjectsFrameworkVuepress       UpdateProjectProjectsFramework = "vuepress"
	UpdateProjectProjectsFrameworkParcel         UpdateProjectProjectsFramework = "parcel"
	UpdateProjectProjectsFrameworkSanity         UpdateProjectProjectsFramework = "sanity"
	UpdateProjectProjectsFrameworkStorybook      UpdateProjectProjectsFramework = "storybook"
)

func (e UpdateProjectProjectsFramework) ToPointer() *UpdateProjectProjectsFramework {
	return &e
}
func (e *UpdateProjectProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsFramework: %v", v)
	}
}

type UpdateProjectGitComments struct {
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
}

func (o *UpdateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

func (o *UpdateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

type UpdateProjectJobStatus string

const (
	UpdateProjectJobStatusSucceeded  UpdateProjectJobStatus = "succeeded"
	UpdateProjectJobStatusFailed     UpdateProjectJobStatus = "failed"
	UpdateProjectJobStatusSkipped    UpdateProjectJobStatus = "skipped"
	UpdateProjectJobStatusPending    UpdateProjectJobStatus = "pending"
	UpdateProjectJobStatusInProgress UpdateProjectJobStatus = "in-progress"
)

func (e UpdateProjectJobStatus) ToPointer() *UpdateProjectJobStatus {
	return &e
}
func (e *UpdateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectJobStatus: %v", v)
	}
}

type UpdateProjectProjectsType string

const (
	UpdateProjectProjectsTypePromote  UpdateProjectProjectsType = "promote"
	UpdateProjectProjectsTypeRollback UpdateProjectProjectsType = "rollback"
)

func (e UpdateProjectProjectsType) ToPointer() *UpdateProjectProjectsType {
	return &e
}
func (e *UpdateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsType: %v", v)
	}
}

type UpdateProjectLastAliasRequest struct {
	FromDeploymentID string                    `json:"fromDeploymentId"`
	JobStatus        UpdateProjectJobStatus    `json:"jobStatus"`
	RequestedAt      float64                   `json:"requestedAt"`
	ToDeploymentID   string                    `json:"toDeploymentId"`
	Type             UpdateProjectProjectsType `json:"type"`
}

func (o *UpdateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetJobStatus() UpdateProjectJobStatus {
	if o == nil {
		return UpdateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *UpdateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetType() UpdateProjectProjectsType {
	if o == nil {
		return UpdateProjectProjectsType("")
	}
	return o.Type
}

type UpdateProjectLastRollbackTarget struct {
}

type UpdateProjectAliasAssignedType string

const (
	UpdateProjectAliasAssignedTypeNumber  UpdateProjectAliasAssignedType = "number"
	UpdateProjectAliasAssignedTypeBoolean UpdateProjectAliasAssignedType = "boolean"
)

type UpdateProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type UpdateProjectAliasAssignedType
}

func CreateUpdateProjectAliasAssignedNumber(number float64) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeNumber

	return UpdateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectAliasAssignedBoolean(boolean bool) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeBoolean

	return UpdateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectAliasAssigned", string(data))
}

func (u UpdateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectAliasAssigned: all fields are null")
}

type UpdateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectBuilds struct {
	Dest *string `json:"dest,omitempty"`
	Src  *string `json:"src,omitempty"`
	Use  string  `json:"use"`
}

func (o *UpdateProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type UpdateProjectChecksConclusion string

const (
	UpdateProjectChecksConclusionSucceeded UpdateProjectChecksConclusion = "succeeded"
	UpdateProjectChecksConclusionFailed    UpdateProjectChecksConclusion = "failed"
	UpdateProjectChecksConclusionSkipped   UpdateProjectChecksConclusion = "skipped"
	UpdateProjectChecksConclusionCanceled  UpdateProjectChecksConclusion = "canceled"
)

func (e UpdateProjectChecksConclusion) ToPointer() *UpdateProjectChecksConclusion {
	return &e
}
func (e *UpdateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksConclusion: %v", v)
	}
}

type UpdateProjectChecksState string

const (
	UpdateProjectChecksStateRegistered UpdateProjectChecksState = "registered"
	UpdateProjectChecksStateRunning    UpdateProjectChecksState = "running"
	UpdateProjectChecksStateCompleted  UpdateProjectChecksState = "completed"
)

func (e UpdateProjectChecksState) ToPointer() *UpdateProjectChecksState {
	return &e
}
func (e *UpdateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksState: %v", v)
	}
}

type UpdateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectOidcTokenClaimsType string

const (
	UpdateProjectOidcTokenClaimsTypeStr        UpdateProjectOidcTokenClaimsType = "str"
	UpdateProjectOidcTokenClaimsTypeArrayOfStr UpdateProjectOidcTokenClaimsType = "arrayOfStr"
)

type UpdateProjectOidcTokenClaims struct {
	Str        *string
	ArrayOfStr []string

	Type UpdateProjectOidcTokenClaimsType
}

func CreateUpdateProjectOidcTokenClaimsStr(str string) UpdateProjectOidcTokenClaims {
	typ := UpdateProjectOidcTokenClaimsTypeStr

	return UpdateProjectOidcTokenClaims{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectOidcTokenClaimsArrayOfStr(arrayOfStr []string) UpdateProjectOidcTokenClaims {
	typ := UpdateProjectOidcTokenClaimsTypeArrayOfStr

	return UpdateProjectOidcTokenClaims{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateProjectOidcTokenClaims) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectOidcTokenClaimsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectOidcTokenClaimsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectOidcTokenClaims", string(data))
}

func (u UpdateProjectOidcTokenClaims) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectOidcTokenClaims: all fields are null")
}

type UpdateProjectPlan string

const (
	UpdateProjectPlanPro        UpdateProjectPlan = "pro"
	UpdateProjectPlanEnterprise UpdateProjectPlan = "enterprise"
	UpdateProjectPlanHobby      UpdateProjectPlan = "hobby"
)

func (e UpdateProjectPlan) ToPointer() *UpdateProjectPlan {
	return &e
}
func (e *UpdateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectPlan: %v", v)
	}
}

type UpdateProjectReadyState string

const (
	UpdateProjectReadyStateBuilding     UpdateProjectReadyState = "BUILDING"
	UpdateProjectReadyStateError        UpdateProjectReadyState = "ERROR"
	UpdateProjectReadyStateInitializing UpdateProjectReadyState = "INITIALIZING"
	UpdateProjectReadyStateQueued       UpdateProjectReadyState = "QUEUED"
	UpdateProjectReadyStateReady        UpdateProjectReadyState = "READY"
	UpdateProjectReadyStateCanceled     UpdateProjectReadyState = "CANCELED"
)

func (e UpdateProjectReadyState) ToPointer() *UpdateProjectReadyState {
	return &e
}
func (e *UpdateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadyState: %v", v)
	}
}

type UpdateProjectReadySubstate string

const (
	UpdateProjectReadySubstateStaged   UpdateProjectReadySubstate = "STAGED"
	UpdateProjectReadySubstatePromoted UpdateProjectReadySubstate = "PROMOTED"
)

func (e UpdateProjectReadySubstate) ToPointer() *UpdateProjectReadySubstate {
	return &e
}
func (e *UpdateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadySubstate: %v", v)
	}
}

type UpdateProjectProjectsResponseType string

const (
	UpdateProjectProjectsResponseTypeLambdas UpdateProjectProjectsResponseType = "LAMBDAS"
)

func (e UpdateProjectProjectsResponseType) ToPointer() *UpdateProjectProjectsResponseType {
	return &e
}
func (e *UpdateProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponseType: %v", v)
	}
}

type UpdateProjectLatestDeployments struct {
	Alias                  []string                                `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectAliasAssigned             `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectAliasError                `json:"aliasError,omitempty"`
	AliasFinal             *string                                 `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                `json:"automaticAliases,omitempty"`
	BuildingAt             *float64                                `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectBuilds                   `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectChecksConclusion          `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectChecksState               `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                   `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                 `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                 `json:"createdAt"`
	CreatedIn              string                                  `json:"createdIn"`
	Creator                *UpdateProjectCreator                   `json:"creator"`
	DeploymentHostname     string                                  `json:"deploymentHostname"`
	Forced                 *bool                                   `json:"forced,omitempty"`
	ID                     string                                  `json:"id"`
	Meta                   map[string]string                       `json:"meta,omitempty"`
	MonorepoManager        *string                                 `json:"monorepoManager,omitempty"`
	Name                   string                                  `json:"name"`
	OidcTokenClaims        map[string]UpdateProjectOidcTokenClaims `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectPlan                       `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                             `json:"previewCommentsEnabled,omitempty"`
	Private                bool                              `json:"private"`
	ReadyAt                *float64                          `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectReadyState           `json:"readyState"`
	ReadySubstate          *UpdateProjectReadySubstate       `json:"readySubstate,omitempty"`
	RequestedAt            *float64                          `json:"requestedAt,omitempty"`
	Target                 *string                           `json:"target,omitempty"`
	TeamID                 *string                           `json:"teamId,omitempty"`
	Type                   UpdateProjectProjectsResponseType `json:"type"`
	URL                    string                            `json:"url"`
	UserID                 string                            `json:"userId"`
	WithCache              *bool                             `json:"withCache,omitempty"`
}

func (o *UpdateProjectLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectLatestDeployments) GetAliasAssigned() *UpdateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectLatestDeployments) GetAliasError() *UpdateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectLatestDeployments) GetBuilds() []UpdateProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectLatestDeployments) GetChecksConclusion() *UpdateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectLatestDeployments) GetChecksState() *UpdateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectLatestDeployments) GetCreator() *UpdateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLatestDeployments) GetOidcTokenClaims() map[string]UpdateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectLatestDeployments) GetPlan() UpdateProjectPlan {
	if o == nil {
		return UpdateProjectPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectLatestDeployments) GetReadyState() UpdateProjectReadyState {
	if o == nil {
		return UpdateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectLatestDeployments) GetReadySubstate() *UpdateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectLatestDeployments) GetType() UpdateProjectProjectsResponseType {
	if o == nil {
		return UpdateProjectProjectsResponseType("")
	}
	return o.Type
}

func (o *UpdateProjectLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkTypeBitbucket UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType = "bitbucket"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType: %v", v)
	}
}

type UpdateProject3 struct {
	CreatedAt        *float64                                                             `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectProjectsResponseDeployHooks                           `json:"deployHooks"`
	GitCredentialID  *string                                                              `json:"gitCredentialId,omitempty"`
	Name             *string                                                              `json:"name,omitempty"`
	Owner            *string                                                              `json:"owner,omitempty"`
	ProductionBranch *string                                                              `json:"productionBranch,omitempty"`
	Slug             *string                                                              `json:"slug,omitempty"`
	Sourceless       *bool                                                                `json:"sourceless,omitempty"`
	Type             *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType `json:"type,omitempty"`
	UpdatedAt        *float64                                                             `json:"updatedAt,omitempty"`
	UUID             *string                                                              `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                                              `json:"workspaceUuid,omitempty"`
}

func (o *UpdateProject3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProject3) GetDeployHooks() []UpdateProjectProjectsResponseDeployHooks {
	if o == nil {
		return []UpdateProjectProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProject3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProject3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProject3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProject3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProject3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProject3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProject3) GetType() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProject3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProject3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProject3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type UpdateProjectProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTypeGitlab UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = "gitlab"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type UpdateProject2 struct {
	CreatedAt                *float64                                                         `json:"createdAt,omitempty"`
	DeployHooks              []UpdateProjectProjectsDeployHooks                               `json:"deployHooks"`
	GitCredentialID          *string                                                          `json:"gitCredentialId,omitempty"`
	ProductionBranch         *string                                                          `json:"productionBranch,omitempty"`
	ProjectID                *string                                                          `json:"projectId,omitempty"`
	ProjectName              *string                                                          `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string                                                          `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string                                                          `json:"projectNamespace,omitempty"`
	ProjectURL               *string                                                          `json:"projectUrl,omitempty"`
	Sourceless               *bool                                                            `json:"sourceless,omitempty"`
	Type                     *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type,omitempty"`
	UpdatedAt                *float64                                                         `json:"updatedAt,omitempty"`
}

func (o *UpdateProject2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProject2) GetDeployHooks() []UpdateProjectProjectsDeployHooks {
	if o == nil {
		return []UpdateProjectProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProject2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProject2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProject2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProject2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProject2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProject2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProject2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProject2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProject2) GetType() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProject2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONTypeGithub UpdateProjectProjectsResponse200ApplicationJSONType = "github"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type UpdateProject1 struct {
	CreatedAt        *float64                                             `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDeployHooks                           `json:"deployHooks"`
	GitCredentialID  *string                                              `json:"gitCredentialId,omitempty"`
	Org              *string                                              `json:"org,omitempty"`
	ProductionBranch *string                                              `json:"productionBranch,omitempty"`
	Repo             *string                                              `json:"repo,omitempty"`
	RepoID           *float64                                             `json:"repoId,omitempty"`
	Sourceless       *bool                                                `json:"sourceless,omitempty"`
	Type             *UpdateProjectProjectsResponse200ApplicationJSONType `json:"type,omitempty"`
	UpdatedAt        *float64                                             `json:"updatedAt,omitempty"`
}

func (o *UpdateProject1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProject1) GetDeployHooks() []UpdateProjectDeployHooks {
	if o == nil {
		return []UpdateProjectDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProject1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProject1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProject1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

func (o *UpdateProject1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProject1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProject1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProject1) GetType() *UpdateProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProject1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type UpdateProjectLinkType string

const (
	UpdateProjectLinkTypeUpdateProject1 UpdateProjectLinkType = "updateProject_1"
	UpdateProjectLinkTypeUpdateProject2 UpdateProjectLinkType = "updateProject_2"
	UpdateProjectLinkTypeUpdateProject3 UpdateProjectLinkType = "updateProject_3"
)

type UpdateProjectLink struct {
	UpdateProject1 *UpdateProject1
	UpdateProject2 *UpdateProject2
	UpdateProject3 *UpdateProject3

	Type UpdateProjectLinkType
}

func CreateUpdateProjectLinkUpdateProject1(updateProject1 UpdateProject1) UpdateProjectLink {
	typ := UpdateProjectLinkTypeUpdateProject1

	return UpdateProjectLink{
		UpdateProject1: &updateProject1,
		Type:           typ,
	}
}

func CreateUpdateProjectLinkUpdateProject2(updateProject2 UpdateProject2) UpdateProjectLink {
	typ := UpdateProjectLinkTypeUpdateProject2

	return UpdateProjectLink{
		UpdateProject2: &updateProject2,
		Type:           typ,
	}
}

func CreateUpdateProjectLinkUpdateProject3(updateProject3 UpdateProject3) UpdateProjectLink {
	typ := UpdateProjectLinkTypeUpdateProject3

	return UpdateProjectLink{
		UpdateProject3: &updateProject3,
		Type:           typ,
	}
}

func (u *UpdateProjectLink) UnmarshalJSON(data []byte) error {

	var updateProject1 UpdateProject1 = UpdateProject1{}
	if err := utils.UnmarshalJSON(data, &updateProject1, "", true, true); err == nil {
		u.UpdateProject1 = &updateProject1
		u.Type = UpdateProjectLinkTypeUpdateProject1
		return nil
	}

	var updateProject2 UpdateProject2 = UpdateProject2{}
	if err := utils.UnmarshalJSON(data, &updateProject2, "", true, true); err == nil {
		u.UpdateProject2 = &updateProject2
		u.Type = UpdateProjectLinkTypeUpdateProject2
		return nil
	}

	var updateProject3 UpdateProject3 = UpdateProject3{}
	if err := utils.UnmarshalJSON(data, &updateProject3, "", true, true); err == nil {
		u.UpdateProject3 = &updateProject3
		u.Type = UpdateProjectLinkTypeUpdateProject3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectLink", string(data))
}

func (u UpdateProjectLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProject1 != nil {
		return utils.MarshalJSON(u.UpdateProject1, "", true)
	}

	if u.UpdateProject2 != nil {
		return utils.MarshalJSON(u.UpdateProject2, "", true)
	}

	if u.UpdateProject3 != nil {
		return utils.MarshalJSON(u.UpdateProject3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectLink: all fields are null")
}

type UpdateProjectProjectsNodeVersion string

const (
	UpdateProjectProjectsNodeVersionTwentyX   UpdateProjectProjectsNodeVersion = "20.x"
	UpdateProjectProjectsNodeVersionEighteenX UpdateProjectProjectsNodeVersion = "18.x"
	UpdateProjectProjectsNodeVersionSixteenX  UpdateProjectProjectsNodeVersion = "16.x"
	UpdateProjectProjectsNodeVersionFourteenX UpdateProjectProjectsNodeVersion = "14.x"
	UpdateProjectProjectsNodeVersionTwelveX   UpdateProjectProjectsNodeVersion = "12.x"
	UpdateProjectProjectsNodeVersionTenX      UpdateProjectProjectsNodeVersion = "10.x"
	UpdateProjectProjectsNodeVersionEight10X  UpdateProjectProjectsNodeVersion = "8.10.x"
)

func (e UpdateProjectProjectsNodeVersion) ToPointer() *UpdateProjectProjectsNodeVersion {
	return &e
}
func (e *UpdateProjectProjectsNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectProjectsNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsNodeVersion: %v", v)
	}
}

type UpdateProjectOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
}

func (o *UpdateProjectOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type UpdateProjectPaths struct {
	Value string `json:"value"`
}

func (o *UpdateProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectOptionsAllowlist struct {
	Paths []UpdateProjectPaths `json:"paths"`
}

func (o *UpdateProjectOptionsAllowlist) GetPaths() []UpdateProjectPaths {
	if o == nil {
		return []UpdateProjectPaths{}
	}
	return o.Paths
}

type UpdateProjectPasswordProtection struct {
}

type UpdateProjectPermissions struct {
	Monitoring                               []shared.ACLAction `json:"Monitoring,omitempty"`
	NotificationMonitoringAlert              []shared.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	AccessGroup                              []shared.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []shared.ACLAction `json:"aliasGlobal,omitempty"`
	AliasProject                             []shared.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []shared.ACLAction `json:"aliasProtectionBypass,omitempty"`
	Analytics                                []shared.ACLAction `json:"analytics,omitempty"`
	AnalyticsSampling                        []shared.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []shared.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []shared.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []shared.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []shared.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []shared.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []shared.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []shared.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []shared.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []shared.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []shared.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []shared.ACLAction `json:"blob,omitempty"`
	BlobStoreTokenSet                        []shared.ACLAction `json:"blobStoreTokenSet,omitempty"`
	Budget                                   []shared.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []shared.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []shared.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []shared.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []shared.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []shared.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []shared.ACLAction `json:"connectConfiguration,omitempty"`
	ConnectConfigurationLink                 []shared.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheBillingSettings                 []shared.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	DataCacheNamespace                       []shared.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []shared.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []shared.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []shared.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []shared.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentPreview                        []shared.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []shared.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentProductionGit                  []shared.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentPromote                        []shared.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []shared.ACLAction `json:"deploymentRollback,omitempty"`
	Domain                                   []shared.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []shared.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []shared.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []shared.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []shared.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []shared.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []shared.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []shared.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []shared.ACLAction `json:"domainTransferIn,omitempty"`
	EdgeConfig                               []shared.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []shared.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []shared.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []shared.ACLAction `json:"edgeConfigToken,omitempty"`
	EndpointVerification                     []shared.ACLAction `json:"endpointVerification,omitempty"`
	Environments                             []shared.ACLAction `json:"environments,omitempty"`
	Event                                    []shared.ACLAction `json:"event,omitempty"`
	FileUpload                               []shared.ACLAction `json:"fileUpload,omitempty"`
	GitRepository                            []shared.ACLAction `json:"gitRepository,omitempty"`
	Integration                              []shared.ACLAction `json:"integration,omitempty"`
	IntegrationConfiguration                 []shared.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationProjects         []shared.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationConfigurationTransfer         []shared.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationEvent                         []shared.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []shared.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationStore                         []shared.ACLAction `json:"integrationStore,omitempty"`
	IntegrationStoreTokenSet                 []shared.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationVercelConfigurationOverride   []shared.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IPBlocking                               []shared.ACLAction `json:"ipBlocking,omitempty"`
	Job                                      []shared.ACLAction `json:"job,omitempty"`
	JobGlobal                                []shared.ACLAction `json:"jobGlobal,omitempty"`
	LogDrain                                 []shared.ACLAction `json:"logDrain,omitempty"`
	Logs                                     []shared.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []shared.ACLAction `json:"logsPreset,omitempty"`
	MarketplaceBillingData                   []shared.ACLAction `json:"marketplaceBillingData,omitempty"`
	MonitoringAlert                          []shared.ACLAction `json:"monitoringAlert,omitempty"`
	MonitoringChart                          []shared.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringQuery                          []shared.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringSettings                       []shared.ACLAction `json:"monitoringSettings,omitempty"`
	NotificationCustomerBudget               []shared.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationDeploymentFailed             []shared.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []shared.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []shared.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []shared.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []shared.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []shared.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []shared.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []shared.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationPaymentFailed                []shared.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationStatementOfReasons           []shared.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	NotificationUsageAlert                   []shared.ACLAction `json:"notificationUsageAlert,omitempty"`
	Oauth2Application                        []shared.ACLAction `json:"oauth2Application,omitempty"`
	Oauth2Connection                         []shared.ACLAction `json:"oauth2Connection,omitempty"`
	OpenTelemetryEndpoint                    []shared.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	OptionsAllowlist                         []shared.ACLAction `json:"optionsAllowlist,omitempty"`
	OwnEvent                                 []shared.ACLAction `json:"ownEvent,omitempty"`
	PasswordProtection                       []shared.ACLAction `json:"passwordProtection,omitempty"`
	PasswordProtectionInvoiceItem            []shared.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	PaymentMethod                            []shared.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []shared.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []shared.ACLAction `json:"postgres,omitempty"`
	PostgresStoreTokenSet                    []shared.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	PreviewDeploymentSuffix                  []shared.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []shared.ACLAction `json:"proTrialOnboarding,omitempty"`
	ProductionAliasProtectionBypass          []shared.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	Project                                  []shared.ACLAction `json:"project,omitempty"`
	ProjectAccessGroup                       []shared.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []shared.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectAnalyticsUsage                    []shared.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectDeploymentExpiration              []shared.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectDeploymentHook                    []shared.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []shared.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainCheckConfig                 []shared.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectDomainMove                        []shared.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectEnvVars                           []shared.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []shared.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []shared.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectID                                []shared.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []shared.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []shared.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []shared.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []shared.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []shared.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []shared.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectProtectionBypass                  []shared.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectSupportCase                       []shared.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []shared.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectTransfer                          []shared.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferIn                        []shared.ACLAction `json:"projectTransferIn,omitempty"`
	ProjectTransferOut                       []shared.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectUsage                             []shared.ACLAction `json:"projectUsage,omitempty"`
	RateLimit                                []shared.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []shared.ACLAction `json:"redis,omitempty"`
	RedisStoreTokenSet                       []shared.ACLAction `json:"redisStoreTokenSet,omitempty"`
	RemoteCaching                            []shared.ACLAction `json:"remoteCaching,omitempty"`
	Repository                               []shared.ACLAction `json:"repository,omitempty"`
	SamlConfig                               []shared.ACLAction `json:"samlConfig,omitempty"`
	SeawallConfig                            []shared.ACLAction `json:"seawallConfig,omitempty"`
	Secret                                   []shared.ACLAction `json:"secret,omitempty"`
	SensitiveEnvironmentVariablePolicy       []shared.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	SharedEnvVarConnection                   []shared.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	SharedEnvVars                            []shared.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []shared.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	SkewProtection                           []shared.ACLAction `json:"skewProtection,omitempty"`
	Space                                    []shared.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []shared.ACLAction `json:"spaceRun,omitempty"`
	SupportCase                              []shared.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []shared.ACLAction `json:"supportCaseComment,omitempty"`
	Team                                     []shared.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []shared.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []shared.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamInvite                               []shared.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []shared.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []shared.ACLAction `json:"teamJoin,omitempty"`
	TeamOwnMembership                        []shared.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []shared.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []shared.ACLAction `json:"token,omitempty"`
	TrustedIps                               []shared.ACLAction `json:"trustedIps,omitempty"`
	Usage                                    []shared.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []shared.ACLAction `json:"usageCycle,omitempty"`
	User                                     []shared.ACLAction `json:"user,omitempty"`
	UserConnection                           []shared.ACLAction `json:"userConnection,omitempty"`
	WebAnalytics                             []shared.ACLAction `json:"webAnalytics,omitempty"`
	WebAnalyticsPlan                         []shared.ACLAction `json:"webAnalyticsPlan,omitempty"`
	WebAuthn                                 []shared.ACLAction `json:"webAuthn,omitempty"`
	Webhook                                  []shared.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []shared.ACLAction `json:"webhook-event,omitempty"`
}

func (o *UpdateProjectPermissions) GetMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectPermissions) GetNotificationMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectPermissions) GetAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *UpdateProjectPermissions) GetAliasGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectPermissions) GetAliasProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectPermissions) GetAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectPermissions) GetAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectPermissions) GetAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectPermissions) GetAuditLog() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectPermissions) GetBillingAddress() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectPermissions) GetBillingInformation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectPermissions) GetBillingInvoice() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectPermissions) GetBillingInvoiceEmailRecipient() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectPermissions) GetBillingInvoiceLanguage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectPermissions) GetBillingPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectPermissions) GetBillingPurchaseOrder() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectPermissions) GetBillingTaxID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectPermissions) GetBlob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectPermissions) GetBlobStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *UpdateProjectPermissions) GetBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectPermissions) GetCacheArtifact() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectPermissions) GetCacheArtifactUsageEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectPermissions) GetCodeChecks() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *UpdateProjectPermissions) GetConcurrentBuilds() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectPermissions) GetConnect() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectPermissions) GetConnectConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectPermissions) GetConnectConfigurationLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectPermissions) GetDataCacheBillingSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectPermissions) GetDataCacheNamespace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectPermissions) GetDeployment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectPermissions) GetDeploymentCheck() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectPermissions) GetDeploymentCheckPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectPermissions) GetDeploymentPreview() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectPermissions) GetDeploymentPrivate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectPermissions) GetDeploymentProductionGit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectPermissions) GetDeploymentPromote() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectPermissions) GetDeploymentRollback() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectPermissions) GetDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectPermissions) GetDomainAcceptDelegation() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectPermissions) GetDomainAuthCodes() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectPermissions) GetDomainCertificate() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectPermissions) GetDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectPermissions) GetDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectPermissions) GetDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectPermissions) GetDomainRecord() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectPermissions) GetDomainTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectPermissions) GetEdgeConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectPermissions) GetEdgeConfigItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectPermissions) GetEdgeConfigSchema() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *UpdateProjectPermissions) GetEdgeConfigToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectPermissions) GetEndpointVerification() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectPermissions) GetEnvironments() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateProjectPermissions) GetEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectPermissions) GetFileUpload() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectPermissions) GetGitRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectPermissions) GetIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectPermissions) GetIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationProjects() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectPermissions) GetIntegrationEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *UpdateProjectPermissions) GetIntegrationResourceSecrets() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *UpdateProjectPermissions) GetIntegrationStore() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStore
}

func (o *UpdateProjectPermissions) GetIntegrationStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *UpdateProjectPermissions) GetIntegrationVercelConfigurationOverride() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectPermissions) GetIPBlocking() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectPermissions) GetJob() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectPermissions) GetJobGlobal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectPermissions) GetLogDrain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectPermissions) GetLogs() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectPermissions) GetLogsPreset() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectPermissions) GetMarketplaceBillingData() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *UpdateProjectPermissions) GetMonitoringAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectPermissions) GetMonitoringChart() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectPermissions) GetMonitoringQuery() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectPermissions) GetMonitoringSettings() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *UpdateProjectPermissions) GetNotificationCustomerBudget() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectPermissions) GetNotificationDeploymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationDomainConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectPermissions) GetNotificationDomainExpire() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectPermissions) GetNotificationDomainMoved() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectPermissions) GetNotificationDomainPurchase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectPermissions) GetNotificationDomainRenewal() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectPermissions) GetNotificationDomainTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectPermissions) GetNotificationDomainUnverified() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectPermissions) GetNotificationPaymentFailed() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationStatementOfReasons() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *UpdateProjectPermissions) GetNotificationUsageAlert() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectPermissions) GetOauth2Application() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *UpdateProjectPermissions) GetOauth2Connection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *UpdateProjectPermissions) GetOpenTelemetryEndpoint() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectPermissions) GetOptionsAllowlist() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectPermissions) GetOwnEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectPermissions) GetPasswordProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectPermissions) GetPasswordProtectionInvoiceItem() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectPermissions) GetPaymentMethod() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectPermissions) GetPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectPermissions) GetPostgres() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectPermissions) GetPostgresStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *UpdateProjectPermissions) GetPreviewDeploymentSuffix() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectPermissions) GetProTrialOnboarding() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectPermissions) GetProductionAliasProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetProject() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectPermissions) GetProjectAccessGroup() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsSampling() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectPermissions) GetProjectDeploymentExpiration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *UpdateProjectPermissions) GetProjectDeploymentHook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectPermissions) GetProjectDomain() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectPermissions) GetProjectDomainCheckConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *UpdateProjectPermissions) GetProjectDomainMove() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectPermissions) GetProjectEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectPermissions) GetProjectID() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectPermissions) GetProjectIntegrationConfiguration() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetProjectLink() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectPermissions) GetProjectMember() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectPermissions) GetProjectMonitoring() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *UpdateProjectPermissions) GetProjectPermissions() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectPermissions) GetProjectProductionBranch() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectPermissions) GetProjectProtectionBypass() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectPermissions) GetProjectSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *UpdateProjectPermissions) GetProjectSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *UpdateProjectPermissions) GetProjectTransfer() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectPermissions) GetProjectTransferIn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectPermissions) GetProjectTransferOut() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectPermissions) GetProjectUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectPermissions) GetRateLimit() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectPermissions) GetRedis() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectPermissions) GetRedisStoreTokenSet() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *UpdateProjectPermissions) GetRemoteCaching() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectPermissions) GetRepository() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *UpdateProjectPermissions) GetSamlConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectPermissions) GetSeawallConfig() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectPermissions) GetSecret() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectPermissions) GetSharedEnvVarConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *UpdateProjectPermissions) GetSharedEnvVars() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectPermissions) GetSharedEnvVarsProduction() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetSkewProtection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *UpdateProjectPermissions) GetSpace() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectPermissions) GetSpaceRun() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectPermissions) GetSupportCase() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectPermissions) GetSupportCaseComment() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectPermissions) GetTeam() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectPermissions) GetTeamAccessRequest() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectPermissions) GetTeamFellowMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectPermissions) GetTeamInvite() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectPermissions) GetTeamInviteCode() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectPermissions) GetTeamJoin() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectPermissions) GetTeamOwnMembership() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectPermissions) GetToken() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectPermissions) GetTrustedIps() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectPermissions) GetUsage() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectPermissions) GetUsageCycle() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectPermissions) GetUser() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectPermissions) GetUserConnection() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectPermissions) GetWebAnalytics() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectPermissions) GetWebAnalyticsPlan() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectPermissions) GetWebAuthn() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *UpdateProjectPermissions) GetWebhook() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectPermissions) GetWebhookEvent() []shared.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

type UpdateProjectScope string

const (
	UpdateProjectScopeAutomationBypass UpdateProjectScope = "automation-bypass"
)

func (e UpdateProjectScope) ToPointer() *UpdateProjectScope {
	return &e
}
func (e *UpdateProjectScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectScope: %v", v)
	}
}

type UpdateProjectProtectionBypass struct {
	CreatedAt float64            `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
	Scope     UpdateProjectScope `json:"scope"`
}

func (o *UpdateProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypass) GetScope() UpdateProjectScope {
	if o == nil {
		return UpdateProjectScope("")
	}
	return o.Scope
}

type UpdateProjectHandle string

const (
	UpdateProjectHandleInit     UpdateProjectHandle = "init"
	UpdateProjectHandleFinalize UpdateProjectHandle = "finalize"
)

func (e UpdateProjectHandle) ToPointer() *UpdateProjectHandle {
	return &e
}
func (e *UpdateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = UpdateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectHandle: %v", v)
	}
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost      UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypePath      UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery     UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBody2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectValueType string

const (
	UpdateProjectValueTypeStr                                                          UpdateProjectValueType = "str"
	UpdateProjectValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectValueType = "updateProject_projects_response_200_ApplicationJSON_responseBody_2"
)

type UpdateProjectValue struct {
	Str                                                          *string
	UpdateProjectProjectsResponse200ApplicationJSONResponseBody2 *UpdateProjectProjectsResponse200ApplicationJSONResponseBody2

	Type UpdateProjectValueType
}

func CreateUpdateProjectValueStr(str string) UpdateProjectValue {
	typ := UpdateProjectValueTypeStr

	return UpdateProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectValueUpdateProjectProjectsResponse200ApplicationJSONResponseBody2(updateProjectProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectProjectsResponse200ApplicationJSONResponseBody2) UpdateProjectValue {
	typ := UpdateProjectValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBody2

	return UpdateProjectValue{
		UpdateProjectProjectsResponse200ApplicationJSONResponseBody2: &updateProjectProjectsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *UpdateProjectValue) UnmarshalJSON(data []byte) error {

	var updateProjectProjectsResponse200ApplicationJSONResponseBody2 UpdateProjectProjectsResponse200ApplicationJSONResponseBody2 = UpdateProjectProjectsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse200ApplicationJSONResponseBody2 = &updateProjectProjectsResponse200ApplicationJSONResponseBody2
		u.Type = UpdateProjectValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectValue", string(data))
}

func (u UpdateProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectProjectsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse200ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectValue: all fields are null")
}

type UpdateProjectHas struct {
	Key   *string                                                                 `json:"key,omitempty"`
	Type  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Value *UpdateProjectValue                                                     `json:"value,omitempty"`
}

func (o *UpdateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectHas) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *UpdateProjectHas) GetValue() *UpdateProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost      UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath      UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery     UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion    UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "path":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "region":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectProjectsValueType string

const (
	UpdateProjectProjectsValueTypeStr                                                                  UpdateProjectProjectsValueType = "str"
	UpdateProjectProjectsValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectProjectsValueType = "updateProject_projects_response_200_ApplicationJSON_responseBody_security_2"
)

type UpdateProjectProjectsValue struct {
	Str                                                                  *string
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2

	Type UpdateProjectProjectsValueType
}

func CreateUpdateProjectProjectsValueStr(str string) UpdateProjectProjectsValue {
	typ := UpdateProjectProjectsValueTypeStr

	return UpdateProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectProjectsValueUpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2(updateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2) UpdateProjectProjectsValue {
	typ := UpdateProjectProjectsValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2

	return UpdateProjectProjectsValue{
		UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2: &updateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2,
		Type: typ,
	}
}

func (u *UpdateProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var updateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 = &updateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2
		u.Type = UpdateProjectProjectsValueTypeUpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProjectsValue", string(data))
}

func (u UpdateProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurity2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProjectsValue: all fields are null")
}

type UpdateProjectMissing struct {
	Key   *string                                                                               `json:"key,omitempty"`
	Type  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Value *UpdateProjectProjectsValue                                                           `json:"value,omitempty"`
}

func (o *UpdateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectMissing) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *UpdateProjectMissing) GetValue() *UpdateProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectAction string

const (
	UpdateProjectActionDeny      UpdateProjectAction = "deny"
	UpdateProjectActionChallenge UpdateProjectAction = "challenge"
	UpdateProjectActionLog       UpdateProjectAction = "log"
	UpdateProjectActionBypass    UpdateProjectAction = "bypass"
	UpdateProjectActionRateLimit UpdateProjectAction = "rate_limit"
)

func (e UpdateProjectAction) ToPointer() *UpdateProjectAction {
	return &e
}
func (e *UpdateProjectAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = UpdateProjectAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAction: %v", v)
	}
}

type UpdateProjectAlgo string

const (
	UpdateProjectAlgoFixedWindow UpdateProjectAlgo = "fixed_window"
	UpdateProjectAlgoTokenBucket UpdateProjectAlgo = "token_bucket"
)

func (e UpdateProjectAlgo) ToPointer() *UpdateProjectAlgo {
	return &e
}
func (e *UpdateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAlgo: %v", v)
	}
}

type UpdateProjectErl struct {
	Algo   UpdateProjectAlgo `json:"algo"`
	Keys   []string          `json:"keys"`
	Limit  float64           `json:"limit"`
	Window float64           `json:"window"`
}

func (o *UpdateProjectErl) GetAlgo() UpdateProjectAlgo {
	if o == nil {
		return UpdateProjectAlgo("")
	}
	return o.Algo
}

func (o *UpdateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *UpdateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

type UpdateProjectMitigate struct {
	Action UpdateProjectAction `json:"action"`
	Erl    *UpdateProjectErl   `json:"erl,omitempty"`
	RuleID string              `json:"rule_id"`
}

func (o *UpdateProjectMitigate) GetAction() UpdateProjectAction {
	if o == nil {
		return UpdateProjectAction("")
	}
	return o.Action
}

func (o *UpdateProjectMitigate) GetErl() *UpdateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

func (o *UpdateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

type UpdateProjectProjectsResponse200ApplicationJSON2 struct {
	Eq   *string  `json:"eq,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Re   *string  `json:"re,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectProjectsResponse200ApplicationJSON2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

type UpdateProjectSrcType string

const (
	UpdateProjectSrcTypeStr                                              UpdateProjectSrcType = "str"
	UpdateProjectSrcTypeUpdateProjectProjectsResponse200ApplicationJSON2 UpdateProjectSrcType = "updateProject_projects_response_200_ApplicationJSON_2"
)

type UpdateProjectSrc struct {
	Str                                              *string
	UpdateProjectProjectsResponse200ApplicationJSON2 *UpdateProjectProjectsResponse200ApplicationJSON2

	Type UpdateProjectSrcType
}

func CreateUpdateProjectSrcStr(str string) UpdateProjectSrc {
	typ := UpdateProjectSrcTypeStr

	return UpdateProjectSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectSrcUpdateProjectProjectsResponse200ApplicationJSON2(updateProjectProjectsResponse200ApplicationJSON2 UpdateProjectProjectsResponse200ApplicationJSON2) UpdateProjectSrc {
	typ := UpdateProjectSrcTypeUpdateProjectProjectsResponse200ApplicationJSON2

	return UpdateProjectSrc{
		UpdateProjectProjectsResponse200ApplicationJSON2: &updateProjectProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *UpdateProjectSrc) UnmarshalJSON(data []byte) error {

	var updateProjectProjectsResponse200ApplicationJSON2 UpdateProjectProjectsResponse200ApplicationJSON2 = UpdateProjectProjectsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.UpdateProjectProjectsResponse200ApplicationJSON2 = &updateProjectProjectsResponse200ApplicationJSON2
		u.Type = UpdateProjectSrcTypeUpdateProjectProjectsResponse200ApplicationJSON2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectSrc", string(data))
}

func (u UpdateProjectSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectSrc: all fields are null")
}

type UpdateProjectFirewallRoutes struct {
	Dest     *string                `json:"dest,omitempty"`
	Handle   *UpdateProjectHandle   `json:"handle,omitempty"`
	Has      []UpdateProjectHas     `json:"has,omitempty"`
	Missing  []UpdateProjectMissing `json:"missing,omitempty"`
	Mitigate *UpdateProjectMitigate `json:"mitigate,omitempty"`
	Src      *UpdateProjectSrc      `json:"src,omitempty"`
	Status   *float64               `json:"status,omitempty"`
}

func (o *UpdateProjectFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectFirewallRoutes) GetHandle() *UpdateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *UpdateProjectFirewallRoutes) GetHas() []UpdateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *UpdateProjectFirewallRoutes) GetMissing() []UpdateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *UpdateProjectFirewallRoutes) GetMitigate() *UpdateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

func (o *UpdateProjectFirewallRoutes) GetSrc() *UpdateProjectSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateProjectSecurity struct {
	AttackModeActiveUntil  *float64                      `json:"attackModeActiveUntil,omitempty"`
	AttackModeEnabled      *bool                         `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                      `json:"attackModeUpdatedAt,omitempty"`
	FirewallConfigVersion  *float64                      `json:"firewallConfigVersion,omitempty"`
	FirewallEnabled        *bool                         `json:"firewallEnabled,omitempty"`
	FirewallRoutes         []UpdateProjectFirewallRoutes `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                         `json:"firewallSeawallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                      `json:"firewallUpdatedAt,omitempty"`
	Ja3Enabled             *bool                         `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                         `json:"ja4Enabled,omitempty"`
}

func (o *UpdateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *UpdateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *UpdateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *UpdateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *UpdateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *UpdateProjectSecurity) GetFirewallRoutes() []UpdateProjectFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *UpdateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *UpdateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *UpdateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *UpdateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

type UpdateProjectSpeedInsights struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *UpdateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type UpdateProjectProjectsResponseDeploymentType string

const (
	UpdateProjectProjectsResponseDeploymentTypeAll                              UpdateProjectProjectsResponseDeploymentType = "all"
	UpdateProjectProjectsResponseDeploymentTypePreview                          UpdateProjectProjectsResponseDeploymentType = "preview"
	UpdateProjectProjectsResponseDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsResponseDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectProjectsResponseDeploymentType) ToPointer() *UpdateProjectProjectsResponseDeploymentType {
	return &e
}
func (e *UpdateProjectProjectsResponseDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectProjectsResponseDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponseDeploymentType: %v", v)
	}
}

type UpdateProjectSsoProtection struct {
	DeploymentType UpdateProjectProjectsResponseDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectSsoProtection) GetDeploymentType() UpdateProjectProjectsResponseDeploymentType {
	if o == nil {
		return UpdateProjectProjectsResponseDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectTargetsType string

const (
	UpdateProjectTargetsTypeStr        UpdateProjectTargetsType = "str"
	UpdateProjectTargetsTypeArrayOfStr UpdateProjectTargetsType = "arrayOfStr"
)

type UpdateProjectTargets struct {
	Str        *string
	ArrayOfStr []string

	Type UpdateProjectTargetsType
}

func CreateUpdateProjectTargetsStr(str string) UpdateProjectTargets {
	typ := UpdateProjectTargetsTypeStr

	return UpdateProjectTargets{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectTargetsArrayOfStr(arrayOfStr []string) UpdateProjectTargets {
	typ := UpdateProjectTargetsTypeArrayOfStr

	return UpdateProjectTargets{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *UpdateProjectTargets) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectTargetsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectTargetsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTargets", string(data))
}

func (u UpdateProjectTargets) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTargets: all fields are null")
}

type UpdateProjectProjectsResponse200DeploymentType string

const (
	UpdateProjectProjectsResponse200DeploymentTypeAll                              UpdateProjectProjectsResponse200DeploymentType = "all"
	UpdateProjectProjectsResponse200DeploymentTypePreview                          UpdateProjectProjectsResponse200DeploymentType = "preview"
	UpdateProjectProjectsResponse200DeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsResponse200DeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProjectProjectsResponse200DeploymentTypeProduction                       UpdateProjectProjectsResponse200DeploymentType = "production"
)

func (e UpdateProjectProjectsResponse200DeploymentType) ToPointer() *UpdateProjectProjectsResponse200DeploymentType {
	return &e
}
func (e *UpdateProjectProjectsResponse200DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProjectProjectsResponse200DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200DeploymentType: %v", v)
	}
}

type UpdateProjectProjects2 struct {
	DeploymentType UpdateProjectProjectsResponse200DeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectProjects2) GetDeploymentType() UpdateProjectProjectsResponse200DeploymentType {
	if o == nil {
		return UpdateProjectProjectsResponse200DeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectAddresses struct {
	Note  *string `json:"note,omitempty"`
	Value string  `json:"value"`
}

func (o *UpdateProjectAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *UpdateProjectAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectProjectsResponse200ApplicationJSONDeploymentType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONDeploymentTypeAll                              UpdateProjectProjectsResponse200ApplicationJSONDeploymentType = "all"
	UpdateProjectProjectsResponse200ApplicationJSONDeploymentTypePreview                          UpdateProjectProjectsResponse200ApplicationJSONDeploymentType = "preview"
	UpdateProjectProjectsResponse200ApplicationJSONDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsResponse200ApplicationJSONDeploymentType = "prod_deployment_urls_and_all_previews"
	UpdateProjectProjectsResponse200ApplicationJSONDeploymentTypeProduction                       UpdateProjectProjectsResponse200ApplicationJSONDeploymentType = "production"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONDeploymentType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONDeploymentType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = UpdateProjectProjectsResponse200ApplicationJSONDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONDeploymentType: %v", v)
	}
}

type UpdateProjectProtectionMode string

const (
	UpdateProjectProtectionModeExclusive  UpdateProjectProtectionMode = "exclusive"
	UpdateProjectProtectionModeAdditional UpdateProjectProtectionMode = "additional"
)

func (e UpdateProjectProtectionMode) ToPointer() *UpdateProjectProtectionMode {
	return &e
}
func (e *UpdateProjectProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = UpdateProjectProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionMode: %v", v)
	}
}

type UpdateProjectProjects1 struct {
	Addresses      []UpdateProjectAddresses                                      `json:"addresses"`
	DeploymentType UpdateProjectProjectsResponse200ApplicationJSONDeploymentType `json:"deploymentType"`
	ProtectionMode UpdateProjectProtectionMode                                   `json:"protectionMode"`
}

func (o *UpdateProjectProjects1) GetAddresses() []UpdateProjectAddresses {
	if o == nil {
		return []UpdateProjectAddresses{}
	}
	return o.Addresses
}

func (o *UpdateProjectProjects1) GetDeploymentType() UpdateProjectProjectsResponse200ApplicationJSONDeploymentType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONDeploymentType("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectProjects1) GetProtectionMode() UpdateProjectProtectionMode {
	if o == nil {
		return UpdateProjectProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectTrustedIpsType string

const (
	UpdateProjectTrustedIpsTypeUpdateProjectProjects1 UpdateProjectTrustedIpsType = "updateProject_projects_1"
	UpdateProjectTrustedIpsTypeUpdateProjectProjects2 UpdateProjectTrustedIpsType = "updateProject_projects_2"
)

type UpdateProjectTrustedIps struct {
	UpdateProjectProjects1 *UpdateProjectProjects1
	UpdateProjectProjects2 *UpdateProjectProjects2

	Type UpdateProjectTrustedIpsType
}

func CreateUpdateProjectTrustedIpsUpdateProjectProjects1(updateProjectProjects1 UpdateProjectProjects1) UpdateProjectTrustedIps {
	typ := UpdateProjectTrustedIpsTypeUpdateProjectProjects1

	return UpdateProjectTrustedIps{
		UpdateProjectProjects1: &updateProjectProjects1,
		Type:                   typ,
	}
}

func CreateUpdateProjectTrustedIpsUpdateProjectProjects2(updateProjectProjects2 UpdateProjectProjects2) UpdateProjectTrustedIps {
	typ := UpdateProjectTrustedIpsTypeUpdateProjectProjects2

	return UpdateProjectTrustedIps{
		UpdateProjectProjects2: &updateProjectProjects2,
		Type:                   typ,
	}
}

func (u *UpdateProjectTrustedIps) UnmarshalJSON(data []byte) error {

	var updateProjectProjects2 UpdateProjectProjects2 = UpdateProjectProjects2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjects2, "", true, true); err == nil {
		u.UpdateProjectProjects2 = &updateProjectProjects2
		u.Type = UpdateProjectTrustedIpsTypeUpdateProjectProjects2
		return nil
	}

	var updateProjectProjects1 UpdateProjectProjects1 = UpdateProjectProjects1{}
	if err := utils.UnmarshalJSON(data, &updateProjectProjects1, "", true, true); err == nil {
		u.UpdateProjectProjects1 = &updateProjectProjects1
		u.Type = UpdateProjectTrustedIpsTypeUpdateProjectProjects1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTrustedIps", string(data))
}

func (u UpdateProjectTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectProjects1 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjects1, "", true)
	}

	if u.UpdateProjectProjects2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTrustedIps: all fields are null")
}

type UpdateProjectWebAnalytics struct {
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	ID         string   `json:"id"`
}

func (o *UpdateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// UpdateProjectResponseBody - The project was successfully updated
type UpdateProjectResponseBody struct {
	AccountID                            string                                   `json:"accountId"`
	Analytics                            *UpdateProjectAnalytics                  `json:"analytics,omitempty"`
	AutoAssignCustomDomains              *bool                                    `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                  `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	AutoExposeSystemEnvs                 *bool                                    `json:"autoExposeSystemEnvs,omitempty"`
	BuildCommand                         *string                                  `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                  `json:"commandForIgnoringBuildStep,omitempty"`
	ConcurrencyBucketName                *string                                  `json:"concurrencyBucketName,omitempty"`
	ConnectBuildsEnabled                 *bool                                    `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID               *string                                  `json:"connectConfigurationId,omitempty"`
	CreatedAt                            *float64                                 `json:"createdAt,omitempty"`
	Crons                                *UpdateProjectCrons                      `json:"crons,omitempty"`
	CustomerSupportCodeVisibility        *bool                                    `json:"customerSupportCodeVisibility,omitempty"`
	DataCache                            *UpdateProjectDataCache                  `json:"dataCache,omitempty"`
	DevCommand                           *string                                  `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                     `json:"directoryListing"`
	EnablePreviewFeedback                *bool                                    `json:"enablePreviewFeedback,omitempty"`
	Env                                  []UpdateProjectEnv                       `json:"env,omitempty"`
	Framework                            *UpdateProjectProjectsFramework          `json:"framework,omitempty"`
	GitComments                          *UpdateProjectGitComments                `json:"gitComments,omitempty"`
	GitForkProtection                    *bool                                    `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                    `json:"gitLFS,omitempty"`
	HasActiveBranches                    *bool                                    `json:"hasActiveBranches,omitempty"`
	HasFloatingAliases                   *bool                                    `json:"hasFloatingAliases,omitempty"`
	ID                                   string                                   `json:"id"`
	InstallCommand                       *string                                  `json:"installCommand,omitempty"`
	LastAliasRequest                     *UpdateProjectLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	LastRollbackTarget                   *UpdateProjectLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LatestDeployments                    []UpdateProjectLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *UpdateProjectLink                       `json:"link,omitempty"`
	Live                                 *bool                                    `json:"live,omitempty"`
	Name                                 string                                   `json:"name"`
	NodeVersion                          UpdateProjectProjectsNodeVersion         `json:"nodeVersion"`
	OidcTokenConfig                      *UpdateProjectOidcTokenConfig            `json:"oidcTokenConfig,omitempty"`
	OptionsAllowlist                     *UpdateProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                  `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                  `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *UpdateProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	Paused                               *bool                                    `json:"paused,omitempty"`
	Permissions                          *UpdateProjectPermissions                `json:"permissions,omitempty"`
	ProductionDeploymentsFastLane        *bool                                    `json:"productionDeploymentsFastLane,omitempty"`
	ProtectionBypass                     map[string]UpdateProjectProtectionBypass `json:"protectionBypass,omitempty"`
	PublicSource                         *bool                                    `json:"publicSource,omitempty"`
	RootDirectory                        *string                                  `json:"rootDirectory,omitempty"`
	Security                             *UpdateProjectSecurity                   `json:"security,omitempty"`
	ServerlessFunctionRegion             *string                                  `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                    `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                 `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                 `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                    `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                    `json:"sourceFilesOutsideRootDirectory,omitempty"`
	SpeedInsights                        *UpdateProjectSpeedInsights              `json:"speedInsights,omitempty"`
	SsoProtection                        *UpdateProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]UpdateProjectTargets          `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                  `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                  `json:"transferredFromAccountId,omitempty"`
	TrustedIps                           *UpdateProjectTrustedIps                 `json:"trustedIps,omitempty"`
	UpdatedAt                            *float64                                 `json:"updatedAt,omitempty"`
	WebAnalytics                         *UpdateProjectWebAnalytics               `json:"webAnalytics,omitempty"`
}

func (o *UpdateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectResponseBody) GetAnalytics() *UpdateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectResponseBody) GetCrons() *UpdateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectResponseBody) GetDataCache() *UpdateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectResponseBody) GetEnv() []UpdateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectResponseBody) GetFramework() *UpdateProjectProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectResponseBody) GetGitComments() *UpdateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectResponseBody) GetHasFloatingAliases() *bool {
	if o == nil {
		return nil
	}
	return o.HasFloatingAliases
}

func (o *UpdateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectResponseBody) GetLastAliasRequest() *UpdateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectResponseBody) GetLastRollbackTarget() *UpdateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectResponseBody) GetLatestDeployments() []UpdateProjectLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectResponseBody) GetLink() *UpdateProjectLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectResponseBody) GetNodeVersion() UpdateProjectProjectsNodeVersion {
	if o == nil {
		return UpdateProjectProjectsNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectResponseBody) GetOidcTokenConfig() *UpdateProjectOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectResponseBody) GetOptionsAllowlist() *UpdateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetPasswordProtection() *UpdateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectResponseBody) GetPermissions() *UpdateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectResponseBody) GetProtectionBypass() map[string]UpdateProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectResponseBody) GetSecurity() *UpdateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectResponseBody) GetSpeedInsights() *UpdateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectResponseBody) GetSsoProtection() *UpdateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectResponseBody) GetTargets() map[string]UpdateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectResponseBody) GetTrustedIps() *UpdateProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectResponseBody) GetWebAnalytics() *UpdateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type UpdateProjectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The project was successfully updated
	Object *UpdateProjectResponseBody
}

func (o *UpdateProjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateProjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateProjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateProjectResponse) GetObject() *UpdateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
