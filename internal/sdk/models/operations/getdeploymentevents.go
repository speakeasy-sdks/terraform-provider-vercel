// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

// Direction - Order of the returned events based on the timestamp.
type Direction string

const (
	DirectionBackward Direction = "backward"
	DirectionForward  Direction = "forward"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "backward":
		fallthrough
	case "forward":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type StatusCodeType string

const (
	StatusCodeTypeNumber StatusCodeType = "number"
	StatusCodeTypeStr    StatusCodeType = "str"
)

// StatusCode - HTTP status code range to filter events by.
type StatusCode struct {
	Number *float64
	Str    *string

	Type StatusCodeType
}

func CreateStatusCodeNumber(number float64) StatusCode {
	typ := StatusCodeTypeNumber

	return StatusCode{
		Number: &number,
		Type:   typ,
	}
}

func CreateStatusCodeStr(str string) StatusCode {
	typ := StatusCodeTypeStr

	return StatusCode{
		Str:  &str,
		Type: typ,
	}
}

func (u *StatusCode) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = StatusCodeTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StatusCodeTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusCode", string(data))
}

func (u StatusCode) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type StatusCode: all fields are null")
}

type GetDeploymentEventsRequest struct {
	Builds    *float64 `queryParam:"style=form,explode=true,name=builds"`
	Delimiter *float64 `queryParam:"style=form,explode=true,name=delimiter"`
	// Order of the returned events based on the timestamp.
	Direction *Direction `default:"forward" queryParam:"style=form,explode=true,name=direction"`
	// When enabled, this endpoint will return live events as they happen.
	Follow *float64 `queryParam:"style=form,explode=true,name=follow"`
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Maximum number of events to return. Provide `-1` to return all available logs.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Deployment build ID.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Timestamp for when build logs should be pulled from.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// HTTP status code range to filter events by.
	StatusCode *StatusCode `queryParam:"style=form,explode=true,name=statusCode"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Timestamp for when the build logs should be pulled up until.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
}

func (g GetDeploymentEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDeploymentEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetDeploymentEventsRequest) GetBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeploymentEventsRequest) GetDelimiter() *float64 {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *GetDeploymentEventsRequest) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetDeploymentEventsRequest) GetFollow() *float64 {
	if o == nil {
		return nil
	}
	return o.Follow
}

func (o *GetDeploymentEventsRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetDeploymentEventsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetDeploymentEventsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetDeploymentEventsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentEventsRequest) GetStatusCode() *StatusCode {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentEventsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

type GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache string

const (
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCacheMiss        GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "MISS"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCacheHit         GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "HIT"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCacheStale       GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "STALE"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCacheBypass      GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "BYPASS"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCachePrerender   GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "PRERENDER"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCacheRevalidated GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache) ToPointer() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache: %v", v)
	}
}

type GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy struct {
	CacheID          *string                                                                        `json:"cacheId,omitempty"`
	ClientIP         string                                                                         `json:"clientIp"`
	Host             string                                                                         `json:"host"`
	LambdaRegion     *string                                                                        `json:"lambdaRegion,omitempty"`
	Method           string                                                                         `json:"method"`
	Path             string                                                                         `json:"path"`
	PathType         *string                                                                        `json:"pathType,omitempty"`
	Referer          string                                                                         `json:"referer"`
	Region           string                                                                         `json:"region"`
	ResponseByteSize *float64                                                                       `json:"responseByteSize,omitempty"`
	Scheme           *string                                                                        `json:"scheme,omitempty"`
	StatusCode       *float64                                                                       `json:"statusCode,omitempty"`
	Timestamp        float64                                                                        `json:"timestamp"`
	UserAgent        []string                                                                       `json:"userAgent"`
	VercelCache      *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache `json:"vercelCache,omitempty"`
	VercelID         *string                                                                        `json:"vercelId,omitempty"`
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetVercelCache() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type GetDeploymentEventsDeploymentsPayload struct {
	Created      *float64                                                                 `json:"created,omitempty"`
	Date         float64                                                                  `json:"date"`
	DeploymentID string                                                                   `json:"deploymentId"`
	ID           string                                                                   `json:"id"`
	Info         *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo  `json:"info,omitempty"`
	Proxy        *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy `json:"proxy,omitempty"`
	RequestID    *string                                                                  `json:"requestId,omitempty"`
	Serial       string                                                                   `json:"serial"`
	StatusCode   *float64                                                                 `json:"statusCode,omitempty"`
	Text         *string                                                                  `json:"text,omitempty"`
}

func (o *GetDeploymentEventsDeploymentsPayload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *GetDeploymentEventsDeploymentsPayload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsDeploymentsPayload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsDeploymentsPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsDeploymentsPayload) GetInfo() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *GetDeploymentEventsDeploymentsPayload) GetProxy() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEventsDeploymentsPayload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEventsDeploymentsPayload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsDeploymentsPayload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsPayload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

type GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType string

const (
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeCommand                GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "command"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeStdout                 GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "stdout"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeStderr                 GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "stderr"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeExit                   GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "exit"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeDeploymentState        GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "deployment-state"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeDelimiter              GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "delimiter"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeMiddleware             GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "middleware"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeMiddlewareInvocation   GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "middleware-invocation"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeEdgeFunctionInvocation GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "edge-function-invocation"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyTypeFatal                  GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType = "fatal"
)

func (e GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType) ToPointer() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType: %v", v)
	}
}

type GetDeploymentEventsDeploymentsResponse2 struct {
	Created float64                                                                            `json:"created"`
	Payload GetDeploymentEventsDeploymentsPayload                                              `json:"payload"`
	Type    GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsResponse2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsDeploymentsResponse2) GetPayload() GetDeploymentEventsDeploymentsPayload {
	if o == nil {
		return GetDeploymentEventsDeploymentsPayload{}
	}
	return o.Payload
}

func (o *GetDeploymentEventsDeploymentsResponse2) GetType() GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType {
	if o == nil {
		return GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONResponseBodyType("")
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsInfo struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsDeploymentsInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsDeploymentsInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentEventsDeploymentsInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsDeploymentsInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsVercelCache string

const (
	GetDeploymentEventsDeploymentsVercelCacheMiss        GetDeploymentEventsDeploymentsVercelCache = "MISS"
	GetDeploymentEventsDeploymentsVercelCacheHit         GetDeploymentEventsDeploymentsVercelCache = "HIT"
	GetDeploymentEventsDeploymentsVercelCacheStale       GetDeploymentEventsDeploymentsVercelCache = "STALE"
	GetDeploymentEventsDeploymentsVercelCacheBypass      GetDeploymentEventsDeploymentsVercelCache = "BYPASS"
	GetDeploymentEventsDeploymentsVercelCachePrerender   GetDeploymentEventsDeploymentsVercelCache = "PRERENDER"
	GetDeploymentEventsDeploymentsVercelCacheRevalidated GetDeploymentEventsDeploymentsVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsDeploymentsVercelCache) ToPointer() *GetDeploymentEventsDeploymentsVercelCache {
	return &e
}
func (e *GetDeploymentEventsDeploymentsVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsDeploymentsVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsVercelCache: %v", v)
	}
}

type GetDeploymentEventsDeploymentsProxy struct {
	CacheID          *string                                    `json:"cacheId,omitempty"`
	ClientIP         string                                     `json:"clientIp"`
	Host             string                                     `json:"host"`
	LambdaRegion     *string                                    `json:"lambdaRegion,omitempty"`
	Method           string                                     `json:"method"`
	Path             string                                     `json:"path"`
	PathType         *string                                    `json:"pathType,omitempty"`
	Referer          string                                     `json:"referer"`
	Region           string                                     `json:"region"`
	ResponseByteSize *float64                                   `json:"responseByteSize,omitempty"`
	Scheme           *string                                    `json:"scheme,omitempty"`
	StatusCode       *float64                                   `json:"statusCode,omitempty"`
	Timestamp        float64                                    `json:"timestamp"`
	UserAgent        []string                                   `json:"userAgent"`
	VercelCache      *GetDeploymentEventsDeploymentsVercelCache `json:"vercelCache,omitempty"`
	VercelID         *string                                    `json:"vercelId,omitempty"`
}

func (o *GetDeploymentEventsDeploymentsProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsDeploymentsProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsDeploymentsProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsDeploymentsProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *GetDeploymentEventsDeploymentsProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsDeploymentsProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsDeploymentsProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsDeploymentsProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsDeploymentsProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsDeploymentsProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsDeploymentsProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsDeploymentsProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsDeploymentsProxy) GetVercelCache() *GetDeploymentEventsDeploymentsVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsDeploymentsProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType string

const (
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeCommand                GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "command"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeStdout                 GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "stdout"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeStderr                 GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "stderr"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeExit                   GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "exit"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeDeploymentState        GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "deployment-state"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeDelimiter              GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "delimiter"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeMiddleware             GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "middleware"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeMiddlewareInvocation   GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "middleware-invocation"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeEdgeFunctionInvocation GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "edge-function-invocation"
	GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONTypeFatal                  GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType = "fatal"
)

func (e GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType) ToPointer() *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType: %v", v)
	}
}

type GetDeploymentEventsDeploymentsResponse1 struct {
	Created      float64                                                                `json:"created"`
	Date         float64                                                                `json:"date"`
	DeploymentID string                                                                 `json:"deploymentId"`
	ID           string                                                                 `json:"id"`
	Info         GetDeploymentEventsDeploymentsInfo                                     `json:"info"`
	Proxy        *GetDeploymentEventsDeploymentsProxy                                   `json:"proxy,omitempty"`
	RequestID    *string                                                                `json:"requestId,omitempty"`
	Serial       string                                                                 `json:"serial"`
	StatusCode   *float64                                                               `json:"statusCode,omitempty"`
	Text         *string                                                                `json:"text,omitempty"`
	Type         GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetInfo() GetDeploymentEventsDeploymentsInfo {
	if o == nil {
		return GetDeploymentEventsDeploymentsInfo{}
	}
	return o.Info
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetProxy() *GetDeploymentEventsDeploymentsProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *GetDeploymentEventsDeploymentsResponse1) GetType() GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType {
	if o == nil {
		return GetDeploymentEventsDeploymentsResponse200ApplicationStreamPlusJSONType("")
	}
	return o.Type
}

type GetDeploymentEvents3Type string

const (
	GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse1 GetDeploymentEvents3Type = "getDeploymentEvents_deployments_response_1"
	GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse2 GetDeploymentEvents3Type = "getDeploymentEvents_deployments_response_2"
)

type GetDeploymentEvents3 struct {
	GetDeploymentEventsDeploymentsResponse1 *GetDeploymentEventsDeploymentsResponse1
	GetDeploymentEventsDeploymentsResponse2 *GetDeploymentEventsDeploymentsResponse2

	Type GetDeploymentEvents3Type
}

func CreateGetDeploymentEvents3GetDeploymentEventsDeploymentsResponse1(getDeploymentEventsDeploymentsResponse1 GetDeploymentEventsDeploymentsResponse1) GetDeploymentEvents3 {
	typ := GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse1

	return GetDeploymentEvents3{
		GetDeploymentEventsDeploymentsResponse1: &getDeploymentEventsDeploymentsResponse1,
		Type:                                    typ,
	}
}

func CreateGetDeploymentEvents3GetDeploymentEventsDeploymentsResponse2(getDeploymentEventsDeploymentsResponse2 GetDeploymentEventsDeploymentsResponse2) GetDeploymentEvents3 {
	typ := GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse2

	return GetDeploymentEvents3{
		GetDeploymentEventsDeploymentsResponse2: &getDeploymentEventsDeploymentsResponse2,
		Type:                                    typ,
	}
}

func (u *GetDeploymentEvents3) UnmarshalJSON(data []byte) error {

	var getDeploymentEventsDeploymentsResponse2 GetDeploymentEventsDeploymentsResponse2 = GetDeploymentEventsDeploymentsResponse2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsDeploymentsResponse2, "", true, true); err == nil {
		u.GetDeploymentEventsDeploymentsResponse2 = &getDeploymentEventsDeploymentsResponse2
		u.Type = GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse2
		return nil
	}

	var getDeploymentEventsDeploymentsResponse1 GetDeploymentEventsDeploymentsResponse1 = GetDeploymentEventsDeploymentsResponse1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsDeploymentsResponse1, "", true, true); err == nil {
		u.GetDeploymentEventsDeploymentsResponse1 = &getDeploymentEventsDeploymentsResponse1
		u.Type = GetDeploymentEvents3TypeGetDeploymentEventsDeploymentsResponse1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEvents3", string(data))
}

func (u GetDeploymentEvents3) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentEventsDeploymentsResponse1 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsDeploymentsResponse1, "", true)
	}

	if u.GetDeploymentEventsDeploymentsResponse2 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsDeploymentsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEvents3: all fields are null")
}

type GetDeploymentEventsDeploymentsResponse200Info struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsDeploymentsResponse200Info) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsResponse200VercelCache string

const (
	GetDeploymentEventsDeploymentsResponse200VercelCacheMiss        GetDeploymentEventsDeploymentsResponse200VercelCache = "MISS"
	GetDeploymentEventsDeploymentsResponse200VercelCacheHit         GetDeploymentEventsDeploymentsResponse200VercelCache = "HIT"
	GetDeploymentEventsDeploymentsResponse200VercelCacheStale       GetDeploymentEventsDeploymentsResponse200VercelCache = "STALE"
	GetDeploymentEventsDeploymentsResponse200VercelCacheBypass      GetDeploymentEventsDeploymentsResponse200VercelCache = "BYPASS"
	GetDeploymentEventsDeploymentsResponse200VercelCachePrerender   GetDeploymentEventsDeploymentsResponse200VercelCache = "PRERENDER"
	GetDeploymentEventsDeploymentsResponse200VercelCacheRevalidated GetDeploymentEventsDeploymentsResponse200VercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsDeploymentsResponse200VercelCache) ToPointer() *GetDeploymentEventsDeploymentsResponse200VercelCache {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponse200VercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsDeploymentsResponse200VercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponse200VercelCache: %v", v)
	}
}

type GetDeploymentEventsDeploymentsResponse200Proxy struct {
	CacheID          *string                                               `json:"cacheId,omitempty"`
	ClientIP         string                                                `json:"clientIp"`
	Host             string                                                `json:"host"`
	LambdaRegion     *string                                               `json:"lambdaRegion,omitempty"`
	Method           string                                                `json:"method"`
	Path             string                                                `json:"path"`
	PathType         *string                                               `json:"pathType,omitempty"`
	Referer          string                                                `json:"referer"`
	Region           string                                                `json:"region"`
	ResponseByteSize *float64                                              `json:"responseByteSize,omitempty"`
	Scheme           *string                                               `json:"scheme,omitempty"`
	StatusCode       *float64                                              `json:"statusCode,omitempty"`
	Timestamp        float64                                               `json:"timestamp"`
	UserAgent        []string                                              `json:"userAgent"`
	VercelCache      *GetDeploymentEventsDeploymentsResponse200VercelCache `json:"vercelCache,omitempty"`
	VercelID         *string                                               `json:"vercelId,omitempty"`
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetVercelCache() *GetDeploymentEventsDeploymentsResponse200VercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsDeploymentsResponse200Proxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type GetDeploymentEventsPayload struct {
	Created      *float64                                        `json:"created,omitempty"`
	Date         float64                                         `json:"date"`
	DeploymentID string                                          `json:"deploymentId"`
	ID           string                                          `json:"id"`
	Info         *GetDeploymentEventsDeploymentsResponse200Info  `json:"info,omitempty"`
	Proxy        *GetDeploymentEventsDeploymentsResponse200Proxy `json:"proxy,omitempty"`
	RequestID    *string                                         `json:"requestId,omitempty"`
	Serial       string                                          `json:"serial"`
	StatusCode   *float64                                        `json:"statusCode,omitempty"`
	Text         *string                                         `json:"text,omitempty"`
}

func (o *GetDeploymentEventsPayload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *GetDeploymentEventsPayload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsPayload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsPayload) GetInfo() *GetDeploymentEventsDeploymentsResponse200Info {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *GetDeploymentEventsPayload) GetProxy() *GetDeploymentEventsDeploymentsResponse200Proxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEventsPayload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEventsPayload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsPayload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsPayload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

type GetDeploymentEventsDeploymentsResponse200Type string

const (
	GetDeploymentEventsDeploymentsResponse200TypeCommand                GetDeploymentEventsDeploymentsResponse200Type = "command"
	GetDeploymentEventsDeploymentsResponse200TypeStdout                 GetDeploymentEventsDeploymentsResponse200Type = "stdout"
	GetDeploymentEventsDeploymentsResponse200TypeStderr                 GetDeploymentEventsDeploymentsResponse200Type = "stderr"
	GetDeploymentEventsDeploymentsResponse200TypeExit                   GetDeploymentEventsDeploymentsResponse200Type = "exit"
	GetDeploymentEventsDeploymentsResponse200TypeDeploymentState        GetDeploymentEventsDeploymentsResponse200Type = "deployment-state"
	GetDeploymentEventsDeploymentsResponse200TypeDelimiter              GetDeploymentEventsDeploymentsResponse200Type = "delimiter"
	GetDeploymentEventsDeploymentsResponse200TypeMiddleware             GetDeploymentEventsDeploymentsResponse200Type = "middleware"
	GetDeploymentEventsDeploymentsResponse200TypeMiddlewareInvocation   GetDeploymentEventsDeploymentsResponse200Type = "middleware-invocation"
	GetDeploymentEventsDeploymentsResponse200TypeEdgeFunctionInvocation GetDeploymentEventsDeploymentsResponse200Type = "edge-function-invocation"
	GetDeploymentEventsDeploymentsResponse200TypeFatal                  GetDeploymentEventsDeploymentsResponse200Type = "fatal"
)

func (e GetDeploymentEventsDeploymentsResponse200Type) ToPointer() *GetDeploymentEventsDeploymentsResponse200Type {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponse200Type: %v", v)
	}
}

type GetDeploymentEventsDeployments2 struct {
	Created float64                                       `json:"created"`
	Payload GetDeploymentEventsPayload                    `json:"payload"`
	Type    GetDeploymentEventsDeploymentsResponse200Type `json:"type"`
}

func (o *GetDeploymentEventsDeployments2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsDeployments2) GetPayload() GetDeploymentEventsPayload {
	if o == nil {
		return GetDeploymentEventsPayload{}
	}
	return o.Payload
}

func (o *GetDeploymentEventsDeployments2) GetType() GetDeploymentEventsDeploymentsResponse200Type {
	if o == nil {
		return GetDeploymentEventsDeploymentsResponse200Type("")
	}
	return o.Type
}

type GetDeploymentEventsInfo struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *GetDeploymentEventsInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentEventsInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetDeploymentEventsVercelCache string

const (
	GetDeploymentEventsVercelCacheMiss        GetDeploymentEventsVercelCache = "MISS"
	GetDeploymentEventsVercelCacheHit         GetDeploymentEventsVercelCache = "HIT"
	GetDeploymentEventsVercelCacheStale       GetDeploymentEventsVercelCache = "STALE"
	GetDeploymentEventsVercelCacheBypass      GetDeploymentEventsVercelCache = "BYPASS"
	GetDeploymentEventsVercelCachePrerender   GetDeploymentEventsVercelCache = "PRERENDER"
	GetDeploymentEventsVercelCacheRevalidated GetDeploymentEventsVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsVercelCache) ToPointer() *GetDeploymentEventsVercelCache {
	return &e
}
func (e *GetDeploymentEventsVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsVercelCache: %v", v)
	}
}

type GetDeploymentEventsProxy struct {
	CacheID          *string                         `json:"cacheId,omitempty"`
	ClientIP         string                          `json:"clientIp"`
	Host             string                          `json:"host"`
	LambdaRegion     *string                         `json:"lambdaRegion,omitempty"`
	Method           string                          `json:"method"`
	Path             string                          `json:"path"`
	PathType         *string                         `json:"pathType,omitempty"`
	Referer          string                          `json:"referer"`
	Region           string                          `json:"region"`
	ResponseByteSize *float64                        `json:"responseByteSize,omitempty"`
	Scheme           *string                         `json:"scheme,omitempty"`
	StatusCode       *float64                        `json:"statusCode,omitempty"`
	Timestamp        float64                         `json:"timestamp"`
	UserAgent        []string                        `json:"userAgent"`
	VercelCache      *GetDeploymentEventsVercelCache `json:"vercelCache,omitempty"`
	VercelID         *string                         `json:"vercelId,omitempty"`
}

func (o *GetDeploymentEventsProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *GetDeploymentEventsProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsProxy) GetVercelCache() *GetDeploymentEventsVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type GetDeploymentEventsDeploymentsResponseType string

const (
	GetDeploymentEventsDeploymentsResponseTypeCommand                GetDeploymentEventsDeploymentsResponseType = "command"
	GetDeploymentEventsDeploymentsResponseTypeStdout                 GetDeploymentEventsDeploymentsResponseType = "stdout"
	GetDeploymentEventsDeploymentsResponseTypeStderr                 GetDeploymentEventsDeploymentsResponseType = "stderr"
	GetDeploymentEventsDeploymentsResponseTypeExit                   GetDeploymentEventsDeploymentsResponseType = "exit"
	GetDeploymentEventsDeploymentsResponseTypeDeploymentState        GetDeploymentEventsDeploymentsResponseType = "deployment-state"
	GetDeploymentEventsDeploymentsResponseTypeDelimiter              GetDeploymentEventsDeploymentsResponseType = "delimiter"
	GetDeploymentEventsDeploymentsResponseTypeMiddleware             GetDeploymentEventsDeploymentsResponseType = "middleware"
	GetDeploymentEventsDeploymentsResponseTypeMiddlewareInvocation   GetDeploymentEventsDeploymentsResponseType = "middleware-invocation"
	GetDeploymentEventsDeploymentsResponseTypeEdgeFunctionInvocation GetDeploymentEventsDeploymentsResponseType = "edge-function-invocation"
	GetDeploymentEventsDeploymentsResponseTypeFatal                  GetDeploymentEventsDeploymentsResponseType = "fatal"
)

func (e GetDeploymentEventsDeploymentsResponseType) ToPointer() *GetDeploymentEventsDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentEventsDeployments1 struct {
	Created      float64                                    `json:"created"`
	Date         float64                                    `json:"date"`
	DeploymentID string                                     `json:"deploymentId"`
	ID           string                                     `json:"id"`
	Info         GetDeploymentEventsInfo                    `json:"info"`
	Proxy        *GetDeploymentEventsProxy                  `json:"proxy,omitempty"`
	RequestID    *string                                    `json:"requestId,omitempty"`
	Serial       string                                     `json:"serial"`
	StatusCode   *float64                                   `json:"statusCode,omitempty"`
	Text         *string                                    `json:"text,omitempty"`
	Type         GetDeploymentEventsDeploymentsResponseType `json:"type"`
}

func (o *GetDeploymentEventsDeployments1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsDeployments1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsDeployments1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsDeployments1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsDeployments1) GetInfo() GetDeploymentEventsInfo {
	if o == nil {
		return GetDeploymentEventsInfo{}
	}
	return o.Info
}

func (o *GetDeploymentEventsDeployments1) GetProxy() *GetDeploymentEventsProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEventsDeployments1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEventsDeployments1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsDeployments1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeployments1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *GetDeploymentEventsDeployments1) GetType() GetDeploymentEventsDeploymentsResponseType {
	if o == nil {
		return GetDeploymentEventsDeploymentsResponseType("")
	}
	return o.Type
}

type GetDeploymentEventsResponseBodyType string

const (
	GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments1 GetDeploymentEventsResponseBodyType = "getDeploymentEvents_deployments_1"
	GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments2 GetDeploymentEventsResponseBodyType = "getDeploymentEvents_deployments_2"
	GetDeploymentEventsResponseBodyTypeGetDeploymentEvents3            GetDeploymentEventsResponseBodyType = "getDeploymentEvents_3"
)

// GetDeploymentEventsResponseBody - A stream of jsonlines where each line is a deployment log item.
// Array of deployment logs for the provided query.
type GetDeploymentEventsResponseBody struct {
	GetDeploymentEventsDeployments1 *GetDeploymentEventsDeployments1
	GetDeploymentEventsDeployments2 *GetDeploymentEventsDeployments2
	GetDeploymentEvents3            *GetDeploymentEvents3

	Type GetDeploymentEventsResponseBodyType
}

func CreateGetDeploymentEventsResponseBodyGetDeploymentEventsDeployments1(getDeploymentEventsDeployments1 GetDeploymentEventsDeployments1) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments1

	return GetDeploymentEventsResponseBody{
		GetDeploymentEventsDeployments1: &getDeploymentEventsDeployments1,
		Type:                            typ,
	}
}

func CreateGetDeploymentEventsResponseBodyGetDeploymentEventsDeployments2(getDeploymentEventsDeployments2 GetDeploymentEventsDeployments2) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments2

	return GetDeploymentEventsResponseBody{
		GetDeploymentEventsDeployments2: &getDeploymentEventsDeployments2,
		Type:                            typ,
	}
}

func CreateGetDeploymentEventsResponseBodyGetDeploymentEvents3(getDeploymentEvents3 GetDeploymentEvents3) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyTypeGetDeploymentEvents3

	return GetDeploymentEventsResponseBody{
		GetDeploymentEvents3: &getDeploymentEvents3,
		Type:                 typ,
	}
}

func (u *GetDeploymentEventsResponseBody) UnmarshalJSON(data []byte) error {

	var getDeploymentEventsDeployments2 GetDeploymentEventsDeployments2 = GetDeploymentEventsDeployments2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsDeployments2, "", true, true); err == nil {
		u.GetDeploymentEventsDeployments2 = &getDeploymentEventsDeployments2
		u.Type = GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments2
		return nil
	}

	var getDeploymentEventsDeployments1 GetDeploymentEventsDeployments1 = GetDeploymentEventsDeployments1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsDeployments1, "", true, true); err == nil {
		u.GetDeploymentEventsDeployments1 = &getDeploymentEventsDeployments1
		u.Type = GetDeploymentEventsResponseBodyTypeGetDeploymentEventsDeployments1
		return nil
	}

	var getDeploymentEvents3 GetDeploymentEvents3 = GetDeploymentEvents3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEvents3, "", true, true); err == nil {
		u.GetDeploymentEvents3 = &getDeploymentEvents3
		u.Type = GetDeploymentEventsResponseBodyTypeGetDeploymentEvents3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsResponseBody", string(data))
}

func (u GetDeploymentEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentEventsDeployments1 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsDeployments1, "", true)
	}

	if u.GetDeploymentEventsDeployments2 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsDeployments2, "", true)
	}

	if u.GetDeploymentEvents3 != nil {
		return utils.MarshalJSON(u.GetDeploymentEvents3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsResponseBody: all fields are null")
}

type GetDeploymentEventsDeploymentsResponseInfo struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsDeploymentsResponseInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsResponseVercelCache string

const (
	GetDeploymentEventsDeploymentsResponseVercelCacheMiss        GetDeploymentEventsDeploymentsResponseVercelCache = "MISS"
	GetDeploymentEventsDeploymentsResponseVercelCacheHit         GetDeploymentEventsDeploymentsResponseVercelCache = "HIT"
	GetDeploymentEventsDeploymentsResponseVercelCacheStale       GetDeploymentEventsDeploymentsResponseVercelCache = "STALE"
	GetDeploymentEventsDeploymentsResponseVercelCacheBypass      GetDeploymentEventsDeploymentsResponseVercelCache = "BYPASS"
	GetDeploymentEventsDeploymentsResponseVercelCachePrerender   GetDeploymentEventsDeploymentsResponseVercelCache = "PRERENDER"
	GetDeploymentEventsDeploymentsResponseVercelCacheRevalidated GetDeploymentEventsDeploymentsResponseVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsDeploymentsResponseVercelCache) ToPointer() *GetDeploymentEventsDeploymentsResponseVercelCache {
	return &e
}
func (e *GetDeploymentEventsDeploymentsResponseVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsDeploymentsResponseVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsResponseVercelCache: %v", v)
	}
}

type GetDeploymentEventsDeploymentsResponseProxy struct {
	CacheID          *string                                            `json:"cacheId,omitempty"`
	ClientIP         string                                             `json:"clientIp"`
	Host             string                                             `json:"host"`
	LambdaRegion     *string                                            `json:"lambdaRegion,omitempty"`
	Method           string                                             `json:"method"`
	Path             string                                             `json:"path"`
	PathType         *string                                            `json:"pathType,omitempty"`
	Referer          string                                             `json:"referer"`
	Region           string                                             `json:"region"`
	ResponseByteSize *float64                                           `json:"responseByteSize,omitempty"`
	Scheme           *string                                            `json:"scheme,omitempty"`
	StatusCode       *float64                                           `json:"statusCode,omitempty"`
	Timestamp        float64                                            `json:"timestamp"`
	UserAgent        []string                                           `json:"userAgent"`
	VercelCache      *GetDeploymentEventsDeploymentsResponseVercelCache `json:"vercelCache,omitempty"`
	VercelID         *string                                            `json:"vercelId,omitempty"`
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetVercelCache() *GetDeploymentEventsDeploymentsResponseVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsDeploymentsResponseProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type Payload struct {
	Created      *float64                                     `json:"created,omitempty"`
	Date         float64                                      `json:"date"`
	DeploymentID string                                       `json:"deploymentId"`
	ID           string                                       `json:"id"`
	Info         *GetDeploymentEventsDeploymentsResponseInfo  `json:"info,omitempty"`
	Proxy        *GetDeploymentEventsDeploymentsResponseProxy `json:"proxy,omitempty"`
	RequestID    *string                                      `json:"requestId,omitempty"`
	Serial       string                                       `json:"serial"`
	StatusCode   *float64                                     `json:"statusCode,omitempty"`
	Text         *string                                      `json:"text,omitempty"`
}

func (o *Payload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Payload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *Payload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *Payload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload) GetInfo() *GetDeploymentEventsDeploymentsResponseInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *Payload) GetProxy() *GetDeploymentEventsDeploymentsResponseProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *Payload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *Payload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *Payload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Payload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

type GetDeploymentEventsDeploymentsType string

const (
	GetDeploymentEventsDeploymentsTypeCommand                GetDeploymentEventsDeploymentsType = "command"
	GetDeploymentEventsDeploymentsTypeStdout                 GetDeploymentEventsDeploymentsType = "stdout"
	GetDeploymentEventsDeploymentsTypeStderr                 GetDeploymentEventsDeploymentsType = "stderr"
	GetDeploymentEventsDeploymentsTypeExit                   GetDeploymentEventsDeploymentsType = "exit"
	GetDeploymentEventsDeploymentsTypeDeploymentState        GetDeploymentEventsDeploymentsType = "deployment-state"
	GetDeploymentEventsDeploymentsTypeDelimiter              GetDeploymentEventsDeploymentsType = "delimiter"
	GetDeploymentEventsDeploymentsTypeMiddleware             GetDeploymentEventsDeploymentsType = "middleware"
	GetDeploymentEventsDeploymentsTypeMiddlewareInvocation   GetDeploymentEventsDeploymentsType = "middleware-invocation"
	GetDeploymentEventsDeploymentsTypeEdgeFunctionInvocation GetDeploymentEventsDeploymentsType = "edge-function-invocation"
	GetDeploymentEventsDeploymentsTypeFatal                  GetDeploymentEventsDeploymentsType = "fatal"
)

func (e GetDeploymentEventsDeploymentsType) ToPointer() *GetDeploymentEventsDeploymentsType {
	return &e
}
func (e *GetDeploymentEventsDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsDeploymentsType: %v", v)
	}
}

type GetDeploymentEvents2 struct {
	Created float64                            `json:"created"`
	Payload Payload                            `json:"payload"`
	Type    GetDeploymentEventsDeploymentsType `json:"type"`
}

func (o *GetDeploymentEvents2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEvents2) GetPayload() Payload {
	if o == nil {
		return Payload{}
	}
	return o.Payload
}

func (o *GetDeploymentEvents2) GetType() GetDeploymentEventsDeploymentsType {
	if o == nil {
		return GetDeploymentEventsDeploymentsType("")
	}
	return o.Type
}

type Info struct {
	Entrypoint *string `json:"entrypoint,omitempty"`
	Name       string  `json:"name"`
	Path       *string `json:"path,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
	Step       *string `json:"step,omitempty"`
	Type       string  `json:"type"`
}

func (o *Info) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *Info) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Info) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Info) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *Info) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *Info) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type VercelCache string

const (
	VercelCacheMiss        VercelCache = "MISS"
	VercelCacheHit         VercelCache = "HIT"
	VercelCacheStale       VercelCache = "STALE"
	VercelCacheBypass      VercelCache = "BYPASS"
	VercelCachePrerender   VercelCache = "PRERENDER"
	VercelCacheRevalidated VercelCache = "REVALIDATED"
)

func (e VercelCache) ToPointer() *VercelCache {
	return &e
}
func (e *VercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = VercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VercelCache: %v", v)
	}
}

type Proxy struct {
	CacheID          *string      `json:"cacheId,omitempty"`
	ClientIP         string       `json:"clientIp"`
	Host             string       `json:"host"`
	LambdaRegion     *string      `json:"lambdaRegion,omitempty"`
	Method           string       `json:"method"`
	Path             string       `json:"path"`
	PathType         *string      `json:"pathType,omitempty"`
	Referer          string       `json:"referer"`
	Region           string       `json:"region"`
	ResponseByteSize *float64     `json:"responseByteSize,omitempty"`
	Scheme           *string      `json:"scheme,omitempty"`
	StatusCode       *float64     `json:"statusCode,omitempty"`
	Timestamp        float64      `json:"timestamp"`
	UserAgent        []string     `json:"userAgent"`
	VercelCache      *VercelCache `json:"vercelCache,omitempty"`
	VercelID         *string      `json:"vercelId,omitempty"`
}

func (o *Proxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *Proxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *Proxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Proxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *Proxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *Proxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Proxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *Proxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *Proxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Proxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *Proxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *Proxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Proxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *Proxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *Proxy) GetVercelCache() *VercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *Proxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

type GetDeploymentEventsType string

const (
	GetDeploymentEventsTypeCommand                GetDeploymentEventsType = "command"
	GetDeploymentEventsTypeStdout                 GetDeploymentEventsType = "stdout"
	GetDeploymentEventsTypeStderr                 GetDeploymentEventsType = "stderr"
	GetDeploymentEventsTypeExit                   GetDeploymentEventsType = "exit"
	GetDeploymentEventsTypeDeploymentState        GetDeploymentEventsType = "deployment-state"
	GetDeploymentEventsTypeDelimiter              GetDeploymentEventsType = "delimiter"
	GetDeploymentEventsTypeMiddleware             GetDeploymentEventsType = "middleware"
	GetDeploymentEventsTypeMiddlewareInvocation   GetDeploymentEventsType = "middleware-invocation"
	GetDeploymentEventsTypeEdgeFunctionInvocation GetDeploymentEventsType = "edge-function-invocation"
	GetDeploymentEventsTypeFatal                  GetDeploymentEventsType = "fatal"
)

func (e GetDeploymentEventsType) ToPointer() *GetDeploymentEventsType {
	return &e
}
func (e *GetDeploymentEventsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsType: %v", v)
	}
}

type GetDeploymentEvents1 struct {
	Created      float64                 `json:"created"`
	Date         float64                 `json:"date"`
	DeploymentID string                  `json:"deploymentId"`
	ID           string                  `json:"id"`
	Info         Info                    `json:"info"`
	Proxy        *Proxy                  `json:"proxy,omitempty"`
	RequestID    *string                 `json:"requestId,omitempty"`
	Serial       string                  `json:"serial"`
	StatusCode   *float64                `json:"statusCode,omitempty"`
	Text         *string                 `json:"text,omitempty"`
	Type         GetDeploymentEventsType `json:"type"`
}

func (o *GetDeploymentEvents1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEvents1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEvents1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEvents1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEvents1) GetInfo() Info {
	if o == nil {
		return Info{}
	}
	return o.Info
}

func (o *GetDeploymentEvents1) GetProxy() *Proxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEvents1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEvents1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEvents1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEvents1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *GetDeploymentEvents1) GetType() GetDeploymentEventsType {
	if o == nil {
		return GetDeploymentEventsType("")
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsResponseBodyType string

const (
	GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents1 GetDeploymentEventsDeploymentsResponseBodyType = "getDeploymentEvents_1"
	GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents2 GetDeploymentEventsDeploymentsResponseBodyType = "getDeploymentEvents_2"
)

type GetDeploymentEventsDeploymentsResponseBody struct {
	GetDeploymentEvents1 *GetDeploymentEvents1
	GetDeploymentEvents2 *GetDeploymentEvents2

	Type GetDeploymentEventsDeploymentsResponseBodyType
}

func CreateGetDeploymentEventsDeploymentsResponseBodyGetDeploymentEvents1(getDeploymentEvents1 GetDeploymentEvents1) GetDeploymentEventsDeploymentsResponseBody {
	typ := GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents1

	return GetDeploymentEventsDeploymentsResponseBody{
		GetDeploymentEvents1: &getDeploymentEvents1,
		Type:                 typ,
	}
}

func CreateGetDeploymentEventsDeploymentsResponseBodyGetDeploymentEvents2(getDeploymentEvents2 GetDeploymentEvents2) GetDeploymentEventsDeploymentsResponseBody {
	typ := GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents2

	return GetDeploymentEventsDeploymentsResponseBody{
		GetDeploymentEvents2: &getDeploymentEvents2,
		Type:                 typ,
	}
}

func (u *GetDeploymentEventsDeploymentsResponseBody) UnmarshalJSON(data []byte) error {

	var getDeploymentEvents2 GetDeploymentEvents2 = GetDeploymentEvents2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEvents2, "", true, true); err == nil {
		u.GetDeploymentEvents2 = &getDeploymentEvents2
		u.Type = GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents2
		return nil
	}

	var getDeploymentEvents1 GetDeploymentEvents1 = GetDeploymentEvents1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEvents1, "", true, true); err == nil {
		u.GetDeploymentEvents1 = &getDeploymentEvents1
		u.Type = GetDeploymentEventsDeploymentsResponseBodyTypeGetDeploymentEvents1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsDeploymentsResponseBody", string(data))
}

func (u GetDeploymentEventsDeploymentsResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentEvents1 != nil {
		return utils.MarshalJSON(u.GetDeploymentEvents1, "", true)
	}

	if u.GetDeploymentEvents2 != nil {
		return utils.MarshalJSON(u.GetDeploymentEvents2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsDeploymentsResponseBody: all fields are null")
}

type GetDeploymentEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A stream of jsonlines where each line is a deployment log item.
	// Array of deployment logs for the provided query.
	OneOf *GetDeploymentEventsResponseBody
	// A stream of jsonlines where each line is a deployment log item.
	// Array of deployment logs for the provided query.
	Unions []GetDeploymentEventsDeploymentsResponseBody
}

func (o *GetDeploymentEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDeploymentEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDeploymentEventsResponse) GetOneOf() *GetDeploymentEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *GetDeploymentEventsResponse) GetUnions() []GetDeploymentEventsDeploymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Unions
}
