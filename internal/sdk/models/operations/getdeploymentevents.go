// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

// Direction - Order of the returned events based on the timestamp.
type Direction string

const (
	DirectionBackward Direction = "backward"
	DirectionForward  Direction = "forward"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "backward":
		fallthrough
	case "forward":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type StatusCodeType string

const (
	StatusCodeTypeNumber StatusCodeType = "number"
	StatusCodeTypeStr    StatusCodeType = "str"
)

// StatusCode - HTTP status code range to filter events by.
type StatusCode struct {
	Number *float64
	Str    *string

	Type StatusCodeType
}

func CreateStatusCodeNumber(number float64) StatusCode {
	typ := StatusCodeTypeNumber

	return StatusCode{
		Number: &number,
		Type:   typ,
	}
}

func CreateStatusCodeStr(str string) StatusCode {
	typ := StatusCodeTypeStr

	return StatusCode{
		Str:  &str,
		Type: typ,
	}
}

func (u *StatusCode) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = StatusCodeTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StatusCodeTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusCode", string(data))
}

func (u StatusCode) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type StatusCode: all fields are null")
}

type GetDeploymentEventsRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Order of the returned events based on the timestamp.
	Direction *Direction `default:"forward" queryParam:"style=form,explode=true,name=direction"`
	// When enabled, this endpoint will return live events as they happen.
	Follow *float64 `queryParam:"style=form,explode=true,name=follow"`
	// Maximum number of events to return. Provide `-1` to return all available logs.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Deployment build ID.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Timestamp for when build logs should be pulled from.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp for when the build logs should be pulled up until.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// HTTP status code range to filter events by.
	StatusCode *StatusCode `queryParam:"style=form,explode=true,name=statusCode"`
	Delimiter  *float64    `queryParam:"style=form,explode=true,name=delimiter"`
	Builds     *float64    `queryParam:"style=form,explode=true,name=builds"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (g GetDeploymentEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDeploymentEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetDeploymentEventsRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentEventsRequest) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetDeploymentEventsRequest) GetFollow() *float64 {
	if o == nil {
		return nil
	}
	return o.Follow
}

func (o *GetDeploymentEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetDeploymentEventsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetDeploymentEventsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetDeploymentEventsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetDeploymentEventsRequest) GetStatusCode() *StatusCode {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsRequest) GetDelimiter() *float64 {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *GetDeploymentEventsRequest) GetBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeploymentEventsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentEventsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDeploymentEvents3Type string

const (
	GetDeploymentEvents3TypeCommand                GetDeploymentEvents3Type = "command"
	GetDeploymentEvents3TypeStdout                 GetDeploymentEvents3Type = "stdout"
	GetDeploymentEvents3TypeStderr                 GetDeploymentEvents3Type = "stderr"
	GetDeploymentEvents3TypeExit                   GetDeploymentEvents3Type = "exit"
	GetDeploymentEvents3TypeDeploymentState        GetDeploymentEvents3Type = "deployment-state"
	GetDeploymentEvents3TypeDelimiter              GetDeploymentEvents3Type = "delimiter"
	GetDeploymentEvents3TypeMiddleware             GetDeploymentEvents3Type = "middleware"
	GetDeploymentEvents3TypeMiddlewareInvocation   GetDeploymentEvents3Type = "middleware-invocation"
	GetDeploymentEvents3TypeEdgeFunctionInvocation GetDeploymentEvents3Type = "edge-function-invocation"
	GetDeploymentEvents3TypeFatal                  GetDeploymentEvents3Type = "fatal"
)

func (e GetDeploymentEvents3Type) ToPointer() *GetDeploymentEvents3Type {
	return &e
}
func (e *GetDeploymentEvents3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEvents3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEvents3Type: %v", v)
	}
}

type GetDeploymentEvents3Info struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *GetDeploymentEvents3Info) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetDeploymentEvents3Info) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEvents3Info) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEvents3Info) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEvents3Info) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEvents3Info) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type GetDeploymentEvents3VercelCache string

const (
	GetDeploymentEvents3VercelCacheMiss        GetDeploymentEvents3VercelCache = "MISS"
	GetDeploymentEvents3VercelCacheHit         GetDeploymentEvents3VercelCache = "HIT"
	GetDeploymentEvents3VercelCacheStale       GetDeploymentEvents3VercelCache = "STALE"
	GetDeploymentEvents3VercelCacheBypass      GetDeploymentEvents3VercelCache = "BYPASS"
	GetDeploymentEvents3VercelCachePrerender   GetDeploymentEvents3VercelCache = "PRERENDER"
	GetDeploymentEvents3VercelCacheRevalidated GetDeploymentEvents3VercelCache = "REVALIDATED"
)

func (e GetDeploymentEvents3VercelCache) ToPointer() *GetDeploymentEvents3VercelCache {
	return &e
}
func (e *GetDeploymentEvents3VercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEvents3VercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEvents3VercelCache: %v", v)
	}
}

type GetDeploymentEvents3Proxy struct {
	Timestamp        float64                          `json:"timestamp"`
	Method           string                           `json:"method"`
	Host             string                           `json:"host"`
	Path             string                           `json:"path"`
	StatusCode       *float64                         `json:"statusCode,omitempty"`
	UserAgent        []string                         `json:"userAgent"`
	Referer          string                           `json:"referer"`
	ClientIP         string                           `json:"clientIp"`
	Region           string                           `json:"region"`
	Scheme           *string                          `json:"scheme,omitempty"`
	ResponseByteSize *float64                         `json:"responseByteSize,omitempty"`
	CacheID          *string                          `json:"cacheId,omitempty"`
	PathType         *string                          `json:"pathType,omitempty"`
	VercelID         *string                          `json:"vercelId,omitempty"`
	VercelCache      *GetDeploymentEvents3VercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string                          `json:"lambdaRegion,omitempty"`
}

func (o *GetDeploymentEvents3Proxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEvents3Proxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEvents3Proxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEvents3Proxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEvents3Proxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEvents3Proxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEvents3Proxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEvents3Proxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEvents3Proxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEvents3Proxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEvents3Proxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEvents3Proxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEvents3Proxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEvents3Proxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *GetDeploymentEvents3Proxy) GetVercelCache() *GetDeploymentEvents3VercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEvents3Proxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type ThreePayload struct {
	DeploymentID string                     `json:"deploymentId"`
	Info         *GetDeploymentEvents3Info  `json:"info,omitempty"`
	Text         *string                    `json:"text,omitempty"`
	ID           string                     `json:"id"`
	Date         float64                    `json:"date"`
	Serial       string                     `json:"serial"`
	Created      *float64                   `json:"created,omitempty"`
	StatusCode   *float64                   `json:"statusCode,omitempty"`
	RequestID    *string                    `json:"requestId,omitempty"`
	Proxy        *GetDeploymentEvents3Proxy `json:"proxy,omitempty"`
}

func (o *ThreePayload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *ThreePayload) GetInfo() *GetDeploymentEvents3Info {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *ThreePayload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *ThreePayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ThreePayload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *ThreePayload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *ThreePayload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *ThreePayload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *ThreePayload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *ThreePayload) GetProxy() *GetDeploymentEvents3Proxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

type Three2 struct {
	Type    GetDeploymentEvents3Type `json:"type"`
	Created float64                  `json:"created"`
	Payload ThreePayload             `json:"payload"`
}

func (o *Three2) GetType() GetDeploymentEvents3Type {
	if o == nil {
		return GetDeploymentEvents3Type("")
	}
	return o.Type
}

func (o *Three2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *Three2) GetPayload() ThreePayload {
	if o == nil {
		return ThreePayload{}
	}
	return o.Payload
}

type ThreeInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *ThreeInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ThreeInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ThreeInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *ThreeInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *ThreeInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *ThreeInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type ThreeVercelCache string

const (
	ThreeVercelCacheMiss        ThreeVercelCache = "MISS"
	ThreeVercelCacheHit         ThreeVercelCache = "HIT"
	ThreeVercelCacheStale       ThreeVercelCache = "STALE"
	ThreeVercelCacheBypass      ThreeVercelCache = "BYPASS"
	ThreeVercelCachePrerender   ThreeVercelCache = "PRERENDER"
	ThreeVercelCacheRevalidated ThreeVercelCache = "REVALIDATED"
)

func (e ThreeVercelCache) ToPointer() *ThreeVercelCache {
	return &e
}
func (e *ThreeVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = ThreeVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreeVercelCache: %v", v)
	}
}

type ThreeProxy struct {
	Timestamp        float64           `json:"timestamp"`
	Method           string            `json:"method"`
	Host             string            `json:"host"`
	Path             string            `json:"path"`
	StatusCode       *float64          `json:"statusCode,omitempty"`
	UserAgent        []string          `json:"userAgent"`
	Referer          string            `json:"referer"`
	ClientIP         string            `json:"clientIp"`
	Region           string            `json:"region"`
	Scheme           *string           `json:"scheme,omitempty"`
	ResponseByteSize *float64          `json:"responseByteSize,omitempty"`
	CacheID          *string           `json:"cacheId,omitempty"`
	PathType         *string           `json:"pathType,omitempty"`
	VercelID         *string           `json:"vercelId,omitempty"`
	VercelCache      *ThreeVercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string           `json:"lambdaRegion,omitempty"`
}

func (o *ThreeProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *ThreeProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *ThreeProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *ThreeProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ThreeProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *ThreeProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *ThreeProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *ThreeProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *ThreeProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *ThreeProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *ThreeProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *ThreeProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *ThreeProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *ThreeProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *ThreeProxy) GetVercelCache() *ThreeVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *ThreeProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type ThreeType string

const (
	ThreeTypeCommand                ThreeType = "command"
	ThreeTypeStdout                 ThreeType = "stdout"
	ThreeTypeStderr                 ThreeType = "stderr"
	ThreeTypeExit                   ThreeType = "exit"
	ThreeTypeDeploymentState        ThreeType = "deployment-state"
	ThreeTypeDelimiter              ThreeType = "delimiter"
	ThreeTypeMiddleware             ThreeType = "middleware"
	ThreeTypeMiddlewareInvocation   ThreeType = "middleware-invocation"
	ThreeTypeEdgeFunctionInvocation ThreeType = "edge-function-invocation"
	ThreeTypeFatal                  ThreeType = "fatal"
)

func (e ThreeType) ToPointer() *ThreeType {
	return &e
}
func (e *ThreeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = ThreeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThreeType: %v", v)
	}
}

type Three1 struct {
	Created      float64     `json:"created"`
	Date         float64     `json:"date"`
	DeploymentID string      `json:"deploymentId"`
	ID           string      `json:"id"`
	Info         ThreeInfo   `json:"info"`
	Proxy        *ThreeProxy `json:"proxy,omitempty"`
	RequestID    *string     `json:"requestId,omitempty"`
	Serial       string      `json:"serial"`
	StatusCode   *float64    `json:"statusCode,omitempty"`
	Text         *string     `json:"text,omitempty"`
	Type         ThreeType   `json:"type"`
}

func (o *Three1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *Three1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *Three1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *Three1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Three1) GetInfo() ThreeInfo {
	if o == nil {
		return ThreeInfo{}
	}
	return o.Info
}

func (o *Three1) GetProxy() *ThreeProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *Three1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *Three1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *Three1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Three1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *Three1) GetType() ThreeType {
	if o == nil {
		return ThreeType("")
	}
	return o.Type
}

type ResponseBody3Type string

const (
	ResponseBody3TypeThree1 ResponseBody3Type = "3_1"
	ResponseBody3TypeThree2 ResponseBody3Type = "3_2"
)

type ResponseBody3 struct {
	Three1 *Three1
	Three2 *Three2

	Type ResponseBody3Type
}

func CreateResponseBody3Three1(three1 Three1) ResponseBody3 {
	typ := ResponseBody3TypeThree1

	return ResponseBody3{
		Three1: &three1,
		Type:   typ,
	}
}

func CreateResponseBody3Three2(three2 Three2) ResponseBody3 {
	typ := ResponseBody3TypeThree2

	return ResponseBody3{
		Three2: &three2,
		Type:   typ,
	}
}

func (u *ResponseBody3) UnmarshalJSON(data []byte) error {

	var three2 Three2 = Three2{}
	if err := utils.UnmarshalJSON(data, &three2, "", true, true); err == nil {
		u.Three2 = &three2
		u.Type = ResponseBody3TypeThree2
		return nil
	}

	var three1 Three1 = Three1{}
	if err := utils.UnmarshalJSON(data, &three1, "", true, true); err == nil {
		u.Three1 = &three1
		u.Type = ResponseBody3TypeThree1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBody3", string(data))
}

func (u ResponseBody3) MarshalJSON() ([]byte, error) {
	if u.Three1 != nil {
		return utils.MarshalJSON(u.Three1, "", true)
	}

	if u.Three2 != nil {
		return utils.MarshalJSON(u.Three2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBody3: all fields are null")
}

type GetDeploymentEventsResponseBodyDeploymentsResponseType string

const (
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeCommand                GetDeploymentEventsResponseBodyDeploymentsResponseType = "command"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeStdout                 GetDeploymentEventsResponseBodyDeploymentsResponseType = "stdout"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeStderr                 GetDeploymentEventsResponseBodyDeploymentsResponseType = "stderr"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeExit                   GetDeploymentEventsResponseBodyDeploymentsResponseType = "exit"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeDeploymentState        GetDeploymentEventsResponseBodyDeploymentsResponseType = "deployment-state"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeDelimiter              GetDeploymentEventsResponseBodyDeploymentsResponseType = "delimiter"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeMiddleware             GetDeploymentEventsResponseBodyDeploymentsResponseType = "middleware"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeMiddlewareInvocation   GetDeploymentEventsResponseBodyDeploymentsResponseType = "middleware-invocation"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeEdgeFunctionInvocation GetDeploymentEventsResponseBodyDeploymentsResponseType = "edge-function-invocation"
	GetDeploymentEventsResponseBodyDeploymentsResponseTypeFatal                  GetDeploymentEventsResponseBodyDeploymentsResponseType = "fatal"
)

func (e GetDeploymentEventsResponseBodyDeploymentsResponseType) ToPointer() *GetDeploymentEventsResponseBodyDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentEventsResponseBodyDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsResponseBodyDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsResponseBodyDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentEventsResponseBodyDeploymentsInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsResponseBodyDeploymentsInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type GetDeploymentEventsResponseBodyDeploymentsVercelCache string

const (
	GetDeploymentEventsResponseBodyDeploymentsVercelCacheMiss        GetDeploymentEventsResponseBodyDeploymentsVercelCache = "MISS"
	GetDeploymentEventsResponseBodyDeploymentsVercelCacheHit         GetDeploymentEventsResponseBodyDeploymentsVercelCache = "HIT"
	GetDeploymentEventsResponseBodyDeploymentsVercelCacheStale       GetDeploymentEventsResponseBodyDeploymentsVercelCache = "STALE"
	GetDeploymentEventsResponseBodyDeploymentsVercelCacheBypass      GetDeploymentEventsResponseBodyDeploymentsVercelCache = "BYPASS"
	GetDeploymentEventsResponseBodyDeploymentsVercelCachePrerender   GetDeploymentEventsResponseBodyDeploymentsVercelCache = "PRERENDER"
	GetDeploymentEventsResponseBodyDeploymentsVercelCacheRevalidated GetDeploymentEventsResponseBodyDeploymentsVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsResponseBodyDeploymentsVercelCache) ToPointer() *GetDeploymentEventsResponseBodyDeploymentsVercelCache {
	return &e
}
func (e *GetDeploymentEventsResponseBodyDeploymentsVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsResponseBodyDeploymentsVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsResponseBodyDeploymentsVercelCache: %v", v)
	}
}

type GetDeploymentEventsResponseBodyDeploymentsProxy struct {
	Timestamp        float64                                                `json:"timestamp"`
	Method           string                                                 `json:"method"`
	Host             string                                                 `json:"host"`
	Path             string                                                 `json:"path"`
	StatusCode       *float64                                               `json:"statusCode,omitempty"`
	UserAgent        []string                                               `json:"userAgent"`
	Referer          string                                                 `json:"referer"`
	ClientIP         string                                                 `json:"clientIp"`
	Region           string                                                 `json:"region"`
	Scheme           *string                                                `json:"scheme,omitempty"`
	ResponseByteSize *float64                                               `json:"responseByteSize,omitempty"`
	CacheID          *string                                                `json:"cacheId,omitempty"`
	PathType         *string                                                `json:"pathType,omitempty"`
	VercelID         *string                                                `json:"vercelId,omitempty"`
	VercelCache      *GetDeploymentEventsResponseBodyDeploymentsVercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string                                                `json:"lambdaRegion,omitempty"`
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetVercelCache() *GetDeploymentEventsResponseBodyDeploymentsVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsResponseBodyDeploymentsProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type ResponseBodyPayload struct {
	DeploymentID string                                           `json:"deploymentId"`
	Info         *GetDeploymentEventsResponseBodyDeploymentsInfo  `json:"info,omitempty"`
	Text         *string                                          `json:"text,omitempty"`
	ID           string                                           `json:"id"`
	Date         float64                                          `json:"date"`
	Serial       string                                           `json:"serial"`
	Created      *float64                                         `json:"created,omitempty"`
	StatusCode   *float64                                         `json:"statusCode,omitempty"`
	RequestID    *string                                          `json:"requestId,omitempty"`
	Proxy        *GetDeploymentEventsResponseBodyDeploymentsProxy `json:"proxy,omitempty"`
}

func (o *ResponseBodyPayload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *ResponseBodyPayload) GetInfo() *GetDeploymentEventsResponseBodyDeploymentsInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *ResponseBodyPayload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *ResponseBodyPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyPayload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *ResponseBodyPayload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *ResponseBodyPayload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *ResponseBodyPayload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *ResponseBodyPayload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *ResponseBodyPayload) GetProxy() *GetDeploymentEventsResponseBodyDeploymentsProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

type GetDeploymentEventsResponseBody2 struct {
	Type    GetDeploymentEventsResponseBodyDeploymentsResponseType `json:"type"`
	Created float64                                                `json:"created"`
	Payload ResponseBodyPayload                                    `json:"payload"`
}

func (o *GetDeploymentEventsResponseBody2) GetType() GetDeploymentEventsResponseBodyDeploymentsResponseType {
	if o == nil {
		return GetDeploymentEventsResponseBodyDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeploymentEventsResponseBody2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsResponseBody2) GetPayload() ResponseBodyPayload {
	if o == nil {
		return ResponseBodyPayload{}
	}
	return o.Payload
}

type ResponseBodyInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *ResponseBodyInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ResponseBodyInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResponseBodyInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *ResponseBodyInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *ResponseBodyInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *ResponseBodyInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type ResponseBodyVercelCache string

const (
	ResponseBodyVercelCacheMiss        ResponseBodyVercelCache = "MISS"
	ResponseBodyVercelCacheHit         ResponseBodyVercelCache = "HIT"
	ResponseBodyVercelCacheStale       ResponseBodyVercelCache = "STALE"
	ResponseBodyVercelCacheBypass      ResponseBodyVercelCache = "BYPASS"
	ResponseBodyVercelCachePrerender   ResponseBodyVercelCache = "PRERENDER"
	ResponseBodyVercelCacheRevalidated ResponseBodyVercelCache = "REVALIDATED"
)

func (e ResponseBodyVercelCache) ToPointer() *ResponseBodyVercelCache {
	return &e
}
func (e *ResponseBodyVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = ResponseBodyVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyVercelCache: %v", v)
	}
}

type ResponseBodyProxy struct {
	Timestamp        float64                  `json:"timestamp"`
	Method           string                   `json:"method"`
	Host             string                   `json:"host"`
	Path             string                   `json:"path"`
	StatusCode       *float64                 `json:"statusCode,omitempty"`
	UserAgent        []string                 `json:"userAgent"`
	Referer          string                   `json:"referer"`
	ClientIP         string                   `json:"clientIp"`
	Region           string                   `json:"region"`
	Scheme           *string                  `json:"scheme,omitempty"`
	ResponseByteSize *float64                 `json:"responseByteSize,omitempty"`
	CacheID          *string                  `json:"cacheId,omitempty"`
	PathType         *string                  `json:"pathType,omitempty"`
	VercelID         *string                  `json:"vercelId,omitempty"`
	VercelCache      *ResponseBodyVercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string                  `json:"lambdaRegion,omitempty"`
}

func (o *ResponseBodyProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *ResponseBodyProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *ResponseBodyProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *ResponseBodyProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ResponseBodyProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *ResponseBodyProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *ResponseBodyProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *ResponseBodyProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *ResponseBodyProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *ResponseBodyProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *ResponseBodyProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *ResponseBodyProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *ResponseBodyProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *ResponseBodyProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *ResponseBodyProxy) GetVercelCache() *ResponseBodyVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *ResponseBodyProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type GetDeploymentEventsResponseBodyDeploymentsType string

const (
	GetDeploymentEventsResponseBodyDeploymentsTypeCommand                GetDeploymentEventsResponseBodyDeploymentsType = "command"
	GetDeploymentEventsResponseBodyDeploymentsTypeStdout                 GetDeploymentEventsResponseBodyDeploymentsType = "stdout"
	GetDeploymentEventsResponseBodyDeploymentsTypeStderr                 GetDeploymentEventsResponseBodyDeploymentsType = "stderr"
	GetDeploymentEventsResponseBodyDeploymentsTypeExit                   GetDeploymentEventsResponseBodyDeploymentsType = "exit"
	GetDeploymentEventsResponseBodyDeploymentsTypeDeploymentState        GetDeploymentEventsResponseBodyDeploymentsType = "deployment-state"
	GetDeploymentEventsResponseBodyDeploymentsTypeDelimiter              GetDeploymentEventsResponseBodyDeploymentsType = "delimiter"
	GetDeploymentEventsResponseBodyDeploymentsTypeMiddleware             GetDeploymentEventsResponseBodyDeploymentsType = "middleware"
	GetDeploymentEventsResponseBodyDeploymentsTypeMiddlewareInvocation   GetDeploymentEventsResponseBodyDeploymentsType = "middleware-invocation"
	GetDeploymentEventsResponseBodyDeploymentsTypeEdgeFunctionInvocation GetDeploymentEventsResponseBodyDeploymentsType = "edge-function-invocation"
	GetDeploymentEventsResponseBodyDeploymentsTypeFatal                  GetDeploymentEventsResponseBodyDeploymentsType = "fatal"
)

func (e GetDeploymentEventsResponseBodyDeploymentsType) ToPointer() *GetDeploymentEventsResponseBodyDeploymentsType {
	return &e
}
func (e *GetDeploymentEventsResponseBodyDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsResponseBodyDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsResponseBodyDeploymentsType: %v", v)
	}
}

type GetDeploymentEventsResponseBody1 struct {
	Created      float64                                        `json:"created"`
	Date         float64                                        `json:"date"`
	DeploymentID string                                         `json:"deploymentId"`
	ID           string                                         `json:"id"`
	Info         ResponseBodyInfo                               `json:"info"`
	Proxy        *ResponseBodyProxy                             `json:"proxy,omitempty"`
	RequestID    *string                                        `json:"requestId,omitempty"`
	Serial       string                                         `json:"serial"`
	StatusCode   *float64                                       `json:"statusCode,omitempty"`
	Text         *string                                        `json:"text,omitempty"`
	Type         GetDeploymentEventsResponseBodyDeploymentsType `json:"type"`
}

func (o *GetDeploymentEventsResponseBody1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsResponseBody1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsResponseBody1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsResponseBody1) GetInfo() ResponseBodyInfo {
	if o == nil {
		return ResponseBodyInfo{}
	}
	return o.Info
}

func (o *GetDeploymentEventsResponseBody1) GetProxy() *ResponseBodyProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *GetDeploymentEventsResponseBody1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *GetDeploymentEventsResponseBody1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsResponseBody1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsResponseBody1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *GetDeploymentEventsResponseBody1) GetType() GetDeploymentEventsResponseBodyDeploymentsType {
	if o == nil {
		return GetDeploymentEventsResponseBodyDeploymentsType("")
	}
	return o.Type
}

type GetDeploymentEventsResponseBodyUnionType string

const (
	GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1 GetDeploymentEventsResponseBodyUnionType = "getDeploymentEvents_responseBody_1"
	GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2 GetDeploymentEventsResponseBodyUnionType = "getDeploymentEvents_responseBody_2"
	GetDeploymentEventsResponseBodyUnionTypeResponseBody3                    GetDeploymentEventsResponseBodyUnionType = "responseBody_3"
)

// GetDeploymentEventsResponseBody - A stream of jsonlines where each line is a deployment log item.
// Array of deployment logs for the provided query.
type GetDeploymentEventsResponseBody struct {
	GetDeploymentEventsResponseBody1 *GetDeploymentEventsResponseBody1
	GetDeploymentEventsResponseBody2 *GetDeploymentEventsResponseBody2
	ResponseBody3                    *ResponseBody3

	Type GetDeploymentEventsResponseBodyUnionType
}

func CreateGetDeploymentEventsResponseBodyGetDeploymentEventsResponseBody1(getDeploymentEventsResponseBody1 GetDeploymentEventsResponseBody1) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1

	return GetDeploymentEventsResponseBody{
		GetDeploymentEventsResponseBody1: &getDeploymentEventsResponseBody1,
		Type:                             typ,
	}
}

func CreateGetDeploymentEventsResponseBodyGetDeploymentEventsResponseBody2(getDeploymentEventsResponseBody2 GetDeploymentEventsResponseBody2) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2

	return GetDeploymentEventsResponseBody{
		GetDeploymentEventsResponseBody2: &getDeploymentEventsResponseBody2,
		Type:                             typ,
	}
}

func CreateGetDeploymentEventsResponseBodyResponseBody3(responseBody3 ResponseBody3) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyUnionTypeResponseBody3

	return GetDeploymentEventsResponseBody{
		ResponseBody3: &responseBody3,
		Type:          typ,
	}
}

func (u *GetDeploymentEventsResponseBody) UnmarshalJSON(data []byte) error {

	var getDeploymentEventsResponseBody2 GetDeploymentEventsResponseBody2 = GetDeploymentEventsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsResponseBody2, "", true, true); err == nil {
		u.GetDeploymentEventsResponseBody2 = &getDeploymentEventsResponseBody2
		u.Type = GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2
		return nil
	}

	var getDeploymentEventsResponseBody1 GetDeploymentEventsResponseBody1 = GetDeploymentEventsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsResponseBody1, "", true, true); err == nil {
		u.GetDeploymentEventsResponseBody1 = &getDeploymentEventsResponseBody1
		u.Type = GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1
		return nil
	}

	var responseBody3 ResponseBody3 = ResponseBody3{}
	if err := utils.UnmarshalJSON(data, &responseBody3, "", true, true); err == nil {
		u.ResponseBody3 = &responseBody3
		u.Type = GetDeploymentEventsResponseBodyUnionTypeResponseBody3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsResponseBody", string(data))
}

func (u GetDeploymentEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentEventsResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsResponseBody1, "", true)
	}

	if u.GetDeploymentEventsResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsResponseBody2, "", true)
	}

	if u.ResponseBody3 != nil {
		return utils.MarshalJSON(u.ResponseBody3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsResponseBody: all fields are null")
}

type GetDeploymentEventsResponseBodyType string

const (
	GetDeploymentEventsResponseBodyTypeCommand                GetDeploymentEventsResponseBodyType = "command"
	GetDeploymentEventsResponseBodyTypeStdout                 GetDeploymentEventsResponseBodyType = "stdout"
	GetDeploymentEventsResponseBodyTypeStderr                 GetDeploymentEventsResponseBodyType = "stderr"
	GetDeploymentEventsResponseBodyTypeExit                   GetDeploymentEventsResponseBodyType = "exit"
	GetDeploymentEventsResponseBodyTypeDeploymentState        GetDeploymentEventsResponseBodyType = "deployment-state"
	GetDeploymentEventsResponseBodyTypeDelimiter              GetDeploymentEventsResponseBodyType = "delimiter"
	GetDeploymentEventsResponseBodyTypeMiddleware             GetDeploymentEventsResponseBodyType = "middleware"
	GetDeploymentEventsResponseBodyTypeMiddlewareInvocation   GetDeploymentEventsResponseBodyType = "middleware-invocation"
	GetDeploymentEventsResponseBodyTypeEdgeFunctionInvocation GetDeploymentEventsResponseBodyType = "edge-function-invocation"
	GetDeploymentEventsResponseBodyTypeFatal                  GetDeploymentEventsResponseBodyType = "fatal"
)

func (e GetDeploymentEventsResponseBodyType) ToPointer() *GetDeploymentEventsResponseBodyType {
	return &e
}
func (e *GetDeploymentEventsResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsResponseBodyType: %v", v)
	}
}

type GetDeploymentEventsResponseBodyInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *GetDeploymentEventsResponseBodyInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetDeploymentEventsResponseBodyInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentEventsResponseBodyInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentEventsResponseBodyInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetDeploymentEventsResponseBodyInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *GetDeploymentEventsResponseBodyInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type GetDeploymentEventsResponseBodyVercelCache string

const (
	GetDeploymentEventsResponseBodyVercelCacheMiss        GetDeploymentEventsResponseBodyVercelCache = "MISS"
	GetDeploymentEventsResponseBodyVercelCacheHit         GetDeploymentEventsResponseBodyVercelCache = "HIT"
	GetDeploymentEventsResponseBodyVercelCacheStale       GetDeploymentEventsResponseBodyVercelCache = "STALE"
	GetDeploymentEventsResponseBodyVercelCacheBypass      GetDeploymentEventsResponseBodyVercelCache = "BYPASS"
	GetDeploymentEventsResponseBodyVercelCachePrerender   GetDeploymentEventsResponseBodyVercelCache = "PRERENDER"
	GetDeploymentEventsResponseBodyVercelCacheRevalidated GetDeploymentEventsResponseBodyVercelCache = "REVALIDATED"
)

func (e GetDeploymentEventsResponseBodyVercelCache) ToPointer() *GetDeploymentEventsResponseBodyVercelCache {
	return &e
}
func (e *GetDeploymentEventsResponseBodyVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = GetDeploymentEventsResponseBodyVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsResponseBodyVercelCache: %v", v)
	}
}

type GetDeploymentEventsResponseBodyProxy struct {
	Timestamp        float64                                     `json:"timestamp"`
	Method           string                                      `json:"method"`
	Host             string                                      `json:"host"`
	Path             string                                      `json:"path"`
	StatusCode       *float64                                    `json:"statusCode,omitempty"`
	UserAgent        []string                                    `json:"userAgent"`
	Referer          string                                      `json:"referer"`
	ClientIP         string                                      `json:"clientIp"`
	Region           string                                      `json:"region"`
	Scheme           *string                                     `json:"scheme,omitempty"`
	ResponseByteSize *float64                                    `json:"responseByteSize,omitempty"`
	CacheID          *string                                     `json:"cacheId,omitempty"`
	PathType         *string                                     `json:"pathType,omitempty"`
	VercelID         *string                                     `json:"vercelId,omitempty"`
	VercelCache      *GetDeploymentEventsResponseBodyVercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string                                     `json:"lambdaRegion,omitempty"`
}

func (o *GetDeploymentEventsResponseBodyProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *GetDeploymentEventsResponseBodyProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *GetDeploymentEventsResponseBodyProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentEventsResponseBodyProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentEventsResponseBodyProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsResponseBodyProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *GetDeploymentEventsResponseBodyProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *GetDeploymentEventsResponseBodyProxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *GetDeploymentEventsResponseBodyProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *GetDeploymentEventsResponseBodyProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *GetDeploymentEventsResponseBodyProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *GetDeploymentEventsResponseBodyProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *GetDeploymentEventsResponseBodyProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *GetDeploymentEventsResponseBodyProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *GetDeploymentEventsResponseBodyProxy) GetVercelCache() *GetDeploymentEventsResponseBodyVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *GetDeploymentEventsResponseBodyProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type Payload struct {
	DeploymentID string                                `json:"deploymentId"`
	Info         *GetDeploymentEventsResponseBodyInfo  `json:"info,omitempty"`
	Text         *string                               `json:"text,omitempty"`
	ID           string                                `json:"id"`
	Date         float64                               `json:"date"`
	Serial       string                                `json:"serial"`
	Created      *float64                              `json:"created,omitempty"`
	StatusCode   *float64                              `json:"statusCode,omitempty"`
	RequestID    *string                               `json:"requestId,omitempty"`
	Proxy        *GetDeploymentEventsResponseBodyProxy `json:"proxy,omitempty"`
}

func (o *Payload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *Payload) GetInfo() *GetDeploymentEventsResponseBodyInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *Payload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *Payload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *Payload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *Payload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Payload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Payload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *Payload) GetProxy() *GetDeploymentEventsResponseBodyProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

type ResponseBody2 struct {
	Type    GetDeploymentEventsResponseBodyType `json:"type"`
	Created float64                             `json:"created"`
	Payload Payload                             `json:"payload"`
}

func (o *ResponseBody2) GetType() GetDeploymentEventsResponseBodyType {
	if o == nil {
		return GetDeploymentEventsResponseBodyType("")
	}
	return o.Type
}

func (o *ResponseBody2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *ResponseBody2) GetPayload() Payload {
	if o == nil {
		return Payload{}
	}
	return o.Payload
}

type Info struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *Info) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Info) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Info) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *Info) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Info) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *Info) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type VercelCache string

const (
	VercelCacheMiss        VercelCache = "MISS"
	VercelCacheHit         VercelCache = "HIT"
	VercelCacheStale       VercelCache = "STALE"
	VercelCacheBypass      VercelCache = "BYPASS"
	VercelCachePrerender   VercelCache = "PRERENDER"
	VercelCacheRevalidated VercelCache = "REVALIDATED"
)

func (e VercelCache) ToPointer() *VercelCache {
	return &e
}
func (e *VercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = VercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VercelCache: %v", v)
	}
}

type Proxy struct {
	Timestamp        float64      `json:"timestamp"`
	Method           string       `json:"method"`
	Host             string       `json:"host"`
	Path             string       `json:"path"`
	StatusCode       *float64     `json:"statusCode,omitempty"`
	UserAgent        []string     `json:"userAgent"`
	Referer          string       `json:"referer"`
	ClientIP         string       `json:"clientIp"`
	Region           string       `json:"region"`
	Scheme           *string      `json:"scheme,omitempty"`
	ResponseByteSize *float64     `json:"responseByteSize,omitempty"`
	CacheID          *string      `json:"cacheId,omitempty"`
	PathType         *string      `json:"pathType,omitempty"`
	VercelID         *string      `json:"vercelId,omitempty"`
	VercelCache      *VercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string      `json:"lambdaRegion,omitempty"`
}

func (o *Proxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *Proxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *Proxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Proxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Proxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Proxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *Proxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *Proxy) GetClientIP() string {
	if o == nil {
		return ""
	}
	return o.ClientIP
}

func (o *Proxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Proxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *Proxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *Proxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *Proxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *Proxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *Proxy) GetVercelCache() *VercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *Proxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

type ResponseBodyType string

const (
	ResponseBodyTypeCommand                ResponseBodyType = "command"
	ResponseBodyTypeStdout                 ResponseBodyType = "stdout"
	ResponseBodyTypeStderr                 ResponseBodyType = "stderr"
	ResponseBodyTypeExit                   ResponseBodyType = "exit"
	ResponseBodyTypeDeploymentState        ResponseBodyType = "deployment-state"
	ResponseBodyTypeDelimiter              ResponseBodyType = "delimiter"
	ResponseBodyTypeMiddleware             ResponseBodyType = "middleware"
	ResponseBodyTypeMiddlewareInvocation   ResponseBodyType = "middleware-invocation"
	ResponseBodyTypeEdgeFunctionInvocation ResponseBodyType = "edge-function-invocation"
	ResponseBodyTypeFatal                  ResponseBodyType = "fatal"
)

func (e ResponseBodyType) ToPointer() *ResponseBodyType {
	return &e
}
func (e *ResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "delimiter":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "fatal":
		*e = ResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyType: %v", v)
	}
}

type ResponseBody1 struct {
	Created      float64          `json:"created"`
	Date         float64          `json:"date"`
	DeploymentID string           `json:"deploymentId"`
	ID           string           `json:"id"`
	Info         Info             `json:"info"`
	Proxy        *Proxy           `json:"proxy,omitempty"`
	RequestID    *string          `json:"requestId,omitempty"`
	Serial       string           `json:"serial"`
	StatusCode   *float64         `json:"statusCode,omitempty"`
	Text         *string          `json:"text,omitempty"`
	Type         ResponseBodyType `json:"type"`
}

func (o *ResponseBody1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *ResponseBody1) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *ResponseBody1) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *ResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBody1) GetInfo() Info {
	if o == nil {
		return Info{}
	}
	return o.Info
}

func (o *ResponseBody1) GetProxy() *Proxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

func (o *ResponseBody1) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *ResponseBody1) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *ResponseBody1) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *ResponseBody1) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *ResponseBody1) GetType() ResponseBodyType {
	if o == nil {
		return ResponseBodyType("")
	}
	return o.Type
}

type GetDeploymentEventsDeploymentsResponseBodyType string

const (
	GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody1 GetDeploymentEventsDeploymentsResponseBodyType = "responseBody_1"
	GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody2 GetDeploymentEventsDeploymentsResponseBodyType = "responseBody_2"
)

type GetDeploymentEventsDeploymentsResponseBody struct {
	ResponseBody1 *ResponseBody1
	ResponseBody2 *ResponseBody2

	Type GetDeploymentEventsDeploymentsResponseBodyType
}

func CreateGetDeploymentEventsDeploymentsResponseBodyResponseBody1(responseBody1 ResponseBody1) GetDeploymentEventsDeploymentsResponseBody {
	typ := GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody1

	return GetDeploymentEventsDeploymentsResponseBody{
		ResponseBody1: &responseBody1,
		Type:          typ,
	}
}

func CreateGetDeploymentEventsDeploymentsResponseBodyResponseBody2(responseBody2 ResponseBody2) GetDeploymentEventsDeploymentsResponseBody {
	typ := GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody2

	return GetDeploymentEventsDeploymentsResponseBody{
		ResponseBody2: &responseBody2,
		Type:          typ,
	}
}

func (u *GetDeploymentEventsDeploymentsResponseBody) UnmarshalJSON(data []byte) error {

	var responseBody2 ResponseBody2 = ResponseBody2{}
	if err := utils.UnmarshalJSON(data, &responseBody2, "", true, true); err == nil {
		u.ResponseBody2 = &responseBody2
		u.Type = GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody2
		return nil
	}

	var responseBody1 ResponseBody1 = ResponseBody1{}
	if err := utils.UnmarshalJSON(data, &responseBody1, "", true, true); err == nil {
		u.ResponseBody1 = &responseBody1
		u.Type = GetDeploymentEventsDeploymentsResponseBodyTypeResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsDeploymentsResponseBody", string(data))
}

func (u GetDeploymentEventsDeploymentsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ResponseBody1 != nil {
		return utils.MarshalJSON(u.ResponseBody1, "", true)
	}

	if u.ResponseBody2 != nil {
		return utils.MarshalJSON(u.ResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsDeploymentsResponseBody: all fields are null")
}

type GetDeploymentEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A stream of jsonlines where each line is a deployment log item.
	// Array of deployment logs for the provided query.
	ResponseBodies []GetDeploymentEventsDeploymentsResponseBody
	// A stream of jsonlines where each line is a deployment log item.
	// Array of deployment logs for the provided query.
	OneOf *GetDeploymentEventsResponseBody
}

func (o *GetDeploymentEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDeploymentEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDeploymentEventsResponse) GetResponseBodies() []GetDeploymentEventsDeploymentsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *GetDeploymentEventsResponse) GetOneOf() *GetDeploymentEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
