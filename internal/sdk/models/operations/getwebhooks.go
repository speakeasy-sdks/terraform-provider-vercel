// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetWebhooksRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetWebhooksRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetWebhooksRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetWebhooksRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ResponseBodyFramework string

const (
	ResponseBodyFrameworkBlitzjs        ResponseBodyFramework = "blitzjs"
	ResponseBodyFrameworkNextjs         ResponseBodyFramework = "nextjs"
	ResponseBodyFrameworkGatsby         ResponseBodyFramework = "gatsby"
	ResponseBodyFrameworkRemix          ResponseBodyFramework = "remix"
	ResponseBodyFrameworkAstro          ResponseBodyFramework = "astro"
	ResponseBodyFrameworkHexo           ResponseBodyFramework = "hexo"
	ResponseBodyFrameworkEleventy       ResponseBodyFramework = "eleventy"
	ResponseBodyFrameworkDocusaurus2    ResponseBodyFramework = "docusaurus-2"
	ResponseBodyFrameworkDocusaurus     ResponseBodyFramework = "docusaurus"
	ResponseBodyFrameworkPreact         ResponseBodyFramework = "preact"
	ResponseBodyFrameworkSolidstart1    ResponseBodyFramework = "solidstart-1"
	ResponseBodyFrameworkSolidstart     ResponseBodyFramework = "solidstart"
	ResponseBodyFrameworkDojo           ResponseBodyFramework = "dojo"
	ResponseBodyFrameworkEmber          ResponseBodyFramework = "ember"
	ResponseBodyFrameworkVue            ResponseBodyFramework = "vue"
	ResponseBodyFrameworkScully         ResponseBodyFramework = "scully"
	ResponseBodyFrameworkIonicAngular   ResponseBodyFramework = "ionic-angular"
	ResponseBodyFrameworkAngular        ResponseBodyFramework = "angular"
	ResponseBodyFrameworkPolymer        ResponseBodyFramework = "polymer"
	ResponseBodyFrameworkSvelte         ResponseBodyFramework = "svelte"
	ResponseBodyFrameworkSveltekit      ResponseBodyFramework = "sveltekit"
	ResponseBodyFrameworkSveltekit1     ResponseBodyFramework = "sveltekit-1"
	ResponseBodyFrameworkIonicReact     ResponseBodyFramework = "ionic-react"
	ResponseBodyFrameworkCreateReactApp ResponseBodyFramework = "create-react-app"
	ResponseBodyFrameworkGridsome       ResponseBodyFramework = "gridsome"
	ResponseBodyFrameworkUmijs          ResponseBodyFramework = "umijs"
	ResponseBodyFrameworkSapper         ResponseBodyFramework = "sapper"
	ResponseBodyFrameworkSaber          ResponseBodyFramework = "saber"
	ResponseBodyFrameworkStencil        ResponseBodyFramework = "stencil"
	ResponseBodyFrameworkNuxtjs         ResponseBodyFramework = "nuxtjs"
	ResponseBodyFrameworkRedwoodjs      ResponseBodyFramework = "redwoodjs"
	ResponseBodyFrameworkHugo           ResponseBodyFramework = "hugo"
	ResponseBodyFrameworkJekyll         ResponseBodyFramework = "jekyll"
	ResponseBodyFrameworkBrunch         ResponseBodyFramework = "brunch"
	ResponseBodyFrameworkMiddleman      ResponseBodyFramework = "middleman"
	ResponseBodyFrameworkZola           ResponseBodyFramework = "zola"
	ResponseBodyFrameworkHydrogen       ResponseBodyFramework = "hydrogen"
	ResponseBodyFrameworkVite           ResponseBodyFramework = "vite"
	ResponseBodyFrameworkVitepress      ResponseBodyFramework = "vitepress"
	ResponseBodyFrameworkVuepress       ResponseBodyFramework = "vuepress"
	ResponseBodyFrameworkParcel         ResponseBodyFramework = "parcel"
	ResponseBodyFrameworkSanity         ResponseBodyFramework = "sanity"
	ResponseBodyFrameworkStorybook      ResponseBodyFramework = "storybook"
)

func (e ResponseBodyFramework) ToPointer() *ResponseBodyFramework {
	return &e
}
func (e *ResponseBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = ResponseBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyFramework: %v", v)
	}
}

type ProjectsMetadata struct {
	ID               string                 `json:"id"`
	Name             string                 `json:"name"`
	Framework        *ResponseBodyFramework `json:"framework,omitempty"`
	LatestDeployment *string                `json:"latestDeployment,omitempty"`
}

func (o *ProjectsMetadata) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectsMetadata) GetFramework() *ResponseBodyFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectsMetadata) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

// ResponseBodyEvents - The webhooks events
type ResponseBodyEvents string

const (
	ResponseBodyEventsBudgetReached                                    ResponseBodyEvents = "budget.reached"
	ResponseBodyEventsBudgetReset                                      ResponseBodyEvents = "budget.reset"
	ResponseBodyEventsDomainCreated                                    ResponseBodyEvents = "domain.created"
	ResponseBodyEventsDeploymentCreated                                ResponseBodyEvents = "deployment.created"
	ResponseBodyEventsDeploymentError                                  ResponseBodyEvents = "deployment.error"
	ResponseBodyEventsDeploymentCanceled                               ResponseBodyEvents = "deployment.canceled"
	ResponseBodyEventsDeploymentSucceeded                              ResponseBodyEvents = "deployment.succeeded"
	ResponseBodyEventsDeploymentReady                                  ResponseBodyEvents = "deployment.ready"
	ResponseBodyEventsDeploymentCheckRerequested                       ResponseBodyEvents = "deployment.check-rerequested"
	ResponseBodyEventsIntegrationConfigurationPermissionUpgraded       ResponseBodyEvents = "integration-configuration.permission-upgraded"
	ResponseBodyEventsIntegrationConfigurationRemoved                  ResponseBodyEvents = "integration-configuration.removed"
	ResponseBodyEventsIntegrationConfigurationScopeChangeConfirmed     ResponseBodyEvents = "integration-configuration.scope-change-confirmed"
	ResponseBodyEventsProjectCreated                                   ResponseBodyEvents = "project.created"
	ResponseBodyEventsProjectRemoved                                   ResponseBodyEvents = "project.removed"
	ResponseBodyEventsDeploymentChecksCompleted                        ResponseBodyEvents = "deployment-checks-completed"
	ResponseBodyEventsDeploymentDashReady                              ResponseBodyEvents = "deployment-ready"
	ResponseBodyEventsDeploymentDashPrepared                           ResponseBodyEvents = "deployment-prepared"
	ResponseBodyEventsDeploymentDashError                              ResponseBodyEvents = "deployment-error"
	ResponseBodyEventsDeploymentDashCheckRerequested                   ResponseBodyEvents = "deployment-check-rerequested"
	ResponseBodyEventsDeploymentDashCanceled                           ResponseBodyEvents = "deployment-canceled"
	ResponseBodyEventsProjectDashCreated                               ResponseBodyEvents = "project-created"
	ResponseBodyEventsProjectDashRemoved                               ResponseBodyEvents = "project-removed"
	ResponseBodyEventsDomainDashCreated                                ResponseBodyEvents = "domain-created"
	ResponseBodyEventsDeployment                                       ResponseBodyEvents = "deployment"
	ResponseBodyEventsIntegrationConfigurationDashPermissionUpdated    ResponseBodyEvents = "integration-configuration-permission-updated"
	ResponseBodyEventsIntegrationConfigurationDashRemoved              ResponseBodyEvents = "integration-configuration-removed"
	ResponseBodyEventsIntegrationConfigurationDashScopeChangeConfirmed ResponseBodyEvents = "integration-configuration-scope-change-confirmed"
	ResponseBodyEventsTestWebhook                                      ResponseBodyEvents = "test-webhook"
)

func (e ResponseBodyEvents) ToPointer() *ResponseBodyEvents {
	return &e
}
func (e *ResponseBodyEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "test-webhook":
		*e = ResponseBodyEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyEvents: %v", v)
	}
}

type GetWebhooksResponseBody struct {
	ProjectsMetadata []ProjectsMetadata `json:"projectsMetadata"`
	// The webhooks events
	Events []ResponseBodyEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhooksResponseBody) GetProjectsMetadata() []ProjectsMetadata {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

func (o *GetWebhooksResponseBody) GetEvents() []ResponseBodyEvents {
	if o == nil {
		return []ResponseBodyEvents{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhooksResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhooksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse    *http.Response
	ResponseBodies []GetWebhooksResponseBody
}

func (o *GetWebhooksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetWebhooksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetWebhooksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetWebhooksResponse) GetResponseBodies() []GetWebhooksResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
