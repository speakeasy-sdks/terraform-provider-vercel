// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetWebhooksRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *GetWebhooksRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetWebhooksRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetWebhooksRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// GetWebhooksEvents - The webhooks events
type GetWebhooksEvents string

const (
	GetWebhooksEventsBudgetReached                                    GetWebhooksEvents = "budget.reached"
	GetWebhooksEventsBudgetReset                                      GetWebhooksEvents = "budget.reset"
	GetWebhooksEventsDomainCreated                                    GetWebhooksEvents = "domain.created"
	GetWebhooksEventsDeploymentCreated                                GetWebhooksEvents = "deployment.created"
	GetWebhooksEventsDeploymentError                                  GetWebhooksEvents = "deployment.error"
	GetWebhooksEventsDeploymentCanceled                               GetWebhooksEvents = "deployment.canceled"
	GetWebhooksEventsDeploymentSucceeded                              GetWebhooksEvents = "deployment.succeeded"
	GetWebhooksEventsDeploymentReady                                  GetWebhooksEvents = "deployment.ready"
	GetWebhooksEventsDeploymentCheckRerequested                       GetWebhooksEvents = "deployment.check-rerequested"
	GetWebhooksEventsIntegrationConfigurationPermissionUpgraded       GetWebhooksEvents = "integration-configuration.permission-upgraded"
	GetWebhooksEventsIntegrationConfigurationRemoved                  GetWebhooksEvents = "integration-configuration.removed"
	GetWebhooksEventsIntegrationConfigurationScopeChangeConfirmed     GetWebhooksEvents = "integration-configuration.scope-change-confirmed"
	GetWebhooksEventsProjectCreated                                   GetWebhooksEvents = "project.created"
	GetWebhooksEventsProjectRemoved                                   GetWebhooksEvents = "project.removed"
	GetWebhooksEventsDeploymentChecksCompleted                        GetWebhooksEvents = "deployment-checks-completed"
	GetWebhooksEventsDeploymentDashReady                              GetWebhooksEvents = "deployment-ready"
	GetWebhooksEventsDeploymentDashPrepared                           GetWebhooksEvents = "deployment-prepared"
	GetWebhooksEventsDeploymentDashError                              GetWebhooksEvents = "deployment-error"
	GetWebhooksEventsDeploymentDashCheckRerequested                   GetWebhooksEvents = "deployment-check-rerequested"
	GetWebhooksEventsDeploymentDashCanceled                           GetWebhooksEvents = "deployment-canceled"
	GetWebhooksEventsProjectDashCreated                               GetWebhooksEvents = "project-created"
	GetWebhooksEventsProjectDashRemoved                               GetWebhooksEvents = "project-removed"
	GetWebhooksEventsDomainDashCreated                                GetWebhooksEvents = "domain-created"
	GetWebhooksEventsDeployment                                       GetWebhooksEvents = "deployment"
	GetWebhooksEventsIntegrationConfigurationDashPermissionUpdated    GetWebhooksEvents = "integration-configuration-permission-updated"
	GetWebhooksEventsIntegrationConfigurationDashRemoved              GetWebhooksEvents = "integration-configuration-removed"
	GetWebhooksEventsIntegrationConfigurationDashScopeChangeConfirmed GetWebhooksEvents = "integration-configuration-scope-change-confirmed"
	GetWebhooksEventsTestWebhook                                      GetWebhooksEvents = "test-webhook"
)

func (e GetWebhooksEvents) ToPointer() *GetWebhooksEvents {
	return &e
}
func (e *GetWebhooksEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "test-webhook":
		*e = GetWebhooksEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksEvents: %v", v)
	}
}

type GetWebhooksFramework string

const (
	GetWebhooksFrameworkBlitzjs        GetWebhooksFramework = "blitzjs"
	GetWebhooksFrameworkNextjs         GetWebhooksFramework = "nextjs"
	GetWebhooksFrameworkGatsby         GetWebhooksFramework = "gatsby"
	GetWebhooksFrameworkRemix          GetWebhooksFramework = "remix"
	GetWebhooksFrameworkAstro          GetWebhooksFramework = "astro"
	GetWebhooksFrameworkHexo           GetWebhooksFramework = "hexo"
	GetWebhooksFrameworkEleventy       GetWebhooksFramework = "eleventy"
	GetWebhooksFrameworkDocusaurus2    GetWebhooksFramework = "docusaurus-2"
	GetWebhooksFrameworkDocusaurus     GetWebhooksFramework = "docusaurus"
	GetWebhooksFrameworkPreact         GetWebhooksFramework = "preact"
	GetWebhooksFrameworkSolidstart1    GetWebhooksFramework = "solidstart-1"
	GetWebhooksFrameworkSolidstart     GetWebhooksFramework = "solidstart"
	GetWebhooksFrameworkDojo           GetWebhooksFramework = "dojo"
	GetWebhooksFrameworkEmber          GetWebhooksFramework = "ember"
	GetWebhooksFrameworkVue            GetWebhooksFramework = "vue"
	GetWebhooksFrameworkScully         GetWebhooksFramework = "scully"
	GetWebhooksFrameworkIonicAngular   GetWebhooksFramework = "ionic-angular"
	GetWebhooksFrameworkAngular        GetWebhooksFramework = "angular"
	GetWebhooksFrameworkPolymer        GetWebhooksFramework = "polymer"
	GetWebhooksFrameworkSvelte         GetWebhooksFramework = "svelte"
	GetWebhooksFrameworkSveltekit      GetWebhooksFramework = "sveltekit"
	GetWebhooksFrameworkSveltekit1     GetWebhooksFramework = "sveltekit-1"
	GetWebhooksFrameworkIonicReact     GetWebhooksFramework = "ionic-react"
	GetWebhooksFrameworkCreateReactApp GetWebhooksFramework = "create-react-app"
	GetWebhooksFrameworkGridsome       GetWebhooksFramework = "gridsome"
	GetWebhooksFrameworkUmijs          GetWebhooksFramework = "umijs"
	GetWebhooksFrameworkSapper         GetWebhooksFramework = "sapper"
	GetWebhooksFrameworkSaber          GetWebhooksFramework = "saber"
	GetWebhooksFrameworkStencil        GetWebhooksFramework = "stencil"
	GetWebhooksFrameworkNuxtjs         GetWebhooksFramework = "nuxtjs"
	GetWebhooksFrameworkRedwoodjs      GetWebhooksFramework = "redwoodjs"
	GetWebhooksFrameworkHugo           GetWebhooksFramework = "hugo"
	GetWebhooksFrameworkJekyll         GetWebhooksFramework = "jekyll"
	GetWebhooksFrameworkBrunch         GetWebhooksFramework = "brunch"
	GetWebhooksFrameworkMiddleman      GetWebhooksFramework = "middleman"
	GetWebhooksFrameworkZola           GetWebhooksFramework = "zola"
	GetWebhooksFrameworkHydrogen       GetWebhooksFramework = "hydrogen"
	GetWebhooksFrameworkVite           GetWebhooksFramework = "vite"
	GetWebhooksFrameworkVitepress      GetWebhooksFramework = "vitepress"
	GetWebhooksFrameworkVuepress       GetWebhooksFramework = "vuepress"
	GetWebhooksFrameworkParcel         GetWebhooksFramework = "parcel"
	GetWebhooksFrameworkSanity         GetWebhooksFramework = "sanity"
	GetWebhooksFrameworkStorybook      GetWebhooksFramework = "storybook"
)

func (e GetWebhooksFramework) ToPointer() *GetWebhooksFramework {
	return &e
}
func (e *GetWebhooksFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetWebhooksFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksFramework: %v", v)
	}
}

type ProjectsMetadata struct {
	Framework        *GetWebhooksFramework `json:"framework,omitempty"`
	ID               string                `json:"id"`
	LatestDeployment *string               `json:"latestDeployment,omitempty"`
	Name             string                `json:"name"`
}

func (o *ProjectsMetadata) GetFramework() *GetWebhooksFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectsMetadata) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectsMetadata) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

func (o *ProjectsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetWebhooksResponseBody struct {
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// The webhooks events
	Events []GetWebhooksEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// The ID of the projects the webhook is associated with
	ProjectIds       []string           `json:"projectIds,omitempty"`
	ProjectsMetadata []ProjectsMetadata `json:"projectsMetadata"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// A string with the URL of the webhook
	URL string `json:"url"`
}

func (o *GetWebhooksResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody) GetEvents() []GetWebhooksEvents {
	if o == nil {
		return []GetWebhooksEvents{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *GetWebhooksResponseBody) GetProjectsMetadata() []ProjectsMetadata {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

func (o *GetWebhooksResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetWebhooksResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Classes     []GetWebhooksResponseBody
}

func (o *GetWebhooksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetWebhooksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetWebhooksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetWebhooksResponse) GetClasses() []GetWebhooksResponseBody {
	if o == nil {
		return nil
	}
	return o.Classes
}
