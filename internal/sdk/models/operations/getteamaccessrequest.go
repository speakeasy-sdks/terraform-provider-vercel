// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type GetTeamAccessRequestRequest struct {
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

func (o *GetTeamAccessRequestRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *GetTeamAccessRequestRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// Bitbucket - Map of the connected Bitbucket account.
type Bitbucket struct {
	Login *string `json:"login,omitempty"`
}

func (o *Bitbucket) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// Github - Map of the connected GitHub account.
type Github struct {
	Login *string `json:"login,omitempty"`
}

func (o *Github) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// Gitlab - Map of the connected GitLab account.
type Gitlab struct {
	Login *string `json:"login,omitempty"`
}

func (o *Gitlab) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

type GetTeamAccessRequestGitUserIDType string

const (
	GetTeamAccessRequestGitUserIDTypeStr    GetTeamAccessRequestGitUserIDType = "str"
	GetTeamAccessRequestGitUserIDTypeNumber GetTeamAccessRequestGitUserIDType = "number"
)

type GetTeamAccessRequestGitUserID struct {
	Str    *string
	Number *float64

	Type GetTeamAccessRequestGitUserIDType
}

func CreateGetTeamAccessRequestGitUserIDStr(str string) GetTeamAccessRequestGitUserID {
	typ := GetTeamAccessRequestGitUserIDTypeStr

	return GetTeamAccessRequestGitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTeamAccessRequestGitUserIDNumber(number float64) GetTeamAccessRequestGitUserID {
	typ := GetTeamAccessRequestGitUserIDTypeNumber

	return GetTeamAccessRequestGitUserID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetTeamAccessRequestGitUserID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTeamAccessRequestGitUserIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetTeamAccessRequestGitUserIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTeamAccessRequestGitUserID", string(data))
}

func (u GetTeamAccessRequestGitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetTeamAccessRequestGitUserID: all fields are null")
}

type GetTeamAccessRequestOrigin string

const (
	GetTeamAccessRequestOriginMail              GetTeamAccessRequestOrigin = "mail"
	GetTeamAccessRequestOriginLink              GetTeamAccessRequestOrigin = "link"
	GetTeamAccessRequestOriginImport            GetTeamAccessRequestOrigin = "import"
	GetTeamAccessRequestOriginTeams             GetTeamAccessRequestOrigin = "teams"
	GetTeamAccessRequestOriginGithub            GetTeamAccessRequestOrigin = "github"
	GetTeamAccessRequestOriginGitlab            GetTeamAccessRequestOrigin = "gitlab"
	GetTeamAccessRequestOriginBitbucket         GetTeamAccessRequestOrigin = "bitbucket"
	GetTeamAccessRequestOriginSaml              GetTeamAccessRequestOrigin = "saml"
	GetTeamAccessRequestOriginDsync             GetTeamAccessRequestOrigin = "dsync"
	GetTeamAccessRequestOriginFeedback          GetTeamAccessRequestOrigin = "feedback"
	GetTeamAccessRequestOriginOrganizationTeams GetTeamAccessRequestOrigin = "organization-teams"
)

func (e GetTeamAccessRequestOrigin) ToPointer() *GetTeamAccessRequestOrigin {
	return &e
}
func (e *GetTeamAccessRequestOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mail":
		fallthrough
	case "link":
		fallthrough
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "saml":
		fallthrough
	case "dsync":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = GetTeamAccessRequestOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamAccessRequestOrigin: %v", v)
	}
}

// GetTeamAccessRequestJoinedFrom - A map that describes the origin from where the user joined.
type GetTeamAccessRequestJoinedFrom struct {
	CommitID         *string                        `json:"commitId,omitempty"`
	DsyncConnectedAt *float64                       `json:"dsyncConnectedAt,omitempty"`
	DsyncUserID      *string                        `json:"dsyncUserId,omitempty"`
	GitUserID        *GetTeamAccessRequestGitUserID `json:"gitUserId,omitempty"`
	GitUserLogin     *string                        `json:"gitUserLogin,omitempty"`
	IdpUserID        *string                        `json:"idpUserId,omitempty"`
	Origin           GetTeamAccessRequestOrigin     `json:"origin"`
	RepoID           *string                        `json:"repoId,omitempty"`
	RepoPath         *string                        `json:"repoPath,omitempty"`
	SsoConnectedAt   *float64                       `json:"ssoConnectedAt,omitempty"`
	SsoUserID        *string                        `json:"ssoUserId,omitempty"`
}

func (o *GetTeamAccessRequestJoinedFrom) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *GetTeamAccessRequestJoinedFrom) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

func (o *GetTeamAccessRequestJoinedFrom) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *GetTeamAccessRequestJoinedFrom) GetGitUserID() *GetTeamAccessRequestGitUserID {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *GetTeamAccessRequestJoinedFrom) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *GetTeamAccessRequestJoinedFrom) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *GetTeamAccessRequestJoinedFrom) GetOrigin() GetTeamAccessRequestOrigin {
	if o == nil {
		return GetTeamAccessRequestOrigin("")
	}
	return o.Origin
}

func (o *GetTeamAccessRequestJoinedFrom) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetTeamAccessRequestJoinedFrom) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *GetTeamAccessRequestJoinedFrom) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *GetTeamAccessRequestJoinedFrom) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

// GetTeamAccessRequestResponseBody - Successfully
type GetTeamAccessRequestResponseBody struct {
	// Timestamp in milliseconds when the user requested access to the team.
	AccessRequestedAt float64 `json:"accessRequestedAt"`
	// Map of the connected Bitbucket account.
	Bitbucket *Bitbucket `json:"bitbucket"`
	// Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.
	Confirmed bool `json:"confirmed"`
	// Map of the connected GitHub account.
	Github *Github `json:"github"`
	// Map of the connected GitLab account.
	Gitlab *Gitlab `json:"gitlab"`
	// A map that describes the origin from where the user joined.
	JoinedFrom GetTeamAccessRequestJoinedFrom `json:"joinedFrom"`
	// The name of the team.
	TeamName string `json:"teamName"`
	// The slug of the team.
	TeamSlug string `json:"teamSlug"`
}

func (o *GetTeamAccessRequestResponseBody) GetAccessRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.AccessRequestedAt
}

func (o *GetTeamAccessRequestResponseBody) GetBitbucket() *Bitbucket {
	if o == nil {
		return nil
	}
	return o.Bitbucket
}

func (o *GetTeamAccessRequestResponseBody) GetConfirmed() bool {
	if o == nil {
		return false
	}
	return o.Confirmed
}

func (o *GetTeamAccessRequestResponseBody) GetGithub() *Github {
	if o == nil {
		return nil
	}
	return o.Github
}

func (o *GetTeamAccessRequestResponseBody) GetGitlab() *Gitlab {
	if o == nil {
		return nil
	}
	return o.Gitlab
}

func (o *GetTeamAccessRequestResponseBody) GetJoinedFrom() GetTeamAccessRequestJoinedFrom {
	if o == nil {
		return GetTeamAccessRequestJoinedFrom{}
	}
	return o.JoinedFrom
}

func (o *GetTeamAccessRequestResponseBody) GetTeamName() string {
	if o == nil {
		return ""
	}
	return o.TeamName
}

func (o *GetTeamAccessRequestResponseBody) GetTeamSlug() string {
	if o == nil {
		return ""
	}
	return o.TeamSlug
}

type GetTeamAccessRequestResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully
	Object *GetTeamAccessRequestResponseBody
}

func (o *GetTeamAccessRequestResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetTeamAccessRequestResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetTeamAccessRequestResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetTeamAccessRequestResponse) GetObject() *GetTeamAccessRequestResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
