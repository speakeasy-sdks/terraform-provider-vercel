// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
	"time"
)

type CreateSecretRequestBody struct {
	// Whether the secret value can be decrypted after it has been created.
	Decryptable *bool `json:"decryptable,omitempty"`
	// The name of the secret (max 100 characters).
	Name string `json:"name"`
	// Associate a secret to a project.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID *string `json:"projectId,omitempty"`
	// The value of the new secret.
	Value string `json:"value"`
}

func (o *CreateSecretRequestBody) GetDecryptable() *bool {
	if o == nil {
		return nil
	}
	return o.Decryptable
}

func (o *CreateSecretRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateSecretRequestBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateSecretRequestBody) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateSecretRequest struct {
	RequestBody *CreateSecretRequestBody `request:"mediaType=application/json"`
	// The name of the secret.
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateSecretRequest) GetRequestBody() *CreateSecretRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateSecretRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateSecretRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateSecretRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CreateSecretType string

const (
	CreateSecretTypeBuffer CreateSecretType = "Buffer"
)

func (e CreateSecretType) ToPointer() *CreateSecretType {
	return &e
}
func (e *CreateSecretType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Buffer":
		*e = CreateSecretType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSecretType: %v", v)
	}
}

type Value struct {
	Data []float64         `json:"data,omitempty"`
	Type *CreateSecretType `json:"type,omitempty"`
}

func (o *Value) GetData() []float64 {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *Value) GetType() *CreateSecretType {
	if o == nil {
		return nil
	}
	return o.Type
}

// CreateSecretResponseBody - Successful response showing the created secret.
type CreateSecretResponseBody struct {
	// The date when the secret was created.
	Created time.Time `json:"created"`
	// Timestamp for when the secret was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Indicates whether the secret value can be decrypted after it has been created.
	Decryptable *bool `json:"decryptable,omitempty"`
	// The name of the secret.
	Name string `json:"name"`
	// The unique identifier of the project which the secret belongs to.
	ProjectID *string `json:"projectId,omitempty"`
	// The unique identifier of the team the secret was created for.
	TeamID *string `json:"teamId,omitempty"`
	// The unique identifier of the secret.
	UID string `json:"uid"`
	// The unique identifier of the user who created the secret.
	UserID *string `json:"userId,omitempty"`
	Value  Value   `json:"value"`
}

func (c CreateSecretResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSecretResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateSecretResponseBody) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *CreateSecretResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateSecretResponseBody) GetDecryptable() *bool {
	if o == nil {
		return nil
	}
	return o.Decryptable
}

func (o *CreateSecretResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateSecretResponseBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateSecretResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateSecretResponseBody) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateSecretResponseBody) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *CreateSecretResponseBody) GetValue() Value {
	if o == nil {
		return Value{}
	}
	return o.Value
}

type CreateSecretResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response showing the created secret.
	Object *CreateSecretResponseBody
}

func (o *CreateSecretResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateSecretResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateSecretResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateSecretResponse) GetObject() *CreateSecretResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
