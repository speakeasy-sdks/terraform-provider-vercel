// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type RemoveProjectEnvRequest struct {
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *RemoveProjectEnvRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *RemoveProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RemoveProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *RemoveProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *RemoveProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14TypeIntegrationStoreSecret RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type = "integration-store-secret"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse14 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse14) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint14Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13TypePostgresURLNoSsl RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse13 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse13) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint13Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12TypePostgresDatabase RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse12 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse12) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintTypePostgresPassword RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType = "postgres-password"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse11 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse11) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHintType("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3TypePostgresHost RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type = "postgres-host"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse10 struct {
	StoreID string                                                              `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse10) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9TypePostgresUser RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse9 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse9) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8TypePostgresPrismaURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse8 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse8) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7TypePostgresURLNonPooling RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse7 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse7) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6TypePostgresURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse6 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse6) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5TypeBlobReadWriteToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse5 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse5) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse4 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse4) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3TypeRedisRestAPIToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type = "redis-rest-api-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse2003 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse2003) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse2003) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint3Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2TypeRedisRestAPIURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type = "redis-rest-api-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint2Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1TypeRedisURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody3ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponseContentHintType string

const (
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_200_ApplicationJSON_responseBody_1"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_200_ApplicationJSON_responseBody_2"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse2003                            RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_200_3"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse4                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_4"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse5                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_5"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse6                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_6"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse7                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_7"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse8                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_8"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse9                               RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_9"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse10                              RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_10"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse11                              RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_11"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse12                              RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_12"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse13                              RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_13"
	RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse14                              RemoveProjectEnvProjectsResponseContentHintType = "removeProjectEnv_projects_response_14"
)

type RemoveProjectEnvProjectsResponseContentHint struct {
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2
	RemoveProjectEnvProjectsResponse2003                            *RemoveProjectEnvProjectsResponse2003
	RemoveProjectEnvProjectsResponse4                               *RemoveProjectEnvProjectsResponse4
	RemoveProjectEnvProjectsResponse5                               *RemoveProjectEnvProjectsResponse5
	RemoveProjectEnvProjectsResponse6                               *RemoveProjectEnvProjectsResponse6
	RemoveProjectEnvProjectsResponse7                               *RemoveProjectEnvProjectsResponse7
	RemoveProjectEnvProjectsResponse8                               *RemoveProjectEnvProjectsResponse8
	RemoveProjectEnvProjectsResponse9                               *RemoveProjectEnvProjectsResponse9
	RemoveProjectEnvProjectsResponse10                              *RemoveProjectEnvProjectsResponse10
	RemoveProjectEnvProjectsResponse11                              *RemoveProjectEnvProjectsResponse11
	RemoveProjectEnvProjectsResponse12                              *RemoveProjectEnvProjectsResponse12
	RemoveProjectEnvProjectsResponse13                              *RemoveProjectEnvProjectsResponse13
	RemoveProjectEnvProjectsResponse14                              *RemoveProjectEnvProjectsResponse14

	Type RemoveProjectEnvProjectsResponseContentHintType
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1(removeProjectEnvProjectsResponse200ApplicationJSONResponseBody1 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1: &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2(removeProjectEnvProjectsResponse200ApplicationJSONResponseBody2 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2: &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse2003(removeProjectEnvProjectsResponse2003 RemoveProjectEnvProjectsResponse2003) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse2003

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse2003: &removeProjectEnvProjectsResponse2003,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse4(removeProjectEnvProjectsResponse4 RemoveProjectEnvProjectsResponse4) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse4

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse4: &removeProjectEnvProjectsResponse4,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse5(removeProjectEnvProjectsResponse5 RemoveProjectEnvProjectsResponse5) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse5

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse5: &removeProjectEnvProjectsResponse5,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse6(removeProjectEnvProjectsResponse6 RemoveProjectEnvProjectsResponse6) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse6

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse6: &removeProjectEnvProjectsResponse6,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse7(removeProjectEnvProjectsResponse7 RemoveProjectEnvProjectsResponse7) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse7

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse7: &removeProjectEnvProjectsResponse7,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse8(removeProjectEnvProjectsResponse8 RemoveProjectEnvProjectsResponse8) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse8

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse8: &removeProjectEnvProjectsResponse8,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse9(removeProjectEnvProjectsResponse9 RemoveProjectEnvProjectsResponse9) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse9

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse9: &removeProjectEnvProjectsResponse9,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse10(removeProjectEnvProjectsResponse10 RemoveProjectEnvProjectsResponse10) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse10

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse10: &removeProjectEnvProjectsResponse10,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse11(removeProjectEnvProjectsResponse11 RemoveProjectEnvProjectsResponse11) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse11

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse11: &removeProjectEnvProjectsResponse11,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse12(removeProjectEnvProjectsResponse12 RemoveProjectEnvProjectsResponse12) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse12

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse12: &removeProjectEnvProjectsResponse12,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse13(removeProjectEnvProjectsResponse13 RemoveProjectEnvProjectsResponse13) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse13

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse13: &removeProjectEnvProjectsResponse13,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseContentHintRemoveProjectEnvProjectsResponse14(removeProjectEnvProjectsResponse14 RemoveProjectEnvProjectsResponse14) RemoveProjectEnvProjectsResponseContentHint {
	typ := RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse14

	return RemoveProjectEnvProjectsResponseContentHint{
		RemoveProjectEnvProjectsResponse14: &removeProjectEnvProjectsResponse14,
		Type:                               typ,
	}
}

func (u *RemoveProjectEnvProjectsResponseContentHint) UnmarshalJSON(data []byte) error {

	var removeProjectEnvProjectsResponse200ApplicationJSONResponseBody1 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 = &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody1
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1
		return nil
	}

	var removeProjectEnvProjectsResponse200ApplicationJSONResponseBody2 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 = &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody2
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var removeProjectEnvProjectsResponse2003 RemoveProjectEnvProjectsResponse2003 = RemoveProjectEnvProjectsResponse2003{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse2003, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse2003 = &removeProjectEnvProjectsResponse2003
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse2003
		return nil
	}

	var removeProjectEnvProjectsResponse4 RemoveProjectEnvProjectsResponse4 = RemoveProjectEnvProjectsResponse4{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse4, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse4 = &removeProjectEnvProjectsResponse4
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse4
		return nil
	}

	var removeProjectEnvProjectsResponse5 RemoveProjectEnvProjectsResponse5 = RemoveProjectEnvProjectsResponse5{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse5, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse5 = &removeProjectEnvProjectsResponse5
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse5
		return nil
	}

	var removeProjectEnvProjectsResponse6 RemoveProjectEnvProjectsResponse6 = RemoveProjectEnvProjectsResponse6{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse6, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse6 = &removeProjectEnvProjectsResponse6
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse6
		return nil
	}

	var removeProjectEnvProjectsResponse7 RemoveProjectEnvProjectsResponse7 = RemoveProjectEnvProjectsResponse7{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse7, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse7 = &removeProjectEnvProjectsResponse7
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse7
		return nil
	}

	var removeProjectEnvProjectsResponse8 RemoveProjectEnvProjectsResponse8 = RemoveProjectEnvProjectsResponse8{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse8, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse8 = &removeProjectEnvProjectsResponse8
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse8
		return nil
	}

	var removeProjectEnvProjectsResponse9 RemoveProjectEnvProjectsResponse9 = RemoveProjectEnvProjectsResponse9{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse9, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse9 = &removeProjectEnvProjectsResponse9
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse9
		return nil
	}

	var removeProjectEnvProjectsResponse10 RemoveProjectEnvProjectsResponse10 = RemoveProjectEnvProjectsResponse10{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse10, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse10 = &removeProjectEnvProjectsResponse10
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse10
		return nil
	}

	var removeProjectEnvProjectsResponse11 RemoveProjectEnvProjectsResponse11 = RemoveProjectEnvProjectsResponse11{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse11, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse11 = &removeProjectEnvProjectsResponse11
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse11
		return nil
	}

	var removeProjectEnvProjectsResponse12 RemoveProjectEnvProjectsResponse12 = RemoveProjectEnvProjectsResponse12{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse12, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse12 = &removeProjectEnvProjectsResponse12
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse12
		return nil
	}

	var removeProjectEnvProjectsResponse13 RemoveProjectEnvProjectsResponse13 = RemoveProjectEnvProjectsResponse13{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse13, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse13 = &removeProjectEnvProjectsResponse13
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse13
		return nil
	}

	var removeProjectEnvProjectsResponse14 RemoveProjectEnvProjectsResponse14 = RemoveProjectEnvProjectsResponse14{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse14, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse14 = &removeProjectEnvProjectsResponse14
		u.Type = RemoveProjectEnvProjectsResponseContentHintTypeRemoveProjectEnvProjectsResponse14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvProjectsResponseContentHint", string(data))
}

func (u RemoveProjectEnvProjectsResponseContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse2003 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse2003, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse4, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse5, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse6, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse7, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse8, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse9, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse10, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse11, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse12, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse13 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse13, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse14 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse14, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvProjectsResponseContentHint: all fields are null")
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONType string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONTypeFlagsSecret RemoveProjectEnvProjectsResponse200ApplicationJSONType = "flags-secret"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONType) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONType: %v", v)
	}
}

// RemoveProjectEnvProjectsResponseInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvProjectsResponseInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                                                 `json:"encryptedValue"`
	Type           RemoveProjectEnvProjectsResponse200ApplicationJSONType `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponseInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *RemoveProjectEnvProjectsResponseInternalContentHint) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONType {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32Production  RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 = "production"
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32Preview     RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 = "preview"
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32Development RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 = "development"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31Production  RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 = "production"
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31Preview     RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 = "preview"
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31Development RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 = "development"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31: %v", v)
	}
}

type RemoveProjectEnvProjectsResponseTargetType string

const (
	RemoveProjectEnvProjectsResponseTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 RemoveProjectEnvProjectsResponseTargetType = "arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31"
	RemoveProjectEnvProjectsResponseTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32        RemoveProjectEnvProjectsResponseTargetType = "removeProjectEnv_projects_response_200_ApplicationJSON_responseBody_3_2"
)

type RemoveProjectEnvProjectsResponseTarget struct {
	ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 []RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32        *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32

	Type RemoveProjectEnvProjectsResponseTargetType
}

func CreateRemoveProjectEnvProjectsResponseTargetArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31(arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 []RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31) RemoveProjectEnvProjectsResponseTarget {
	typ := RemoveProjectEnvProjectsResponseTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31

	return RemoveProjectEnvProjectsResponseTarget{
		ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31: arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31,
		Type: typ,
	}
}

func CreateRemoveProjectEnvProjectsResponseTargetRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32(removeProjectEnvProjectsResponse200ApplicationJSONResponseBody32 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32) RemoveProjectEnvProjectsResponseTarget {
	typ := RemoveProjectEnvProjectsResponseTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32

	return RemoveProjectEnvProjectsResponseTarget{
		RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32: &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody32,
		Type: typ,
	}
}

func (u *RemoveProjectEnvProjectsResponseTarget) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 []RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 = []RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 = arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31
		u.Type = RemoveProjectEnvProjectsResponseTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31
		return nil
	}

	var removeProjectEnvProjectsResponse200ApplicationJSONResponseBody32 RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody32, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 = &removeProjectEnvProjectsResponse200ApplicationJSONResponseBody32
		u.Type = RemoveProjectEnvProjectsResponseTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvProjectsResponseTarget", string(data))
}

func (u RemoveProjectEnvProjectsResponseTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody31, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody32, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvProjectsResponseTarget: all fields are null")
}

type RemoveProjectEnvProjectsResponseType string

const (
	RemoveProjectEnvProjectsResponseTypeSystem    RemoveProjectEnvProjectsResponseType = "system"
	RemoveProjectEnvProjectsResponseTypeEncrypted RemoveProjectEnvProjectsResponseType = "encrypted"
	RemoveProjectEnvProjectsResponseTypePlain     RemoveProjectEnvProjectsResponseType = "plain"
	RemoveProjectEnvProjectsResponseTypeSensitive RemoveProjectEnvProjectsResponseType = "sensitive"
	RemoveProjectEnvProjectsResponseTypeSecret    RemoveProjectEnvProjectsResponseType = "secret"
)

func (e RemoveProjectEnvProjectsResponseType) ToPointer() *RemoveProjectEnvProjectsResponseType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponseType: %v", v)
	}
}

type RemoveProjectEnv3 struct {
	Comment             *string                                      `json:"comment,omitempty"`
	ConfigurationID     *string                                      `json:"configurationId,omitempty"`
	ContentHint         *RemoveProjectEnvProjectsResponseContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                                     `json:"createdAt,omitempty"`
	CreatedBy           *string                                      `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                                      `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *RemoveProjectEnvProjectsResponseInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                                               `json:"key"`
	Target              *RemoveProjectEnvProjectsResponseTarget              `json:"target,omitempty"`
	Type                RemoveProjectEnvProjectsResponseType                 `json:"type"`
	UpdatedAt           *float64                                             `json:"updatedAt,omitempty"`
	UpdatedBy           *string                                              `json:"updatedBy,omitempty"`
	Value               string                                               `json:"value"`
}

func (o *RemoveProjectEnv3) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnv3) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv3) GetContentHint() *RemoveProjectEnvProjectsResponseContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv3) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv3) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *RemoveProjectEnv3) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv3) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv3) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv3) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv3) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv3) GetInternalContentHint() *RemoveProjectEnvProjectsResponseInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnv3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv3) GetTarget() *RemoveProjectEnvProjectsResponseTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv3) GetType() RemoveProjectEnvProjectsResponseType {
	if o == nil {
		return RemoveProjectEnvProjectsResponseType("")
	}
	return o.Type
}

func (o *RemoveProjectEnv3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv3) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14TypeIntegrationStoreSecret RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type = "integration-store-secret"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type: %v", v)
	}
}

type RemoveProjectEnvProjects14 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type `json:"type"`
}

func (o *RemoveProjectEnvProjects14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects14) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint14Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13TypePostgresURLNoSsl RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type: %v", v)
	}
}

type RemoveProjectEnvProjects13 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type `json:"type"`
}

func (o *RemoveProjectEnvProjects13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects13) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint13Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12TypePostgresDatabase RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnvProjects12 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnvProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects12) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintTypePostgresPassword RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType = "postgres-password"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType: %v", v)
	}
}

type RemoveProjectEnvProjects11 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType `json:"type"`
}

func (o *RemoveProjectEnvProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects11) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHintType("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2TypePostgresHost RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type = "postgres-host"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type RemoveProjectEnvProjects10 struct {
	StoreID string                                                              `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type `json:"type"`
}

func (o *RemoveProjectEnvProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects10) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9TypePostgresUser RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnvProjects9 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnvProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects9) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8TypePostgresPrismaURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnvProjects8 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnvProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects8) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7TypePostgresURLNonPooling RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnvProjects7 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnvProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects7) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6TypePostgresURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnvProjects6 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnvProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects6) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5TypeBlobReadWriteToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnvProjects5 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnvProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects5) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnvProjects4 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnvProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects4) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3TypeRedisRestAPIToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type = "redis-rest-api-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse3 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse3) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint3Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2TypeRedisRestAPIURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type = "redis-rest-api-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse2002 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse2002) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse2002) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint2Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1TypeRedisURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse2001 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnvProjectsResponse2001) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjectsResponse2001) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody2ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsContentHintType string

const (
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2001 RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_response_200_1"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2002 RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_response_200_2"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse3    RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_response_3"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects4            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_4"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects5            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_5"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects6            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_6"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects7            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_7"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects8            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_8"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects9            RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_9"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects10           RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_10"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects11           RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_11"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects12           RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_12"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects13           RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_13"
	RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects14           RemoveProjectEnvProjectsContentHintType = "removeProjectEnv_projects_14"
)

type RemoveProjectEnvProjectsContentHint struct {
	RemoveProjectEnvProjectsResponse2001 *RemoveProjectEnvProjectsResponse2001
	RemoveProjectEnvProjectsResponse2002 *RemoveProjectEnvProjectsResponse2002
	RemoveProjectEnvProjectsResponse3    *RemoveProjectEnvProjectsResponse3
	RemoveProjectEnvProjects4            *RemoveProjectEnvProjects4
	RemoveProjectEnvProjects5            *RemoveProjectEnvProjects5
	RemoveProjectEnvProjects6            *RemoveProjectEnvProjects6
	RemoveProjectEnvProjects7            *RemoveProjectEnvProjects7
	RemoveProjectEnvProjects8            *RemoveProjectEnvProjects8
	RemoveProjectEnvProjects9            *RemoveProjectEnvProjects9
	RemoveProjectEnvProjects10           *RemoveProjectEnvProjects10
	RemoveProjectEnvProjects11           *RemoveProjectEnvProjects11
	RemoveProjectEnvProjects12           *RemoveProjectEnvProjects12
	RemoveProjectEnvProjects13           *RemoveProjectEnvProjects13
	RemoveProjectEnvProjects14           *RemoveProjectEnvProjects14

	Type RemoveProjectEnvProjectsContentHintType
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjectsResponse2001(removeProjectEnvProjectsResponse2001 RemoveProjectEnvProjectsResponse2001) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2001

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjectsResponse2001: &removeProjectEnvProjectsResponse2001,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjectsResponse2002(removeProjectEnvProjectsResponse2002 RemoveProjectEnvProjectsResponse2002) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2002

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjectsResponse2002: &removeProjectEnvProjectsResponse2002,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjectsResponse3(removeProjectEnvProjectsResponse3 RemoveProjectEnvProjectsResponse3) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse3

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjectsResponse3: &removeProjectEnvProjectsResponse3,
		Type:                              typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects4(removeProjectEnvProjects4 RemoveProjectEnvProjects4) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects4

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects4: &removeProjectEnvProjects4,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects5(removeProjectEnvProjects5 RemoveProjectEnvProjects5) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects5

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects5: &removeProjectEnvProjects5,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects6(removeProjectEnvProjects6 RemoveProjectEnvProjects6) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects6

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects6: &removeProjectEnvProjects6,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects7(removeProjectEnvProjects7 RemoveProjectEnvProjects7) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects7

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects7: &removeProjectEnvProjects7,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects8(removeProjectEnvProjects8 RemoveProjectEnvProjects8) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects8

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects8: &removeProjectEnvProjects8,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects9(removeProjectEnvProjects9 RemoveProjectEnvProjects9) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects9

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects9: &removeProjectEnvProjects9,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects10(removeProjectEnvProjects10 RemoveProjectEnvProjects10) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects10

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects10: &removeProjectEnvProjects10,
		Type:                       typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects11(removeProjectEnvProjects11 RemoveProjectEnvProjects11) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects11

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects11: &removeProjectEnvProjects11,
		Type:                       typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects12(removeProjectEnvProjects12 RemoveProjectEnvProjects12) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects12

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects12: &removeProjectEnvProjects12,
		Type:                       typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects13(removeProjectEnvProjects13 RemoveProjectEnvProjects13) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects13

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects13: &removeProjectEnvProjects13,
		Type:                       typ,
	}
}

func CreateRemoveProjectEnvProjectsContentHintRemoveProjectEnvProjects14(removeProjectEnvProjects14 RemoveProjectEnvProjects14) RemoveProjectEnvProjectsContentHint {
	typ := RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects14

	return RemoveProjectEnvProjectsContentHint{
		RemoveProjectEnvProjects14: &removeProjectEnvProjects14,
		Type:                       typ,
	}
}

func (u *RemoveProjectEnvProjectsContentHint) UnmarshalJSON(data []byte) error {

	var removeProjectEnvProjectsResponse2001 RemoveProjectEnvProjectsResponse2001 = RemoveProjectEnvProjectsResponse2001{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse2001, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse2001 = &removeProjectEnvProjectsResponse2001
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2001
		return nil
	}

	var removeProjectEnvProjectsResponse2002 RemoveProjectEnvProjectsResponse2002 = RemoveProjectEnvProjectsResponse2002{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse2002, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse2002 = &removeProjectEnvProjectsResponse2002
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse2002
		return nil
	}

	var removeProjectEnvProjectsResponse3 RemoveProjectEnvProjectsResponse3 = RemoveProjectEnvProjectsResponse3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse3, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse3 = &removeProjectEnvProjectsResponse3
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjectsResponse3
		return nil
	}

	var removeProjectEnvProjects4 RemoveProjectEnvProjects4 = RemoveProjectEnvProjects4{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects4, "", true, true); err == nil {
		u.RemoveProjectEnvProjects4 = &removeProjectEnvProjects4
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects4
		return nil
	}

	var removeProjectEnvProjects5 RemoveProjectEnvProjects5 = RemoveProjectEnvProjects5{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects5, "", true, true); err == nil {
		u.RemoveProjectEnvProjects5 = &removeProjectEnvProjects5
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects5
		return nil
	}

	var removeProjectEnvProjects6 RemoveProjectEnvProjects6 = RemoveProjectEnvProjects6{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects6, "", true, true); err == nil {
		u.RemoveProjectEnvProjects6 = &removeProjectEnvProjects6
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects6
		return nil
	}

	var removeProjectEnvProjects7 RemoveProjectEnvProjects7 = RemoveProjectEnvProjects7{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects7, "", true, true); err == nil {
		u.RemoveProjectEnvProjects7 = &removeProjectEnvProjects7
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects7
		return nil
	}

	var removeProjectEnvProjects8 RemoveProjectEnvProjects8 = RemoveProjectEnvProjects8{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects8, "", true, true); err == nil {
		u.RemoveProjectEnvProjects8 = &removeProjectEnvProjects8
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects8
		return nil
	}

	var removeProjectEnvProjects9 RemoveProjectEnvProjects9 = RemoveProjectEnvProjects9{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects9, "", true, true); err == nil {
		u.RemoveProjectEnvProjects9 = &removeProjectEnvProjects9
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects9
		return nil
	}

	var removeProjectEnvProjects10 RemoveProjectEnvProjects10 = RemoveProjectEnvProjects10{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects10, "", true, true); err == nil {
		u.RemoveProjectEnvProjects10 = &removeProjectEnvProjects10
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects10
		return nil
	}

	var removeProjectEnvProjects11 RemoveProjectEnvProjects11 = RemoveProjectEnvProjects11{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects11, "", true, true); err == nil {
		u.RemoveProjectEnvProjects11 = &removeProjectEnvProjects11
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects11
		return nil
	}

	var removeProjectEnvProjects12 RemoveProjectEnvProjects12 = RemoveProjectEnvProjects12{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects12, "", true, true); err == nil {
		u.RemoveProjectEnvProjects12 = &removeProjectEnvProjects12
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects12
		return nil
	}

	var removeProjectEnvProjects13 RemoveProjectEnvProjects13 = RemoveProjectEnvProjects13{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects13, "", true, true); err == nil {
		u.RemoveProjectEnvProjects13 = &removeProjectEnvProjects13
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects13
		return nil
	}

	var removeProjectEnvProjects14 RemoveProjectEnvProjects14 = RemoveProjectEnvProjects14{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects14, "", true, true); err == nil {
		u.RemoveProjectEnvProjects14 = &removeProjectEnvProjects14
		u.Type = RemoveProjectEnvProjectsContentHintTypeRemoveProjectEnvProjects14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvProjectsContentHint", string(data))
}

func (u RemoveProjectEnvProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvProjectsResponse2001 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse2001, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse2002 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse2002, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse3, "", true)
	}

	if u.RemoveProjectEnvProjects4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects4, "", true)
	}

	if u.RemoveProjectEnvProjects5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects5, "", true)
	}

	if u.RemoveProjectEnvProjects6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects6, "", true)
	}

	if u.RemoveProjectEnvProjects7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects7, "", true)
	}

	if u.RemoveProjectEnvProjects8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects8, "", true)
	}

	if u.RemoveProjectEnvProjects9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects9, "", true)
	}

	if u.RemoveProjectEnvProjects10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects10, "", true)
	}

	if u.RemoveProjectEnvProjects11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects11, "", true)
	}

	if u.RemoveProjectEnvProjects12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects12, "", true)
	}

	if u.RemoveProjectEnvProjects13 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects13, "", true)
	}

	if u.RemoveProjectEnvProjects14 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects14, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvProjectsContentHint: all fields are null")
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyTypeFlagsSecret RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType = "flags-secret"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

// RemoveProjectEnvProjectsInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvProjectsInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                                                             `json:"encryptedValue"`
	Type           RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *RemoveProjectEnvProjectsInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *RemoveProjectEnvProjectsInternalContentHint) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSON2 string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSON2Production  RemoveProjectEnvProjectsResponse200ApplicationJSON2 = "production"
	RemoveProjectEnvProjectsResponse200ApplicationJSON2Preview     RemoveProjectEnvProjectsResponse200ApplicationJSON2 = "preview"
	RemoveProjectEnvProjectsResponse200ApplicationJSON2Development RemoveProjectEnvProjectsResponse200ApplicationJSON2 = "development"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSON2) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSON2 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSON2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSON2: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse200ApplicationJSON1 string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSON1Production  RemoveProjectEnvProjectsResponse200ApplicationJSON1 = "production"
	RemoveProjectEnvProjectsResponse200ApplicationJSON1Preview     RemoveProjectEnvProjectsResponse200ApplicationJSON1 = "preview"
	RemoveProjectEnvProjectsResponse200ApplicationJSON1Development RemoveProjectEnvProjectsResponse200ApplicationJSON1 = "development"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSON1) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSON1 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSON1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSON1: %v", v)
	}
}

type RemoveProjectEnvProjectsTargetType string

const (
	RemoveProjectEnvProjectsTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 RemoveProjectEnvProjectsTargetType = "arrayOfRemoveProjectEnvProjectsResponse200ApplicationJSON1"
	RemoveProjectEnvProjectsTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSON2        RemoveProjectEnvProjectsTargetType = "removeProjectEnv_projects_response_200_ApplicationJSON_2"
)

type RemoveProjectEnvProjectsTarget struct {
	ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 []RemoveProjectEnvProjectsResponse200ApplicationJSON1
	RemoveProjectEnvProjectsResponse200ApplicationJSON2        *RemoveProjectEnvProjectsResponse200ApplicationJSON2

	Type RemoveProjectEnvProjectsTargetType
}

func CreateRemoveProjectEnvProjectsTargetArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1(arrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 []RemoveProjectEnvProjectsResponse200ApplicationJSON1) RemoveProjectEnvProjectsTarget {
	typ := RemoveProjectEnvProjectsTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1

	return RemoveProjectEnvProjectsTarget{
		ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1: arrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvProjectsTargetRemoveProjectEnvProjectsResponse200ApplicationJSON2(removeProjectEnvProjectsResponse200ApplicationJSON2 RemoveProjectEnvProjectsResponse200ApplicationJSON2) RemoveProjectEnvProjectsTarget {
	typ := RemoveProjectEnvProjectsTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSON2

	return RemoveProjectEnvProjectsTarget{
		RemoveProjectEnvProjectsResponse200ApplicationJSON2: &removeProjectEnvProjectsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *RemoveProjectEnvProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 []RemoveProjectEnvProjectsResponse200ApplicationJSON1 = []RemoveProjectEnvProjectsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 = arrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1
		u.Type = RemoveProjectEnvProjectsTargetTypeArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1
		return nil
	}

	var removeProjectEnvProjectsResponse200ApplicationJSON2 RemoveProjectEnvProjectsResponse200ApplicationJSON2 = RemoveProjectEnvProjectsResponse200ApplicationJSON2("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse200ApplicationJSON2 = &removeProjectEnvProjectsResponse200ApplicationJSON2
		u.Type = RemoveProjectEnvProjectsTargetTypeRemoveProjectEnvProjectsResponse200ApplicationJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvProjectsTarget", string(data))
}

func (u RemoveProjectEnvProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvProjectsResponse200ApplicationJson1, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvProjectsTarget: all fields are null")
}

type RemoveProjectEnvProjectsType string

const (
	RemoveProjectEnvProjectsTypeSystem    RemoveProjectEnvProjectsType = "system"
	RemoveProjectEnvProjectsTypeEncrypted RemoveProjectEnvProjectsType = "encrypted"
	RemoveProjectEnvProjectsTypePlain     RemoveProjectEnvProjectsType = "plain"
	RemoveProjectEnvProjectsTypeSensitive RemoveProjectEnvProjectsType = "sensitive"
	RemoveProjectEnvProjectsTypeSecret    RemoveProjectEnvProjectsType = "secret"
)

func (e RemoveProjectEnvProjectsType) ToPointer() *RemoveProjectEnvProjectsType {
	return &e
}
func (e *RemoveProjectEnvProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsType: %v", v)
	}
}

type RemoveProjectEnv2 struct {
	Comment             *string                              `json:"comment,omitempty"`
	ConfigurationID     *string                              `json:"configurationId,omitempty"`
	ContentHint         *RemoveProjectEnvProjectsContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                             `json:"createdAt,omitempty"`
	CreatedBy           *string                              `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                              `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *RemoveProjectEnvProjectsInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                                       `json:"key"`
	System              *bool                                        `json:"system,omitempty"`
	Target              *RemoveProjectEnvProjectsTarget              `json:"target,omitempty"`
	Type                RemoveProjectEnvProjectsType                 `json:"type"`
	UpdatedAt           *float64                                     `json:"updatedAt,omitempty"`
	UpdatedBy           *string                                      `json:"updatedBy,omitempty"`
	Value               string                                       `json:"value"`
}

func (o *RemoveProjectEnv2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnv2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv2) GetContentHint() *RemoveProjectEnvProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv2) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *RemoveProjectEnv2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv2) GetInternalContentHint() *RemoveProjectEnvProjectsInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnv2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *RemoveProjectEnv2) GetTarget() *RemoveProjectEnvProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv2) GetType() RemoveProjectEnvProjectsType {
	if o == nil {
		return RemoveProjectEnvProjectsType("")
	}
	return o.Type
}

func (o *RemoveProjectEnv2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14TypeIntegrationStoreSecret RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type = "integration-store-secret"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type: %v", v)
	}
}

type RemoveProjectEnv14 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type `json:"type"`
}

func (o *RemoveProjectEnv14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv14) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint14Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13TypePostgresURLNoSsl RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type: %v", v)
	}
}

type RemoveProjectEnv13 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type `json:"type"`
}

func (o *RemoveProjectEnv13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv13) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint13Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12TypePostgresDatabase RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type = "postgres-database"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type: %v", v)
	}
}

type RemoveProjectEnv12 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type `json:"type"`
}

func (o *RemoveProjectEnv12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv12) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint12Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11TypePostgresPassword RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type = "postgres-password"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type: %v", v)
	}
}

type RemoveProjectEnv11 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type `json:"type"`
}

func (o *RemoveProjectEnv11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv11) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint11Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10TypePostgresHost RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type = "postgres-host"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type: %v", v)
	}
}

type RemoveProjectEnv10 struct {
	StoreID string                                                                           `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type `json:"type"`
}

func (o *RemoveProjectEnv10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv10) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint10Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9TypePostgresUser RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type = "postgres-user"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type: %v", v)
	}
}

type RemoveProjectEnv9 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type `json:"type"`
}

func (o *RemoveProjectEnv9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv9) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint9Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8TypePostgresPrismaURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type = "postgres-prisma-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type: %v", v)
	}
}

type RemoveProjectEnv8 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type `json:"type"`
}

func (o *RemoveProjectEnv8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv8) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint8Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7TypePostgresURLNonPooling RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type: %v", v)
	}
}

type RemoveProjectEnv7 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type `json:"type"`
}

func (o *RemoveProjectEnv7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv7) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint7Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6TypePostgresURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type = "postgres-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type: %v", v)
	}
}

type RemoveProjectEnv6 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type `json:"type"`
}

func (o *RemoveProjectEnv6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv6) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint6Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5TypeBlobReadWriteToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type = "blob-read-write-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type: %v", v)
	}
}

type RemoveProjectEnv5 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type `json:"type"`
}

func (o *RemoveProjectEnv5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv5) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint5Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4TypeRedisRestAPIReadOnlyToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type: %v", v)
	}
}

type RemoveProjectEnv4 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type `json:"type"`
}

func (o *RemoveProjectEnv4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnv4) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint4Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintTypeRedisRestAPIToken RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType = "redis-rest-api-token"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType: %v", v)
	}
}

type RemoveProjectEnvProjects3 struct {
	StoreID string                                                                         `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType `json:"type"`
}

func (o *RemoveProjectEnvProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects3) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHintType("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1TypeRedisRestAPIURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type = "redis-rest-api-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type RemoveProjectEnvProjects2 struct {
	StoreID string                                                              `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type `json:"type"`
}

func (o *RemoveProjectEnvProjects2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects2) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type string

const (
	RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1TypeRedisURL RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type = "redis-url"
)

func (e RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type) ToPointer() *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type: %v", v)
	}
}

type RemoveProjectEnvProjects1 struct {
	StoreID string                                                                          `json:"storeId"`
	Type    RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type `json:"type"`
}

func (o *RemoveProjectEnvProjects1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvProjects1) GetType() RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200ApplicationJSONResponseBody1ContentHint1Type("")
	}
	return o.Type
}

type RemoveProjectEnvContentHintType string

const (
	RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects1 RemoveProjectEnvContentHintType = "removeProjectEnv_projects_1"
	RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects2 RemoveProjectEnvContentHintType = "removeProjectEnv_projects_2"
	RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects3 RemoveProjectEnvContentHintType = "removeProjectEnv_projects_3"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv4         RemoveProjectEnvContentHintType = "removeProjectEnv_4"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv5         RemoveProjectEnvContentHintType = "removeProjectEnv_5"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv6         RemoveProjectEnvContentHintType = "removeProjectEnv_6"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv7         RemoveProjectEnvContentHintType = "removeProjectEnv_7"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv8         RemoveProjectEnvContentHintType = "removeProjectEnv_8"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv9         RemoveProjectEnvContentHintType = "removeProjectEnv_9"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv10        RemoveProjectEnvContentHintType = "removeProjectEnv_10"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv11        RemoveProjectEnvContentHintType = "removeProjectEnv_11"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv12        RemoveProjectEnvContentHintType = "removeProjectEnv_12"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv13        RemoveProjectEnvContentHintType = "removeProjectEnv_13"
	RemoveProjectEnvContentHintTypeRemoveProjectEnv14        RemoveProjectEnvContentHintType = "removeProjectEnv_14"
)

type RemoveProjectEnvContentHint struct {
	RemoveProjectEnvProjects1 *RemoveProjectEnvProjects1
	RemoveProjectEnvProjects2 *RemoveProjectEnvProjects2
	RemoveProjectEnvProjects3 *RemoveProjectEnvProjects3
	RemoveProjectEnv4         *RemoveProjectEnv4
	RemoveProjectEnv5         *RemoveProjectEnv5
	RemoveProjectEnv6         *RemoveProjectEnv6
	RemoveProjectEnv7         *RemoveProjectEnv7
	RemoveProjectEnv8         *RemoveProjectEnv8
	RemoveProjectEnv9         *RemoveProjectEnv9
	RemoveProjectEnv10        *RemoveProjectEnv10
	RemoveProjectEnv11        *RemoveProjectEnv11
	RemoveProjectEnv12        *RemoveProjectEnv12
	RemoveProjectEnv13        *RemoveProjectEnv13
	RemoveProjectEnv14        *RemoveProjectEnv14

	Type RemoveProjectEnvContentHintType
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnvProjects1(removeProjectEnvProjects1 RemoveProjectEnvProjects1) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects1

	return RemoveProjectEnvContentHint{
		RemoveProjectEnvProjects1: &removeProjectEnvProjects1,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnvProjects2(removeProjectEnvProjects2 RemoveProjectEnvProjects2) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects2

	return RemoveProjectEnvContentHint{
		RemoveProjectEnvProjects2: &removeProjectEnvProjects2,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnvProjects3(removeProjectEnvProjects3 RemoveProjectEnvProjects3) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects3

	return RemoveProjectEnvContentHint{
		RemoveProjectEnvProjects3: &removeProjectEnvProjects3,
		Type:                      typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv4(removeProjectEnv4 RemoveProjectEnv4) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv4

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv4: &removeProjectEnv4,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv5(removeProjectEnv5 RemoveProjectEnv5) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv5

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv5: &removeProjectEnv5,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv6(removeProjectEnv6 RemoveProjectEnv6) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv6

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv6: &removeProjectEnv6,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv7(removeProjectEnv7 RemoveProjectEnv7) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv7

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv7: &removeProjectEnv7,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv8(removeProjectEnv8 RemoveProjectEnv8) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv8

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv8: &removeProjectEnv8,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv9(removeProjectEnv9 RemoveProjectEnv9) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv9

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv9: &removeProjectEnv9,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv10(removeProjectEnv10 RemoveProjectEnv10) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv10

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv10: &removeProjectEnv10,
		Type:               typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv11(removeProjectEnv11 RemoveProjectEnv11) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv11

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv11: &removeProjectEnv11,
		Type:               typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv12(removeProjectEnv12 RemoveProjectEnv12) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv12

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv12: &removeProjectEnv12,
		Type:               typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv13(removeProjectEnv13 RemoveProjectEnv13) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv13

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv13: &removeProjectEnv13,
		Type:               typ,
	}
}

func CreateRemoveProjectEnvContentHintRemoveProjectEnv14(removeProjectEnv14 RemoveProjectEnv14) RemoveProjectEnvContentHint {
	typ := RemoveProjectEnvContentHintTypeRemoveProjectEnv14

	return RemoveProjectEnvContentHint{
		RemoveProjectEnv14: &removeProjectEnv14,
		Type:               typ,
	}
}

func (u *RemoveProjectEnvContentHint) UnmarshalJSON(data []byte) error {

	var removeProjectEnvProjects1 RemoveProjectEnvProjects1 = RemoveProjectEnvProjects1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects1, "", true, true); err == nil {
		u.RemoveProjectEnvProjects1 = &removeProjectEnvProjects1
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects1
		return nil
	}

	var removeProjectEnvProjects2 RemoveProjectEnvProjects2 = RemoveProjectEnvProjects2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects2, "", true, true); err == nil {
		u.RemoveProjectEnvProjects2 = &removeProjectEnvProjects2
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects2
		return nil
	}

	var removeProjectEnvProjects3 RemoveProjectEnvProjects3 = RemoveProjectEnvProjects3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjects3, "", true, true); err == nil {
		u.RemoveProjectEnvProjects3 = &removeProjectEnvProjects3
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnvProjects3
		return nil
	}

	var removeProjectEnv4 RemoveProjectEnv4 = RemoveProjectEnv4{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv4, "", true, true); err == nil {
		u.RemoveProjectEnv4 = &removeProjectEnv4
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv4
		return nil
	}

	var removeProjectEnv5 RemoveProjectEnv5 = RemoveProjectEnv5{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv5, "", true, true); err == nil {
		u.RemoveProjectEnv5 = &removeProjectEnv5
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv5
		return nil
	}

	var removeProjectEnv6 RemoveProjectEnv6 = RemoveProjectEnv6{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv6, "", true, true); err == nil {
		u.RemoveProjectEnv6 = &removeProjectEnv6
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv6
		return nil
	}

	var removeProjectEnv7 RemoveProjectEnv7 = RemoveProjectEnv7{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv7, "", true, true); err == nil {
		u.RemoveProjectEnv7 = &removeProjectEnv7
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv7
		return nil
	}

	var removeProjectEnv8 RemoveProjectEnv8 = RemoveProjectEnv8{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv8, "", true, true); err == nil {
		u.RemoveProjectEnv8 = &removeProjectEnv8
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv8
		return nil
	}

	var removeProjectEnv9 RemoveProjectEnv9 = RemoveProjectEnv9{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv9, "", true, true); err == nil {
		u.RemoveProjectEnv9 = &removeProjectEnv9
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv9
		return nil
	}

	var removeProjectEnv10 RemoveProjectEnv10 = RemoveProjectEnv10{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv10, "", true, true); err == nil {
		u.RemoveProjectEnv10 = &removeProjectEnv10
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv10
		return nil
	}

	var removeProjectEnv11 RemoveProjectEnv11 = RemoveProjectEnv11{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv11, "", true, true); err == nil {
		u.RemoveProjectEnv11 = &removeProjectEnv11
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv11
		return nil
	}

	var removeProjectEnv12 RemoveProjectEnv12 = RemoveProjectEnv12{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv12, "", true, true); err == nil {
		u.RemoveProjectEnv12 = &removeProjectEnv12
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv12
		return nil
	}

	var removeProjectEnv13 RemoveProjectEnv13 = RemoveProjectEnv13{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv13, "", true, true); err == nil {
		u.RemoveProjectEnv13 = &removeProjectEnv13
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv13
		return nil
	}

	var removeProjectEnv14 RemoveProjectEnv14 = RemoveProjectEnv14{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv14, "", true, true); err == nil {
		u.RemoveProjectEnv14 = &removeProjectEnv14
		u.Type = RemoveProjectEnvContentHintTypeRemoveProjectEnv14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvContentHint", string(data))
}

func (u RemoveProjectEnvContentHint) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvProjects1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects1, "", true)
	}

	if u.RemoveProjectEnvProjects2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects2, "", true)
	}

	if u.RemoveProjectEnvProjects3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjects3, "", true)
	}

	if u.RemoveProjectEnv4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv4, "", true)
	}

	if u.RemoveProjectEnv5 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv5, "", true)
	}

	if u.RemoveProjectEnv6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv6, "", true)
	}

	if u.RemoveProjectEnv7 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv7, "", true)
	}

	if u.RemoveProjectEnv8 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv8, "", true)
	}

	if u.RemoveProjectEnv9 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv9, "", true)
	}

	if u.RemoveProjectEnv10 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv10, "", true)
	}

	if u.RemoveProjectEnv11 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv11, "", true)
	}

	if u.RemoveProjectEnv12 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv12, "", true)
	}

	if u.RemoveProjectEnv13 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv13, "", true)
	}

	if u.RemoveProjectEnv14 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv14, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvContentHint: all fields are null")
}

type RemoveProjectEnvProjectsResponse200Type string

const (
	RemoveProjectEnvProjectsResponse200TypeFlagsSecret RemoveProjectEnvProjectsResponse200Type = "flags-secret"
)

func (e RemoveProjectEnvProjectsResponse200Type) ToPointer() *RemoveProjectEnvProjectsResponse200Type {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse200Type: %v", v)
	}
}

// RemoveProjectEnvInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvInternalContentHint struct {
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string                                  `json:"encryptedValue"`
	Type           RemoveProjectEnvProjectsResponse200Type `json:"type"`
}

func (o *RemoveProjectEnvInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

func (o *RemoveProjectEnvInternalContentHint) GetType() RemoveProjectEnvProjectsResponse200Type {
	if o == nil {
		return RemoveProjectEnvProjectsResponse200Type("")
	}
	return o.Type
}

type RemoveProjectEnvProjectsResponse2 string

const (
	RemoveProjectEnvProjectsResponse2Production  RemoveProjectEnvProjectsResponse2 = "production"
	RemoveProjectEnvProjectsResponse2Preview     RemoveProjectEnvProjectsResponse2 = "preview"
	RemoveProjectEnvProjectsResponse2Development RemoveProjectEnvProjectsResponse2 = "development"
)

func (e RemoveProjectEnvProjectsResponse2) ToPointer() *RemoveProjectEnvProjectsResponse2 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse2: %v", v)
	}
}

type RemoveProjectEnvProjectsResponse1 string

const (
	RemoveProjectEnvProjectsResponse1Production  RemoveProjectEnvProjectsResponse1 = "production"
	RemoveProjectEnvProjectsResponse1Preview     RemoveProjectEnvProjectsResponse1 = "preview"
	RemoveProjectEnvProjectsResponse1Development RemoveProjectEnvProjectsResponse1 = "development"
)

func (e RemoveProjectEnvProjectsResponse1) ToPointer() *RemoveProjectEnvProjectsResponse1 {
	return &e
}
func (e *RemoveProjectEnvProjectsResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvProjectsResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvProjectsResponse1: %v", v)
	}
}

type RemoveProjectEnvTargetType string

const (
	RemoveProjectEnvTargetTypeArrayOfRemoveProjectEnvProjectsResponse1 RemoveProjectEnvTargetType = "arrayOfRemoveProjectEnvProjectsResponse1"
	RemoveProjectEnvTargetTypeRemoveProjectEnvProjectsResponse2        RemoveProjectEnvTargetType = "removeProjectEnv_projects_response_2"
)

type RemoveProjectEnvTarget struct {
	ArrayOfRemoveProjectEnvProjectsResponse1 []RemoveProjectEnvProjectsResponse1
	RemoveProjectEnvProjectsResponse2        *RemoveProjectEnvProjectsResponse2

	Type RemoveProjectEnvTargetType
}

func CreateRemoveProjectEnvTargetArrayOfRemoveProjectEnvProjectsResponse1(arrayOfRemoveProjectEnvProjectsResponse1 []RemoveProjectEnvProjectsResponse1) RemoveProjectEnvTarget {
	typ := RemoveProjectEnvTargetTypeArrayOfRemoveProjectEnvProjectsResponse1

	return RemoveProjectEnvTarget{
		ArrayOfRemoveProjectEnvProjectsResponse1: arrayOfRemoveProjectEnvProjectsResponse1,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvTargetRemoveProjectEnvProjectsResponse2(removeProjectEnvProjectsResponse2 RemoveProjectEnvProjectsResponse2) RemoveProjectEnvTarget {
	typ := RemoveProjectEnvTargetTypeRemoveProjectEnvProjectsResponse2

	return RemoveProjectEnvTarget{
		RemoveProjectEnvProjectsResponse2: &removeProjectEnvProjectsResponse2,
		Type:                              typ,
	}
}

func (u *RemoveProjectEnvTarget) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvProjectsResponse1 []RemoveProjectEnvProjectsResponse1 = []RemoveProjectEnvProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvProjectsResponse1, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvProjectsResponse1 = arrayOfRemoveProjectEnvProjectsResponse1
		u.Type = RemoveProjectEnvTargetTypeArrayOfRemoveProjectEnvProjectsResponse1
		return nil
	}

	var removeProjectEnvProjectsResponse2 RemoveProjectEnvProjectsResponse2 = RemoveProjectEnvProjectsResponse2("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvProjectsResponse2, "", true, true); err == nil {
		u.RemoveProjectEnvProjectsResponse2 = &removeProjectEnvProjectsResponse2
		u.Type = RemoveProjectEnvTargetTypeRemoveProjectEnvProjectsResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvTarget", string(data))
}

func (u RemoveProjectEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvProjectsResponse1 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvProjectsResponse1, "", true)
	}

	if u.RemoveProjectEnvProjectsResponse2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvTarget: all fields are null")
}

type RemoveProjectEnvType string

const (
	RemoveProjectEnvTypeSystem    RemoveProjectEnvType = "system"
	RemoveProjectEnvTypeEncrypted RemoveProjectEnvType = "encrypted"
	RemoveProjectEnvTypePlain     RemoveProjectEnvType = "plain"
	RemoveProjectEnvTypeSensitive RemoveProjectEnvType = "sensitive"
	RemoveProjectEnvTypeSecret    RemoveProjectEnvType = "secret"
)

func (e RemoveProjectEnvType) ToPointer() *RemoveProjectEnvType {
	return &e
}
func (e *RemoveProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvType: %v", v)
	}
}

type RemoveProjectEnv1 struct {
	Comment             *string                      `json:"comment,omitempty"`
	ConfigurationID     *string                      `json:"configurationId,omitempty"`
	ContentHint         *RemoveProjectEnvContentHint `json:"contentHint,omitempty"`
	CreatedAt           *float64                     `json:"createdAt,omitempty"`
	CreatedBy           *string                      `json:"createdBy,omitempty"`
	CustomEnvironmentID *string                      `json:"customEnvironmentId,omitempty"`
	// Whether `value` is decrypted.
	Decrypted         *bool   `json:"decrypted,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	ID                *string `json:"id,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *RemoveProjectEnvInternalContentHint `json:"internalContentHint,omitempty"`
	Key                 string                               `json:"key"`
	Target              *RemoveProjectEnvTarget              `json:"target,omitempty"`
	Type                RemoveProjectEnvType                 `json:"type"`
	UpdatedAt           *float64                             `json:"updatedAt,omitempty"`
	UpdatedBy           *string                              `json:"updatedBy,omitempty"`
	Value               string                               `json:"value"`
}

func (o *RemoveProjectEnv1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnv1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnv1) GetContentHint() *RemoveProjectEnvContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnv1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnv1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnv1) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *RemoveProjectEnv1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnv1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnv1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnv1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnv1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnv1) GetInternalContentHint() *RemoveProjectEnvInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnv1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnv1) GetTarget() *RemoveProjectEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnv1) GetType() RemoveProjectEnvType {
	if o == nil {
		return RemoveProjectEnvType("")
	}
	return o.Type
}

func (o *RemoveProjectEnv1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnv1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnv1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RemoveProjectEnvResponseBodyType string

const (
	RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnv1 RemoveProjectEnvResponseBodyType = "arrayOfRemoveProjectEnv1"
	RemoveProjectEnvResponseBodyTypeRemoveProjectEnv2        RemoveProjectEnvResponseBodyType = "removeProjectEnv_2"
	RemoveProjectEnvResponseBodyTypeRemoveProjectEnv3        RemoveProjectEnvResponseBodyType = "removeProjectEnv_3"
)

// RemoveProjectEnvResponseBody - The environment variable was successfully removed
type RemoveProjectEnvResponseBody struct {
	ArrayOfRemoveProjectEnv1 []RemoveProjectEnv1
	RemoveProjectEnv2        *RemoveProjectEnv2
	RemoveProjectEnv3        *RemoveProjectEnv3

	Type RemoveProjectEnvResponseBodyType
}

func CreateRemoveProjectEnvResponseBodyArrayOfRemoveProjectEnv1(arrayOfRemoveProjectEnv1 []RemoveProjectEnv1) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnv1

	return RemoveProjectEnvResponseBody{
		ArrayOfRemoveProjectEnv1: arrayOfRemoveProjectEnv1,
		Type:                     typ,
	}
}

func CreateRemoveProjectEnvResponseBodyRemoveProjectEnv2(removeProjectEnv2 RemoveProjectEnv2) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeRemoveProjectEnv2

	return RemoveProjectEnvResponseBody{
		RemoveProjectEnv2: &removeProjectEnv2,
		Type:              typ,
	}
}

func CreateRemoveProjectEnvResponseBodyRemoveProjectEnv3(removeProjectEnv3 RemoveProjectEnv3) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeRemoveProjectEnv3

	return RemoveProjectEnvResponseBody{
		RemoveProjectEnv3: &removeProjectEnv3,
		Type:              typ,
	}
}

func (u *RemoveProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var removeProjectEnv3 RemoveProjectEnv3 = RemoveProjectEnv3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv3, "", true, true); err == nil {
		u.RemoveProjectEnv3 = &removeProjectEnv3
		u.Type = RemoveProjectEnvResponseBodyTypeRemoveProjectEnv3
		return nil
	}

	var removeProjectEnv2 RemoveProjectEnv2 = RemoveProjectEnv2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnv2, "", true, true); err == nil {
		u.RemoveProjectEnv2 = &removeProjectEnv2
		u.Type = RemoveProjectEnvResponseBodyTypeRemoveProjectEnv2
		return nil
	}

	var arrayOfRemoveProjectEnv1 []RemoveProjectEnv1 = []RemoveProjectEnv1{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnv1, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnv1 = arrayOfRemoveProjectEnv1
		u.Type = RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnv1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvResponseBody", string(data))
}

func (u RemoveProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnv1 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnv1, "", true)
	}

	if u.RemoveProjectEnv2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv2, "", true)
	}

	if u.RemoveProjectEnv3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnv3, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvResponseBody: all fields are null")
}

type RemoveProjectEnvResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The environment variable was successfully removed
	OneOf *RemoveProjectEnvResponseBody
}

func (o *RemoveProjectEnvResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RemoveProjectEnvResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RemoveProjectEnvResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RemoveProjectEnvResponse) GetOneOf() *RemoveProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
