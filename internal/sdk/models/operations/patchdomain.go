// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

// PatchDomain2 - move-out
type PatchDomain2 struct {
	// User or team to move domain to
	Destination *string `json:"destination,omitempty"`
	Op          *string `json:"op,omitempty"`
}

func (o *PatchDomain2) GetDestination() *string {
	if o == nil {
		return nil
	}
	return o.Destination
}

func (o *PatchDomain2) GetOp() *string {
	if o == nil {
		return nil
	}
	return o.Op
}

// PatchDomain1 - update
type PatchDomain1 struct {
	// The custom nameservers for this project.
	CustomNameservers []string `json:"customNameservers,omitempty"`
	Op                *string  `json:"op,omitempty"`
	// Specifies whether domain should be renewed.
	Renew *bool `json:"renew,omitempty"`
	// Specifies whether this is a DNS zone that intends to use Vercel's nameservers.
	Zone *bool `json:"zone,omitempty"`
}

func (o *PatchDomain1) GetCustomNameservers() []string {
	if o == nil {
		return nil
	}
	return o.CustomNameservers
}

func (o *PatchDomain1) GetOp() *string {
	if o == nil {
		return nil
	}
	return o.Op
}

func (o *PatchDomain1) GetRenew() *bool {
	if o == nil {
		return nil
	}
	return o.Renew
}

func (o *PatchDomain1) GetZone() *bool {
	if o == nil {
		return nil
	}
	return o.Zone
}

type PatchDomainRequestBodyType string

const (
	PatchDomainRequestBodyTypePatchDomain1 PatchDomainRequestBodyType = "patchDomain_1"
	PatchDomainRequestBodyTypePatchDomain2 PatchDomainRequestBodyType = "patchDomain_2"
)

type PatchDomainRequestBody struct {
	PatchDomain1 *PatchDomain1
	PatchDomain2 *PatchDomain2

	Type PatchDomainRequestBodyType
}

func CreatePatchDomainRequestBodyPatchDomain1(patchDomain1 PatchDomain1) PatchDomainRequestBody {
	typ := PatchDomainRequestBodyTypePatchDomain1

	return PatchDomainRequestBody{
		PatchDomain1: &patchDomain1,
		Type:         typ,
	}
}

func CreatePatchDomainRequestBodyPatchDomain2(patchDomain2 PatchDomain2) PatchDomainRequestBody {
	typ := PatchDomainRequestBodyTypePatchDomain2

	return PatchDomainRequestBody{
		PatchDomain2: &patchDomain2,
		Type:         typ,
	}
}

func (u *PatchDomainRequestBody) UnmarshalJSON(data []byte) error {

	var patchDomain2 PatchDomain2 = PatchDomain2{}
	if err := utils.UnmarshalJSON(data, &patchDomain2, "", true, true); err == nil {
		u.PatchDomain2 = &patchDomain2
		u.Type = PatchDomainRequestBodyTypePatchDomain2
		return nil
	}

	var patchDomain1 PatchDomain1 = PatchDomain1{}
	if err := utils.UnmarshalJSON(data, &patchDomain1, "", true, true); err == nil {
		u.PatchDomain1 = &patchDomain1
		u.Type = PatchDomainRequestBodyTypePatchDomain1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PatchDomainRequestBody", string(data))
}

func (u PatchDomainRequestBody) MarshalJSON() ([]byte, error) {
	if u.PatchDomain1 != nil {
		return utils.MarshalJSON(u.PatchDomain1, "", true)
	}

	if u.PatchDomain2 != nil {
		return utils.MarshalJSON(u.PatchDomain2, "", true)
	}

	return nil, errors.New("could not marshal union type PatchDomainRequestBody: all fields are null")
}

type PatchDomainRequest struct {
	RequestBody *PatchDomainRequestBody `request:"mediaType=application/json"`
	Domain      string                  `pathParam:"style=simple,explode=false,name=domain"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *PatchDomainRequest) GetRequestBody() *PatchDomainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *PatchDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *PatchDomainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PatchDomainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type PatchDomain3 struct {
	CustomNameservers []string `json:"customNameservers,omitempty"`
	Renew             *bool    `json:"renew,omitempty"`
	Zone              *bool    `json:"zone,omitempty"`
}

func (o *PatchDomain3) GetCustomNameservers() []string {
	if o == nil {
		return nil
	}
	return o.CustomNameservers
}

func (o *PatchDomain3) GetRenew() *bool {
	if o == nil {
		return nil
	}
	return o.Renew
}

func (o *PatchDomain3) GetZone() *bool {
	if o == nil {
		return nil
	}
	return o.Zone
}

type PatchDomainDomains2 struct {
	Moved bool   `json:"moved"`
	Token string `json:"token"`
}

func (o *PatchDomainDomains2) GetMoved() bool {
	if o == nil {
		return false
	}
	return o.Moved
}

func (o *PatchDomainDomains2) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type PatchDomainDomains1 struct {
	Moved bool `json:"moved"`
}

func (o *PatchDomainDomains1) GetMoved() bool {
	if o == nil {
		return false
	}
	return o.Moved
}

type PatchDomainResponseBodyType string

const (
	PatchDomainResponseBodyTypePatchDomainDomains1 PatchDomainResponseBodyType = "patchDomain_domains_1"
	PatchDomainResponseBodyTypePatchDomainDomains2 PatchDomainResponseBodyType = "patchDomain_domains_2"
	PatchDomainResponseBodyTypePatchDomain3        PatchDomainResponseBodyType = "patchDomain_3"
)

type PatchDomainResponseBody struct {
	PatchDomainDomains1 *PatchDomainDomains1
	PatchDomainDomains2 *PatchDomainDomains2
	PatchDomain3        *PatchDomain3

	Type PatchDomainResponseBodyType
}

func CreatePatchDomainResponseBodyPatchDomainDomains1(patchDomainDomains1 PatchDomainDomains1) PatchDomainResponseBody {
	typ := PatchDomainResponseBodyTypePatchDomainDomains1

	return PatchDomainResponseBody{
		PatchDomainDomains1: &patchDomainDomains1,
		Type:                typ,
	}
}

func CreatePatchDomainResponseBodyPatchDomainDomains2(patchDomainDomains2 PatchDomainDomains2) PatchDomainResponseBody {
	typ := PatchDomainResponseBodyTypePatchDomainDomains2

	return PatchDomainResponseBody{
		PatchDomainDomains2: &patchDomainDomains2,
		Type:                typ,
	}
}

func CreatePatchDomainResponseBodyPatchDomain3(patchDomain3 PatchDomain3) PatchDomainResponseBody {
	typ := PatchDomainResponseBodyTypePatchDomain3

	return PatchDomainResponseBody{
		PatchDomain3: &patchDomain3,
		Type:         typ,
	}
}

func (u *PatchDomainResponseBody) UnmarshalJSON(data []byte) error {

	var patchDomainDomains1 PatchDomainDomains1 = PatchDomainDomains1{}
	if err := utils.UnmarshalJSON(data, &patchDomainDomains1, "", true, true); err == nil {
		u.PatchDomainDomains1 = &patchDomainDomains1
		u.Type = PatchDomainResponseBodyTypePatchDomainDomains1
		return nil
	}

	var patchDomainDomains2 PatchDomainDomains2 = PatchDomainDomains2{}
	if err := utils.UnmarshalJSON(data, &patchDomainDomains2, "", true, true); err == nil {
		u.PatchDomainDomains2 = &patchDomainDomains2
		u.Type = PatchDomainResponseBodyTypePatchDomainDomains2
		return nil
	}

	var patchDomain3 PatchDomain3 = PatchDomain3{}
	if err := utils.UnmarshalJSON(data, &patchDomain3, "", true, true); err == nil {
		u.PatchDomain3 = &patchDomain3
		u.Type = PatchDomainResponseBodyTypePatchDomain3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PatchDomainResponseBody", string(data))
}

func (u PatchDomainResponseBody) MarshalJSON() ([]byte, error) {
	if u.PatchDomainDomains1 != nil {
		return utils.MarshalJSON(u.PatchDomainDomains1, "", true)
	}

	if u.PatchDomainDomains2 != nil {
		return utils.MarshalJSON(u.PatchDomainDomains2, "", true)
	}

	if u.PatchDomain3 != nil {
		return utils.MarshalJSON(u.PatchDomain3, "", true)
	}

	return nil, errors.New("could not marshal union type PatchDomainResponseBody: all fields are null")
}

type PatchDomainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	OneOf       *PatchDomainResponseBody
}

func (o *PatchDomainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchDomainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchDomainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PatchDomainResponse) GetOneOf() *PatchDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
