// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Events string

const (
	EventsBudgetReached                                    Events = "budget.reached"
	EventsBudgetReset                                      Events = "budget.reset"
	EventsDomainCreated                                    Events = "domain.created"
	EventsDeploymentCreated                                Events = "deployment.created"
	EventsDeploymentError                                  Events = "deployment.error"
	EventsDeploymentCanceled                               Events = "deployment.canceled"
	EventsDeploymentSucceeded                              Events = "deployment.succeeded"
	EventsDeploymentReady                                  Events = "deployment.ready"
	EventsDeploymentCheckRerequested                       Events = "deployment.check-rerequested"
	EventsIntegrationConfigurationPermissionUpgraded       Events = "integration-configuration.permission-upgraded"
	EventsIntegrationConfigurationRemoved                  Events = "integration-configuration.removed"
	EventsIntegrationConfigurationScopeChangeConfirmed     Events = "integration-configuration.scope-change-confirmed"
	EventsProjectCreated                                   Events = "project.created"
	EventsProjectRemoved                                   Events = "project.removed"
	EventsDeploymentChecksCompleted                        Events = "deployment-checks-completed"
	EventsDeploymentDashReady                              Events = "deployment-ready"
	EventsDeploymentDashPrepared                           Events = "deployment-prepared"
	EventsDeploymentDashError                              Events = "deployment-error"
	EventsDeploymentDashCheckRerequested                   Events = "deployment-check-rerequested"
	EventsDeploymentDashCanceled                           Events = "deployment-canceled"
	EventsProjectDashCreated                               Events = "project-created"
	EventsProjectDashRemoved                               Events = "project-removed"
	EventsDomainDashCreated                                Events = "domain-created"
	EventsDeployment                                       Events = "deployment"
	EventsIntegrationConfigurationDashPermissionUpdated    Events = "integration-configuration-permission-updated"
	EventsIntegrationConfigurationDashRemoved              Events = "integration-configuration-removed"
	EventsIntegrationConfigurationDashScopeChangeConfirmed Events = "integration-configuration-scope-change-confirmed"
	EventsTestWebhook                                      Events = "test-webhook"
)

func (e Events) ToPointer() *Events {
	return &e
}
func (e *Events) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "test-webhook":
		*e = Events(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Events: %v", v)
	}
}

type CreateWebhookRequestBody struct {
	Events     []Events `json:"events"`
	ProjectIds []string `json:"projectIds,omitempty"`
	URL        string   `json:"url"`
}

func (o *CreateWebhookRequestBody) GetEvents() []Events {
	if o == nil {
		return []Events{}
	}
	return o.Events
}

func (o *CreateWebhookRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateWebhookRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateWebhookRequest struct {
	RequestBody *CreateWebhookRequestBody `request:"mediaType=application/json"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateWebhookRequest) GetRequestBody() *CreateWebhookRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateWebhookRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateWebhookRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// CreateWebhookEvents - The webhooks events
type CreateWebhookEvents string

const (
	CreateWebhookEventsBudgetReached                                    CreateWebhookEvents = "budget.reached"
	CreateWebhookEventsBudgetReset                                      CreateWebhookEvents = "budget.reset"
	CreateWebhookEventsBudgetCreated                                    CreateWebhookEvents = "domain.created"
	CreateWebhookEventsDomainCreated                                    CreateWebhookEvents = "deployment.created"
	CreateWebhookEventsDeploymentCreated                                CreateWebhookEvents = "deployment.error"
	CreateWebhookEventsDeploymentError                                  CreateWebhookEvents = "deployment.canceled"
	CreateWebhookEventsDeploymentCanceled                               CreateWebhookEvents = "deployment.succeeded"
	CreateWebhookEventsDeploymentSucceeded                              CreateWebhookEvents = "deployment.ready"
	CreateWebhookEventsDeploymentReady                                  CreateWebhookEvents = "deployment.check-rerequested"
	CreateWebhookEventsDeploymentCheckRerequested                       CreateWebhookEvents = "integration-configuration.permission-upgraded"
	CreateWebhookEventsIntegrationConfigurationPermissionUpgraded       CreateWebhookEvents = "integration-configuration.removed"
	CreateWebhookEventsIntegrationConfigurationRemoved                  CreateWebhookEvents = "integration-configuration.scope-change-confirmed"
	CreateWebhookEventsIntegrationConfigurationScopeChangeConfirmed     CreateWebhookEvents = "project.created"
	CreateWebhookEventsProjectCreated                                   CreateWebhookEvents = "project.removed"
	CreateWebhookEventsProjectRemoved                                   CreateWebhookEvents = "deployment-checks-completed"
	CreateWebhookEventsDeploymentChecksCompleted                        CreateWebhookEvents = "deployment-ready"
	CreateWebhookEventsDeploymentDashReady                              CreateWebhookEvents = "deployment-prepared"
	CreateWebhookEventsDeploymentDashPrepared                           CreateWebhookEvents = "deployment-error"
	CreateWebhookEventsDeploymentDashError                              CreateWebhookEvents = "deployment-check-rerequested"
	CreateWebhookEventsDeploymentDashCheckRerequested                   CreateWebhookEvents = "deployment-canceled"
	CreateWebhookEventsDeploymentDashCanceled                           CreateWebhookEvents = "project-created"
	CreateWebhookEventsProjectDashCreated                               CreateWebhookEvents = "project-removed"
	CreateWebhookEventsProjectDashRemoved                               CreateWebhookEvents = "domain-created"
	CreateWebhookEventsDomainDashCreated                                CreateWebhookEvents = "deployment"
	CreateWebhookEventsDeployment                                       CreateWebhookEvents = "integration-configuration-permission-updated"
	CreateWebhookEventsIntegrationConfigurationDashPermissionUpdated    CreateWebhookEvents = "integration-configuration-removed"
	CreateWebhookEventsIntegrationConfigurationDashRemoved              CreateWebhookEvents = "integration-configuration-scope-change-confirmed"
	CreateWebhookEventsIntegrationConfigurationDashScopeChangeConfirmed CreateWebhookEvents = "test-webhook"
)

func (e CreateWebhookEvents) ToPointer() *CreateWebhookEvents {
	return &e
}
func (e *CreateWebhookEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "test-webhook":
		*e = CreateWebhookEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebhookEvents: %v", v)
	}
}

type CreateWebhookResponseBody struct {
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// The webhooks events
	Events []CreateWebhookEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
	// The webhook secret used to sign the payload
	Secret string `json:"secret"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// A string with the URL of the webhook
	URL string `json:"url"`
}

func (o *CreateWebhookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateWebhookResponseBody) GetEvents() []CreateWebhookEvents {
	if o == nil {
		return []CreateWebhookEvents{}
	}
	return o.Events
}

func (o *CreateWebhookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateWebhookResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateWebhookResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateWebhookResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *CreateWebhookResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateWebhookResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateWebhookResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *CreateWebhookResponseBody
}

func (o *CreateWebhookResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateWebhookResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateWebhookResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateWebhookResponse) GetObject() *CreateWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
