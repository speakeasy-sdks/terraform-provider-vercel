// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetWebhookRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetWebhookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetWebhookRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetWebhookEvents - The webhooks events
type GetWebhookEvents string

const (
	GetWebhookEventsBudgetReached                                    GetWebhookEvents = "budget.reached"
	GetWebhookEventsBudgetReset                                      GetWebhookEvents = "budget.reset"
	GetWebhookEventsDomainCreated                                    GetWebhookEvents = "domain.created"
	GetWebhookEventsDeploymentCreated                                GetWebhookEvents = "deployment.created"
	GetWebhookEventsDeploymentError                                  GetWebhookEvents = "deployment.error"
	GetWebhookEventsDeploymentCanceled                               GetWebhookEvents = "deployment.canceled"
	GetWebhookEventsDeploymentSucceeded                              GetWebhookEvents = "deployment.succeeded"
	GetWebhookEventsDeploymentReady                                  GetWebhookEvents = "deployment.ready"
	GetWebhookEventsDeploymentCheckRerequested                       GetWebhookEvents = "deployment.check-rerequested"
	GetWebhookEventsIntegrationConfigurationPermissionUpgraded       GetWebhookEvents = "integration-configuration.permission-upgraded"
	GetWebhookEventsIntegrationConfigurationRemoved                  GetWebhookEvents = "integration-configuration.removed"
	GetWebhookEventsIntegrationConfigurationScopeChangeConfirmed     GetWebhookEvents = "integration-configuration.scope-change-confirmed"
	GetWebhookEventsProjectCreated                                   GetWebhookEvents = "project.created"
	GetWebhookEventsProjectRemoved                                   GetWebhookEvents = "project.removed"
	GetWebhookEventsDeploymentChecksCompleted                        GetWebhookEvents = "deployment-checks-completed"
	GetWebhookEventsDeploymentDashReady                              GetWebhookEvents = "deployment-ready"
	GetWebhookEventsDeploymentDashPrepared                           GetWebhookEvents = "deployment-prepared"
	GetWebhookEventsDeploymentDashError                              GetWebhookEvents = "deployment-error"
	GetWebhookEventsDeploymentDashCheckRerequested                   GetWebhookEvents = "deployment-check-rerequested"
	GetWebhookEventsDeploymentDashCanceled                           GetWebhookEvents = "deployment-canceled"
	GetWebhookEventsProjectDashCreated                               GetWebhookEvents = "project-created"
	GetWebhookEventsProjectDashRemoved                               GetWebhookEvents = "project-removed"
	GetWebhookEventsDomainDashCreated                                GetWebhookEvents = "domain-created"
	GetWebhookEventsDeployment                                       GetWebhookEvents = "deployment"
	GetWebhookEventsIntegrationConfigurationDashPermissionUpdated    GetWebhookEvents = "integration-configuration-permission-updated"
	GetWebhookEventsIntegrationConfigurationDashRemoved              GetWebhookEvents = "integration-configuration-removed"
	GetWebhookEventsIntegrationConfigurationDashScopeChangeConfirmed GetWebhookEvents = "integration-configuration-scope-change-confirmed"
	GetWebhookEventsTestWebhook                                      GetWebhookEvents = "test-webhook"
)

func (e GetWebhookEvents) ToPointer() *GetWebhookEvents {
	return &e
}
func (e *GetWebhookEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "test-webhook":
		*e = GetWebhookEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEvents: %v", v)
	}
}

type GetWebhookResponseBody struct {
	// The webhooks events
	Events []GetWebhookEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhookResponseBody) GetEvents() []GetWebhookEvents {
	if o == nil {
		return []GetWebhookEvents{}
	}
	return o.Events
}

func (o *GetWebhookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhookResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhookResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhookResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhookResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *GetWebhookResponseBody
}

func (o *GetWebhookResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetWebhookResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetWebhookResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetWebhookResponse) GetObject() *GetWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
