// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

// UploadedFile - Used in the case you want to reference a file that was already uploaded
type UploadedFile struct {
	// The file path relative to the project root
	File string `json:"file"`
	// The file contents hashed with SHA1, used to check the integrity
	Sha *string `json:"sha,omitempty"`
	// The file size in bytes
	Size *int64 `json:"size,omitempty"`
}

func (o *UploadedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

func (o *UploadedFile) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *UploadedFile) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

// Encoding - The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
type Encoding string

const (
	EncodingBase64 Encoding = "base64"
	EncodingUTF8   Encoding = "utf-8"
)

func (e Encoding) ToPointer() *Encoding {
	return &e
}
func (e *Encoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "base64":
		fallthrough
	case "utf-8":
		*e = Encoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoding: %v", v)
	}
}

// InlinedFile - Used in the case you want to inline a file inside the request
type InlinedFile struct {
	// The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code
	Data string `json:"data"`
	// The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
	Encoding *Encoding `json:"encoding,omitempty"`
	// The file name including the whole path
	File string `json:"file"`
}

func (o *InlinedFile) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *InlinedFile) GetEncoding() *Encoding {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *InlinedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

type FilesType string

const (
	FilesTypeInlinedFile  FilesType = "InlinedFile"
	FilesTypeUploadedFile FilesType = "UploadedFile"
)

type Files struct {
	InlinedFile  *InlinedFile
	UploadedFile *UploadedFile

	Type FilesType
}

func CreateFilesInlinedFile(inlinedFile InlinedFile) Files {
	typ := FilesTypeInlinedFile

	return Files{
		InlinedFile: &inlinedFile,
		Type:        typ,
	}
}

func CreateFilesUploadedFile(uploadedFile UploadedFile) Files {
	typ := FilesTypeUploadedFile

	return Files{
		UploadedFile: &uploadedFile,
		Type:         typ,
	}
}

func (u *Files) UnmarshalJSON(data []byte) error {

	var inlinedFile InlinedFile = InlinedFile{}
	if err := utils.UnmarshalJSON(data, &inlinedFile, "", true, true); err == nil {
		u.InlinedFile = &inlinedFile
		u.Type = FilesTypeInlinedFile
		return nil
	}

	var uploadedFile UploadedFile = UploadedFile{}
	if err := utils.UnmarshalJSON(data, &uploadedFile, "", true, true); err == nil {
		u.UploadedFile = &uploadedFile
		u.Type = FilesTypeUploadedFile
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Files", string(data))
}

func (u Files) MarshalJSON() ([]byte, error) {
	if u.InlinedFile != nil {
		return utils.MarshalJSON(u.InlinedFile, "", true)
	}

	if u.UploadedFile != nil {
		return utils.MarshalJSON(u.UploadedFile, "", true)
	}

	return nil, errors.New("could not marshal union type Files: all fields are null")
}

// GitMetadata - Populates initial git metadata for different git providers.
type GitMetadata struct {
	// The name of the author of the commit
	CommitAuthorName *string `json:"commitAuthorName,omitempty"`
	// The commit message
	CommitMessage *string `json:"commitMessage,omitempty"`
	// The branch on which the commit was made
	CommitRef *string `json:"commitRef,omitempty"`
	// The hash of the commit
	CommitSha *string `json:"commitSha,omitempty"`
	// Whether or not there have been modifications to the working tree since the latest commit
	Dirty *bool `json:"dirty,omitempty"`
	// The git repository's remote origin url
	RemoteURL *string `json:"remoteUrl,omitempty"`
}

func (o *GitMetadata) GetCommitAuthorName() *string {
	if o == nil {
		return nil
	}
	return o.CommitAuthorName
}

func (o *GitMetadata) GetCommitMessage() *string {
	if o == nil {
		return nil
	}
	return o.CommitMessage
}

func (o *GitMetadata) GetCommitRef() *string {
	if o == nil {
		return nil
	}
	return o.CommitRef
}

func (o *GitMetadata) GetCommitSha() *string {
	if o == nil {
		return nil
	}
	return o.CommitSha
}

func (o *GitMetadata) GetDirty() *bool {
	if o == nil {
		return nil
	}
	return o.Dirty
}

func (o *GitMetadata) GetRemoteURL() *string {
	if o == nil {
		return nil
	}
	return o.RemoteURL
}

type CreateDeploymentDeploymentsRequestRequestBodyType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyTypeBitbucket CreateDeploymentDeploymentsRequestRequestBodyType = "bitbucket"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyType {
	return &e
}
func (e *CreateDeploymentDeploymentsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyType: %v", v)
	}
}

type Five struct {
	Owner string                                            `json:"owner"`
	Ref   string                                            `json:"ref"`
	Sha   *string                                           `json:"sha,omitempty"`
	Slug  string                                            `json:"slug"`
	Type  CreateDeploymentDeploymentsRequestRequestBodyType `json:"type"`
}

func (o *Five) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *Five) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Five) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Five) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Five) GetType() CreateDeploymentDeploymentsRequestRequestBodyType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyType("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsRequestType string

const (
	CreateDeploymentDeploymentsRequestTypeBitbucket CreateDeploymentDeploymentsRequestType = "bitbucket"
)

func (e CreateDeploymentDeploymentsRequestType) ToPointer() *CreateDeploymentDeploymentsRequestType {
	return &e
}
func (e *CreateDeploymentDeploymentsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestType: %v", v)
	}
}

type Four struct {
	Ref           string                                 `json:"ref"`
	RepoUUID      string                                 `json:"repoUuid"`
	Sha           *string                                `json:"sha,omitempty"`
	Type          CreateDeploymentDeploymentsRequestType `json:"type"`
	WorkspaceUUID *string                                `json:"workspaceUuid,omitempty"`
}

func (o *Four) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Four) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *Four) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Four) GetType() CreateDeploymentDeploymentsRequestType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestType("")
	}
	return o.Type
}

func (o *Four) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type ProjectIDType string

const (
	ProjectIDTypeNumber ProjectIDType = "number"
	ProjectIDTypeStr    ProjectIDType = "str"
)

type ProjectID struct {
	Number *float64
	Str    *string

	Type ProjectIDType
}

func CreateProjectIDNumber(number float64) ProjectID {
	typ := ProjectIDTypeNumber

	return ProjectID{
		Number: &number,
		Type:   typ,
	}
}

func CreateProjectIDStr(str string) ProjectID {
	typ := ProjectIDTypeStr

	return ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func (u *ProjectID) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ProjectIDTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProjectIDTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ProjectID", string(data))
}

func (u ProjectID) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type ProjectID: all fields are null")
}

type CreateDeploymentDeploymentsType string

const (
	CreateDeploymentDeploymentsTypeGitlab CreateDeploymentDeploymentsType = "gitlab"
)

func (e CreateDeploymentDeploymentsType) ToPointer() *CreateDeploymentDeploymentsType {
	return &e
}
func (e *CreateDeploymentDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsType: %v", v)
	}
}

type Three struct {
	ProjectID ProjectID                       `json:"projectId"`
	Ref       string                          `json:"ref"`
	Sha       *string                         `json:"sha,omitempty"`
	Type      CreateDeploymentDeploymentsType `json:"type"`
}

func (o *Three) GetProjectID() ProjectID {
	if o == nil {
		return ProjectID{}
	}
	return o.ProjectID
}

func (o *Three) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Three) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Three) GetType() CreateDeploymentDeploymentsType {
	if o == nil {
		return CreateDeploymentDeploymentsType("")
	}
	return o.Type
}

type CreateDeploymentType string

const (
	CreateDeploymentTypeGithub CreateDeploymentType = "github"
)

func (e CreateDeploymentType) ToPointer() *CreateDeploymentType {
	return &e
}
func (e *CreateDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentType: %v", v)
	}
}

type Two struct {
	Org  string               `json:"org"`
	Ref  string               `json:"ref"`
	Repo string               `json:"repo"`
	Sha  *string              `json:"sha,omitempty"`
	Type CreateDeploymentType `json:"type"`
}

func (o *Two) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Two) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Two) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *Two) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Two) GetType() CreateDeploymentType {
	if o == nil {
		return CreateDeploymentType("")
	}
	return o.Type
}

type RepoIDType string

const (
	RepoIDTypeNumber RepoIDType = "number"
	RepoIDTypeStr    RepoIDType = "str"
)

type RepoID struct {
	Number *float64
	Str    *string

	Type RepoIDType
}

func CreateRepoIDNumber(number float64) RepoID {
	typ := RepoIDTypeNumber

	return RepoID{
		Number: &number,
		Type:   typ,
	}
}

func CreateRepoIDStr(str string) RepoID {
	typ := RepoIDTypeStr

	return RepoID{
		Str:  &str,
		Type: typ,
	}
}

func (u *RepoID) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = RepoIDTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RepoIDTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RepoID", string(data))
}

func (u RepoID) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type RepoID: all fields are null")
}

type Type string

const (
	TypeGithub Type = "github"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type One struct {
	Ref    string  `json:"ref"`
	RepoID RepoID  `json:"repoId"`
	Sha    *string `json:"sha,omitempty"`
	Type   Type    `json:"type"`
}

func (o *One) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *One) GetRepoID() RepoID {
	if o == nil {
		return RepoID{}
	}
	return o.RepoID
}

func (o *One) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *One) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type GitSourceType string

const (
	GitSourceTypeOne   GitSourceType = "1"
	GitSourceTypeTwo   GitSourceType = "2"
	GitSourceTypeThree GitSourceType = "3"
	GitSourceTypeFour  GitSourceType = "4"
	GitSourceTypeFive  GitSourceType = "5"
)

// GitSource - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type GitSource struct {
	One   *One
	Two   *Two
	Three *Three
	Four  *Four
	Five  *Five

	Type GitSourceType
}

func CreateGitSourceOne(one One) GitSource {
	typ := GitSourceTypeOne

	return GitSource{
		One:  &one,
		Type: typ,
	}
}

func CreateGitSourceTwo(two Two) GitSource {
	typ := GitSourceTypeTwo

	return GitSource{
		Two:  &two,
		Type: typ,
	}
}

func CreateGitSourceThree(three Three) GitSource {
	typ := GitSourceTypeThree

	return GitSource{
		Three: &three,
		Type:  typ,
	}
}

func CreateGitSourceFour(four Four) GitSource {
	typ := GitSourceTypeFour

	return GitSource{
		Four: &four,
		Type: typ,
	}
}

func CreateGitSourceFive(five Five) GitSource {
	typ := GitSourceTypeFive

	return GitSource{
		Five: &five,
		Type: typ,
	}
}

func (u *GitSource) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = GitSourceTypeOne
		return nil
	}

	var three Three = Three{}
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = GitSourceTypeThree
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = GitSourceTypeTwo
		return nil
	}

	var four Four = Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = GitSourceTypeFour
		return nil
	}

	var five Five = Five{}
	if err := utils.UnmarshalJSON(data, &five, "", true, true); err == nil {
		u.Five = &five
		u.Type = GitSourceTypeFive
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GitSource", string(data))
}

func (u GitSource) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.Five != nil {
		return utils.MarshalJSON(u.Five, "", true)
	}

	return nil, errors.New("could not marshal union type GitSource: all fields are null")
}

// Framework - The framework that is being used for this project. When `null` is used no framework is selected
type Framework string

const (
	FrameworkBlitzjs        Framework = "blitzjs"
	FrameworkNextjs         Framework = "nextjs"
	FrameworkGatsby         Framework = "gatsby"
	FrameworkRemix          Framework = "remix"
	FrameworkAstro          Framework = "astro"
	FrameworkHexo           Framework = "hexo"
	FrameworkEleventy       Framework = "eleventy"
	FrameworkDocusaurus2    Framework = "docusaurus-2"
	FrameworkDocusaurus     Framework = "docusaurus"
	FrameworkPreact         Framework = "preact"
	FrameworkSolidstart1    Framework = "solidstart-1"
	FrameworkSolidstart     Framework = "solidstart"
	FrameworkDojo           Framework = "dojo"
	FrameworkEmber          Framework = "ember"
	FrameworkVue            Framework = "vue"
	FrameworkScully         Framework = "scully"
	FrameworkIonicAngular   Framework = "ionic-angular"
	FrameworkAngular        Framework = "angular"
	FrameworkPolymer        Framework = "polymer"
	FrameworkSvelte         Framework = "svelte"
	FrameworkSveltekit      Framework = "sveltekit"
	FrameworkSveltekit1     Framework = "sveltekit-1"
	FrameworkIonicReact     Framework = "ionic-react"
	FrameworkCreateReactApp Framework = "create-react-app"
	FrameworkGridsome       Framework = "gridsome"
	FrameworkUmijs          Framework = "umijs"
	FrameworkSapper         Framework = "sapper"
	FrameworkSaber          Framework = "saber"
	FrameworkStencil        Framework = "stencil"
	FrameworkNuxtjs         Framework = "nuxtjs"
	FrameworkRedwoodjs      Framework = "redwoodjs"
	FrameworkHugo           Framework = "hugo"
	FrameworkJekyll         Framework = "jekyll"
	FrameworkBrunch         Framework = "brunch"
	FrameworkMiddleman      Framework = "middleman"
	FrameworkZola           Framework = "zola"
	FrameworkHydrogen       Framework = "hydrogen"
	FrameworkVite           Framework = "vite"
	FrameworkVitepress      Framework = "vitepress"
	FrameworkVuepress       Framework = "vuepress"
	FrameworkParcel         Framework = "parcel"
	FrameworkSanity         Framework = "sanity"
	FrameworkStorybook      Framework = "storybook"
)

func (e Framework) ToPointer() *Framework {
	return &e
}
func (e *Framework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = Framework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Framework: %v", v)
	}
}

// NodeVersion - Override the Node.js version that should be used for this deployment
type NodeVersion string

const (
	NodeVersionTwentyX   NodeVersion = "20.x"
	NodeVersionEighteenX NodeVersion = "18.x"
	NodeVersionSixteenX  NodeVersion = "16.x"
)

func (e NodeVersion) ToPointer() *NodeVersion {
	return &e
}
func (e *NodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		*e = NodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeVersion: %v", v)
	}
}

// ProjectSettings - Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
type ProjectSettings struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *Framework `json:"framework,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// Override the Node.js version that should be used for this deployment
	NodeVersion *NodeVersion `json:"nodeVersion,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory, typically used for monorepos
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
}

func (o *ProjectSettings) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *ProjectSettings) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *ProjectSettings) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *ProjectSettings) GetFramework() *Framework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectSettings) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *ProjectSettings) GetNodeVersion() *NodeVersion {
	if o == nil {
		return nil
	}
	return o.NodeVersion
}

func (o *ProjectSettings) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *ProjectSettings) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *ProjectSettings) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *ProjectSettings) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *ProjectSettings) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

// Target - Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
type Target string

const (
	TargetStaging    Target = "staging"
	TargetProduction Target = "production"
)

func (e Target) ToPointer() *Target {
	return &e
}
func (e *Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target: %v", v)
	}
}

type CreateDeploymentRequestBody struct {
	// Deploy to a custom environment, which will override the default environment
	CustomEnvironmentSlugOrID *string `json:"customEnvironmentSlugOrId,omitempty"`
	// An deployment id for an existing deployment to redeploy
	DeploymentID *string `json:"deploymentId,omitempty"`
	// A list of objects with the files to be deployed
	Files []Files `json:"files,omitempty"`
	// Populates initial git metadata for different git providers.
	GitMetadata *GitMetadata `json:"gitMetadata,omitempty"`
	// Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
	GitSource *GitSource `json:"gitSource,omitempty"`
	// An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment
	Meta map[string]string `json:"meta,omitempty"`
	// The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// A string with the project name used in the deployment URL
	Name string `json:"name"`
	// The target project identifier in which the deployment will be created. When defined, this parameter overrides name
	Project *string `json:"project,omitempty"`
	// Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
	ProjectSettings *ProjectSettings `json:"projectSettings,omitempty"`
	// Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
	Target *Target `json:"target,omitempty"`
	// When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.
	WithLatestCommit *bool `json:"withLatestCommit,omitempty"`
}

func (o *CreateDeploymentRequestBody) GetCustomEnvironmentSlugOrID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentSlugOrID
}

func (o *CreateDeploymentRequestBody) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateDeploymentRequestBody) GetFiles() []Files {
	if o == nil {
		return nil
	}
	return o.Files
}

func (o *CreateDeploymentRequestBody) GetGitMetadata() *GitMetadata {
	if o == nil {
		return nil
	}
	return o.GitMetadata
}

func (o *CreateDeploymentRequestBody) GetGitSource() *GitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeploymentRequestBody) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateDeploymentRequestBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeploymentRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBody) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateDeploymentRequestBody) GetProjectSettings() *ProjectSettings {
	if o == nil {
		return nil
	}
	return o.ProjectSettings
}

func (o *CreateDeploymentRequestBody) GetTarget() *Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeploymentRequestBody) GetWithLatestCommit() *bool {
	if o == nil {
		return nil
	}
	return o.WithLatestCommit
}

// ForceNew - Forces a new deployment even if there is a previous similar deployment
type ForceNew string

const (
	ForceNewZero ForceNew = "0"
	ForceNewOne  ForceNew = "1"
)

func (e ForceNew) ToPointer() *ForceNew {
	return &e
}
func (e *ForceNew) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = ForceNew(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ForceNew: %v", v)
	}
}

// SkipAutoDetectionConfirmation - Allows to skip framework detection so the API would not fail to ask for confirmation
type SkipAutoDetectionConfirmation string

const (
	SkipAutoDetectionConfirmationZero SkipAutoDetectionConfirmation = "0"
	SkipAutoDetectionConfirmationOne  SkipAutoDetectionConfirmation = "1"
)

func (e SkipAutoDetectionConfirmation) ToPointer() *SkipAutoDetectionConfirmation {
	return &e
}
func (e *SkipAutoDetectionConfirmation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = SkipAutoDetectionConfirmation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SkipAutoDetectionConfirmation: %v", v)
	}
}

type CreateDeploymentRequest struct {
	RequestBody *CreateDeploymentRequestBody `request:"mediaType=application/json"`
	// Forces a new deployment even if there is a previous similar deployment
	ForceNew *ForceNew `queryParam:"style=form,explode=true,name=forceNew"`
	// Allows to skip framework detection so the API would not fail to ask for confirmation
	SkipAutoDetectionConfirmation *SkipAutoDetectionConfirmation `queryParam:"style=form,explode=true,name=skipAutoDetectionConfirmation"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateDeploymentRequest) GetRequestBody() *CreateDeploymentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateDeploymentRequest) GetForceNew() *ForceNew {
	if o == nil {
		return nil
	}
	return o.ForceNew
}

func (o *CreateDeploymentRequest) GetSkipAutoDetectionConfirmation() *SkipAutoDetectionConfirmation {
	if o == nil {
		return nil
	}
	return o.SkipAutoDetectionConfirmation
}

func (o *CreateDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// ProjectObj - The public project information associated with the deployment.
type ProjectObj struct {
	Framework *string `json:"framework,omitempty"`
	ID        string  `json:"id"`
	Name      string  `json:"name"`
}

func (o *ProjectObj) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectObj) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectObj) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type CreateDeploymentAliasAssignedAtType string

const (
	CreateDeploymentAliasAssignedAtTypeNumber  CreateDeploymentAliasAssignedAtType = "number"
	CreateDeploymentAliasAssignedAtTypeBoolean CreateDeploymentAliasAssignedAtType = "boolean"
)

type CreateDeploymentAliasAssignedAt struct {
	Number  *float64
	Boolean *bool

	Type CreateDeploymentAliasAssignedAtType
}

func CreateCreateDeploymentAliasAssignedAtNumber(number float64) CreateDeploymentAliasAssignedAt {
	typ := CreateDeploymentAliasAssignedAtTypeNumber

	return CreateDeploymentAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateDeploymentAliasAssignedAtBoolean(boolean bool) CreateDeploymentAliasAssignedAt {
	typ := CreateDeploymentAliasAssignedAtTypeBoolean

	return CreateDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateDeploymentAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentAliasAssignedAt", string(data))
}

func (u CreateDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentAliasAssignedAt: all fields are null")
}

// CreateDeploymentAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type CreateDeploymentAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateDeploymentAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeploymentAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeploymentAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *CreateDeploymentAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateDeploymentAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeploymentAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateDeploymentAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeploymentBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *CreateDeploymentBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CreateDeploymentBuilds struct {
}

type CreateDeploymentChecksConclusion string

const (
	CreateDeploymentChecksConclusionSucceeded CreateDeploymentChecksConclusion = "succeeded"
	CreateDeploymentChecksConclusionFailed    CreateDeploymentChecksConclusion = "failed"
	CreateDeploymentChecksConclusionSkipped   CreateDeploymentChecksConclusion = "skipped"
	CreateDeploymentChecksConclusionCanceled  CreateDeploymentChecksConclusion = "canceled"
)

func (e CreateDeploymentChecksConclusion) ToPointer() *CreateDeploymentChecksConclusion {
	return &e
}
func (e *CreateDeploymentChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateDeploymentChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentChecksConclusion: %v", v)
	}
}

type CreateDeploymentChecksState string

const (
	CreateDeploymentChecksStateRegistered CreateDeploymentChecksState = "registered"
	CreateDeploymentChecksStateRunning    CreateDeploymentChecksState = "running"
	CreateDeploymentChecksStateCompleted  CreateDeploymentChecksState = "completed"
)

func (e CreateDeploymentChecksState) ToPointer() *CreateDeploymentChecksState {
	return &e
}
func (e *CreateDeploymentChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateDeploymentChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentChecksState: %v", v)
	}
}

// CreateDeploymentCreator - Information about the deployment creator
type CreateDeploymentCreator struct {
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *CreateDeploymentCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateDeploymentCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateDeploymentCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// CreateDeploymentCrons - The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
type CreateDeploymentCrons struct {
	Path     string `json:"path"`
	Schedule string `json:"schedule"`
}

func (o *CreateDeploymentCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeploymentCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

// CreateDeploymentFunctions - An object used to configure your Serverless Functions
type CreateDeploymentFunctions struct {
	ExcludeFiles *string  `json:"excludeFiles,omitempty"`
	IncludeFiles *string  `json:"includeFiles,omitempty"`
	MaxDuration  *float64 `json:"maxDuration,omitempty"`
	Memory       *float64 `json:"memory,omitempty"`
	Runtime      *string  `json:"runtime,omitempty"`
}

func (o *CreateDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CreateDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CreateDeploymentFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CreateDeploymentFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CreateDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type CreateDeploymentDeploymentsResponseOwnerType string

const (
	CreateDeploymentDeploymentsResponseOwnerTypeUser CreateDeploymentDeploymentsResponseOwnerType = "user"
	CreateDeploymentDeploymentsResponseOwnerTypeTeam CreateDeploymentDeploymentsResponseOwnerType = "team"
)

func (e CreateDeploymentDeploymentsResponseOwnerType) ToPointer() *CreateDeploymentDeploymentsResponseOwnerType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CreateDeploymentDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponseOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONTypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONType = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateDeployment3 struct {
	DefaultBranch string                                                    `json:"defaultBranch"`
	Name          string                                                    `json:"name"`
	Owner         string                                                    `json:"owner"`
	OwnerType     CreateDeploymentDeploymentsResponseOwnerType              `json:"ownerType"`
	Path          string                                                    `json:"path"`
	Private       bool                                                      `json:"private"`
	RepoUUID      string                                                    `json:"repoUuid"`
	Slug          string                                                    `json:"slug"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONType `json:"type"`
	WorkspaceUUID string                                                    `json:"workspaceUuid"`
}

func (o *CreateDeployment3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment3) GetOwnerType() CreateDeploymentDeploymentsResponseOwnerType {
	if o == nil {
		return CreateDeploymentDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment3) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateDeployment3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeploymentDeploymentsOwnerType string

const (
	CreateDeploymentDeploymentsOwnerTypeUser CreateDeploymentDeploymentsOwnerType = "user"
	CreateDeploymentDeploymentsOwnerTypeTeam CreateDeploymentDeploymentsOwnerType = "team"
)

func (e CreateDeploymentDeploymentsOwnerType) ToPointer() *CreateDeploymentDeploymentsOwnerType {
	return &e
}
func (e *CreateDeploymentDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CreateDeploymentDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200Type string

const (
	CreateDeploymentDeploymentsResponse200TypeGithub CreateDeploymentDeploymentsResponse200Type = "github"
)

func (e CreateDeploymentDeploymentsResponse200Type) ToPointer() *CreateDeploymentDeploymentsResponse200Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200Type: %v", v)
	}
}

type CreateDeployment2 struct {
	DefaultBranch string                                     `json:"defaultBranch"`
	Name          string                                     `json:"name"`
	Org           string                                     `json:"org"`
	OwnerType     CreateDeploymentDeploymentsOwnerType       `json:"ownerType"`
	Path          string                                     `json:"path"`
	Private       bool                                       `json:"private"`
	Repo          string                                     `json:"repo"`
	RepoID        float64                                    `json:"repoId"`
	RepoOwnerID   string                                     `json:"repoOwnerId"`
	Type          CreateDeploymentDeploymentsResponse200Type `json:"type"`
}

func (o *CreateDeployment2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeployment2) GetOwnerType() CreateDeploymentDeploymentsOwnerType {
	if o == nil {
		return CreateDeploymentDeploymentsOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeployment2) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CreateDeployment2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *CreateDeployment2) GetType() CreateDeploymentDeploymentsResponse200Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200Type("")
	}
	return o.Type
}

type CreateDeploymentOwnerType string

const (
	CreateDeploymentOwnerTypeUser CreateDeploymentOwnerType = "user"
	CreateDeploymentOwnerTypeTeam CreateDeploymentOwnerType = "team"
)

func (e CreateDeploymentOwnerType) ToPointer() *CreateDeploymentOwnerType {
	return &e
}
func (e *CreateDeploymentOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CreateDeploymentOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoTypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType: %v", v)
	}
}

type CreateDeployment1 struct {
	DefaultBranch string                                                                       `json:"defaultBranch"`
	Name          string                                                                       `json:"name"`
	Namespace     string                                                                       `json:"namespace"`
	OwnerType     CreateDeploymentOwnerType                                                    `json:"ownerType"`
	Path          string                                                                       `json:"path"`
	Private       bool                                                                         `json:"private"`
	ProjectID     float64                                                                      `json:"projectId"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType `json:"type"`
	URL           string                                                                       `json:"url"`
}

func (o *CreateDeployment1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CreateDeployment1) GetOwnerType() CreateDeploymentOwnerType {
	if o == nil {
		return CreateDeploymentOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment1) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *CreateDeployment1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType("")
	}
	return o.Type
}

func (o *CreateDeployment1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateDeploymentGitRepoType string

const (
	CreateDeploymentGitRepoTypeCreateDeployment1 CreateDeploymentGitRepoType = "createDeployment_1"
	CreateDeploymentGitRepoTypeCreateDeployment2 CreateDeploymentGitRepoType = "createDeployment_2"
	CreateDeploymentGitRepoTypeCreateDeployment3 CreateDeploymentGitRepoType = "createDeployment_3"
)

type CreateDeploymentGitRepo struct {
	CreateDeployment1 *CreateDeployment1
	CreateDeployment2 *CreateDeployment2
	CreateDeployment3 *CreateDeployment3

	Type CreateDeploymentGitRepoType
}

func CreateCreateDeploymentGitRepoCreateDeployment1(createDeployment1 CreateDeployment1) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeployment1

	return CreateDeploymentGitRepo{
		CreateDeployment1: &createDeployment1,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitRepoCreateDeployment2(createDeployment2 CreateDeployment2) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeployment2

	return CreateDeploymentGitRepo{
		CreateDeployment2: &createDeployment2,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitRepoCreateDeployment3(createDeployment3 CreateDeployment3) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeployment3

	return CreateDeploymentGitRepo{
		CreateDeployment3: &createDeployment3,
		Type:              typ,
	}
}

func (u *CreateDeploymentGitRepo) UnmarshalJSON(data []byte) error {

	var createDeployment1 CreateDeployment1 = CreateDeployment1{}
	if err := utils.UnmarshalJSON(data, &createDeployment1, "", true, true); err == nil {
		u.CreateDeployment1 = &createDeployment1
		u.Type = CreateDeploymentGitRepoTypeCreateDeployment1
		return nil
	}

	var createDeployment2 CreateDeployment2 = CreateDeployment2{}
	if err := utils.UnmarshalJSON(data, &createDeployment2, "", true, true); err == nil {
		u.CreateDeployment2 = &createDeployment2
		u.Type = CreateDeploymentGitRepoTypeCreateDeployment2
		return nil
	}

	var createDeployment3 CreateDeployment3 = CreateDeployment3{}
	if err := utils.UnmarshalJSON(data, &createDeployment3, "", true, true); err == nil {
		u.CreateDeployment3 = &createDeployment3
		u.Type = CreateDeploymentGitRepoTypeCreateDeployment3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentGitRepo", string(data))
}

func (u CreateDeploymentGitRepo) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment1 != nil {
		return utils.MarshalJSON(u.CreateDeployment1, "", true)
	}

	if u.CreateDeployment2 != nil {
		return utils.MarshalJSON(u.CreateDeployment2, "", true)
	}

	if u.CreateDeployment3 != nil {
		return utils.MarshalJSON(u.CreateDeployment3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentGitRepo: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type: %v", v)
	}
}

type CreateDeployment9 struct {
	Owner         *string                                                                         `json:"owner,omitempty"`
	Ref           string                                                                          `json:"ref"`
	RepoUUID      string                                                                          `json:"repoUuid"`
	Sha           string                                                                          `json:"sha"`
	Slug          *string                                                                         `json:"slug,omitempty"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type `json:"type"`
	WorkspaceUUID string                                                                          `json:"workspaceUuid"`
}

func (o *CreateDeployment9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateDeployment9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateDeployment9) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type("")
	}
	return o.Type
}

func (o *CreateDeployment9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8TypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type: %v", v)
	}
}

type CreateDeployment8 struct {
	ProjectID float64                                                                         `json:"projectId"`
	Ref       string                                                                          `json:"ref"`
	Sha       string                                                                          `json:"sha"`
	Type      CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type `json:"type"`
}

func (o *CreateDeployment8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *CreateDeployment8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment8) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7TypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type: %v", v)
	}
}

type CreateDeployment7 struct {
	Org    *string                                                                         `json:"org,omitempty"`
	Ref    string                                                                          `json:"ref"`
	Repo   *string                                                                         `json:"repo,omitempty"`
	RepoID float64                                                                         `json:"repoId"`
	Sha    string                                                                          `json:"sha"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type `json:"type"`
}

func (o *CreateDeployment7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateDeployment7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateDeployment7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CreateDeployment7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment7) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6TypeCustom CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type = "custom"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type: %v", v)
	}
}

type CreateDeployment6 struct {
	GitURL string                                                                          `json:"gitUrl"`
	Ref    string                                                                          `json:"ref"`
	Sha    string                                                                          `json:"sha"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type `json:"type"`
}

func (o *CreateDeployment6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *CreateDeployment6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment6) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type: %v", v)
	}
}

type CreateDeployment5 struct {
	Owner string                                                                          `json:"owner"`
	PrID  *float64                                                                        `json:"prId,omitempty"`
	Ref   *string                                                                         `json:"ref,omitempty"`
	Sha   *string                                                                         `json:"sha,omitempty"`
	Slug  string                                                                          `json:"slug"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type `json:"type"`
}

func (o *CreateDeployment5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment5) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type: %v", v)
	}
}

type CreateDeployment4 struct {
	PrID          *float64                                                                        `json:"prId,omitempty"`
	Ref           *string                                                                         `json:"ref,omitempty"`
	RepoUUID      string                                                                          `json:"repoUuid"`
	Sha           *string                                                                         `json:"sha,omitempty"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type `json:"type"`
	WorkspaceUUID *string                                                                         `json:"workspaceUuid,omitempty"`
}

func (o *CreateDeployment4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment4) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type("")
	}
	return o.Type
}

func (o *CreateDeployment4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateDeploymentProjectIDType string

const (
	CreateDeploymentProjectIDTypeStr    CreateDeploymentProjectIDType = "str"
	CreateDeploymentProjectIDTypeNumber CreateDeploymentProjectIDType = "number"
)

type CreateDeploymentProjectID struct {
	Str    *string
	Number *float64

	Type CreateDeploymentProjectIDType
}

func CreateCreateDeploymentProjectIDStr(str string) CreateDeploymentProjectID {
	typ := CreateDeploymentProjectIDTypeStr

	return CreateDeploymentProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeploymentProjectIDNumber(number float64) CreateDeploymentProjectID {
	typ := CreateDeploymentProjectIDTypeNumber

	return CreateDeploymentProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *CreateDeploymentProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateDeploymentProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateDeploymentProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentProjectID", string(data))
}

func (u CreateDeploymentProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentProjectID: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3TypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type: %v", v)
	}
}

type CreateDeploymentDeployments3 struct {
	PrID      *float64                                                                        `json:"prId,omitempty"`
	ProjectID CreateDeploymentProjectID                                                       `json:"projectId"`
	Ref       *string                                                                         `json:"ref,omitempty"`
	Sha       *string                                                                         `json:"sha,omitempty"`
	Type      CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type `json:"type"`
}

func (o *CreateDeploymentDeployments3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeployments3) GetProjectID() CreateDeploymentProjectID {
	if o == nil {
		return CreateDeploymentProjectID{}
	}
	return o.ProjectID
}

func (o *CreateDeploymentDeployments3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeployments3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeployments3) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceTypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType: %v", v)
	}
}

type CreateDeploymentDeployments2 struct {
	Org  string                                                                         `json:"org"`
	PrID *float64                                                                       `json:"prId,omitempty"`
	Ref  *string                                                                        `json:"ref,omitempty"`
	Repo string                                                                         `json:"repo"`
	Sha  *string                                                                        `json:"sha,omitempty"`
	Type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType `json:"type"`
}

func (o *CreateDeploymentDeployments2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeploymentDeployments2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeployments2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeployments2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeploymentDeployments2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeployments2) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType("")
	}
	return o.Type
}

type CreateDeploymentRepoIDType string

const (
	CreateDeploymentRepoIDTypeStr    CreateDeploymentRepoIDType = "str"
	CreateDeploymentRepoIDTypeNumber CreateDeploymentRepoIDType = "number"
)

type CreateDeploymentRepoID struct {
	Str    *string
	Number *float64

	Type CreateDeploymentRepoIDType
}

func CreateCreateDeploymentRepoIDStr(str string) CreateDeploymentRepoID {
	typ := CreateDeploymentRepoIDTypeStr

	return CreateDeploymentRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeploymentRepoIDNumber(number float64) CreateDeploymentRepoID {
	typ := CreateDeploymentRepoIDTypeNumber

	return CreateDeploymentRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *CreateDeploymentRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateDeploymentRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateDeploymentRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentRepoID", string(data))
}

func (u CreateDeploymentRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentRepoID: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyTypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateDeploymentDeployments1 struct {
	PrID   *float64                                                              `json:"prId,omitempty"`
	Ref    *string                                                               `json:"ref,omitempty"`
	RepoID CreateDeploymentRepoID                                                `json:"repoId"`
	Sha    *string                                                               `json:"sha,omitempty"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *CreateDeploymentDeployments1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeployments1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeployments1) GetRepoID() CreateDeploymentRepoID {
	if o == nil {
		return CreateDeploymentRepoID{}
	}
	return o.RepoID
}

func (o *CreateDeploymentDeployments1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeployments1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type CreateDeploymentGitSourceType string

const (
	CreateDeploymentGitSourceTypeCreateDeploymentDeployments1 CreateDeploymentGitSourceType = "createDeployment_deployments_1"
	CreateDeploymentGitSourceTypeCreateDeploymentDeployments2 CreateDeploymentGitSourceType = "createDeployment_deployments_2"
	CreateDeploymentGitSourceTypeCreateDeploymentDeployments3 CreateDeploymentGitSourceType = "createDeployment_deployments_3"
	CreateDeploymentGitSourceTypeCreateDeployment4            CreateDeploymentGitSourceType = "createDeployment_4"
	CreateDeploymentGitSourceTypeCreateDeployment5            CreateDeploymentGitSourceType = "createDeployment_5"
	CreateDeploymentGitSourceTypeCreateDeployment6            CreateDeploymentGitSourceType = "createDeployment_6"
	CreateDeploymentGitSourceTypeCreateDeployment7            CreateDeploymentGitSourceType = "createDeployment_7"
	CreateDeploymentGitSourceTypeCreateDeployment8            CreateDeploymentGitSourceType = "createDeployment_8"
	CreateDeploymentGitSourceTypeCreateDeployment9            CreateDeploymentGitSourceType = "createDeployment_9"
)

type CreateDeploymentGitSource struct {
	CreateDeploymentDeployments1 *CreateDeploymentDeployments1
	CreateDeploymentDeployments2 *CreateDeploymentDeployments2
	CreateDeploymentDeployments3 *CreateDeploymentDeployments3
	CreateDeployment4            *CreateDeployment4
	CreateDeployment5            *CreateDeployment5
	CreateDeployment6            *CreateDeployment6
	CreateDeployment7            *CreateDeployment7
	CreateDeployment8            *CreateDeployment8
	CreateDeployment9            *CreateDeployment9

	Type CreateDeploymentGitSourceType
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeployments1(createDeploymentDeployments1 CreateDeploymentDeployments1) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeployments1

	return CreateDeploymentGitSource{
		CreateDeploymentDeployments1: &createDeploymentDeployments1,
		Type:                         typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeployments2(createDeploymentDeployments2 CreateDeploymentDeployments2) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeployments2

	return CreateDeploymentGitSource{
		CreateDeploymentDeployments2: &createDeploymentDeployments2,
		Type:                         typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeployments3(createDeploymentDeployments3 CreateDeploymentDeployments3) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeployments3

	return CreateDeploymentGitSource{
		CreateDeploymentDeployments3: &createDeploymentDeployments3,
		Type:                         typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment4(createDeployment4 CreateDeployment4) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment4

	return CreateDeploymentGitSource{
		CreateDeployment4: &createDeployment4,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment5(createDeployment5 CreateDeployment5) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment5

	return CreateDeploymentGitSource{
		CreateDeployment5: &createDeployment5,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment6(createDeployment6 CreateDeployment6) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment6

	return CreateDeploymentGitSource{
		CreateDeployment6: &createDeployment6,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment7(createDeployment7 CreateDeployment7) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment7

	return CreateDeploymentGitSource{
		CreateDeployment7: &createDeployment7,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment8(createDeployment8 CreateDeployment8) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment8

	return CreateDeploymentGitSource{
		CreateDeployment8: &createDeployment8,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment9(createDeployment9 CreateDeployment9) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment9

	return CreateDeploymentGitSource{
		CreateDeployment9: &createDeployment9,
		Type:              typ,
	}
}

func (u *CreateDeploymentGitSource) UnmarshalJSON(data []byte) error {

	var createDeployment6 CreateDeployment6 = CreateDeployment6{}
	if err := utils.UnmarshalJSON(data, &createDeployment6, "", true, true); err == nil {
		u.CreateDeployment6 = &createDeployment6
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment6
		return nil
	}

	var createDeployment8 CreateDeployment8 = CreateDeployment8{}
	if err := utils.UnmarshalJSON(data, &createDeployment8, "", true, true); err == nil {
		u.CreateDeployment8 = &createDeployment8
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment8
		return nil
	}

	var createDeploymentDeployments1 CreateDeploymentDeployments1 = CreateDeploymentDeployments1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments1, "", true, true); err == nil {
		u.CreateDeploymentDeployments1 = &createDeploymentDeployments1
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeployments1
		return nil
	}

	var createDeploymentDeployments3 CreateDeploymentDeployments3 = CreateDeploymentDeployments3{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments3, "", true, true); err == nil {
		u.CreateDeploymentDeployments3 = &createDeploymentDeployments3
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeployments3
		return nil
	}

	var createDeploymentDeployments2 CreateDeploymentDeployments2 = CreateDeploymentDeployments2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments2, "", true, true); err == nil {
		u.CreateDeploymentDeployments2 = &createDeploymentDeployments2
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeployments2
		return nil
	}

	var createDeployment4 CreateDeployment4 = CreateDeployment4{}
	if err := utils.UnmarshalJSON(data, &createDeployment4, "", true, true); err == nil {
		u.CreateDeployment4 = &createDeployment4
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment4
		return nil
	}

	var createDeployment5 CreateDeployment5 = CreateDeployment5{}
	if err := utils.UnmarshalJSON(data, &createDeployment5, "", true, true); err == nil {
		u.CreateDeployment5 = &createDeployment5
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment5
		return nil
	}

	var createDeployment7 CreateDeployment7 = CreateDeployment7{}
	if err := utils.UnmarshalJSON(data, &createDeployment7, "", true, true); err == nil {
		u.CreateDeployment7 = &createDeployment7
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment7
		return nil
	}

	var createDeployment9 CreateDeployment9 = CreateDeployment9{}
	if err := utils.UnmarshalJSON(data, &createDeployment9, "", true, true); err == nil {
		u.CreateDeployment9 = &createDeployment9
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentGitSource", string(data))
}

func (u CreateDeploymentGitSource) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeployments1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments1, "", true)
	}

	if u.CreateDeploymentDeployments2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments2, "", true)
	}

	if u.CreateDeploymentDeployments3 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments3, "", true)
	}

	if u.CreateDeployment4 != nil {
		return utils.MarshalJSON(u.CreateDeployment4, "", true)
	}

	if u.CreateDeployment5 != nil {
		return utils.MarshalJSON(u.CreateDeployment5, "", true)
	}

	if u.CreateDeployment6 != nil {
		return utils.MarshalJSON(u.CreateDeployment6, "", true)
	}

	if u.CreateDeployment7 != nil {
		return utils.MarshalJSON(u.CreateDeployment7, "", true)
	}

	if u.CreateDeployment8 != nil {
		return utils.MarshalJSON(u.CreateDeployment8, "", true)
	}

	if u.CreateDeployment9 != nil {
		return utils.MarshalJSON(u.CreateDeployment9, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentGitSource: all fields are null")
}

type CreateDeploymentOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *CreateDeploymentOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *CreateDeploymentOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CreateDeploymentDeploymentsReadyState string

const (
	CreateDeploymentDeploymentsReadyStateError        CreateDeploymentDeploymentsReadyState = "ERROR"
	CreateDeploymentDeploymentsReadyStateBuilding     CreateDeploymentDeploymentsReadyState = "BUILDING"
	CreateDeploymentDeploymentsReadyStateInitializing CreateDeploymentDeploymentsReadyState = "INITIALIZING"
	CreateDeploymentDeploymentsReadyStateReady        CreateDeploymentDeploymentsReadyState = "READY"
)

func (e CreateDeploymentDeploymentsReadyState) ToPointer() *CreateDeploymentDeploymentsReadyState {
	return &e
}
func (e *CreateDeploymentDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERROR":
		fallthrough
	case "BUILDING":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = CreateDeploymentDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsReadyState: %v", v)
	}
}

type CreateDeploymentLambdas struct {
	CreatedAt    *float64                               `json:"createdAt,omitempty"`
	Entrypoint   *string                                `json:"entrypoint,omitempty"`
	ID           string                                 `json:"id"`
	Output       []CreateDeploymentOutput               `json:"output"`
	ReadyState   *CreateDeploymentDeploymentsReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                               `json:"readyStateAt,omitempty"`
}

func (o *CreateDeploymentLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateDeploymentLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CreateDeploymentLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentLambdas) GetOutput() []CreateDeploymentOutput {
	if o == nil {
		return []CreateDeploymentOutput{}
	}
	return o.Output
}

func (o *CreateDeploymentLambdas) GetReadyState() *CreateDeploymentDeploymentsReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CreateDeploymentLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// CreateDeploymentPlan - The pricing plan the deployment was made under
type CreateDeploymentPlan string

const (
	CreateDeploymentPlanPro        CreateDeploymentPlan = "pro"
	CreateDeploymentPlanEnterprise CreateDeploymentPlan = "enterprise"
	CreateDeploymentPlanHobby      CreateDeploymentPlan = "hobby"
)

func (e CreateDeploymentPlan) ToPointer() *CreateDeploymentPlan {
	return &e
}
func (e *CreateDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentPlan: %v", v)
	}
}

// CreateDeploymentReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type CreateDeploymentReadyState string

const (
	CreateDeploymentReadyStateCanceled     CreateDeploymentReadyState = "CANCELED"
	CreateDeploymentReadyStateError        CreateDeploymentReadyState = "ERROR"
	CreateDeploymentReadyStateQueued       CreateDeploymentReadyState = "QUEUED"
	CreateDeploymentReadyStateBuilding     CreateDeploymentReadyState = "BUILDING"
	CreateDeploymentReadyStateInitializing CreateDeploymentReadyState = "INITIALIZING"
	CreateDeploymentReadyStateReady        CreateDeploymentReadyState = "READY"
)

func (e CreateDeploymentReadyState) ToPointer() *CreateDeploymentReadyState {
	return &e
}
func (e *CreateDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELED":
		fallthrough
	case "ERROR":
		fallthrough
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = CreateDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentReadyState: %v", v)
	}
}

// CreateDeploymentReadySubstate - The substate of the deployment when the state is "READY"
type CreateDeploymentReadySubstate string

const (
	CreateDeploymentReadySubstateStaged   CreateDeploymentReadySubstate = "STAGED"
	CreateDeploymentReadySubstatePromoted CreateDeploymentReadySubstate = "PROMOTED"
)

func (e CreateDeploymentReadySubstate) ToPointer() *CreateDeploymentReadySubstate {
	return &e
}
func (e *CreateDeploymentReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateDeploymentReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentReadySubstate: %v", v)
	}
}

// CreateDeploymentDeploymentsResponse3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse3 struct {
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
	Src        string  `json:"src"`
}

func (o *CreateDeploymentDeploymentsResponse3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CreateDeploymentDeploymentsResponse3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

func (o *CreateDeploymentDeploymentsResponse3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

type CreateDeploymentHandle string

const (
	CreateDeploymentHandleError      CreateDeploymentHandle = "error"
	CreateDeploymentHandleFilesystem CreateDeploymentHandle = "filesystem"
	CreateDeploymentHandleHit        CreateDeploymentHandle = "hit"
	CreateDeploymentHandleMiss       CreateDeploymentHandle = "miss"
	CreateDeploymentHandleResource   CreateDeploymentHandle = "resource"
	CreateDeploymentHandleRewrite    CreateDeploymentHandle = "rewrite"
)

func (e CreateDeploymentHandle) ToPointer() *CreateDeploymentHandle {
	return &e
}
func (e *CreateDeploymentHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "resource":
		fallthrough
	case "rewrite":
		*e = CreateDeploymentHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentHandle: %v", v)
	}
}

// CreateDeploymentDeploymentsResponse2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse2 struct {
	Dest   *string                `json:"dest,omitempty"`
	Handle CreateDeploymentHandle `json:"handle"`
	Src    *string                `json:"src,omitempty"`
	Status *float64               `json:"status,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeploymentDeploymentsResponse2) GetHandle() CreateDeploymentHandle {
	if o == nil {
		return CreateDeploymentHandle("")
	}
	return o.Handle
}

func (o *CreateDeploymentDeploymentsResponse2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateDeploymentDeploymentsResponse2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeHeader CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "header"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeCookie CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "cookie"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeQuery  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "query"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse2002 struct {
	Key   string                                                                       `json:"key"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type `json:"type"`
	Value *string                                                                      `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse2002) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsResponse2002) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse2002) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesTypeHost CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType = "host"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse2001 struct {
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType `json:"type"`
	Value string                                                                      `json:"value"`
}

func (o *CreateDeploymentDeploymentsResponse2001) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse2001) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentHasType string

const (
	CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2001 CreateDeploymentHasType = "createDeployment_deployments_response_200_1"
	CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2002 CreateDeploymentHasType = "createDeployment_deployments_response_200_2"
)

type CreateDeploymentHas struct {
	CreateDeploymentDeploymentsResponse2001 *CreateDeploymentDeploymentsResponse2001
	CreateDeploymentDeploymentsResponse2002 *CreateDeploymentDeploymentsResponse2002

	Type CreateDeploymentHasType
}

func CreateCreateDeploymentHasCreateDeploymentDeploymentsResponse2001(createDeploymentDeploymentsResponse2001 CreateDeploymentDeploymentsResponse2001) CreateDeploymentHas {
	typ := CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2001

	return CreateDeploymentHas{
		CreateDeploymentDeploymentsResponse2001: &createDeploymentDeploymentsResponse2001,
		Type:                                    typ,
	}
}

func CreateCreateDeploymentHasCreateDeploymentDeploymentsResponse2002(createDeploymentDeploymentsResponse2002 CreateDeploymentDeploymentsResponse2002) CreateDeploymentHas {
	typ := CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2002

	return CreateDeploymentHas{
		CreateDeploymentDeploymentsResponse2002: &createDeploymentDeploymentsResponse2002,
		Type:                                    typ,
	}
}

func (u *CreateDeploymentHas) UnmarshalJSON(data []byte) error {

	var createDeploymentDeploymentsResponse2001 CreateDeploymentDeploymentsResponse2001 = CreateDeploymentDeploymentsResponse2001{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2001, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2001 = &createDeploymentDeploymentsResponse2001
		u.Type = CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2001
		return nil
	}

	var createDeploymentDeploymentsResponse2002 CreateDeploymentDeploymentsResponse2002 = CreateDeploymentDeploymentsResponse2002{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2002, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2002 = &createDeploymentDeploymentsResponse2002
		u.Type = CreateDeploymentHasTypeCreateDeploymentDeploymentsResponse2002
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentHas", string(data))
}

func (u CreateDeploymentHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse2001 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2001, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse2002 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2002, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentHas: all fields are null")
}

type CreateDeploymentLocale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

func (o *CreateDeploymentLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *CreateDeploymentLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeHeader CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "header"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeCookie CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "cookie"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeQuery  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "query"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSON2 struct {
	Key   string                                                                               `json:"key"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type `json:"type"`
	Value *string                                                                              `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingTypeHost CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType = "host"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSON1 struct {
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType `json:"type"`
	Value string                                                                              `json:"value"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentMissingType string

const (
	CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1 CreateDeploymentMissingType = "createDeployment_deployments_response_200_ApplicationJSON_1"
	CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2 CreateDeploymentMissingType = "createDeployment_deployments_response_200_ApplicationJSON_2"
)

type CreateDeploymentMissing struct {
	CreateDeploymentDeploymentsResponse200ApplicationJSON1 *CreateDeploymentDeploymentsResponse200ApplicationJSON1
	CreateDeploymentDeploymentsResponse200ApplicationJSON2 *CreateDeploymentDeploymentsResponse200ApplicationJSON2

	Type CreateDeploymentMissingType
}

func CreateCreateDeploymentMissingCreateDeploymentDeploymentsResponse200ApplicationJSON1(createDeploymentDeploymentsResponse200ApplicationJSON1 CreateDeploymentDeploymentsResponse200ApplicationJSON1) CreateDeploymentMissing {
	typ := CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1

	return CreateDeploymentMissing{
		CreateDeploymentDeploymentsResponse200ApplicationJSON1: &createDeploymentDeploymentsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateCreateDeploymentMissingCreateDeploymentDeploymentsResponse200ApplicationJSON2(createDeploymentDeploymentsResponse200ApplicationJSON2 CreateDeploymentDeploymentsResponse200ApplicationJSON2) CreateDeploymentMissing {
	typ := CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2

	return CreateDeploymentMissing{
		CreateDeploymentDeploymentsResponse200ApplicationJSON2: &createDeploymentDeploymentsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func (u *CreateDeploymentMissing) UnmarshalJSON(data []byte) error {

	var createDeploymentDeploymentsResponse200ApplicationJSON1 CreateDeploymentDeploymentsResponse200ApplicationJSON1 = CreateDeploymentDeploymentsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSON1 = &createDeploymentDeploymentsResponse200ApplicationJSON1
		u.Type = CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1
		return nil
	}

	var createDeploymentDeploymentsResponse200ApplicationJSON2 CreateDeploymentDeploymentsResponse200ApplicationJSON2 = CreateDeploymentDeploymentsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSON2 = &createDeploymentDeploymentsResponse200ApplicationJSON2
		u.Type = CreateDeploymentMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentMissing", string(data))
}

func (u CreateDeploymentMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSON1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentMissing: all fields are null")
}

// CreateDeploymentDeploymentsResponse1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse1 struct {
	CaseSensitive *bool                   `json:"caseSensitive,omitempty"`
	Check         *bool                   `json:"check,omitempty"`
	Continue      *bool                   `json:"continue,omitempty"`
	Dest          *string                 `json:"dest,omitempty"`
	Has           []CreateDeploymentHas   `json:"has,omitempty"`
	Headers       map[string]string       `json:"headers,omitempty"`
	Important     *bool                   `json:"important,omitempty"`
	Locale        *CreateDeploymentLocale `json:"locale,omitempty"`
	Methods       []string                `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string                  `json:"middlewareRawSrc,omitempty"`
	Missing          []CreateDeploymentMissing `json:"missing,omitempty"`
	Override         *bool                     `json:"override,omitempty"`
	Src              string                    `json:"src"`
	Status           *float64                  `json:"status,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CreateDeploymentDeploymentsResponse1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateDeploymentDeploymentsResponse1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CreateDeploymentDeploymentsResponse1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeploymentDeploymentsResponse1) GetHas() []CreateDeploymentHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentDeploymentsResponse1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeploymentDeploymentsResponse1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CreateDeploymentDeploymentsResponse1) GetLocale() *CreateDeploymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateDeploymentDeploymentsResponse1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateDeploymentDeploymentsResponse1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CreateDeploymentDeploymentsResponse1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CreateDeploymentDeploymentsResponse1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CreateDeploymentDeploymentsResponse1) GetMissing() []CreateDeploymentMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentDeploymentsResponse1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CreateDeploymentDeploymentsResponse1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CreateDeploymentDeploymentsResponse1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeploymentRoutesType string

const (
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse1 CreateDeploymentRoutesType = "createDeployment_deployments_response_1"
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse2 CreateDeploymentRoutesType = "createDeployment_deployments_response_2"
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3 CreateDeploymentRoutesType = "createDeployment_deployments_response_3"
)

type CreateDeploymentRoutes struct {
	CreateDeploymentDeploymentsResponse1 *CreateDeploymentDeploymentsResponse1
	CreateDeploymentDeploymentsResponse2 *CreateDeploymentDeploymentsResponse2
	CreateDeploymentDeploymentsResponse3 *CreateDeploymentDeploymentsResponse3

	Type CreateDeploymentRoutesType
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse1(createDeploymentDeploymentsResponse1 CreateDeploymentDeploymentsResponse1) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse1

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse1: &createDeploymentDeploymentsResponse1,
		Type:                                 typ,
	}
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse2(createDeploymentDeploymentsResponse2 CreateDeploymentDeploymentsResponse2) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse2

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse2: &createDeploymentDeploymentsResponse2,
		Type:                                 typ,
	}
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse3(createDeploymentDeploymentsResponse3 CreateDeploymentDeploymentsResponse3) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse3: &createDeploymentDeploymentsResponse3,
		Type:                                 typ,
	}
}

func (u *CreateDeploymentRoutes) UnmarshalJSON(data []byte) error {

	var createDeploymentDeploymentsResponse3 CreateDeploymentDeploymentsResponse3 = CreateDeploymentDeploymentsResponse3{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse3, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse3 = &createDeploymentDeploymentsResponse3
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3
		return nil
	}

	var createDeploymentDeploymentsResponse2 CreateDeploymentDeploymentsResponse2 = CreateDeploymentDeploymentsResponse2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2 = &createDeploymentDeploymentsResponse2
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse2
		return nil
	}

	var createDeploymentDeploymentsResponse1 CreateDeploymentDeploymentsResponse1 = CreateDeploymentDeploymentsResponse1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse1 = &createDeploymentDeploymentsResponse1
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDeploymentRoutes", string(data))
}

func (u CreateDeploymentRoutes) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse3 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDeploymentRoutes: all fields are null")
}

// CreateDeploymentSource - Where was the deployment created from
type CreateDeploymentSource string

const (
	CreateDeploymentSourceCli                 CreateDeploymentSource = "cli"
	CreateDeploymentSourceGit                 CreateDeploymentSource = "git"
	CreateDeploymentSourceImport              CreateDeploymentSource = "import"
	CreateDeploymentSourceImportRepo          CreateDeploymentSource = "import/repo"
	CreateDeploymentSourceCloneRepo           CreateDeploymentSource = "clone/repo"
	CreateDeploymentSourceAPITriggerGitDeploy CreateDeploymentSource = "api-trigger-git-deploy"
)

func (e CreateDeploymentSource) ToPointer() *CreateDeploymentSource {
	return &e
}
func (e *CreateDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		fallthrough
	case "api-trigger-git-deploy":
		*e = CreateDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentSource: %v", v)
	}
}

// CreateDeploymentTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type CreateDeploymentTarget string

const (
	CreateDeploymentTargetStaging    CreateDeploymentTarget = "staging"
	CreateDeploymentTargetProduction CreateDeploymentTarget = "production"
)

func (e CreateDeploymentTarget) ToPointer() *CreateDeploymentTarget {
	return &e
}
func (e *CreateDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CreateDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentTarget: %v", v)
	}
}

// CreateDeploymentTeam - The team that owns the deployment if any
type CreateDeploymentTeam struct {
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *CreateDeploymentTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *CreateDeploymentTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type CreateDeploymentDeploymentsResponseType string

const (
	CreateDeploymentDeploymentsResponseTypeLambdas CreateDeploymentDeploymentsResponseType = "LAMBDAS"
)

func (e CreateDeploymentDeploymentsResponseType) ToPointer() *CreateDeploymentDeploymentsResponseType {
	return &e
}
func (e *CreateDeploymentDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateDeploymentDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponseType: %v", v)
	}
}

// CreateDeploymentResponseBody - The successfully created deployment
type CreateDeploymentResponseBody struct {
	// The public project information associated with the deployment.
	ProjectObj *ProjectObj `json:"project,omitempty"`
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                             `json:"aliasAssigned"`
	AliasAssignedAt *CreateDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *CreateDeploymentAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                           `json:"aliasFinal,omitempty"`
	AliasWarning            *CreateDeploymentAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                          `json:"automaticAliases,omitempty"`
	BootedAt                float64                           `json:"bootedAt"`
	Build                   CreateDeploymentBuild             `json:"build"`
	BuildErrorAt            *float64                          `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                           `json:"buildingAt"`
	Builds                  []CreateDeploymentBuilds          `json:"builds,omitempty"`
	CanceledAt              *float64                          `json:"canceledAt,omitempty"`
	ChecksConclusion        *CreateDeploymentChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *CreateDeploymentChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator CreateDeploymentCreator `json:"creator"`
	// The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
	Crons []CreateDeploymentCrons `json:"crons,omitempty"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]CreateDeploymentFunctions `json:"functions,omitempty"`
	GitRepo   *CreateDeploymentGitRepo             `json:"gitRepo,omitempty"`
	GitSource *CreateDeploymentGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                      `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []CreateDeploymentLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
	PassiveConnectConfigurationID *string  `json:"passiveConnectConfigurationId,omitempty"`
	PassiveRegions                []string `json:"passiveRegions,omitempty"`
	// The pricing plan the deployment was made under
	Plan CreateDeploymentPlan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState CreateDeploymentReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *CreateDeploymentReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []CreateDeploymentRoutes `json:"routes"`
	// Where was the deployment created from
	Source *CreateDeploymentSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *CreateDeploymentTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *CreateDeploymentTeam                   `json:"team,omitempty"`
	Type CreateDeploymentDeploymentsResponseType `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
}

func (o *CreateDeploymentResponseBody) GetProjectObj() *ProjectObj {
	if o == nil {
		return nil
	}
	return o.ProjectObj
}

func (o *CreateDeploymentResponseBody) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *CreateDeploymentResponseBody) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CreateDeploymentResponseBody) GetAliasAssignedAt() *CreateDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CreateDeploymentResponseBody) GetAliasError() *CreateDeploymentAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateDeploymentResponseBody) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateDeploymentResponseBody) GetAliasWarning() *CreateDeploymentAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CreateDeploymentResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateDeploymentResponseBody) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateDeploymentResponseBody) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *CreateDeploymentResponseBody) GetBuild() CreateDeploymentBuild {
	if o == nil {
		return CreateDeploymentBuild{}
	}
	return o.Build
}

func (o *CreateDeploymentResponseBody) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CreateDeploymentResponseBody) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *CreateDeploymentResponseBody) GetBuilds() []CreateDeploymentBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateDeploymentResponseBody) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateDeploymentResponseBody) GetChecksConclusion() *CreateDeploymentChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateDeploymentResponseBody) GetChecksState() *CreateDeploymentChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateDeploymentResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateDeploymentResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateDeploymentResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateDeploymentResponseBody) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateDeploymentResponseBody) GetCreator() CreateDeploymentCreator {
	if o == nil {
		return CreateDeploymentCreator{}
	}
	return o.Creator
}

func (o *CreateDeploymentResponseBody) GetCrons() []CreateDeploymentCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateDeploymentResponseBody) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CreateDeploymentResponseBody) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CreateDeploymentResponseBody) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CreateDeploymentResponseBody) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateDeploymentResponseBody) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CreateDeploymentResponseBody) GetFunctions() map[string]CreateDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateDeploymentResponseBody) GetGitRepo() *CreateDeploymentGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CreateDeploymentResponseBody) GetGitSource() *CreateDeploymentGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeploymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentResponseBody) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CreateDeploymentResponseBody) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CreateDeploymentResponseBody) GetLambdas() []CreateDeploymentLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CreateDeploymentResponseBody) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CreateDeploymentResponseBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeploymentResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDeploymentResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CreateDeploymentResponseBody) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *CreateDeploymentResponseBody) GetPlan() CreateDeploymentPlan {
	if o == nil {
		return CreateDeploymentPlan("")
	}
	return o.Plan
}

func (o *CreateDeploymentResponseBody) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateDeploymentResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeploymentResponseBody) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CreateDeploymentResponseBody) GetReadyState() CreateDeploymentReadyState {
	if o == nil {
		return CreateDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CreateDeploymentResponseBody) GetReadySubstate() *CreateDeploymentReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateDeploymentResponseBody) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CreateDeploymentResponseBody) GetRoutes() []CreateDeploymentRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CreateDeploymentResponseBody) GetSource() *CreateDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateDeploymentResponseBody) GetTarget() *CreateDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeploymentResponseBody) GetTeam() *CreateDeploymentTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateDeploymentResponseBody) GetType() CreateDeploymentDeploymentsResponseType {
	if o == nil {
		return CreateDeploymentDeploymentsResponseType("")
	}
	return o.Type
}

func (o *CreateDeploymentResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateDeploymentResponseBody) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CreateDeploymentResponseBody) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

type CreateDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The successfully created deployment
	Object *CreateDeploymentResponseBody
}

func (o *CreateDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateDeploymentResponse) GetObject() *CreateDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
