// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type CurrentState string

const (
	CurrentStateInit  CurrentState = "init"
	CurrentStateReady CurrentState = "ready"
)

func (e CurrentState) ToPointer() *CurrentState {
	return &e
}

func (e *CurrentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "ready":
		*e = CurrentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrentState: %v", v)
	}
}

type Branch struct {
	CreatedAt    string       `json:"created_at"`
	CurrentState CurrentState `json:"current_state"`
	ID           string       `json:"id"`
	Name         string       `json:"name"`
	ParentID     *string      `json:"parent_id,omitempty"`
	Primary      bool         `json:"primary"`
	ProjectID    string       `json:"project_id"`
	UpdatedAt    string       `json:"updated_at"`
}

func (o *Branch) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Branch) GetCurrentState() CurrentState {
	if o == nil {
		return CurrentState("")
	}
	return o.CurrentState
}

func (o *Branch) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Branch) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Branch) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *Branch) GetPrimary() bool {
	if o == nil {
		return false
	}
	return o.Primary
}

func (o *Branch) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Branch) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

// Build - An object containing another object with information to be passed to the Build Process
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type Build struct {
	// An object containing the deployment's environment variable names and values to be passed to Builds. Secrets can be referenced by prefixing the value with `@`
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Env map[string]string `json:"env,omitempty"`
}

func (o *Build) GetEnv() map[string]string {
	if o == nil {
		return nil
	}
	return o.Env
}

// Config - Optionally, an object including arbitrary metadata to be passed to the Builder
type Config struct {
}

type Builds struct {
	// Optionally, an object including arbitrary metadata to be passed to the Builder
	Config *Config `json:"config,omitempty"`
	// A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include `*` and `**`
	Src *string `json:"src,omitempty"`
	// An npm module to be installed by the build process. It can include a semver compatible version (e.g.: `@org/proj@1`)
	Use string `json:"use"`
}

func (o *Builds) GetConfig() *Config {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *Builds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *Builds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

type ConnectionUris struct {
	ConnectionURI string `json:"connection_uri"`
}

func (o *ConnectionUris) GetConnectionURI() string {
	if o == nil {
		return ""
	}
	return o.ConnectionURI
}

type Crons struct {
	Path     string `json:"path"`
	Schedule string `json:"schedule"`
}

func (o *Crons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Crons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type Database struct {
	BranchID  string `json:"branch_id"`
	CreatedAt string `json:"created_at"`
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	OwnerName string `json:"owner_name"`
	UpdatedAt string `json:"updated_at"`
}

func (o *Database) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Database) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Database) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Database) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Database) GetOwnerName() string {
	if o == nil {
		return ""
	}
	return o.OwnerName
}

func (o *Database) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type Databases struct {
	BranchID  string `json:"branch_id"`
	CreatedAt string `json:"created_at"`
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	OwnerName string `json:"owner_name"`
	UpdatedAt string `json:"updated_at"`
}

func (o *Databases) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Databases) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Databases) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Databases) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Databases) GetOwnerName() string {
	if o == nil {
		return ""
	}
	return o.OwnerName
}

func (o *Databases) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type Endpoint struct {
	AutoscalingLimitMaxCu int64   `json:"autoscaling_limit_max_cu"`
	AutoscalingLimitMinCu int64   `json:"autoscaling_limit_min_cu"`
	BranchID              string  `json:"branch_id"`
	CreatedAt             string  `json:"created_at"`
	CurrentState          string  `json:"current_state"`
	Disabled              bool    `json:"disabled"`
	Host                  string  `json:"host"`
	ID                    string  `json:"id"`
	LastActive            *string `json:"last_active,omitempty"`
	PasswordlessAccess    bool    `json:"passwordless_access"`
	PoolerEnabled         bool    `json:"pooler_enabled"`
	PoolerMode            string  `json:"pooler_mode"`
	ProjectID             string  `json:"project_id"`
	RegionID              string  `json:"region_id"`
	SuspendTimeoutSeconds int64   `json:"suspend_timeout_seconds"`
	Type                  string  `json:"type"`
	UpdatedAt             string  `json:"updated_at"`
}

func (o *Endpoint) GetAutoscalingLimitMaxCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMaxCu
}

func (o *Endpoint) GetAutoscalingLimitMinCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMinCu
}

func (o *Endpoint) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Endpoint) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Endpoint) GetCurrentState() string {
	if o == nil {
		return ""
	}
	return o.CurrentState
}

func (o *Endpoint) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *Endpoint) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Endpoint) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Endpoint) GetLastActive() *string {
	if o == nil {
		return nil
	}
	return o.LastActive
}

func (o *Endpoint) GetPasswordlessAccess() bool {
	if o == nil {
		return false
	}
	return o.PasswordlessAccess
}

func (o *Endpoint) GetPoolerEnabled() bool {
	if o == nil {
		return false
	}
	return o.PoolerEnabled
}

func (o *Endpoint) GetPoolerMode() string {
	if o == nil {
		return ""
	}
	return o.PoolerMode
}

func (o *Endpoint) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Endpoint) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *Endpoint) GetSuspendTimeoutSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.SuspendTimeoutSeconds
}

func (o *Endpoint) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Endpoint) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type Endpoints struct {
	AutoscalingLimitMaxCu int64   `json:"autoscaling_limit_max_cu"`
	AutoscalingLimitMinCu int64   `json:"autoscaling_limit_min_cu"`
	BranchID              string  `json:"branch_id"`
	CreatedAt             string  `json:"created_at"`
	CurrentState          string  `json:"current_state"`
	Disabled              bool    `json:"disabled"`
	Host                  string  `json:"host"`
	ID                    string  `json:"id"`
	LastActive            *string `json:"last_active,omitempty"`
	PasswordlessAccess    bool    `json:"passwordless_access"`
	PoolerEnabled         bool    `json:"pooler_enabled"`
	PoolerMode            string  `json:"pooler_mode"`
	ProjectID             string  `json:"project_id"`
	RegionID              string  `json:"region_id"`
	SuspendTimeoutSeconds int64   `json:"suspend_timeout_seconds"`
	Type                  string  `json:"type"`
	UpdatedAt             string  `json:"updated_at"`
}

func (o *Endpoints) GetAutoscalingLimitMaxCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMaxCu
}

func (o *Endpoints) GetAutoscalingLimitMinCu() int64 {
	if o == nil {
		return 0
	}
	return o.AutoscalingLimitMinCu
}

func (o *Endpoints) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Endpoints) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Endpoints) GetCurrentState() string {
	if o == nil {
		return ""
	}
	return o.CurrentState
}

func (o *Endpoints) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *Endpoints) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Endpoints) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Endpoints) GetLastActive() *string {
	if o == nil {
		return nil
	}
	return o.LastActive
}

func (o *Endpoints) GetPasswordlessAccess() bool {
	if o == nil {
		return false
	}
	return o.PasswordlessAccess
}

func (o *Endpoints) GetPoolerEnabled() bool {
	if o == nil {
		return false
	}
	return o.PoolerEnabled
}

func (o *Endpoints) GetPoolerMode() string {
	if o == nil {
		return ""
	}
	return o.PoolerMode
}

func (o *Endpoints) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Endpoints) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *Endpoints) GetSuspendTimeoutSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.SuspendTimeoutSeconds
}

func (o *Endpoints) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Endpoints) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

// UploadedFile - Used in the case you want to reference a file that was already uploaded
type UploadedFile struct {
	// The file path relative to the project root
	File string `json:"file"`
	// The file contents hashed with SHA1, used to check the integrity
	Sha *string `json:"sha,omitempty"`
	// The file size in bytes
	Size *int64 `json:"size,omitempty"`
}

func (o *UploadedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

func (o *UploadedFile) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *UploadedFile) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

// Encoding - The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
type Encoding string

const (
	EncodingBase64 Encoding = "base64"
	EncodingUTF8   Encoding = "utf-8"
)

func (e Encoding) ToPointer() *Encoding {
	return &e
}

func (e *Encoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "base64":
		fallthrough
	case "utf-8":
		*e = Encoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoding: %v", v)
	}
}

// InlinedFile - Used in the case you want to inline a file inside the request
type InlinedFile struct {
	// The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code
	Data string `json:"data"`
	// The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.
	Encoding *Encoding `json:"encoding,omitempty"`
	// The file name including the whole path
	File string `json:"file"`
}

func (o *InlinedFile) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *InlinedFile) GetEncoding() *Encoding {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *InlinedFile) GetFile() string {
	if o == nil {
		return ""
	}
	return o.File
}

type FilesType string

const (
	FilesTypeInlinedFile  FilesType = "InlinedFile"
	FilesTypeUploadedFile FilesType = "UploadedFile"
)

type Files struct {
	InlinedFile  *InlinedFile
	UploadedFile *UploadedFile

	Type FilesType
}

func CreateFilesInlinedFile(inlinedFile InlinedFile) Files {
	typ := FilesTypeInlinedFile

	return Files{
		InlinedFile: &inlinedFile,
		Type:        typ,
	}
}

func CreateFilesUploadedFile(uploadedFile UploadedFile) Files {
	typ := FilesTypeUploadedFile

	return Files{
		UploadedFile: &uploadedFile,
		Type:         typ,
	}
}

func (u *Files) UnmarshalJSON(data []byte) error {

	inlinedFile := InlinedFile{}
	if err := utils.UnmarshalJSON(data, &inlinedFile, "", true, true); err == nil {
		u.InlinedFile = &inlinedFile
		u.Type = FilesTypeInlinedFile
		return nil
	}

	uploadedFile := UploadedFile{}
	if err := utils.UnmarshalJSON(data, &uploadedFile, "", true, true); err == nil {
		u.UploadedFile = &uploadedFile
		u.Type = FilesTypeUploadedFile
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Files) MarshalJSON() ([]byte, error) {
	if u.InlinedFile != nil {
		return utils.MarshalJSON(u.InlinedFile, "", true)
	}

	if u.UploadedFile != nil {
		return utils.MarshalJSON(u.UploadedFile, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Framework - The framework that is being used for this project. When `null` is used no framework is selected
type Framework string

const (
	FrameworkBlitzjs        Framework = "blitzjs"
	FrameworkNextjs         Framework = "nextjs"
	FrameworkGatsby         Framework = "gatsby"
	FrameworkRemix          Framework = "remix"
	FrameworkAstro          Framework = "astro"
	FrameworkHexo           Framework = "hexo"
	FrameworkEleventy       Framework = "eleventy"
	FrameworkDocusaurus2    Framework = "docusaurus-2"
	FrameworkDocusaurus     Framework = "docusaurus"
	FrameworkPreact         Framework = "preact"
	FrameworkSolidstart     Framework = "solidstart"
	FrameworkDojo           Framework = "dojo"
	FrameworkEmber          Framework = "ember"
	FrameworkVue            Framework = "vue"
	FrameworkScully         Framework = "scully"
	FrameworkIonicAngular   Framework = "ionic-angular"
	FrameworkAngular        Framework = "angular"
	FrameworkPolymer        Framework = "polymer"
	FrameworkSvelte         Framework = "svelte"
	FrameworkSveltekit      Framework = "sveltekit"
	FrameworkSveltekit1     Framework = "sveltekit-1"
	FrameworkIonicReact     Framework = "ionic-react"
	FrameworkCreateReactApp Framework = "create-react-app"
	FrameworkGridsome       Framework = "gridsome"
	FrameworkUmijs          Framework = "umijs"
	FrameworkSapper         Framework = "sapper"
	FrameworkSaber          Framework = "saber"
	FrameworkStencil        Framework = "stencil"
	FrameworkNuxtjs         Framework = "nuxtjs"
	FrameworkRedwoodjs      Framework = "redwoodjs"
	FrameworkHugo           Framework = "hugo"
	FrameworkJekyll         Framework = "jekyll"
	FrameworkBrunch         Framework = "brunch"
	FrameworkMiddleman      Framework = "middleman"
	FrameworkZola           Framework = "zola"
	FrameworkHydrogen       Framework = "hydrogen"
	FrameworkVite           Framework = "vite"
	FrameworkVitepress      Framework = "vitepress"
	FrameworkVuepress       Framework = "vuepress"
	FrameworkParcel         Framework = "parcel"
	FrameworkSanity         Framework = "sanity"
	FrameworkStorybook      Framework = "storybook"
)

func (e Framework) ToPointer() *Framework {
	return &e
}

func (e *Framework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = Framework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Framework: %v", v)
	}
}

type Functions struct {
	// A glob pattern to match files that should be excluded from your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	// A glob pattern to match files that should be included in your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
	IncludeFiles *string `json:"includeFiles,omitempty"`
	// An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between 1 and the maximum limit of your plan).
	MaxDuration *int64 `json:"maxDuration,omitempty"`
	// An integer defining the memory your Serverless Function should be provided with (between 128 and 3008).
	Memory *int64 `json:"memory,omitempty"`
	// The npm package name of a Runtime, including its version
	Runtime *string `json:"runtime,omitempty"`
}

func (o *Functions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *Functions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *Functions) GetMaxDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *Functions) GetMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *Functions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type DeploymentEnabledType string

const (
	DeploymentEnabledTypeBoolean      DeploymentEnabledType = "boolean"
	DeploymentEnabledTypeMapOfboolean DeploymentEnabledType = "mapOfboolean"
)

// DeploymentEnabled - Specifies the branches that will not trigger an auto-deployment when committing to them. Any non specified branch is `true` by default.
type DeploymentEnabled struct {
	Boolean      *bool
	MapOfboolean map[string]bool

	Type DeploymentEnabledType
}

func CreateDeploymentEnabledBoolean(boolean bool) DeploymentEnabled {
	typ := DeploymentEnabledTypeBoolean

	return DeploymentEnabled{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDeploymentEnabledMapOfboolean(mapOfboolean map[string]bool) DeploymentEnabled {
	typ := DeploymentEnabledTypeMapOfboolean

	return DeploymentEnabled{
		MapOfboolean: mapOfboolean,
		Type:         typ,
	}
}

func (u *DeploymentEnabled) UnmarshalJSON(data []byte) error {

	boolean := false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DeploymentEnabledTypeBoolean
		return nil
	}

	mapOfboolean := map[string]bool{}
	if err := utils.UnmarshalJSON(data, &mapOfboolean, "", true, true); err == nil {
		u.MapOfboolean = mapOfboolean
		u.Type = DeploymentEnabledTypeMapOfboolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DeploymentEnabled) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfboolean != nil {
		return utils.MarshalJSON(u.MapOfboolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Git struct {
	// Specifies the branches that will not trigger an auto-deployment when committing to them. Any non specified branch is `true` by default.
	DeploymentEnabled *DeploymentEnabled `json:"deploymentEnabled,omitempty"`
}

func (o *Git) GetDeploymentEnabled() *DeploymentEnabled {
	if o == nil {
		return nil
	}
	return o.DeploymentEnabled
}

// GitMetadata - Populates initial git metadata for different git providers.
type GitMetadata struct {
	// The name of the author of the commit
	CommitAuthorName *string `json:"commitAuthorName,omitempty"`
	// The commit message
	CommitMessage *string `json:"commitMessage,omitempty"`
	// The branch on which the commit was made
	CommitRef *string `json:"commitRef,omitempty"`
	// The hash of the commit
	CommitSha *string `json:"commitSha,omitempty"`
	// Whether or not there have been modifications to the working tree since the latest commit
	Dirty *bool `json:"dirty,omitempty"`
	// The git repository's remote origin url
	RemoteURL *string `json:"remoteUrl,omitempty"`
}

func (o *GitMetadata) GetCommitAuthorName() *string {
	if o == nil {
		return nil
	}
	return o.CommitAuthorName
}

func (o *GitMetadata) GetCommitMessage() *string {
	if o == nil {
		return nil
	}
	return o.CommitMessage
}

func (o *GitMetadata) GetCommitRef() *string {
	if o == nil {
		return nil
	}
	return o.CommitRef
}

func (o *GitMetadata) GetCommitSha() *string {
	if o == nil {
		return nil
	}
	return o.CommitSha
}

func (o *GitMetadata) GetDirty() *bool {
	if o == nil {
		return nil
	}
	return o.Dirty
}

func (o *GitMetadata) GetRemoteURL() *string {
	if o == nil {
		return nil
	}
	return o.RemoteURL
}

type CreateDeploymentDeploymentsRequestRequestBodyType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyTypeBitbucket CreateDeploymentDeploymentsRequestRequestBodyType = "bitbucket"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyType: %v", v)
	}
}

type Five struct {
	Owner string                                            `json:"owner"`
	Ref   string                                            `json:"ref"`
	Sha   *string                                           `json:"sha,omitempty"`
	Slug  string                                            `json:"slug"`
	Type  CreateDeploymentDeploymentsRequestRequestBodyType `json:"type"`
}

func (o *Five) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *Five) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Five) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Five) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Five) GetType() CreateDeploymentDeploymentsRequestRequestBodyType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyType("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsRequestType string

const (
	CreateDeploymentDeploymentsRequestTypeBitbucket CreateDeploymentDeploymentsRequestType = "bitbucket"
)

func (e CreateDeploymentDeploymentsRequestType) ToPointer() *CreateDeploymentDeploymentsRequestType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestType: %v", v)
	}
}

type Four struct {
	Ref           string                                 `json:"ref"`
	RepoUUID      string                                 `json:"repoUuid"`
	Sha           *string                                `json:"sha,omitempty"`
	Type          CreateDeploymentDeploymentsRequestType `json:"type"`
	WorkspaceUUID *string                                `json:"workspaceUuid,omitempty"`
}

func (o *Four) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Four) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *Four) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Four) GetType() CreateDeploymentDeploymentsRequestType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestType("")
	}
	return o.Type
}

func (o *Four) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type ProjectIDType string

const (
	ProjectIDTypeInteger ProjectIDType = "integer"
	ProjectIDTypeStr     ProjectIDType = "str"
)

type ProjectID struct {
	Integer *int64
	Str     *string

	Type ProjectIDType
}

func CreateProjectIDInteger(integer int64) ProjectID {
	typ := ProjectIDTypeInteger

	return ProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateProjectIDStr(str string) ProjectID {
	typ := ProjectIDTypeStr

	return ProjectID{
		Str:  &str,
		Type: typ,
	}
}

func (u *ProjectID) UnmarshalJSON(data []byte) error {

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ProjectIDTypeInteger
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ProjectIDTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ProjectID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentDeploymentsType string

const (
	CreateDeploymentDeploymentsTypeGitlab CreateDeploymentDeploymentsType = "gitlab"
)

func (e CreateDeploymentDeploymentsType) ToPointer() *CreateDeploymentDeploymentsType {
	return &e
}

func (e *CreateDeploymentDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsType: %v", v)
	}
}

type Three struct {
	ProjectID ProjectID                       `json:"projectId"`
	Ref       string                          `json:"ref"`
	Sha       *string                         `json:"sha,omitempty"`
	Type      CreateDeploymentDeploymentsType `json:"type"`
}

func (o *Three) GetProjectID() ProjectID {
	if o == nil {
		return ProjectID{}
	}
	return o.ProjectID
}

func (o *Three) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Three) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Three) GetType() CreateDeploymentDeploymentsType {
	if o == nil {
		return CreateDeploymentDeploymentsType("")
	}
	return o.Type
}

type CreateDeploymentType string

const (
	CreateDeploymentTypeGithub CreateDeploymentType = "github"
)

func (e CreateDeploymentType) ToPointer() *CreateDeploymentType {
	return &e
}

func (e *CreateDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentType: %v", v)
	}
}

type Two struct {
	Org  string               `json:"org"`
	Ref  string               `json:"ref"`
	Repo string               `json:"repo"`
	Sha  *string              `json:"sha,omitempty"`
	Type CreateDeploymentType `json:"type"`
}

func (o *Two) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Two) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *Two) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *Two) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *Two) GetType() CreateDeploymentType {
	if o == nil {
		return CreateDeploymentType("")
	}
	return o.Type
}

type RepoIDType string

const (
	RepoIDTypeInteger RepoIDType = "integer"
	RepoIDTypeStr     RepoIDType = "str"
)

type RepoID struct {
	Integer *int64
	Str     *string

	Type RepoIDType
}

func CreateRepoIDInteger(integer int64) RepoID {
	typ := RepoIDTypeInteger

	return RepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateRepoIDStr(str string) RepoID {
	typ := RepoIDTypeStr

	return RepoID{
		Str:  &str,
		Type: typ,
	}
}

func (u *RepoID) UnmarshalJSON(data []byte) error {

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = RepoIDTypeInteger
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RepoIDTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RepoID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Type string

const (
	TypeGithub Type = "github"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type One struct {
	Ref    string  `json:"ref"`
	RepoID RepoID  `json:"repoId"`
	Sha    *string `json:"sha,omitempty"`
	Type   Type    `json:"type"`
}

func (o *One) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *One) GetRepoID() RepoID {
	if o == nil {
		return RepoID{}
	}
	return o.RepoID
}

func (o *One) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *One) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type GitSourceType string

const (
	GitSourceTypeOne   GitSourceType = "1"
	GitSourceTypeTwo   GitSourceType = "2"
	GitSourceTypeThree GitSourceType = "3"
	GitSourceTypeFour  GitSourceType = "4"
	GitSourceTypeFive  GitSourceType = "5"
)

// GitSource - Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
type GitSource struct {
	One   *One
	Two   *Two
	Three *Three
	Four  *Four
	Five  *Five

	Type GitSourceType
}

func CreateGitSourceOne(one One) GitSource {
	typ := GitSourceTypeOne

	return GitSource{
		One:  &one,
		Type: typ,
	}
}

func CreateGitSourceTwo(two Two) GitSource {
	typ := GitSourceTypeTwo

	return GitSource{
		Two:  &two,
		Type: typ,
	}
}

func CreateGitSourceThree(three Three) GitSource {
	typ := GitSourceTypeThree

	return GitSource{
		Three: &three,
		Type:  typ,
	}
}

func CreateGitSourceFour(four Four) GitSource {
	typ := GitSourceTypeFour

	return GitSource{
		Four: &four,
		Type: typ,
	}
}

func CreateGitSourceFive(five Five) GitSource {
	typ := GitSourceTypeFive

	return GitSource{
		Five: &five,
		Type: typ,
	}
}

func (u *GitSource) UnmarshalJSON(data []byte) error {

	one := One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = GitSourceTypeOne
		return nil
	}

	three := Three{}
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = GitSourceTypeThree
		return nil
	}

	two := Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = GitSourceTypeTwo
		return nil
	}

	four := Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = GitSourceTypeFour
		return nil
	}

	five := Five{}
	if err := utils.UnmarshalJSON(data, &five, "", true, true); err == nil {
		u.Five = &five
		u.Type = GitSourceTypeFive
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GitSource) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.Five != nil {
		return utils.MarshalJSON(u.Five, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyHeadersHasTypeHeader CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType = "header"
	CreateDeploymentDeploymentsRequestRequestBodyHeadersHasTypeCookie CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyHeadersHasTypeQuery  CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBody2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBody2) GetType() CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyHeadersHasType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBody2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyHeadersType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyHeadersType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyHeadersTypeHost CreateDeploymentDeploymentsRequestRequestBodyHeadersType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyHeadersType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyHeadersType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyHeadersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyHeadersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyHeadersType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBody1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyHeadersType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBody1) GetType() CreateDeploymentDeploymentsRequestRequestBodyHeadersType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyHeadersType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentHasType string

const (
	CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody1 CreateDeploymentHasType = "createDeployment_deployments_request_requestBody_1"
	CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody2 CreateDeploymentHasType = "createDeployment_deployments_request_requestBody_2"
)

type CreateDeploymentHas struct {
	CreateDeploymentDeploymentsRequestRequestBody1 *CreateDeploymentDeploymentsRequestRequestBody1
	CreateDeploymentDeploymentsRequestRequestBody2 *CreateDeploymentDeploymentsRequestRequestBody2

	Type CreateDeploymentHasType
}

func CreateCreateDeploymentHasCreateDeploymentDeploymentsRequestRequestBody1(createDeploymentDeploymentsRequestRequestBody1 CreateDeploymentDeploymentsRequestRequestBody1) CreateDeploymentHas {
	typ := CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody1

	return CreateDeploymentHas{
		CreateDeploymentDeploymentsRequestRequestBody1: &createDeploymentDeploymentsRequestRequestBody1,
		Type: typ,
	}
}

func CreateCreateDeploymentHasCreateDeploymentDeploymentsRequestRequestBody2(createDeploymentDeploymentsRequestRequestBody2 CreateDeploymentDeploymentsRequestRequestBody2) CreateDeploymentHas {
	typ := CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody2

	return CreateDeploymentHas{
		CreateDeploymentDeploymentsRequestRequestBody2: &createDeploymentDeploymentsRequestRequestBody2,
		Type: typ,
	}
}

func (u *CreateDeploymentHas) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBody1 := CreateDeploymentDeploymentsRequestRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBody1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBody1 = &createDeploymentDeploymentsRequestRequestBody1
		u.Type = CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBody2 := CreateDeploymentDeploymentsRequestRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBody2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBody2 = &createDeploymentDeploymentsRequestRequestBody2
		u.Type = CreateDeploymentHasTypeCreateDeploymentDeploymentsRequestRequestBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBody1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentHeaders struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (o *CreateDeploymentHeaders) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type string

const (
	CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2TypeHeader CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type = "header"
	CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2TypeCookie CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2TypeQuery  CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyHeaders2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyHeaders2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyHeaders2) GetType() CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyHeadersMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyHeaders2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingTypeHost CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyHeaders1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyHeaders1) GetType() CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyHeadersMissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyHeaders1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentMissingType string

const (
	CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders1 CreateDeploymentMissingType = "createDeployment_deployments_request_requestBody_headers_1"
	CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders2 CreateDeploymentMissingType = "createDeployment_deployments_request_requestBody_headers_2"
)

type CreateDeploymentMissing struct {
	CreateDeploymentDeploymentsRequestRequestBodyHeaders1 *CreateDeploymentDeploymentsRequestRequestBodyHeaders1
	CreateDeploymentDeploymentsRequestRequestBodyHeaders2 *CreateDeploymentDeploymentsRequestRequestBodyHeaders2

	Type CreateDeploymentMissingType
}

func CreateCreateDeploymentMissingCreateDeploymentDeploymentsRequestRequestBodyHeaders1(createDeploymentDeploymentsRequestRequestBodyHeaders1 CreateDeploymentDeploymentsRequestRequestBodyHeaders1) CreateDeploymentMissing {
	typ := CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders1

	return CreateDeploymentMissing{
		CreateDeploymentDeploymentsRequestRequestBodyHeaders1: &createDeploymentDeploymentsRequestRequestBodyHeaders1,
		Type: typ,
	}
}

func CreateCreateDeploymentMissingCreateDeploymentDeploymentsRequestRequestBodyHeaders2(createDeploymentDeploymentsRequestRequestBodyHeaders2 CreateDeploymentDeploymentsRequestRequestBodyHeaders2) CreateDeploymentMissing {
	typ := CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders2

	return CreateDeploymentMissing{
		CreateDeploymentDeploymentsRequestRequestBodyHeaders2: &createDeploymentDeploymentsRequestRequestBodyHeaders2,
		Type: typ,
	}
}

func (u *CreateDeploymentMissing) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBodyHeaders1 := CreateDeploymentDeploymentsRequestRequestBodyHeaders1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyHeaders1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyHeaders1 = &createDeploymentDeploymentsRequestRequestBodyHeaders1
		u.Type = CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBodyHeaders2 := CreateDeploymentDeploymentsRequestRequestBodyHeaders2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyHeaders2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyHeaders2 = &createDeploymentDeploymentsRequestRequestBodyHeaders2
		u.Type = CreateDeploymentMissingTypeCreateDeploymentDeploymentsRequestRequestBodyHeaders2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBodyHeaders1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyHeaders1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBodyHeaders2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Headers struct {
	// An array of requirements that are needed to match
	Has []CreateDeploymentHas `json:"has,omitempty"`
	// An array of key/value pairs representing each response header.
	Headers []CreateDeploymentHeaders `json:"headers"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentMissing `json:"missing,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring)
	Source string `json:"source"`
}

func (o *Headers) GetHas() []CreateDeploymentHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *Headers) GetHeaders() []CreateDeploymentHeaders {
	if o == nil {
		return []CreateDeploymentHeaders{}
	}
	return o.Headers
}

func (o *Headers) GetMissing() []CreateDeploymentMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *Headers) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type ContentDispositionType string

const (
	ContentDispositionTypeInline     ContentDispositionType = "inline"
	ContentDispositionTypeAttachment ContentDispositionType = "attachment"
)

func (e ContentDispositionType) ToPointer() *ContentDispositionType {
	return &e
}

func (e *ContentDispositionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = ContentDispositionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentDispositionType: %v", v)
	}
}

type Formats string

const (
	FormatsImageAvif Formats = "image/avif"
	FormatsImageWebp Formats = "image/webp"
	FormatsImageJpeg Formats = "image/jpeg"
	FormatsImagePng  Formats = "image/png"
)

func (e Formats) ToPointer() *Formats {
	return &e
}

func (e *Formats) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/avif":
		fallthrough
	case "image/webp":
		fallthrough
	case "image/jpeg":
		fallthrough
	case "image/png":
		*e = Formats(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Formats: %v", v)
	}
}

type Protocol string

const (
	ProtocolHTTP  Protocol = "http"
	ProtocolHTTPS Protocol = "https"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}

func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type RemotePatterns struct {
	Hostname string    `json:"hostname"`
	Pathname *string   `json:"pathname,omitempty"`
	Port     *string   `json:"port,omitempty"`
	Protocol *Protocol `json:"protocol,omitempty"`
}

func (o *RemotePatterns) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *RemotePatterns) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *RemotePatterns) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *RemotePatterns) GetProtocol() *Protocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

type Images struct {
	ContentDispositionType *ContentDispositionType `json:"contentDispositionType,omitempty"`
	ContentSecurityPolicy  *string                 `json:"contentSecurityPolicy,omitempty"`
	DangerouslyAllowSVG    *bool                   `json:"dangerouslyAllowSVG,omitempty"`
	Domains                []string                `json:"domains,omitempty"`
	Formats                []Formats               `json:"formats,omitempty"`
	MinimumCacheTTL        *int64                  `json:"minimumCacheTTL,omitempty"`
	RemotePatterns         []RemotePatterns        `json:"remotePatterns,omitempty"`
	Sizes                  []int64                 `json:"sizes"`
}

func (o *Images) GetContentDispositionType() *ContentDispositionType {
	if o == nil {
		return nil
	}
	return o.ContentDispositionType
}

func (o *Images) GetContentSecurityPolicy() *string {
	if o == nil {
		return nil
	}
	return o.ContentSecurityPolicy
}

func (o *Images) GetDangerouslyAllowSVG() *bool {
	if o == nil {
		return nil
	}
	return o.DangerouslyAllowSVG
}

func (o *Images) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *Images) GetFormats() []Formats {
	if o == nil {
		return nil
	}
	return o.Formats
}

func (o *Images) GetMinimumCacheTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumCacheTTL
}

func (o *Images) GetRemotePatterns() []RemotePatterns {
	if o == nil {
		return nil
	}
	return o.RemotePatterns
}

func (o *Images) GetSizes() []int64 {
	if o == nil {
		return []int64{}
	}
	return o.Sizes
}

type Pagination struct {
	Cursor string `json:"cursor"`
}

func (o *Pagination) GetCursor() string {
	if o == nil {
		return ""
	}
	return o.Cursor
}

type Quota struct {
	// The total amount of wall-clock time allowed to be spent by a project's compute endpoints.
	ActiveTimeSeconds *int64 `json:"active_time_seconds,omitempty"`
	// The total amount of CPU seconds allowed to be spent by a project's compute endpoints.
	ComputeTimeSeconds *int64 `json:"compute_time_seconds,omitempty"`
	// The total amount of data transferred from all project's branches using proxy.
	DataTransferBytes *int64 `json:"data_transfer_bytes,omitempty"`
	// The logical size of every project's branch.
	LogicalSizeBytes *int64 `json:"logical_size_bytes,omitempty"`
	// The total amount of data written to all project's branches.
	WrittenDataBytes *int64 `json:"written_data_bytes,omitempty"`
}

func (o *Quota) GetActiveTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ActiveTimeSeconds
}

func (o *Quota) GetComputeTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSeconds
}

func (o *Quota) GetDataTransferBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.DataTransferBytes
}

func (o *Quota) GetLogicalSizeBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.LogicalSizeBytes
}

func (o *Quota) GetWrittenDataBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytes
}

type Settings struct {
	Quota *Quota `json:"quota,omitempty"`
}

func (o *Settings) GetQuota() *Quota {
	if o == nil {
		return nil
	}
	return o.Quota
}

type Project struct {
	ActiveTimeSeconds *int64 `json:"active_time_seconds,omitempty"`
	// The logical size limit for a branch in MiB.
	BranchLogicalSizeLimit int64 `json:"branch_logical_size_limit"`
	// The logical size limit for a branch in bytes.
	BranchLogicalSizeLimitBytes int64     `json:"branch_logical_size_limit_bytes"`
	ComputeTimeSeconds          *int64    `json:"compute_time_seconds,omitempty"`
	CreatedAt                   string    `json:"created_at"`
	DataStorageBytesHour        *int64    `json:"data_storage_bytes_hour,omitempty"`
	DataTransferBytes           *int64    `json:"data_transfer_bytes,omitempty"`
	ID                          string    `json:"id"`
	Name                        string    `json:"name"`
	OwnerID                     string    `json:"owner_id"`
	PgVersion                   int64     `json:"pg_version"`
	ProxyHost                   string    `json:"proxy_host"`
	QuotaResetAt                *string   `json:"quota_reset_at,omitempty"`
	RegionID                    string    `json:"region_id"`
	Settings                    *Settings `json:"settings,omitempty"`
	StorePasswords              bool      `json:"store_passwords"`
	// The data storage size in bytes.
	SyntheticStorageSize *int64 `json:"synthetic_storage_size,omitempty"`
	UpdatedAt            string `json:"updated_at"`
	WrittenDataBytes     *int64 `json:"written_data_bytes,omitempty"`
}

func (o *Project) GetActiveTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ActiveTimeSeconds
}

func (o *Project) GetBranchLogicalSizeLimit() int64 {
	if o == nil {
		return 0
	}
	return o.BranchLogicalSizeLimit
}

func (o *Project) GetBranchLogicalSizeLimitBytes() int64 {
	if o == nil {
		return 0
	}
	return o.BranchLogicalSizeLimitBytes
}

func (o *Project) GetComputeTimeSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSeconds
}

func (o *Project) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Project) GetDataStorageBytesHour() *int64 {
	if o == nil {
		return nil
	}
	return o.DataStorageBytesHour
}

func (o *Project) GetDataTransferBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.DataTransferBytes
}

func (o *Project) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Project) GetPgVersion() int64 {
	if o == nil {
		return 0
	}
	return o.PgVersion
}

func (o *Project) GetProxyHost() string {
	if o == nil {
		return ""
	}
	return o.ProxyHost
}

func (o *Project) GetQuotaResetAt() *string {
	if o == nil {
		return nil
	}
	return o.QuotaResetAt
}

func (o *Project) GetRegionID() string {
	if o == nil {
		return ""
	}
	return o.RegionID
}

func (o *Project) GetSettings() *Settings {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *Project) GetStorePasswords() bool {
	if o == nil {
		return false
	}
	return o.StorePasswords
}

func (o *Project) GetSyntheticStorageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.SyntheticStorageSize
}

func (o *Project) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Project) GetWrittenDataBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytes
}

// CreateDeploymentFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateDeploymentFramework string

const (
	CreateDeploymentFrameworkBlitzjs        CreateDeploymentFramework = "blitzjs"
	CreateDeploymentFrameworkNextjs         CreateDeploymentFramework = "nextjs"
	CreateDeploymentFrameworkGatsby         CreateDeploymentFramework = "gatsby"
	CreateDeploymentFrameworkRemix          CreateDeploymentFramework = "remix"
	CreateDeploymentFrameworkAstro          CreateDeploymentFramework = "astro"
	CreateDeploymentFrameworkHexo           CreateDeploymentFramework = "hexo"
	CreateDeploymentFrameworkEleventy       CreateDeploymentFramework = "eleventy"
	CreateDeploymentFrameworkDocusaurus2    CreateDeploymentFramework = "docusaurus-2"
	CreateDeploymentFrameworkDocusaurus     CreateDeploymentFramework = "docusaurus"
	CreateDeploymentFrameworkPreact         CreateDeploymentFramework = "preact"
	CreateDeploymentFrameworkSolidstart     CreateDeploymentFramework = "solidstart"
	CreateDeploymentFrameworkDojo           CreateDeploymentFramework = "dojo"
	CreateDeploymentFrameworkEmber          CreateDeploymentFramework = "ember"
	CreateDeploymentFrameworkVue            CreateDeploymentFramework = "vue"
	CreateDeploymentFrameworkScully         CreateDeploymentFramework = "scully"
	CreateDeploymentFrameworkIonicAngular   CreateDeploymentFramework = "ionic-angular"
	CreateDeploymentFrameworkAngular        CreateDeploymentFramework = "angular"
	CreateDeploymentFrameworkPolymer        CreateDeploymentFramework = "polymer"
	CreateDeploymentFrameworkSvelte         CreateDeploymentFramework = "svelte"
	CreateDeploymentFrameworkSveltekit      CreateDeploymentFramework = "sveltekit"
	CreateDeploymentFrameworkSveltekit1     CreateDeploymentFramework = "sveltekit-1"
	CreateDeploymentFrameworkIonicReact     CreateDeploymentFramework = "ionic-react"
	CreateDeploymentFrameworkCreateReactApp CreateDeploymentFramework = "create-react-app"
	CreateDeploymentFrameworkGridsome       CreateDeploymentFramework = "gridsome"
	CreateDeploymentFrameworkUmijs          CreateDeploymentFramework = "umijs"
	CreateDeploymentFrameworkSapper         CreateDeploymentFramework = "sapper"
	CreateDeploymentFrameworkSaber          CreateDeploymentFramework = "saber"
	CreateDeploymentFrameworkStencil        CreateDeploymentFramework = "stencil"
	CreateDeploymentFrameworkNuxtjs         CreateDeploymentFramework = "nuxtjs"
	CreateDeploymentFrameworkRedwoodjs      CreateDeploymentFramework = "redwoodjs"
	CreateDeploymentFrameworkHugo           CreateDeploymentFramework = "hugo"
	CreateDeploymentFrameworkJekyll         CreateDeploymentFramework = "jekyll"
	CreateDeploymentFrameworkBrunch         CreateDeploymentFramework = "brunch"
	CreateDeploymentFrameworkMiddleman      CreateDeploymentFramework = "middleman"
	CreateDeploymentFrameworkZola           CreateDeploymentFramework = "zola"
	CreateDeploymentFrameworkHydrogen       CreateDeploymentFramework = "hydrogen"
	CreateDeploymentFrameworkVite           CreateDeploymentFramework = "vite"
	CreateDeploymentFrameworkVitepress      CreateDeploymentFramework = "vitepress"
	CreateDeploymentFrameworkVuepress       CreateDeploymentFramework = "vuepress"
	CreateDeploymentFrameworkParcel         CreateDeploymentFramework = "parcel"
	CreateDeploymentFrameworkSanity         CreateDeploymentFramework = "sanity"
	CreateDeploymentFrameworkStorybook      CreateDeploymentFramework = "storybook"
)

func (e CreateDeploymentFramework) ToPointer() *CreateDeploymentFramework {
	return &e
}

func (e *CreateDeploymentFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateDeploymentFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentFramework: %v", v)
	}
}

// ProjectSettings - Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
type ProjectSettings struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateDeploymentFramework `json:"framework,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory, typically used for monorepos
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
}

func (o *ProjectSettings) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *ProjectSettings) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *ProjectSettings) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *ProjectSettings) GetFramework() *CreateDeploymentFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectSettings) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *ProjectSettings) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *ProjectSettings) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *ProjectSettings) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *ProjectSettings) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *ProjectSettings) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

type Projects struct {
	ComputeTimeSeconds            int64   `json:"compute_time_seconds"`
	ComputeTimeSecondsUpdatedAt   *string `json:"compute_time_seconds_updated_at,omitempty"`
	DataStorageBytesHour          int64   `json:"data_storage_bytes_hour"`
	DataStorageBytesHourUpdatedAt *string `json:"data_storage_bytes_hour_updated_at,omitempty"`
	DataTransferBytes             int64   `json:"data_transfer_bytes"`
	DataTransferBytesUpdatedAt    *string `json:"data_transfer_bytes_updated_at,omitempty"`
	ID                            string  `json:"id"`
	SyntheticStorageSize          int64   `json:"synthetic_storage_size"`
	SyntheticStorageSizeUpdatedAt *string `json:"synthetic_storage_size_updated_at,omitempty"`
	WrittenDataBytes              int64   `json:"written_data_bytes"`
	WrittenDataBytesUpdatedAt     *string `json:"written_data_bytes_updated_at,omitempty"`
}

func (o *Projects) GetComputeTimeSeconds() int64 {
	if o == nil {
		return 0
	}
	return o.ComputeTimeSeconds
}

func (o *Projects) GetComputeTimeSecondsUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.ComputeTimeSecondsUpdatedAt
}

func (o *Projects) GetDataStorageBytesHour() int64 {
	if o == nil {
		return 0
	}
	return o.DataStorageBytesHour
}

func (o *Projects) GetDataStorageBytesHourUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DataStorageBytesHourUpdatedAt
}

func (o *Projects) GetDataTransferBytes() int64 {
	if o == nil {
		return 0
	}
	return o.DataTransferBytes
}

func (o *Projects) GetDataTransferBytesUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DataTransferBytesUpdatedAt
}

func (o *Projects) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Projects) GetSyntheticStorageSize() int64 {
	if o == nil {
		return 0
	}
	return o.SyntheticStorageSize
}

func (o *Projects) GetSyntheticStorageSizeUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.SyntheticStorageSizeUpdatedAt
}

func (o *Projects) GetWrittenDataBytes() int64 {
	if o == nil {
		return 0
	}
	return o.WrittenDataBytes
}

func (o *Projects) GetWrittenDataBytesUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.WrittenDataBytesUpdatedAt
}

// CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasTypeHeader CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasTypeCookie CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasTypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRedirects2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirects2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirects2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRedirectsHasType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirects2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRedirectsType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRedirectsType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsTypeHost CreateDeploymentDeploymentsRequestRequestBodyRedirectsType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRedirectsType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRedirectsType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRedirectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRedirectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRedirectsType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRedirects1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRedirectsType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirects1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRedirectsType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRedirectsType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirects1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsHasType string

const (
	CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects1 CreateDeploymentDeploymentsHasType = "createDeployment_deployments_request_requestBody_redirects_1"
	CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects2 CreateDeploymentDeploymentsHasType = "createDeployment_deployments_request_requestBody_redirects_2"
)

type CreateDeploymentDeploymentsHas struct {
	CreateDeploymentDeploymentsRequestRequestBodyRedirects1 *CreateDeploymentDeploymentsRequestRequestBodyRedirects1
	CreateDeploymentDeploymentsRequestRequestBodyRedirects2 *CreateDeploymentDeploymentsRequestRequestBodyRedirects2

	Type CreateDeploymentDeploymentsHasType
}

func CreateCreateDeploymentDeploymentsHasCreateDeploymentDeploymentsRequestRequestBodyRedirects1(createDeploymentDeploymentsRequestRequestBodyRedirects1 CreateDeploymentDeploymentsRequestRequestBodyRedirects1) CreateDeploymentDeploymentsHas {
	typ := CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects1

	return CreateDeploymentDeploymentsHas{
		CreateDeploymentDeploymentsRequestRequestBodyRedirects1: &createDeploymentDeploymentsRequestRequestBodyRedirects1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsHasCreateDeploymentDeploymentsRequestRequestBodyRedirects2(createDeploymentDeploymentsRequestRequestBodyRedirects2 CreateDeploymentDeploymentsRequestRequestBodyRedirects2) CreateDeploymentDeploymentsHas {
	typ := CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects2

	return CreateDeploymentDeploymentsHas{
		CreateDeploymentDeploymentsRequestRequestBodyRedirects2: &createDeploymentDeploymentsRequestRequestBodyRedirects2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsHas) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBodyRedirects1 := CreateDeploymentDeploymentsRequestRequestBodyRedirects1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRedirects1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRedirects1 = &createDeploymentDeploymentsRequestRequestBodyRedirects1
		u.Type = CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBodyRedirects2 := CreateDeploymentDeploymentsRequestRequestBodyRedirects2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRedirects2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRedirects2 = &createDeploymentDeploymentsRequestRequestBodyRedirects2
		u.Type = CreateDeploymentDeploymentsHasTypeCreateDeploymentDeploymentsRequestRequestBodyRedirects2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBodyRedirects1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRedirects1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBodyRedirects2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRedirects2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2TypeHeader CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2TypeCookie CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2TypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingTypeHost CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsMissingType string

const (
	CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 CreateDeploymentDeploymentsMissingType = "createDeployment_deployments_request_requestBody_redirects_missing_1"
	CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 CreateDeploymentDeploymentsMissingType = "createDeployment_deployments_request_requestBody_redirects_missing_2"
)

type CreateDeploymentDeploymentsMissing struct {
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1
	CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 *CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2

	Type CreateDeploymentDeploymentsMissingType
}

func CreateCreateDeploymentDeploymentsMissingCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1(createDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1) CreateDeploymentDeploymentsMissing {
	typ := CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1

	return CreateDeploymentDeploymentsMissing{
		CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1: &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsMissingCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2(createDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2) CreateDeploymentDeploymentsMissing {
	typ := CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2

	return CreateDeploymentDeploymentsMissing{
		CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2: &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsMissing) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 := CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 = &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing1
		u.Type = CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 := CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 = &createDeploymentDeploymentsRequestRequestBodyRedirectsMissing2
		u.Type = CreateDeploymentDeploymentsMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRedirectsMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Redirects struct {
	// A location destination defined as an absolute pathname or external URL.
	Destination string `json:"destination"`
	// An array of requirements that are needed to match
	Has []CreateDeploymentDeploymentsHas `json:"has,omitempty"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentDeploymentsMissing `json:"missing,omitempty"`
	// A boolean to toggle between permanent and temporary redirect. When `true`, the status code is `308`. When `false` the status code is `307`.
	Permanent *bool `json:"permanent,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring).
	Source string `json:"source"`
}

func (o *Redirects) GetDestination() string {
	if o == nil {
		return ""
	}
	return o.Destination
}

func (o *Redirects) GetHas() []CreateDeploymentDeploymentsHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *Redirects) GetMissing() []CreateDeploymentDeploymentsMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *Redirects) GetPermanent() *bool {
	if o == nil {
		return nil
	}
	return o.Permanent
}

func (o *Redirects) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

// CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRewritesHasTypeHeader CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRewritesHasTypeCookie CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRewritesHasTypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRewrites2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewrites2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewrites2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRewritesHasType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewrites2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRewritesType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRewritesType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRewritesTypeHost CreateDeploymentDeploymentsRequestRequestBodyRewritesType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRewritesType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRewritesType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRewritesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRewritesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRewritesType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRewrites1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRewritesType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewrites1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRewritesType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRewritesType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewrites1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsRequestHasType string

const (
	CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites1 CreateDeploymentDeploymentsRequestHasType = "createDeployment_deployments_request_requestBody_rewrites_1"
	CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites2 CreateDeploymentDeploymentsRequestHasType = "createDeployment_deployments_request_requestBody_rewrites_2"
)

type CreateDeploymentDeploymentsRequestHas struct {
	CreateDeploymentDeploymentsRequestRequestBodyRewrites1 *CreateDeploymentDeploymentsRequestRequestBodyRewrites1
	CreateDeploymentDeploymentsRequestRequestBodyRewrites2 *CreateDeploymentDeploymentsRequestRequestBodyRewrites2

	Type CreateDeploymentDeploymentsRequestHasType
}

func CreateCreateDeploymentDeploymentsRequestHasCreateDeploymentDeploymentsRequestRequestBodyRewrites1(createDeploymentDeploymentsRequestRequestBodyRewrites1 CreateDeploymentDeploymentsRequestRequestBodyRewrites1) CreateDeploymentDeploymentsRequestHas {
	typ := CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites1

	return CreateDeploymentDeploymentsRequestHas{
		CreateDeploymentDeploymentsRequestRequestBodyRewrites1: &createDeploymentDeploymentsRequestRequestBodyRewrites1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsRequestHasCreateDeploymentDeploymentsRequestRequestBodyRewrites2(createDeploymentDeploymentsRequestRequestBodyRewrites2 CreateDeploymentDeploymentsRequestRequestBodyRewrites2) CreateDeploymentDeploymentsRequestHas {
	typ := CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites2

	return CreateDeploymentDeploymentsRequestHas{
		CreateDeploymentDeploymentsRequestRequestBodyRewrites2: &createDeploymentDeploymentsRequestRequestBodyRewrites2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsRequestHas) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBodyRewrites1 := CreateDeploymentDeploymentsRequestRequestBodyRewrites1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRewrites1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRewrites1 = &createDeploymentDeploymentsRequestRequestBodyRewrites1
		u.Type = CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBodyRewrites2 := CreateDeploymentDeploymentsRequestRequestBodyRewrites2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRewrites2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRewrites2 = &createDeploymentDeploymentsRequestRequestBodyRewrites2
		u.Type = CreateDeploymentDeploymentsRequestHasTypeCreateDeploymentDeploymentsRequestRequestBodyRewrites2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsRequestHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBodyRewrites1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRewrites1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBodyRewrites2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRewrites2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2TypeHeader CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2TypeCookie CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2TypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingTypeHost CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRewritesMissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsRequestMissingType string

const (
	CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1 CreateDeploymentDeploymentsRequestMissingType = "createDeployment_deployments_request_requestBody_rewrites_missing_1"
	CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2 CreateDeploymentDeploymentsRequestMissingType = "createDeployment_deployments_request_requestBody_rewrites_missing_2"
)

type CreateDeploymentDeploymentsRequestMissing struct {
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1 *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1
	CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2 *CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2

	Type CreateDeploymentDeploymentsRequestMissingType
}

func CreateCreateDeploymentDeploymentsRequestMissingCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1(createDeploymentDeploymentsRequestRequestBodyRewritesMissing1 CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1) CreateDeploymentDeploymentsRequestMissing {
	typ := CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1

	return CreateDeploymentDeploymentsRequestMissing{
		CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1: &createDeploymentDeploymentsRequestRequestBodyRewritesMissing1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsRequestMissingCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2(createDeploymentDeploymentsRequestRequestBodyRewritesMissing2 CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2) CreateDeploymentDeploymentsRequestMissing {
	typ := CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2

	return CreateDeploymentDeploymentsRequestMissing{
		CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2: &createDeploymentDeploymentsRequestRequestBodyRewritesMissing2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsRequestMissing) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequestRequestBodyRewritesMissing1 := CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRewritesMissing1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1 = &createDeploymentDeploymentsRequestRequestBodyRewritesMissing1
		u.Type = CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1
		return nil
	}

	createDeploymentDeploymentsRequestRequestBodyRewritesMissing2 := CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequestRequestBodyRewritesMissing2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2 = &createDeploymentDeploymentsRequestRequestBodyRewritesMissing2
		u.Type = CreateDeploymentDeploymentsRequestMissingTypeCreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsRequestMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequestRequestBodyRewritesMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Rewrites struct {
	// An absolute pathname to an existing resource or an external URL.
	Destination string `json:"destination"`
	// An array of requirements that are needed to match
	Has []CreateDeploymentDeploymentsRequestHas `json:"has,omitempty"`
	// An array of requirements that are needed to match
	Missing []CreateDeploymentDeploymentsRequestMissing `json:"missing,omitempty"`
	// A pattern that matches each incoming pathname (excluding querystring).
	Source string `json:"source"`
}

func (o *Rewrites) GetDestination() string {
	if o == nil {
		return ""
	}
	return o.Destination
}

func (o *Rewrites) GetHas() []CreateDeploymentDeploymentsRequestHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *Rewrites) GetMissing() []CreateDeploymentDeploymentsRequestMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *Rewrites) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type Role struct {
	BranchID  string  `json:"branch_id"`
	CreatedAt string  `json:"created_at"`
	Name      string  `json:"name"`
	Password  *string `json:"password,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
	UpdatedAt string  `json:"updated_at"`
}

func (o *Role) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Role) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Role) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Role) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *Role) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *Role) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type Roles struct {
	BranchID  string  `json:"branch_id"`
	CreatedAt string  `json:"created_at"`
	Name      string  `json:"name"`
	Password  *string `json:"password,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
	UpdatedAt string  `json:"updated_at"`
}

func (o *Roles) GetBranchID() string {
	if o == nil {
		return ""
	}
	return o.BranchID
}

func (o *Roles) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Roles) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Roles) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *Roles) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *Roles) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type Handle string

const (
	HandleError      Handle = "error"
	HandleFilesystem Handle = "filesystem"
	HandleHit        Handle = "hit"
	HandleMiss       Handle = "miss"
	HandleResource   Handle = "resource"
	HandleRewrite    Handle = "rewrite"
)

func (e Handle) ToPointer() *Handle {
	return &e
}

func (e *Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "resource":
		fallthrough
	case "rewrite":
		*e = Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Handle: %v", v)
	}
}

type CreateDeployment2 struct {
	Handle Handle `json:"handle"`
}

func (o *CreateDeployment2) GetHandle() Handle {
	if o == nil {
		return Handle("")
	}
	return o.Handle
}

// CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1TypeHeader CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1TypeCookie CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1TypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type: %v", v)
	}
}

type CreateDeploymentDeployments2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeployments2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeployments2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRoutes1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeployments2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRoutesType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRoutesType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRoutesTypeHost CreateDeploymentDeploymentsRequestRequestBodyRoutesType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRoutesType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRoutesType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRoutesType: %v", v)
	}
}

type CreateDeploymentDeployments1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRoutesType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeployments1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRoutesType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRoutesType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeployments1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type HasType string

const (
	HasTypeCreateDeploymentDeployments1 HasType = "createDeployment_deployments_1"
	HasTypeCreateDeploymentDeployments2 HasType = "createDeployment_deployments_2"
)

type Has struct {
	CreateDeploymentDeployments1 *CreateDeploymentDeployments1
	CreateDeploymentDeployments2 *CreateDeploymentDeployments2

	Type HasType
}

func CreateHasCreateDeploymentDeployments1(createDeploymentDeployments1 CreateDeploymentDeployments1) Has {
	typ := HasTypeCreateDeploymentDeployments1

	return Has{
		CreateDeploymentDeployments1: &createDeploymentDeployments1,
		Type:                         typ,
	}
}

func CreateHasCreateDeploymentDeployments2(createDeploymentDeployments2 CreateDeploymentDeployments2) Has {
	typ := HasTypeCreateDeploymentDeployments2

	return Has{
		CreateDeploymentDeployments2: &createDeploymentDeployments2,
		Type:                         typ,
	}
}

func (u *Has) UnmarshalJSON(data []byte) error {

	createDeploymentDeployments1 := CreateDeploymentDeployments1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments1, "", true, true); err == nil {
		u.CreateDeploymentDeployments1 = &createDeploymentDeployments1
		u.Type = HasTypeCreateDeploymentDeployments1
		return nil
	}

	createDeploymentDeployments2 := CreateDeploymentDeployments2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments2, "", true, true); err == nil {
		u.CreateDeploymentDeployments2 = &createDeploymentDeployments2
		u.Type = HasTypeCreateDeploymentDeployments2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Has) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeployments1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments1, "", true)
	}

	if u.CreateDeploymentDeployments2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Locale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Default  *string           `json:"default,omitempty"`
	Path     *string           `json:"path,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
	Value    *string           `json:"value,omitempty"`
}

func (o *Locale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *Locale) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *Locale) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Locale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Locale) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2TypeHeader CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type = "header"
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2TypeCookie CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type = "cookie"
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2TypeQuery  CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type = "query"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsRequest2 struct {
	// The name of the element contained in the particular type
	Key string `json:"key"`
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value *string `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsRequest2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsRequest2) GetType() CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequest2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType - The type of request element to check
type CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType string

const (
	CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingTypeHost CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType = "host"
)

func (e CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType) ToPointer() *CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType {
	return &e
}

func (e *CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsRequest1 struct {
	// The type of request element to check
	Type CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType `json:"type"`
	// A regular expression used to match the value. Named groups can be used in the destination
	Value string `json:"value"`
}

func (o *CreateDeploymentDeploymentsRequest1) GetType() CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType {
	if o == nil {
		return CreateDeploymentDeploymentsRequestRequestBodyRoutes1MissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsRequest1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MissingType string

const (
	MissingTypeCreateDeploymentDeploymentsRequest1 MissingType = "createDeployment_deployments_request_1"
	MissingTypeCreateDeploymentDeploymentsRequest2 MissingType = "createDeployment_deployments_request_2"
)

type Missing struct {
	CreateDeploymentDeploymentsRequest1 *CreateDeploymentDeploymentsRequest1
	CreateDeploymentDeploymentsRequest2 *CreateDeploymentDeploymentsRequest2

	Type MissingType
}

func CreateMissingCreateDeploymentDeploymentsRequest1(createDeploymentDeploymentsRequest1 CreateDeploymentDeploymentsRequest1) Missing {
	typ := MissingTypeCreateDeploymentDeploymentsRequest1

	return Missing{
		CreateDeploymentDeploymentsRequest1: &createDeploymentDeploymentsRequest1,
		Type:                                typ,
	}
}

func CreateMissingCreateDeploymentDeploymentsRequest2(createDeploymentDeploymentsRequest2 CreateDeploymentDeploymentsRequest2) Missing {
	typ := MissingTypeCreateDeploymentDeploymentsRequest2

	return Missing{
		CreateDeploymentDeploymentsRequest2: &createDeploymentDeploymentsRequest2,
		Type:                                typ,
	}
}

func (u *Missing) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsRequest1 := CreateDeploymentDeploymentsRequest1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequest1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequest1 = &createDeploymentDeploymentsRequest1
		u.Type = MissingTypeCreateDeploymentDeploymentsRequest1
		return nil
	}

	createDeploymentDeploymentsRequest2 := CreateDeploymentDeploymentsRequest2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsRequest2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsRequest2 = &createDeploymentDeploymentsRequest2
		u.Type = MissingTypeCreateDeploymentDeploymentsRequest2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Missing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsRequest1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequest1, "", true)
	}

	if u.CreateDeploymentDeploymentsRequest2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeployment1 struct {
	CaseSensitive *bool   `json:"caseSensitive,omitempty"`
	Check         *bool   `json:"check,omitempty"`
	Continue      *bool   `json:"continue,omitempty"`
	Dest          *string `json:"dest,omitempty"`
	// An array of requirements that are needed to match
	Has              []Has             `json:"has,omitempty"`
	Headers          map[string]string `json:"headers,omitempty"`
	Important        *bool             `json:"important,omitempty"`
	IsInternal       *bool             `json:"isInternal,omitempty"`
	Locale           *Locale           `json:"locale,omitempty"`
	Methods          []string          `json:"methods,omitempty"`
	Middleware       *int64            `json:"middleware,omitempty"`
	MiddlewarePath   *string           `json:"middlewarePath,omitempty"`
	MiddlewareRawSrc []string          `json:"middlewareRawSrc,omitempty"`
	// An array of requirements that are needed to match
	Missing  []Missing `json:"missing,omitempty"`
	Override *bool     `json:"override,omitempty"`
	Src      string    `json:"src"`
	Status   *int64    `json:"status,omitempty"`
	User     *bool     `json:"user,omitempty"`
}

func (o *CreateDeployment1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CreateDeployment1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateDeployment1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CreateDeployment1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeployment1) GetHas() []Has {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeployment1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeployment1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CreateDeployment1) GetIsInternal() *bool {
	if o == nil {
		return nil
	}
	return o.IsInternal
}

func (o *CreateDeployment1) GetLocale() *Locale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateDeployment1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateDeployment1) GetMiddleware() *int64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CreateDeployment1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CreateDeployment1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CreateDeployment1) GetMissing() []Missing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeployment1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CreateDeployment1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CreateDeployment1) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateDeployment1) GetUser() *bool {
	if o == nil {
		return nil
	}
	return o.User
}

type RoutesType string

const (
	RoutesTypeCreateDeployment1 RoutesType = "createDeployment_1"
	RoutesTypeCreateDeployment2 RoutesType = "createDeployment_2"
)

type Routes struct {
	CreateDeployment1 *CreateDeployment1
	CreateDeployment2 *CreateDeployment2

	Type RoutesType
}

func CreateRoutesCreateDeployment1(createDeployment1 CreateDeployment1) Routes {
	typ := RoutesTypeCreateDeployment1

	return Routes{
		CreateDeployment1: &createDeployment1,
		Type:              typ,
	}
}

func CreateRoutesCreateDeployment2(createDeployment2 CreateDeployment2) Routes {
	typ := RoutesTypeCreateDeployment2

	return Routes{
		CreateDeployment2: &createDeployment2,
		Type:              typ,
	}
}

func (u *Routes) UnmarshalJSON(data []byte) error {

	createDeployment2 := CreateDeployment2{}
	if err := utils.UnmarshalJSON(data, &createDeployment2, "", true, true); err == nil {
		u.CreateDeployment2 = &createDeployment2
		u.Type = RoutesTypeCreateDeployment2
		return nil
	}

	createDeployment1 := CreateDeployment1{}
	if err := utils.UnmarshalJSON(data, &createDeployment1, "", true, true); err == nil {
		u.CreateDeployment1 = &createDeployment1
		u.Type = RoutesTypeCreateDeployment1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Routes) MarshalJSON() ([]byte, error) {
	if u.CreateDeployment1 != nil {
		return utils.MarshalJSON(u.CreateDeployment1, "", true)
	}

	if u.CreateDeployment2 != nil {
		return utils.MarshalJSON(u.CreateDeployment2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Target - Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
type Target string

const (
	TargetStaging    Target = "staging"
	TargetProduction Target = "production"
)

func (e Target) ToPointer() *Target {
	return &e
}

func (e *Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target: %v", v)
	}
}

type CreateDeploymentRequestBody struct {
	// Ignored. Can be set to get completions, validations and documentation in some editors.
	DollarSchema *string `json:"$schema,omitempty"`
	// Aliases that will get assigned when the deployment is `READY` and the target is `production`. The client needs to make a `GET` request to its API to ensure the assignment
	Alias  []string `json:"alias,omitempty"`
	Branch Branch   `json:"branch"`
	// An object containing another object with information to be passed to the Build Process
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Build *Build `json:"build,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand *string `json:"buildCommand,omitempty"`
	// A list of build descriptions whose src references valid source files.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Builds []Builds `json:"builds,omitempty"`
	// When set to `true`, all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.
	CleanUrls      *bool            `json:"cleanUrls,omitempty"`
	ConnectionUris []ConnectionUris `json:"connection_uris"`
	// An array of cron jobs that should be created for production Deployments.
	Crons     []Crons     `json:"crons,omitempty"`
	Database  Database    `json:"database"`
	Databases []Databases `json:"databases"`
	// An deployment id for an existing deployment to redeploy
	DeploymentID *string `json:"deploymentId,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string     `json:"devCommand,omitempty"`
	Endpoint   Endpoint    `json:"endpoint"`
	Endpoints  []Endpoints `json:"endpoints"`
	// An object containing the deployment's environment variable names and values. Secrets can be referenced by prefixing the value with `@`
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Env map[string]string `json:"env,omitempty"`
	// A list of objects with the files to be deployed
	Files []Files `json:"files,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *Framework `json:"framework,omitempty"`
	// An object describing custom options for your Serverless Functions. Each key must be glob pattern that matches the paths of the Serverless Functions you would like to customize (like `api/*.js` or `api/test.js`).
	Functions map[string]Functions `json:"functions,omitempty"`
	Git       *Git                 `json:"git,omitempty"`
	// Populates initial git metadata for different git providers.
	GitMetadata *GitMetadata `json:"gitMetadata,omitempty"`
	// Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.
	GitSource *GitSource `json:"gitSource,omitempty"`
	// A list of header definitions.
	Headers       []Headers `json:"headers,omitempty"`
	IgnoreCommand *string   `json:"ignoreCommand,omitempty"`
	Images        *Images   `json:"images,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment
	Meta map[string]string `json:"meta,omitempty"`
	// The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// A string with the project name used in the deployment URL
	Name string `json:"name"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string    `json:"outputDirectory,omitempty"`
	Pagination      Pagination `json:"pagination"`
	Password        string     `json:"password"`
	Project         Project    `json:"project"`
	// Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments
	ProjectSettings *ProjectSettings `json:"projectSettings,omitempty"`
	Projects        []Projects       `json:"projects"`
	// Whether a deployment's source and logs are available publicly
	Public *bool `json:"public,omitempty"`
	// A list of redirect definitions.
	Redirects []Redirects `json:"redirects,omitempty"`
	// An array of the regions the deployment's Serverless Functions should be deployed to
	Regions []string `json:"regions,omitempty"`
	// A list of rewrite definitions.
	Rewrites []Rewrites `json:"rewrites,omitempty"`
	Role     Role       `json:"role"`
	Roles    []Roles    `json:"roles"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	Routes []Routes `json:"routes,omitempty"`
	// Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>-<team>.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`
	Target *Target `json:"target,omitempty"`
	// When `false`, visiting a path that ends with a forward slash will respond with a `308` status code and redirect to the path without the trailing slash.
	TrailingSlash *bool `json:"trailingSlash,omitempty"`
	// When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.
	WithLatestCommit *bool `json:"withLatestCommit,omitempty"`
}

func (o *CreateDeploymentRequestBody) GetDollarSchema() *string {
	if o == nil {
		return nil
	}
	return o.DollarSchema
}

func (o *CreateDeploymentRequestBody) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateDeploymentRequestBody) GetBranch() Branch {
	if o == nil {
		return Branch{}
	}
	return o.Branch
}

func (o *CreateDeploymentRequestBody) GetBuild() *Build {
	if o == nil {
		return nil
	}
	return o.Build
}

func (o *CreateDeploymentRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateDeploymentRequestBody) GetBuilds() []Builds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateDeploymentRequestBody) GetCleanUrls() *bool {
	if o == nil {
		return nil
	}
	return o.CleanUrls
}

func (o *CreateDeploymentRequestBody) GetConnectionUris() []ConnectionUris {
	if o == nil {
		return []ConnectionUris{}
	}
	return o.ConnectionUris
}

func (o *CreateDeploymentRequestBody) GetCrons() []Crons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateDeploymentRequestBody) GetDatabase() Database {
	if o == nil {
		return Database{}
	}
	return o.Database
}

func (o *CreateDeploymentRequestBody) GetDatabases() []Databases {
	if o == nil {
		return []Databases{}
	}
	return o.Databases
}

func (o *CreateDeploymentRequestBody) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateDeploymentRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateDeploymentRequestBody) GetEndpoint() Endpoint {
	if o == nil {
		return Endpoint{}
	}
	return o.Endpoint
}

func (o *CreateDeploymentRequestBody) GetEndpoints() []Endpoints {
	if o == nil {
		return []Endpoints{}
	}
	return o.Endpoints
}

func (o *CreateDeploymentRequestBody) GetEnv() map[string]string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateDeploymentRequestBody) GetFiles() []Files {
	if o == nil {
		return nil
	}
	return o.Files
}

func (o *CreateDeploymentRequestBody) GetFramework() *Framework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateDeploymentRequestBody) GetFunctions() map[string]Functions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateDeploymentRequestBody) GetGit() *Git {
	if o == nil {
		return nil
	}
	return o.Git
}

func (o *CreateDeploymentRequestBody) GetGitMetadata() *GitMetadata {
	if o == nil {
		return nil
	}
	return o.GitMetadata
}

func (o *CreateDeploymentRequestBody) GetGitSource() *GitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeploymentRequestBody) GetHeaders() []Headers {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeploymentRequestBody) GetIgnoreCommand() *string {
	if o == nil {
		return nil
	}
	return o.IgnoreCommand
}

func (o *CreateDeploymentRequestBody) GetImages() *Images {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *CreateDeploymentRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateDeploymentRequestBody) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateDeploymentRequestBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeploymentRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateDeploymentRequestBody) GetPagination() Pagination {
	if o == nil {
		return Pagination{}
	}
	return o.Pagination
}

func (o *CreateDeploymentRequestBody) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *CreateDeploymentRequestBody) GetProject() Project {
	if o == nil {
		return Project{}
	}
	return o.Project
}

func (o *CreateDeploymentRequestBody) GetProjectSettings() *ProjectSettings {
	if o == nil {
		return nil
	}
	return o.ProjectSettings
}

func (o *CreateDeploymentRequestBody) GetProjects() []Projects {
	if o == nil {
		return []Projects{}
	}
	return o.Projects
}

func (o *CreateDeploymentRequestBody) GetPublic() *bool {
	if o == nil {
		return nil
	}
	return o.Public
}

func (o *CreateDeploymentRequestBody) GetRedirects() []Redirects {
	if o == nil {
		return nil
	}
	return o.Redirects
}

func (o *CreateDeploymentRequestBody) GetRegions() []string {
	if o == nil {
		return nil
	}
	return o.Regions
}

func (o *CreateDeploymentRequestBody) GetRewrites() []Rewrites {
	if o == nil {
		return nil
	}
	return o.Rewrites
}

func (o *CreateDeploymentRequestBody) GetRole() Role {
	if o == nil {
		return Role{}
	}
	return o.Role
}

func (o *CreateDeploymentRequestBody) GetRoles() []Roles {
	if o == nil {
		return []Roles{}
	}
	return o.Roles
}

func (o *CreateDeploymentRequestBody) GetRoutes() []Routes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CreateDeploymentRequestBody) GetTarget() *Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeploymentRequestBody) GetTrailingSlash() *bool {
	if o == nil {
		return nil
	}
	return o.TrailingSlash
}

func (o *CreateDeploymentRequestBody) GetWithLatestCommit() *bool {
	if o == nil {
		return nil
	}
	return o.WithLatestCommit
}

type CreateDeploymentAliasAssignedAtType string

const (
	CreateDeploymentAliasAssignedAtTypeInteger CreateDeploymentAliasAssignedAtType = "integer"
	CreateDeploymentAliasAssignedAtTypeBoolean CreateDeploymentAliasAssignedAtType = "boolean"
)

type CreateDeploymentAliasAssignedAt struct {
	Integer *int64
	Boolean *bool

	Type CreateDeploymentAliasAssignedAtType
}

func CreateCreateDeploymentAliasAssignedAtInteger(integer int64) CreateDeploymentAliasAssignedAt {
	typ := CreateDeploymentAliasAssignedAtTypeInteger

	return CreateDeploymentAliasAssignedAt{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateDeploymentAliasAssignedAtBoolean(boolean bool) CreateDeploymentAliasAssignedAt {
	typ := CreateDeploymentAliasAssignedAtTypeBoolean

	return CreateDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CreateDeploymentAliasAssignedAtTypeInteger
		return nil
	}

	boolean := false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type CreateDeploymentAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateDeploymentAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeploymentAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeploymentAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *CreateDeploymentAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateDeploymentAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateDeploymentAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateDeploymentAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateDeploymentBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *CreateDeploymentBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CreateDeploymentBuilds struct {
}

type CreateDeploymentChecksConclusion string

const (
	CreateDeploymentChecksConclusionSucceeded CreateDeploymentChecksConclusion = "succeeded"
	CreateDeploymentChecksConclusionFailed    CreateDeploymentChecksConclusion = "failed"
	CreateDeploymentChecksConclusionSkipped   CreateDeploymentChecksConclusion = "skipped"
	CreateDeploymentChecksConclusionCanceled  CreateDeploymentChecksConclusion = "canceled"
)

func (e CreateDeploymentChecksConclusion) ToPointer() *CreateDeploymentChecksConclusion {
	return &e
}

func (e *CreateDeploymentChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateDeploymentChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentChecksConclusion: %v", v)
	}
}

type CreateDeploymentChecksState string

const (
	CreateDeploymentChecksStateRegistered CreateDeploymentChecksState = "registered"
	CreateDeploymentChecksStateRunning    CreateDeploymentChecksState = "running"
	CreateDeploymentChecksStateCompleted  CreateDeploymentChecksState = "completed"
)

func (e CreateDeploymentChecksState) ToPointer() *CreateDeploymentChecksState {
	return &e
}

func (e *CreateDeploymentChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateDeploymentChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentChecksState: %v", v)
	}
}

// CreateDeploymentCreator - Information about the deployment creator
type CreateDeploymentCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *CreateDeploymentCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateDeploymentCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// CreateDeploymentFunctions - An object used to configure your Serverless Functions
type CreateDeploymentFunctions struct {
	ExcludeFiles *string `json:"excludeFiles,omitempty"`
	IncludeFiles *string `json:"includeFiles,omitempty"`
	MaxDuration  *int64  `json:"maxDuration,omitempty"`
	Memory       *int64  `json:"memory,omitempty"`
	Runtime      *string `json:"runtime,omitempty"`
}

func (o *CreateDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CreateDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CreateDeploymentFunctions) GetMaxDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CreateDeploymentFunctions) GetMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CreateDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type CreateDeploymentDeploymentsResponseOwnerType string

const (
	CreateDeploymentDeploymentsResponseOwnerTypeTeam CreateDeploymentDeploymentsResponseOwnerType = "team"
	CreateDeploymentDeploymentsResponseOwnerTypeUser CreateDeploymentDeploymentsResponseOwnerType = "user"
)

func (e CreateDeploymentDeploymentsResponseOwnerType) ToPointer() *CreateDeploymentDeploymentsResponseOwnerType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeploymentDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponseOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONTypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONType = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateDeployment3 struct {
	DefaultBranch string                                                    `json:"defaultBranch"`
	Name          string                                                    `json:"name"`
	Owner         string                                                    `json:"owner"`
	OwnerType     CreateDeploymentDeploymentsResponseOwnerType              `json:"ownerType"`
	Path          string                                                    `json:"path"`
	Private       bool                                                      `json:"private"`
	RepoUUID      string                                                    `json:"repoUuid"`
	Slug          string                                                    `json:"slug"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONType `json:"type"`
	WorkspaceUUID string                                                    `json:"workspaceUuid"`
}

func (o *CreateDeployment3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeployment3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeployment3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment3) GetOwnerType() CreateDeploymentDeploymentsResponseOwnerType {
	if o == nil {
		return CreateDeploymentDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeployment3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeployment3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeployment3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment3) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateDeployment3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeploymentDeploymentsOwnerType string

const (
	CreateDeploymentDeploymentsOwnerTypeTeam CreateDeploymentDeploymentsOwnerType = "team"
	CreateDeploymentDeploymentsOwnerTypeUser CreateDeploymentDeploymentsOwnerType = "user"
)

func (e CreateDeploymentDeploymentsOwnerType) ToPointer() *CreateDeploymentDeploymentsOwnerType {
	return &e
}

func (e *CreateDeploymentDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeploymentDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200Type string

const (
	CreateDeploymentDeploymentsResponse200TypeGithub CreateDeploymentDeploymentsResponse200Type = "github"
)

func (e CreateDeploymentDeploymentsResponse200Type) ToPointer() *CreateDeploymentDeploymentsResponse200Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200Type: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse2 struct {
	DefaultBranch string                                     `json:"defaultBranch"`
	Name          string                                     `json:"name"`
	Org           string                                     `json:"org"`
	OwnerType     CreateDeploymentDeploymentsOwnerType       `json:"ownerType"`
	Path          string                                     `json:"path"`
	Private       bool                                       `json:"private"`
	Repo          string                                     `json:"repo"`
	RepoID        int64                                      `json:"repoId"`
	RepoOwnerID   string                                     `json:"repoOwnerId"`
	Type          CreateDeploymentDeploymentsResponse200Type `json:"type"`
}

func (o *CreateDeploymentDeploymentsResponse2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeploymentDeploymentsResponse2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentDeploymentsResponse2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeploymentDeploymentsResponse2) GetOwnerType() CreateDeploymentDeploymentsOwnerType {
	if o == nil {
		return CreateDeploymentDeploymentsOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeploymentDeploymentsResponse2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeploymentDeploymentsResponse2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeploymentDeploymentsResponse2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeploymentDeploymentsResponse2) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CreateDeploymentDeploymentsResponse2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *CreateDeploymentDeploymentsResponse2) GetType() CreateDeploymentDeploymentsResponse200Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200Type("")
	}
	return o.Type
}

type CreateDeploymentOwnerType string

const (
	CreateDeploymentOwnerTypeTeam CreateDeploymentOwnerType = "team"
	CreateDeploymentOwnerTypeUser CreateDeploymentOwnerType = "user"
)

func (e CreateDeploymentOwnerType) ToPointer() *CreateDeploymentOwnerType {
	return &e
}

func (e *CreateDeploymentOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = CreateDeploymentOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentOwnerType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoTypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse1 struct {
	DefaultBranch string                                                                       `json:"defaultBranch"`
	Name          string                                                                       `json:"name"`
	Namespace     string                                                                       `json:"namespace"`
	OwnerType     CreateDeploymentOwnerType                                                    `json:"ownerType"`
	Path          string                                                                       `json:"path"`
	Private       bool                                                                         `json:"private"`
	ProjectID     int64                                                                        `json:"projectId"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType `json:"type"`
	URL           string                                                                       `json:"url"`
}

func (o *CreateDeploymentDeploymentsResponse1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CreateDeploymentDeploymentsResponse1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentDeploymentsResponse1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CreateDeploymentDeploymentsResponse1) GetOwnerType() CreateDeploymentOwnerType {
	if o == nil {
		return CreateDeploymentOwnerType("")
	}
	return o.OwnerType
}

func (o *CreateDeploymentDeploymentsResponse1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateDeploymentDeploymentsResponse1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateDeploymentDeploymentsResponse1) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateDeploymentDeploymentsResponse1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitRepoType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateDeploymentGitRepoType string

const (
	CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse1 CreateDeploymentGitRepoType = "createDeployment_deployments_response_1"
	CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse2 CreateDeploymentGitRepoType = "createDeployment_deployments_response_2"
	CreateDeploymentGitRepoTypeCreateDeployment3                    CreateDeploymentGitRepoType = "createDeployment_3"
)

type CreateDeploymentGitRepo struct {
	CreateDeploymentDeploymentsResponse1 *CreateDeploymentDeploymentsResponse1
	CreateDeploymentDeploymentsResponse2 *CreateDeploymentDeploymentsResponse2
	CreateDeployment3                    *CreateDeployment3

	Type CreateDeploymentGitRepoType
}

func CreateCreateDeploymentGitRepoCreateDeploymentDeploymentsResponse1(createDeploymentDeploymentsResponse1 CreateDeploymentDeploymentsResponse1) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse1

	return CreateDeploymentGitRepo{
		CreateDeploymentDeploymentsResponse1: &createDeploymentDeploymentsResponse1,
		Type:                                 typ,
	}
}

func CreateCreateDeploymentGitRepoCreateDeploymentDeploymentsResponse2(createDeploymentDeploymentsResponse2 CreateDeploymentDeploymentsResponse2) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse2

	return CreateDeploymentGitRepo{
		CreateDeploymentDeploymentsResponse2: &createDeploymentDeploymentsResponse2,
		Type:                                 typ,
	}
}

func CreateCreateDeploymentGitRepoCreateDeployment3(createDeployment3 CreateDeployment3) CreateDeploymentGitRepo {
	typ := CreateDeploymentGitRepoTypeCreateDeployment3

	return CreateDeploymentGitRepo{
		CreateDeployment3: &createDeployment3,
		Type:              typ,
	}
}

func (u *CreateDeploymentGitRepo) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsResponse1 := CreateDeploymentDeploymentsResponse1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse1 = &createDeploymentDeploymentsResponse1
		u.Type = CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse1
		return nil
	}

	createDeploymentDeploymentsResponse2 := CreateDeploymentDeploymentsResponse2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2 = &createDeploymentDeploymentsResponse2
		u.Type = CreateDeploymentGitRepoTypeCreateDeploymentDeploymentsResponse2
		return nil
	}

	createDeployment3 := CreateDeployment3{}
	if err := utils.UnmarshalJSON(data, &createDeployment3, "", true, true); err == nil {
		u.CreateDeployment3 = &createDeployment3
		u.Type = CreateDeploymentGitRepoTypeCreateDeployment3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentGitRepo) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2, "", true)
	}

	if u.CreateDeployment3 != nil {
		return utils.MarshalJSON(u.CreateDeployment3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type: %v", v)
	}
}

type CreateDeployment9 struct {
	Owner         *string                                                                         `json:"owner,omitempty"`
	Ref           string                                                                          `json:"ref"`
	RepoUUID      string                                                                          `json:"repoUuid"`
	Sha           string                                                                          `json:"sha"`
	Slug          *string                                                                         `json:"slug,omitempty"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type `json:"type"`
	WorkspaceUUID string                                                                          `json:"workspaceUuid"`
}

func (o *CreateDeployment9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateDeployment9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateDeployment9) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource9Type("")
	}
	return o.Type
}

func (o *CreateDeployment9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8TypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type: %v", v)
	}
}

type CreateDeployment8 struct {
	ProjectID int64                                                                           `json:"projectId"`
	Ref       string                                                                          `json:"ref"`
	Sha       string                                                                          `json:"sha"`
	Type      CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type `json:"type"`
}

func (o *CreateDeployment8) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateDeployment8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment8) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource8Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7TypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type: %v", v)
	}
}

type CreateDeployment7 struct {
	Org    *string                                                                         `json:"org,omitempty"`
	Ref    string                                                                          `json:"ref"`
	Repo   *string                                                                         `json:"repo,omitempty"`
	RepoID int64                                                                           `json:"repoId"`
	Sha    string                                                                          `json:"sha"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type `json:"type"`
}

func (o *CreateDeployment7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateDeployment7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateDeployment7) GetRepoID() int64 {
	if o == nil {
		return 0
	}
	return o.RepoID
}

func (o *CreateDeployment7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment7) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource7Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6TypeCustom CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type = "custom"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type: %v", v)
	}
}

type CreateDeployment6 struct {
	GitURL string                                                                          `json:"gitUrl"`
	Ref    string                                                                          `json:"ref"`
	Sha    string                                                                          `json:"sha"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type `json:"type"`
}

func (o *CreateDeployment6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *CreateDeployment6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateDeployment6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CreateDeployment6) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource6Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type: %v", v)
	}
}

type CreateDeployment5 struct {
	Owner string                                                                          `json:"owner"`
	PrID  *int64                                                                          `json:"prId,omitempty"`
	Ref   *string                                                                         `json:"ref,omitempty"`
	Sha   *string                                                                         `json:"sha,omitempty"`
	Slug  string                                                                          `json:"slug"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type `json:"type"`
}

func (o *CreateDeployment5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateDeployment5) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateDeployment5) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource5Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4TypeBitbucket CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type = "bitbucket"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type: %v", v)
	}
}

type CreateDeployment4 struct {
	PrID          *int64                                                                          `json:"prId,omitempty"`
	Ref           *string                                                                         `json:"ref,omitempty"`
	RepoUUID      string                                                                          `json:"repoUuid"`
	Sha           *string                                                                         `json:"sha,omitempty"`
	Type          CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type `json:"type"`
	WorkspaceUUID *string                                                                         `json:"workspaceUuid,omitempty"`
}

func (o *CreateDeployment4) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeployment4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeployment4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CreateDeployment4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeployment4) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource4Type("")
	}
	return o.Type
}

func (o *CreateDeployment4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type CreateDeploymentProjectIDType string

const (
	CreateDeploymentProjectIDTypeStr     CreateDeploymentProjectIDType = "str"
	CreateDeploymentProjectIDTypeInteger CreateDeploymentProjectIDType = "integer"
)

type CreateDeploymentProjectID struct {
	Str     *string
	Integer *int64

	Type CreateDeploymentProjectIDType
}

func CreateCreateDeploymentProjectIDStr(str string) CreateDeploymentProjectID {
	typ := CreateDeploymentProjectIDTypeStr

	return CreateDeploymentProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeploymentProjectIDInteger(integer int64) CreateDeploymentProjectID {
	typ := CreateDeploymentProjectIDTypeInteger

	return CreateDeploymentProjectID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CreateDeploymentProjectID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateDeploymentProjectIDTypeStr
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CreateDeploymentProjectIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3TypeGitlab CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type = "gitlab"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type: %v", v)
	}
}

type CreateDeploymentDeployments3 struct {
	PrID      *int64                                                                          `json:"prId,omitempty"`
	ProjectID CreateDeploymentProjectID                                                       `json:"projectId"`
	Ref       *string                                                                         `json:"ref,omitempty"`
	Sha       *string                                                                         `json:"sha,omitempty"`
	Type      CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type `json:"type"`
}

func (o *CreateDeploymentDeployments3) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeployments3) GetProjectID() CreateDeploymentProjectID {
	if o == nil {
		return CreateDeploymentProjectID{}
	}
	return o.ProjectID
}

func (o *CreateDeploymentDeployments3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeployments3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeployments3) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSource3Type("")
	}
	return o.Type
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceTypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse2002 struct {
	Org  string                                                                         `json:"org"`
	PrID *int64                                                                         `json:"prId,omitempty"`
	Ref  *string                                                                        `json:"ref,omitempty"`
	Repo string                                                                         `json:"repo"`
	Sha  *string                                                                        `json:"sha,omitempty"`
	Type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType `json:"type"`
}

func (o *CreateDeploymentDeploymentsResponse2002) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CreateDeploymentDeploymentsResponse2002) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeploymentsResponse2002) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeploymentsResponse2002) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CreateDeploymentDeploymentsResponse2002) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeploymentsResponse2002) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyGitSourceType("")
	}
	return o.Type
}

type CreateDeploymentRepoIDType string

const (
	CreateDeploymentRepoIDTypeStr     CreateDeploymentRepoIDType = "str"
	CreateDeploymentRepoIDTypeInteger CreateDeploymentRepoIDType = "integer"
)

type CreateDeploymentRepoID struct {
	Str     *string
	Integer *int64

	Type CreateDeploymentRepoIDType
}

func CreateCreateDeploymentRepoIDStr(str string) CreateDeploymentRepoID {
	typ := CreateDeploymentRepoIDTypeStr

	return CreateDeploymentRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDeploymentRepoIDInteger(integer int64) CreateDeploymentRepoID {
	typ := CreateDeploymentRepoIDTypeInteger

	return CreateDeploymentRepoID{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *CreateDeploymentRepoID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateDeploymentRepoIDTypeStr
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = CreateDeploymentRepoIDTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyTypeGithub CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType = "github"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse2001 struct {
	PrID   *int64                                                                `json:"prId,omitempty"`
	Ref    *string                                                               `json:"ref,omitempty"`
	RepoID CreateDeploymentRepoID                                                `json:"repoId"`
	Sha    *string                                                               `json:"sha,omitempty"`
	Type   CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *CreateDeploymentDeploymentsResponse2001) GetPrID() *int64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *CreateDeploymentDeploymentsResponse2001) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CreateDeploymentDeploymentsResponse2001) GetRepoID() CreateDeploymentRepoID {
	if o == nil {
		return CreateDeploymentRepoID{}
	}
	return o.RepoID
}

func (o *CreateDeploymentDeploymentsResponse2001) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CreateDeploymentDeploymentsResponse2001) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type CreateDeploymentGitSourceType string

const (
	CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2001 CreateDeploymentGitSourceType = "createDeployment_deployments_response_200_1"
	CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2002 CreateDeploymentGitSourceType = "createDeployment_deployments_response_200_2"
	CreateDeploymentGitSourceTypeCreateDeploymentDeployments3            CreateDeploymentGitSourceType = "createDeployment_deployments_3"
	CreateDeploymentGitSourceTypeCreateDeployment4                       CreateDeploymentGitSourceType = "createDeployment_4"
	CreateDeploymentGitSourceTypeCreateDeployment5                       CreateDeploymentGitSourceType = "createDeployment_5"
	CreateDeploymentGitSourceTypeCreateDeployment6                       CreateDeploymentGitSourceType = "createDeployment_6"
	CreateDeploymentGitSourceTypeCreateDeployment7                       CreateDeploymentGitSourceType = "createDeployment_7"
	CreateDeploymentGitSourceTypeCreateDeployment8                       CreateDeploymentGitSourceType = "createDeployment_8"
	CreateDeploymentGitSourceTypeCreateDeployment9                       CreateDeploymentGitSourceType = "createDeployment_9"
)

type CreateDeploymentGitSource struct {
	CreateDeploymentDeploymentsResponse2001 *CreateDeploymentDeploymentsResponse2001
	CreateDeploymentDeploymentsResponse2002 *CreateDeploymentDeploymentsResponse2002
	CreateDeploymentDeployments3            *CreateDeploymentDeployments3
	CreateDeployment4                       *CreateDeployment4
	CreateDeployment5                       *CreateDeployment5
	CreateDeployment6                       *CreateDeployment6
	CreateDeployment7                       *CreateDeployment7
	CreateDeployment8                       *CreateDeployment8
	CreateDeployment9                       *CreateDeployment9

	Type CreateDeploymentGitSourceType
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeploymentsResponse2001(createDeploymentDeploymentsResponse2001 CreateDeploymentDeploymentsResponse2001) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2001

	return CreateDeploymentGitSource{
		CreateDeploymentDeploymentsResponse2001: &createDeploymentDeploymentsResponse2001,
		Type:                                    typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeploymentsResponse2002(createDeploymentDeploymentsResponse2002 CreateDeploymentDeploymentsResponse2002) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2002

	return CreateDeploymentGitSource{
		CreateDeploymentDeploymentsResponse2002: &createDeploymentDeploymentsResponse2002,
		Type:                                    typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeploymentDeployments3(createDeploymentDeployments3 CreateDeploymentDeployments3) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeploymentDeployments3

	return CreateDeploymentGitSource{
		CreateDeploymentDeployments3: &createDeploymentDeployments3,
		Type:                         typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment4(createDeployment4 CreateDeployment4) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment4

	return CreateDeploymentGitSource{
		CreateDeployment4: &createDeployment4,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment5(createDeployment5 CreateDeployment5) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment5

	return CreateDeploymentGitSource{
		CreateDeployment5: &createDeployment5,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment6(createDeployment6 CreateDeployment6) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment6

	return CreateDeploymentGitSource{
		CreateDeployment6: &createDeployment6,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment7(createDeployment7 CreateDeployment7) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment7

	return CreateDeploymentGitSource{
		CreateDeployment7: &createDeployment7,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment8(createDeployment8 CreateDeployment8) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment8

	return CreateDeploymentGitSource{
		CreateDeployment8: &createDeployment8,
		Type:              typ,
	}
}

func CreateCreateDeploymentGitSourceCreateDeployment9(createDeployment9 CreateDeployment9) CreateDeploymentGitSource {
	typ := CreateDeploymentGitSourceTypeCreateDeployment9

	return CreateDeploymentGitSource{
		CreateDeployment9: &createDeployment9,
		Type:              typ,
	}
}

func (u *CreateDeploymentGitSource) UnmarshalJSON(data []byte) error {

	createDeployment6 := CreateDeployment6{}
	if err := utils.UnmarshalJSON(data, &createDeployment6, "", true, true); err == nil {
		u.CreateDeployment6 = &createDeployment6
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment6
		return nil
	}

	createDeployment8 := CreateDeployment8{}
	if err := utils.UnmarshalJSON(data, &createDeployment8, "", true, true); err == nil {
		u.CreateDeployment8 = &createDeployment8
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment8
		return nil
	}

	createDeploymentDeploymentsResponse2001 := CreateDeploymentDeploymentsResponse2001{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2001, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2001 = &createDeploymentDeploymentsResponse2001
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2001
		return nil
	}

	createDeploymentDeployments3 := CreateDeploymentDeployments3{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeployments3, "", true, true); err == nil {
		u.CreateDeploymentDeployments3 = &createDeploymentDeployments3
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeployments3
		return nil
	}

	createDeploymentDeploymentsResponse2002 := CreateDeploymentDeploymentsResponse2002{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse2002, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse2002 = &createDeploymentDeploymentsResponse2002
		u.Type = CreateDeploymentGitSourceTypeCreateDeploymentDeploymentsResponse2002
		return nil
	}

	createDeployment4 := CreateDeployment4{}
	if err := utils.UnmarshalJSON(data, &createDeployment4, "", true, true); err == nil {
		u.CreateDeployment4 = &createDeployment4
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment4
		return nil
	}

	createDeployment5 := CreateDeployment5{}
	if err := utils.UnmarshalJSON(data, &createDeployment5, "", true, true); err == nil {
		u.CreateDeployment5 = &createDeployment5
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment5
		return nil
	}

	createDeployment7 := CreateDeployment7{}
	if err := utils.UnmarshalJSON(data, &createDeployment7, "", true, true); err == nil {
		u.CreateDeployment7 = &createDeployment7
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment7
		return nil
	}

	createDeployment9 := CreateDeployment9{}
	if err := utils.UnmarshalJSON(data, &createDeployment9, "", true, true); err == nil {
		u.CreateDeployment9 = &createDeployment9
		u.Type = CreateDeploymentGitSourceTypeCreateDeployment9
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentGitSource) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse2001 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2001, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse2002 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse2002, "", true)
	}

	if u.CreateDeploymentDeployments3 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeployments3, "", true)
	}

	if u.CreateDeployment4 != nil {
		return utils.MarshalJSON(u.CreateDeployment4, "", true)
	}

	if u.CreateDeployment5 != nil {
		return utils.MarshalJSON(u.CreateDeployment5, "", true)
	}

	if u.CreateDeployment6 != nil {
		return utils.MarshalJSON(u.CreateDeployment6, "", true)
	}

	if u.CreateDeployment7 != nil {
		return utils.MarshalJSON(u.CreateDeployment7, "", true)
	}

	if u.CreateDeployment8 != nil {
		return utils.MarshalJSON(u.CreateDeployment8, "", true)
	}

	if u.CreateDeployment9 != nil {
		return utils.MarshalJSON(u.CreateDeployment9, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *CreateDeploymentOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *CreateDeploymentOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CreateDeploymentDeploymentsReadyState string

const (
	CreateDeploymentDeploymentsReadyStateBuilding     CreateDeploymentDeploymentsReadyState = "BUILDING"
	CreateDeploymentDeploymentsReadyStateError        CreateDeploymentDeploymentsReadyState = "ERROR"
	CreateDeploymentDeploymentsReadyStateInitializing CreateDeploymentDeploymentsReadyState = "INITIALIZING"
	CreateDeploymentDeploymentsReadyStateReady        CreateDeploymentDeploymentsReadyState = "READY"
)

func (e CreateDeploymentDeploymentsReadyState) ToPointer() *CreateDeploymentDeploymentsReadyState {
	return &e
}

func (e *CreateDeploymentDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = CreateDeploymentDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsReadyState: %v", v)
	}
}

type CreateDeploymentLambdas struct {
	CreatedAt    *int64                                 `json:"createdAt,omitempty"`
	Entrypoint   *string                                `json:"entrypoint,omitempty"`
	ID           string                                 `json:"id"`
	Output       []CreateDeploymentOutput               `json:"output"`
	ReadyState   *CreateDeploymentDeploymentsReadyState `json:"readyState,omitempty"`
	ReadyStateAt *int64                                 `json:"readyStateAt,omitempty"`
}

func (o *CreateDeploymentLambdas) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateDeploymentLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CreateDeploymentLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentLambdas) GetOutput() []CreateDeploymentOutput {
	if o == nil {
		return []CreateDeploymentOutput{}
	}
	return o.Output
}

func (o *CreateDeploymentLambdas) GetReadyState() *CreateDeploymentDeploymentsReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CreateDeploymentLambdas) GetReadyStateAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// CreateDeploymentPlan - The pricing plan the deployment was made under
type CreateDeploymentPlan string

const (
	CreateDeploymentPlanPro        CreateDeploymentPlan = "pro"
	CreateDeploymentPlanEnterprise CreateDeploymentPlan = "enterprise"
	CreateDeploymentPlanHobby      CreateDeploymentPlan = "hobby"
	CreateDeploymentPlanOss        CreateDeploymentPlan = "oss"
)

func (e CreateDeploymentPlan) ToPointer() *CreateDeploymentPlan {
	return &e
}

func (e *CreateDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		fallthrough
	case "oss":
		*e = CreateDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentPlan: %v", v)
	}
}

// CreateDeploymentReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type CreateDeploymentReadyState string

const (
	CreateDeploymentReadyStateQueued       CreateDeploymentReadyState = "QUEUED"
	CreateDeploymentReadyStateBuilding     CreateDeploymentReadyState = "BUILDING"
	CreateDeploymentReadyStateError        CreateDeploymentReadyState = "ERROR"
	CreateDeploymentReadyStateInitializing CreateDeploymentReadyState = "INITIALIZING"
	CreateDeploymentReadyStateReady        CreateDeploymentReadyState = "READY"
	CreateDeploymentReadyStateCanceled     CreateDeploymentReadyState = "CANCELED"
)

func (e CreateDeploymentReadyState) ToPointer() *CreateDeploymentReadyState {
	return &e
}

func (e *CreateDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentReadyState: %v", v)
	}
}

// CreateDeploymentReadySubstate - The substate of the deployment when the state is "READY"
type CreateDeploymentReadySubstate string

const (
	CreateDeploymentReadySubstateStaged   CreateDeploymentReadySubstate = "STAGED"
	CreateDeploymentReadySubstatePromoted CreateDeploymentReadySubstate = "PROMOTED"
)

func (e CreateDeploymentReadySubstate) ToPointer() *CreateDeploymentReadySubstate {
	return &e
}

func (e *CreateDeploymentReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateDeploymentReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentReadySubstate: %v", v)
	}
}

type CreateDeploymentMiddleware int64

const (
	CreateDeploymentMiddlewareZero CreateDeploymentMiddleware = 0
)

func (e CreateDeploymentMiddleware) ToPointer() *CreateDeploymentMiddleware {
	return &e
}

func (e *CreateDeploymentMiddleware) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		*e = CreateDeploymentMiddleware(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentMiddleware: %v", v)
	}
}

// CreateDeploymentDeploymentsResponse3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse3 struct {
	Continue   bool                       `json:"continue"`
	Middleware CreateDeploymentMiddleware `json:"middleware"`
	Src        string                     `json:"src"`
}

func (o *CreateDeploymentDeploymentsResponse3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CreateDeploymentDeploymentsResponse3) GetMiddleware() CreateDeploymentMiddleware {
	if o == nil {
		return CreateDeploymentMiddleware(0)
	}
	return o.Middleware
}

func (o *CreateDeploymentDeploymentsResponse3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

type CreateDeploymentHandle string

const (
	CreateDeploymentHandleError      CreateDeploymentHandle = "error"
	CreateDeploymentHandleFilesystem CreateDeploymentHandle = "filesystem"
	CreateDeploymentHandleHit        CreateDeploymentHandle = "hit"
	CreateDeploymentHandleMiss       CreateDeploymentHandle = "miss"
	CreateDeploymentHandleRewrite    CreateDeploymentHandle = "rewrite"
	CreateDeploymentHandleResource   CreateDeploymentHandle = "resource"
)

func (e CreateDeploymentHandle) ToPointer() *CreateDeploymentHandle {
	return &e
}

func (e *CreateDeploymentHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = CreateDeploymentHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentHandle: %v", v)
	}
}

// CreateDeploymentDeploymentsResponse200ApplicationJSON2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse200ApplicationJSON2 struct {
	Dest   *string                `json:"dest,omitempty"`
	Handle CreateDeploymentHandle `json:"handle"`
	Src    *string                `json:"src,omitempty"`
	Status *int64                 `json:"status,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetHandle() CreateDeploymentHandle {
	if o == nil {
		return CreateDeploymentHandle("")
	}
	return o.Handle
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON2) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeHeader CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "header"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeCookie CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "cookie"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1TypeQuery  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type = "query"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 struct {
	Key   string                                                                       `json:"key"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type `json:"type"`
	Value *string                                                                      `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesTypeHost CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType = "host"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 struct {
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType `json:"type"`
	Value string                                                                      `json:"value"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutesType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponseHasType string

const (
	CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 CreateDeploymentDeploymentsResponseHasType = "createDeployment_deployments_response_200_ApplicationJSON_responseBody_1"
	CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 CreateDeploymentDeploymentsResponseHasType = "createDeployment_deployments_response_200_ApplicationJSON_responseBody_2"
)

type CreateDeploymentDeploymentsResponseHas struct {
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2

	Type CreateDeploymentDeploymentsResponseHasType
}

func CreateCreateDeploymentDeploymentsResponseHasCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1(createDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) CreateDeploymentDeploymentsResponseHas {
	typ := CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1

	return CreateDeploymentDeploymentsResponseHas{
		CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1: &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsResponseHasCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2(createDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) CreateDeploymentDeploymentsResponseHas {
	typ := CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2

	return CreateDeploymentDeploymentsResponseHas{
		CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2: &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsResponseHas) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 := CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 = &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
		u.Type = CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
		return nil
	}

	createDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 := CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 = &createDeploymentDeploymentsResponse200ApplicationJSONResponseBody2
		u.Type = CreateDeploymentDeploymentsResponseHasTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsResponseHas) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDeploymentLocale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

func (o *CreateDeploymentLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *CreateDeploymentLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeHeader CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "header"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeCookie CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "cookie"
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2TypeQuery  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type = "query"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 struct {
	Key   string                                                                               `json:"key"`
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type `json:"type"`
	Value *string                                                                              `json:"value,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1Missing2Type("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType string

const (
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingTypeHost CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType = "host"
)

func (e CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType) ToPointer() *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType: %v", v)
	}
}

type CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 struct {
	Type  CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType `json:"type"`
	Value string                                                                              `json:"value"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1) GetType() CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType {
	if o == nil {
		return CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1MissingType("")
	}
	return o.Type
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateDeploymentDeploymentsResponseMissingType string

const (
	CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 CreateDeploymentDeploymentsResponseMissingType = "createDeployment_deployments_response_200_ApplicationJSON_responseBody_routes_1"
	CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 CreateDeploymentDeploymentsResponseMissingType = "createDeployment_deployments_response_200_ApplicationJSON_responseBody_routes_2"
)

type CreateDeploymentDeploymentsResponseMissing struct {
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1
	CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 *CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2

	Type CreateDeploymentDeploymentsResponseMissingType
}

func CreateCreateDeploymentDeploymentsResponseMissingCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1(createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1) CreateDeploymentDeploymentsResponseMissing {
	typ := CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1

	return CreateDeploymentDeploymentsResponseMissing{
		CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1: &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1,
		Type: typ,
	}
}

func CreateCreateDeploymentDeploymentsResponseMissingCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2(createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2) CreateDeploymentDeploymentsResponseMissing {
	typ := CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2

	return CreateDeploymentDeploymentsResponseMissing{
		CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2: &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2,
		Type: typ,
	}
}

func (u *CreateDeploymentDeploymentsResponseMissing) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 := CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 = &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1
		u.Type = CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1
		return nil
	}

	createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 := CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 = &createDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2
		u.Type = CreateDeploymentDeploymentsResponseMissingTypeCreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentDeploymentsResponseMissing) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSONResponseBodyRoutes2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentDeploymentsResponse200ApplicationJSON1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CreateDeploymentDeploymentsResponse200ApplicationJSON1 struct {
	CaseSensitive *bool                                    `json:"caseSensitive,omitempty"`
	Check         *bool                                    `json:"check,omitempty"`
	Continue      *bool                                    `json:"continue,omitempty"`
	Dest          *string                                  `json:"dest,omitempty"`
	Has           []CreateDeploymentDeploymentsResponseHas `json:"has,omitempty"`
	Headers       map[string]string                        `json:"headers,omitempty"`
	Important     *bool                                    `json:"important,omitempty"`
	Locale        *CreateDeploymentLocale                  `json:"locale,omitempty"`
	Methods       []string                                 `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *int64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string                                     `json:"middlewareRawSrc,omitempty"`
	Missing          []CreateDeploymentDeploymentsResponseMissing `json:"missing,omitempty"`
	Override         *bool                                        `json:"override,omitempty"`
	Src              string                                       `json:"src"`
	Status           *int64                                       `json:"status,omitempty"`
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetHas() []CreateDeploymentDeploymentsResponseHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetLocale() *CreateDeploymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetMiddleware() *int64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetMissing() []CreateDeploymentDeploymentsResponseMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CreateDeploymentDeploymentsResponse200ApplicationJSON1) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CreateDeploymentRoutesType string

const (
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1 CreateDeploymentRoutesType = "createDeployment_deployments_response_200_ApplicationJSON_1"
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2 CreateDeploymentRoutesType = "createDeployment_deployments_response_200_ApplicationJSON_2"
	CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3                   CreateDeploymentRoutesType = "createDeployment_deployments_response_3"
)

type CreateDeploymentRoutes struct {
	CreateDeploymentDeploymentsResponse200ApplicationJSON1 *CreateDeploymentDeploymentsResponse200ApplicationJSON1
	CreateDeploymentDeploymentsResponse200ApplicationJSON2 *CreateDeploymentDeploymentsResponse200ApplicationJSON2
	CreateDeploymentDeploymentsResponse3                   *CreateDeploymentDeploymentsResponse3

	Type CreateDeploymentRoutesType
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse200ApplicationJSON1(createDeploymentDeploymentsResponse200ApplicationJSON1 CreateDeploymentDeploymentsResponse200ApplicationJSON1) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse200ApplicationJSON1: &createDeploymentDeploymentsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse200ApplicationJSON2(createDeploymentDeploymentsResponse200ApplicationJSON2 CreateDeploymentDeploymentsResponse200ApplicationJSON2) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse200ApplicationJSON2: &createDeploymentDeploymentsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func CreateCreateDeploymentRoutesCreateDeploymentDeploymentsResponse3(createDeploymentDeploymentsResponse3 CreateDeploymentDeploymentsResponse3) CreateDeploymentRoutes {
	typ := CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3

	return CreateDeploymentRoutes{
		CreateDeploymentDeploymentsResponse3: &createDeploymentDeploymentsResponse3,
		Type:                                 typ,
	}
}

func (u *CreateDeploymentRoutes) UnmarshalJSON(data []byte) error {

	createDeploymentDeploymentsResponse3 := CreateDeploymentDeploymentsResponse3{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse3, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse3 = &createDeploymentDeploymentsResponse3
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse3
		return nil
	}

	createDeploymentDeploymentsResponse200ApplicationJSON2 := CreateDeploymentDeploymentsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSON2 = &createDeploymentDeploymentsResponse200ApplicationJSON2
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON2
		return nil
	}

	createDeploymentDeploymentsResponse200ApplicationJSON1 := CreateDeploymentDeploymentsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &createDeploymentDeploymentsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.CreateDeploymentDeploymentsResponse200ApplicationJSON1 = &createDeploymentDeploymentsResponse200ApplicationJSON1
		u.Type = CreateDeploymentRoutesTypeCreateDeploymentDeploymentsResponse200ApplicationJSON1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDeploymentRoutes) MarshalJSON() ([]byte, error) {
	if u.CreateDeploymentDeploymentsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSON1, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse200ApplicationJSON2, "", true)
	}

	if u.CreateDeploymentDeploymentsResponse3 != nil {
		return utils.MarshalJSON(u.CreateDeploymentDeploymentsResponse3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateDeploymentSource - Where was the deployment created from
type CreateDeploymentSource string

const (
	CreateDeploymentSourceCli        CreateDeploymentSource = "cli"
	CreateDeploymentSourceGit        CreateDeploymentSource = "git"
	CreateDeploymentSourceImport     CreateDeploymentSource = "import"
	CreateDeploymentSourceImportRepo CreateDeploymentSource = "import/repo"
	CreateDeploymentSourceCloneRepo  CreateDeploymentSource = "clone/repo"
)

func (e CreateDeploymentSource) ToPointer() *CreateDeploymentSource {
	return &e
}

func (e *CreateDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cli":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "clone/repo":
		*e = CreateDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentSource: %v", v)
	}
}

// CreateDeploymentTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type CreateDeploymentTarget string

const (
	CreateDeploymentTargetStaging    CreateDeploymentTarget = "staging"
	CreateDeploymentTargetProduction CreateDeploymentTarget = "production"
)

func (e CreateDeploymentTarget) ToPointer() *CreateDeploymentTarget {
	return &e
}

func (e *CreateDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CreateDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentTarget: %v", v)
	}
}

// CreateDeploymentTeam - The team that owns the deployment if any
type CreateDeploymentTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *CreateDeploymentTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type CreateDeploymentDeploymentsResponseType string

const (
	CreateDeploymentDeploymentsResponseTypeLambdas CreateDeploymentDeploymentsResponseType = "LAMBDAS"
)

func (e CreateDeploymentDeploymentsResponseType) ToPointer() *CreateDeploymentDeploymentsResponseType {
	return &e
}

func (e *CreateDeploymentDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateDeploymentDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentDeploymentsResponseType: %v", v)
	}
}

// CreateDeploymentVersion - The platform version that was used to create the deployment.
type CreateDeploymentVersion int64

const (
	CreateDeploymentVersionTwo CreateDeploymentVersion = 2
)

func (e CreateDeploymentVersion) ToPointer() *CreateDeploymentVersion {
	return &e
}

func (e *CreateDeploymentVersion) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		*e = CreateDeploymentVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentVersion: %v", v)
	}
}

// CreateDeploymentResponseBody - The successfully created deployment
type CreateDeploymentResponseBody struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                             `json:"aliasAssigned"`
	AliasAssignedAt *CreateDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *CreateDeploymentAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                           `json:"aliasFinal,omitempty"`
	AliasWarning            *CreateDeploymentAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                          `json:"automaticAliases,omitempty"`
	BootedAt                int64                             `json:"bootedAt"`
	Build                   CreateDeploymentBuild             `json:"build"`
	BuildErrorAt            *int64                            `json:"buildErrorAt,omitempty"`
	BuildingAt              int64                             `json:"buildingAt"`
	Builds                  []CreateDeploymentBuilds          `json:"builds,omitempty"`
	CanceledAt              *int64                            `json:"canceledAt,omitempty"`
	ChecksConclusion        *CreateDeploymentChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *CreateDeploymentChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt int64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator CreateDeploymentCreator `json:"creator"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]CreateDeploymentFunctions `json:"functions,omitempty"`
	GitRepo   *CreateDeploymentGitRepo             `json:"gitRepo,omitempty"`
	GitSource *CreateDeploymentGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                      `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []CreateDeploymentLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The pricing plan the deployment was made under
	Plan CreateDeploymentPlan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState CreateDeploymentReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *CreateDeploymentReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []CreateDeploymentRoutes `json:"routes"`
	// Where was the deployment created from
	Source *CreateDeploymentSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *CreateDeploymentTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *CreateDeploymentTeam                   `json:"team,omitempty"`
	Type CreateDeploymentDeploymentsResponseType `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version CreateDeploymentVersion `json:"version"`
}

func (o *CreateDeploymentResponseBody) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *CreateDeploymentResponseBody) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CreateDeploymentResponseBody) GetAliasAssignedAt() *CreateDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CreateDeploymentResponseBody) GetAliasError() *CreateDeploymentAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateDeploymentResponseBody) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateDeploymentResponseBody) GetAliasWarning() *CreateDeploymentAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CreateDeploymentResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateDeploymentResponseBody) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateDeploymentResponseBody) GetBootedAt() int64 {
	if o == nil {
		return 0
	}
	return o.BootedAt
}

func (o *CreateDeploymentResponseBody) GetBuild() CreateDeploymentBuild {
	if o == nil {
		return CreateDeploymentBuild{}
	}
	return o.Build
}

func (o *CreateDeploymentResponseBody) GetBuildErrorAt() *int64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CreateDeploymentResponseBody) GetBuildingAt() int64 {
	if o == nil {
		return 0
	}
	return o.BuildingAt
}

func (o *CreateDeploymentResponseBody) GetBuilds() []CreateDeploymentBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateDeploymentResponseBody) GetCanceledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateDeploymentResponseBody) GetChecksConclusion() *CreateDeploymentChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateDeploymentResponseBody) GetChecksState() *CreateDeploymentChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateDeploymentResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateDeploymentResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateDeploymentResponseBody) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateDeploymentResponseBody) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateDeploymentResponseBody) GetCreator() CreateDeploymentCreator {
	if o == nil {
		return CreateDeploymentCreator{}
	}
	return o.Creator
}

func (o *CreateDeploymentResponseBody) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CreateDeploymentResponseBody) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CreateDeploymentResponseBody) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CreateDeploymentResponseBody) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateDeploymentResponseBody) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CreateDeploymentResponseBody) GetFunctions() map[string]CreateDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateDeploymentResponseBody) GetGitRepo() *CreateDeploymentGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CreateDeploymentResponseBody) GetGitSource() *CreateDeploymentGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CreateDeploymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDeploymentResponseBody) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CreateDeploymentResponseBody) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CreateDeploymentResponseBody) GetLambdas() []CreateDeploymentLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CreateDeploymentResponseBody) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CreateDeploymentResponseBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateDeploymentResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDeploymentResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDeploymentResponseBody) GetPlan() CreateDeploymentPlan {
	if o == nil {
		return CreateDeploymentPlan("")
	}
	return o.Plan
}

func (o *CreateDeploymentResponseBody) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateDeploymentResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateDeploymentResponseBody) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CreateDeploymentResponseBody) GetReadyState() CreateDeploymentReadyState {
	if o == nil {
		return CreateDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CreateDeploymentResponseBody) GetReadySubstate() *CreateDeploymentReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateDeploymentResponseBody) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CreateDeploymentResponseBody) GetRoutes() []CreateDeploymentRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CreateDeploymentResponseBody) GetSource() *CreateDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateDeploymentResponseBody) GetTarget() *CreateDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateDeploymentResponseBody) GetTeam() *CreateDeploymentTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateDeploymentResponseBody) GetType() CreateDeploymentDeploymentsResponseType {
	if o == nil {
		return CreateDeploymentDeploymentsResponseType("")
	}
	return o.Type
}

func (o *CreateDeploymentResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateDeploymentResponseBody) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CreateDeploymentResponseBody) GetVersion() CreateDeploymentVersion {
	if o == nil {
		return CreateDeploymentVersion(0)
	}
	return o.Version
}

type CreateDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The successfully created deployment
	Object *CreateDeploymentResponseBody
}

func (o *CreateDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateDeploymentResponse) GetObject() *CreateDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
