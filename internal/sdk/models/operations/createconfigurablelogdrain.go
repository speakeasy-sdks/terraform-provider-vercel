// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateConfigurableLogDrainDeliveryFormat - The delivery log format
type CreateConfigurableLogDrainDeliveryFormat string

const (
	CreateConfigurableLogDrainDeliveryFormatJSON   CreateConfigurableLogDrainDeliveryFormat = "json"
	CreateConfigurableLogDrainDeliveryFormatNdjson CreateConfigurableLogDrainDeliveryFormat = "ndjson"
)

func (e CreateConfigurableLogDrainDeliveryFormat) ToPointer() *CreateConfigurableLogDrainDeliveryFormat {
	return &e
}
func (e *CreateConfigurableLogDrainDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = CreateConfigurableLogDrainDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainDeliveryFormat: %v", v)
	}
}

type CreateConfigurableLogDrainSources string

const (
	CreateConfigurableLogDrainSourcesStatic   CreateConfigurableLogDrainSources = "static"
	CreateConfigurableLogDrainSourcesLambda   CreateConfigurableLogDrainSources = "lambda"
	CreateConfigurableLogDrainSourcesBuild    CreateConfigurableLogDrainSources = "build"
	CreateConfigurableLogDrainSourcesEdge     CreateConfigurableLogDrainSources = "edge"
	CreateConfigurableLogDrainSourcesExternal CreateConfigurableLogDrainSources = "external"
)

func (e CreateConfigurableLogDrainSources) ToPointer() *CreateConfigurableLogDrainSources {
	return &e
}
func (e *CreateConfigurableLogDrainSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		*e = CreateConfigurableLogDrainSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainSources: %v", v)
	}
}

type CreateConfigurableLogDrainEnvironments string

const (
	CreateConfigurableLogDrainEnvironmentsPreview    CreateConfigurableLogDrainEnvironments = "preview"
	CreateConfigurableLogDrainEnvironmentsProduction CreateConfigurableLogDrainEnvironments = "production"
)

func (e CreateConfigurableLogDrainEnvironments) ToPointer() *CreateConfigurableLogDrainEnvironments {
	return &e
}
func (e *CreateConfigurableLogDrainEnvironments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = CreateConfigurableLogDrainEnvironments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainEnvironments: %v", v)
	}
}

type CreateConfigurableLogDrainRequestBody struct {
	// The delivery log format
	DeliveryFormat CreateConfigurableLogDrainDeliveryFormat `json:"deliveryFormat"`
	// The log drain url
	URL string `json:"url"`
	// Headers to be sent together with the request
	Headers      map[string]string                        `json:"headers,omitempty"`
	ProjectIds   []string                                 `json:"projectIds,omitempty"`
	Sources      []CreateConfigurableLogDrainSources      `json:"sources"`
	Environments []CreateConfigurableLogDrainEnvironments `json:"environments,omitempty"`
	// Custom secret of log drain
	Secret *string `json:"secret,omitempty"`
	// The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
	SamplingRate *float64 `json:"samplingRate,omitempty"`
}

func (o *CreateConfigurableLogDrainRequestBody) GetDeliveryFormat() CreateConfigurableLogDrainDeliveryFormat {
	if o == nil {
		return CreateConfigurableLogDrainDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *CreateConfigurableLogDrainRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateConfigurableLogDrainRequestBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateConfigurableLogDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateConfigurableLogDrainRequestBody) GetSources() []CreateConfigurableLogDrainSources {
	if o == nil {
		return []CreateConfigurableLogDrainSources{}
	}
	return o.Sources
}

func (o *CreateConfigurableLogDrainRequestBody) GetEnvironments() []CreateConfigurableLogDrainEnvironments {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateConfigurableLogDrainRequestBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateConfigurableLogDrainRequestBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

type CreateConfigurableLogDrainRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                                `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateConfigurableLogDrainRequestBody `request:"mediaType=application/json"`
}

func (o *CreateConfigurableLogDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateConfigurableLogDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateConfigurableLogDrainRequest) GetRequestBody() *CreateConfigurableLogDrainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateConfigurableLogDrainLogDrainsDeliveryFormat string

const (
	CreateConfigurableLogDrainLogDrainsDeliveryFormatJSON   CreateConfigurableLogDrainLogDrainsDeliveryFormat = "json"
	CreateConfigurableLogDrainLogDrainsDeliveryFormatNdjson CreateConfigurableLogDrainLogDrainsDeliveryFormat = "ndjson"
	CreateConfigurableLogDrainLogDrainsDeliveryFormatSyslog CreateConfigurableLogDrainLogDrainsDeliveryFormat = "syslog"
)

func (e CreateConfigurableLogDrainLogDrainsDeliveryFormat) ToPointer() *CreateConfigurableLogDrainLogDrainsDeliveryFormat {
	return &e
}
func (e *CreateConfigurableLogDrainLogDrainsDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = CreateConfigurableLogDrainLogDrainsDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainLogDrainsDeliveryFormat: %v", v)
	}
}

type CreateConfigurableLogDrainLogDrainsSources string

const (
	CreateConfigurableLogDrainLogDrainsSourcesBuild    CreateConfigurableLogDrainLogDrainsSources = "build"
	CreateConfigurableLogDrainLogDrainsSourcesEdge     CreateConfigurableLogDrainLogDrainsSources = "edge"
	CreateConfigurableLogDrainLogDrainsSourcesLambda   CreateConfigurableLogDrainLogDrainsSources = "lambda"
	CreateConfigurableLogDrainLogDrainsSourcesStatic   CreateConfigurableLogDrainLogDrainsSources = "static"
	CreateConfigurableLogDrainLogDrainsSourcesExternal CreateConfigurableLogDrainLogDrainsSources = "external"
)

func (e CreateConfigurableLogDrainLogDrainsSources) ToPointer() *CreateConfigurableLogDrainLogDrainsSources {
	return &e
}
func (e *CreateConfigurableLogDrainLogDrainsSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "lambda":
		fallthrough
	case "static":
		fallthrough
	case "external":
		*e = CreateConfigurableLogDrainLogDrainsSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainLogDrainsSources: %v", v)
	}
}

type CreateConfigurableLogDrainLogDrainsEnvironments string

const (
	CreateConfigurableLogDrainLogDrainsEnvironmentsProduction CreateConfigurableLogDrainLogDrainsEnvironments = "production"
	CreateConfigurableLogDrainLogDrainsEnvironmentsPreview    CreateConfigurableLogDrainLogDrainsEnvironments = "preview"
)

func (e CreateConfigurableLogDrainLogDrainsEnvironments) ToPointer() *CreateConfigurableLogDrainLogDrainsEnvironments {
	return &e
}
func (e *CreateConfigurableLogDrainLogDrainsEnvironments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateConfigurableLogDrainLogDrainsEnvironments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainLogDrainsEnvironments: %v", v)
	}
}

type CreateConfigurableLogDrainStatus string

const (
	CreateConfigurableLogDrainStatusEnabled  CreateConfigurableLogDrainStatus = "enabled"
	CreateConfigurableLogDrainStatusDisabled CreateConfigurableLogDrainStatus = "disabled"
	CreateConfigurableLogDrainStatusErrored  CreateConfigurableLogDrainStatus = "errored"
)

func (e CreateConfigurableLogDrainStatus) ToPointer() *CreateConfigurableLogDrainStatus {
	return &e
}
func (e *CreateConfigurableLogDrainStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = CreateConfigurableLogDrainStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainStatus: %v", v)
	}
}

type CreateConfigurableLogDrainDisabledReason string

const (
	CreateConfigurableLogDrainDisabledReasonDisabledByOwner     CreateConfigurableLogDrainDisabledReason = "disabled-by-owner"
	CreateConfigurableLogDrainDisabledReasonFeatureNotAvailable CreateConfigurableLogDrainDisabledReason = "feature-not-available"
	CreateConfigurableLogDrainDisabledReasonDisabledByAdmin     CreateConfigurableLogDrainDisabledReason = "disabled-by-admin"
)

func (e CreateConfigurableLogDrainDisabledReason) ToPointer() *CreateConfigurableLogDrainDisabledReason {
	return &e
}
func (e *CreateConfigurableLogDrainDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		*e = CreateConfigurableLogDrainDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainDisabledReason: %v", v)
	}
}

type CreateConfigurableLogDrainCompression string

const (
	CreateConfigurableLogDrainCompressionGzip CreateConfigurableLogDrainCompression = "gzip"
	CreateConfigurableLogDrainCompressionZstd CreateConfigurableLogDrainCompression = "zstd"
	CreateConfigurableLogDrainCompressionNone CreateConfigurableLogDrainCompression = "none"
)

func (e CreateConfigurableLogDrainCompression) ToPointer() *CreateConfigurableLogDrainCompression {
	return &e
}
func (e *CreateConfigurableLogDrainCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "zstd":
		fallthrough
	case "none":
		*e = CreateConfigurableLogDrainCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainCompression: %v", v)
	}
}

type CreateConfigurableLogDrainCreatedFrom string

const (
	CreateConfigurableLogDrainCreatedFromSelfServed CreateConfigurableLogDrainCreatedFrom = "self-served"
)

func (e CreateConfigurableLogDrainCreatedFrom) ToPointer() *CreateConfigurableLogDrainCreatedFrom {
	return &e
}
func (e *CreateConfigurableLogDrainCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = CreateConfigurableLogDrainCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainCreatedFrom: %v", v)
	}
}

type CreateConfigurableLogDrainResponseBody struct {
	// The secret to validate the log-drain payload
	Secret              *string                                           `json:"secret,omitempty"`
	ID                  string                                            `json:"id"`
	DeliveryFormat      CreateConfigurableLogDrainLogDrainsDeliveryFormat `json:"deliveryFormat"`
	URL                 string                                            `json:"url"`
	Name                string                                            `json:"name"`
	ClientID            *string                                           `json:"clientId,omitempty"`
	ConfigurationID     *string                                           `json:"configurationId,omitempty"`
	TeamID              *string                                           `json:"teamId,omitempty"`
	OwnerID             string                                            `json:"ownerId"`
	ProjectIds          []string                                          `json:"projectIds,omitempty"`
	CreatedAt           float64                                           `json:"createdAt"`
	Sources             []CreateConfigurableLogDrainLogDrainsSources      `json:"sources,omitempty"`
	Headers             map[string]string                                 `json:"headers,omitempty"`
	Environments        []CreateConfigurableLogDrainLogDrainsEnvironments `json:"environments"`
	Status              *CreateConfigurableLogDrainStatus                 `json:"status,omitempty"`
	DisabledAt          *float64                                          `json:"disabledAt,omitempty"`
	DisabledReason      *CreateConfigurableLogDrainDisabledReason         `json:"disabledReason,omitempty"`
	DisabledBy          *string                                           `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                                          `json:"firstErrorTimestamp,omitempty"`
	SamplingRate        *float64                                          `json:"samplingRate,omitempty"`
	Compression         *CreateConfigurableLogDrainCompression            `json:"compression,omitempty"`
	CreatedFrom         *CreateConfigurableLogDrainCreatedFrom            `json:"createdFrom,omitempty"`
}

func (o *CreateConfigurableLogDrainResponseBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateConfigurableLogDrainResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateConfigurableLogDrainResponseBody) GetDeliveryFormat() CreateConfigurableLogDrainLogDrainsDeliveryFormat {
	if o == nil {
		return CreateConfigurableLogDrainLogDrainsDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *CreateConfigurableLogDrainResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateConfigurableLogDrainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateConfigurableLogDrainResponseBody) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateConfigurableLogDrainResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateConfigurableLogDrainResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateConfigurableLogDrainResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateConfigurableLogDrainResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateConfigurableLogDrainResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateConfigurableLogDrainResponseBody) GetSources() []CreateConfigurableLogDrainLogDrainsSources {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *CreateConfigurableLogDrainResponseBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateConfigurableLogDrainResponseBody) GetEnvironments() []CreateConfigurableLogDrainLogDrainsEnvironments {
	if o == nil {
		return []CreateConfigurableLogDrainLogDrainsEnvironments{}
	}
	return o.Environments
}

func (o *CreateConfigurableLogDrainResponseBody) GetStatus() *CreateConfigurableLogDrainStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledReason() *CreateConfigurableLogDrainDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *CreateConfigurableLogDrainResponseBody) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *CreateConfigurableLogDrainResponseBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateConfigurableLogDrainResponseBody) GetCompression() *CreateConfigurableLogDrainCompression {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *CreateConfigurableLogDrainResponseBody) GetCreatedFrom() *CreateConfigurableLogDrainCreatedFrom {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

type CreateConfigurableLogDrainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *CreateConfigurableLogDrainResponseBody
}

func (o *CreateConfigurableLogDrainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateConfigurableLogDrainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateConfigurableLogDrainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateConfigurableLogDrainResponse) GetObject() *CreateConfigurableLogDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
