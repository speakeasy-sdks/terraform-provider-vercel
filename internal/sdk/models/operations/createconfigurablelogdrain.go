// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// DeliveryFormat - The delivery log format
type DeliveryFormat string

const (
	DeliveryFormatJSON   DeliveryFormat = "json"
	DeliveryFormatNdjson DeliveryFormat = "ndjson"
)

func (e DeliveryFormat) ToPointer() *DeliveryFormat {
	return &e
}
func (e *DeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = DeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveryFormat: %v", v)
	}
}

type Environments string

const (
	EnvironmentsPreview    Environments = "preview"
	EnvironmentsProduction Environments = "production"
)

func (e Environments) ToPointer() *Environments {
	return &e
}
func (e *Environments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = Environments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Environments: %v", v)
	}
}

type Sources string

const (
	SourcesStatic   Sources = "static"
	SourcesLambda   Sources = "lambda"
	SourcesBuild    Sources = "build"
	SourcesEdge     Sources = "edge"
	SourcesExternal Sources = "external"
)

func (e Sources) ToPointer() *Sources {
	return &e
}
func (e *Sources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		*e = Sources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sources: %v", v)
	}
}

type CreateConfigurableLogDrainRequestBody struct {
	// The delivery log format
	DeliveryFormat DeliveryFormat `json:"deliveryFormat"`
	Environments   []Environments `json:"environments,omitempty"`
	// Headers to be sent together with the request
	Headers    map[string]string `json:"headers,omitempty"`
	ProjectIds []string          `json:"projectIds,omitempty"`
	// The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
	SamplingRate *float64 `json:"samplingRate,omitempty"`
	// Custom secret of log drain
	Secret  *string   `json:"secret,omitempty"`
	Sources []Sources `json:"sources"`
	// The log drain url
	URL string `json:"url"`
}

func (o *CreateConfigurableLogDrainRequestBody) GetDeliveryFormat() DeliveryFormat {
	if o == nil {
		return DeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *CreateConfigurableLogDrainRequestBody) GetEnvironments() []Environments {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateConfigurableLogDrainRequestBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateConfigurableLogDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateConfigurableLogDrainRequestBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateConfigurableLogDrainRequestBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateConfigurableLogDrainRequestBody) GetSources() []Sources {
	if o == nil {
		return []Sources{}
	}
	return o.Sources
}

func (o *CreateConfigurableLogDrainRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateConfigurableLogDrainRequest struct {
	RequestBody *CreateConfigurableLogDrainRequestBody `request:"mediaType=application/json"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateConfigurableLogDrainRequest) GetRequestBody() *CreateConfigurableLogDrainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateConfigurableLogDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateConfigurableLogDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type Compression string

const (
	CompressionGzip Compression = "gzip"
	CompressionZstd Compression = "zstd"
	CompressionNone Compression = "none"
)

func (e Compression) ToPointer() *Compression {
	return &e
}
func (e *Compression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "zstd":
		fallthrough
	case "none":
		*e = Compression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Compression: %v", v)
	}
}

type CreatedFrom string

const (
	CreatedFromSelfServed CreatedFrom = "self-served"
)

func (e CreatedFrom) ToPointer() *CreatedFrom {
	return &e
}
func (e *CreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = CreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedFrom: %v", v)
	}
}

type CreateConfigurableLogDrainDeliveryFormat string

const (
	CreateConfigurableLogDrainDeliveryFormatJSON   CreateConfigurableLogDrainDeliveryFormat = "json"
	CreateConfigurableLogDrainDeliveryFormatNdjson CreateConfigurableLogDrainDeliveryFormat = "ndjson"
	CreateConfigurableLogDrainDeliveryFormatSyslog CreateConfigurableLogDrainDeliveryFormat = "syslog"
)

func (e CreateConfigurableLogDrainDeliveryFormat) ToPointer() *CreateConfigurableLogDrainDeliveryFormat {
	return &e
}
func (e *CreateConfigurableLogDrainDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = CreateConfigurableLogDrainDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainDeliveryFormat: %v", v)
	}
}

type DisabledReason string

const (
	DisabledReasonDisabledByOwner     DisabledReason = "disabled-by-owner"
	DisabledReasonFeatureNotAvailable DisabledReason = "feature-not-available"
	DisabledReasonDisabledByAdmin     DisabledReason = "disabled-by-admin"
)

func (e DisabledReason) ToPointer() *DisabledReason {
	return &e
}
func (e *DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		*e = DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledReason: %v", v)
	}
}

type CreateConfigurableLogDrainEnvironments string

const (
	CreateConfigurableLogDrainEnvironmentsProduction CreateConfigurableLogDrainEnvironments = "production"
	CreateConfigurableLogDrainEnvironmentsPreview    CreateConfigurableLogDrainEnvironments = "preview"
)

func (e CreateConfigurableLogDrainEnvironments) ToPointer() *CreateConfigurableLogDrainEnvironments {
	return &e
}
func (e *CreateConfigurableLogDrainEnvironments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateConfigurableLogDrainEnvironments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainEnvironments: %v", v)
	}
}

type CreateConfigurableLogDrainSources string

const (
	CreateConfigurableLogDrainSourcesBuild    CreateConfigurableLogDrainSources = "build"
	CreateConfigurableLogDrainSourcesEdge     CreateConfigurableLogDrainSources = "edge"
	CreateConfigurableLogDrainSourcesLambda   CreateConfigurableLogDrainSources = "lambda"
	CreateConfigurableLogDrainSourcesStatic   CreateConfigurableLogDrainSources = "static"
	CreateConfigurableLogDrainSourcesExternal CreateConfigurableLogDrainSources = "external"
)

func (e CreateConfigurableLogDrainSources) ToPointer() *CreateConfigurableLogDrainSources {
	return &e
}
func (e *CreateConfigurableLogDrainSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "lambda":
		fallthrough
	case "static":
		fallthrough
	case "external":
		*e = CreateConfigurableLogDrainSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainSources: %v", v)
	}
}

type CreateConfigurableLogDrainStatus string

const (
	CreateConfigurableLogDrainStatusEnabled  CreateConfigurableLogDrainStatus = "enabled"
	CreateConfigurableLogDrainStatusDisabled CreateConfigurableLogDrainStatus = "disabled"
	CreateConfigurableLogDrainStatusErrored  CreateConfigurableLogDrainStatus = "errored"
)

func (e CreateConfigurableLogDrainStatus) ToPointer() *CreateConfigurableLogDrainStatus {
	return &e
}
func (e *CreateConfigurableLogDrainStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = CreateConfigurableLogDrainStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainStatus: %v", v)
	}
}

type CreateConfigurableLogDrainResponseBody struct {
	ClientID            *string                                  `json:"clientId,omitempty"`
	Compression         *Compression                             `json:"compression,omitempty"`
	ConfigurationID     *string                                  `json:"configurationId,omitempty"`
	CreatedAt           float64                                  `json:"createdAt"`
	CreatedFrom         *CreatedFrom                             `json:"createdFrom,omitempty"`
	DeliveryFormat      CreateConfigurableLogDrainDeliveryFormat `json:"deliveryFormat"`
	DisabledAt          *float64                                 `json:"disabledAt,omitempty"`
	DisabledBy          *string                                  `json:"disabledBy,omitempty"`
	DisabledReason      *DisabledReason                          `json:"disabledReason,omitempty"`
	Environments        []CreateConfigurableLogDrainEnvironments `json:"environments"`
	FirstErrorTimestamp *float64                                 `json:"firstErrorTimestamp,omitempty"`
	Headers             map[string]string                        `json:"headers,omitempty"`
	ID                  string                                   `json:"id"`
	Name                string                                   `json:"name"`
	OwnerID             string                                   `json:"ownerId"`
	ProjectIds          []string                                 `json:"projectIds,omitempty"`
	SamplingRate        *float64                                 `json:"samplingRate,omitempty"`
	// The secret to validate the log-drain payload
	Secret  *string                             `json:"secret,omitempty"`
	Sources []CreateConfigurableLogDrainSources `json:"sources,omitempty"`
	Status  *CreateConfigurableLogDrainStatus   `json:"status,omitempty"`
	TeamID  *string                             `json:"teamId,omitempty"`
	URL     string                              `json:"url"`
}

func (o *CreateConfigurableLogDrainResponseBody) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateConfigurableLogDrainResponseBody) GetCompression() *Compression {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *CreateConfigurableLogDrainResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateConfigurableLogDrainResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateConfigurableLogDrainResponseBody) GetCreatedFrom() *CreatedFrom {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *CreateConfigurableLogDrainResponseBody) GetDeliveryFormat() CreateConfigurableLogDrainDeliveryFormat {
	if o == nil {
		return CreateConfigurableLogDrainDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *CreateConfigurableLogDrainResponseBody) GetDisabledReason() *DisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *CreateConfigurableLogDrainResponseBody) GetEnvironments() []CreateConfigurableLogDrainEnvironments {
	if o == nil {
		return []CreateConfigurableLogDrainEnvironments{}
	}
	return o.Environments
}

func (o *CreateConfigurableLogDrainResponseBody) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *CreateConfigurableLogDrainResponseBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateConfigurableLogDrainResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateConfigurableLogDrainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateConfigurableLogDrainResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateConfigurableLogDrainResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateConfigurableLogDrainResponseBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateConfigurableLogDrainResponseBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateConfigurableLogDrainResponseBody) GetSources() []CreateConfigurableLogDrainSources {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *CreateConfigurableLogDrainResponseBody) GetStatus() *CreateConfigurableLogDrainStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateConfigurableLogDrainResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateConfigurableLogDrainResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateConfigurableLogDrainResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *CreateConfigurableLogDrainResponseBody
}

func (o *CreateConfigurableLogDrainResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateConfigurableLogDrainResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateConfigurableLogDrainResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateConfigurableLogDrainResponse) GetObject() *CreateConfigurableLogDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
