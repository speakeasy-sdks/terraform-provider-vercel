// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/models/shared"
	"net/http"
	"time"
)

type DomainType string

const (
	DomainTypeArrayOfStr DomainType = "arrayOfStr"
	DomainTypeStr        DomainType = "str"
)

// Domain - Get only aliases of the given domain name
type Domain struct {
	ArrayOfStr []string
	Str        *string

	Type DomainType
}

func CreateDomainArrayOfStr(arrayOfStr []string) Domain {
	typ := DomainTypeArrayOfStr

	return Domain{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateDomainStr(str string) Domain {
	typ := DomainTypeStr

	return Domain{
		Str:  &str,
		Type: typ,
	}
}

func (u *Domain) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = DomainTypeArrayOfStr
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DomainTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Domain", string(data))
}

func (u Domain) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Domain: all fields are null")
}

type ListAliasesRequest struct {
	// Get only aliases of the given domain name
	Domain *Domain `queryParam:"style=form,explode=true,name=domain"`
	// Get only aliases created after the provided timestamp
	From *float64 `queryParam:"style=form,explode=true,name=from"`
	// Maximum number of aliases to list from a request
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Filter aliases from the given `projectId`
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Get aliases that would be rolled back for the given deployment
	RollbackDeploymentID *string `queryParam:"style=form,explode=true,name=rollbackDeploymentId"`
	// Get aliases created after this JavaScript timestamp
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Get aliases created before this JavaScript timestamp
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
}

func (o *ListAliasesRequest) GetDomain() *Domain {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *ListAliasesRequest) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListAliasesRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAliasesRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *ListAliasesRequest) GetRollbackDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.RollbackDeploymentID
}

func (o *ListAliasesRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *ListAliasesRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ListAliasesRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListAliasesRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

// ListAliasesCreator - Information of the user who created the alias
type ListAliasesCreator struct {
	// Email of the user who created the alias
	Email string `json:"email"`
	// ID of the user who created the alias
	UID string `json:"uid"`
	// Username of the user who created the alias
	Username string `json:"username"`
}

func (o *ListAliasesCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ListAliasesCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ListAliasesCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// ListAliasesDeployment - A map with the deployment ID, URL and metadata
type ListAliasesDeployment struct {
	// The deployment unique identifier
	ID string `json:"id"`
	// The deployment metadata
	Meta *string `json:"meta,omitempty"`
	// The deployment unique URL
	URL string `json:"url"`
}

func (o *ListAliasesDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAliasesDeployment) GetMeta() *string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *ListAliasesDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type ListAliasesAliasesResponse200Scope string

const (
	ListAliasesAliasesResponse200ScopeEmailInvite ListAliasesAliasesResponse200Scope = "email_invite"
)

func (e ListAliasesAliasesResponse200Scope) ToPointer() *ListAliasesAliasesResponse200Scope {
	return &e
}
func (e *ListAliasesAliasesResponse200Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email_invite":
		*e = ListAliasesAliasesResponse200Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesAliasesResponse200Scope: %v", v)
	}
}

// ListAliases4 - The protection bypass for the alias
type ListAliases4 struct {
	CreatedAt     float64                            `json:"createdAt"`
	LastUpdatedAt float64                            `json:"lastUpdatedAt"`
	LastUpdatedBy string                             `json:"lastUpdatedBy"`
	Scope         ListAliasesAliasesResponse200Scope `json:"scope"`
}

func (o *ListAliases4) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliases4) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *ListAliases4) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListAliases4) GetScope() ListAliasesAliasesResponse200Scope {
	if o == nil {
		return ListAliasesAliasesResponse200Scope("")
	}
	return o.Scope
}

type ListAliasesAliasesResponseScope string

const (
	ListAliasesAliasesResponseScopeAliasProtectionOverride ListAliasesAliasesResponseScope = "alias-protection-override"
)

func (e ListAliasesAliasesResponseScope) ToPointer() *ListAliasesAliasesResponseScope {
	return &e
}
func (e *ListAliasesAliasesResponseScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alias-protection-override":
		*e = ListAliasesAliasesResponseScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesAliasesResponseScope: %v", v)
	}
}

// ListAliases3 - The protection bypass for the alias
type ListAliases3 struct {
	CreatedAt float64                         `json:"createdAt"`
	CreatedBy string                          `json:"createdBy"`
	Scope     ListAliasesAliasesResponseScope `json:"scope"`
}

func (o *ListAliases3) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliases3) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListAliases3) GetScope() ListAliasesAliasesResponseScope {
	if o == nil {
		return ListAliasesAliasesResponseScope("")
	}
	return o.Scope
}

type ListAliasesAccess string

const (
	ListAliasesAccessRequested ListAliasesAccess = "requested"
	ListAliasesAccessGranted   ListAliasesAccess = "granted"
)

func (e ListAliasesAccess) ToPointer() *ListAliasesAccess {
	return &e
}
func (e *ListAliasesAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = ListAliasesAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesAccess: %v", v)
	}
}

type ListAliasesAliasesScope string

const (
	ListAliasesAliasesScopeUser ListAliasesAliasesScope = "user"
)

func (e ListAliasesAliasesScope) ToPointer() *ListAliasesAliasesScope {
	return &e
}
func (e *ListAliasesAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = ListAliasesAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesAliasesScope: %v", v)
	}
}

// ListAliases2 - The protection bypass for the alias
type ListAliases2 struct {
	Access        ListAliasesAccess       `json:"access"`
	CreatedAt     float64                 `json:"createdAt"`
	LastUpdatedAt float64                 `json:"lastUpdatedAt"`
	LastUpdatedBy string                  `json:"lastUpdatedBy"`
	Scope         ListAliasesAliasesScope `json:"scope"`
}

func (o *ListAliases2) GetAccess() ListAliasesAccess {
	if o == nil {
		return ListAliasesAccess("")
	}
	return o.Access
}

func (o *ListAliases2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliases2) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *ListAliases2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListAliases2) GetScope() ListAliasesAliasesScope {
	if o == nil {
		return ListAliasesAliasesScope("")
	}
	return o.Scope
}

type ListAliasesScope string

const (
	ListAliasesScopeShareableLink ListAliasesScope = "shareable-link"
)

func (e ListAliasesScope) ToPointer() *ListAliasesScope {
	return &e
}
func (e *ListAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		*e = ListAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesScope: %v", v)
	}
}

// ListAliases1 - The protection bypass for the alias
type ListAliases1 struct {
	CreatedAt float64          `json:"createdAt"`
	CreatedBy string           `json:"createdBy"`
	Scope     ListAliasesScope `json:"scope"`
}

func (o *ListAliases1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliases1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListAliases1) GetScope() ListAliasesScope {
	if o == nil {
		return ListAliasesScope("")
	}
	return o.Scope
}

type ListAliasesProtectionBypassType string

const (
	ListAliasesProtectionBypassTypeListAliases1 ListAliasesProtectionBypassType = "listAliases_1"
	ListAliasesProtectionBypassTypeListAliases2 ListAliasesProtectionBypassType = "listAliases_2"
	ListAliasesProtectionBypassTypeListAliases3 ListAliasesProtectionBypassType = "listAliases_3"
	ListAliasesProtectionBypassTypeListAliases4 ListAliasesProtectionBypassType = "listAliases_4"
)

type ListAliasesProtectionBypass struct {
	ListAliases1 *ListAliases1
	ListAliases2 *ListAliases2
	ListAliases3 *ListAliases3
	ListAliases4 *ListAliases4

	Type ListAliasesProtectionBypassType
}

func CreateListAliasesProtectionBypassListAliases1(listAliases1 ListAliases1) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliases1

	return ListAliasesProtectionBypass{
		ListAliases1: &listAliases1,
		Type:         typ,
	}
}

func CreateListAliasesProtectionBypassListAliases2(listAliases2 ListAliases2) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliases2

	return ListAliasesProtectionBypass{
		ListAliases2: &listAliases2,
		Type:         typ,
	}
}

func CreateListAliasesProtectionBypassListAliases3(listAliases3 ListAliases3) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliases3

	return ListAliasesProtectionBypass{
		ListAliases3: &listAliases3,
		Type:         typ,
	}
}

func CreateListAliasesProtectionBypassListAliases4(listAliases4 ListAliases4) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliases4

	return ListAliasesProtectionBypass{
		ListAliases4: &listAliases4,
		Type:         typ,
	}
}

func (u *ListAliasesProtectionBypass) UnmarshalJSON(data []byte) error {

	var listAliases1 ListAliases1 = ListAliases1{}
	if err := utils.UnmarshalJSON(data, &listAliases1, "", true, true); err == nil {
		u.ListAliases1 = &listAliases1
		u.Type = ListAliasesProtectionBypassTypeListAliases1
		return nil
	}

	var listAliases3 ListAliases3 = ListAliases3{}
	if err := utils.UnmarshalJSON(data, &listAliases3, "", true, true); err == nil {
		u.ListAliases3 = &listAliases3
		u.Type = ListAliasesProtectionBypassTypeListAliases3
		return nil
	}

	var listAliases4 ListAliases4 = ListAliases4{}
	if err := utils.UnmarshalJSON(data, &listAliases4, "", true, true); err == nil {
		u.ListAliases4 = &listAliases4
		u.Type = ListAliasesProtectionBypassTypeListAliases4
		return nil
	}

	var listAliases2 ListAliases2 = ListAliases2{}
	if err := utils.UnmarshalJSON(data, &listAliases2, "", true, true); err == nil {
		u.ListAliases2 = &listAliases2
		u.Type = ListAliasesProtectionBypassTypeListAliases2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListAliasesProtectionBypass", string(data))
}

func (u ListAliasesProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.ListAliases1 != nil {
		return utils.MarshalJSON(u.ListAliases1, "", true)
	}

	if u.ListAliases2 != nil {
		return utils.MarshalJSON(u.ListAliases2, "", true)
	}

	if u.ListAliases3 != nil {
		return utils.MarshalJSON(u.ListAliases3, "", true)
	}

	if u.ListAliases4 != nil {
		return utils.MarshalJSON(u.ListAliases4, "", true)
	}

	return nil, errors.New("could not marshal union type ListAliasesProtectionBypass: all fields are null")
}

type Aliases struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The date when the alias was created in milliseconds since the UNIX epoch
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Information of the user who created the alias
	Creator *ListAliasesCreator `json:"creator,omitempty"`
	// The date when the alias was deleted in milliseconds since the UNIX epoch
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A map with the deployment ID, URL and metadata
	Deployment *ListAliasesDeployment `json:"deployment,omitempty"`
	// The deployment ID
	DeploymentID *string `json:"deploymentId"`
	// The unique identifier of the project
	ProjectID *string `json:"projectId"`
	// The protection bypass for the alias
	ProtectionBypass map[string]ListAliasesProtectionBypass `json:"protectionBypass,omitempty"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// Status code to be used on redirect
	RedirectStatusCode *float64 `json:"redirectStatusCode,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
	// The date when the alias was updated in milliseconds since the UNIX epoch
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
}

func (a Aliases) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Aliases) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Aliases) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Aliases) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *Aliases) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Aliases) GetCreator() *ListAliasesCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *Aliases) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Aliases) GetDeployment() *ListAliasesDeployment {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *Aliases) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *Aliases) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Aliases) GetProtectionBypass() map[string]ListAliasesProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *Aliases) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Aliases) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *Aliases) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *Aliases) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// ListAliasesResponseBody - The paginated list of aliases
type ListAliasesResponseBody struct {
	Aliases []Aliases `json:"aliases"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination shared.Pagination `json:"pagination"`
}

func (o *ListAliasesResponseBody) GetAliases() []Aliases {
	if o == nil {
		return []Aliases{}
	}
	return o.Aliases
}

func (o *ListAliasesResponseBody) GetPagination() shared.Pagination {
	if o == nil {
		return shared.Pagination{}
	}
	return o.Pagination
}

type ListAliasesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The paginated list of aliases
	Object *ListAliasesResponseBody
}

func (o *ListAliasesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListAliasesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListAliasesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListAliasesResponse) GetObject() *ListAliasesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
