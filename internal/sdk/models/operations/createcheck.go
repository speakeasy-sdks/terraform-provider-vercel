// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateCheckRequestBody struct {
	// Whether the check should block a deployment from succeeding
	Blocking bool `json:"blocking"`
	// URL to display for further details
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// An identifier that can be used as an external reference
	ExternalID *string `json:"externalId,omitempty"`
	// The name of the check being created
	Name string `json:"name"`
	// Path of the page that is being checked
	Path *string `json:"path,omitempty"`
	// Whether a user should be able to request for the check to be rerun if it fails
	Rerequestable *bool `json:"rerequestable,omitempty"`
}

func (o *CreateCheckRequestBody) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *CreateCheckRequestBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *CreateCheckRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateCheckRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCheckRequestBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateCheckRequestBody) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

type CreateCheckRequest struct {
	RequestBody *CreateCheckRequestBody `request:"mediaType=application/json"`
	// The deployment to create the check for.
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The Team identifier or slug to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
}

func (o *CreateCheckRequest) GetRequestBody() *CreateCheckRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateCheckRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *CreateCheckRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CreateCheckConclusion string

const (
	CreateCheckConclusionCanceled  CreateCheckConclusion = "canceled"
	CreateCheckConclusionFailed    CreateCheckConclusion = "failed"
	CreateCheckConclusionNeutral   CreateCheckConclusion = "neutral"
	CreateCheckConclusionSucceeded CreateCheckConclusion = "succeeded"
	CreateCheckConclusionSkipped   CreateCheckConclusion = "skipped"
	CreateCheckConclusionStale     CreateCheckConclusion = "stale"
)

func (e CreateCheckConclusion) ToPointer() *CreateCheckConclusion {
	return &e
}

func (e *CreateCheckConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		fallthrough
	case "stale":
		*e = CreateCheckConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckConclusion: %v", v)
	}
}

type CreateCheckSource string

const (
	CreateCheckSourceWebVitals CreateCheckSource = "web-vitals"
)

func (e CreateCheckSource) ToPointer() *CreateCheckSource {
	return &e
}

func (e *CreateCheckSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheckSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckSource: %v", v)
	}
}

type CreateCheckCLS struct {
	PreviousValue *int64            `json:"previousValue,omitempty"`
	Source        CreateCheckSource `json:"source"`
	Value         *int64            `json:"value"`
}

func (o *CreateCheckCLS) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheckCLS) GetSource() CreateCheckSource {
	if o == nil {
		return CreateCheckSource("")
	}
	return o.Source
}

func (o *CreateCheckCLS) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheckChecksSource string

const (
	CreateCheckChecksSourceWebVitals CreateCheckChecksSource = "web-vitals"
)

func (e CreateCheckChecksSource) ToPointer() *CreateCheckChecksSource {
	return &e
}

func (e *CreateCheckChecksSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheckChecksSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckChecksSource: %v", v)
	}
}

type CreateCheckFCP struct {
	PreviousValue *int64                  `json:"previousValue,omitempty"`
	Source        CreateCheckChecksSource `json:"source"`
	Value         *int64                  `json:"value"`
}

func (o *CreateCheckFCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheckFCP) GetSource() CreateCheckChecksSource {
	if o == nil {
		return CreateCheckChecksSource("")
	}
	return o.Source
}

func (o *CreateCheckFCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheckChecksResponseSource string

const (
	CreateCheckChecksResponseSourceWebVitals CreateCheckChecksResponseSource = "web-vitals"
)

func (e CreateCheckChecksResponseSource) ToPointer() *CreateCheckChecksResponseSource {
	return &e
}

func (e *CreateCheckChecksResponseSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheckChecksResponseSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckChecksResponseSource: %v", v)
	}
}

type CreateCheckLCP struct {
	PreviousValue *int64                          `json:"previousValue,omitempty"`
	Source        CreateCheckChecksResponseSource `json:"source"`
	Value         *int64                          `json:"value"`
}

func (o *CreateCheckLCP) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheckLCP) GetSource() CreateCheckChecksResponseSource {
	if o == nil {
		return CreateCheckChecksResponseSource("")
	}
	return o.Source
}

func (o *CreateCheckLCP) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheckChecksResponse200Source string

const (
	CreateCheckChecksResponse200SourceWebVitals CreateCheckChecksResponse200Source = "web-vitals"
)

func (e CreateCheckChecksResponse200Source) ToPointer() *CreateCheckChecksResponse200Source {
	return &e
}

func (e *CreateCheckChecksResponse200Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheckChecksResponse200Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckChecksResponse200Source: %v", v)
	}
}

type CreateCheckTBT struct {
	PreviousValue *int64                             `json:"previousValue,omitempty"`
	Source        CreateCheckChecksResponse200Source `json:"source"`
	Value         *int64                             `json:"value"`
}

func (o *CreateCheckTBT) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheckTBT) GetSource() CreateCheckChecksResponse200Source {
	if o == nil {
		return CreateCheckChecksResponse200Source("")
	}
	return o.Source
}

func (o *CreateCheckTBT) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheckChecksResponse200ApplicationJSONSource string

const (
	CreateCheckChecksResponse200ApplicationJSONSourceWebVitals CreateCheckChecksResponse200ApplicationJSONSource = "web-vitals"
)

func (e CreateCheckChecksResponse200ApplicationJSONSource) ToPointer() *CreateCheckChecksResponse200ApplicationJSONSource {
	return &e
}

func (e *CreateCheckChecksResponse200ApplicationJSONSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = CreateCheckChecksResponse200ApplicationJSONSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckChecksResponse200ApplicationJSONSource: %v", v)
	}
}

type CreateCheckVirtualExperienceScore struct {
	PreviousValue *int64                                            `json:"previousValue,omitempty"`
	Source        CreateCheckChecksResponse200ApplicationJSONSource `json:"source"`
	Value         *int64                                            `json:"value"`
}

func (o *CreateCheckVirtualExperienceScore) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CreateCheckVirtualExperienceScore) GetSource() CreateCheckChecksResponse200ApplicationJSONSource {
	if o == nil {
		return CreateCheckChecksResponse200ApplicationJSONSource("")
	}
	return o.Source
}

func (o *CreateCheckVirtualExperienceScore) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateCheckMetrics struct {
	Cls                    CreateCheckCLS                     `json:"CLS"`
	Fcp                    CreateCheckFCP                     `json:"FCP"`
	Lcp                    CreateCheckLCP                     `json:"LCP"`
	Tbt                    CreateCheckTBT                     `json:"TBT"`
	VirtualExperienceScore *CreateCheckVirtualExperienceScore `json:"virtualExperienceScore,omitempty"`
}

func (o *CreateCheckMetrics) GetCls() CreateCheckCLS {
	if o == nil {
		return CreateCheckCLS{}
	}
	return o.Cls
}

func (o *CreateCheckMetrics) GetFcp() CreateCheckFCP {
	if o == nil {
		return CreateCheckFCP{}
	}
	return o.Fcp
}

func (o *CreateCheckMetrics) GetLcp() CreateCheckLCP {
	if o == nil {
		return CreateCheckLCP{}
	}
	return o.Lcp
}

func (o *CreateCheckMetrics) GetTbt() CreateCheckTBT {
	if o == nil {
		return CreateCheckTBT{}
	}
	return o.Tbt
}

func (o *CreateCheckMetrics) GetVirtualExperienceScore() *CreateCheckVirtualExperienceScore {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

type CreateCheckOutput struct {
	Metrics *CreateCheckMetrics `json:"metrics,omitempty"`
}

func (o *CreateCheckOutput) GetMetrics() *CreateCheckMetrics {
	if o == nil {
		return nil
	}
	return o.Metrics
}

type CreateCheckStatus string

const (
	CreateCheckStatusRegistered CreateCheckStatus = "registered"
	CreateCheckStatusRunning    CreateCheckStatus = "running"
	CreateCheckStatusCompleted  CreateCheckStatus = "completed"
)

func (e CreateCheckStatus) ToPointer() *CreateCheckStatus {
	return &e
}

func (e *CreateCheckStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateCheckStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckStatus: %v", v)
	}
}

type CreateCheckResponseBody struct {
	Blocking      bool                   `json:"blocking"`
	CompletedAt   *int64                 `json:"completedAt,omitempty"`
	Conclusion    *CreateCheckConclusion `json:"conclusion,omitempty"`
	CreatedAt     int64                  `json:"createdAt"`
	DeploymentID  string                 `json:"deploymentId"`
	DetailsURL    *string                `json:"detailsUrl,omitempty"`
	ExternalID    *string                `json:"externalId,omitempty"`
	ID            string                 `json:"id"`
	IntegrationID string                 `json:"integrationId"`
	Name          string                 `json:"name"`
	Output        *CreateCheckOutput     `json:"output,omitempty"`
	Path          *string                `json:"path,omitempty"`
	Rerequestable *bool                  `json:"rerequestable,omitempty"`
	StartedAt     *int64                 `json:"startedAt,omitempty"`
	Status        CreateCheckStatus      `json:"status"`
	UpdatedAt     int64                  `json:"updatedAt"`
}

func (o *CreateCheckResponseBody) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *CreateCheckResponseBody) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *CreateCheckResponseBody) GetConclusion() *CreateCheckConclusion {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *CreateCheckResponseBody) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *CreateCheckResponseBody) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *CreateCheckResponseBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *CreateCheckResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CreateCheckResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCheckResponseBody) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateCheckResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCheckResponseBody) GetOutput() *CreateCheckOutput {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *CreateCheckResponseBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateCheckResponseBody) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

func (o *CreateCheckResponseBody) GetStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *CreateCheckResponseBody) GetStatus() CreateCheckStatus {
	if o == nil {
		return CreateCheckStatus("")
	}
	return o.Status
}

func (o *CreateCheckResponseBody) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}

type CreateCheckResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *CreateCheckResponseBody
}

func (o *CreateCheckResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateCheckResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateCheckResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateCheckResponse) GetObject() *CreateCheckResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
