// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type ArtifactQueryRequestBody struct {
	// artifact hashes
	Hashes []string `json:"hashes"`
}

func (o *ArtifactQueryRequestBody) GetHashes() []string {
	if o == nil {
		return []string{}
	}
	return o.Hashes
}

type ArtifactQueryRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *ArtifactQueryRequestBody `request:"mediaType=application/json"`
}

func (o *ArtifactQueryRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ArtifactQueryRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ArtifactQueryRequest) GetRequestBody() *ArtifactQueryRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type Error struct {
	Message string `json:"message"`
}

func (o *Error) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ArtifactQueryResponseBody2 struct {
	Error Error `json:"error"`
}

func (o *ArtifactQueryResponseBody2) GetError() Error {
	if o == nil {
		return Error{}
	}
	return o.Error
}

type ArtifactQueryResponseBody1 struct {
	Size           float64 `json:"size"`
	TaskDurationMs float64 `json:"taskDurationMs"`
	Tag            *string `json:"tag,omitempty"`
}

func (o *ArtifactQueryResponseBody1) GetSize() float64 {
	if o == nil {
		return 0.0
	}
	return o.Size
}

func (o *ArtifactQueryResponseBody1) GetTaskDurationMs() float64 {
	if o == nil {
		return 0.0
	}
	return o.TaskDurationMs
}

func (o *ArtifactQueryResponseBody1) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type ResponseBodyUnionType string

const (
	ResponseBodyUnionTypeArtifactQueryResponseBody1 ResponseBodyUnionType = "artifactQuery_responseBody_1"
	ResponseBodyUnionTypeArtifactQueryResponseBody2 ResponseBodyUnionType = "artifactQuery_responseBody_2"
)

type ResponseBody struct {
	ArtifactQueryResponseBody1 *ArtifactQueryResponseBody1
	ArtifactQueryResponseBody2 *ArtifactQueryResponseBody2

	Type ResponseBodyUnionType
}

func CreateResponseBodyArtifactQueryResponseBody1(artifactQueryResponseBody1 ArtifactQueryResponseBody1) ResponseBody {
	typ := ResponseBodyUnionTypeArtifactQueryResponseBody1

	return ResponseBody{
		ArtifactQueryResponseBody1: &artifactQueryResponseBody1,
		Type:                       typ,
	}
}

func CreateResponseBodyArtifactQueryResponseBody2(artifactQueryResponseBody2 ArtifactQueryResponseBody2) ResponseBody {
	typ := ResponseBodyUnionTypeArtifactQueryResponseBody2

	return ResponseBody{
		ArtifactQueryResponseBody2: &artifactQueryResponseBody2,
		Type:                       typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {

	var artifactQueryResponseBody2 ArtifactQueryResponseBody2 = ArtifactQueryResponseBody2{}
	if err := utils.UnmarshalJSON(data, &artifactQueryResponseBody2, "", true, true); err == nil {
		u.ArtifactQueryResponseBody2 = &artifactQueryResponseBody2
		u.Type = ResponseBodyUnionTypeArtifactQueryResponseBody2
		return nil
	}

	var artifactQueryResponseBody1 ArtifactQueryResponseBody1 = ArtifactQueryResponseBody1{}
	if err := utils.UnmarshalJSON(data, &artifactQueryResponseBody1, "", true, true); err == nil {
		u.ArtifactQueryResponseBody1 = &artifactQueryResponseBody1
		u.Type = ResponseBodyUnionTypeArtifactQueryResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBody", string(data))
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArtifactQueryResponseBody1 != nil {
		return utils.MarshalJSON(u.ArtifactQueryResponseBody1, "", true)
	}

	if u.ArtifactQueryResponseBody2 != nil {
		return utils.MarshalJSON(u.ArtifactQueryResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBody: all fields are null")
}

type ArtifactQueryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      map[string]ResponseBody
}

func (o *ArtifactQueryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ArtifactQueryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ArtifactQueryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ArtifactQueryResponse) GetObject() map[string]ResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
