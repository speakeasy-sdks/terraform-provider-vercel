// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

type CancelDeploymentRequest struct {
	// The unique identifier of the deployment.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *CancelDeploymentRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CancelDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type CancelDeploymentBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *CancelDeploymentBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CancelDeploymentBuilds struct {
}

// CancelDeploymentCrons - The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
type CancelDeploymentCrons struct {
	Schedule string `json:"schedule"`
	Path     string `json:"path"`
}

func (o *CancelDeploymentCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

func (o *CancelDeploymentCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

// CancelDeploymentFunctions - An object used to configure your Serverless Functions
type CancelDeploymentFunctions struct {
	Memory       *float64 `json:"memory,omitempty"`
	MaxDuration  *float64 `json:"maxDuration,omitempty"`
	Runtime      *string  `json:"runtime,omitempty"`
	IncludeFiles *string  `json:"includeFiles,omitempty"`
	ExcludeFiles *string  `json:"excludeFiles,omitempty"`
}

func (o *CancelDeploymentFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CancelDeploymentFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CancelDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *CancelDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CancelDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

// CancelDeploymentPlan - The pricing plan the deployment was made under
type CancelDeploymentPlan string

const (
	CancelDeploymentPlanPro        CancelDeploymentPlan = "pro"
	CancelDeploymentPlanEnterprise CancelDeploymentPlan = "enterprise"
	CancelDeploymentPlanHobby      CancelDeploymentPlan = "hobby"
)

func (e CancelDeploymentPlan) ToPointer() *CancelDeploymentPlan {
	return &e
}
func (e *CancelDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CancelDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentPlan: %v", v)
	}
}

// CancelDeploymentRoutes3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeploymentRoutes3 struct {
	Src        string  `json:"src"`
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
}

func (o *CancelDeploymentRoutes3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CancelDeploymentRoutes3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CancelDeploymentRoutes3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

type CancelDeploymentRoutesHandle string

const (
	CancelDeploymentRoutesHandleError      CancelDeploymentRoutesHandle = "error"
	CancelDeploymentRoutesHandleFilesystem CancelDeploymentRoutesHandle = "filesystem"
	CancelDeploymentRoutesHandleHit        CancelDeploymentRoutesHandle = "hit"
	CancelDeploymentRoutesHandleMiss       CancelDeploymentRoutesHandle = "miss"
	CancelDeploymentRoutesHandleRewrite    CancelDeploymentRoutesHandle = "rewrite"
	CancelDeploymentRoutesHandleResource   CancelDeploymentRoutesHandle = "resource"
)

func (e CancelDeploymentRoutesHandle) ToPointer() *CancelDeploymentRoutesHandle {
	return &e
}
func (e *CancelDeploymentRoutesHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = CancelDeploymentRoutesHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentRoutesHandle: %v", v)
	}
}

// CancelDeploymentRoutes2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeploymentRoutes2 struct {
	Handle CancelDeploymentRoutesHandle `json:"handle"`
	Src    *string                      `json:"src,omitempty"`
	Dest   *string                      `json:"dest,omitempty"`
	Status *float64                     `json:"status,omitempty"`
}

func (o *CancelDeploymentRoutes2) GetHandle() CancelDeploymentRoutesHandle {
	if o == nil {
		return CancelDeploymentRoutesHandle("")
	}
	return o.Handle
}

func (o *CancelDeploymentRoutes2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CancelDeploymentRoutes2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeploymentRoutes2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CancelDeploymentHasDeploymentsType string

const (
	CancelDeploymentHasDeploymentsTypeHeader CancelDeploymentHasDeploymentsType = "header"
	CancelDeploymentHasDeploymentsTypeCookie CancelDeploymentHasDeploymentsType = "cookie"
	CancelDeploymentHasDeploymentsTypeQuery  CancelDeploymentHasDeploymentsType = "query"
)

func (e CancelDeploymentHasDeploymentsType) ToPointer() *CancelDeploymentHasDeploymentsType {
	return &e
}
func (e *CancelDeploymentHasDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeploymentHasDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentHasDeploymentsType: %v", v)
	}
}

type CancelDeploymentHas2 struct {
	Type  CancelDeploymentHasDeploymentsType `json:"type"`
	Key   string                             `json:"key"`
	Value *string                            `json:"value,omitempty"`
}

func (o *CancelDeploymentHas2) GetType() CancelDeploymentHasDeploymentsType {
	if o == nil {
		return CancelDeploymentHasDeploymentsType("")
	}
	return o.Type
}

func (o *CancelDeploymentHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeploymentHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeploymentHasType string

const (
	CancelDeploymentHasTypeHost CancelDeploymentHasType = "host"
)

func (e CancelDeploymentHasType) ToPointer() *CancelDeploymentHasType {
	return &e
}
func (e *CancelDeploymentHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeploymentHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentHasType: %v", v)
	}
}

type CancelDeploymentHas1 struct {
	Type  CancelDeploymentHasType `json:"type"`
	Value string                  `json:"value"`
}

func (o *CancelDeploymentHas1) GetType() CancelDeploymentHasType {
	if o == nil {
		return CancelDeploymentHasType("")
	}
	return o.Type
}

func (o *CancelDeploymentHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CancelDeploymentRoutesHasType string

const (
	CancelDeploymentRoutesHasTypeCancelDeploymentHas1 CancelDeploymentRoutesHasType = "cancelDeployment_has_1"
	CancelDeploymentRoutesHasTypeCancelDeploymentHas2 CancelDeploymentRoutesHasType = "cancelDeployment_has_2"
)

type CancelDeploymentRoutesHas struct {
	CancelDeploymentHas1 *CancelDeploymentHas1
	CancelDeploymentHas2 *CancelDeploymentHas2

	Type CancelDeploymentRoutesHasType
}

func CreateCancelDeploymentRoutesHasCancelDeploymentHas1(cancelDeploymentHas1 CancelDeploymentHas1) CancelDeploymentRoutesHas {
	typ := CancelDeploymentRoutesHasTypeCancelDeploymentHas1

	return CancelDeploymentRoutesHas{
		CancelDeploymentHas1: &cancelDeploymentHas1,
		Type:                 typ,
	}
}

func CreateCancelDeploymentRoutesHasCancelDeploymentHas2(cancelDeploymentHas2 CancelDeploymentHas2) CancelDeploymentRoutesHas {
	typ := CancelDeploymentRoutesHasTypeCancelDeploymentHas2

	return CancelDeploymentRoutesHas{
		CancelDeploymentHas2: &cancelDeploymentHas2,
		Type:                 typ,
	}
}

func (u *CancelDeploymentRoutesHas) UnmarshalJSON(data []byte) error {

	var cancelDeploymentHas1 CancelDeploymentHas1 = CancelDeploymentHas1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHas1, "", true, true); err == nil {
		u.CancelDeploymentHas1 = &cancelDeploymentHas1
		u.Type = CancelDeploymentRoutesHasTypeCancelDeploymentHas1
		return nil
	}

	var cancelDeploymentHas2 CancelDeploymentHas2 = CancelDeploymentHas2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHas2, "", true, true); err == nil {
		u.CancelDeploymentHas2 = &cancelDeploymentHas2
		u.Type = CancelDeploymentRoutesHasTypeCancelDeploymentHas2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRoutesHas", string(data))
}

func (u CancelDeploymentRoutesHas) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentHas1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentHas1, "", true)
	}

	if u.CancelDeploymentHas2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentHas2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRoutesHas: all fields are null")
}

type CancelDeploymentMissingDeploymentsType string

const (
	CancelDeploymentMissingDeploymentsTypeHeader CancelDeploymentMissingDeploymentsType = "header"
	CancelDeploymentMissingDeploymentsTypeCookie CancelDeploymentMissingDeploymentsType = "cookie"
	CancelDeploymentMissingDeploymentsTypeQuery  CancelDeploymentMissingDeploymentsType = "query"
)

func (e CancelDeploymentMissingDeploymentsType) ToPointer() *CancelDeploymentMissingDeploymentsType {
	return &e
}
func (e *CancelDeploymentMissingDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeploymentMissingDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentMissingDeploymentsType: %v", v)
	}
}

type CancelDeploymentMissing2 struct {
	Type  CancelDeploymentMissingDeploymentsType `json:"type"`
	Key   string                                 `json:"key"`
	Value *string                                `json:"value,omitempty"`
}

func (o *CancelDeploymentMissing2) GetType() CancelDeploymentMissingDeploymentsType {
	if o == nil {
		return CancelDeploymentMissingDeploymentsType("")
	}
	return o.Type
}

func (o *CancelDeploymentMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeploymentMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeploymentMissingType string

const (
	CancelDeploymentMissingTypeHost CancelDeploymentMissingType = "host"
)

func (e CancelDeploymentMissingType) ToPointer() *CancelDeploymentMissingType {
	return &e
}
func (e *CancelDeploymentMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeploymentMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentMissingType: %v", v)
	}
}

type CancelDeploymentMissing1 struct {
	Type  CancelDeploymentMissingType `json:"type"`
	Value string                      `json:"value"`
}

func (o *CancelDeploymentMissing1) GetType() CancelDeploymentMissingType {
	if o == nil {
		return CancelDeploymentMissingType("")
	}
	return o.Type
}

func (o *CancelDeploymentMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CancelDeploymentRoutesMissingType string

const (
	CancelDeploymentRoutesMissingTypeCancelDeploymentMissing1 CancelDeploymentRoutesMissingType = "cancelDeployment_missing_1"
	CancelDeploymentRoutesMissingTypeCancelDeploymentMissing2 CancelDeploymentRoutesMissingType = "cancelDeployment_missing_2"
)

type CancelDeploymentRoutesMissing struct {
	CancelDeploymentMissing1 *CancelDeploymentMissing1
	CancelDeploymentMissing2 *CancelDeploymentMissing2

	Type CancelDeploymentRoutesMissingType
}

func CreateCancelDeploymentRoutesMissingCancelDeploymentMissing1(cancelDeploymentMissing1 CancelDeploymentMissing1) CancelDeploymentRoutesMissing {
	typ := CancelDeploymentRoutesMissingTypeCancelDeploymentMissing1

	return CancelDeploymentRoutesMissing{
		CancelDeploymentMissing1: &cancelDeploymentMissing1,
		Type:                     typ,
	}
}

func CreateCancelDeploymentRoutesMissingCancelDeploymentMissing2(cancelDeploymentMissing2 CancelDeploymentMissing2) CancelDeploymentRoutesMissing {
	typ := CancelDeploymentRoutesMissingTypeCancelDeploymentMissing2

	return CancelDeploymentRoutesMissing{
		CancelDeploymentMissing2: &cancelDeploymentMissing2,
		Type:                     typ,
	}
}

func (u *CancelDeploymentRoutesMissing) UnmarshalJSON(data []byte) error {

	var cancelDeploymentMissing1 CancelDeploymentMissing1 = CancelDeploymentMissing1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissing1, "", true, true); err == nil {
		u.CancelDeploymentMissing1 = &cancelDeploymentMissing1
		u.Type = CancelDeploymentRoutesMissingTypeCancelDeploymentMissing1
		return nil
	}

	var cancelDeploymentMissing2 CancelDeploymentMissing2 = CancelDeploymentMissing2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissing2, "", true, true); err == nil {
		u.CancelDeploymentMissing2 = &cancelDeploymentMissing2
		u.Type = CancelDeploymentRoutesMissingTypeCancelDeploymentMissing2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRoutesMissing", string(data))
}

func (u CancelDeploymentRoutesMissing) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentMissing1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissing1, "", true)
	}

	if u.CancelDeploymentMissing2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRoutesMissing: all fields are null")
}

type RoutesLocale struct {
	Redirect map[string]string `json:"redirect,omitempty"`
	Cookie   *string           `json:"cookie,omitempty"`
}

func (o *RoutesLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *RoutesLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

// CancelDeploymentRoutes1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type CancelDeploymentRoutes1 struct {
	Src           string                          `json:"src"`
	Dest          *string                         `json:"dest,omitempty"`
	Headers       map[string]string               `json:"headers,omitempty"`
	Methods       []string                        `json:"methods,omitempty"`
	Continue      *bool                           `json:"continue,omitempty"`
	Override      *bool                           `json:"override,omitempty"`
	CaseSensitive *bool                           `json:"caseSensitive,omitempty"`
	Check         *bool                           `json:"check,omitempty"`
	Important     *bool                           `json:"important,omitempty"`
	Status        *float64                        `json:"status,omitempty"`
	Has           []CancelDeploymentRoutesHas     `json:"has,omitempty"`
	Missing       []CancelDeploymentRoutesMissing `json:"missing,omitempty"`
	Locale        *RoutesLocale                   `json:"locale,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string `json:"middlewareRawSrc,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
}

func (o *CancelDeploymentRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CancelDeploymentRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeploymentRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CancelDeploymentRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CancelDeploymentRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CancelDeploymentRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CancelDeploymentRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CancelDeploymentRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CancelDeploymentRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CancelDeploymentRoutes1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CancelDeploymentRoutes1) GetHas() []CancelDeploymentRoutesHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CancelDeploymentRoutes1) GetMissing() []CancelDeploymentRoutesMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CancelDeploymentRoutes1) GetLocale() *RoutesLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CancelDeploymentRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CancelDeploymentRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CancelDeploymentRoutes1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

type CancelDeploymentRoutesType string

const (
	CancelDeploymentRoutesTypeCancelDeploymentRoutes1 CancelDeploymentRoutesType = "cancelDeployment_routes_1"
	CancelDeploymentRoutesTypeCancelDeploymentRoutes2 CancelDeploymentRoutesType = "cancelDeployment_routes_2"
	CancelDeploymentRoutesTypeCancelDeploymentRoutes3 CancelDeploymentRoutesType = "cancelDeployment_routes_3"
)

type CancelDeploymentRoutes struct {
	CancelDeploymentRoutes1 *CancelDeploymentRoutes1
	CancelDeploymentRoutes2 *CancelDeploymentRoutes2
	CancelDeploymentRoutes3 *CancelDeploymentRoutes3

	Type CancelDeploymentRoutesType
}

func CreateCancelDeploymentRoutesCancelDeploymentRoutes1(cancelDeploymentRoutes1 CancelDeploymentRoutes1) CancelDeploymentRoutes {
	typ := CancelDeploymentRoutesTypeCancelDeploymentRoutes1

	return CancelDeploymentRoutes{
		CancelDeploymentRoutes1: &cancelDeploymentRoutes1,
		Type:                    typ,
	}
}

func CreateCancelDeploymentRoutesCancelDeploymentRoutes2(cancelDeploymentRoutes2 CancelDeploymentRoutes2) CancelDeploymentRoutes {
	typ := CancelDeploymentRoutesTypeCancelDeploymentRoutes2

	return CancelDeploymentRoutes{
		CancelDeploymentRoutes2: &cancelDeploymentRoutes2,
		Type:                    typ,
	}
}

func CreateCancelDeploymentRoutesCancelDeploymentRoutes3(cancelDeploymentRoutes3 CancelDeploymentRoutes3) CancelDeploymentRoutes {
	typ := CancelDeploymentRoutesTypeCancelDeploymentRoutes3

	return CancelDeploymentRoutes{
		CancelDeploymentRoutes3: &cancelDeploymentRoutes3,
		Type:                    typ,
	}
}

func (u *CancelDeploymentRoutes) UnmarshalJSON(data []byte) error {

	var cancelDeploymentRoutes3 CancelDeploymentRoutes3 = CancelDeploymentRoutes3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoutes3, "", true, true); err == nil {
		u.CancelDeploymentRoutes3 = &cancelDeploymentRoutes3
		u.Type = CancelDeploymentRoutesTypeCancelDeploymentRoutes3
		return nil
	}

	var cancelDeploymentRoutes2 CancelDeploymentRoutes2 = CancelDeploymentRoutes2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoutes2, "", true, true); err == nil {
		u.CancelDeploymentRoutes2 = &cancelDeploymentRoutes2
		u.Type = CancelDeploymentRoutesTypeCancelDeploymentRoutes2
		return nil
	}

	var cancelDeploymentRoutes1 CancelDeploymentRoutes1 = CancelDeploymentRoutes1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoutes1, "", true, true); err == nil {
		u.CancelDeploymentRoutes1 = &cancelDeploymentRoutes1
		u.Type = CancelDeploymentRoutesTypeCancelDeploymentRoutes1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRoutes", string(data))
}

func (u CancelDeploymentRoutes) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentRoutes1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoutes1, "", true)
	}

	if u.CancelDeploymentRoutes2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoutes2, "", true)
	}

	if u.CancelDeploymentRoutes3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoutes3, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRoutes: all fields are null")
}

type CancelDeploymentGitRepoDeploymentsResponseType string

const (
	CancelDeploymentGitRepoDeploymentsResponseTypeBitbucket CancelDeploymentGitRepoDeploymentsResponseType = "bitbucket"
)

func (e CancelDeploymentGitRepoDeploymentsResponseType) ToPointer() *CancelDeploymentGitRepoDeploymentsResponseType {
	return &e
}
func (e *CancelDeploymentGitRepoDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitRepoDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoDeploymentsResponseType: %v", v)
	}
}

type CancelDeploymentGitRepoDeploymentsResponseOwnerType string

const (
	CancelDeploymentGitRepoDeploymentsResponseOwnerTypeUser CancelDeploymentGitRepoDeploymentsResponseOwnerType = "user"
	CancelDeploymentGitRepoDeploymentsResponseOwnerTypeTeam CancelDeploymentGitRepoDeploymentsResponseOwnerType = "team"
)

func (e CancelDeploymentGitRepoDeploymentsResponseOwnerType) ToPointer() *CancelDeploymentGitRepoDeploymentsResponseOwnerType {
	return &e
}
func (e *CancelDeploymentGitRepoDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentGitRepoDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoDeploymentsResponseOwnerType: %v", v)
	}
}

type CancelDeploymentGitRepo3 struct {
	Owner         string                                              `json:"owner"`
	RepoUUID      string                                              `json:"repoUuid"`
	Slug          string                                              `json:"slug"`
	Type          CancelDeploymentGitRepoDeploymentsResponseType      `json:"type"`
	WorkspaceUUID string                                              `json:"workspaceUuid"`
	Path          string                                              `json:"path"`
	DefaultBranch string                                              `json:"defaultBranch"`
	Name          string                                              `json:"name"`
	Private       bool                                                `json:"private"`
	OwnerType     CancelDeploymentGitRepoDeploymentsResponseOwnerType `json:"ownerType"`
}

func (o *CancelDeploymentGitRepo3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeploymentGitRepo3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeploymentGitRepo3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentGitRepo3) GetType() CancelDeploymentGitRepoDeploymentsResponseType {
	if o == nil {
		return CancelDeploymentGitRepoDeploymentsResponseType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepo3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *CancelDeploymentGitRepo3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepo3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepo3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepo3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepo3) GetOwnerType() CancelDeploymentGitRepoDeploymentsResponseOwnerType {
	if o == nil {
		return CancelDeploymentGitRepoDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoDeploymentsType string

const (
	CancelDeploymentGitRepoDeploymentsTypeGithub CancelDeploymentGitRepoDeploymentsType = "github"
)

func (e CancelDeploymentGitRepoDeploymentsType) ToPointer() *CancelDeploymentGitRepoDeploymentsType {
	return &e
}
func (e *CancelDeploymentGitRepoDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitRepoDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoDeploymentsType: %v", v)
	}
}

type CancelDeploymentGitRepoDeploymentsOwnerType string

const (
	CancelDeploymentGitRepoDeploymentsOwnerTypeUser CancelDeploymentGitRepoDeploymentsOwnerType = "user"
	CancelDeploymentGitRepoDeploymentsOwnerTypeTeam CancelDeploymentGitRepoDeploymentsOwnerType = "team"
)

func (e CancelDeploymentGitRepoDeploymentsOwnerType) ToPointer() *CancelDeploymentGitRepoDeploymentsOwnerType {
	return &e
}
func (e *CancelDeploymentGitRepoDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentGitRepoDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoDeploymentsOwnerType: %v", v)
	}
}

type CancelDeploymentGitRepo2 struct {
	Org           string                                      `json:"org"`
	Repo          string                                      `json:"repo"`
	RepoID        float64                                     `json:"repoId"`
	Type          CancelDeploymentGitRepoDeploymentsType      `json:"type"`
	RepoOwnerID   string                                      `json:"repoOwnerId"`
	Path          string                                      `json:"path"`
	DefaultBranch string                                      `json:"defaultBranch"`
	Name          string                                      `json:"name"`
	Private       bool                                        `json:"private"`
	OwnerType     CancelDeploymentGitRepoDeploymentsOwnerType `json:"ownerType"`
}

func (o *CancelDeploymentGitRepo2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitRepo2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitRepo2) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CancelDeploymentGitRepo2) GetType() CancelDeploymentGitRepoDeploymentsType {
	if o == nil {
		return CancelDeploymentGitRepoDeploymentsType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepo2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *CancelDeploymentGitRepo2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepo2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepo2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepo2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepo2) GetOwnerType() CancelDeploymentGitRepoDeploymentsOwnerType {
	if o == nil {
		return CancelDeploymentGitRepoDeploymentsOwnerType("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoType string

const (
	CancelDeploymentGitRepoTypeGitlab CancelDeploymentGitRepoType = "gitlab"
)

func (e CancelDeploymentGitRepoType) ToPointer() *CancelDeploymentGitRepoType {
	return &e
}
func (e *CancelDeploymentGitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoType: %v", v)
	}
}

type CancelDeploymentGitRepoOwnerType string

const (
	CancelDeploymentGitRepoOwnerTypeUser CancelDeploymentGitRepoOwnerType = "user"
	CancelDeploymentGitRepoOwnerTypeTeam CancelDeploymentGitRepoOwnerType = "team"
)

func (e CancelDeploymentGitRepoOwnerType) ToPointer() *CancelDeploymentGitRepoOwnerType {
	return &e
}
func (e *CancelDeploymentGitRepoOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentGitRepoOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoOwnerType: %v", v)
	}
}

type CancelDeploymentGitRepo1 struct {
	Namespace     string                           `json:"namespace"`
	ProjectID     float64                          `json:"projectId"`
	Type          CancelDeploymentGitRepoType      `json:"type"`
	URL           string                           `json:"url"`
	Path          string                           `json:"path"`
	DefaultBranch string                           `json:"defaultBranch"`
	Name          string                           `json:"name"`
	Private       bool                             `json:"private"`
	OwnerType     CancelDeploymentGitRepoOwnerType `json:"ownerType"`
}

func (o *CancelDeploymentGitRepo1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CancelDeploymentGitRepo1) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *CancelDeploymentGitRepo1) GetType() CancelDeploymentGitRepoType {
	if o == nil {
		return CancelDeploymentGitRepoType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepo1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CancelDeploymentGitRepo1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepo1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepo1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepo1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepo1) GetOwnerType() CancelDeploymentGitRepoOwnerType {
	if o == nil {
		return CancelDeploymentGitRepoOwnerType("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoUnionType string

const (
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo1 CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_1"
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo2 CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_2"
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo3 CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_3"
)

type CancelDeploymentGitRepo struct {
	CancelDeploymentGitRepo1 *CancelDeploymentGitRepo1
	CancelDeploymentGitRepo2 *CancelDeploymentGitRepo2
	CancelDeploymentGitRepo3 *CancelDeploymentGitRepo3

	Type CancelDeploymentGitRepoUnionType
}

func CreateCancelDeploymentGitRepoCancelDeploymentGitRepo1(cancelDeploymentGitRepo1 CancelDeploymentGitRepo1) CancelDeploymentGitRepo {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo1

	return CancelDeploymentGitRepo{
		CancelDeploymentGitRepo1: &cancelDeploymentGitRepo1,
		Type:                     typ,
	}
}

func CreateCancelDeploymentGitRepoCancelDeploymentGitRepo2(cancelDeploymentGitRepo2 CancelDeploymentGitRepo2) CancelDeploymentGitRepo {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo2

	return CancelDeploymentGitRepo{
		CancelDeploymentGitRepo2: &cancelDeploymentGitRepo2,
		Type:                     typ,
	}
}

func CreateCancelDeploymentGitRepoCancelDeploymentGitRepo3(cancelDeploymentGitRepo3 CancelDeploymentGitRepo3) CancelDeploymentGitRepo {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo3

	return CancelDeploymentGitRepo{
		CancelDeploymentGitRepo3: &cancelDeploymentGitRepo3,
		Type:                     typ,
	}
}

func (u *CancelDeploymentGitRepo) UnmarshalJSON(data []byte) error {

	var cancelDeploymentGitRepo1 CancelDeploymentGitRepo1 = CancelDeploymentGitRepo1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepo1, "", true, true); err == nil {
		u.CancelDeploymentGitRepo1 = &cancelDeploymentGitRepo1
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo1
		return nil
	}

	var cancelDeploymentGitRepo2 CancelDeploymentGitRepo2 = CancelDeploymentGitRepo2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepo2, "", true, true); err == nil {
		u.CancelDeploymentGitRepo2 = &cancelDeploymentGitRepo2
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo2
		return nil
	}

	var cancelDeploymentGitRepo3 CancelDeploymentGitRepo3 = CancelDeploymentGitRepo3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepo3, "", true, true); err == nil {
		u.CancelDeploymentGitRepo3 = &cancelDeploymentGitRepo3
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepo3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitRepo", string(data))
}

func (u CancelDeploymentGitRepo) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentGitRepo1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepo1, "", true)
	}

	if u.CancelDeploymentGitRepo2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepo2, "", true)
	}

	if u.CancelDeploymentGitRepo3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepo3, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitRepo: all fields are null")
}

type CancelDeploymentAliasAssignedAtType string

const (
	CancelDeploymentAliasAssignedAtTypeNumber  CancelDeploymentAliasAssignedAtType = "number"
	CancelDeploymentAliasAssignedAtTypeBoolean CancelDeploymentAliasAssignedAtType = "boolean"
)

type CancelDeploymentAliasAssignedAt struct {
	Number  *float64
	Boolean *bool

	Type CancelDeploymentAliasAssignedAtType
}

func CreateCancelDeploymentAliasAssignedAtNumber(number float64) CancelDeploymentAliasAssignedAt {
	typ := CancelDeploymentAliasAssignedAtTypeNumber

	return CancelDeploymentAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateCancelDeploymentAliasAssignedAtBoolean(boolean bool) CancelDeploymentAliasAssignedAt {
	typ := CancelDeploymentAliasAssignedAtTypeBoolean

	return CancelDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CancelDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CancelDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentAliasAssignedAt", string(data))
}

func (u CancelDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentAliasAssignedAt: all fields are null")
}

type CancelDeploymentDeploymentsReadyState string

const (
	CancelDeploymentDeploymentsReadyStateInitializing CancelDeploymentDeploymentsReadyState = "INITIALIZING"
	CancelDeploymentDeploymentsReadyStateBuilding     CancelDeploymentDeploymentsReadyState = "BUILDING"
	CancelDeploymentDeploymentsReadyStateReady        CancelDeploymentDeploymentsReadyState = "READY"
	CancelDeploymentDeploymentsReadyStateError        CancelDeploymentDeploymentsReadyState = "ERROR"
)

func (e CancelDeploymentDeploymentsReadyState) ToPointer() *CancelDeploymentDeploymentsReadyState {
	return &e
}
func (e *CancelDeploymentDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "BUILDING":
		fallthrough
	case "READY":
		fallthrough
	case "ERROR":
		*e = CancelDeploymentDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentDeploymentsReadyState: %v", v)
	}
}

type CancelDeploymentOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *CancelDeploymentOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

type CancelDeploymentLambdas struct {
	ID           string                                 `json:"id"`
	CreatedAt    *float64                               `json:"createdAt,omitempty"`
	Entrypoint   *string                                `json:"entrypoint,omitempty"`
	ReadyState   *CancelDeploymentDeploymentsReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                               `json:"readyStateAt,omitempty"`
	Output       []CancelDeploymentOutput               `json:"output"`
}

func (o *CancelDeploymentLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CancelDeploymentLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CancelDeploymentLambdas) GetReadyState() *CancelDeploymentDeploymentsReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CancelDeploymentLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *CancelDeploymentLambdas) GetOutput() []CancelDeploymentOutput {
	if o == nil {
		return []CancelDeploymentOutput{}
	}
	return o.Output
}

// Project - The public project information associated with the deployment.
type Project struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *Project) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// CancelDeploymentReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type CancelDeploymentReadyState string

const (
	CancelDeploymentReadyStateInitializing CancelDeploymentReadyState = "INITIALIZING"
	CancelDeploymentReadyStateBuilding     CancelDeploymentReadyState = "BUILDING"
	CancelDeploymentReadyStateReady        CancelDeploymentReadyState = "READY"
	CancelDeploymentReadyStateError        CancelDeploymentReadyState = "ERROR"
	CancelDeploymentReadyStateQueued       CancelDeploymentReadyState = "QUEUED"
	CancelDeploymentReadyStateCanceled     CancelDeploymentReadyState = "CANCELED"
)

func (e CancelDeploymentReadyState) ToPointer() *CancelDeploymentReadyState {
	return &e
}
func (e *CancelDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "BUILDING":
		fallthrough
	case "READY":
		fallthrough
	case "ERROR":
		fallthrough
	case "QUEUED":
		fallthrough
	case "CANCELED":
		*e = CancelDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentReadyState: %v", v)
	}
}

// CancelDeploymentReadySubstate - The substate of the deployment when the state is "READY"
type CancelDeploymentReadySubstate string

const (
	CancelDeploymentReadySubstateStaged   CancelDeploymentReadySubstate = "STAGED"
	CancelDeploymentReadySubstatePromoted CancelDeploymentReadySubstate = "PROMOTED"
)

func (e CancelDeploymentReadySubstate) ToPointer() *CancelDeploymentReadySubstate {
	return &e
}
func (e *CancelDeploymentReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CancelDeploymentReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentReadySubstate: %v", v)
	}
}

// CancelDeploymentSource - Where was the deployment created from
type CancelDeploymentSource string

const (
	CancelDeploymentSourceAPITriggerGitDeploy CancelDeploymentSource = "api-trigger-git-deploy"
	CancelDeploymentSourceCli                 CancelDeploymentSource = "cli"
	CancelDeploymentSourceCloneRepo           CancelDeploymentSource = "clone/repo"
	CancelDeploymentSourceGit                 CancelDeploymentSource = "git"
	CancelDeploymentSourceImport              CancelDeploymentSource = "import"
	CancelDeploymentSourceImportRepo          CancelDeploymentSource = "import/repo"
)

func (e CancelDeploymentSource) ToPointer() *CancelDeploymentSource {
	return &e
}
func (e *CancelDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		*e = CancelDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentSource: %v", v)
	}
}

// CancelDeploymentTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type CancelDeploymentTarget string

const (
	CancelDeploymentTargetStaging    CancelDeploymentTarget = "staging"
	CancelDeploymentTargetProduction CancelDeploymentTarget = "production"
)

func (e CancelDeploymentTarget) ToPointer() *CancelDeploymentTarget {
	return &e
}
func (e *CancelDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CancelDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTarget: %v", v)
	}
}

// CancelDeploymentTeam - The team that owns the deployment if any
type CancelDeploymentTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
}

func (o *CancelDeploymentTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type CancelDeploymentType string

const (
	CancelDeploymentTypeLambdas CancelDeploymentType = "LAMBDAS"
)

func (e CancelDeploymentType) ToPointer() *CancelDeploymentType {
	return &e
}
func (e *CancelDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CancelDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentType: %v", v)
	}
}

// CancelDeploymentAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type CancelDeploymentAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CancelDeploymentAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeploymentAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CancelDeploymentAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *CancelDeploymentAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeploymentAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CancelDeploymentAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CancelDeploymentAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type CancelDeploymentChecksState string

const (
	CancelDeploymentChecksStateRegistered CancelDeploymentChecksState = "registered"
	CancelDeploymentChecksStateRunning    CancelDeploymentChecksState = "running"
	CancelDeploymentChecksStateCompleted  CancelDeploymentChecksState = "completed"
)

func (e CancelDeploymentChecksState) ToPointer() *CancelDeploymentChecksState {
	return &e
}
func (e *CancelDeploymentChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CancelDeploymentChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentChecksState: %v", v)
	}
}

type CancelDeploymentChecksConclusion string

const (
	CancelDeploymentChecksConclusionSucceeded CancelDeploymentChecksConclusion = "succeeded"
	CancelDeploymentChecksConclusionFailed    CancelDeploymentChecksConclusion = "failed"
	CancelDeploymentChecksConclusionSkipped   CancelDeploymentChecksConclusion = "skipped"
	CancelDeploymentChecksConclusionCanceled  CancelDeploymentChecksConclusion = "canceled"
)

func (e CancelDeploymentChecksConclusion) ToPointer() *CancelDeploymentChecksConclusion {
	return &e
}
func (e *CancelDeploymentChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CancelDeploymentChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentChecksConclusion: %v", v)
	}
}

// CancelDeploymentCreator - Information about the deployment creator
type CancelDeploymentCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
}

func (o *CancelDeploymentCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CancelDeploymentCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CancelDeploymentCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type string

const (
	CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9TypeBitbucket CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type = "bitbucket"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type GitSource9 struct {
	Type          CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Ref           string                                                                          `json:"ref"`
	Sha           string                                                                          `json:"sha"`
	Owner         *string                                                                         `json:"owner,omitempty"`
	Slug          *string                                                                         `json:"slug,omitempty"`
	WorkspaceUUID string                                                                          `json:"workspaceUuid"`
	RepoUUID      string                                                                          `json:"repoUuid"`
}

func (o *GitSource9) GetType() CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *GitSource9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GitSource9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GitSource9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GitSource9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GitSource9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GitSource9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type string

const (
	CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8TypeGitlab CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type = "gitlab"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type GitSource8 struct {
	Type      CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Ref       string                                                                          `json:"ref"`
	Sha       string                                                                          `json:"sha"`
	ProjectID float64                                                                         `json:"projectId"`
}

func (o *GitSource8) GetType() CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *GitSource8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GitSource8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GitSource8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type string

const (
	CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7TypeGithub CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type = "github"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type GitSource7 struct {
	Type   CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Ref    string                                                                          `json:"ref"`
	Sha    string                                                                          `json:"sha"`
	RepoID float64                                                                         `json:"repoId"`
	Org    *string                                                                         `json:"org,omitempty"`
	Repo   *string                                                                         `json:"repo,omitempty"`
}

func (o *GitSource7) GetType() CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *GitSource7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GitSource7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GitSource7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GitSource7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GitSource7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyTypeCustom CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = "custom"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GitSource6 struct {
	Type   CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Ref    string                                                                         `json:"ref"`
	Sha    string                                                                         `json:"sha"`
	GitURL string                                                                         `json:"gitUrl"`
}

func (o *GitSource6) GetType() CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GitSource6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GitSource6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GitSource6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType string

const (
	CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONTypeBitbucket CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = "bitbucket"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

type CancelDeploymentGitSource5 struct {
	Type  CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType `json:"type"`
	Owner string                                                             `json:"owner"`
	Slug  string                                                             `json:"slug"`
	Ref   *string                                                            `json:"ref,omitempty"`
	Sha   *string                                                            `json:"sha,omitempty"`
	PrID  *float64                                                           `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSource5) GetType() CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeploymentGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentGitSource5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSource5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceDeploymentsResponse200Type string

const (
	CancelDeploymentGitSourceDeploymentsResponse200TypeBitbucket CancelDeploymentGitSourceDeploymentsResponse200Type = "bitbucket"
)

func (e CancelDeploymentGitSourceDeploymentsResponse200Type) ToPointer() *CancelDeploymentGitSourceDeploymentsResponse200Type {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponse200Type: %v", v)
	}
}

type CancelDeploymentGitSource4 struct {
	Type          CancelDeploymentGitSourceDeploymentsResponse200Type `json:"type"`
	WorkspaceUUID *string                                             `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                              `json:"repoUuid"`
	Ref           *string                                             `json:"ref,omitempty"`
	Sha           *string                                             `json:"sha,omitempty"`
	PrID          *float64                                            `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSource4) GetType() CancelDeploymentGitSourceDeploymentsResponse200Type {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponse200Type("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *CancelDeploymentGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeploymentGitSource4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSource4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceDeploymentsResponseType string

const (
	CancelDeploymentGitSourceDeploymentsResponseTypeGitlab CancelDeploymentGitSourceDeploymentsResponseType = "gitlab"
)

func (e CancelDeploymentGitSourceDeploymentsResponseType) ToPointer() *CancelDeploymentGitSourceDeploymentsResponseType {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitSourceDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsResponseType: %v", v)
	}
}

type CancelDeploymentGitSourceProjectIDType string

const (
	CancelDeploymentGitSourceProjectIDTypeStr    CancelDeploymentGitSourceProjectIDType = "str"
	CancelDeploymentGitSourceProjectIDTypeNumber CancelDeploymentGitSourceProjectIDType = "number"
)

type CancelDeploymentGitSourceProjectID struct {
	Str    *string
	Number *float64

	Type CancelDeploymentGitSourceProjectIDType
}

func CreateCancelDeploymentGitSourceProjectIDStr(str string) CancelDeploymentGitSourceProjectID {
	typ := CancelDeploymentGitSourceProjectIDTypeStr

	return CancelDeploymentGitSourceProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentGitSourceProjectIDNumber(number float64) CancelDeploymentGitSourceProjectID {
	typ := CancelDeploymentGitSourceProjectIDTypeNumber

	return CancelDeploymentGitSourceProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentGitSourceProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentGitSourceProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentGitSourceProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitSourceProjectID", string(data))
}

func (u CancelDeploymentGitSourceProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitSourceProjectID: all fields are null")
}

type CancelDeploymentGitSource3 struct {
	Type      CancelDeploymentGitSourceDeploymentsResponseType `json:"type"`
	ProjectID CancelDeploymentGitSourceProjectID               `json:"projectId"`
	Ref       *string                                          `json:"ref,omitempty"`
	Sha       *string                                          `json:"sha,omitempty"`
	PrID      *float64                                         `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSource3) GetType() CancelDeploymentGitSourceDeploymentsResponseType {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsResponseType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSource3) GetProjectID() CancelDeploymentGitSourceProjectID {
	if o == nil {
		return CancelDeploymentGitSourceProjectID{}
	}
	return o.ProjectID
}

func (o *CancelDeploymentGitSource3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSource3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceDeploymentsType string

const (
	CancelDeploymentGitSourceDeploymentsTypeGithub CancelDeploymentGitSourceDeploymentsType = "github"
)

func (e CancelDeploymentGitSourceDeploymentsType) ToPointer() *CancelDeploymentGitSourceDeploymentsType {
	return &e
}
func (e *CancelDeploymentGitSourceDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceDeploymentsType: %v", v)
	}
}

type CancelDeploymentGitSource2 struct {
	Type CancelDeploymentGitSourceDeploymentsType `json:"type"`
	Org  string                                   `json:"org"`
	Repo string                                   `json:"repo"`
	Ref  *string                                  `json:"ref,omitempty"`
	Sha  *string                                  `json:"sha,omitempty"`
	PrID *float64                                 `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSource2) GetType() CancelDeploymentGitSourceDeploymentsType {
	if o == nil {
		return CancelDeploymentGitSourceDeploymentsType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitSource2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSource2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceType string

const (
	CancelDeploymentGitSourceTypeGithub CancelDeploymentGitSourceType = "github"
)

func (e CancelDeploymentGitSourceType) ToPointer() *CancelDeploymentGitSourceType {
	return &e
}
func (e *CancelDeploymentGitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceType: %v", v)
	}
}

type CancelDeploymentGitSourceRepoIDType string

const (
	CancelDeploymentGitSourceRepoIDTypeStr    CancelDeploymentGitSourceRepoIDType = "str"
	CancelDeploymentGitSourceRepoIDTypeNumber CancelDeploymentGitSourceRepoIDType = "number"
)

type CancelDeploymentGitSourceRepoID struct {
	Str    *string
	Number *float64

	Type CancelDeploymentGitSourceRepoIDType
}

func CreateCancelDeploymentGitSourceRepoIDStr(str string) CancelDeploymentGitSourceRepoID {
	typ := CancelDeploymentGitSourceRepoIDTypeStr

	return CancelDeploymentGitSourceRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentGitSourceRepoIDNumber(number float64) CancelDeploymentGitSourceRepoID {
	typ := CancelDeploymentGitSourceRepoIDTypeNumber

	return CancelDeploymentGitSourceRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentGitSourceRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentGitSourceRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentGitSourceRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitSourceRepoID", string(data))
}

func (u CancelDeploymentGitSourceRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitSourceRepoID: all fields are null")
}

type CancelDeploymentGitSource1 struct {
	Type   CancelDeploymentGitSourceType   `json:"type"`
	RepoID CancelDeploymentGitSourceRepoID `json:"repoId"`
	Ref    *string                         `json:"ref,omitempty"`
	Sha    *string                         `json:"sha,omitempty"`
	PrID   *float64                        `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSource1) GetType() CancelDeploymentGitSourceType {
	if o == nil {
		return CancelDeploymentGitSourceType("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSource1) GetRepoID() CancelDeploymentGitSourceRepoID {
	if o == nil {
		return CancelDeploymentGitSourceRepoID{}
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSource1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSource1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceUnionType string

const (
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource1 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource2 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource3 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_3"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource4 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_4"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource5 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_5"
	CancelDeploymentGitSourceUnionTypeGitSource6                 CancelDeploymentGitSourceUnionType = "gitSource_6"
	CancelDeploymentGitSourceUnionTypeGitSource7                 CancelDeploymentGitSourceUnionType = "gitSource_7"
	CancelDeploymentGitSourceUnionTypeGitSource8                 CancelDeploymentGitSourceUnionType = "gitSource_8"
	CancelDeploymentGitSourceUnionTypeGitSource9                 CancelDeploymentGitSourceUnionType = "gitSource_9"
)

type CancelDeploymentGitSource struct {
	CancelDeploymentGitSource1 *CancelDeploymentGitSource1
	CancelDeploymentGitSource2 *CancelDeploymentGitSource2
	CancelDeploymentGitSource3 *CancelDeploymentGitSource3
	CancelDeploymentGitSource4 *CancelDeploymentGitSource4
	CancelDeploymentGitSource5 *CancelDeploymentGitSource5
	GitSource6                 *GitSource6
	GitSource7                 *GitSource7
	GitSource8                 *GitSource8
	GitSource9                 *GitSource9

	Type CancelDeploymentGitSourceUnionType
}

func CreateCancelDeploymentGitSourceCancelDeploymentGitSource1(cancelDeploymentGitSource1 CancelDeploymentGitSource1) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource1

	return CancelDeploymentGitSource{
		CancelDeploymentGitSource1: &cancelDeploymentGitSource1,
		Type:                       typ,
	}
}

func CreateCancelDeploymentGitSourceCancelDeploymentGitSource2(cancelDeploymentGitSource2 CancelDeploymentGitSource2) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource2

	return CancelDeploymentGitSource{
		CancelDeploymentGitSource2: &cancelDeploymentGitSource2,
		Type:                       typ,
	}
}

func CreateCancelDeploymentGitSourceCancelDeploymentGitSource3(cancelDeploymentGitSource3 CancelDeploymentGitSource3) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource3

	return CancelDeploymentGitSource{
		CancelDeploymentGitSource3: &cancelDeploymentGitSource3,
		Type:                       typ,
	}
}

func CreateCancelDeploymentGitSourceCancelDeploymentGitSource4(cancelDeploymentGitSource4 CancelDeploymentGitSource4) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource4

	return CancelDeploymentGitSource{
		CancelDeploymentGitSource4: &cancelDeploymentGitSource4,
		Type:                       typ,
	}
}

func CreateCancelDeploymentGitSourceCancelDeploymentGitSource5(cancelDeploymentGitSource5 CancelDeploymentGitSource5) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource5

	return CancelDeploymentGitSource{
		CancelDeploymentGitSource5: &cancelDeploymentGitSource5,
		Type:                       typ,
	}
}

func CreateCancelDeploymentGitSourceGitSource6(gitSource6 GitSource6) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeGitSource6

	return CancelDeploymentGitSource{
		GitSource6: &gitSource6,
		Type:       typ,
	}
}

func CreateCancelDeploymentGitSourceGitSource7(gitSource7 GitSource7) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeGitSource7

	return CancelDeploymentGitSource{
		GitSource7: &gitSource7,
		Type:       typ,
	}
}

func CreateCancelDeploymentGitSourceGitSource8(gitSource8 GitSource8) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeGitSource8

	return CancelDeploymentGitSource{
		GitSource8: &gitSource8,
		Type:       typ,
	}
}

func CreateCancelDeploymentGitSourceGitSource9(gitSource9 GitSource9) CancelDeploymentGitSource {
	typ := CancelDeploymentGitSourceUnionTypeGitSource9

	return CancelDeploymentGitSource{
		GitSource9: &gitSource9,
		Type:       typ,
	}
}

func (u *CancelDeploymentGitSource) UnmarshalJSON(data []byte) error {

	var gitSource6 GitSource6 = GitSource6{}
	if err := utils.UnmarshalJSON(data, &gitSource6, "", true, true); err == nil {
		u.GitSource6 = &gitSource6
		u.Type = CancelDeploymentGitSourceUnionTypeGitSource6
		return nil
	}

	var gitSource8 GitSource8 = GitSource8{}
	if err := utils.UnmarshalJSON(data, &gitSource8, "", true, true); err == nil {
		u.GitSource8 = &gitSource8
		u.Type = CancelDeploymentGitSourceUnionTypeGitSource8
		return nil
	}

	var cancelDeploymentGitSource1 CancelDeploymentGitSource1 = CancelDeploymentGitSource1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSource1, "", true, true); err == nil {
		u.CancelDeploymentGitSource1 = &cancelDeploymentGitSource1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource1
		return nil
	}

	var cancelDeploymentGitSource3 CancelDeploymentGitSource3 = CancelDeploymentGitSource3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSource3, "", true, true); err == nil {
		u.CancelDeploymentGitSource3 = &cancelDeploymentGitSource3
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource3
		return nil
	}

	var cancelDeploymentGitSource2 CancelDeploymentGitSource2 = CancelDeploymentGitSource2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSource2, "", true, true); err == nil {
		u.CancelDeploymentGitSource2 = &cancelDeploymentGitSource2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource2
		return nil
	}

	var cancelDeploymentGitSource4 CancelDeploymentGitSource4 = CancelDeploymentGitSource4{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSource4, "", true, true); err == nil {
		u.CancelDeploymentGitSource4 = &cancelDeploymentGitSource4
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource4
		return nil
	}

	var cancelDeploymentGitSource5 CancelDeploymentGitSource5 = CancelDeploymentGitSource5{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSource5, "", true, true); err == nil {
		u.CancelDeploymentGitSource5 = &cancelDeploymentGitSource5
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSource5
		return nil
	}

	var gitSource7 GitSource7 = GitSource7{}
	if err := utils.UnmarshalJSON(data, &gitSource7, "", true, true); err == nil {
		u.GitSource7 = &gitSource7
		u.Type = CancelDeploymentGitSourceUnionTypeGitSource7
		return nil
	}

	var gitSource9 GitSource9 = GitSource9{}
	if err := utils.UnmarshalJSON(data, &gitSource9, "", true, true); err == nil {
		u.GitSource9 = &gitSource9
		u.Type = CancelDeploymentGitSourceUnionTypeGitSource9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitSource", string(data))
}

func (u CancelDeploymentGitSource) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentGitSource1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSource1, "", true)
	}

	if u.CancelDeploymentGitSource2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSource2, "", true)
	}

	if u.CancelDeploymentGitSource3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSource3, "", true)
	}

	if u.CancelDeploymentGitSource4 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSource4, "", true)
	}

	if u.CancelDeploymentGitSource5 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSource5, "", true)
	}

	if u.GitSource6 != nil {
		return utils.MarshalJSON(u.GitSource6, "", true)
	}

	if u.GitSource7 != nil {
		return utils.MarshalJSON(u.GitSource7, "", true)
	}

	if u.GitSource8 != nil {
		return utils.MarshalJSON(u.GitSource8, "", true)
	}

	if u.GitSource9 != nil {
		return utils.MarshalJSON(u.GitSource9, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitSource: all fields are null")
}

type CancelDeploymentResponseBody struct {
	Build  CancelDeploymentBuild    `json:"build"`
	Builds []CancelDeploymentBuilds `json:"builds,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
	Crons []CancelDeploymentCrons `json:"crons,omitempty"`
	// The keys of the environment variables that were assigned during runtime
	Env []string `json:"env"`
	// An object used to configure your Serverless Functions
	Functions map[string]CancelDeploymentFunctions `json:"functions,omitempty"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool `json:"isInConcurrentBuildsQueue"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
	PassiveConnectConfigurationID *string `json:"passiveConnectConfigurationId,omitempty"`
	// The pricing plan the deployment was made under
	Plan CancelDeploymentPlan `json:"plan"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes          []CancelDeploymentRoutes         `json:"routes"`
	GitRepo         *CancelDeploymentGitRepo         `json:"gitRepo,omitempty"`
	AliasAssignedAt *CancelDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	Lambdas         []CancelDeploymentLambdas        `json:"lambdas,omitempty"`
	// The public project information associated with the deployment.
	Project *Project `json:"project,omitempty"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState CancelDeploymentReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *CancelDeploymentReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// Where was the deployment created from
	Source *CancelDeploymentSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *CancelDeploymentTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *CancelDeploymentTeam `json:"team,omitempty"`
	Type CancelDeploymentType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned bool `json:"aliasAssigned"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *CancelDeploymentAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                           `json:"aliasFinal,omitempty"`
	AliasWarning            *CancelDeploymentAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                          `json:"automaticAliases,omitempty"`
	BootedAt                float64                           `json:"bootedAt"`
	BuildErrorAt            *float64                          `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                           `json:"buildingAt"`
	CanceledAt              *float64                          `json:"canceledAt,omitempty"`
	ChecksState             *CancelDeploymentChecksState      `json:"checksState,omitempty"`
	ChecksConclusion        *CancelDeploymentChecksConclusion `json:"checksConclusion,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// Information about the deployment creator
	Creator        CancelDeploymentCreator    `json:"creator"`
	ErrorCode      *string                    `json:"errorCode,omitempty"`
	ErrorLink      *string                    `json:"errorLink,omitempty"`
	ErrorMessage   *string                    `json:"errorMessage,omitempty"`
	ErrorStep      *string                    `json:"errorStep,omitempty"`
	PassiveRegions []string                   `json:"passiveRegions,omitempty"`
	GitSource      *CancelDeploymentGitSource `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
}

func (o *CancelDeploymentResponseBody) GetBuild() CancelDeploymentBuild {
	if o == nil {
		return CancelDeploymentBuild{}
	}
	return o.Build
}

func (o *CancelDeploymentResponseBody) GetBuilds() []CancelDeploymentBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CancelDeploymentResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CancelDeploymentResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CancelDeploymentResponseBody) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CancelDeploymentResponseBody) GetCrons() []CancelDeploymentCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CancelDeploymentResponseBody) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CancelDeploymentResponseBody) GetFunctions() map[string]CancelDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CancelDeploymentResponseBody) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CancelDeploymentResponseBody) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CancelDeploymentResponseBody) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CancelDeploymentResponseBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CancelDeploymentResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CancelDeploymentResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CancelDeploymentResponseBody) GetPlan() CancelDeploymentPlan {
	if o == nil {
		return CancelDeploymentPlan("")
	}
	return o.Plan
}

func (o *CancelDeploymentResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CancelDeploymentResponseBody) GetRoutes() []CancelDeploymentRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CancelDeploymentResponseBody) GetGitRepo() *CancelDeploymentGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CancelDeploymentResponseBody) GetAliasAssignedAt() *CancelDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CancelDeploymentResponseBody) GetLambdas() []CancelDeploymentLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CancelDeploymentResponseBody) GetProject() *Project {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CancelDeploymentResponseBody) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CancelDeploymentResponseBody) GetReadyState() CancelDeploymentReadyState {
	if o == nil {
		return CancelDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CancelDeploymentResponseBody) GetReadySubstate() *CancelDeploymentReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CancelDeploymentResponseBody) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CancelDeploymentResponseBody) GetSource() *CancelDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CancelDeploymentResponseBody) GetTarget() *CancelDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CancelDeploymentResponseBody) GetTeam() *CancelDeploymentTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CancelDeploymentResponseBody) GetType() CancelDeploymentType {
	if o == nil {
		return CancelDeploymentType("")
	}
	return o.Type
}

func (o *CancelDeploymentResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CancelDeploymentResponseBody) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CancelDeploymentResponseBody) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *CancelDeploymentResponseBody) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CancelDeploymentResponseBody) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *CancelDeploymentResponseBody) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CancelDeploymentResponseBody) GetAliasError() *CancelDeploymentAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CancelDeploymentResponseBody) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CancelDeploymentResponseBody) GetAliasWarning() *CancelDeploymentAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CancelDeploymentResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CancelDeploymentResponseBody) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CancelDeploymentResponseBody) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *CancelDeploymentResponseBody) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CancelDeploymentResponseBody) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *CancelDeploymentResponseBody) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelDeploymentResponseBody) GetChecksState() *CancelDeploymentChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CancelDeploymentResponseBody) GetChecksConclusion() *CancelDeploymentChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CancelDeploymentResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CancelDeploymentResponseBody) GetCreator() CancelDeploymentCreator {
	if o == nil {
		return CancelDeploymentCreator{}
	}
	return o.Creator
}

func (o *CancelDeploymentResponseBody) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CancelDeploymentResponseBody) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CancelDeploymentResponseBody) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CancelDeploymentResponseBody) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CancelDeploymentResponseBody) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *CancelDeploymentResponseBody) GetGitSource() *CancelDeploymentGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CancelDeploymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CancelDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *CancelDeploymentResponseBody
}

func (o *CancelDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CancelDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CancelDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CancelDeploymentResponse) GetObject() *CancelDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
