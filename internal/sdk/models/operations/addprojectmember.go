// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// Role - The project role of the member that will be added.
type Role string

const (
	RoleAdmin            Role = "ADMIN"
	RoleProjectDeveloper Role = "PROJECT_DEVELOPER"
	RoleProjectViewer    Role = "PROJECT_VIEWER"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type AddProjectMemberRequestBody struct {
	// The ID of the team member that should be added to this project.
	UID *string `json:"uid,omitempty"`
	// The username of the team member that should be added to this project.
	Username *string `json:"username,omitempty"`
	// The email of the team member that should be added to this project.
	Email *string `json:"email,omitempty"`
	// The project role of the member that will be added.
	Role Role `json:"role"`
}

func (o *AddProjectMemberRequestBody) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *AddProjectMemberRequestBody) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *AddProjectMemberRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *AddProjectMemberRequestBody) GetRole() Role {
	if o == nil {
		return Role("")
	}
	return o.Role
}

type AddProjectMemberRequest struct {
	// The ID or name of the Project.
	ProjectID string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                      `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *AddProjectMemberRequestBody `request:"mediaType=application/json"`
}

func (o *AddProjectMemberRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *AddProjectMemberRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *AddProjectMemberRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AddProjectMemberRequest) GetRequestBody() *AddProjectMemberRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// AddProjectMemberResponseBody - Responds with the project ID on success.
type AddProjectMemberResponseBody struct {
	ProjectID *string `json:"id,omitempty"`
}

func (o *AddProjectMemberResponseBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

type AddProjectMemberResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Responds with the project ID on success.
	Object *AddProjectMemberResponseBody
}

func (o *AddProjectMemberResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AddProjectMemberResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AddProjectMemberResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *AddProjectMemberResponse) GetObject() *AddProjectMemberResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
