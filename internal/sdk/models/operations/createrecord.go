// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

// CreateRecordRequestBodyDNSRequest10Type - Must be of type `HTTPS`.
type CreateRecordRequestBodyDNSRequest10Type string

const (
	CreateRecordRequestBodyDNSRequest10TypeHTTPS CreateRecordRequestBodyDNSRequest10Type = "HTTPS"
)

func (e CreateRecordRequestBodyDNSRequest10Type) ToPointer() *CreateRecordRequestBodyDNSRequest10Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HTTPS":
		*e = CreateRecordRequestBodyDNSRequest10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest10Type: %v", v)
	}
}

type CreateRecordRequestBodyHTTPS struct {
	Priority *float64 `json:"priority"`
	Target   string   `json:"target"`
	Params   *string  `json:"params,omitempty"`
}

func (o *CreateRecordRequestBodyHTTPS) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *CreateRecordRequestBodyHTTPS) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *CreateRecordRequestBodyHTTPS) GetParams() *string {
	if o == nil {
		return nil
	}
	return o.Params
}

type RequestBodyHTTPS struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `HTTPS`.
	type_ CreateRecordRequestBodyDNSRequest10Type `const:"HTTPS" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL   *float64                     `json:"ttl,omitempty"`
	HTTPS CreateRecordRequestBodyHTTPS `json:"https"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (r RequestBodyHTTPS) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestBodyHTTPS) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RequestBodyHTTPS) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RequestBodyHTTPS) GetType() CreateRecordRequestBodyDNSRequest10Type {
	return CreateRecordRequestBodyDNSRequest10TypeHTTPS
}

func (o *RequestBodyHTTPS) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *RequestBodyHTTPS) GetHTTPS() CreateRecordRequestBodyHTTPS {
	if o == nil {
		return CreateRecordRequestBodyHTTPS{}
	}
	return o.HTTPS
}

func (o *RequestBodyHTTPS) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequest9Type - Must be of type `NS`.
type CreateRecordRequestBodyDNSRequest9Type string

const (
	CreateRecordRequestBodyDNSRequest9TypeNs CreateRecordRequestBodyDNSRequest9Type = "NS"
)

func (e CreateRecordRequestBodyDNSRequest9Type) ToPointer() *CreateRecordRequestBodyDNSRequest9Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NS":
		*e = CreateRecordRequestBodyDNSRequest9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest9Type: %v", v)
	}
}

type Ns struct {
	// A subdomain name.
	Name string `json:"name"`
	// Must be of type `NS`.
	type_ CreateRecordRequestBodyDNSRequest9Type `const:"NS" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An NS domain value.
	Value *string `json:"value,omitempty"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (n Ns) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *Ns) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ns) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Ns) GetType() CreateRecordRequestBodyDNSRequest9Type {
	return CreateRecordRequestBodyDNSRequest9TypeNs
}

func (o *Ns) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Ns) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Ns) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequest8Type - Must be of type `TXT`.
type CreateRecordRequestBodyDNSRequest8Type string

const (
	CreateRecordRequestBodyDNSRequest8TypeTxt CreateRecordRequestBodyDNSRequest8Type = "TXT"
)

func (e CreateRecordRequestBodyDNSRequest8Type) ToPointer() *CreateRecordRequestBodyDNSRequest8Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TXT":
		*e = CreateRecordRequestBodyDNSRequest8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest8Type: %v", v)
	}
}

type Txt struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `TXT`.
	type_ CreateRecordRequestBodyDNSRequest8Type `const:"TXT" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A TXT record containing arbitrary text.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (t Txt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Txt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Txt) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Txt) GetType() CreateRecordRequestBodyDNSRequest8Type {
	return CreateRecordRequestBodyDNSRequest8TypeTxt
}

func (o *Txt) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Txt) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Txt) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequest7Type - Must be of type `SRV`.
type CreateRecordRequestBodyDNSRequest7Type string

const (
	CreateRecordRequestBodyDNSRequest7TypeSrv CreateRecordRequestBodyDNSRequest7Type = "SRV"
)

func (e CreateRecordRequestBodyDNSRequest7Type) ToPointer() *CreateRecordRequestBodyDNSRequest7Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SRV":
		*e = CreateRecordRequestBodyDNSRequest7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest7Type: %v", v)
	}
}

type CreateRecordRequestBodySrv struct {
	Priority *float64 `json:"priority"`
	Weight   *float64 `json:"weight"`
	Port     *float64 `json:"port"`
	Target   string   `json:"target"`
}

func (o *CreateRecordRequestBodySrv) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *CreateRecordRequestBodySrv) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *CreateRecordRequestBodySrv) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateRecordRequestBodySrv) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

type RequestBodySRV struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `SRV`.
	type_ CreateRecordRequestBodyDNSRequest7Type `const:"SRV" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64                   `json:"ttl,omitempty"`
	Srv CreateRecordRequestBodySrv `json:"srv"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (r RequestBodySRV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestBodySRV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RequestBodySRV) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RequestBodySRV) GetType() CreateRecordRequestBodyDNSRequest7Type {
	return CreateRecordRequestBodyDNSRequest7TypeSrv
}

func (o *RequestBodySRV) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *RequestBodySRV) GetSrv() CreateRecordRequestBodySrv {
	if o == nil {
		return CreateRecordRequestBodySrv{}
	}
	return o.Srv
}

func (o *RequestBodySRV) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequest6Type - Must be of type `MX`.
type CreateRecordRequestBodyDNSRequest6Type string

const (
	CreateRecordRequestBodyDNSRequest6TypeMx CreateRecordRequestBodyDNSRequest6Type = "MX"
)

func (e CreateRecordRequestBodyDNSRequest6Type) ToPointer() *CreateRecordRequestBodyDNSRequest6Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MX":
		*e = CreateRecordRequestBodyDNSRequest6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest6Type: %v", v)
	}
}

type Mx struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `MX`.
	type_ CreateRecordRequestBodyDNSRequest6Type `const:"MX" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An MX record specifying the mail server responsible for accepting messages on behalf of the domain name.
	Value      string  `json:"value"`
	MxPriority float64 `json:"mxPriority"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (m Mx) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *Mx) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Mx) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Mx) GetType() CreateRecordRequestBodyDNSRequest6Type {
	return CreateRecordRequestBodyDNSRequest6TypeMx
}

func (o *Mx) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Mx) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Mx) GetMxPriority() float64 {
	if o == nil {
		return 0.0
	}
	return o.MxPriority
}

func (o *Mx) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequest5Type - Must be of type `CNAME`.
type CreateRecordRequestBodyDNSRequest5Type string

const (
	CreateRecordRequestBodyDNSRequest5TypeCname CreateRecordRequestBodyDNSRequest5Type = "CNAME"
)

func (e CreateRecordRequestBodyDNSRequest5Type) ToPointer() *CreateRecordRequestBodyDNSRequest5Type {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequest5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CNAME":
		*e = CreateRecordRequestBodyDNSRequest5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequest5Type: %v", v)
	}
}

type Cname struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `CNAME`.
	type_ CreateRecordRequestBodyDNSRequest5Type `const:"CNAME" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A CNAME record mapping to another domain name.
	Value *string `json:"value,omitempty"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (c Cname) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Cname) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Cname) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Cname) GetType() CreateRecordRequestBodyDNSRequest5Type {
	return CreateRecordRequestBodyDNSRequest5TypeCname
}

func (o *Cname) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Cname) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Cname) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSRequestType - Must be of type `CAA`.
type CreateRecordRequestBodyDNSRequestType string

const (
	CreateRecordRequestBodyDNSRequestTypeCaa CreateRecordRequestBodyDNSRequestType = "CAA"
)

func (e CreateRecordRequestBodyDNSRequestType) ToPointer() *CreateRecordRequestBodyDNSRequestType {
	return &e
}
func (e *CreateRecordRequestBodyDNSRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAA":
		*e = CreateRecordRequestBodyDNSRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSRequestType: %v", v)
	}
}

type Caa struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `CAA`.
	type_ CreateRecordRequestBodyDNSRequestType `const:"CAA" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (c Caa) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Caa) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Caa) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Caa) GetType() CreateRecordRequestBodyDNSRequestType {
	return CreateRecordRequestBodyDNSRequestTypeCaa
}

func (o *Caa) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Caa) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Caa) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyDNSType - Must be of type `ALIAS`.
type CreateRecordRequestBodyDNSType string

const (
	CreateRecordRequestBodyDNSTypeAlias CreateRecordRequestBodyDNSType = "ALIAS"
)

func (e CreateRecordRequestBodyDNSType) ToPointer() *CreateRecordRequestBodyDNSType {
	return &e
}
func (e *CreateRecordRequestBodyDNSType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALIAS":
		*e = CreateRecordRequestBodyDNSType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyDNSType: %v", v)
	}
}

type Alias struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `ALIAS`.
	type_ CreateRecordRequestBodyDNSType `const:"ALIAS" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An ALIAS virtual record pointing to a hostname resolved to an A record on server side.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (a Alias) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Alias) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Alias) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Alias) GetType() CreateRecordRequestBodyDNSType {
	return CreateRecordRequestBodyDNSTypeAlias
}

func (o *Alias) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Alias) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Alias) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordRequestBodyType - Must be of type `AAAA`.
type CreateRecordRequestBodyType string

const (
	CreateRecordRequestBodyTypeAaaa CreateRecordRequestBodyType = "AAAA"
)

func (e CreateRecordRequestBodyType) ToPointer() *CreateRecordRequestBodyType {
	return &e
}
func (e *CreateRecordRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AAAA":
		*e = CreateRecordRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordRequestBodyType: %v", v)
	}
}

type Aaaa struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `AAAA`.
	type_ CreateRecordRequestBodyType `const:"AAAA" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An AAAA record pointing to an IPv6 address.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (a Aaaa) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Aaaa) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Aaaa) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Aaaa) GetType() CreateRecordRequestBodyType {
	return CreateRecordRequestBodyTypeAaaa
}

func (o *Aaaa) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *Aaaa) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Aaaa) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// RequestBodyType - Must be of type `A`.
type RequestBodyType string

const (
	RequestBodyTypeA RequestBodyType = "A"
)

func (e RequestBodyType) ToPointer() *RequestBodyType {
	return &e
}
func (e *RequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		*e = RequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestBodyType: %v", v)
	}
}

type A struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// Must be of type `A`.
	type_ RequestBodyType `const:"A" json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// The record value must be a valid IPv4 address.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (a A) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *A) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *A) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *A) GetType() RequestBodyType {
	return RequestBodyTypeA
}

func (o *A) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *A) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *A) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type CreateRecordRequestBodyUnionType string

const (
	CreateRecordRequestBodyUnionTypeA                CreateRecordRequestBodyUnionType = "A"
	CreateRecordRequestBodyUnionTypeAaaa             CreateRecordRequestBodyUnionType = "AAAA"
	CreateRecordRequestBodyUnionTypeAlias            CreateRecordRequestBodyUnionType = "ALIAS"
	CreateRecordRequestBodyUnionTypeCaa              CreateRecordRequestBodyUnionType = "CAA"
	CreateRecordRequestBodyUnionTypeCname            CreateRecordRequestBodyUnionType = "CNAME"
	CreateRecordRequestBodyUnionTypeMx               CreateRecordRequestBodyUnionType = "MX"
	CreateRecordRequestBodyUnionTypeRequestBodySRV   CreateRecordRequestBodyUnionType = "requestBody_SRV"
	CreateRecordRequestBodyUnionTypeTxt              CreateRecordRequestBodyUnionType = "TXT"
	CreateRecordRequestBodyUnionTypeNs               CreateRecordRequestBodyUnionType = "NS"
	CreateRecordRequestBodyUnionTypeRequestBodyHTTPS CreateRecordRequestBodyUnionType = "requestBody_HTTPS"
)

type CreateRecordRequestBody struct {
	A                *A
	Aaaa             *Aaaa
	Alias            *Alias
	Caa              *Caa
	Cname            *Cname
	Mx               *Mx
	RequestBodySRV   *RequestBodySRV
	Txt              *Txt
	Ns               *Ns
	RequestBodyHTTPS *RequestBodyHTTPS

	Type CreateRecordRequestBodyUnionType
}

func CreateCreateRecordRequestBodyA(a A) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeA

	return CreateRecordRequestBody{
		A:    &a,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyAaaa(aaaa Aaaa) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeAaaa

	return CreateRecordRequestBody{
		Aaaa: &aaaa,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyAlias(alias Alias) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeAlias

	return CreateRecordRequestBody{
		Alias: &alias,
		Type:  typ,
	}
}

func CreateCreateRecordRequestBodyCaa(caa Caa) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeCaa

	return CreateRecordRequestBody{
		Caa:  &caa,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyCname(cname Cname) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeCname

	return CreateRecordRequestBody{
		Cname: &cname,
		Type:  typ,
	}
}

func CreateCreateRecordRequestBodyMx(mx Mx) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeMx

	return CreateRecordRequestBody{
		Mx:   &mx,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyRequestBodySRV(requestBodySRV RequestBodySRV) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeRequestBodySRV

	return CreateRecordRequestBody{
		RequestBodySRV: &requestBodySRV,
		Type:           typ,
	}
}

func CreateCreateRecordRequestBodyTxt(txt Txt) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeTxt

	return CreateRecordRequestBody{
		Txt:  &txt,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyNs(ns Ns) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeNs

	return CreateRecordRequestBody{
		Ns:   &ns,
		Type: typ,
	}
}

func CreateCreateRecordRequestBodyRequestBodyHTTPS(requestBodyHTTPS RequestBodyHTTPS) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyUnionTypeRequestBodyHTTPS

	return CreateRecordRequestBody{
		RequestBodyHTTPS: &requestBodyHTTPS,
		Type:             typ,
	}
}

func (u *CreateRecordRequestBody) UnmarshalJSON(data []byte) error {

	var a A = A{}
	if err := utils.UnmarshalJSON(data, &a, "", true, true); err == nil {
		u.A = &a
		u.Type = CreateRecordRequestBodyUnionTypeA
		return nil
	}

	var aaaa Aaaa = Aaaa{}
	if err := utils.UnmarshalJSON(data, &aaaa, "", true, true); err == nil {
		u.Aaaa = &aaaa
		u.Type = CreateRecordRequestBodyUnionTypeAaaa
		return nil
	}

	var alias Alias = Alias{}
	if err := utils.UnmarshalJSON(data, &alias, "", true, true); err == nil {
		u.Alias = &alias
		u.Type = CreateRecordRequestBodyUnionTypeAlias
		return nil
	}

	var caa Caa = Caa{}
	if err := utils.UnmarshalJSON(data, &caa, "", true, true); err == nil {
		u.Caa = &caa
		u.Type = CreateRecordRequestBodyUnionTypeCaa
		return nil
	}

	var cname Cname = Cname{}
	if err := utils.UnmarshalJSON(data, &cname, "", true, true); err == nil {
		u.Cname = &cname
		u.Type = CreateRecordRequestBodyUnionTypeCname
		return nil
	}

	var requestBodySRV RequestBodySRV = RequestBodySRV{}
	if err := utils.UnmarshalJSON(data, &requestBodySRV, "", true, true); err == nil {
		u.RequestBodySRV = &requestBodySRV
		u.Type = CreateRecordRequestBodyUnionTypeRequestBodySRV
		return nil
	}

	var txt Txt = Txt{}
	if err := utils.UnmarshalJSON(data, &txt, "", true, true); err == nil {
		u.Txt = &txt
		u.Type = CreateRecordRequestBodyUnionTypeTxt
		return nil
	}

	var ns Ns = Ns{}
	if err := utils.UnmarshalJSON(data, &ns, "", true, true); err == nil {
		u.Ns = &ns
		u.Type = CreateRecordRequestBodyUnionTypeNs
		return nil
	}

	var requestBodyHTTPS RequestBodyHTTPS = RequestBodyHTTPS{}
	if err := utils.UnmarshalJSON(data, &requestBodyHTTPS, "", true, true); err == nil {
		u.RequestBodyHTTPS = &requestBodyHTTPS
		u.Type = CreateRecordRequestBodyUnionTypeRequestBodyHTTPS
		return nil
	}

	var mx Mx = Mx{}
	if err := utils.UnmarshalJSON(data, &mx, "", true, true); err == nil {
		u.Mx = &mx
		u.Type = CreateRecordRequestBodyUnionTypeMx
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRecordRequestBody", string(data))
}

func (u CreateRecordRequestBody) MarshalJSON() ([]byte, error) {
	if u.A != nil {
		return utils.MarshalJSON(u.A, "", true)
	}

	if u.Aaaa != nil {
		return utils.MarshalJSON(u.Aaaa, "", true)
	}

	if u.Alias != nil {
		return utils.MarshalJSON(u.Alias, "", true)
	}

	if u.Caa != nil {
		return utils.MarshalJSON(u.Caa, "", true)
	}

	if u.Cname != nil {
		return utils.MarshalJSON(u.Cname, "", true)
	}

	if u.Mx != nil {
		return utils.MarshalJSON(u.Mx, "", true)
	}

	if u.RequestBodySRV != nil {
		return utils.MarshalJSON(u.RequestBodySRV, "", true)
	}

	if u.Txt != nil {
		return utils.MarshalJSON(u.Txt, "", true)
	}

	if u.Ns != nil {
		return utils.MarshalJSON(u.Ns, "", true)
	}

	if u.RequestBodyHTTPS != nil {
		return utils.MarshalJSON(u.RequestBodyHTTPS, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRecordRequestBody: all fields are null")
}

type CreateRecordRequest struct {
	// The domain used to create the DNS record.
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateRecordRequestBody `request:"mediaType=application/json"`
}

func (o *CreateRecordRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreateRecordRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateRecordRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateRecordRequest) GetRequestBody() *CreateRecordRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateRecordResponseBody - Successful response showing the uid of the newly created DNS record.
type CreateRecordResponseBody struct {
	// The id of the newly created DNS record
	ID *string `json:"uid,omitempty"`
}

func (o *CreateRecordResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRecordResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful response showing the uid of the newly created DNS record.
	Object *CreateRecordResponseBody
}

func (o *CreateRecordResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateRecordResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateRecordResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateRecordResponse) GetObject() *CreateRecordResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
