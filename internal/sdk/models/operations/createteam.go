// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateTeamRequestBody struct {
	// The desired name for the Team. It will be generated from the provided slug if nothing is provided
	Name *string `json:"name,omitempty"`
	// The desired slug for the Team
	Slug string `json:"slug"`
}

func (o *CreateTeamRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateTeamRequestBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type Address struct {
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	State      *string `json:"state,omitempty"`
}

func (o *Address) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *Address) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *Address) GetLine1() string {
	if o == nil {
		return ""
	}
	return o.Line1
}

func (o *Address) GetLine2() *string {
	if o == nil {
		return nil
	}
	return o.Line2
}

func (o *Address) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *Address) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type Contract struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

func (o *Contract) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *Contract) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

type Controls struct {
	AnalyticsSampleRateInPercent *int64 `json:"analyticsSampleRateInPercent,omitempty"`
	AnalyticsSpendLimitInDollars *int64 `json:"analyticsSpendLimitInDollars,omitempty"`
}

func (o *Controls) GetAnalyticsSampleRateInPercent() *int64 {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampleRateInPercent
}

func (o *Controls) GetAnalyticsSpendLimitInDollars() *int64 {
	if o == nil {
		return nil
	}
	return o.AnalyticsSpendLimitInDollars
}

type Currency string

const (
	CurrencyUsd Currency = "usd"
	CurrencyEur Currency = "eur"
)

func (e Currency) ToPointer() *Currency {
	return &e
}

func (e *Currency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "usd":
		fallthrough
	case "eur":
		*e = Currency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Currency: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsIntervalMonth CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval: %v", v)
	}
}

type IntervalCount int64

const (
	IntervalCountOne    IntervalCount = 1
	IntervalCountTwelve IntervalCount = 12
	IntervalCountTwo    IntervalCount = 2
	IntervalCountThree  IntervalCount = 3
	IntervalCountSix    IntervalCount = 6
)

func (e IntervalCount) ToPointer() *IntervalCount {
	return &e
}

func (e *IntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = IntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval `json:"interval"`
	IntervalCount IntervalCount                                                                             `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsFrequency) GetIntervalCount() IntervalCount {
	if o == nil {
		return IntervalCount(0)
	}
	return o.IntervalCount
}

// CreateTeamAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeamAnalytics struct {
	CreatedAt   *int64                                                                                      `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                                      `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                                        `json:"hidden"`
	MaxQuantity *int64                                                                                      `json:"maxQuantity,omitempty"`
	Name        *string                                                                                     `json:"name,omitempty"`
	Price       int64                                                                                       `json:"price"`
	Quantity    int64                                                                                       `json:"quantity"`
	Tier        *int64                                                                                      `json:"tier,omitempty"`
}

func (o *CreateTeamAnalytics) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateTeamAnalytics) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateTeamAnalytics) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsAnalyticsFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *CreateTeamAnalytics) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *CreateTeamAnalytics) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *CreateTeamAnalytics) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateTeamAnalytics) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *CreateTeamAnalytics) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreateTeamAnalytics) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type AnalyticsUsage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *AnalyticsUsage) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *AnalyticsUsage) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *AnalyticsUsage) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *AnalyticsUsage) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *AnalyticsUsage) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AnalyticsUsage) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *AnalyticsUsage) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *AnalyticsUsage) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type Artifacts struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *Artifacts) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *Artifacts) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Artifacts) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *Artifacts) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *Artifacts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Artifacts) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *Artifacts) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *Artifacts) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type Bandwidth struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *Bandwidth) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *Bandwidth) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Bandwidth) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *Bandwidth) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *Bandwidth) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Bandwidth) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *Bandwidth) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *Bandwidth) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamInterval string

const (
	CreateTeamIntervalMonth CreateTeamInterval = "month"
)

func (e CreateTeamInterval) ToPointer() *CreateTeamInterval {
	return &e
}

func (e *CreateTeamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamInterval: %v", v)
	}
}

type CreateTeamIntervalCount int64

const (
	CreateTeamIntervalCountOne    CreateTeamIntervalCount = 1
	CreateTeamIntervalCountTwelve CreateTeamIntervalCount = 12
	CreateTeamIntervalCountTwo    CreateTeamIntervalCount = 2
	CreateTeamIntervalCountThree  CreateTeamIntervalCount = 3
	CreateTeamIntervalCountSix    CreateTeamIntervalCount = 6
)

func (e CreateTeamIntervalCount) ToPointer() *CreateTeamIntervalCount {
	return &e
}

func (e *CreateTeamIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamIntervalCount: %v", v)
	}
}

type CreateTeamFrequency struct {
	Interval      CreateTeamInterval      `json:"interval"`
	IntervalCount CreateTeamIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamFrequency) GetInterval() CreateTeamInterval {
	if o == nil {
		return CreateTeamInterval("")
	}
	return o.Interval
}

func (o *CreateTeamFrequency) GetIntervalCount() CreateTeamIntervalCount {
	if o == nil {
		return CreateTeamIntervalCount(0)
	}
	return o.IntervalCount
}

// ConcurrentBuilds - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type ConcurrentBuilds struct {
	CreatedAt   *int64               `json:"createdAt,omitempty"`
	DisabledAt  *int64               `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamFrequency `json:"frequency,omitempty"`
	Hidden      bool                 `json:"hidden"`
	MaxQuantity *int64               `json:"maxQuantity,omitempty"`
	Name        *string              `json:"name,omitempty"`
	Price       int64                `json:"price"`
	Quantity    int64                `json:"quantity"`
	Tier        *int64               `json:"tier,omitempty"`
}

func (o *ConcurrentBuilds) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ConcurrentBuilds) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *ConcurrentBuilds) GetFrequency() *CreateTeamFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *ConcurrentBuilds) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *ConcurrentBuilds) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *ConcurrentBuilds) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConcurrentBuilds) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *ConcurrentBuilds) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *ConcurrentBuilds) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CronJobInvocation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *CronJobInvocation) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *CronJobInvocation) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CronJobInvocation) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CronJobInvocation) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *CronJobInvocation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CronJobInvocation) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *CronJobInvocation) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *CronJobInvocation) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type DataCacheRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *DataCacheRead) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *DataCacheRead) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DataCacheRead) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *DataCacheRead) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *DataCacheRead) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DataCacheRead) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *DataCacheRead) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *DataCacheRead) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type DataCacheRevalidation struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *DataCacheRevalidation) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *DataCacheRevalidation) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DataCacheRevalidation) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *DataCacheRevalidation) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *DataCacheRevalidation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DataCacheRevalidation) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *DataCacheRevalidation) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *DataCacheRevalidation) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type DataCacheWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *DataCacheWrite) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *DataCacheWrite) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DataCacheWrite) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *DataCacheWrite) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *DataCacheWrite) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DataCacheWrite) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *DataCacheWrite) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *DataCacheWrite) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type EdgeConfigRead struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *EdgeConfigRead) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *EdgeConfigRead) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *EdgeConfigRead) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *EdgeConfigRead) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *EdgeConfigRead) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EdgeConfigRead) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *EdgeConfigRead) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *EdgeConfigRead) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type EdgeConfigWrite struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *EdgeConfigWrite) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *EdgeConfigWrite) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *EdgeConfigWrite) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *EdgeConfigWrite) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *EdgeConfigWrite) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EdgeConfigWrite) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *EdgeConfigWrite) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *EdgeConfigWrite) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type EdgeFunctionExecutionUnits struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *EdgeFunctionExecutionUnits) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *EdgeFunctionExecutionUnits) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *EdgeFunctionExecutionUnits) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *EdgeFunctionExecutionUnits) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *EdgeFunctionExecutionUnits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EdgeFunctionExecutionUnits) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *EdgeFunctionExecutionUnits) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *EdgeFunctionExecutionUnits) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type EdgeMiddlewareInvocations struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *EdgeMiddlewareInvocations) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *EdgeMiddlewareInvocations) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *EdgeMiddlewareInvocations) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *EdgeMiddlewareInvocations) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *EdgeMiddlewareInvocations) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EdgeMiddlewareInvocations) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *EdgeMiddlewareInvocations) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *EdgeMiddlewareInvocations) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsInterval string

const (
	CreateTeamTeamsIntervalMonth CreateTeamTeamsInterval = "month"
)

func (e CreateTeamTeamsInterval) ToPointer() *CreateTeamTeamsInterval {
	return &e
}

func (e *CreateTeamTeamsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsInterval: %v", v)
	}
}

type CreateTeamTeamsIntervalCount int64

const (
	CreateTeamTeamsIntervalCountOne    CreateTeamTeamsIntervalCount = 1
	CreateTeamTeamsIntervalCountTwelve CreateTeamTeamsIntervalCount = 12
	CreateTeamTeamsIntervalCountTwo    CreateTeamTeamsIntervalCount = 2
	CreateTeamTeamsIntervalCountThree  CreateTeamTeamsIntervalCount = 3
	CreateTeamTeamsIntervalCountSix    CreateTeamTeamsIntervalCount = 6
)

func (e CreateTeamTeamsIntervalCount) ToPointer() *CreateTeamTeamsIntervalCount {
	return &e
}

func (e *CreateTeamTeamsIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsIntervalCount: %v", v)
	}
}

type CreateTeamTeamsFrequency struct {
	Interval      CreateTeamTeamsInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsFrequency) GetInterval() CreateTeamTeamsInterval {
	if o == nil {
		return CreateTeamTeamsInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsFrequency) GetIntervalCount() CreateTeamTeamsIntervalCount {
	if o == nil {
		return CreateTeamTeamsIntervalCount(0)
	}
	return o.IntervalCount
}

// Enterprise - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type Enterprise struct {
	CreatedAt   *int64                    `json:"createdAt,omitempty"`
	DisabledAt  *int64                    `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsFrequency `json:"frequency,omitempty"`
	Hidden      bool                      `json:"hidden"`
	MaxQuantity *int64                    `json:"maxQuantity,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Price       int64                     `json:"price"`
	Quantity    int64                     `json:"quantity"`
	Tier        *int64                    `json:"tier,omitempty"`
}

func (o *Enterprise) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Enterprise) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Enterprise) GetFrequency() *CreateTeamTeamsFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *Enterprise) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *Enterprise) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *Enterprise) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Enterprise) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *Enterprise) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *Enterprise) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponseInterval string

const (
	CreateTeamTeamsResponseIntervalMonth CreateTeamTeamsResponseInterval = "month"
)

func (e CreateTeamTeamsResponseInterval) ToPointer() *CreateTeamTeamsResponseInterval {
	return &e
}

func (e *CreateTeamTeamsResponseInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponseInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponseInterval: %v", v)
	}
}

type CreateTeamTeamsResponseIntervalCount int64

const (
	CreateTeamTeamsResponseIntervalCountOne    CreateTeamTeamsResponseIntervalCount = 1
	CreateTeamTeamsResponseIntervalCountTwelve CreateTeamTeamsResponseIntervalCount = 12
	CreateTeamTeamsResponseIntervalCountTwo    CreateTeamTeamsResponseIntervalCount = 2
	CreateTeamTeamsResponseIntervalCountThree  CreateTeamTeamsResponseIntervalCount = 3
	CreateTeamTeamsResponseIntervalCountSix    CreateTeamTeamsResponseIntervalCount = 6
)

func (e CreateTeamTeamsResponseIntervalCount) ToPointer() *CreateTeamTeamsResponseIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponseIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponseIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponseIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponseFrequency struct {
	Interval      CreateTeamTeamsResponseInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponseIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponseFrequency) GetInterval() CreateTeamTeamsResponseInterval {
	if o == nil {
		return CreateTeamTeamsResponseInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponseFrequency) GetIntervalCount() CreateTeamTeamsResponseIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponseIntervalCount(0)
	}
	return o.IntervalCount
}

// Monitoring - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type Monitoring struct {
	CreatedAt   *int64                            `json:"createdAt,omitempty"`
	DisabledAt  *int64                            `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponseFrequency `json:"frequency,omitempty"`
	Hidden      bool                              `json:"hidden"`
	MaxQuantity *int64                            `json:"maxQuantity,omitempty"`
	Name        *string                           `json:"name,omitempty"`
	Price       int64                             `json:"price"`
	Quantity    int64                             `json:"quantity"`
	Tier        *int64                            `json:"tier,omitempty"`
}

func (o *Monitoring) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Monitoring) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Monitoring) GetFrequency() *CreateTeamTeamsResponseFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *Monitoring) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *Monitoring) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *Monitoring) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Monitoring) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *Monitoring) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *Monitoring) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type MonitoringMetric struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *MonitoringMetric) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *MonitoringMetric) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *MonitoringMetric) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *MonitoringMetric) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *MonitoringMetric) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MonitoringMetric) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *MonitoringMetric) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *MonitoringMetric) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200Interval string

const (
	CreateTeamTeamsResponse200IntervalMonth CreateTeamTeamsResponse200Interval = "month"
)

func (e CreateTeamTeamsResponse200Interval) ToPointer() *CreateTeamTeamsResponse200Interval {
	return &e
}

func (e *CreateTeamTeamsResponse200Interval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200Interval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200Interval: %v", v)
	}
}

type CreateTeamTeamsResponse200IntervalCount int64

const (
	CreateTeamTeamsResponse200IntervalCountOne    CreateTeamTeamsResponse200IntervalCount = 1
	CreateTeamTeamsResponse200IntervalCountTwelve CreateTeamTeamsResponse200IntervalCount = 12
	CreateTeamTeamsResponse200IntervalCountTwo    CreateTeamTeamsResponse200IntervalCount = 2
	CreateTeamTeamsResponse200IntervalCountThree  CreateTeamTeamsResponse200IntervalCount = 3
	CreateTeamTeamsResponse200IntervalCountSix    CreateTeamTeamsResponse200IntervalCount = 6
)

func (e CreateTeamTeamsResponse200IntervalCount) ToPointer() *CreateTeamTeamsResponse200IntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200IntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200IntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200IntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200Frequency struct {
	Interval      CreateTeamTeamsResponse200Interval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200IntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200Frequency) GetInterval() CreateTeamTeamsResponse200Interval {
	if o == nil {
		return CreateTeamTeamsResponse200Interval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200Frequency) GetIntervalCount() CreateTeamTeamsResponse200IntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200IntervalCount(0)
	}
	return o.IntervalCount
}

// CreateTeamPasswordProtection - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeamPasswordProtection struct {
	CreatedAt   *int64                               `json:"createdAt,omitempty"`
	DisabledAt  *int64                               `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200Frequency `json:"frequency,omitempty"`
	Hidden      bool                                 `json:"hidden"`
	MaxQuantity *int64                               `json:"maxQuantity,omitempty"`
	Name        *string                              `json:"name,omitempty"`
	Price       int64                                `json:"price"`
	Quantity    int64                                `json:"quantity"`
	Tier        *int64                               `json:"tier,omitempty"`
}

func (o *CreateTeamPasswordProtection) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateTeamPasswordProtection) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateTeamPasswordProtection) GetFrequency() *CreateTeamTeamsResponse200Frequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *CreateTeamPasswordProtection) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *CreateTeamPasswordProtection) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *CreateTeamPasswordProtection) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateTeamPasswordProtection) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *CreateTeamPasswordProtection) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreateTeamPasswordProtection) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type PostgresComputeTime struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *PostgresComputeTime) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *PostgresComputeTime) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PostgresComputeTime) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PostgresComputeTime) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PostgresComputeTime) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostgresComputeTime) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PostgresComputeTime) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *PostgresComputeTime) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type PostgresDataStorage struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *PostgresDataStorage) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *PostgresDataStorage) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PostgresDataStorage) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PostgresDataStorage) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PostgresDataStorage) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostgresDataStorage) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PostgresDataStorage) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *PostgresDataStorage) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type PostgresDataTransfer struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *PostgresDataTransfer) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *PostgresDataTransfer) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PostgresDataTransfer) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PostgresDataTransfer) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PostgresDataTransfer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostgresDataTransfer) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PostgresDataTransfer) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *PostgresDataTransfer) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type PostgresDatabase struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *PostgresDatabase) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *PostgresDatabase) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PostgresDatabase) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PostgresDatabase) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PostgresDatabase) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostgresDatabase) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PostgresDatabase) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *PostgresDatabase) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type PostgresWrittenData struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *PostgresWrittenData) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *PostgresWrittenData) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PostgresWrittenData) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PostgresWrittenData) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PostgresWrittenData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PostgresWrittenData) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PostgresWrittenData) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *PostgresWrittenData) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200ApplicationJSONInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONIntervalMonth CreateTeamTeamsResponse200ApplicationJSONInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONInterval: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONIntervalCount int64

const (
	CreateTeamTeamsResponse200ApplicationJSONIntervalCountOne    CreateTeamTeamsResponse200ApplicationJSONIntervalCount = 1
	CreateTeamTeamsResponse200ApplicationJSONIntervalCountTwelve CreateTeamTeamsResponse200ApplicationJSONIntervalCount = 12
	CreateTeamTeamsResponse200ApplicationJSONIntervalCountTwo    CreateTeamTeamsResponse200ApplicationJSONIntervalCount = 2
	CreateTeamTeamsResponse200ApplicationJSONIntervalCountThree  CreateTeamTeamsResponse200ApplicationJSONIntervalCount = 3
	CreateTeamTeamsResponse200ApplicationJSONIntervalCountSix    CreateTeamTeamsResponse200ApplicationJSONIntervalCount = 6
)

func (e CreateTeamTeamsResponse200ApplicationJSONIntervalCount) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200ApplicationJSONIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200ApplicationJSONIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONFrequency) GetIntervalCount() CreateTeamTeamsResponse200ApplicationJSONIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONIntervalCount(0)
	}
	return o.IntervalCount
}

// PreviewDeploymentSuffix - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type PreviewDeploymentSuffix struct {
	CreatedAt   *int64                                              `json:"createdAt,omitempty"`
	DisabledAt  *int64                                              `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                `json:"hidden"`
	MaxQuantity *int64                                              `json:"maxQuantity,omitempty"`
	Name        *string                                             `json:"name,omitempty"`
	Price       int64                                               `json:"price"`
	Quantity    int64                                               `json:"quantity"`
	Tier        *int64                                              `json:"tier,omitempty"`
}

func (o *PreviewDeploymentSuffix) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PreviewDeploymentSuffix) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PreviewDeploymentSuffix) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *PreviewDeploymentSuffix) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *PreviewDeploymentSuffix) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *PreviewDeploymentSuffix) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PreviewDeploymentSuffix) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *PreviewDeploymentSuffix) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *PreviewDeploymentSuffix) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalMonth CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount int64

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCountOne    CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount = 1
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCountTwelve CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount = 12
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCountTwo    CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount = 2
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCountThree  CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount = 3
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCountSix    CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount = 6
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyFrequency) GetIntervalCount() CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyIntervalCount(0)
	}
	return o.IntervalCount
}

// Pro - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type Pro struct {
	CreatedAt   *int64                                                          `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                          `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONResponseBodyFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                            `json:"hidden"`
	MaxQuantity *int64                                                          `json:"maxQuantity,omitempty"`
	Name        *string                                                         `json:"name,omitempty"`
	Price       int64                                                           `json:"price"`
	Quantity    int64                                                           `json:"quantity"`
	Tier        *int64                                                          `json:"tier,omitempty"`
}

func (o *Pro) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Pro) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Pro) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *Pro) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *Pro) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *Pro) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Pro) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *Pro) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *Pro) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalMonth CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount int64

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCountOne    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount = 1
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCountTwelve CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount = 12
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCountTwo    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount = 2
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCountThree  CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount = 3
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCountSix    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount = 6
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingFrequency) GetIntervalCount() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingIntervalCount(0)
	}
	return o.IntervalCount
}

// CreateTeamSaml - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type CreateTeamSaml struct {
	CreatedAt   *int64                                                                 `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                 `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                   `json:"hidden"`
	MaxQuantity *int64                                                                 `json:"maxQuantity,omitempty"`
	Name        *string                                                                `json:"name,omitempty"`
	Price       int64                                                                  `json:"price"`
	Quantity    int64                                                                  `json:"quantity"`
	Tier        *int64                                                                 `json:"tier,omitempty"`
}

func (o *CreateTeamSaml) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateTeamSaml) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateTeamSaml) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *CreateTeamSaml) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *CreateTeamSaml) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *CreateTeamSaml) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateTeamSaml) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *CreateTeamSaml) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *CreateTeamSaml) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type ServerlessFunctionExecution struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *ServerlessFunctionExecution) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *ServerlessFunctionExecution) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *ServerlessFunctionExecution) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *ServerlessFunctionExecution) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *ServerlessFunctionExecution) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ServerlessFunctionExecution) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *ServerlessFunctionExecution) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *ServerlessFunctionExecution) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type SourceImages struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *SourceImages) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *SourceImages) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *SourceImages) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *SourceImages) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *SourceImages) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SourceImages) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *SourceImages) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *SourceImages) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type StorageRedisTotalBandwidthInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *StorageRedisTotalBandwidthInBytes) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *StorageRedisTotalBandwidthInBytes) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *StorageRedisTotalBandwidthInBytes) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *StorageRedisTotalBandwidthInBytes) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *StorageRedisTotalBandwidthInBytes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *StorageRedisTotalBandwidthInBytes) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *StorageRedisTotalBandwidthInBytes) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *StorageRedisTotalBandwidthInBytes) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type StorageRedisTotalCommands struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *StorageRedisTotalCommands) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *StorageRedisTotalCommands) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *StorageRedisTotalCommands) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *StorageRedisTotalCommands) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *StorageRedisTotalCommands) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *StorageRedisTotalCommands) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *StorageRedisTotalCommands) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *StorageRedisTotalCommands) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type StorageRedisTotalDailyAvgStorageInBytes struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type StorageRedisTotalDatabases struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *StorageRedisTotalDatabases) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *StorageRedisTotalDatabases) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *StorageRedisTotalDatabases) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *StorageRedisTotalDatabases) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *StorageRedisTotalDatabases) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *StorageRedisTotalDatabases) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *StorageRedisTotalDatabases) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *StorageRedisTotalDatabases) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalMonth CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount int64

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCountOne    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount = 1
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCountTwelve CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount = 12
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCountTwo    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount = 2
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCountThree  CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount = 3
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCountSix    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount = 6
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsFrequency) GetIntervalCount() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsIntervalCount(0)
	}
	return o.IntervalCount
}

// TeamSeats - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type TeamSeats struct {
	CreatedAt   *int64                                                                             `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                             `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                               `json:"hidden"`
	MaxQuantity *int64                                                                             `json:"maxQuantity,omitempty"`
	Name        *string                                                                            `json:"name,omitempty"`
	Price       int64                                                                              `json:"price"`
	Quantity    int64                                                                              `json:"quantity"`
	Tier        *int64                                                                             `json:"tier,omitempty"`
}

func (o *TeamSeats) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *TeamSeats) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *TeamSeats) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *TeamSeats) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *TeamSeats) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *TeamSeats) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TeamSeats) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *TeamSeats) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *TeamSeats) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval string

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalMonth CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval = "month"
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "month":
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount int64

const (
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCountOne    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount = 1
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCountTwelve CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount = 12
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCountTwo    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount = 2
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCountThree  CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount = 3
	CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCountSix    CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount = 6
)

func (e CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount) ToPointer() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount {
	return &e
}

func (e *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 12:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		*e = CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount: %v", v)
	}
}

type CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsFrequency struct {
	Interval      CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval      `json:"interval"`
	IntervalCount CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount `json:"intervalCount"`
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsFrequency) GetInterval() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsInterval("")
	}
	return o.Interval
}

func (o *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsFrequency) GetIntervalCount() CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount {
	if o == nil {
		return CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsIntervalCount(0)
	}
	return o.IntervalCount
}

// WebAnalytics - Will be used to create an invoice item. The price must be in cents: 2000 for $20.
type WebAnalytics struct {
	CreatedAt   *int64                                                                                         `json:"createdAt,omitempty"`
	DisabledAt  *int64                                                                                         `json:"disabledAt,omitempty"`
	Frequency   *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsFrequency `json:"frequency,omitempty"`
	Hidden      bool                                                                                           `json:"hidden"`
	MaxQuantity *int64                                                                                         `json:"maxQuantity,omitempty"`
	Name        *string                                                                                        `json:"name,omitempty"`
	Price       int64                                                                                          `json:"price"`
	Quantity    int64                                                                                          `json:"quantity"`
	Tier        *int64                                                                                         `json:"tier,omitempty"`
}

func (o *WebAnalytics) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *WebAnalytics) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *WebAnalytics) GetFrequency() *CreateTeamTeamsResponse200ApplicationJSONResponseBodyBillingInvoiceItemsWebAnalyticsFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *WebAnalytics) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *WebAnalytics) GetMaxQuantity() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxQuantity
}

func (o *WebAnalytics) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *WebAnalytics) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *WebAnalytics) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

func (o *WebAnalytics) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type WebAnalyticsEvent struct {
	Batch      int64   `json:"batch"`
	DisabledAt *int64  `json:"disabledAt,omitempty"`
	EnabledAt  *int64  `json:"enabledAt,omitempty"`
	Hidden     bool    `json:"hidden"`
	Name       *string `json:"name,omitempty"`
	Price      int64   `json:"price"`
	Threshold  int64   `json:"threshold"`
	Tier       *int64  `json:"tier,omitempty"`
}

func (o *WebAnalyticsEvent) GetBatch() int64 {
	if o == nil {
		return 0
	}
	return o.Batch
}

func (o *WebAnalyticsEvent) GetDisabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *WebAnalyticsEvent) GetEnabledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *WebAnalyticsEvent) GetHidden() bool {
	if o == nil {
		return false
	}
	return o.Hidden
}

func (o *WebAnalyticsEvent) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *WebAnalyticsEvent) GetPrice() int64 {
	if o == nil {
		return 0
	}
	return o.Price
}

func (o *WebAnalyticsEvent) GetThreshold() int64 {
	if o == nil {
		return 0
	}
	return o.Threshold
}

func (o *WebAnalyticsEvent) GetTier() *int64 {
	if o == nil {
		return nil
	}
	return o.Tier
}

type InvoiceItems struct {
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Analytics      *CreateTeamAnalytics `json:"analytics,omitempty"`
	AnalyticsUsage *AnalyticsUsage      `json:"analyticsUsage,omitempty"`
	Artifacts      *Artifacts           `json:"artifacts,omitempty"`
	Bandwidth      *Bandwidth           `json:"bandwidth,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	ConcurrentBuilds           *ConcurrentBuilds           `json:"concurrentBuilds,omitempty"`
	CronJobInvocation          *CronJobInvocation          `json:"cronJobInvocation,omitempty"`
	DataCacheRead              *DataCacheRead              `json:"dataCacheRead,omitempty"`
	DataCacheRevalidation      *DataCacheRevalidation      `json:"dataCacheRevalidation,omitempty"`
	DataCacheWrite             *DataCacheWrite             `json:"dataCacheWrite,omitempty"`
	EdgeConfigRead             *EdgeConfigRead             `json:"edgeConfigRead,omitempty"`
	EdgeConfigWrite            *EdgeConfigWrite            `json:"edgeConfigWrite,omitempty"`
	EdgeFunctionExecutionUnits *EdgeFunctionExecutionUnits `json:"edgeFunctionExecutionUnits,omitempty"`
	EdgeMiddlewareInvocations  *EdgeMiddlewareInvocations  `json:"edgeMiddlewareInvocations,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Monitoring       *Monitoring       `json:"monitoring,omitempty"`
	MonitoringMetric *MonitoringMetric `json:"monitoringMetric,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PasswordProtection   *CreateTeamPasswordProtection `json:"passwordProtection,omitempty"`
	PostgresComputeTime  *PostgresComputeTime          `json:"postgresComputeTime,omitempty"`
	PostgresDataStorage  *PostgresDataStorage          `json:"postgresDataStorage,omitempty"`
	PostgresDataTransfer *PostgresDataTransfer         `json:"postgresDataTransfer,omitempty"`
	PostgresDatabase     *PostgresDatabase             `json:"postgresDatabase,omitempty"`
	PostgresWrittenData  *PostgresWrittenData          `json:"postgresWrittenData,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	PreviewDeploymentSuffix *PreviewDeploymentSuffix `json:"previewDeploymentSuffix,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Pro *Pro `json:"pro,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	Saml                                    *CreateTeamSaml                          `json:"saml,omitempty"`
	ServerlessFunctionExecution             *ServerlessFunctionExecution             `json:"serverlessFunctionExecution,omitempty"`
	SourceImages                            *SourceImages                            `json:"sourceImages,omitempty"`
	StorageRedisTotalBandwidthInBytes       *StorageRedisTotalBandwidthInBytes       `json:"storageRedisTotalBandwidthInBytes,omitempty"`
	StorageRedisTotalCommands               *StorageRedisTotalCommands               `json:"storageRedisTotalCommands,omitempty"`
	StorageRedisTotalDailyAvgStorageInBytes *StorageRedisTotalDailyAvgStorageInBytes `json:"storageRedisTotalDailyAvgStorageInBytes,omitempty"`
	StorageRedisTotalDatabases              *StorageRedisTotalDatabases              `json:"storageRedisTotalDatabases,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	TeamSeats *TeamSeats `json:"teamSeats,omitempty"`
	// Will be used to create an invoice item. The price must be in cents: 2000 for $20.
	WebAnalytics      *WebAnalytics      `json:"webAnalytics,omitempty"`
	WebAnalyticsEvent *WebAnalyticsEvent `json:"webAnalyticsEvent,omitempty"`
}

func (o *InvoiceItems) GetAnalytics() *CreateTeamAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *InvoiceItems) GetAnalyticsUsage() *AnalyticsUsage {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *InvoiceItems) GetArtifacts() *Artifacts {
	if o == nil {
		return nil
	}
	return o.Artifacts
}

func (o *InvoiceItems) GetBandwidth() *Bandwidth {
	if o == nil {
		return nil
	}
	return o.Bandwidth
}

func (o *InvoiceItems) GetConcurrentBuilds() *ConcurrentBuilds {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *InvoiceItems) GetCronJobInvocation() *CronJobInvocation {
	if o == nil {
		return nil
	}
	return o.CronJobInvocation
}

func (o *InvoiceItems) GetDataCacheRead() *DataCacheRead {
	if o == nil {
		return nil
	}
	return o.DataCacheRead
}

func (o *InvoiceItems) GetDataCacheRevalidation() *DataCacheRevalidation {
	if o == nil {
		return nil
	}
	return o.DataCacheRevalidation
}

func (o *InvoiceItems) GetDataCacheWrite() *DataCacheWrite {
	if o == nil {
		return nil
	}
	return o.DataCacheWrite
}

func (o *InvoiceItems) GetEdgeConfigRead() *EdgeConfigRead {
	if o == nil {
		return nil
	}
	return o.EdgeConfigRead
}

func (o *InvoiceItems) GetEdgeConfigWrite() *EdgeConfigWrite {
	if o == nil {
		return nil
	}
	return o.EdgeConfigWrite
}

func (o *InvoiceItems) GetEdgeFunctionExecutionUnits() *EdgeFunctionExecutionUnits {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionExecutionUnits
}

func (o *InvoiceItems) GetEdgeMiddlewareInvocations() *EdgeMiddlewareInvocations {
	if o == nil {
		return nil
	}
	return o.EdgeMiddlewareInvocations
}

func (o *InvoiceItems) GetEnterprise() *Enterprise {
	if o == nil {
		return nil
	}
	return o.Enterprise
}

func (o *InvoiceItems) GetMonitoring() *Monitoring {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *InvoiceItems) GetMonitoringMetric() *MonitoringMetric {
	if o == nil {
		return nil
	}
	return o.MonitoringMetric
}

func (o *InvoiceItems) GetPasswordProtection() *CreateTeamPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *InvoiceItems) GetPostgresComputeTime() *PostgresComputeTime {
	if o == nil {
		return nil
	}
	return o.PostgresComputeTime
}

func (o *InvoiceItems) GetPostgresDataStorage() *PostgresDataStorage {
	if o == nil {
		return nil
	}
	return o.PostgresDataStorage
}

func (o *InvoiceItems) GetPostgresDataTransfer() *PostgresDataTransfer {
	if o == nil {
		return nil
	}
	return o.PostgresDataTransfer
}

func (o *InvoiceItems) GetPostgresDatabase() *PostgresDatabase {
	if o == nil {
		return nil
	}
	return o.PostgresDatabase
}

func (o *InvoiceItems) GetPostgresWrittenData() *PostgresWrittenData {
	if o == nil {
		return nil
	}
	return o.PostgresWrittenData
}

func (o *InvoiceItems) GetPreviewDeploymentSuffix() *PreviewDeploymentSuffix {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *InvoiceItems) GetPro() *Pro {
	if o == nil {
		return nil
	}
	return o.Pro
}

func (o *InvoiceItems) GetSaml() *CreateTeamSaml {
	if o == nil {
		return nil
	}
	return o.Saml
}

func (o *InvoiceItems) GetServerlessFunctionExecution() *ServerlessFunctionExecution {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionExecution
}

func (o *InvoiceItems) GetSourceImages() *SourceImages {
	if o == nil {
		return nil
	}
	return o.SourceImages
}

func (o *InvoiceItems) GetStorageRedisTotalBandwidthInBytes() *StorageRedisTotalBandwidthInBytes {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalBandwidthInBytes
}

func (o *InvoiceItems) GetStorageRedisTotalCommands() *StorageRedisTotalCommands {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalCommands
}

func (o *InvoiceItems) GetStorageRedisTotalDailyAvgStorageInBytes() *StorageRedisTotalDailyAvgStorageInBytes {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalDailyAvgStorageInBytes
}

func (o *InvoiceItems) GetStorageRedisTotalDatabases() *StorageRedisTotalDatabases {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalDatabases
}

func (o *InvoiceItems) GetTeamSeats() *TeamSeats {
	if o == nil {
		return nil
	}
	return o.TeamSeats
}

func (o *InvoiceItems) GetWebAnalytics() *WebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *InvoiceItems) GetWebAnalyticsEvent() *WebAnalyticsEvent {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsEvent
}

type InvoiceSettings struct {
	Footer *string `json:"footer,omitempty"`
}

func (o *InvoiceSettings) GetFooter() *string {
	if o == nil {
		return nil
	}
	return o.Footer
}

type Period struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

func (o *Period) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *Period) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

type CreateTeamPlan string

const (
	CreateTeamPlanEnterprise CreateTeamPlan = "enterprise"
	CreateTeamPlanPro        CreateTeamPlan = "pro"
	CreateTeamPlanHobby      CreateTeamPlan = "hobby"
)

func (e CreateTeamPlan) ToPointer() *CreateTeamPlan {
	return &e
}

func (e *CreateTeamPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise":
		fallthrough
	case "pro":
		fallthrough
	case "hobby":
		*e = CreateTeamPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamPlan: %v", v)
	}
}

type Platform string

const (
	PlatformStripeTestMode Platform = "stripeTestMode"
	PlatformStripe         Platform = "stripe"
)

func (e Platform) ToPointer() *Platform {
	return &e
}

func (e *Platform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripeTestMode":
		fallthrough
	case "stripe":
		*e = Platform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Platform: %v", v)
	}
}

type PricingExperiment string

const (
	PricingExperimentAugust2022 PricingExperiment = "august-2022"
)

func (e PricingExperiment) ToPointer() *PricingExperiment {
	return &e
}

func (e *PricingExperiment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "august-2022":
		*e = PricingExperiment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PricingExperiment: %v", v)
	}
}

type ProgramType string

const (
	ProgramTypeStartup ProgramType = "startup"
	ProgramTypeAgency  ProgramType = "agency"
)

func (e ProgramType) ToPointer() *ProgramType {
	return &e
}

func (e *ProgramType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "startup":
		fallthrough
	case "agency":
		*e = ProgramType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProgramType: %v", v)
	}
}

type CreateTeamStatus string

const (
	CreateTeamStatusTrialing CreateTeamStatus = "trialing"
	CreateTeamStatusActive   CreateTeamStatus = "active"
	CreateTeamStatusOverdue  CreateTeamStatus = "overdue"
	CreateTeamStatusExpired  CreateTeamStatus = "expired"
	CreateTeamStatusCanceled CreateTeamStatus = "canceled"
)

func (e CreateTeamStatus) ToPointer() *CreateTeamStatus {
	return &e
}

func (e *CreateTeamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trialing":
		fallthrough
	case "active":
		fallthrough
	case "overdue":
		fallthrough
	case "expired":
		fallthrough
	case "canceled":
		*e = CreateTeamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTeamStatus: %v", v)
	}
}

type Duration string

const (
	DurationForever   Duration = "forever"
	DurationRepeating Duration = "repeating"
	DurationOnce      Duration = "once"
)

func (e Duration) ToPointer() *Duration {
	return &e
}

func (e *Duration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "forever":
		fallthrough
	case "repeating":
		fallthrough
	case "once":
		*e = Duration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Duration: %v", v)
	}
}

type Coupon struct {
	AmountOff        *int64   `json:"amountOff"`
	Duration         Duration `json:"duration"`
	DurationInMonths *int64   `json:"durationInMonths"`
	ID               string   `json:"id"`
	Name             *string  `json:"name"`
	PercentageOff    *int64   `json:"percentageOff"`
}

func (o *Coupon) GetAmountOff() *int64 {
	if o == nil {
		return nil
	}
	return o.AmountOff
}

func (o *Coupon) GetDuration() Duration {
	if o == nil {
		return Duration("")
	}
	return o.Duration
}

func (o *Coupon) GetDurationInMonths() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationInMonths
}

func (o *Coupon) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Coupon) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Coupon) GetPercentageOff() *int64 {
	if o == nil {
		return nil
	}
	return o.PercentageOff
}

type Discount struct {
	Coupon Coupon `json:"coupon"`
	ID     string `json:"id"`
}

func (o *Discount) GetCoupon() Coupon {
	if o == nil {
		return Coupon{}
	}
	return o.Coupon
}

func (o *Discount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type Interval string

const (
	IntervalDay   Interval = "day"
	IntervalMonth Interval = "month"
	IntervalWeek  Interval = "week"
	IntervalYear  Interval = "year"
)

func (e Interval) ToPointer() *Interval {
	return &e
}

func (e *Interval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "month":
		fallthrough
	case "week":
		fallthrough
	case "year":
		*e = Interval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Interval: %v", v)
	}
}

type Frequency struct {
	Interval      Interval `json:"interval"`
	IntervalCount int64    `json:"intervalCount"`
}

func (o *Frequency) GetInterval() Interval {
	if o == nil {
		return Interval("")
	}
	return o.Interval
}

func (o *Frequency) GetIntervalCount() int64 {
	if o == nil {
		return 0
	}
	return o.IntervalCount
}

type Items struct {
	Amount    int64  `json:"amount"`
	ID        string `json:"id"`
	PriceID   string `json:"priceId"`
	ProductID string `json:"productId"`
	Quantity  int64  `json:"quantity"`
}

func (o *Items) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Items) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Items) GetPriceID() string {
	if o == nil {
		return ""
	}
	return o.PriceID
}

func (o *Items) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Items) GetQuantity() int64 {
	if o == nil {
		return 0
	}
	return o.Quantity
}

type CreateTeamPeriod struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

func (o *CreateTeamPeriod) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *CreateTeamPeriod) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

type CreateTeamTrial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

func (o *CreateTeamTrial) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *CreateTeamTrial) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

type Subscriptions struct {
	Discount  *Discount        `json:"discount"`
	Frequency Frequency        `json:"frequency"`
	ID        string           `json:"id"`
	Items     []Items          `json:"items"`
	Period    CreateTeamPeriod `json:"period"`
	Trial     *CreateTeamTrial `json:"trial"`
}

func (o *Subscriptions) GetDiscount() *Discount {
	if o == nil {
		return nil
	}
	return o.Discount
}

func (o *Subscriptions) GetFrequency() Frequency {
	if o == nil {
		return Frequency{}
	}
	return o.Frequency
}

func (o *Subscriptions) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Subscriptions) GetItems() []Items {
	if o == nil {
		return []Items{}
	}
	return o.Items
}

func (o *Subscriptions) GetPeriod() CreateTeamPeriod {
	if o == nil {
		return CreateTeamPeriod{}
	}
	return o.Period
}

func (o *Subscriptions) GetTrial() *CreateTeamTrial {
	if o == nil {
		return nil
	}
	return o.Trial
}

type Tax struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

func (o *Tax) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Tax) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type Trial struct {
	End   int64 `json:"end"`
	Start int64 `json:"start"`
}

func (o *Trial) GetEnd() int64 {
	if o == nil {
		return 0
	}
	return o.End
}

func (o *Trial) GetStart() int64 {
	if o == nil {
		return 0
	}
	return o.Start
}

type Billing struct {
	Address                 *Address           `json:"address,omitempty"`
	Cancelation             *int64             `json:"cancelation,omitempty"`
	Contract                *Contract          `json:"contract,omitempty"`
	Controls                *Controls          `json:"controls,omitempty"`
	Currency                *Currency          `json:"currency,omitempty"`
	Email                   *string            `json:"email,omitempty"`
	InvoiceItems            *InvoiceItems      `json:"invoiceItems,omitempty"`
	InvoiceSettings         *InvoiceSettings   `json:"invoiceSettings,omitempty"`
	Language                *string            `json:"language,omitempty"`
	Name                    *string            `json:"name,omitempty"`
	OrbCustomerID           *string            `json:"orbCustomerId,omitempty"`
	OrbMigrationScheduledAt *int64             `json:"orbMigrationScheduledAt,omitempty"`
	Period                  *Period            `json:"period"`
	Plan                    CreateTeamPlan     `json:"plan"`
	Platform                *Platform          `json:"platform,omitempty"`
	PricingExperiment       *PricingExperiment `json:"pricingExperiment,omitempty"`
	ProgramType             *ProgramType       `json:"programType,omitempty"`
	PurchaseOrder           *string            `json:"purchaseOrder,omitempty"`
	Status                  *CreateTeamStatus  `json:"status,omitempty"`
	Subscriptions           []Subscriptions    `json:"subscriptions,omitempty"`
	SyncedAt                *int64             `json:"syncedAt,omitempty"`
	Tax                     *Tax               `json:"tax,omitempty"`
	Trial                   *Trial             `json:"trial,omitempty"`
}

func (o *Billing) GetAddress() *Address {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *Billing) GetCancelation() *int64 {
	if o == nil {
		return nil
	}
	return o.Cancelation
}

func (o *Billing) GetContract() *Contract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *Billing) GetControls() *Controls {
	if o == nil {
		return nil
	}
	return o.Controls
}

func (o *Billing) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Billing) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Billing) GetInvoiceItems() *InvoiceItems {
	if o == nil {
		return nil
	}
	return o.InvoiceItems
}

func (o *Billing) GetInvoiceSettings() *InvoiceSettings {
	if o == nil {
		return nil
	}
	return o.InvoiceSettings
}

func (o *Billing) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *Billing) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Billing) GetOrbCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.OrbCustomerID
}

func (o *Billing) GetOrbMigrationScheduledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.OrbMigrationScheduledAt
}

func (o *Billing) GetPeriod() *Period {
	if o == nil {
		return nil
	}
	return o.Period
}

func (o *Billing) GetPlan() CreateTeamPlan {
	if o == nil {
		return CreateTeamPlan("")
	}
	return o.Plan
}

func (o *Billing) GetPlatform() *Platform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *Billing) GetPricingExperiment() *PricingExperiment {
	if o == nil {
		return nil
	}
	return o.PricingExperiment
}

func (o *Billing) GetProgramType() *ProgramType {
	if o == nil {
		return nil
	}
	return o.ProgramType
}

func (o *Billing) GetPurchaseOrder() *string {
	if o == nil {
		return nil
	}
	return o.PurchaseOrder
}

func (o *Billing) GetStatus() *CreateTeamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Billing) GetSubscriptions() []Subscriptions {
	if o == nil {
		return nil
	}
	return o.Subscriptions
}

func (o *Billing) GetSyncedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.SyncedAt
}

func (o *Billing) GetTax() *Tax {
	if o == nil {
		return nil
	}
	return o.Tax
}

func (o *Billing) GetTrial() *Trial {
	if o == nil {
		return nil
	}
	return o.Trial
}

// CreateTeamResponseBody - The team was created successfully
type CreateTeamResponseBody struct {
	Billing Billing `json:"billing"`
	// Id of the created team
	ID string `json:"id"`
}

func (o *CreateTeamResponseBody) GetBilling() Billing {
	if o == nil {
		return Billing{}
	}
	return o.Billing
}

func (o *CreateTeamResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateTeamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The team was created successfully
	Object *CreateTeamResponseBody
}

func (o *CreateTeamResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateTeamResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateTeamResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateTeamResponse) GetObject() *CreateTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
