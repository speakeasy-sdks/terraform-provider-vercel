// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type GetDeploymentRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Whether to add in gitRepo information.
	WithGitRepoInfo *string `queryParam:"style=form,explode=true,name=withGitRepoInfo"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetDeploymentRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentRequest) GetWithGitRepoInfo() *string {
	if o == nil {
		return nil
	}
	return o.WithGitRepoInfo
}

func (o *GetDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDeploymentResponseBodyDeploymentsReadyState string

const (
	GetDeploymentResponseBodyDeploymentsReadyStateBuilding     GetDeploymentResponseBodyDeploymentsReadyState = "BUILDING"
	GetDeploymentResponseBodyDeploymentsReadyStateError        GetDeploymentResponseBodyDeploymentsReadyState = "ERROR"
	GetDeploymentResponseBodyDeploymentsReadyStateInitializing GetDeploymentResponseBodyDeploymentsReadyState = "INITIALIZING"
	GetDeploymentResponseBodyDeploymentsReadyStateReady        GetDeploymentResponseBodyDeploymentsReadyState = "READY"
)

func (e GetDeploymentResponseBodyDeploymentsReadyState) ToPointer() *GetDeploymentResponseBodyDeploymentsReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentResponseBodyDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsReadyState: %v", v)
	}
}

type GetDeploymentResponseBodyOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *GetDeploymentResponseBodyOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentResponseBodyOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

type ResponseBodyLambdas struct {
	ID           string                                          `json:"id"`
	CreatedAt    *float64                                        `json:"createdAt,omitempty"`
	Entrypoint   *string                                         `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentResponseBodyDeploymentsReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                        `json:"readyStateAt,omitempty"`
	Output       []GetDeploymentResponseBodyOutput               `json:"output"`
}

func (o *ResponseBodyLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ResponseBodyLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *ResponseBodyLambdas) GetReadyState() *GetDeploymentResponseBodyDeploymentsReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *ResponseBodyLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *ResponseBodyLambdas) GetOutput() []GetDeploymentResponseBodyOutput {
	if o == nil {
		return []GetDeploymentResponseBodyOutput{}
	}
	return o.Output
}

// ResponseBodyProject - The public project information associated with the deployment.
type ResponseBodyProject struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *ResponseBodyProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResponseBodyProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// GetDeploymentResponseBodyReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type GetDeploymentResponseBodyReadyState string

const (
	GetDeploymentResponseBodyReadyStateQueued       GetDeploymentResponseBodyReadyState = "QUEUED"
	GetDeploymentResponseBodyReadyStateBuilding     GetDeploymentResponseBodyReadyState = "BUILDING"
	GetDeploymentResponseBodyReadyStateError        GetDeploymentResponseBodyReadyState = "ERROR"
	GetDeploymentResponseBodyReadyStateInitializing GetDeploymentResponseBodyReadyState = "INITIALIZING"
	GetDeploymentResponseBodyReadyStateReady        GetDeploymentResponseBodyReadyState = "READY"
	GetDeploymentResponseBodyReadyStateCanceled     GetDeploymentResponseBodyReadyState = "CANCELED"
)

func (e GetDeploymentResponseBodyReadyState) ToPointer() *GetDeploymentResponseBodyReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentResponseBodyReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyReadyState: %v", v)
	}
}

// GetDeploymentResponseBodyReadySubstate - The substate of the deployment when the state is "READY"
type GetDeploymentResponseBodyReadySubstate string

const (
	GetDeploymentResponseBodyReadySubstateStaged   GetDeploymentResponseBodyReadySubstate = "STAGED"
	GetDeploymentResponseBodyReadySubstatePromoted GetDeploymentResponseBodyReadySubstate = "PROMOTED"
)

func (e GetDeploymentResponseBodyReadySubstate) ToPointer() *GetDeploymentResponseBodyReadySubstate {
	return &e
}
func (e *GetDeploymentResponseBodyReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentResponseBodyReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyReadySubstate: %v", v)
	}
}

// GetDeploymentResponseBodySource - Where was the deployment created from
type GetDeploymentResponseBodySource string

const (
	GetDeploymentResponseBodySourceAPITriggerGitDeploy GetDeploymentResponseBodySource = "api-trigger-git-deploy"
	GetDeploymentResponseBodySourceCli                 GetDeploymentResponseBodySource = "cli"
	GetDeploymentResponseBodySourceCloneRepo           GetDeploymentResponseBodySource = "clone/repo"
	GetDeploymentResponseBodySourceGit                 GetDeploymentResponseBodySource = "git"
	GetDeploymentResponseBodySourceImport              GetDeploymentResponseBodySource = "import"
	GetDeploymentResponseBodySourceImportRepo          GetDeploymentResponseBodySource = "import/repo"
)

func (e GetDeploymentResponseBodySource) ToPointer() *GetDeploymentResponseBodySource {
	return &e
}
func (e *GetDeploymentResponseBodySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		*e = GetDeploymentResponseBodySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodySource: %v", v)
	}
}

// GetDeploymentResponseBodyTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type GetDeploymentResponseBodyTarget string

const (
	GetDeploymentResponseBodyTargetStaging    GetDeploymentResponseBodyTarget = "staging"
	GetDeploymentResponseBodyTargetProduction GetDeploymentResponseBodyTarget = "production"
)

func (e GetDeploymentResponseBodyTarget) ToPointer() *GetDeploymentResponseBodyTarget {
	return &e
}
func (e *GetDeploymentResponseBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentResponseBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyTarget: %v", v)
	}
}

// ResponseBodyTeam - The team that owns the deployment if any
type ResponseBodyTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
}

func (o *ResponseBodyTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResponseBodyTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *ResponseBodyTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentResponseBodyDeploymentsType string

const (
	GetDeploymentResponseBodyDeploymentsTypeLambdas GetDeploymentResponseBodyDeploymentsType = "LAMBDAS"
)

func (e GetDeploymentResponseBodyDeploymentsType) ToPointer() *GetDeploymentResponseBodyDeploymentsType {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentResponseBodyDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsType: %v", v)
	}
}

// GetDeploymentResponseBodyAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type GetDeploymentResponseBodyAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentResponseBodyAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentResponseBodyAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ResponseBodyAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *ResponseBodyAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ResponseBodyAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *ResponseBodyAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *ResponseBodyAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetDeploymentResponseBodyChecksState string

const (
	GetDeploymentResponseBodyChecksStateRegistered GetDeploymentResponseBodyChecksState = "registered"
	GetDeploymentResponseBodyChecksStateRunning    GetDeploymentResponseBodyChecksState = "running"
	GetDeploymentResponseBodyChecksStateCompleted  GetDeploymentResponseBodyChecksState = "completed"
)

func (e GetDeploymentResponseBodyChecksState) ToPointer() *GetDeploymentResponseBodyChecksState {
	return &e
}
func (e *GetDeploymentResponseBodyChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentResponseBodyChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyChecksState: %v", v)
	}
}

type GetDeploymentResponseBodyChecksConclusion string

const (
	GetDeploymentResponseBodyChecksConclusionSucceeded GetDeploymentResponseBodyChecksConclusion = "succeeded"
	GetDeploymentResponseBodyChecksConclusionFailed    GetDeploymentResponseBodyChecksConclusion = "failed"
	GetDeploymentResponseBodyChecksConclusionSkipped   GetDeploymentResponseBodyChecksConclusion = "skipped"
	GetDeploymentResponseBodyChecksConclusionCanceled  GetDeploymentResponseBodyChecksConclusion = "canceled"
)

func (e GetDeploymentResponseBodyChecksConclusion) ToPointer() *GetDeploymentResponseBodyChecksConclusion {
	return &e
}
func (e *GetDeploymentResponseBodyChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentResponseBodyChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyChecksConclusion: %v", v)
	}
}

// GetDeploymentResponseBodyCreator - Information about the deployment creator
type GetDeploymentResponseBodyCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentResponseBodyCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentResponseBodyCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *GetDeploymentResponseBodyCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type: %v", v)
	}
}

type GetDeploymentGitSource9 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type `json:"type"`
	Ref           string                                                                        `json:"ref"`
	Sha           string                                                                        `json:"sha"`
	Owner         *string                                                                       `json:"owner,omitempty"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
	RepoUUID      string                                                                        `json:"repoUuid"`
}

func (o *GetDeploymentGitSource9) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSource9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSource9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSource9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type: %v", v)
	}
}

type GetDeploymentGitSource8 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type `json:"type"`
	Ref       string                                                                        `json:"ref"`
	Sha       string                                                                        `json:"sha"`
	ProjectID float64                                                                       `json:"projectId"`
}

func (o *GetDeploymentGitSource8) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type: %v", v)
	}
}

type GetDeploymentGitSource7 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type `json:"type"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	RepoID float64                                                                       `json:"repoId"`
	Org    *string                                                                       `json:"org,omitempty"`
	Repo   *string                                                                       `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSource7) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSource7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSource7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26TypeCustom GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type = "custom"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type: %v", v)
	}
}

type GetDeploymentGitSource6 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type `json:"type"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	GitURL string                                                                        `json:"gitUrl"`
}

func (o *GetDeploymentGitSource6) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type: %v", v)
	}
}

type GetDeploymentGitSource5 struct {
	Type  GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type `json:"type"`
	Owner string                                                                        `json:"owner"`
	Slug  string                                                                        `json:"slug"`
	Ref   *string                                                                       `json:"ref,omitempty"`
	Sha   *string                                                                       `json:"sha,omitempty"`
	PrID  *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource5) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSource5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type: %v", v)
	}
}

type GetDeploymentGitSource4 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type `json:"type"`
	WorkspaceUUID *string                                                                       `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                                                        `json:"repoUuid"`
	Ref           *string                                                                       `json:"ref,omitempty"`
	Sha           *string                                                                       `json:"sha,omitempty"`
	PrID          *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource4) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSource4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsProjectIDType string

const (
	GetDeploymentGitSourceDeploymentsProjectIDTypeStr    GetDeploymentGitSourceDeploymentsProjectIDType = "str"
	GetDeploymentGitSourceDeploymentsProjectIDTypeNumber GetDeploymentGitSourceDeploymentsProjectIDType = "number"
)

type GetDeploymentGitSourceDeploymentsProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceDeploymentsProjectIDType
}

func CreateGetDeploymentGitSourceDeploymentsProjectIDStr(str string) GetDeploymentGitSourceDeploymentsProjectID {
	typ := GetDeploymentGitSourceDeploymentsProjectIDTypeStr

	return GetDeploymentGitSourceDeploymentsProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceDeploymentsProjectIDNumber(number float64) GetDeploymentGitSourceDeploymentsProjectID {
	typ := GetDeploymentGitSourceDeploymentsProjectIDTypeNumber

	return GetDeploymentGitSourceDeploymentsProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceDeploymentsProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceDeploymentsProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceDeploymentsProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceDeploymentsProjectID", string(data))
}

func (u GetDeploymentGitSourceDeploymentsProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceDeploymentsProjectID: all fields are null")
}

type GetDeploymentGitSource3 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type `json:"type"`
	ProjectID GetDeploymentGitSourceDeploymentsProjectID                                    `json:"projectId"`
	Ref       *string                                                                       `json:"ref,omitempty"`
	Sha       *string                                                                       `json:"sha,omitempty"`
	PrID      *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource3) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource3) GetProjectID() GetDeploymentGitSourceDeploymentsProjectID {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSource3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type: %v", v)
	}
}

type GetDeploymentGitSource2 struct {
	Type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type `json:"type"`
	Org  string                                                                        `json:"org"`
	Repo string                                                                        `json:"repo"`
	Ref  *string                                                                       `json:"ref,omitempty"`
	Sha  *string                                                                       `json:"sha,omitempty"`
	PrID *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource2) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSource2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsRepoIDType string

const (
	GetDeploymentGitSourceDeploymentsRepoIDTypeStr    GetDeploymentGitSourceDeploymentsRepoIDType = "str"
	GetDeploymentGitSourceDeploymentsRepoIDTypeNumber GetDeploymentGitSourceDeploymentsRepoIDType = "number"
)

type GetDeploymentGitSourceDeploymentsRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceDeploymentsRepoIDType
}

func CreateGetDeploymentGitSourceDeploymentsRepoIDStr(str string) GetDeploymentGitSourceDeploymentsRepoID {
	typ := GetDeploymentGitSourceDeploymentsRepoIDTypeStr

	return GetDeploymentGitSourceDeploymentsRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceDeploymentsRepoIDNumber(number float64) GetDeploymentGitSourceDeploymentsRepoID {
	typ := GetDeploymentGitSourceDeploymentsRepoIDTypeNumber

	return GetDeploymentGitSourceDeploymentsRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceDeploymentsRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceDeploymentsRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceDeploymentsRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceDeploymentsRepoID", string(data))
}

func (u GetDeploymentGitSourceDeploymentsRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceDeploymentsRepoID: all fields are null")
}

type GetDeploymentGitSource1 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type `json:"type"`
	RepoID GetDeploymentGitSourceDeploymentsRepoID                                      `json:"repoId"`
	Ref    *string                                                                      `json:"ref,omitempty"`
	Sha    *string                                                                      `json:"sha,omitempty"`
	PrID   *float64                                                                     `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource1) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource1) GetRepoID() GetDeploymentGitSourceDeploymentsRepoID {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSource1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type ResponseBodyGitSourceType string

const (
	ResponseBodyGitSourceTypeGetDeploymentGitSource1 ResponseBodyGitSourceType = "getDeployment_gitSource_1"
	ResponseBodyGitSourceTypeGetDeploymentGitSource2 ResponseBodyGitSourceType = "getDeployment_gitSource_2"
	ResponseBodyGitSourceTypeGetDeploymentGitSource3 ResponseBodyGitSourceType = "getDeployment_gitSource_3"
	ResponseBodyGitSourceTypeGetDeploymentGitSource4 ResponseBodyGitSourceType = "getDeployment_gitSource_4"
	ResponseBodyGitSourceTypeGetDeploymentGitSource5 ResponseBodyGitSourceType = "getDeployment_gitSource_5"
	ResponseBodyGitSourceTypeGetDeploymentGitSource6 ResponseBodyGitSourceType = "getDeployment_gitSource_6"
	ResponseBodyGitSourceTypeGetDeploymentGitSource7 ResponseBodyGitSourceType = "getDeployment_gitSource_7"
	ResponseBodyGitSourceTypeGetDeploymentGitSource8 ResponseBodyGitSourceType = "getDeployment_gitSource_8"
	ResponseBodyGitSourceTypeGetDeploymentGitSource9 ResponseBodyGitSourceType = "getDeployment_gitSource_9"
)

type ResponseBodyGitSource struct {
	GetDeploymentGitSource1 *GetDeploymentGitSource1
	GetDeploymentGitSource2 *GetDeploymentGitSource2
	GetDeploymentGitSource3 *GetDeploymentGitSource3
	GetDeploymentGitSource4 *GetDeploymentGitSource4
	GetDeploymentGitSource5 *GetDeploymentGitSource5
	GetDeploymentGitSource6 *GetDeploymentGitSource6
	GetDeploymentGitSource7 *GetDeploymentGitSource7
	GetDeploymentGitSource8 *GetDeploymentGitSource8
	GetDeploymentGitSource9 *GetDeploymentGitSource9

	Type ResponseBodyGitSourceType
}

func CreateResponseBodyGitSourceGetDeploymentGitSource1(getDeploymentGitSource1 GetDeploymentGitSource1) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource1

	return ResponseBodyGitSource{
		GetDeploymentGitSource1: &getDeploymentGitSource1,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource2(getDeploymentGitSource2 GetDeploymentGitSource2) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource2

	return ResponseBodyGitSource{
		GetDeploymentGitSource2: &getDeploymentGitSource2,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource3(getDeploymentGitSource3 GetDeploymentGitSource3) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource3

	return ResponseBodyGitSource{
		GetDeploymentGitSource3: &getDeploymentGitSource3,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource4(getDeploymentGitSource4 GetDeploymentGitSource4) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource4

	return ResponseBodyGitSource{
		GetDeploymentGitSource4: &getDeploymentGitSource4,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource5(getDeploymentGitSource5 GetDeploymentGitSource5) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource5

	return ResponseBodyGitSource{
		GetDeploymentGitSource5: &getDeploymentGitSource5,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource6(getDeploymentGitSource6 GetDeploymentGitSource6) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource6

	return ResponseBodyGitSource{
		GetDeploymentGitSource6: &getDeploymentGitSource6,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource7(getDeploymentGitSource7 GetDeploymentGitSource7) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource7

	return ResponseBodyGitSource{
		GetDeploymentGitSource7: &getDeploymentGitSource7,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource8(getDeploymentGitSource8 GetDeploymentGitSource8) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource8

	return ResponseBodyGitSource{
		GetDeploymentGitSource8: &getDeploymentGitSource8,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource9(getDeploymentGitSource9 GetDeploymentGitSource9) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource9

	return ResponseBodyGitSource{
		GetDeploymentGitSource9: &getDeploymentGitSource9,
		Type:                    typ,
	}
}

func (u *ResponseBodyGitSource) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSource6 GetDeploymentGitSource6 = GetDeploymentGitSource6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource6, "", true, true); err == nil {
		u.GetDeploymentGitSource6 = &getDeploymentGitSource6
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource6
		return nil
	}

	var getDeploymentGitSource8 GetDeploymentGitSource8 = GetDeploymentGitSource8{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource8, "", true, true); err == nil {
		u.GetDeploymentGitSource8 = &getDeploymentGitSource8
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource8
		return nil
	}

	var getDeploymentGitSource1 GetDeploymentGitSource1 = GetDeploymentGitSource1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource1, "", true, true); err == nil {
		u.GetDeploymentGitSource1 = &getDeploymentGitSource1
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource1
		return nil
	}

	var getDeploymentGitSource3 GetDeploymentGitSource3 = GetDeploymentGitSource3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource3, "", true, true); err == nil {
		u.GetDeploymentGitSource3 = &getDeploymentGitSource3
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource3
		return nil
	}

	var getDeploymentGitSource2 GetDeploymentGitSource2 = GetDeploymentGitSource2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource2, "", true, true); err == nil {
		u.GetDeploymentGitSource2 = &getDeploymentGitSource2
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource2
		return nil
	}

	var getDeploymentGitSource4 GetDeploymentGitSource4 = GetDeploymentGitSource4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource4, "", true, true); err == nil {
		u.GetDeploymentGitSource4 = &getDeploymentGitSource4
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource4
		return nil
	}

	var getDeploymentGitSource5 GetDeploymentGitSource5 = GetDeploymentGitSource5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource5, "", true, true); err == nil {
		u.GetDeploymentGitSource5 = &getDeploymentGitSource5
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource5
		return nil
	}

	var getDeploymentGitSource7 GetDeploymentGitSource7 = GetDeploymentGitSource7{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource7, "", true, true); err == nil {
		u.GetDeploymentGitSource7 = &getDeploymentGitSource7
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource7
		return nil
	}

	var getDeploymentGitSource9 GetDeploymentGitSource9 = GetDeploymentGitSource9{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource9, "", true, true); err == nil {
		u.GetDeploymentGitSource9 = &getDeploymentGitSource9
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyGitSource", string(data))
}

func (u ResponseBodyGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSource1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource1, "", true)
	}

	if u.GetDeploymentGitSource2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource2, "", true)
	}

	if u.GetDeploymentGitSource3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource3, "", true)
	}

	if u.GetDeploymentGitSource4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource4, "", true)
	}

	if u.GetDeploymentGitSource5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource5, "", true)
	}

	if u.GetDeploymentGitSource6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource6, "", true)
	}

	if u.GetDeploymentGitSource7 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource7, "", true)
	}

	if u.GetDeploymentGitSource8 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource8, "", true)
	}

	if u.GetDeploymentGitSource9 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource9, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyGitSource: all fields are null")
}

// GetDeploymentResponseBody2 - The deployment including only public information
type GetDeploymentResponseBody2 struct {
	Lambdas []ResponseBodyLambdas `json:"lambdas,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// The public project information associated with the deployment.
	Project *ResponseBodyProject `json:"project,omitempty"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState GetDeploymentResponseBodyReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *GetDeploymentResponseBodyReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// Where was the deployment created from
	Source *GetDeploymentResponseBodySource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *GetDeploymentResponseBodyTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *ResponseBodyTeam                        `json:"team,omitempty"`
	Type GetDeploymentResponseBodyDeploymentsType `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned bool `json:"aliasAssigned"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *GetDeploymentResponseBodyAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                    `json:"aliasFinal,omitempty"`
	AliasWarning            *ResponseBodyAliasWarning                  `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                      `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                   `json:"automaticAliases,omitempty"`
	BootedAt                float64                                    `json:"bootedAt"`
	BuildErrorAt            *float64                                   `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                                    `json:"buildingAt"`
	CanceledAt              *float64                                   `json:"canceledAt,omitempty"`
	ChecksState             *GetDeploymentResponseBodyChecksState      `json:"checksState,omitempty"`
	ChecksConclusion        *GetDeploymentResponseBodyChecksConclusion `json:"checksConclusion,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// Information about the deployment creator
	Creator        GetDeploymentResponseBodyCreator `json:"creator"`
	ErrorCode      *string                          `json:"errorCode,omitempty"`
	ErrorLink      *string                          `json:"errorLink,omitempty"`
	ErrorMessage   *string                          `json:"errorMessage,omitempty"`
	ErrorStep      *string                          `json:"errorStep,omitempty"`
	PassiveRegions []string                         `json:"passiveRegions,omitempty"`
	GitSource      *ResponseBodyGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
}

func (o *GetDeploymentResponseBody2) GetLambdas() []ResponseBodyLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeploymentResponseBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBody2) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeploymentResponseBody2) GetProject() *ResponseBodyProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeploymentResponseBody2) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeploymentResponseBody2) GetReadyState() GetDeploymentResponseBodyReadyState {
	if o == nil {
		return GetDeploymentResponseBodyReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBody2) GetReadySubstate() *GetDeploymentResponseBodyReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeploymentResponseBody2) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeploymentResponseBody2) GetSource() *GetDeploymentResponseBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeploymentResponseBody2) GetTarget() *GetDeploymentResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeploymentResponseBody2) GetTeam() *ResponseBodyTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeploymentResponseBody2) GetType() GetDeploymentResponseBodyDeploymentsType {
	if o == nil {
		return GetDeploymentResponseBodyDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentResponseBody2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentResponseBody2) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeploymentResponseBody2) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetDeploymentResponseBody2) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeploymentResponseBody2) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *GetDeploymentResponseBody2) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeploymentResponseBody2) GetAliasError() *GetDeploymentResponseBodyAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeploymentResponseBody2) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeploymentResponseBody2) GetAliasWarning() *ResponseBodyAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeploymentResponseBody2) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeploymentResponseBody2) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeploymentResponseBody2) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeploymentResponseBody2) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeploymentResponseBody2) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeploymentResponseBody2) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentResponseBody2) GetChecksState() *GetDeploymentResponseBodyChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeploymentResponseBody2) GetChecksConclusion() *GetDeploymentResponseBodyChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeploymentResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBody2) GetCreator() GetDeploymentResponseBodyCreator {
	if o == nil {
		return GetDeploymentResponseBodyCreator{}
	}
	return o.Creator
}

func (o *GetDeploymentResponseBody2) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeploymentResponseBody2) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeploymentResponseBody2) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeploymentResponseBody2) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeploymentResponseBody2) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeploymentResponseBody2) GetGitSource() *ResponseBodyGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeploymentResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ResponseBodyBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *ResponseBodyBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type ResponseBodyBuilds struct {
}

// ResponseBodyCrons - The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
type ResponseBodyCrons struct {
	Schedule string `json:"schedule"`
	Path     string `json:"path"`
}

func (o *ResponseBodyCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

func (o *ResponseBodyCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

// ResponseBodyFunctions - An object used to configure your Serverless Functions
type ResponseBodyFunctions struct {
	Memory       *float64 `json:"memory,omitempty"`
	MaxDuration  *float64 `json:"maxDuration,omitempty"`
	Runtime      *string  `json:"runtime,omitempty"`
	IncludeFiles *string  `json:"includeFiles,omitempty"`
	ExcludeFiles *string  `json:"excludeFiles,omitempty"`
}

func (o *ResponseBodyFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *ResponseBodyFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *ResponseBodyFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *ResponseBodyFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *ResponseBodyFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

// ResponseBodyPlan - The pricing plan the deployment was made under
type ResponseBodyPlan string

const (
	ResponseBodyPlanPro        ResponseBodyPlan = "pro"
	ResponseBodyPlanEnterprise ResponseBodyPlan = "enterprise"
	ResponseBodyPlanHobby      ResponseBodyPlan = "hobby"
)

func (e ResponseBodyPlan) ToPointer() *ResponseBodyPlan {
	return &e
}
func (e *ResponseBodyPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = ResponseBodyPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyPlan: %v", v)
	}
}

// GetDeploymentRoutes3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentRoutes3 struct {
	Src        string  `json:"src"`
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
}

func (o *GetDeploymentRoutes3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoutes3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *GetDeploymentRoutes3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

type GetDeploymentRoutesHandle string

const (
	GetDeploymentRoutesHandleError      GetDeploymentRoutesHandle = "error"
	GetDeploymentRoutesHandleFilesystem GetDeploymentRoutesHandle = "filesystem"
	GetDeploymentRoutesHandleHit        GetDeploymentRoutesHandle = "hit"
	GetDeploymentRoutesHandleMiss       GetDeploymentRoutesHandle = "miss"
	GetDeploymentRoutesHandleRewrite    GetDeploymentRoutesHandle = "rewrite"
	GetDeploymentRoutesHandleResource   GetDeploymentRoutesHandle = "resource"
)

func (e GetDeploymentRoutesHandle) ToPointer() *GetDeploymentRoutesHandle {
	return &e
}
func (e *GetDeploymentRoutesHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = GetDeploymentRoutesHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentRoutesHandle: %v", v)
	}
}

// GetDeploymentRoutes2 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentRoutes2 struct {
	Handle GetDeploymentRoutesHandle `json:"handle"`
	Src    *string                   `json:"src,omitempty"`
	Dest   *string                   `json:"dest,omitempty"`
	Status *float64                  `json:"status,omitempty"`
}

func (o *GetDeploymentRoutes2) GetHandle() GetDeploymentRoutesHandle {
	if o == nil {
		return GetDeploymentRoutesHandle("")
	}
	return o.Handle
}

func (o *GetDeploymentRoutes2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetDeploymentRoutes2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoutes2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetDeploymentHasType string

const (
	GetDeploymentHasTypeHeader GetDeploymentHasType = "header"
	GetDeploymentHasTypeCookie GetDeploymentHasType = "cookie"
	GetDeploymentHasTypeQuery  GetDeploymentHasType = "query"
)

func (e GetDeploymentHasType) ToPointer() *GetDeploymentHasType {
	return &e
}
func (e *GetDeploymentHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasType: %v", v)
	}
}

type GetDeploymentHas2 struct {
	Type  GetDeploymentHasType `json:"type"`
	Key   string               `json:"key"`
	Value *string              `json:"value,omitempty"`
}

func (o *GetDeploymentHas2) GetType() GetDeploymentHasType {
	if o == nil {
		return GetDeploymentHasType("")
	}
	return o.Type
}

func (o *GetDeploymentHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentHasDeploymentsType string

const (
	GetDeploymentHasDeploymentsTypeHost GetDeploymentHasDeploymentsType = "host"
)

func (e GetDeploymentHasDeploymentsType) ToPointer() *GetDeploymentHasDeploymentsType {
	return &e
}
func (e *GetDeploymentHasDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentHasDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasDeploymentsType: %v", v)
	}
}

type GetDeploymentHas1 struct {
	Type  GetDeploymentHasDeploymentsType `json:"type"`
	Value string                          `json:"value"`
}

func (o *GetDeploymentHas1) GetType() GetDeploymentHasDeploymentsType {
	if o == nil {
		return GetDeploymentHasDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentRoutesHasType string

const (
	GetDeploymentRoutesHasTypeGetDeploymentHas1 GetDeploymentRoutesHasType = "getDeployment_has_1"
	GetDeploymentRoutesHasTypeGetDeploymentHas2 GetDeploymentRoutesHasType = "getDeployment_has_2"
)

type GetDeploymentRoutesHas struct {
	GetDeploymentHas1 *GetDeploymentHas1
	GetDeploymentHas2 *GetDeploymentHas2

	Type GetDeploymentRoutesHasType
}

func CreateGetDeploymentRoutesHasGetDeploymentHas1(getDeploymentHas1 GetDeploymentHas1) GetDeploymentRoutesHas {
	typ := GetDeploymentRoutesHasTypeGetDeploymentHas1

	return GetDeploymentRoutesHas{
		GetDeploymentHas1: &getDeploymentHas1,
		Type:              typ,
	}
}

func CreateGetDeploymentRoutesHasGetDeploymentHas2(getDeploymentHas2 GetDeploymentHas2) GetDeploymentRoutesHas {
	typ := GetDeploymentRoutesHasTypeGetDeploymentHas2

	return GetDeploymentRoutesHas{
		GetDeploymentHas2: &getDeploymentHas2,
		Type:              typ,
	}
}

func (u *GetDeploymentRoutesHas) UnmarshalJSON(data []byte) error {

	var getDeploymentHas1 GetDeploymentHas1 = GetDeploymentHas1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHas1, "", true, true); err == nil {
		u.GetDeploymentHas1 = &getDeploymentHas1
		u.Type = GetDeploymentRoutesHasTypeGetDeploymentHas1
		return nil
	}

	var getDeploymentHas2 GetDeploymentHas2 = GetDeploymentHas2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHas2, "", true, true); err == nil {
		u.GetDeploymentHas2 = &getDeploymentHas2
		u.Type = GetDeploymentRoutesHasTypeGetDeploymentHas2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRoutesHas", string(data))
}

func (u GetDeploymentRoutesHas) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentHas1 != nil {
		return utils.MarshalJSON(u.GetDeploymentHas1, "", true)
	}

	if u.GetDeploymentHas2 != nil {
		return utils.MarshalJSON(u.GetDeploymentHas2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRoutesHas: all fields are null")
}

type GetDeploymentMissingType string

const (
	GetDeploymentMissingTypeHeader GetDeploymentMissingType = "header"
	GetDeploymentMissingTypeCookie GetDeploymentMissingType = "cookie"
	GetDeploymentMissingTypeQuery  GetDeploymentMissingType = "query"
)

func (e GetDeploymentMissingType) ToPointer() *GetDeploymentMissingType {
	return &e
}
func (e *GetDeploymentMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingType: %v", v)
	}
}

type GetDeploymentMissing2 struct {
	Type  GetDeploymentMissingType `json:"type"`
	Key   string                   `json:"key"`
	Value *string                  `json:"value,omitempty"`
}

func (o *GetDeploymentMissing2) GetType() GetDeploymentMissingType {
	if o == nil {
		return GetDeploymentMissingType("")
	}
	return o.Type
}

func (o *GetDeploymentMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentMissingDeploymentsType string

const (
	GetDeploymentMissingDeploymentsTypeHost GetDeploymentMissingDeploymentsType = "host"
)

func (e GetDeploymentMissingDeploymentsType) ToPointer() *GetDeploymentMissingDeploymentsType {
	return &e
}
func (e *GetDeploymentMissingDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentMissingDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingDeploymentsType: %v", v)
	}
}

type GetDeploymentMissing1 struct {
	Type  GetDeploymentMissingDeploymentsType `json:"type"`
	Value string                              `json:"value"`
}

func (o *GetDeploymentMissing1) GetType() GetDeploymentMissingDeploymentsType {
	if o == nil {
		return GetDeploymentMissingDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentRoutesMissingType string

const (
	GetDeploymentRoutesMissingTypeGetDeploymentMissing1 GetDeploymentRoutesMissingType = "getDeployment_missing_1"
	GetDeploymentRoutesMissingTypeGetDeploymentMissing2 GetDeploymentRoutesMissingType = "getDeployment_missing_2"
)

type GetDeploymentRoutesMissing struct {
	GetDeploymentMissing1 *GetDeploymentMissing1
	GetDeploymentMissing2 *GetDeploymentMissing2

	Type GetDeploymentRoutesMissingType
}

func CreateGetDeploymentRoutesMissingGetDeploymentMissing1(getDeploymentMissing1 GetDeploymentMissing1) GetDeploymentRoutesMissing {
	typ := GetDeploymentRoutesMissingTypeGetDeploymentMissing1

	return GetDeploymentRoutesMissing{
		GetDeploymentMissing1: &getDeploymentMissing1,
		Type:                  typ,
	}
}

func CreateGetDeploymentRoutesMissingGetDeploymentMissing2(getDeploymentMissing2 GetDeploymentMissing2) GetDeploymentRoutesMissing {
	typ := GetDeploymentRoutesMissingTypeGetDeploymentMissing2

	return GetDeploymentRoutesMissing{
		GetDeploymentMissing2: &getDeploymentMissing2,
		Type:                  typ,
	}
}

func (u *GetDeploymentRoutesMissing) UnmarshalJSON(data []byte) error {

	var getDeploymentMissing1 GetDeploymentMissing1 = GetDeploymentMissing1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissing1, "", true, true); err == nil {
		u.GetDeploymentMissing1 = &getDeploymentMissing1
		u.Type = GetDeploymentRoutesMissingTypeGetDeploymentMissing1
		return nil
	}

	var getDeploymentMissing2 GetDeploymentMissing2 = GetDeploymentMissing2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissing2, "", true, true); err == nil {
		u.GetDeploymentMissing2 = &getDeploymentMissing2
		u.Type = GetDeploymentRoutesMissingTypeGetDeploymentMissing2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRoutesMissing", string(data))
}

func (u GetDeploymentRoutesMissing) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentMissing1 != nil {
		return utils.MarshalJSON(u.GetDeploymentMissing1, "", true)
	}

	if u.GetDeploymentMissing2 != nil {
		return utils.MarshalJSON(u.GetDeploymentMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRoutesMissing: all fields are null")
}

type GetDeploymentRoutesLocale struct {
	Redirect map[string]string `json:"redirect,omitempty"`
	Cookie   *string           `json:"cookie,omitempty"`
}

func (o *GetDeploymentRoutesLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetDeploymentRoutesLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

// GetDeploymentRoutes1 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentRoutes1 struct {
	Src           string                       `json:"src"`
	Dest          *string                      `json:"dest,omitempty"`
	Headers       map[string]string            `json:"headers,omitempty"`
	Methods       []string                     `json:"methods,omitempty"`
	Continue      *bool                        `json:"continue,omitempty"`
	Override      *bool                        `json:"override,omitempty"`
	CaseSensitive *bool                        `json:"caseSensitive,omitempty"`
	Check         *bool                        `json:"check,omitempty"`
	Important     *bool                        `json:"important,omitempty"`
	Status        *float64                     `json:"status,omitempty"`
	Has           []GetDeploymentRoutesHas     `json:"has,omitempty"`
	Missing       []GetDeploymentRoutesMissing `json:"missing,omitempty"`
	Locale        *GetDeploymentRoutesLocale   `json:"locale,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string `json:"middlewareRawSrc,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
}

func (o *GetDeploymentRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetDeploymentRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *GetDeploymentRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *GetDeploymentRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *GetDeploymentRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *GetDeploymentRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *GetDeploymentRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *GetDeploymentRoutes1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetDeploymentRoutes1) GetHas() []GetDeploymentRoutesHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetDeploymentRoutes1) GetMissing() []GetDeploymentRoutesMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetDeploymentRoutes1) GetLocale() *GetDeploymentRoutesLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetDeploymentRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *GetDeploymentRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *GetDeploymentRoutes1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

type ResponseBodyRoutesType string

const (
	ResponseBodyRoutesTypeGetDeploymentRoutes1 ResponseBodyRoutesType = "getDeployment_routes_1"
	ResponseBodyRoutesTypeGetDeploymentRoutes2 ResponseBodyRoutesType = "getDeployment_routes_2"
	ResponseBodyRoutesTypeGetDeploymentRoutes3 ResponseBodyRoutesType = "getDeployment_routes_3"
)

type ResponseBodyRoutes struct {
	GetDeploymentRoutes1 *GetDeploymentRoutes1
	GetDeploymentRoutes2 *GetDeploymentRoutes2
	GetDeploymentRoutes3 *GetDeploymentRoutes3

	Type ResponseBodyRoutesType
}

func CreateResponseBodyRoutesGetDeploymentRoutes1(getDeploymentRoutes1 GetDeploymentRoutes1) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes1

	return ResponseBodyRoutes{
		GetDeploymentRoutes1: &getDeploymentRoutes1,
		Type:                 typ,
	}
}

func CreateResponseBodyRoutesGetDeploymentRoutes2(getDeploymentRoutes2 GetDeploymentRoutes2) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes2

	return ResponseBodyRoutes{
		GetDeploymentRoutes2: &getDeploymentRoutes2,
		Type:                 typ,
	}
}

func CreateResponseBodyRoutesGetDeploymentRoutes3(getDeploymentRoutes3 GetDeploymentRoutes3) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes3

	return ResponseBodyRoutes{
		GetDeploymentRoutes3: &getDeploymentRoutes3,
		Type:                 typ,
	}
}

func (u *ResponseBodyRoutes) UnmarshalJSON(data []byte) error {

	var getDeploymentRoutes3 GetDeploymentRoutes3 = GetDeploymentRoutes3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes3, "", true, true); err == nil {
		u.GetDeploymentRoutes3 = &getDeploymentRoutes3
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes3
		return nil
	}

	var getDeploymentRoutes2 GetDeploymentRoutes2 = GetDeploymentRoutes2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes2, "", true, true); err == nil {
		u.GetDeploymentRoutes2 = &getDeploymentRoutes2
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes2
		return nil
	}

	var getDeploymentRoutes1 GetDeploymentRoutes1 = GetDeploymentRoutes1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes1, "", true, true); err == nil {
		u.GetDeploymentRoutes1 = &getDeploymentRoutes1
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyRoutes", string(data))
}

func (u ResponseBodyRoutes) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentRoutes1 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes1, "", true)
	}

	if u.GetDeploymentRoutes2 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes2, "", true)
	}

	if u.GetDeploymentRoutes3 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes3, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyRoutes: all fields are null")
}

type GetDeploymentGitRepoDeploymentsType string

const (
	GetDeploymentGitRepoDeploymentsTypeBitbucket GetDeploymentGitRepoDeploymentsType = "bitbucket"
)

func (e GetDeploymentGitRepoDeploymentsType) ToPointer() *GetDeploymentGitRepoDeploymentsType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitRepoDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsType: %v", v)
	}
}

type GetDeploymentGitRepoOwnerType string

const (
	GetDeploymentGitRepoOwnerTypeTeam GetDeploymentGitRepoOwnerType = "team"
	GetDeploymentGitRepoOwnerTypeUser GetDeploymentGitRepoOwnerType = "user"
)

func (e GetDeploymentGitRepoOwnerType) ToPointer() *GetDeploymentGitRepoOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo3 struct {
	Owner         string                              `json:"owner"`
	RepoUUID      string                              `json:"repoUuid"`
	Slug          string                              `json:"slug"`
	Type          GetDeploymentGitRepoDeploymentsType `json:"type"`
	WorkspaceUUID string                              `json:"workspaceUuid"`
	Path          string                              `json:"path"`
	DefaultBranch string                              `json:"defaultBranch"`
	Name          string                              `json:"name"`
	Private       bool                                `json:"private"`
	OwnerType     GetDeploymentGitRepoOwnerType       `json:"ownerType"`
}

func (o *GetDeploymentGitRepo3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitRepo3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitRepo3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitRepo3) GetType() GetDeploymentGitRepoDeploymentsType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitRepo3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo3) GetOwnerType() GetDeploymentGitRepoOwnerType {
	if o == nil {
		return GetDeploymentGitRepoOwnerType("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoType string

const (
	GetDeploymentGitRepoTypeGithub GetDeploymentGitRepoType = "github"
)

func (e GetDeploymentGitRepoType) ToPointer() *GetDeploymentGitRepoType {
	return &e
}
func (e *GetDeploymentGitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoType: %v", v)
	}
}

type GetDeploymentGitRepoDeploymentsResponseOwnerType string

const (
	GetDeploymentGitRepoDeploymentsResponseOwnerTypeTeam GetDeploymentGitRepoDeploymentsResponseOwnerType = "team"
	GetDeploymentGitRepoDeploymentsResponseOwnerTypeUser GetDeploymentGitRepoDeploymentsResponseOwnerType = "user"
)

func (e GetDeploymentGitRepoDeploymentsResponseOwnerType) ToPointer() *GetDeploymentGitRepoDeploymentsResponseOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsResponseOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo2 struct {
	Org           string                                           `json:"org"`
	Repo          string                                           `json:"repo"`
	RepoID        float64                                          `json:"repoId"`
	Type          GetDeploymentGitRepoType                         `json:"type"`
	RepoOwnerID   string                                           `json:"repoOwnerId"`
	Path          string                                           `json:"path"`
	DefaultBranch string                                           `json:"defaultBranch"`
	Name          string                                           `json:"name"`
	Private       bool                                             `json:"private"`
	OwnerType     GetDeploymentGitRepoDeploymentsResponseOwnerType `json:"ownerType"`
}

func (o *GetDeploymentGitRepo2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitRepo2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitRepo2) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitRepo2) GetType() GetDeploymentGitRepoType {
	if o == nil {
		return GetDeploymentGitRepoType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *GetDeploymentGitRepo2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo2) GetOwnerType() GetDeploymentGitRepoDeploymentsResponseOwnerType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoDeploymentsResponseType string

const (
	GetDeploymentGitRepoDeploymentsResponseTypeGitlab GetDeploymentGitRepoDeploymentsResponseType = "gitlab"
)

func (e GetDeploymentGitRepoDeploymentsResponseType) ToPointer() *GetDeploymentGitRepoDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitRepoDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentGitRepoDeploymentsOwnerType string

const (
	GetDeploymentGitRepoDeploymentsOwnerTypeTeam GetDeploymentGitRepoDeploymentsOwnerType = "team"
	GetDeploymentGitRepoDeploymentsOwnerTypeUser GetDeploymentGitRepoDeploymentsOwnerType = "user"
)

func (e GetDeploymentGitRepoDeploymentsOwnerType) ToPointer() *GetDeploymentGitRepoDeploymentsOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo1 struct {
	Namespace     string                                      `json:"namespace"`
	ProjectID     float64                                     `json:"projectId"`
	Type          GetDeploymentGitRepoDeploymentsResponseType `json:"type"`
	URL           string                                      `json:"url"`
	Path          string                                      `json:"path"`
	DefaultBranch string                                      `json:"defaultBranch"`
	Name          string                                      `json:"name"`
	Private       bool                                        `json:"private"`
	OwnerType     GetDeploymentGitRepoDeploymentsOwnerType    `json:"ownerType"`
}

func (o *GetDeploymentGitRepo1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *GetDeploymentGitRepo1) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeploymentGitRepo1) GetType() GetDeploymentGitRepoDeploymentsResponseType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentGitRepo1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo1) GetOwnerType() GetDeploymentGitRepoDeploymentsOwnerType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsOwnerType("")
	}
	return o.OwnerType
}

type ResponseBodyGitRepoType string

const (
	ResponseBodyGitRepoTypeGetDeploymentGitRepo1 ResponseBodyGitRepoType = "getDeployment_gitRepo_1"
	ResponseBodyGitRepoTypeGetDeploymentGitRepo2 ResponseBodyGitRepoType = "getDeployment_gitRepo_2"
	ResponseBodyGitRepoTypeGetDeploymentGitRepo3 ResponseBodyGitRepoType = "getDeployment_gitRepo_3"
)

type ResponseBodyGitRepo struct {
	GetDeploymentGitRepo1 *GetDeploymentGitRepo1
	GetDeploymentGitRepo2 *GetDeploymentGitRepo2
	GetDeploymentGitRepo3 *GetDeploymentGitRepo3

	Type ResponseBodyGitRepoType
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo1(getDeploymentGitRepo1 GetDeploymentGitRepo1) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo1

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo1: &getDeploymentGitRepo1,
		Type:                  typ,
	}
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo2(getDeploymentGitRepo2 GetDeploymentGitRepo2) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo2

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo2: &getDeploymentGitRepo2,
		Type:                  typ,
	}
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo3(getDeploymentGitRepo3 GetDeploymentGitRepo3) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo3

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo3: &getDeploymentGitRepo3,
		Type:                  typ,
	}
}

func (u *ResponseBodyGitRepo) UnmarshalJSON(data []byte) error {

	var getDeploymentGitRepo1 GetDeploymentGitRepo1 = GetDeploymentGitRepo1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo1, "", true, true); err == nil {
		u.GetDeploymentGitRepo1 = &getDeploymentGitRepo1
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo1
		return nil
	}

	var getDeploymentGitRepo2 GetDeploymentGitRepo2 = GetDeploymentGitRepo2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo2, "", true, true); err == nil {
		u.GetDeploymentGitRepo2 = &getDeploymentGitRepo2
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo2
		return nil
	}

	var getDeploymentGitRepo3 GetDeploymentGitRepo3 = GetDeploymentGitRepo3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo3, "", true, true); err == nil {
		u.GetDeploymentGitRepo3 = &getDeploymentGitRepo3
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyGitRepo", string(data))
}

func (u ResponseBodyGitRepo) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitRepo1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo1, "", true)
	}

	if u.GetDeploymentGitRepo2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo2, "", true)
	}

	if u.GetDeploymentGitRepo3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo3, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyGitRepo: all fields are null")
}

type ResponseBodyAliasAssignedAtType string

const (
	ResponseBodyAliasAssignedAtTypeNumber  ResponseBodyAliasAssignedAtType = "number"
	ResponseBodyAliasAssignedAtTypeBoolean ResponseBodyAliasAssignedAtType = "boolean"
)

type ResponseBodyAliasAssignedAt struct {
	Number  *float64
	Boolean *bool

	Type ResponseBodyAliasAssignedAtType
}

func CreateResponseBodyAliasAssignedAtNumber(number float64) ResponseBodyAliasAssignedAt {
	typ := ResponseBodyAliasAssignedAtTypeNumber

	return ResponseBodyAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateResponseBodyAliasAssignedAtBoolean(boolean bool) ResponseBodyAliasAssignedAt {
	typ := ResponseBodyAliasAssignedAtTypeBoolean

	return ResponseBodyAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *ResponseBodyAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ResponseBodyAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ResponseBodyAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyAliasAssignedAt", string(data))
}

func (u ResponseBodyAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyAliasAssignedAt: all fields are null")
}

type GetDeploymentResponseBodyDeploymentsResponseReadyState string

const (
	GetDeploymentResponseBodyDeploymentsResponseReadyStateBuilding     GetDeploymentResponseBodyDeploymentsResponseReadyState = "BUILDING"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateError        GetDeploymentResponseBodyDeploymentsResponseReadyState = "ERROR"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateInitializing GetDeploymentResponseBodyDeploymentsResponseReadyState = "INITIALIZING"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateReady        GetDeploymentResponseBodyDeploymentsResponseReadyState = "READY"
)

func (e GetDeploymentResponseBodyDeploymentsResponseReadyState) ToPointer() *GetDeploymentResponseBodyDeploymentsResponseReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsResponseReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentResponseBodyDeploymentsResponseReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsResponseReadyState: %v", v)
	}
}

type ResponseBodyOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *ResponseBodyOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ResponseBodyOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

type GetDeploymentResponseBodyLambdas struct {
	ID           string                                                  `json:"id"`
	CreatedAt    *float64                                                `json:"createdAt,omitempty"`
	Entrypoint   *string                                                 `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentResponseBodyDeploymentsResponseReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                                `json:"readyStateAt,omitempty"`
	Output       []ResponseBodyOutput                                    `json:"output"`
}

func (o *GetDeploymentResponseBodyLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBodyLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentResponseBodyLambdas) GetReadyState() *GetDeploymentResponseBodyDeploymentsResponseReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBodyLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *GetDeploymentResponseBodyLambdas) GetOutput() []ResponseBodyOutput {
	if o == nil {
		return []ResponseBodyOutput{}
	}
	return o.Output
}

// GetDeploymentResponseBodyProject - The public project information associated with the deployment.
type GetDeploymentResponseBodyProject struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *GetDeploymentResponseBodyProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBodyProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// ResponseBodyReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type ResponseBodyReadyState string

const (
	ResponseBodyReadyStateQueued       ResponseBodyReadyState = "QUEUED"
	ResponseBodyReadyStateBuilding     ResponseBodyReadyState = "BUILDING"
	ResponseBodyReadyStateError        ResponseBodyReadyState = "ERROR"
	ResponseBodyReadyStateInitializing ResponseBodyReadyState = "INITIALIZING"
	ResponseBodyReadyStateReady        ResponseBodyReadyState = "READY"
	ResponseBodyReadyStateCanceled     ResponseBodyReadyState = "CANCELED"
)

func (e ResponseBodyReadyState) ToPointer() *ResponseBodyReadyState {
	return &e
}
func (e *ResponseBodyReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = ResponseBodyReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyReadyState: %v", v)
	}
}

// ResponseBodyReadySubstate - The substate of the deployment when the state is "READY"
type ResponseBodyReadySubstate string

const (
	ResponseBodyReadySubstateStaged   ResponseBodyReadySubstate = "STAGED"
	ResponseBodyReadySubstatePromoted ResponseBodyReadySubstate = "PROMOTED"
)

func (e ResponseBodyReadySubstate) ToPointer() *ResponseBodyReadySubstate {
	return &e
}
func (e *ResponseBodyReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = ResponseBodyReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyReadySubstate: %v", v)
	}
}

// ResponseBodySource - Where was the deployment created from
type ResponseBodySource string

const (
	ResponseBodySourceAPITriggerGitDeploy ResponseBodySource = "api-trigger-git-deploy"
	ResponseBodySourceCli                 ResponseBodySource = "cli"
	ResponseBodySourceCloneRepo           ResponseBodySource = "clone/repo"
	ResponseBodySourceGit                 ResponseBodySource = "git"
	ResponseBodySourceImport              ResponseBodySource = "import"
	ResponseBodySourceImportRepo          ResponseBodySource = "import/repo"
)

func (e ResponseBodySource) ToPointer() *ResponseBodySource {
	return &e
}
func (e *ResponseBodySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		*e = ResponseBodySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodySource: %v", v)
	}
}

// ResponseBodyTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type ResponseBodyTarget string

const (
	ResponseBodyTargetStaging    ResponseBodyTarget = "staging"
	ResponseBodyTargetProduction ResponseBodyTarget = "production"
)

func (e ResponseBodyTarget) ToPointer() *ResponseBodyTarget {
	return &e
}
func (e *ResponseBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = ResponseBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyTarget: %v", v)
	}
}

// GetDeploymentResponseBodyTeam - The team that owns the deployment if any
type GetDeploymentResponseBodyTeam struct {
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentResponseBodyTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBodyTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentResponseBodyTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentResponseBodyType string

const (
	GetDeploymentResponseBodyTypeLambdas GetDeploymentResponseBodyType = "LAMBDAS"
)

func (e GetDeploymentResponseBodyType) ToPointer() *GetDeploymentResponseBodyType {
	return &e
}
func (e *GetDeploymentResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyType: %v", v)
	}
}

// ResponseBodyAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type ResponseBodyAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *ResponseBodyAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ResponseBodyAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentResponseBodyAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *GetDeploymentResponseBodyAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentResponseBodyAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *GetDeploymentResponseBodyAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentResponseBodyAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type ResponseBodyChecksState string

const (
	ResponseBodyChecksStateRegistered ResponseBodyChecksState = "registered"
	ResponseBodyChecksStateRunning    ResponseBodyChecksState = "running"
	ResponseBodyChecksStateCompleted  ResponseBodyChecksState = "completed"
)

func (e ResponseBodyChecksState) ToPointer() *ResponseBodyChecksState {
	return &e
}
func (e *ResponseBodyChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = ResponseBodyChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyChecksState: %v", v)
	}
}

type ResponseBodyChecksConclusion string

const (
	ResponseBodyChecksConclusionSucceeded ResponseBodyChecksConclusion = "succeeded"
	ResponseBodyChecksConclusionFailed    ResponseBodyChecksConclusion = "failed"
	ResponseBodyChecksConclusionSkipped   ResponseBodyChecksConclusion = "skipped"
	ResponseBodyChecksConclusionCanceled  ResponseBodyChecksConclusion = "canceled"
)

func (e ResponseBodyChecksConclusion) ToPointer() *ResponseBodyChecksConclusion {
	return &e
}
func (e *ResponseBodyChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = ResponseBodyChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyChecksConclusion: %v", v)
	}
}

// ResponseBodyCreator - Information about the deployment creator
type ResponseBodyCreator struct {
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
}

func (o *ResponseBodyCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ResponseBodyCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ResponseBodyCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments9 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type `json:"type"`
	Ref           string                                                                        `json:"ref"`
	Sha           string                                                                        `json:"sha"`
	Owner         *string                                                                       `json:"owner,omitempty"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
	RepoUUID      string                                                                        `json:"repoUuid"`
}

func (o *GetDeploymentGitSourceDeployments9) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceDeployments9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceDeployments9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceDeployments9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments8 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	Ref       string                                                                       `json:"ref"`
	Sha       string                                                                       `json:"sha"`
	ProjectID float64                                                                      `json:"projectId"`
}

func (o *GetDeploymentGitSourceDeployments8) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyTypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments7 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Ref    string                                                                      `json:"ref"`
	Sha    string                                                                      `json:"sha"`
	RepoID float64                                                                     `json:"repoId"`
	Org    *string                                                                     `json:"org,omitempty"`
	Repo   *string                                                                     `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments7) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceDeployments7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceDeployments7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONTypeCustom GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = "custom"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments6 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType `json:"type"`
	Ref    string                                                          `json:"ref"`
	Sha    string                                                          `json:"sha"`
	GitURL string                                                          `json:"gitUrl"`
}

func (o *GetDeploymentGitSourceDeployments6) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceDeploymentsResponse200Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments5 struct {
	Type  GetDeploymentGitSourceDeploymentsResponse200Type `json:"type"`
	Owner string                                           `json:"owner"`
	Slug  string                                           `json:"slug"`
	Ref   *string                                          `json:"ref,omitempty"`
	Sha   *string                                          `json:"sha,omitempty"`
	PrID  *float64                                         `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments5) GetType() GetDeploymentGitSourceDeploymentsResponse200Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceDeployments5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceDeployments5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponseType string

const (
	GetDeploymentGitSourceDeploymentsResponseTypeBitbucket GetDeploymentGitSourceDeploymentsResponseType = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponseType) ToPointer() *GetDeploymentGitSourceDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments4 struct {
	Type          GetDeploymentGitSourceDeploymentsResponseType `json:"type"`
	WorkspaceUUID *string                                       `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                        `json:"repoUuid"`
	Ref           *string                                       `json:"ref,omitempty"`
	Sha           *string                                       `json:"sha,omitempty"`
	PrID          *float64                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments4) GetType() GetDeploymentGitSourceDeploymentsResponseType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceDeployments4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSourceDeployments4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsType string

const (
	GetDeploymentGitSourceDeploymentsTypeGitlab GetDeploymentGitSourceDeploymentsType = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsType) ToPointer() *GetDeploymentGitSourceDeploymentsType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsType: %v", v)
	}
}

type GetDeploymentGitSourceProjectIDType string

const (
	GetDeploymentGitSourceProjectIDTypeStr    GetDeploymentGitSourceProjectIDType = "str"
	GetDeploymentGitSourceProjectIDTypeNumber GetDeploymentGitSourceProjectIDType = "number"
)

type GetDeploymentGitSourceProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceProjectIDType
}

func CreateGetDeploymentGitSourceProjectIDStr(str string) GetDeploymentGitSourceProjectID {
	typ := GetDeploymentGitSourceProjectIDTypeStr

	return GetDeploymentGitSourceProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceProjectIDNumber(number float64) GetDeploymentGitSourceProjectID {
	typ := GetDeploymentGitSourceProjectIDTypeNumber

	return GetDeploymentGitSourceProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceProjectID", string(data))
}

func (u GetDeploymentGitSourceProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceProjectID: all fields are null")
}

type GetDeploymentGitSourceDeployments3 struct {
	Type      GetDeploymentGitSourceDeploymentsType `json:"type"`
	ProjectID GetDeploymentGitSourceProjectID       `json:"projectId"`
	Ref       *string                               `json:"ref,omitempty"`
	Sha       *string                               `json:"sha,omitempty"`
	PrID      *float64                              `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments3) GetType() GetDeploymentGitSourceDeploymentsType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments3) GetProjectID() GetDeploymentGitSourceProjectID {
	if o == nil {
		return GetDeploymentGitSourceProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSourceDeployments3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceType string

const (
	GetDeploymentGitSourceTypeGithub GetDeploymentGitSourceType = "github"
)

func (e GetDeploymentGitSourceType) ToPointer() *GetDeploymentGitSourceType {
	return &e
}
func (e *GetDeploymentGitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments2 struct {
	Type GetDeploymentGitSourceType `json:"type"`
	Org  string                     `json:"org"`
	Repo string                     `json:"repo"`
	Ref  *string                    `json:"ref,omitempty"`
	Sha  *string                    `json:"sha,omitempty"`
	PrID *float64                   `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments2) GetType() GetDeploymentGitSourceType {
	if o == nil {
		return GetDeploymentGitSourceType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceDeployments2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceDeployments2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type: %v", v)
	}
}

type GetDeploymentGitSourceRepoIDType string

const (
	GetDeploymentGitSourceRepoIDTypeStr    GetDeploymentGitSourceRepoIDType = "str"
	GetDeploymentGitSourceRepoIDTypeNumber GetDeploymentGitSourceRepoIDType = "number"
)

type GetDeploymentGitSourceRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceRepoIDType
}

func CreateGetDeploymentGitSourceRepoIDStr(str string) GetDeploymentGitSourceRepoID {
	typ := GetDeploymentGitSourceRepoIDTypeStr

	return GetDeploymentGitSourceRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceRepoIDNumber(number float64) GetDeploymentGitSourceRepoID {
	typ := GetDeploymentGitSourceRepoIDTypeNumber

	return GetDeploymentGitSourceRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceRepoID", string(data))
}

func (u GetDeploymentGitSourceRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceRepoID: all fields are null")
}

type GetDeploymentGitSourceDeployments1 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type `json:"type"`
	RepoID GetDeploymentGitSourceRepoID                                                  `json:"repoId"`
	Ref    *string                                                                       `json:"ref,omitempty"`
	Sha    *string                                                                       `json:"sha,omitempty"`
	PrID   *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments1) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments1) GetRepoID() GetDeploymentGitSourceRepoID {
	if o == nil {
		return GetDeploymentGitSourceRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceDeployments1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentResponseBodyGitSourceType string

const (
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_1"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_2"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_3"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_4"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_5"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_6"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_7"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_8"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_9"
)

type GetDeploymentResponseBodyGitSource struct {
	GetDeploymentGitSourceDeployments1 *GetDeploymentGitSourceDeployments1
	GetDeploymentGitSourceDeployments2 *GetDeploymentGitSourceDeployments2
	GetDeploymentGitSourceDeployments3 *GetDeploymentGitSourceDeployments3
	GetDeploymentGitSourceDeployments4 *GetDeploymentGitSourceDeployments4
	GetDeploymentGitSourceDeployments5 *GetDeploymentGitSourceDeployments5
	GetDeploymentGitSourceDeployments6 *GetDeploymentGitSourceDeployments6
	GetDeploymentGitSourceDeployments7 *GetDeploymentGitSourceDeployments7
	GetDeploymentGitSourceDeployments8 *GetDeploymentGitSourceDeployments8
	GetDeploymentGitSourceDeployments9 *GetDeploymentGitSourceDeployments9

	Type GetDeploymentResponseBodyGitSourceType
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments1(getDeploymentGitSourceDeployments1 GetDeploymentGitSourceDeployments1) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments1: &getDeploymentGitSourceDeployments1,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments2(getDeploymentGitSourceDeployments2 GetDeploymentGitSourceDeployments2) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments2: &getDeploymentGitSourceDeployments2,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments3(getDeploymentGitSourceDeployments3 GetDeploymentGitSourceDeployments3) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments3: &getDeploymentGitSourceDeployments3,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments4(getDeploymentGitSourceDeployments4 GetDeploymentGitSourceDeployments4) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments4: &getDeploymentGitSourceDeployments4,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments5(getDeploymentGitSourceDeployments5 GetDeploymentGitSourceDeployments5) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments5: &getDeploymentGitSourceDeployments5,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments6(getDeploymentGitSourceDeployments6 GetDeploymentGitSourceDeployments6) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments6: &getDeploymentGitSourceDeployments6,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments7(getDeploymentGitSourceDeployments7 GetDeploymentGitSourceDeployments7) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments7: &getDeploymentGitSourceDeployments7,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments8(getDeploymentGitSourceDeployments8 GetDeploymentGitSourceDeployments8) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments8: &getDeploymentGitSourceDeployments8,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments9(getDeploymentGitSourceDeployments9 GetDeploymentGitSourceDeployments9) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments9: &getDeploymentGitSourceDeployments9,
		Type:                               typ,
	}
}

func (u *GetDeploymentResponseBodyGitSource) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSourceDeployments6 GetDeploymentGitSourceDeployments6 = GetDeploymentGitSourceDeployments6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments6, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments6 = &getDeploymentGitSourceDeployments6
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6
		return nil
	}

	var getDeploymentGitSourceDeployments8 GetDeploymentGitSourceDeployments8 = GetDeploymentGitSourceDeployments8{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments8, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments8 = &getDeploymentGitSourceDeployments8
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8
		return nil
	}

	var getDeploymentGitSourceDeployments1 GetDeploymentGitSourceDeployments1 = GetDeploymentGitSourceDeployments1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments1, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments1 = &getDeploymentGitSourceDeployments1
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1
		return nil
	}

	var getDeploymentGitSourceDeployments3 GetDeploymentGitSourceDeployments3 = GetDeploymentGitSourceDeployments3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments3, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments3 = &getDeploymentGitSourceDeployments3
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3
		return nil
	}

	var getDeploymentGitSourceDeployments2 GetDeploymentGitSourceDeployments2 = GetDeploymentGitSourceDeployments2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments2, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments2 = &getDeploymentGitSourceDeployments2
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2
		return nil
	}

	var getDeploymentGitSourceDeployments4 GetDeploymentGitSourceDeployments4 = GetDeploymentGitSourceDeployments4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments4, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments4 = &getDeploymentGitSourceDeployments4
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4
		return nil
	}

	var getDeploymentGitSourceDeployments5 GetDeploymentGitSourceDeployments5 = GetDeploymentGitSourceDeployments5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments5, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments5 = &getDeploymentGitSourceDeployments5
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5
		return nil
	}

	var getDeploymentGitSourceDeployments7 GetDeploymentGitSourceDeployments7 = GetDeploymentGitSourceDeployments7{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments7, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments7 = &getDeploymentGitSourceDeployments7
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7
		return nil
	}

	var getDeploymentGitSourceDeployments9 GetDeploymentGitSourceDeployments9 = GetDeploymentGitSourceDeployments9{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments9, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments9 = &getDeploymentGitSourceDeployments9
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBodyGitSource", string(data))
}

func (u GetDeploymentResponseBodyGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSourceDeployments1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments1, "", true)
	}

	if u.GetDeploymentGitSourceDeployments2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments2, "", true)
	}

	if u.GetDeploymentGitSourceDeployments3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments3, "", true)
	}

	if u.GetDeploymentGitSourceDeployments4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments4, "", true)
	}

	if u.GetDeploymentGitSourceDeployments5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments5, "", true)
	}

	if u.GetDeploymentGitSourceDeployments6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments6, "", true)
	}

	if u.GetDeploymentGitSourceDeployments7 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments7, "", true)
	}

	if u.GetDeploymentGitSourceDeployments8 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments8, "", true)
	}

	if u.GetDeploymentGitSourceDeployments9 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments9, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBodyGitSource: all fields are null")
}

// GetDeploymentResponseBody1 - The deployment including both public and private information
type GetDeploymentResponseBody1 struct {
	Build  ResponseBodyBuild    `json:"build"`
	Builds []ResponseBodyBuilds `json:"builds,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
	Crons []ResponseBodyCrons `json:"crons,omitempty"`
	// The keys of the environment variables that were assigned during runtime
	Env []string `json:"env"`
	// An object used to configure your Serverless Functions
	Functions map[string]ResponseBodyFunctions `json:"functions,omitempty"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool `json:"isInConcurrentBuildsQueue"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
	PassiveConnectConfigurationID *string `json:"passiveConnectConfigurationId,omitempty"`
	// The pricing plan the deployment was made under
	Plan ResponseBodyPlan `json:"plan"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes          []ResponseBodyRoutes               `json:"routes"`
	GitRepo         *ResponseBodyGitRepo               `json:"gitRepo,omitempty"`
	AliasAssignedAt *ResponseBodyAliasAssignedAt       `json:"aliasAssignedAt,omitempty"`
	Lambdas         []GetDeploymentResponseBodyLambdas `json:"lambdas,omitempty"`
	// The public project information associated with the deployment.
	Project *GetDeploymentResponseBodyProject `json:"project,omitempty"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState ResponseBodyReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *ResponseBodyReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// Where was the deployment created from
	Source *ResponseBodySource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *ResponseBodyTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *GetDeploymentResponseBodyTeam `json:"team,omitempty"`
	Type GetDeploymentResponseBodyType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned bool `json:"aliasAssigned"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *ResponseBodyAliasError                `json:"aliasError,omitempty"`
	AliasFinal              *string                                `json:"aliasFinal,omitempty"`
	AliasWarning            *GetDeploymentResponseBodyAliasWarning `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                  `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                               `json:"automaticAliases,omitempty"`
	BootedAt                float64                                `json:"bootedAt"`
	BuildErrorAt            *float64                               `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                                `json:"buildingAt"`
	CanceledAt              *float64                               `json:"canceledAt,omitempty"`
	ChecksState             *ResponseBodyChecksState               `json:"checksState,omitempty"`
	ChecksConclusion        *ResponseBodyChecksConclusion          `json:"checksConclusion,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// Information about the deployment creator
	Creator        ResponseBodyCreator                 `json:"creator"`
	ErrorCode      *string                             `json:"errorCode,omitempty"`
	ErrorLink      *string                             `json:"errorLink,omitempty"`
	ErrorMessage   *string                             `json:"errorMessage,omitempty"`
	ErrorStep      *string                             `json:"errorStep,omitempty"`
	PassiveRegions []string                            `json:"passiveRegions,omitempty"`
	GitSource      *GetDeploymentResponseBodyGitSource `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
}

func (o *GetDeploymentResponseBody1) GetBuild() ResponseBodyBuild {
	if o == nil {
		return ResponseBodyBuild{}
	}
	return o.Build
}

func (o *GetDeploymentResponseBody1) GetBuilds() []ResponseBodyBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeploymentResponseBody1) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetDeploymentResponseBody1) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetDeploymentResponseBody1) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetDeploymentResponseBody1) GetCrons() []ResponseBodyCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetDeploymentResponseBody1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *GetDeploymentResponseBody1) GetFunctions() map[string]ResponseBodyFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *GetDeploymentResponseBody1) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *GetDeploymentResponseBody1) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *GetDeploymentResponseBody1) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeploymentResponseBody1) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetDeploymentResponseBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeploymentResponseBody1) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *GetDeploymentResponseBody1) GetPlan() ResponseBodyPlan {
	if o == nil {
		return ResponseBodyPlan("")
	}
	return o.Plan
}

func (o *GetDeploymentResponseBody1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentResponseBody1) GetRoutes() []ResponseBodyRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *GetDeploymentResponseBody1) GetGitRepo() *ResponseBodyGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *GetDeploymentResponseBody1) GetAliasAssignedAt() *ResponseBodyAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *GetDeploymentResponseBody1) GetLambdas() []GetDeploymentResponseBodyLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeploymentResponseBody1) GetProject() *GetDeploymentResponseBodyProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeploymentResponseBody1) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeploymentResponseBody1) GetReadyState() ResponseBodyReadyState {
	if o == nil {
		return ResponseBodyReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBody1) GetReadySubstate() *ResponseBodyReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeploymentResponseBody1) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeploymentResponseBody1) GetSource() *ResponseBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeploymentResponseBody1) GetTarget() *ResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeploymentResponseBody1) GetTeam() *GetDeploymentResponseBodyTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeploymentResponseBody1) GetType() GetDeploymentResponseBodyType {
	if o == nil {
		return GetDeploymentResponseBodyType("")
	}
	return o.Type
}

func (o *GetDeploymentResponseBody1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentResponseBody1) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeploymentResponseBody1) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetDeploymentResponseBody1) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeploymentResponseBody1) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *GetDeploymentResponseBody1) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeploymentResponseBody1) GetAliasError() *ResponseBodyAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeploymentResponseBody1) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeploymentResponseBody1) GetAliasWarning() *GetDeploymentResponseBodyAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeploymentResponseBody1) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeploymentResponseBody1) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeploymentResponseBody1) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeploymentResponseBody1) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeploymentResponseBody1) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeploymentResponseBody1) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentResponseBody1) GetChecksState() *ResponseBodyChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeploymentResponseBody1) GetChecksConclusion() *ResponseBodyChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeploymentResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBody1) GetCreator() ResponseBodyCreator {
	if o == nil {
		return ResponseBodyCreator{}
	}
	return o.Creator
}

func (o *GetDeploymentResponseBody1) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeploymentResponseBody1) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeploymentResponseBody1) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeploymentResponseBody1) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeploymentResponseBody1) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeploymentResponseBody1) GetGitSource() *GetDeploymentResponseBodyGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeploymentResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetDeploymentResponseBodyUnionType string

const (
	GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1 GetDeploymentResponseBodyUnionType = "getDeployment_responseBody_1"
	GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2 GetDeploymentResponseBodyUnionType = "getDeployment_responseBody_2"
)

// GetDeploymentResponseBody - The deployment including only public information
// The deployment including both public and private information
type GetDeploymentResponseBody struct {
	GetDeploymentResponseBody1 *GetDeploymentResponseBody1
	GetDeploymentResponseBody2 *GetDeploymentResponseBody2

	Type GetDeploymentResponseBodyUnionType
}

func CreateGetDeploymentResponseBodyGetDeploymentResponseBody1(getDeploymentResponseBody1 GetDeploymentResponseBody1) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1

	return GetDeploymentResponseBody{
		GetDeploymentResponseBody1: &getDeploymentResponseBody1,
		Type:                       typ,
	}
}

func CreateGetDeploymentResponseBodyGetDeploymentResponseBody2(getDeploymentResponseBody2 GetDeploymentResponseBody2) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2

	return GetDeploymentResponseBody{
		GetDeploymentResponseBody2: &getDeploymentResponseBody2,
		Type:                       typ,
	}
}

func (u *GetDeploymentResponseBody) UnmarshalJSON(data []byte) error {

	var getDeploymentResponseBody2 GetDeploymentResponseBody2 = GetDeploymentResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentResponseBody2, "", true, true); err == nil {
		u.GetDeploymentResponseBody2 = &getDeploymentResponseBody2
		u.Type = GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2
		return nil
	}

	var getDeploymentResponseBody1 GetDeploymentResponseBody1 = GetDeploymentResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentResponseBody1, "", true, true); err == nil {
		u.GetDeploymentResponseBody1 = &getDeploymentResponseBody1
		u.Type = GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBody", string(data))
}

func (u GetDeploymentResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDeploymentResponseBody1, "", true)
	}

	if u.GetDeploymentResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDeploymentResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBody: all fields are null")
}

type GetDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The deployment including only public information
	// The deployment including both public and private information
	OneOf *GetDeploymentResponseBody
}

func (o *GetDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDeploymentResponse) GetOneOf() *GetDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
