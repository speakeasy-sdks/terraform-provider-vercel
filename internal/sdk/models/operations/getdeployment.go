// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/zchee/terraform-provider-vercel/internal/sdk/internal/utils"
	"net/http"
)

type GetDeploymentRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// Whether to add in gitRepo information.
	WithGitRepoInfo *string `queryParam:"style=form,explode=true,name=withGitRepoInfo"`
}

func (o *GetDeploymentRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentRequest) GetWithGitRepoInfo() *string {
	if o == nil {
		return nil
	}
	return o.WithGitRepoInfo
}

// GetDeploymentDeploymentsAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type GetDeploymentDeploymentsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentDeploymentsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentDeploymentsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentDeploymentsAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *GetDeploymentDeploymentsAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetDeploymentDeploymentsAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentDeploymentsAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentDeploymentsAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentDeploymentsChecksConclusion string

const (
	GetDeploymentDeploymentsChecksConclusionSucceeded GetDeploymentDeploymentsChecksConclusion = "succeeded"
	GetDeploymentDeploymentsChecksConclusionFailed    GetDeploymentDeploymentsChecksConclusion = "failed"
	GetDeploymentDeploymentsChecksConclusionSkipped   GetDeploymentDeploymentsChecksConclusion = "skipped"
	GetDeploymentDeploymentsChecksConclusionCanceled  GetDeploymentDeploymentsChecksConclusion = "canceled"
)

func (e GetDeploymentDeploymentsChecksConclusion) ToPointer() *GetDeploymentDeploymentsChecksConclusion {
	return &e
}
func (e *GetDeploymentDeploymentsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentDeploymentsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsChecksConclusion: %v", v)
	}
}

type GetDeploymentDeploymentsChecksState string

const (
	GetDeploymentDeploymentsChecksStateRegistered GetDeploymentDeploymentsChecksState = "registered"
	GetDeploymentDeploymentsChecksStateRunning    GetDeploymentDeploymentsChecksState = "running"
	GetDeploymentDeploymentsChecksStateCompleted  GetDeploymentDeploymentsChecksState = "completed"
)

func (e GetDeploymentDeploymentsChecksState) ToPointer() *GetDeploymentDeploymentsChecksState {
	return &e
}
func (e *GetDeploymentDeploymentsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentDeploymentsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsChecksState: %v", v)
	}
}

// GetDeploymentDeploymentsCreator - Information about the deployment creator
type GetDeploymentDeploymentsCreator struct {
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *GetDeploymentDeploymentsCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetDeploymentDeploymentsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentDeploymentsCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9TypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type: %v", v)
	}
}

type GetDeploymentDeployments9 struct {
	Owner         *string                                                                       `json:"owner,omitempty"`
	Ref           string                                                                        `json:"ref"`
	RepoUUID      string                                                                        `json:"repoUuid"`
	Sha           string                                                                        `json:"sha"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type `json:"type"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
}

func (o *GetDeploymentDeployments9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentDeployments9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentDeployments9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentDeployments9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentDeployments9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentDeployments9) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource9Type("")
	}
	return o.Type
}

func (o *GetDeploymentDeployments9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8TypeGitlab GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type = "gitlab"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type: %v", v)
	}
}

type GetDeploymentDeployments8 struct {
	ProjectID float64                                                                       `json:"projectId"`
	Ref       string                                                                        `json:"ref"`
	Sha       string                                                                        `json:"sha"`
	Type      GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type `json:"type"`
}

func (o *GetDeploymentDeployments8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeploymentDeployments8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentDeployments8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentDeployments8) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource8Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7TypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type: %v", v)
	}
}

type GetDeploymentDeployments7 struct {
	Org    *string                                                                       `json:"org,omitempty"`
	Ref    string                                                                        `json:"ref"`
	Repo   *string                                                                       `json:"repo,omitempty"`
	RepoID float64                                                                       `json:"repoId"`
	Sha    string                                                                        `json:"sha"`
	Type   GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type `json:"type"`
}

func (o *GetDeploymentDeployments7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentDeployments7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentDeployments7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetDeploymentDeployments7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentDeployments7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentDeployments7) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource7Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6TypeCustom GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type = "custom"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type: %v", v)
	}
}

type GetDeploymentDeployments6 struct {
	GitURL string                                                                        `json:"gitUrl"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	Type   GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type `json:"type"`
}

func (o *GetDeploymentDeployments6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *GetDeploymentDeployments6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentDeployments6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentDeployments6) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource6Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5TypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type: %v", v)
	}
}

type GetDeploymentDeployments5 struct {
	Owner string                                                                        `json:"owner"`
	PrID  *float64                                                                      `json:"prId,omitempty"`
	Ref   *string                                                                       `json:"ref,omitempty"`
	Sha   *string                                                                       `json:"sha,omitempty"`
	Slug  string                                                                        `json:"slug"`
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type `json:"type"`
}

func (o *GetDeploymentDeployments5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentDeployments5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeployments5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeployments5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeployments5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentDeployments5) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource5Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4TypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type: %v", v)
	}
}

type GetDeploymentDeployments4 struct {
	PrID          *float64                                                                      `json:"prId,omitempty"`
	Ref           *string                                                                       `json:"ref,omitempty"`
	RepoUUID      string                                                                        `json:"repoUuid"`
	Sha           *string                                                                       `json:"sha,omitempty"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type `json:"type"`
	WorkspaceUUID *string                                                                       `json:"workspaceUuid,omitempty"`
}

func (o *GetDeploymentDeployments4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeployments4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeployments4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentDeployments4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeployments4) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource4Type("")
	}
	return o.Type
}

func (o *GetDeploymentDeployments4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type GetDeploymentDeploymentsProjectIDType string

const (
	GetDeploymentDeploymentsProjectIDTypeStr    GetDeploymentDeploymentsProjectIDType = "str"
	GetDeploymentDeploymentsProjectIDTypeNumber GetDeploymentDeploymentsProjectIDType = "number"
)

type GetDeploymentDeploymentsProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentDeploymentsProjectIDType
}

func CreateGetDeploymentDeploymentsProjectIDStr(str string) GetDeploymentDeploymentsProjectID {
	typ := GetDeploymentDeploymentsProjectIDTypeStr

	return GetDeploymentDeploymentsProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentDeploymentsProjectIDNumber(number float64) GetDeploymentDeploymentsProjectID {
	typ := GetDeploymentDeploymentsProjectIDTypeNumber

	return GetDeploymentDeploymentsProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentDeploymentsProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentDeploymentsProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentDeploymentsProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentDeploymentsProjectID", string(data))
}

func (u GetDeploymentDeploymentsProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentDeploymentsProjectID: all fields are null")
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3TypeGitlab GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type = "gitlab"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type: %v", v)
	}
}

type GetDeploymentDeploymentsResponse2003 struct {
	PrID      *float64                                                                      `json:"prId,omitempty"`
	ProjectID GetDeploymentDeploymentsProjectID                                             `json:"projectId"`
	Ref       *string                                                                       `json:"ref,omitempty"`
	Sha       *string                                                                       `json:"sha,omitempty"`
	Type      GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type `json:"type"`
}

func (o *GetDeploymentDeploymentsResponse2003) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeploymentsResponse2003) GetProjectID() GetDeploymentDeploymentsProjectID {
	if o == nil {
		return GetDeploymentDeploymentsProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentDeploymentsResponse2003) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeploymentsResponse2003) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeploymentsResponse2003) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSource3Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceTypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSON2 struct {
	Org  string                                                                       `json:"org"`
	PrID *float64                                                                     `json:"prId,omitempty"`
	Ref  *string                                                                      `json:"ref,omitempty"`
	Repo string                                                                       `json:"repo"`
	Sha  *string                                                                      `json:"sha,omitempty"`
	Type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType `json:"type"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON2) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2GitSourceType("")
	}
	return o.Type
}

type GetDeploymentDeploymentsRepoIDType string

const (
	GetDeploymentDeploymentsRepoIDTypeStr    GetDeploymentDeploymentsRepoIDType = "str"
	GetDeploymentDeploymentsRepoIDTypeNumber GetDeploymentDeploymentsRepoIDType = "number"
)

type GetDeploymentDeploymentsRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentDeploymentsRepoIDType
}

func CreateGetDeploymentDeploymentsRepoIDStr(str string) GetDeploymentDeploymentsRepoID {
	typ := GetDeploymentDeploymentsRepoIDTypeStr

	return GetDeploymentDeploymentsRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentDeploymentsRepoIDNumber(number float64) GetDeploymentDeploymentsRepoID {
	typ := GetDeploymentDeploymentsRepoIDTypeNumber

	return GetDeploymentDeploymentsRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentDeploymentsRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentDeploymentsRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentDeploymentsRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentDeploymentsRepoID", string(data))
}

func (u GetDeploymentDeploymentsRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentDeploymentsRepoID: all fields are null")
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2TypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSON1 struct {
	PrID   *float64                                                            `json:"prId,omitempty"`
	Ref    *string                                                             `json:"ref,omitempty"`
	RepoID GetDeploymentDeploymentsRepoID                                      `json:"repoId"`
	Sha    *string                                                             `json:"sha,omitempty"`
	Type   GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type `json:"type"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON1) GetRepoID() GetDeploymentDeploymentsRepoID {
	if o == nil {
		return GetDeploymentDeploymentsRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSON1) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsGitSourceType string

const (
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON1 GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_response_200_ApplicationJSON_1"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON2 GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_response_200_ApplicationJSON_2"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse2003                GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_response_200_3"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments4                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_4"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments5                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_5"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments6                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_6"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments7                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_7"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments8                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_8"
	GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments9                           GetDeploymentDeploymentsGitSourceType = "getDeployment_deployments_9"
)

type GetDeploymentDeploymentsGitSource struct {
	GetDeploymentDeploymentsResponse200ApplicationJSON1 *GetDeploymentDeploymentsResponse200ApplicationJSON1
	GetDeploymentDeploymentsResponse200ApplicationJSON2 *GetDeploymentDeploymentsResponse200ApplicationJSON2
	GetDeploymentDeploymentsResponse2003                *GetDeploymentDeploymentsResponse2003
	GetDeploymentDeployments4                           *GetDeploymentDeployments4
	GetDeploymentDeployments5                           *GetDeploymentDeployments5
	GetDeploymentDeployments6                           *GetDeploymentDeployments6
	GetDeploymentDeployments7                           *GetDeploymentDeployments7
	GetDeploymentDeployments8                           *GetDeploymentDeployments8
	GetDeploymentDeployments9                           *GetDeploymentDeployments9

	Type GetDeploymentDeploymentsGitSourceType
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeploymentsResponse200ApplicationJSON1(getDeploymentDeploymentsResponse200ApplicationJSON1 GetDeploymentDeploymentsResponse200ApplicationJSON1) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON1

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeploymentsResponse200ApplicationJSON1: &getDeploymentDeploymentsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeploymentsResponse200ApplicationJSON2(getDeploymentDeploymentsResponse200ApplicationJSON2 GetDeploymentDeploymentsResponse200ApplicationJSON2) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON2

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeploymentsResponse200ApplicationJSON2: &getDeploymentDeploymentsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeploymentsResponse2003(getDeploymentDeploymentsResponse2003 GetDeploymentDeploymentsResponse2003) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse2003

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeploymentsResponse2003: &getDeploymentDeploymentsResponse2003,
		Type:                                 typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments4(getDeploymentDeployments4 GetDeploymentDeployments4) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments4

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments4: &getDeploymentDeployments4,
		Type:                      typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments5(getDeploymentDeployments5 GetDeploymentDeployments5) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments5

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments5: &getDeploymentDeployments5,
		Type:                      typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments6(getDeploymentDeployments6 GetDeploymentDeployments6) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments6

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments6: &getDeploymentDeployments6,
		Type:                      typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments7(getDeploymentDeployments7 GetDeploymentDeployments7) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments7

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments7: &getDeploymentDeployments7,
		Type:                      typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments8(getDeploymentDeployments8 GetDeploymentDeployments8) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments8

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments8: &getDeploymentDeployments8,
		Type:                      typ,
	}
}

func CreateGetDeploymentDeploymentsGitSourceGetDeploymentDeployments9(getDeploymentDeployments9 GetDeploymentDeployments9) GetDeploymentDeploymentsGitSource {
	typ := GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments9

	return GetDeploymentDeploymentsGitSource{
		GetDeploymentDeployments9: &getDeploymentDeployments9,
		Type:                      typ,
	}
}

func (u *GetDeploymentDeploymentsGitSource) UnmarshalJSON(data []byte) error {

	var getDeploymentDeployments6 GetDeploymentDeployments6 = GetDeploymentDeployments6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments6, "", true, true); err == nil {
		u.GetDeploymentDeployments6 = &getDeploymentDeployments6
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments6
		return nil
	}

	var getDeploymentDeployments8 GetDeploymentDeployments8 = GetDeploymentDeployments8{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments8, "", true, true); err == nil {
		u.GetDeploymentDeployments8 = &getDeploymentDeployments8
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments8
		return nil
	}

	var getDeploymentDeploymentsResponse200ApplicationJSON1 GetDeploymentDeploymentsResponse200ApplicationJSON1 = GetDeploymentDeploymentsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSON1 = &getDeploymentDeploymentsResponse200ApplicationJSON1
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON1
		return nil
	}

	var getDeploymentDeploymentsResponse2003 GetDeploymentDeploymentsResponse2003 = GetDeploymentDeploymentsResponse2003{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse2003, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse2003 = &getDeploymentDeploymentsResponse2003
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse2003
		return nil
	}

	var getDeploymentDeploymentsResponse200ApplicationJSON2 GetDeploymentDeploymentsResponse200ApplicationJSON2 = GetDeploymentDeploymentsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSON2 = &getDeploymentDeploymentsResponse200ApplicationJSON2
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeploymentsResponse200ApplicationJSON2
		return nil
	}

	var getDeploymentDeployments4 GetDeploymentDeployments4 = GetDeploymentDeployments4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments4, "", true, true); err == nil {
		u.GetDeploymentDeployments4 = &getDeploymentDeployments4
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments4
		return nil
	}

	var getDeploymentDeployments5 GetDeploymentDeployments5 = GetDeploymentDeployments5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments5, "", true, true); err == nil {
		u.GetDeploymentDeployments5 = &getDeploymentDeployments5
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments5
		return nil
	}

	var getDeploymentDeployments7 GetDeploymentDeployments7 = GetDeploymentDeployments7{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments7, "", true, true); err == nil {
		u.GetDeploymentDeployments7 = &getDeploymentDeployments7
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments7
		return nil
	}

	var getDeploymentDeployments9 GetDeploymentDeployments9 = GetDeploymentDeployments9{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments9, "", true, true); err == nil {
		u.GetDeploymentDeployments9 = &getDeploymentDeployments9
		u.Type = GetDeploymentDeploymentsGitSourceTypeGetDeploymentDeployments9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentDeploymentsGitSource", string(data))
}

func (u GetDeploymentDeploymentsGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeploymentsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSON1, "", true)
	}

	if u.GetDeploymentDeploymentsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSON2, "", true)
	}

	if u.GetDeploymentDeploymentsResponse2003 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse2003, "", true)
	}

	if u.GetDeploymentDeployments4 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments4, "", true)
	}

	if u.GetDeploymentDeployments5 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments5, "", true)
	}

	if u.GetDeploymentDeployments6 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments6, "", true)
	}

	if u.GetDeploymentDeployments7 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments7, "", true)
	}

	if u.GetDeploymentDeployments8 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments8, "", true)
	}

	if u.GetDeploymentDeployments9 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments9, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentDeploymentsGitSource: all fields are null")
}

type GetDeploymentDeploymentsOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *GetDeploymentDeploymentsOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *GetDeploymentDeploymentsOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type GetDeploymentDeploymentsResponseReadyState string

const (
	GetDeploymentDeploymentsResponseReadyStateBuilding     GetDeploymentDeploymentsResponseReadyState = "BUILDING"
	GetDeploymentDeploymentsResponseReadyStateError        GetDeploymentDeploymentsResponseReadyState = "ERROR"
	GetDeploymentDeploymentsResponseReadyStateInitializing GetDeploymentDeploymentsResponseReadyState = "INITIALIZING"
	GetDeploymentDeploymentsResponseReadyStateReady        GetDeploymentDeploymentsResponseReadyState = "READY"
)

func (e GetDeploymentDeploymentsResponseReadyState) ToPointer() *GetDeploymentDeploymentsResponseReadyState {
	return &e
}
func (e *GetDeploymentDeploymentsResponseReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentDeploymentsResponseReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponseReadyState: %v", v)
	}
}

type GetDeploymentDeploymentsLambdas struct {
	CreatedAt    *float64                                    `json:"createdAt,omitempty"`
	Entrypoint   *string                                     `json:"entrypoint,omitempty"`
	ID           string                                      `json:"id"`
	Output       []GetDeploymentDeploymentsOutput            `json:"output"`
	ReadyState   *GetDeploymentDeploymentsResponseReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                    `json:"readyStateAt,omitempty"`
}

func (o *GetDeploymentDeploymentsLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentDeploymentsLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentDeploymentsLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentDeploymentsLambdas) GetOutput() []GetDeploymentDeploymentsOutput {
	if o == nil {
		return []GetDeploymentDeploymentsOutput{}
	}
	return o.Output
}

func (o *GetDeploymentDeploymentsLambdas) GetReadyState() *GetDeploymentDeploymentsResponseReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentDeploymentsLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// GetDeploymentDeploymentsProject - The public project information associated with the deployment.
type GetDeploymentDeploymentsProject struct {
	Framework *string `json:"framework,omitempty"`
	ID        string  `json:"id"`
	Name      string  `json:"name"`
}

func (o *GetDeploymentDeploymentsProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetDeploymentDeploymentsProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentDeploymentsProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// GetDeploymentDeploymentsReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type GetDeploymentDeploymentsReadyState string

const (
	GetDeploymentDeploymentsReadyStateQueued       GetDeploymentDeploymentsReadyState = "QUEUED"
	GetDeploymentDeploymentsReadyStateBuilding     GetDeploymentDeploymentsReadyState = "BUILDING"
	GetDeploymentDeploymentsReadyStateError        GetDeploymentDeploymentsReadyState = "ERROR"
	GetDeploymentDeploymentsReadyStateInitializing GetDeploymentDeploymentsReadyState = "INITIALIZING"
	GetDeploymentDeploymentsReadyStateReady        GetDeploymentDeploymentsReadyState = "READY"
	GetDeploymentDeploymentsReadyStateCanceled     GetDeploymentDeploymentsReadyState = "CANCELED"
)

func (e GetDeploymentDeploymentsReadyState) ToPointer() *GetDeploymentDeploymentsReadyState {
	return &e
}
func (e *GetDeploymentDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsReadyState: %v", v)
	}
}

// GetDeploymentDeploymentsReadySubstate - The substate of the deployment when the state is "READY"
type GetDeploymentDeploymentsReadySubstate string

const (
	GetDeploymentDeploymentsReadySubstateStaged   GetDeploymentDeploymentsReadySubstate = "STAGED"
	GetDeploymentDeploymentsReadySubstatePromoted GetDeploymentDeploymentsReadySubstate = "PROMOTED"
)

func (e GetDeploymentDeploymentsReadySubstate) ToPointer() *GetDeploymentDeploymentsReadySubstate {
	return &e
}
func (e *GetDeploymentDeploymentsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentDeploymentsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsReadySubstate: %v", v)
	}
}

// GetDeploymentDeploymentsSource - Where was the deployment created from
type GetDeploymentDeploymentsSource string

const (
	GetDeploymentDeploymentsSourceAPITriggerGitDeploy GetDeploymentDeploymentsSource = "api-trigger-git-deploy"
	GetDeploymentDeploymentsSourceCli                 GetDeploymentDeploymentsSource = "cli"
	GetDeploymentDeploymentsSourceCloneRepo           GetDeploymentDeploymentsSource = "clone/repo"
	GetDeploymentDeploymentsSourceGit                 GetDeploymentDeploymentsSource = "git"
	GetDeploymentDeploymentsSourceImport              GetDeploymentDeploymentsSource = "import"
	GetDeploymentDeploymentsSourceImportRepo          GetDeploymentDeploymentsSource = "import/repo"
)

func (e GetDeploymentDeploymentsSource) ToPointer() *GetDeploymentDeploymentsSource {
	return &e
}
func (e *GetDeploymentDeploymentsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		*e = GetDeploymentDeploymentsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsSource: %v", v)
	}
}

// GetDeploymentDeploymentsTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type GetDeploymentDeploymentsTarget string

const (
	GetDeploymentDeploymentsTargetStaging    GetDeploymentDeploymentsTarget = "staging"
	GetDeploymentDeploymentsTargetProduction GetDeploymentDeploymentsTarget = "production"
)

func (e GetDeploymentDeploymentsTarget) ToPointer() *GetDeploymentDeploymentsTarget {
	return &e
}
func (e *GetDeploymentDeploymentsTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentDeploymentsTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsTarget: %v", v)
	}
}

// GetDeploymentDeploymentsTeam - The team that owns the deployment if any
type GetDeploymentDeploymentsTeam struct {
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *GetDeploymentDeploymentsTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetDeploymentDeploymentsTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentDeploymentsTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentDeploymentsTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type GetDeploymentDeploymentsType string

const (
	GetDeploymentDeploymentsTypeLambdas GetDeploymentDeploymentsType = "LAMBDAS"
)

func (e GetDeploymentDeploymentsType) ToPointer() *GetDeploymentDeploymentsType {
	return &e
}
func (e *GetDeploymentDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsType: %v", v)
	}
}

// GetDeployment2 - The deployment including only public information
type GetDeployment2 struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned bool `json:"aliasAssigned"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *GetDeploymentDeploymentsAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                                   `json:"aliasFinal,omitempty"`
	AliasWarning            *GetDeploymentDeploymentsAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                                     `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                  `json:"automaticAliases,omitempty"`
	BootedAt                float64                                   `json:"bootedAt"`
	BuildErrorAt            *float64                                  `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                                   `json:"buildingAt"`
	CanceledAt              *float64                                  `json:"canceledAt,omitempty"`
	ChecksConclusion        *GetDeploymentDeploymentsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *GetDeploymentDeploymentsChecksState      `json:"checksState,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// Information about the deployment creator
	Creator      GetDeploymentDeploymentsCreator    `json:"creator"`
	ErrorCode    *string                            `json:"errorCode,omitempty"`
	ErrorLink    *string                            `json:"errorLink,omitempty"`
	ErrorMessage *string                            `json:"errorMessage,omitempty"`
	ErrorStep    *string                            `json:"errorStep,omitempty"`
	GitSource    *GetDeploymentDeploymentsGitSource `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID      string                            `json:"id"`
	Lambdas []GetDeploymentDeploymentsLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name           string   `json:"name"`
	PassiveRegions []string `json:"passiveRegions,omitempty"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The public project information associated with the deployment.
	Project *GetDeploymentDeploymentsProject `json:"project,omitempty"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState GetDeploymentDeploymentsReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *GetDeploymentDeploymentsReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// Where was the deployment created from
	Source *GetDeploymentDeploymentsSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *GetDeploymentDeploymentsTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *GetDeploymentDeploymentsTeam `json:"team,omitempty"`
	Type GetDeploymentDeploymentsType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
}

func (o *GetDeployment2) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *GetDeployment2) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeployment2) GetAliasError() *GetDeploymentDeploymentsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeployment2) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeployment2) GetAliasWarning() *GetDeploymentDeploymentsAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeployment2) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeployment2) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeployment2) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeployment2) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeployment2) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeployment2) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeployment2) GetChecksConclusion() *GetDeploymentDeploymentsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeployment2) GetChecksState() *GetDeploymentDeploymentsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeployment2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeployment2) GetCreator() GetDeploymentDeploymentsCreator {
	if o == nil {
		return GetDeploymentDeploymentsCreator{}
	}
	return o.Creator
}

func (o *GetDeployment2) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeployment2) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeployment2) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeployment2) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeployment2) GetGitSource() *GetDeploymentDeploymentsGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeployment2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeployment2) GetLambdas() []GetDeploymentDeploymentsLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeployment2) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeployment2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeployment2) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeployment2) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeployment2) GetProject() *GetDeploymentDeploymentsProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeployment2) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeployment2) GetReadyState() GetDeploymentDeploymentsReadyState {
	if o == nil {
		return GetDeploymentDeploymentsReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeployment2) GetReadySubstate() *GetDeploymentDeploymentsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeployment2) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeployment2) GetSource() *GetDeploymentDeploymentsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeployment2) GetTarget() *GetDeploymentDeploymentsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeployment2) GetTeam() *GetDeploymentDeploymentsTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeployment2) GetType() GetDeploymentDeploymentsType {
	if o == nil {
		return GetDeploymentDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeployment2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeployment2) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeployment2) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

type GetDeploymentAliasAssignedAtType string

const (
	GetDeploymentAliasAssignedAtTypeNumber  GetDeploymentAliasAssignedAtType = "number"
	GetDeploymentAliasAssignedAtTypeBoolean GetDeploymentAliasAssignedAtType = "boolean"
)

type GetDeploymentAliasAssignedAt struct {
	Number  *float64
	Boolean *bool

	Type GetDeploymentAliasAssignedAtType
}

func CreateGetDeploymentAliasAssignedAtNumber(number float64) GetDeploymentAliasAssignedAt {
	typ := GetDeploymentAliasAssignedAtTypeNumber

	return GetDeploymentAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetDeploymentAliasAssignedAtBoolean(boolean bool) GetDeploymentAliasAssignedAt {
	typ := GetDeploymentAliasAssignedAtTypeBoolean

	return GetDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentAliasAssignedAt", string(data))
}

func (u GetDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentAliasAssignedAt: all fields are null")
}

// GetDeploymentAliasError - An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
type GetDeploymentAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentAliasWarning struct {
	Action  *string `json:"action,omitempty"`
	Code    string  `json:"code"`
	Link    *string `json:"link,omitempty"`
	Message string  `json:"message"`
}

func (o *GetDeploymentAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetDeploymentAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentBuild struct {
	// The keys of the environment variables that were assigned during the build phase.
	Env []string `json:"env"`
}

func (o *GetDeploymentBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type GetDeploymentBuilds struct {
}

type GetDeploymentChecksConclusion string

const (
	GetDeploymentChecksConclusionSucceeded GetDeploymentChecksConclusion = "succeeded"
	GetDeploymentChecksConclusionFailed    GetDeploymentChecksConclusion = "failed"
	GetDeploymentChecksConclusionSkipped   GetDeploymentChecksConclusion = "skipped"
	GetDeploymentChecksConclusionCanceled  GetDeploymentChecksConclusion = "canceled"
)

func (e GetDeploymentChecksConclusion) ToPointer() *GetDeploymentChecksConclusion {
	return &e
}
func (e *GetDeploymentChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksConclusion: %v", v)
	}
}

type GetDeploymentChecksState string

const (
	GetDeploymentChecksStateRegistered GetDeploymentChecksState = "registered"
	GetDeploymentChecksStateRunning    GetDeploymentChecksState = "running"
	GetDeploymentChecksStateCompleted  GetDeploymentChecksState = "completed"
)

func (e GetDeploymentChecksState) ToPointer() *GetDeploymentChecksState {
	return &e
}
func (e *GetDeploymentChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksState: %v", v)
	}
}

// GetDeploymentCreator - Information about the deployment creator
type GetDeploymentCreator struct {
	// The avatar of the user that created the deployment
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the user that created the deployment
	UID string `json:"uid"`
	// The username of the user that created the deployment
	Username *string `json:"username,omitempty"`
}

func (o *GetDeploymentCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetDeploymentCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// GetDeploymentCrons - The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
type GetDeploymentCrons struct {
	Path     string `json:"path"`
	Schedule string `json:"schedule"`
}

func (o *GetDeploymentCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

// GetDeploymentFunctions - An object used to configure your Serverless Functions
type GetDeploymentFunctions struct {
	ExcludeFiles *string  `json:"excludeFiles,omitempty"`
	IncludeFiles *string  `json:"includeFiles,omitempty"`
	MaxDuration  *float64 `json:"maxDuration,omitempty"`
	Memory       *float64 `json:"memory,omitempty"`
	Runtime      *string  `json:"runtime,omitempty"`
}

func (o *GetDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *GetDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *GetDeploymentFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *GetDeploymentFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *GetDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

type GetDeploymentDeploymentsResponseOwnerType string

const (
	GetDeploymentDeploymentsResponseOwnerTypeTeam GetDeploymentDeploymentsResponseOwnerType = "team"
	GetDeploymentDeploymentsResponseOwnerTypeUser GetDeploymentDeploymentsResponseOwnerType = "user"
)

func (e GetDeploymentDeploymentsResponseOwnerType) ToPointer() *GetDeploymentDeploymentsResponseOwnerType {
	return &e
}
func (e *GetDeploymentDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponseOwnerType: %v", v)
	}
}

type GetDeploymentDeploymentsResponseType string

const (
	GetDeploymentDeploymentsResponseTypeBitbucket GetDeploymentDeploymentsResponseType = "bitbucket"
)

func (e GetDeploymentDeploymentsResponseType) ToPointer() *GetDeploymentDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponseType: %v", v)
	}
}

type GetDeployment3 struct {
	DefaultBranch string                                    `json:"defaultBranch"`
	Name          string                                    `json:"name"`
	Owner         string                                    `json:"owner"`
	OwnerType     GetDeploymentDeploymentsResponseOwnerType `json:"ownerType"`
	Path          string                                    `json:"path"`
	Private       bool                                      `json:"private"`
	RepoUUID      string                                    `json:"repoUuid"`
	Slug          string                                    `json:"slug"`
	Type          GetDeploymentDeploymentsResponseType      `json:"type"`
	WorkspaceUUID string                                    `json:"workspaceUuid"`
}

func (o *GetDeployment3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeployment3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeployment3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeployment3) GetOwnerType() GetDeploymentDeploymentsResponseOwnerType {
	if o == nil {
		return GetDeploymentDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

func (o *GetDeployment3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeployment3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeployment3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeployment3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeployment3) GetType() GetDeploymentDeploymentsResponseType {
	if o == nil {
		return GetDeploymentDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeployment3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type GetDeploymentDeploymentsOwnerType string

const (
	GetDeploymentDeploymentsOwnerTypeTeam GetDeploymentDeploymentsOwnerType = "team"
	GetDeploymentDeploymentsOwnerTypeUser GetDeploymentDeploymentsOwnerType = "user"
)

func (e GetDeploymentDeploymentsOwnerType) ToPointer() *GetDeploymentDeploymentsOwnerType {
	return &e
}
func (e *GetDeploymentDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsOwnerType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2TypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type: %v", v)
	}
}

type GetDeploymentDeployments2 struct {
	DefaultBranch string                                                                      `json:"defaultBranch"`
	Name          string                                                                      `json:"name"`
	Org           string                                                                      `json:"org"`
	OwnerType     GetDeploymentDeploymentsOwnerType                                           `json:"ownerType"`
	Path          string                                                                      `json:"path"`
	Private       bool                                                                        `json:"private"`
	Repo          string                                                                      `json:"repo"`
	RepoID        float64                                                                     `json:"repoId"`
	RepoOwnerID   string                                                                      `json:"repoOwnerId"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type `json:"type"`
}

func (o *GetDeploymentDeployments2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentDeployments2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentDeployments2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentDeployments2) GetOwnerType() GetDeploymentDeploymentsOwnerType {
	if o == nil {
		return GetDeploymentDeploymentsOwnerType("")
	}
	return o.OwnerType
}

func (o *GetDeploymentDeployments2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentDeployments2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentDeployments2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentDeployments2) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentDeployments2) GetRepoOwnerID() string {
	if o == nil {
		return ""
	}
	return o.RepoOwnerID
}

func (o *GetDeploymentDeployments2) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepo2Type("")
	}
	return o.Type
}

type GetDeploymentOwnerType string

const (
	GetDeploymentOwnerTypeTeam GetDeploymentOwnerType = "team"
	GetDeploymentOwnerTypeUser GetDeploymentOwnerType = "user"
)

func (e GetDeploymentOwnerType) ToPointer() *GetDeploymentOwnerType {
	return &e
}
func (e *GetDeploymentOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentOwnerType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoTypeGitlab GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType = "gitlab"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType: %v", v)
	}
}

type GetDeploymentDeployments1 struct {
	DefaultBranch string                                                                     `json:"defaultBranch"`
	Name          string                                                                     `json:"name"`
	Namespace     string                                                                     `json:"namespace"`
	OwnerType     GetDeploymentOwnerType                                                     `json:"ownerType"`
	Path          string                                                                     `json:"path"`
	Private       bool                                                                       `json:"private"`
	ProjectID     float64                                                                    `json:"projectId"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType `json:"type"`
	URL           string                                                                     `json:"url"`
}

func (o *GetDeploymentDeployments1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentDeployments1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentDeployments1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *GetDeploymentDeployments1) GetOwnerType() GetDeploymentOwnerType {
	if o == nil {
		return GetDeploymentOwnerType("")
	}
	return o.OwnerType
}

func (o *GetDeploymentDeployments1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentDeployments1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentDeployments1) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeploymentDeployments1) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitRepoType("")
	}
	return o.Type
}

func (o *GetDeploymentDeployments1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetDeploymentGitRepoType string

const (
	GetDeploymentGitRepoTypeGetDeploymentDeployments1 GetDeploymentGitRepoType = "getDeployment_deployments_1"
	GetDeploymentGitRepoTypeGetDeploymentDeployments2 GetDeploymentGitRepoType = "getDeployment_deployments_2"
	GetDeploymentGitRepoTypeGetDeployment3            GetDeploymentGitRepoType = "getDeployment_3"
)

type GetDeploymentGitRepo struct {
	GetDeploymentDeployments1 *GetDeploymentDeployments1
	GetDeploymentDeployments2 *GetDeploymentDeployments2
	GetDeployment3            *GetDeployment3

	Type GetDeploymentGitRepoType
}

func CreateGetDeploymentGitRepoGetDeploymentDeployments1(getDeploymentDeployments1 GetDeploymentDeployments1) GetDeploymentGitRepo {
	typ := GetDeploymentGitRepoTypeGetDeploymentDeployments1

	return GetDeploymentGitRepo{
		GetDeploymentDeployments1: &getDeploymentDeployments1,
		Type:                      typ,
	}
}

func CreateGetDeploymentGitRepoGetDeploymentDeployments2(getDeploymentDeployments2 GetDeploymentDeployments2) GetDeploymentGitRepo {
	typ := GetDeploymentGitRepoTypeGetDeploymentDeployments2

	return GetDeploymentGitRepo{
		GetDeploymentDeployments2: &getDeploymentDeployments2,
		Type:                      typ,
	}
}

func CreateGetDeploymentGitRepoGetDeployment3(getDeployment3 GetDeployment3) GetDeploymentGitRepo {
	typ := GetDeploymentGitRepoTypeGetDeployment3

	return GetDeploymentGitRepo{
		GetDeployment3: &getDeployment3,
		Type:           typ,
	}
}

func (u *GetDeploymentGitRepo) UnmarshalJSON(data []byte) error {

	var getDeploymentDeployments1 GetDeploymentDeployments1 = GetDeploymentDeployments1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments1, "", true, true); err == nil {
		u.GetDeploymentDeployments1 = &getDeploymentDeployments1
		u.Type = GetDeploymentGitRepoTypeGetDeploymentDeployments1
		return nil
	}

	var getDeploymentDeployments2 GetDeploymentDeployments2 = GetDeploymentDeployments2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments2, "", true, true); err == nil {
		u.GetDeploymentDeployments2 = &getDeploymentDeployments2
		u.Type = GetDeploymentGitRepoTypeGetDeploymentDeployments2
		return nil
	}

	var getDeployment3 GetDeployment3 = GetDeployment3{}
	if err := utils.UnmarshalJSON(data, &getDeployment3, "", true, true); err == nil {
		u.GetDeployment3 = &getDeployment3
		u.Type = GetDeploymentGitRepoTypeGetDeployment3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitRepo", string(data))
}

func (u GetDeploymentGitRepo) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeployments1 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments1, "", true)
	}

	if u.GetDeploymentDeployments2 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments2, "", true)
	}

	if u.GetDeployment3 != nil {
		return utils.MarshalJSON(u.GetDeployment3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitRepo: all fields are null")
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9TypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type: %v", v)
	}
}

type GetDeployment9 struct {
	Owner         *string                                                                       `json:"owner,omitempty"`
	Ref           string                                                                        `json:"ref"`
	RepoUUID      string                                                                        `json:"repoUuid"`
	Sha           string                                                                        `json:"sha"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type `json:"type"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
}

func (o *GetDeployment9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeployment9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeployment9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeployment9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeployment9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeployment9) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource9Type("")
	}
	return o.Type
}

func (o *GetDeployment9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8TypeGitlab GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type = "gitlab"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type: %v", v)
	}
}

type GetDeployment8 struct {
	ProjectID float64                                                                       `json:"projectId"`
	Ref       string                                                                        `json:"ref"`
	Sha       string                                                                        `json:"sha"`
	Type      GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type `json:"type"`
}

func (o *GetDeployment8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeployment8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeployment8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeployment8) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource8Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7TypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type: %v", v)
	}
}

type GetDeployment7 struct {
	Org    *string                                                                       `json:"org,omitempty"`
	Ref    string                                                                        `json:"ref"`
	Repo   *string                                                                       `json:"repo,omitempty"`
	RepoID float64                                                                       `json:"repoId"`
	Sha    string                                                                        `json:"sha"`
	Type   GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type `json:"type"`
}

func (o *GetDeployment7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeployment7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeployment7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetDeployment7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeployment7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeployment7) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource7Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6TypeCustom GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type = "custom"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type: %v", v)
	}
}

type GetDeployment6 struct {
	GitURL string                                                                        `json:"gitUrl"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	Type   GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type `json:"type"`
}

func (o *GetDeployment6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

func (o *GetDeployment6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeployment6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeployment6) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSource6Type("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceTypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType: %v", v)
	}
}

type GetDeployment5 struct {
	Owner string                                                                       `json:"owner"`
	PrID  *float64                                                                     `json:"prId,omitempty"`
	Ref   *string                                                                      `json:"ref,omitempty"`
	Sha   *string                                                                      `json:"sha,omitempty"`
	Slug  string                                                                       `json:"slug"`
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType `json:"type"`
}

func (o *GetDeployment5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeployment5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeployment5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeployment5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeployment5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeployment5) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1GitSourceType("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1TypeBitbucket GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type = "bitbucket"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type GetDeployment4 struct {
	PrID          *float64                                                            `json:"prId,omitempty"`
	Ref           *string                                                             `json:"ref,omitempty"`
	RepoUUID      string                                                              `json:"repoUuid"`
	Sha           *string                                                             `json:"sha,omitempty"`
	Type          GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	WorkspaceUUID *string                                                             `json:"workspaceUuid,omitempty"`
}

func (o *GetDeployment4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeployment4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeployment4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeployment4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeployment4) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *GetDeployment4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

type GetDeploymentProjectIDType string

const (
	GetDeploymentProjectIDTypeStr    GetDeploymentProjectIDType = "str"
	GetDeploymentProjectIDTypeNumber GetDeploymentProjectIDType = "number"
)

type GetDeploymentProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentProjectIDType
}

func CreateGetDeploymentProjectIDStr(str string) GetDeploymentProjectID {
	typ := GetDeploymentProjectIDTypeStr

	return GetDeploymentProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentProjectIDNumber(number float64) GetDeploymentProjectID {
	typ := GetDeploymentProjectIDTypeNumber

	return GetDeploymentProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentProjectID", string(data))
}

func (u GetDeploymentProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentProjectID: all fields are null")
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyTypeGitlab GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType = "gitlab"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetDeploymentDeployments3 struct {
	PrID      *float64                                                           `json:"prId,omitempty"`
	ProjectID GetDeploymentProjectID                                             `json:"projectId"`
	Ref       *string                                                            `json:"ref,omitempty"`
	Sha       *string                                                            `json:"sha,omitempty"`
	Type      GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *GetDeploymentDeployments3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeployments3) GetProjectID() GetDeploymentProjectID {
	if o == nil {
		return GetDeploymentProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentDeployments3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeployments3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeployments3) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type GetDeploymentDeploymentsResponse200ApplicationJSONType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONTypeGithub GetDeploymentDeploymentsResponse200ApplicationJSONType = "github"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse2 struct {
	Org  string                                                 `json:"org"`
	PrID *float64                                               `json:"prId,omitempty"`
	Ref  *string                                                `json:"ref,omitempty"`
	Repo string                                                 `json:"repo"`
	Sha  *string                                                `json:"sha,omitempty"`
	Type GetDeploymentDeploymentsResponse200ApplicationJSONType `json:"type"`
}

func (o *GetDeploymentDeploymentsResponse2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentDeploymentsResponse2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeploymentsResponse2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeploymentsResponse2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentDeploymentsResponse2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeploymentsResponse2) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

type GetDeploymentRepoIDType string

const (
	GetDeploymentRepoIDTypeStr    GetDeploymentRepoIDType = "str"
	GetDeploymentRepoIDTypeNumber GetDeploymentRepoIDType = "number"
)

type GetDeploymentRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentRepoIDType
}

func CreateGetDeploymentRepoIDStr(str string) GetDeploymentRepoID {
	typ := GetDeploymentRepoIDTypeStr

	return GetDeploymentRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentRepoIDNumber(number float64) GetDeploymentRepoID {
	typ := GetDeploymentRepoIDTypeNumber

	return GetDeploymentRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRepoID", string(data))
}

func (u GetDeploymentRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRepoID: all fields are null")
}

type GetDeploymentDeploymentsResponse200Type string

const (
	GetDeploymentDeploymentsResponse200TypeGithub GetDeploymentDeploymentsResponse200Type = "github"
)

func (e GetDeploymentDeploymentsResponse200Type) ToPointer() *GetDeploymentDeploymentsResponse200Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200Type: %v", v)
	}
}

type GetDeploymentDeploymentsResponse1 struct {
	PrID   *float64                                `json:"prId,omitempty"`
	Ref    *string                                 `json:"ref,omitempty"`
	RepoID GetDeploymentRepoID                     `json:"repoId"`
	Sha    *string                                 `json:"sha,omitempty"`
	Type   GetDeploymentDeploymentsResponse200Type `json:"type"`
}

func (o *GetDeploymentDeploymentsResponse1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

func (o *GetDeploymentDeploymentsResponse1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentDeploymentsResponse1) GetRepoID() GetDeploymentRepoID {
	if o == nil {
		return GetDeploymentRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentDeploymentsResponse1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentDeploymentsResponse1) GetType() GetDeploymentDeploymentsResponse200Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200Type("")
	}
	return o.Type
}

type GetDeploymentGitSourceType string

const (
	GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse1 GetDeploymentGitSourceType = "getDeployment_deployments_response_1"
	GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse2 GetDeploymentGitSourceType = "getDeployment_deployments_response_2"
	GetDeploymentGitSourceTypeGetDeploymentDeployments3         GetDeploymentGitSourceType = "getDeployment_deployments_3"
	GetDeploymentGitSourceTypeGetDeployment4                    GetDeploymentGitSourceType = "getDeployment_4"
	GetDeploymentGitSourceTypeGetDeployment5                    GetDeploymentGitSourceType = "getDeployment_5"
	GetDeploymentGitSourceTypeGetDeployment6                    GetDeploymentGitSourceType = "getDeployment_6"
	GetDeploymentGitSourceTypeGetDeployment7                    GetDeploymentGitSourceType = "getDeployment_7"
	GetDeploymentGitSourceTypeGetDeployment8                    GetDeploymentGitSourceType = "getDeployment_8"
	GetDeploymentGitSourceTypeGetDeployment9                    GetDeploymentGitSourceType = "getDeployment_9"
)

type GetDeploymentGitSource struct {
	GetDeploymentDeploymentsResponse1 *GetDeploymentDeploymentsResponse1
	GetDeploymentDeploymentsResponse2 *GetDeploymentDeploymentsResponse2
	GetDeploymentDeployments3         *GetDeploymentDeployments3
	GetDeployment4                    *GetDeployment4
	GetDeployment5                    *GetDeployment5
	GetDeployment6                    *GetDeployment6
	GetDeployment7                    *GetDeployment7
	GetDeployment8                    *GetDeployment8
	GetDeployment9                    *GetDeployment9

	Type GetDeploymentGitSourceType
}

func CreateGetDeploymentGitSourceGetDeploymentDeploymentsResponse1(getDeploymentDeploymentsResponse1 GetDeploymentDeploymentsResponse1) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse1

	return GetDeploymentGitSource{
		GetDeploymentDeploymentsResponse1: &getDeploymentDeploymentsResponse1,
		Type:                              typ,
	}
}

func CreateGetDeploymentGitSourceGetDeploymentDeploymentsResponse2(getDeploymentDeploymentsResponse2 GetDeploymentDeploymentsResponse2) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse2

	return GetDeploymentGitSource{
		GetDeploymentDeploymentsResponse2: &getDeploymentDeploymentsResponse2,
		Type:                              typ,
	}
}

func CreateGetDeploymentGitSourceGetDeploymentDeployments3(getDeploymentDeployments3 GetDeploymentDeployments3) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeploymentDeployments3

	return GetDeploymentGitSource{
		GetDeploymentDeployments3: &getDeploymentDeployments3,
		Type:                      typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment4(getDeployment4 GetDeployment4) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment4

	return GetDeploymentGitSource{
		GetDeployment4: &getDeployment4,
		Type:           typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment5(getDeployment5 GetDeployment5) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment5

	return GetDeploymentGitSource{
		GetDeployment5: &getDeployment5,
		Type:           typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment6(getDeployment6 GetDeployment6) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment6

	return GetDeploymentGitSource{
		GetDeployment6: &getDeployment6,
		Type:           typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment7(getDeployment7 GetDeployment7) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment7

	return GetDeploymentGitSource{
		GetDeployment7: &getDeployment7,
		Type:           typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment8(getDeployment8 GetDeployment8) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment8

	return GetDeploymentGitSource{
		GetDeployment8: &getDeployment8,
		Type:           typ,
	}
}

func CreateGetDeploymentGitSourceGetDeployment9(getDeployment9 GetDeployment9) GetDeploymentGitSource {
	typ := GetDeploymentGitSourceTypeGetDeployment9

	return GetDeploymentGitSource{
		GetDeployment9: &getDeployment9,
		Type:           typ,
	}
}

func (u *GetDeploymentGitSource) UnmarshalJSON(data []byte) error {

	var getDeployment6 GetDeployment6 = GetDeployment6{}
	if err := utils.UnmarshalJSON(data, &getDeployment6, "", true, true); err == nil {
		u.GetDeployment6 = &getDeployment6
		u.Type = GetDeploymentGitSourceTypeGetDeployment6
		return nil
	}

	var getDeployment8 GetDeployment8 = GetDeployment8{}
	if err := utils.UnmarshalJSON(data, &getDeployment8, "", true, true); err == nil {
		u.GetDeployment8 = &getDeployment8
		u.Type = GetDeploymentGitSourceTypeGetDeployment8
		return nil
	}

	var getDeploymentDeploymentsResponse1 GetDeploymentDeploymentsResponse1 = GetDeploymentDeploymentsResponse1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse1, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse1 = &getDeploymentDeploymentsResponse1
		u.Type = GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse1
		return nil
	}

	var getDeploymentDeployments3 GetDeploymentDeployments3 = GetDeploymentDeployments3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeployments3, "", true, true); err == nil {
		u.GetDeploymentDeployments3 = &getDeploymentDeployments3
		u.Type = GetDeploymentGitSourceTypeGetDeploymentDeployments3
		return nil
	}

	var getDeploymentDeploymentsResponse2 GetDeploymentDeploymentsResponse2 = GetDeploymentDeploymentsResponse2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse2, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse2 = &getDeploymentDeploymentsResponse2
		u.Type = GetDeploymentGitSourceTypeGetDeploymentDeploymentsResponse2
		return nil
	}

	var getDeployment4 GetDeployment4 = GetDeployment4{}
	if err := utils.UnmarshalJSON(data, &getDeployment4, "", true, true); err == nil {
		u.GetDeployment4 = &getDeployment4
		u.Type = GetDeploymentGitSourceTypeGetDeployment4
		return nil
	}

	var getDeployment5 GetDeployment5 = GetDeployment5{}
	if err := utils.UnmarshalJSON(data, &getDeployment5, "", true, true); err == nil {
		u.GetDeployment5 = &getDeployment5
		u.Type = GetDeploymentGitSourceTypeGetDeployment5
		return nil
	}

	var getDeployment7 GetDeployment7 = GetDeployment7{}
	if err := utils.UnmarshalJSON(data, &getDeployment7, "", true, true); err == nil {
		u.GetDeployment7 = &getDeployment7
		u.Type = GetDeploymentGitSourceTypeGetDeployment7
		return nil
	}

	var getDeployment9 GetDeployment9 = GetDeployment9{}
	if err := utils.UnmarshalJSON(data, &getDeployment9, "", true, true); err == nil {
		u.GetDeployment9 = &getDeployment9
		u.Type = GetDeploymentGitSourceTypeGetDeployment9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSource", string(data))
}

func (u GetDeploymentGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeploymentsResponse1 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse1, "", true)
	}

	if u.GetDeploymentDeploymentsResponse2 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse2, "", true)
	}

	if u.GetDeploymentDeployments3 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeployments3, "", true)
	}

	if u.GetDeployment4 != nil {
		return utils.MarshalJSON(u.GetDeployment4, "", true)
	}

	if u.GetDeployment5 != nil {
		return utils.MarshalJSON(u.GetDeployment5, "", true)
	}

	if u.GetDeployment6 != nil {
		return utils.MarshalJSON(u.GetDeployment6, "", true)
	}

	if u.GetDeployment7 != nil {
		return utils.MarshalJSON(u.GetDeployment7, "", true)
	}

	if u.GetDeployment8 != nil {
		return utils.MarshalJSON(u.GetDeployment8, "", true)
	}

	if u.GetDeployment9 != nil {
		return utils.MarshalJSON(u.GetDeployment9, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSource: all fields are null")
}

type GetDeploymentOutput struct {
	FunctionName string `json:"functionName"`
	Path         string `json:"path"`
}

func (o *GetDeploymentOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

func (o *GetDeploymentOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type GetDeploymentDeploymentsResponse200ReadyState string

const (
	GetDeploymentDeploymentsResponse200ReadyStateBuilding     GetDeploymentDeploymentsResponse200ReadyState = "BUILDING"
	GetDeploymentDeploymentsResponse200ReadyStateError        GetDeploymentDeploymentsResponse200ReadyState = "ERROR"
	GetDeploymentDeploymentsResponse200ReadyStateInitializing GetDeploymentDeploymentsResponse200ReadyState = "INITIALIZING"
	GetDeploymentDeploymentsResponse200ReadyStateReady        GetDeploymentDeploymentsResponse200ReadyState = "READY"
)

func (e GetDeploymentDeploymentsResponse200ReadyState) ToPointer() *GetDeploymentDeploymentsResponse200ReadyState {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentDeploymentsResponse200ReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ReadyState: %v", v)
	}
}

type GetDeploymentLambdas struct {
	CreatedAt    *float64                                       `json:"createdAt,omitempty"`
	Entrypoint   *string                                        `json:"entrypoint,omitempty"`
	ID           string                                         `json:"id"`
	Output       []GetDeploymentOutput                          `json:"output"`
	ReadyState   *GetDeploymentDeploymentsResponse200ReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                       `json:"readyStateAt,omitempty"`
}

func (o *GetDeploymentLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentLambdas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentLambdas) GetOutput() []GetDeploymentOutput {
	if o == nil {
		return []GetDeploymentOutput{}
	}
	return o.Output
}

func (o *GetDeploymentLambdas) GetReadyState() *GetDeploymentDeploymentsResponse200ReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// GetDeploymentPlan - The pricing plan the deployment was made under
type GetDeploymentPlan string

const (
	GetDeploymentPlanPro        GetDeploymentPlan = "pro"
	GetDeploymentPlanEnterprise GetDeploymentPlan = "enterprise"
	GetDeploymentPlanHobby      GetDeploymentPlan = "hobby"
)

func (e GetDeploymentPlan) ToPointer() *GetDeploymentPlan {
	return &e
}
func (e *GetDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = GetDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentPlan: %v", v)
	}
}

// GetDeploymentProject - The public project information associated with the deployment.
type GetDeploymentProject struct {
	Framework *string `json:"framework,omitempty"`
	ID        string  `json:"id"`
	Name      string  `json:"name"`
}

func (o *GetDeploymentProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetDeploymentProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// GetDeploymentReadyState - The state of the deployment depending on the process of deploying, or if it is ready or in an error state
type GetDeploymentReadyState string

const (
	GetDeploymentReadyStateQueued       GetDeploymentReadyState = "QUEUED"
	GetDeploymentReadyStateBuilding     GetDeploymentReadyState = "BUILDING"
	GetDeploymentReadyStateError        GetDeploymentReadyState = "ERROR"
	GetDeploymentReadyStateInitializing GetDeploymentReadyState = "INITIALIZING"
	GetDeploymentReadyStateReady        GetDeploymentReadyState = "READY"
	GetDeploymentReadyStateCanceled     GetDeploymentReadyState = "CANCELED"
)

func (e GetDeploymentReadyState) ToPointer() *GetDeploymentReadyState {
	return &e
}
func (e *GetDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadyState: %v", v)
	}
}

// GetDeploymentReadySubstate - The substate of the deployment when the state is "READY"
type GetDeploymentReadySubstate string

const (
	GetDeploymentReadySubstateStaged   GetDeploymentReadySubstate = "STAGED"
	GetDeploymentReadySubstatePromoted GetDeploymentReadySubstate = "PROMOTED"
)

func (e GetDeploymentReadySubstate) ToPointer() *GetDeploymentReadySubstate {
	return &e
}
func (e *GetDeploymentReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadySubstate: %v", v)
	}
}

// GetDeploymentDeploymentsResponse3 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentDeploymentsResponse3 struct {
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
	Src        string  `json:"src"`
}

func (o *GetDeploymentDeploymentsResponse3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *GetDeploymentDeploymentsResponse3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

func (o *GetDeploymentDeploymentsResponse3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

type GetDeploymentHandle string

const (
	GetDeploymentHandleError      GetDeploymentHandle = "error"
	GetDeploymentHandleFilesystem GetDeploymentHandle = "filesystem"
	GetDeploymentHandleHit        GetDeploymentHandle = "hit"
	GetDeploymentHandleMiss       GetDeploymentHandle = "miss"
	GetDeploymentHandleRewrite    GetDeploymentHandle = "rewrite"
	GetDeploymentHandleResource   GetDeploymentHandle = "resource"
)

func (e GetDeploymentHandle) ToPointer() *GetDeploymentHandle {
	return &e
}
func (e *GetDeploymentHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = GetDeploymentHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHandle: %v", v)
	}
}

// GetDeploymentDeploymentsResponse2002 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentDeploymentsResponse2002 struct {
	Dest   *string             `json:"dest,omitempty"`
	Handle GetDeploymentHandle `json:"handle"`
	Src    *string             `json:"src,omitempty"`
	Status *float64            `json:"status,omitempty"`
}

func (o *GetDeploymentDeploymentsResponse2002) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentDeploymentsResponse2002) GetHandle() GetDeploymentHandle {
	if o == nil {
		return GetDeploymentHandle("")
	}
	return o.Handle
}

func (o *GetDeploymentDeploymentsResponse2002) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetDeploymentDeploymentsResponse2002) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1TypeHeader GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type = "header"
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1TypeCookie GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type = "cookie"
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1TypeQuery  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type = "query"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 struct {
	Key   string                                                                     `json:"key"`
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type `json:"type"`
	Value *string                                                                    `json:"value,omitempty"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Type("")
	}
	return o.Type
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesTypeHost GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType = "host"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 struct {
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType `json:"type"`
	Value string                                                                    `json:"value"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1RoutesType("")
	}
	return o.Type
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentHasType string

const (
	GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 GetDeploymentHasType = "getDeployment_deployments_response_200_ApplicationJSON_responseBody_1_1"
	GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 GetDeploymentHasType = "getDeployment_deployments_response_200_ApplicationJSON_responseBody_1_2"
)

type GetDeploymentHas struct {
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12

	Type GetDeploymentHasType
}

func CreateGetDeploymentHasGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11(getDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11) GetDeploymentHas {
	typ := GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11

	return GetDeploymentHas{
		GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11: &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody11,
		Type: typ,
	}
}

func CreateGetDeploymentHasGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12(getDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12) GetDeploymentHas {
	typ := GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12

	return GetDeploymentHas{
		GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12: &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody12,
		Type: typ,
	}
}

func (u *GetDeploymentHas) UnmarshalJSON(data []byte) error {

	var getDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody11, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 = &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody11
		u.Type = GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11
		return nil
	}

	var getDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody12, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 = &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody12
		u.Type = GetDeploymentHasTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentHas", string(data))
}

func (u GetDeploymentHas) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody11, "", true)
	}

	if u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody12, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentHas: all fields are null")
}

type GetDeploymentLocale struct {
	Cookie   *string           `json:"cookie,omitempty"`
	Redirect map[string]string `json:"redirect,omitempty"`
}

func (o *GetDeploymentLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *GetDeploymentLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2TypeHeader GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type = "header"
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2TypeCookie GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type = "cookie"
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2TypeQuery  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type = "query"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 struct {
	Key   string                                                                             `json:"key"`
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type `json:"type"`
	Value *string                                                                            `json:"value,omitempty"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1Missing2Type("")
	}
	return o.Type
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType string

const (
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingTypeHost GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType = "host"
)

func (e GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType) ToPointer() *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType {
	return &e
}
func (e *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType: %v", v)
	}
}

type GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 struct {
	Type  GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType `json:"type"`
	Value string                                                                            `json:"value"`
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) GetType() GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType {
	if o == nil {
		return GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1Routes1MissingType("")
	}
	return o.Type
}

func (o *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentMissingType string

const (
	GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 GetDeploymentMissingType = "getDeployment_deployments_response_200_ApplicationJSON_responseBody_1"
	GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 GetDeploymentMissingType = "getDeployment_deployments_response_200_ApplicationJSON_responseBody_2"
)

type GetDeploymentMissing struct {
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
	GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 *GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2

	Type GetDeploymentMissingType
}

func CreateGetDeploymentMissingGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1(getDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1) GetDeploymentMissing {
	typ := GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1

	return GetDeploymentMissing{
		GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1: &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateGetDeploymentMissingGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2(getDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2) GetDeploymentMissing {
	typ := GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2

	return GetDeploymentMissing{
		GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2: &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func (u *GetDeploymentMissing) UnmarshalJSON(data []byte) error {

	var getDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 = &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
		u.Type = GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1
		return nil
	}

	var getDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 = GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 = &getDeploymentDeploymentsResponse200ApplicationJSONResponseBody2
		u.Type = GetDeploymentMissingTypeGetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentMissing", string(data))
}

func (u GetDeploymentMissing) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse200ApplicationJSONResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentMissing: all fields are null")
}

// GetDeploymentDeploymentsResponse2001 - A list of routes objects used to rewrite paths to point towards other internal or external paths
type GetDeploymentDeploymentsResponse2001 struct {
	CaseSensitive *bool                `json:"caseSensitive,omitempty"`
	Check         *bool                `json:"check,omitempty"`
	Continue      *bool                `json:"continue,omitempty"`
	Dest          *string              `json:"dest,omitempty"`
	Has           []GetDeploymentHas   `json:"has,omitempty"`
	Headers       map[string]string    `json:"headers,omitempty"`
	Important     *bool                `json:"important,omitempty"`
	Locale        *GetDeploymentLocale `json:"locale,omitempty"`
	Methods       []string             `json:"methods,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string               `json:"middlewareRawSrc,omitempty"`
	Missing          []GetDeploymentMissing `json:"missing,omitempty"`
	Override         *bool                  `json:"override,omitempty"`
	Src              string                 `json:"src"`
	Status           *float64               `json:"status,omitempty"`
}

func (o *GetDeploymentDeploymentsResponse2001) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *GetDeploymentDeploymentsResponse2001) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *GetDeploymentDeploymentsResponse2001) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *GetDeploymentDeploymentsResponse2001) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentDeploymentsResponse2001) GetHas() []GetDeploymentHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetDeploymentDeploymentsResponse2001) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetDeploymentDeploymentsResponse2001) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *GetDeploymentDeploymentsResponse2001) GetLocale() *GetDeploymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetDeploymentDeploymentsResponse2001) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *GetDeploymentDeploymentsResponse2001) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

func (o *GetDeploymentDeploymentsResponse2001) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *GetDeploymentDeploymentsResponse2001) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *GetDeploymentDeploymentsResponse2001) GetMissing() []GetDeploymentMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetDeploymentDeploymentsResponse2001) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *GetDeploymentDeploymentsResponse2001) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentDeploymentsResponse2001) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetDeploymentRoutesType string

const (
	GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2001 GetDeploymentRoutesType = "getDeployment_deployments_response_200_1"
	GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2002 GetDeploymentRoutesType = "getDeployment_deployments_response_200_2"
	GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse3    GetDeploymentRoutesType = "getDeployment_deployments_response_3"
)

type GetDeploymentRoutes struct {
	GetDeploymentDeploymentsResponse2001 *GetDeploymentDeploymentsResponse2001
	GetDeploymentDeploymentsResponse2002 *GetDeploymentDeploymentsResponse2002
	GetDeploymentDeploymentsResponse3    *GetDeploymentDeploymentsResponse3

	Type GetDeploymentRoutesType
}

func CreateGetDeploymentRoutesGetDeploymentDeploymentsResponse2001(getDeploymentDeploymentsResponse2001 GetDeploymentDeploymentsResponse2001) GetDeploymentRoutes {
	typ := GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2001

	return GetDeploymentRoutes{
		GetDeploymentDeploymentsResponse2001: &getDeploymentDeploymentsResponse2001,
		Type:                                 typ,
	}
}

func CreateGetDeploymentRoutesGetDeploymentDeploymentsResponse2002(getDeploymentDeploymentsResponse2002 GetDeploymentDeploymentsResponse2002) GetDeploymentRoutes {
	typ := GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2002

	return GetDeploymentRoutes{
		GetDeploymentDeploymentsResponse2002: &getDeploymentDeploymentsResponse2002,
		Type:                                 typ,
	}
}

func CreateGetDeploymentRoutesGetDeploymentDeploymentsResponse3(getDeploymentDeploymentsResponse3 GetDeploymentDeploymentsResponse3) GetDeploymentRoutes {
	typ := GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse3

	return GetDeploymentRoutes{
		GetDeploymentDeploymentsResponse3: &getDeploymentDeploymentsResponse3,
		Type:                              typ,
	}
}

func (u *GetDeploymentRoutes) UnmarshalJSON(data []byte) error {

	var getDeploymentDeploymentsResponse3 GetDeploymentDeploymentsResponse3 = GetDeploymentDeploymentsResponse3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse3, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse3 = &getDeploymentDeploymentsResponse3
		u.Type = GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse3
		return nil
	}

	var getDeploymentDeploymentsResponse2002 GetDeploymentDeploymentsResponse2002 = GetDeploymentDeploymentsResponse2002{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse2002, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse2002 = &getDeploymentDeploymentsResponse2002
		u.Type = GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2002
		return nil
	}

	var getDeploymentDeploymentsResponse2001 GetDeploymentDeploymentsResponse2001 = GetDeploymentDeploymentsResponse2001{}
	if err := utils.UnmarshalJSON(data, &getDeploymentDeploymentsResponse2001, "", true, true); err == nil {
		u.GetDeploymentDeploymentsResponse2001 = &getDeploymentDeploymentsResponse2001
		u.Type = GetDeploymentRoutesTypeGetDeploymentDeploymentsResponse2001
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRoutes", string(data))
}

func (u GetDeploymentRoutes) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentDeploymentsResponse2001 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse2001, "", true)
	}

	if u.GetDeploymentDeploymentsResponse2002 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse2002, "", true)
	}

	if u.GetDeploymentDeploymentsResponse3 != nil {
		return utils.MarshalJSON(u.GetDeploymentDeploymentsResponse3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRoutes: all fields are null")
}

// GetDeploymentSource - Where was the deployment created from
type GetDeploymentSource string

const (
	GetDeploymentSourceAPITriggerGitDeploy GetDeploymentSource = "api-trigger-git-deploy"
	GetDeploymentSourceCli                 GetDeploymentSource = "cli"
	GetDeploymentSourceCloneRepo           GetDeploymentSource = "clone/repo"
	GetDeploymentSourceGit                 GetDeploymentSource = "git"
	GetDeploymentSourceImport              GetDeploymentSource = "import"
	GetDeploymentSourceImportRepo          GetDeploymentSource = "import/repo"
)

func (e GetDeploymentSource) ToPointer() *GetDeploymentSource {
	return &e
}
func (e *GetDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		*e = GetDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentSource: %v", v)
	}
}

// GetDeploymentTarget - If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
type GetDeploymentTarget string

const (
	GetDeploymentTargetStaging    GetDeploymentTarget = "staging"
	GetDeploymentTargetProduction GetDeploymentTarget = "production"
)

func (e GetDeploymentTarget) ToPointer() *GetDeploymentTarget {
	return &e
}
func (e *GetDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTarget: %v", v)
	}
}

// GetDeploymentTeam - The team that owns the deployment if any
type GetDeploymentTeam struct {
	// The avatar of the team owner
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the team owner
	ID string `json:"id"`
	// The name of the team owner
	Name string `json:"name"`
	// The slug of the team owner
	Slug string `json:"slug"`
}

func (o *GetDeploymentTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetDeploymentTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type GetDeploymentType string

const (
	GetDeploymentTypeLambdas GetDeploymentType = "LAMBDAS"
)

func (e GetDeploymentType) ToPointer() *GetDeploymentType {
	return &e
}
func (e *GetDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentType: %v", v)
	}
}

// GetDeployment1 - The deployment including both public and private information
type GetDeployment1 struct {
	// A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
	Alias []string `json:"alias"`
	// A boolean that will be true when the aliases from the alias property were assigned successfully
	AliasAssigned   bool                          `json:"aliasAssigned"`
	AliasAssignedAt *GetDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	// An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
	AliasError              *GetDeploymentAliasError       `json:"aliasError,omitempty"`
	AliasFinal              *string                        `json:"aliasFinal,omitempty"`
	AliasWarning            *GetDeploymentAliasWarning     `json:"aliasWarning,omitempty"`
	AutoAssignCustomDomains *bool                          `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                       `json:"automaticAliases,omitempty"`
	BootedAt                float64                        `json:"bootedAt"`
	Build                   GetDeploymentBuild             `json:"build"`
	BuildErrorAt            *float64                       `json:"buildErrorAt,omitempty"`
	BuildingAt              float64                        `json:"buildingAt"`
	Builds                  []GetDeploymentBuilds          `json:"builds,omitempty"`
	CanceledAt              *float64                       `json:"canceledAt,omitempty"`
	ChecksConclusion        *GetDeploymentChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState             *GetDeploymentChecksState      `json:"checksState,omitempty"`
	// The flag saying if Vercel Connect configuration is used for builds
	ConnectBuildsEnabled *bool `json:"connectBuildsEnabled,omitempty"`
	// The ID of Vercel Connect configuration used for this deployment
	ConnectConfigurationID *string `json:"connectConfigurationId,omitempty"`
	// A number containing the date when the deployment was created in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// The region where the deployment was first created
	CreatedIn string `json:"createdIn"`
	// Information about the deployment creator
	Creator GetDeploymentCreator `json:"creator"`
	// The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
	Crons []GetDeploymentCrons `json:"crons,omitempty"`
	// The keys of the environment variables that were assigned during runtime
	Env          []string `json:"env"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// An object used to configure your Serverless Functions
	Functions map[string]GetDeploymentFunctions `json:"functions,omitempty"`
	GitRepo   *GetDeploymentGitRepo             `json:"gitRepo,omitempty"`
	GitSource *GetDeploymentGitSource           `json:"gitSource,omitempty"`
	// A string holding the unique ID of the deployment
	ID string `json:"id"`
	// Vercel URL to inspect the deployment.
	InspectorURL *string `json:"inspectorUrl"`
	// Is the deployment currently queued waiting for a Concurrent Build Slot to be available
	IsInConcurrentBuildsQueue bool                   `json:"isInConcurrentBuildsQueue"`
	Lambdas                   []GetDeploymentLambdas `json:"lambdas,omitempty"`
	// An object containing the deployment's metadata
	Meta map[string]string `json:"meta"`
	// An monorepo manager that was used for the deployment
	MonorepoManager *string `json:"monorepoManager,omitempty"`
	// The name of the project associated with the deployment at the time that the deployment was created
	Name string `json:"name"`
	// The unique ID of the user or team the deployment belongs to
	OwnerID string `json:"ownerId"`
	// The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
	PassiveConnectConfigurationID *string  `json:"passiveConnectConfigurationId,omitempty"`
	PassiveRegions                []string `json:"passiveRegions,omitempty"`
	// The pricing plan the deployment was made under
	Plan GetDeploymentPlan `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool `json:"previewCommentsEnabled,omitempty"`
	// The public project information associated with the deployment.
	Project *GetDeploymentProject `json:"project,omitempty"`
	// The ID of the project the deployment is associated with
	ProjectID string `json:"projectId"`
	// A boolean representing if the deployment is public or not. By default this is `false`
	Public bool `json:"public"`
	// The state of the deployment depending on the process of deploying, or if it is ready or in an error state
	ReadyState GetDeploymentReadyState `json:"readyState"`
	// The substate of the deployment when the state is "READY"
	ReadySubstate *GetDeploymentReadySubstate `json:"readySubstate,omitempty"`
	// The regions the deployment exists in
	Regions []string `json:"regions"`
	// A list of routes objects used to rewrite paths to point towards other internal or external paths
	Routes []GetDeploymentRoutes `json:"routes"`
	// Where was the deployment created from
	Source *GetDeploymentSource `json:"source,omitempty"`
	// If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
	Target *GetDeploymentTarget `json:"target,omitempty"`
	// The team that owns the deployment if any
	Team *GetDeploymentTeam `json:"team,omitempty"`
	Type GetDeploymentType  `json:"type"`
	// A string with the unique URL of the deployment
	URL string `json:"url"`
	// An array of domains that were provided by the user when creating the Deployment.
	UserAliases []string `json:"userAliases,omitempty"`
	// The platform version that was used to create the deployment.
	Version float64 `json:"version"`
}

func (o *GetDeployment1) GetAlias() []string {
	if o == nil {
		return []string{}
	}
	return o.Alias
}

func (o *GetDeployment1) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeployment1) GetAliasAssignedAt() *GetDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *GetDeployment1) GetAliasError() *GetDeploymentAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeployment1) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeployment1) GetAliasWarning() *GetDeploymentAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeployment1) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeployment1) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeployment1) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeployment1) GetBuild() GetDeploymentBuild {
	if o == nil {
		return GetDeploymentBuild{}
	}
	return o.Build
}

func (o *GetDeployment1) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeployment1) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeployment1) GetBuilds() []GetDeploymentBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeployment1) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeployment1) GetChecksConclusion() *GetDeploymentChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeployment1) GetChecksState() *GetDeploymentChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeployment1) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetDeployment1) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetDeployment1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeployment1) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetDeployment1) GetCreator() GetDeploymentCreator {
	if o == nil {
		return GetDeploymentCreator{}
	}
	return o.Creator
}

func (o *GetDeployment1) GetCrons() []GetDeploymentCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetDeployment1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *GetDeployment1) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeployment1) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeployment1) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeployment1) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeployment1) GetFunctions() map[string]GetDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *GetDeployment1) GetGitRepo() *GetDeploymentGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *GetDeployment1) GetGitSource() *GetDeploymentGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeployment1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeployment1) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *GetDeployment1) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *GetDeployment1) GetLambdas() []GetDeploymentLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeployment1) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeployment1) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetDeployment1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeployment1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeployment1) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *GetDeployment1) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeployment1) GetPlan() GetDeploymentPlan {
	if o == nil {
		return GetDeploymentPlan("")
	}
	return o.Plan
}

func (o *GetDeployment1) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeployment1) GetProject() *GetDeploymentProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeployment1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeployment1) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeployment1) GetReadyState() GetDeploymentReadyState {
	if o == nil {
		return GetDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeployment1) GetReadySubstate() *GetDeploymentReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeployment1) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeployment1) GetRoutes() []GetDeploymentRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *GetDeployment1) GetSource() *GetDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeployment1) GetTarget() *GetDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeployment1) GetTeam() *GetDeploymentTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeployment1) GetType() GetDeploymentType {
	if o == nil {
		return GetDeploymentType("")
	}
	return o.Type
}

func (o *GetDeployment1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeployment1) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeployment1) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

type GetDeploymentResponseBodyType string

const (
	GetDeploymentResponseBodyTypeGetDeployment1 GetDeploymentResponseBodyType = "getDeployment_1"
	GetDeploymentResponseBodyTypeGetDeployment2 GetDeploymentResponseBodyType = "getDeployment_2"
)

// GetDeploymentResponseBody - The deployment including only public information
// The deployment including both public and private information
type GetDeploymentResponseBody struct {
	GetDeployment1 *GetDeployment1
	GetDeployment2 *GetDeployment2

	Type GetDeploymentResponseBodyType
}

func CreateGetDeploymentResponseBodyGetDeployment1(getDeployment1 GetDeployment1) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyTypeGetDeployment1

	return GetDeploymentResponseBody{
		GetDeployment1: &getDeployment1,
		Type:           typ,
	}
}

func CreateGetDeploymentResponseBodyGetDeployment2(getDeployment2 GetDeployment2) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyTypeGetDeployment2

	return GetDeploymentResponseBody{
		GetDeployment2: &getDeployment2,
		Type:           typ,
	}
}

func (u *GetDeploymentResponseBody) UnmarshalJSON(data []byte) error {

	var getDeployment2 GetDeployment2 = GetDeployment2{}
	if err := utils.UnmarshalJSON(data, &getDeployment2, "", true, true); err == nil {
		u.GetDeployment2 = &getDeployment2
		u.Type = GetDeploymentResponseBodyTypeGetDeployment2
		return nil
	}

	var getDeployment1 GetDeployment1 = GetDeployment1{}
	if err := utils.UnmarshalJSON(data, &getDeployment1, "", true, true); err == nil {
		u.GetDeployment1 = &getDeployment1
		u.Type = GetDeploymentResponseBodyTypeGetDeployment1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBody", string(data))
}

func (u GetDeploymentResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeployment1 != nil {
		return utils.MarshalJSON(u.GetDeployment1, "", true)
	}

	if u.GetDeployment2 != nil {
		return utils.MarshalJSON(u.GetDeployment2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBody: all fields are null")
}

type GetDeploymentResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The deployment including only public information
	// The deployment including both public and private information
	OneOf *GetDeploymentResponseBody
}

func (o *GetDeploymentResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDeploymentResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDeploymentResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDeploymentResponse) GetOneOf() *GetDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
