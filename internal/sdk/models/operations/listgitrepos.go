// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/vercel/terraform-provider-terraform/internal/sdk/internal/utils"
	"net/http"
)

type QueryParamProvider string

const (
	QueryParamProviderGithub           QueryParamProvider = "github"
	QueryParamProviderGithubCustomHost QueryParamProvider = "github-custom-host"
	QueryParamProviderGitlab           QueryParamProvider = "gitlab"
	QueryParamProviderBitbucket        QueryParamProvider = "bitbucket"
)

func (e QueryParamProvider) ToPointer() *QueryParamProvider {
	return &e
}
func (e *QueryParamProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "github-custom-host":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = QueryParamProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamProvider: %v", v)
	}
}

type ListGitReposRequest struct {
	Query          *string             `queryParam:"style=form,explode=true,name=query"`
	NamespaceID    any                 `queryParam:"style=form,explode=true,name=namespaceId"`
	Provider       *QueryParamProvider `queryParam:"style=form,explode=true,name=provider"`
	InstallationID *string             `queryParam:"style=form,explode=true,name=installationId"`
	// The custom Git host if using a custom Git provider, like GitHub Enterprise Server
	Host *string `queryParam:"style=form,explode=true,name=host"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListGitReposRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *ListGitReposRequest) GetNamespaceID() any {
	if o == nil {
		return nil
	}
	return o.NamespaceID
}

func (o *ListGitReposRequest) GetProvider() *QueryParamProvider {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *ListGitReposRequest) GetInstallationID() *string {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *ListGitReposRequest) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *ListGitReposRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListGitReposRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ListGitReposProvider string

const (
	ListGitReposProviderGithub           ListGitReposProvider = "github"
	ListGitReposProviderGithubCustomHost ListGitReposProvider = "github-custom-host"
	ListGitReposProviderGitlab           ListGitReposProvider = "gitlab"
	ListGitReposProviderBitbucket        ListGitReposProvider = "bitbucket"
)

func (e ListGitReposProvider) ToPointer() *ListGitReposProvider {
	return &e
}
func (e *ListGitReposProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "github-custom-host":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = ListGitReposProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListGitReposProvider: %v", v)
	}
}

type NamespaceIDType string

const (
	NamespaceIDTypeStr    NamespaceIDType = "str"
	NamespaceIDTypeNumber NamespaceIDType = "number"
)

type NamespaceID struct {
	Str    *string
	Number *float64

	Type NamespaceIDType
}

func CreateNamespaceIDStr(str string) NamespaceID {
	typ := NamespaceIDTypeStr

	return NamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateNamespaceIDNumber(number float64) NamespaceID {
	typ := NamespaceIDTypeNumber

	return NamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *NamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = NamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NamespaceID", string(data))
}

func (u NamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type NamespaceID: all fields are null")
}

type GitAccount struct {
	Provider    ListGitReposProvider `json:"provider"`
	NamespaceID *NamespaceID         `json:"namespaceId"`
}

func (o *GitAccount) GetProvider() ListGitReposProvider {
	if o == nil {
		return ListGitReposProvider("")
	}
	return o.Provider
}

func (o *GitAccount) GetNamespaceID() *NamespaceID {
	if o == nil {
		return nil
	}
	return o.NamespaceID
}

type ListGitReposIDType string

const (
	ListGitReposIDTypeStr    ListGitReposIDType = "str"
	ListGitReposIDTypeNumber ListGitReposIDType = "number"
)

type ListGitReposID struct {
	Str    *string
	Number *float64

	Type ListGitReposIDType
}

func CreateListGitReposIDStr(str string) ListGitReposID {
	typ := ListGitReposIDTypeStr

	return ListGitReposID{
		Str:  &str,
		Type: typ,
	}
}

func CreateListGitReposIDNumber(number float64) ListGitReposID {
	typ := ListGitReposIDTypeNumber

	return ListGitReposID{
		Number: &number,
		Type:   typ,
	}
}

func (u *ListGitReposID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListGitReposIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ListGitReposIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListGitReposID", string(data))
}

func (u ListGitReposID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type ListGitReposID: all fields are null")
}

type ListGitReposIntegrationsProvider string

const (
	ListGitReposIntegrationsProviderGithub           ListGitReposIntegrationsProvider = "github"
	ListGitReposIntegrationsProviderGithubCustomHost ListGitReposIntegrationsProvider = "github-custom-host"
	ListGitReposIntegrationsProviderGitlab           ListGitReposIntegrationsProvider = "gitlab"
	ListGitReposIntegrationsProviderBitbucket        ListGitReposIntegrationsProvider = "bitbucket"
)

func (e ListGitReposIntegrationsProvider) ToPointer() *ListGitReposIntegrationsProvider {
	return &e
}
func (e *ListGitReposIntegrationsProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "github-custom-host":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = ListGitReposIntegrationsProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListGitReposIntegrationsProvider: %v", v)
	}
}

type ListGitReposIntegrationsIDType string

const (
	ListGitReposIntegrationsIDTypeStr    ListGitReposIntegrationsIDType = "str"
	ListGitReposIntegrationsIDTypeNumber ListGitReposIntegrationsIDType = "number"
)

type ListGitReposIntegrationsID struct {
	Str    *string
	Number *float64

	Type ListGitReposIntegrationsIDType
}

func CreateListGitReposIntegrationsIDStr(str string) ListGitReposIntegrationsID {
	typ := ListGitReposIntegrationsIDTypeStr

	return ListGitReposIntegrationsID{
		Str:  &str,
		Type: typ,
	}
}

func CreateListGitReposIntegrationsIDNumber(number float64) ListGitReposIntegrationsID {
	typ := ListGitReposIntegrationsIDTypeNumber

	return ListGitReposIntegrationsID{
		Number: &number,
		Type:   typ,
	}
}

func (u *ListGitReposIntegrationsID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ListGitReposIntegrationsIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ListGitReposIntegrationsIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListGitReposIntegrationsID", string(data))
}

func (u ListGitReposIntegrationsID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type ListGitReposIntegrationsID: all fields are null")
}

type Owner struct {
	ID   ListGitReposIntegrationsID `json:"id"`
	Name string                     `json:"name"`
}

func (o *Owner) GetID() ListGitReposIntegrationsID {
	if o == nil {
		return ListGitReposIntegrationsID{}
	}
	return o.ID
}

func (o *Owner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type OwnerType string

const (
	OwnerTypeUser OwnerType = "user"
	OwnerTypeTeam OwnerType = "team"
)

func (e OwnerType) ToPointer() *OwnerType {
	return &e
}
func (e *OwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = OwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OwnerType: %v", v)
	}
}

type Repos struct {
	ID            ListGitReposID                   `json:"id"`
	Provider      ListGitReposIntegrationsProvider `json:"provider"`
	URL           string                           `json:"url"`
	Name          string                           `json:"name"`
	Slug          string                           `json:"slug"`
	Namespace     string                           `json:"namespace"`
	Owner         Owner                            `json:"owner"`
	OwnerType     OwnerType                        `json:"ownerType"`
	Private       bool                             `json:"private"`
	DefaultBranch string                           `json:"defaultBranch"`
	UpdatedAt     float64                          `json:"updatedAt"`
}

func (o *Repos) GetID() ListGitReposID {
	if o == nil {
		return ListGitReposID{}
	}
	return o.ID
}

func (o *Repos) GetProvider() ListGitReposIntegrationsProvider {
	if o == nil {
		return ListGitReposIntegrationsProvider("")
	}
	return o.Provider
}

func (o *Repos) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Repos) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Repos) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Repos) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *Repos) GetOwner() Owner {
	if o == nil {
		return Owner{}
	}
	return o.Owner
}

func (o *Repos) GetOwnerType() OwnerType {
	if o == nil {
		return OwnerType("")
	}
	return o.OwnerType
}

func (o *Repos) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *Repos) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *Repos) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type ListGitReposResponseBody struct {
	GitAccount GitAccount `json:"gitAccount"`
	Repos      []Repos    `json:"repos"`
}

func (o *ListGitReposResponseBody) GetGitAccount() GitAccount {
	if o == nil {
		return GitAccount{}
	}
	return o.GitAccount
}

func (o *ListGitReposResponseBody) GetRepos() []Repos {
	if o == nil {
		return []Repos{}
	}
	return o.Repos
}

type ListGitReposResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	Object      *ListGitReposResponseBody
}

func (o *ListGitReposResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListGitReposResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListGitReposResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListGitReposResponse) GetObject() *ListGitReposResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
